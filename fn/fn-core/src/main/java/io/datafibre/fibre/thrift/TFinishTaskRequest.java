/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TFinishTaskRequest implements org.apache.thrift.TBase<TFinishTaskRequest, TFinishTaskRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TFinishTaskRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFinishTaskRequest");

  private static final org.apache.thrift.protocol.TField BACKEND_FIELD_DESC = new org.apache.thrift.protocol.TField("backend", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("task_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TASK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("task_status", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField REPORT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("report_version", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField FINISH_TABLET_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("finish_tablet_infos", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField TABLET_CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_checksum", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField REQUEST_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("request_version", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField REQUEST_VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("request_version_hash", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SNAPSHOT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshot_path", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ERROR_TABLET_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("error_tablet_ids", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField SNAPSHOT_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshot_files", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField TABLET_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_files", org.apache.thrift.protocol.TType.MAP, (short)13);
  private static final org.apache.thrift.protocol.TField DOWNLOADED_TABLET_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("downloaded_tablet_ids", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField COPY_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("copy_size", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField COPY_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("copy_time_ms", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField TABLET_VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_versions", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField TABLET_PUBLISH_VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_publish_versions", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField INCREMENTAL_SNAPSHOT_FIELD_DESC = new org.apache.thrift.protocol.TField("incremental_snapshot", org.apache.thrift.protocol.TType.BOOL, (short)19);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TFinishTaskRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TFinishTaskRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TBackend backend; // required
  /**
   * 
   * @see io.datafibre.fibre.thrift.TTaskType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTaskType task_type; // required
  public long signature; // required
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TStatus task_status; // required
  public long report_version; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TTabletInfo> finish_tablet_infos; // optional
  public long tablet_checksum; // optional
  public long request_version; // optional
  public long request_version_hash; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String snapshot_path; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> error_tablet_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> snapshot_files; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,java.util.List<java.lang.String>> tablet_files; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> downloaded_tablet_ids; // optional
  public long copy_size; // optional
  public long copy_time_ms; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TTabletVersionPair> tablet_versions; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TTabletVersionPair> tablet_publish_versions; // optional
  public boolean incremental_snapshot; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BACKEND((short)1, "backend"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TTaskType
     */
    TASK_TYPE((short)2, "task_type"),
    SIGNATURE((short)3, "signature"),
    TASK_STATUS((short)4, "task_status"),
    REPORT_VERSION((short)5, "report_version"),
    FINISH_TABLET_INFOS((short)6, "finish_tablet_infos"),
    TABLET_CHECKSUM((short)7, "tablet_checksum"),
    REQUEST_VERSION((short)8, "request_version"),
    REQUEST_VERSION_HASH((short)9, "request_version_hash"),
    SNAPSHOT_PATH((short)10, "snapshot_path"),
    ERROR_TABLET_IDS((short)11, "error_tablet_ids"),
    SNAPSHOT_FILES((short)12, "snapshot_files"),
    TABLET_FILES((short)13, "tablet_files"),
    DOWNLOADED_TABLET_IDS((short)14, "downloaded_tablet_ids"),
    COPY_SIZE((short)15, "copy_size"),
    COPY_TIME_MS((short)16, "copy_time_ms"),
    TABLET_VERSIONS((short)17, "tablet_versions"),
    TABLET_PUBLISH_VERSIONS((short)18, "tablet_publish_versions"),
    INCREMENTAL_SNAPSHOT((short)19, "incremental_snapshot");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BACKEND
          return BACKEND;
        case 2: // TASK_TYPE
          return TASK_TYPE;
        case 3: // SIGNATURE
          return SIGNATURE;
        case 4: // TASK_STATUS
          return TASK_STATUS;
        case 5: // REPORT_VERSION
          return REPORT_VERSION;
        case 6: // FINISH_TABLET_INFOS
          return FINISH_TABLET_INFOS;
        case 7: // TABLET_CHECKSUM
          return TABLET_CHECKSUM;
        case 8: // REQUEST_VERSION
          return REQUEST_VERSION;
        case 9: // REQUEST_VERSION_HASH
          return REQUEST_VERSION_HASH;
        case 10: // SNAPSHOT_PATH
          return SNAPSHOT_PATH;
        case 11: // ERROR_TABLET_IDS
          return ERROR_TABLET_IDS;
        case 12: // SNAPSHOT_FILES
          return SNAPSHOT_FILES;
        case 13: // TABLET_FILES
          return TABLET_FILES;
        case 14: // DOWNLOADED_TABLET_IDS
          return DOWNLOADED_TABLET_IDS;
        case 15: // COPY_SIZE
          return COPY_SIZE;
        case 16: // COPY_TIME_MS
          return COPY_TIME_MS;
        case 17: // TABLET_VERSIONS
          return TABLET_VERSIONS;
        case 18: // TABLET_PUBLISH_VERSIONS
          return TABLET_PUBLISH_VERSIONS;
        case 19: // INCREMENTAL_SNAPSHOT
          return INCREMENTAL_SNAPSHOT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIGNATURE_ISSET_ID = 0;
  private static final int __REPORT_VERSION_ISSET_ID = 1;
  private static final int __TABLET_CHECKSUM_ISSET_ID = 2;
  private static final int __REQUEST_VERSION_ISSET_ID = 3;
  private static final int __REQUEST_VERSION_HASH_ISSET_ID = 4;
  private static final int __COPY_SIZE_ISSET_ID = 5;
  private static final int __COPY_TIME_MS_ISSET_ID = 6;
  private static final int __INCREMENTAL_SNAPSHOT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REPORT_VERSION,_Fields.FINISH_TABLET_INFOS,_Fields.TABLET_CHECKSUM,_Fields.REQUEST_VERSION,_Fields.REQUEST_VERSION_HASH,_Fields.SNAPSHOT_PATH,_Fields.ERROR_TABLET_IDS,_Fields.SNAPSHOT_FILES,_Fields.TABLET_FILES,_Fields.DOWNLOADED_TABLET_IDS,_Fields.COPY_SIZE,_Fields.COPY_TIME_MS,_Fields.TABLET_VERSIONS,_Fields.TABLET_PUBLISH_VERSIONS,_Fields.INCREMENTAL_SNAPSHOT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BACKEND, new org.apache.thrift.meta_data.FieldMetaData("backend", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TBackend.class)));
    tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("task_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TTaskType.class)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TASK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("task_status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TStatus.class)));
    tmpMap.put(_Fields.REPORT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("report_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FINISH_TABLET_INFOS, new org.apache.thrift.meta_data.FieldMetaData("finish_tablet_infos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTabletInfo.class))));
    tmpMap.put(_Fields.TABLET_CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("tablet_checksum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_VERSION, new org.apache.thrift.meta_data.FieldMetaData("request_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("request_version_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SNAPSHOT_PATH, new org.apache.thrift.meta_data.FieldMetaData("snapshot_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR_TABLET_IDS, new org.apache.thrift.meta_data.FieldMetaData("error_tablet_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "TTabletId"))));
    tmpMap.put(_Fields.SNAPSHOT_FILES, new org.apache.thrift.meta_data.FieldMetaData("snapshot_files", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TABLET_FILES, new org.apache.thrift.meta_data.FieldMetaData("tablet_files", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "TTabletId"), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.DOWNLOADED_TABLET_IDS, new org.apache.thrift.meta_data.FieldMetaData("downloaded_tablet_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "TTabletId"))));
    tmpMap.put(_Fields.COPY_SIZE, new org.apache.thrift.meta_data.FieldMetaData("copy_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COPY_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("copy_time_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLET_VERSIONS, new org.apache.thrift.meta_data.FieldMetaData("tablet_versions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTabletVersionPair.class))));
    tmpMap.put(_Fields.TABLET_PUBLISH_VERSIONS, new org.apache.thrift.meta_data.FieldMetaData("tablet_publish_versions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTabletVersionPair.class))));
    tmpMap.put(_Fields.INCREMENTAL_SNAPSHOT, new org.apache.thrift.meta_data.FieldMetaData("incremental_snapshot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFinishTaskRequest.class, metaDataMap);
  }

  public TFinishTaskRequest() {
  }

  public TFinishTaskRequest(
    io.datafibre.fibre.thrift.TBackend backend,
    io.datafibre.fibre.thrift.TTaskType task_type,
    long signature,
    io.datafibre.fibre.thrift.TStatus task_status)
  {
    this();
    this.backend = backend;
    this.task_type = task_type;
    this.signature = signature;
    setSignatureIsSet(true);
    this.task_status = task_status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFinishTaskRequest(TFinishTaskRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBackend()) {
      this.backend = new io.datafibre.fibre.thrift.TBackend(other.backend);
    }
    if (other.isSetTask_type()) {
      this.task_type = other.task_type;
    }
    this.signature = other.signature;
    if (other.isSetTask_status()) {
      this.task_status = new io.datafibre.fibre.thrift.TStatus(other.task_status);
    }
    this.report_version = other.report_version;
    if (other.isSetFinish_tablet_infos()) {
      java.util.List<TTabletInfo> __this__finish_tablet_infos = new java.util.ArrayList<TTabletInfo>(other.finish_tablet_infos.size());
      for (TTabletInfo other_element : other.finish_tablet_infos) {
        __this__finish_tablet_infos.add(new TTabletInfo(other_element));
      }
      this.finish_tablet_infos = __this__finish_tablet_infos;
    }
    this.tablet_checksum = other.tablet_checksum;
    this.request_version = other.request_version;
    this.request_version_hash = other.request_version_hash;
    if (other.isSetSnapshot_path()) {
      this.snapshot_path = other.snapshot_path;
    }
    if (other.isSetError_tablet_ids()) {
      java.util.List<java.lang.Long> __this__error_tablet_ids = new java.util.ArrayList<java.lang.Long>(other.error_tablet_ids.size());
      for (java.lang.Long other_element : other.error_tablet_ids) {
        __this__error_tablet_ids.add(other_element);
      }
      this.error_tablet_ids = __this__error_tablet_ids;
    }
    if (other.isSetSnapshot_files()) {
      java.util.List<java.lang.String> __this__snapshot_files = new java.util.ArrayList<java.lang.String>(other.snapshot_files);
      this.snapshot_files = __this__snapshot_files;
    }
    if (other.isSetTablet_files()) {
      java.util.Map<java.lang.Long,java.util.List<java.lang.String>> __this__tablet_files = new java.util.HashMap<java.lang.Long,java.util.List<java.lang.String>>(other.tablet_files.size());
      for (java.util.Map.Entry<java.lang.Long, java.util.List<java.lang.String>> other_element : other.tablet_files.entrySet()) {

        java.lang.Long other_element_key = other_element.getKey();
        java.util.List<java.lang.String> other_element_value = other_element.getValue();

        java.lang.Long __this__tablet_files_copy_key = other_element_key;

        java.util.List<java.lang.String> __this__tablet_files_copy_value = new java.util.ArrayList<java.lang.String>(other_element_value);

        __this__tablet_files.put(__this__tablet_files_copy_key, __this__tablet_files_copy_value);
      }
      this.tablet_files = __this__tablet_files;
    }
    if (other.isSetDownloaded_tablet_ids()) {
      java.util.List<java.lang.Long> __this__downloaded_tablet_ids = new java.util.ArrayList<java.lang.Long>(other.downloaded_tablet_ids.size());
      for (java.lang.Long other_element : other.downloaded_tablet_ids) {
        __this__downloaded_tablet_ids.add(other_element);
      }
      this.downloaded_tablet_ids = __this__downloaded_tablet_ids;
    }
    this.copy_size = other.copy_size;
    this.copy_time_ms = other.copy_time_ms;
    if (other.isSetTablet_versions()) {
      java.util.List<TTabletVersionPair> __this__tablet_versions = new java.util.ArrayList<TTabletVersionPair>(other.tablet_versions.size());
      for (TTabletVersionPair other_element : other.tablet_versions) {
        __this__tablet_versions.add(new TTabletVersionPair(other_element));
      }
      this.tablet_versions = __this__tablet_versions;
    }
    if (other.isSetTablet_publish_versions()) {
      java.util.List<TTabletVersionPair> __this__tablet_publish_versions = new java.util.ArrayList<TTabletVersionPair>(other.tablet_publish_versions.size());
      for (TTabletVersionPair other_element : other.tablet_publish_versions) {
        __this__tablet_publish_versions.add(new TTabletVersionPair(other_element));
      }
      this.tablet_publish_versions = __this__tablet_publish_versions;
    }
    this.incremental_snapshot = other.incremental_snapshot;
  }

  @Override
  public TFinishTaskRequest deepCopy() {
    return new TFinishTaskRequest(this);
  }

  @Override
  public void clear() {
    this.backend = null;
    this.task_type = null;
    setSignatureIsSet(false);
    this.signature = 0;
    this.task_status = null;
    setReport_versionIsSet(false);
    this.report_version = 0;
    this.finish_tablet_infos = null;
    setTablet_checksumIsSet(false);
    this.tablet_checksum = 0;
    setRequest_versionIsSet(false);
    this.request_version = 0;
    setRequest_version_hashIsSet(false);
    this.request_version_hash = 0;
    this.snapshot_path = null;
    this.error_tablet_ids = null;
    this.snapshot_files = null;
    this.tablet_files = null;
    this.downloaded_tablet_ids = null;
    setCopy_sizeIsSet(false);
    this.copy_size = 0;
    setCopy_time_msIsSet(false);
    this.copy_time_ms = 0;
    this.tablet_versions = null;
    this.tablet_publish_versions = null;
    setIncremental_snapshotIsSet(false);
    this.incremental_snapshot = false;
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TBackend getBackend() {
    return this.backend;
  }

  public TFinishTaskRequest setBackend(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TBackend backend) {
    this.backend = backend;
    return this;
  }

  public void unsetBackend() {
    this.backend = null;
  }

  /** Returns true if field backend is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend() {
    return this.backend != null;
  }

  public void setBackendIsSet(boolean value) {
    if (!value) {
      this.backend = null;
    }
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TTaskType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TTaskType getTask_type() {
    return this.task_type;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TTaskType
   */
  public TFinishTaskRequest setTask_type(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTaskType task_type) {
    this.task_type = task_type;
    return this;
  }

  public void unsetTask_type() {
    this.task_type = null;
  }

  /** Returns true if field task_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_type() {
    return this.task_type != null;
  }

  public void setTask_typeIsSet(boolean value) {
    if (!value) {
      this.task_type = null;
    }
  }

  public long getSignature() {
    return this.signature;
  }

  public TFinishTaskRequest setSignature(long signature) {
    this.signature = signature;
    setSignatureIsSet(true);
    return this;
  }

  public void unsetSignature() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIGNATURE_ISSET_ID);
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIGNATURE_ISSET_ID);
  }

  public void setSignatureIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIGNATURE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TStatus getTask_status() {
    return this.task_status;
  }

  public TFinishTaskRequest setTask_status(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TStatus task_status) {
    this.task_status = task_status;
    return this;
  }

  public void unsetTask_status() {
    this.task_status = null;
  }

  /** Returns true if field task_status is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_status() {
    return this.task_status != null;
  }

  public void setTask_statusIsSet(boolean value) {
    if (!value) {
      this.task_status = null;
    }
  }

  public long getReport_version() {
    return this.report_version;
  }

  public TFinishTaskRequest setReport_version(long report_version) {
    this.report_version = report_version;
    setReport_versionIsSet(true);
    return this;
  }

  public void unsetReport_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPORT_VERSION_ISSET_ID);
  }

  /** Returns true if field report_version is set (has been assigned a value) and false otherwise */
  public boolean isSetReport_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPORT_VERSION_ISSET_ID);
  }

  public void setReport_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPORT_VERSION_ISSET_ID, value);
  }

  public int getFinish_tablet_infosSize() {
    return (this.finish_tablet_infos == null) ? 0 : this.finish_tablet_infos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TTabletInfo> getFinish_tablet_infosIterator() {
    return (this.finish_tablet_infos == null) ? null : this.finish_tablet_infos.iterator();
  }

  public void addToFinish_tablet_infos(TTabletInfo elem) {
    if (this.finish_tablet_infos == null) {
      this.finish_tablet_infos = new java.util.ArrayList<TTabletInfo>();
    }
    this.finish_tablet_infos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TTabletInfo> getFinish_tablet_infos() {
    return this.finish_tablet_infos;
  }

  public TFinishTaskRequest setFinish_tablet_infos(@org.apache.thrift.annotation.Nullable java.util.List<TTabletInfo> finish_tablet_infos) {
    this.finish_tablet_infos = finish_tablet_infos;
    return this;
  }

  public void unsetFinish_tablet_infos() {
    this.finish_tablet_infos = null;
  }

  /** Returns true if field finish_tablet_infos is set (has been assigned a value) and false otherwise */
  public boolean isSetFinish_tablet_infos() {
    return this.finish_tablet_infos != null;
  }

  public void setFinish_tablet_infosIsSet(boolean value) {
    if (!value) {
      this.finish_tablet_infos = null;
    }
  }

  public long getTablet_checksum() {
    return this.tablet_checksum;
  }

  public TFinishTaskRequest setTablet_checksum(long tablet_checksum) {
    this.tablet_checksum = tablet_checksum;
    setTablet_checksumIsSet(true);
    return this;
  }

  public void unsetTablet_checksum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_CHECKSUM_ISSET_ID);
  }

  /** Returns true if field tablet_checksum is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_checksum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_CHECKSUM_ISSET_ID);
  }

  public void setTablet_checksumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_CHECKSUM_ISSET_ID, value);
  }

  public long getRequest_version() {
    return this.request_version;
  }

  public TFinishTaskRequest setRequest_version(long request_version) {
    this.request_version = request_version;
    setRequest_versionIsSet(true);
    return this;
  }

  public void unsetRequest_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUEST_VERSION_ISSET_ID);
  }

  /** Returns true if field request_version is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUEST_VERSION_ISSET_ID);
  }

  public void setRequest_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUEST_VERSION_ISSET_ID, value);
  }

  public long getRequest_version_hash() {
    return this.request_version_hash;
  }

  public TFinishTaskRequest setRequest_version_hash(long request_version_hash) {
    this.request_version_hash = request_version_hash;
    setRequest_version_hashIsSet(true);
    return this;
  }

  public void unsetRequest_version_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUEST_VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field request_version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_version_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUEST_VERSION_HASH_ISSET_ID);
  }

  public void setRequest_version_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUEST_VERSION_HASH_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSnapshot_path() {
    return this.snapshot_path;
  }

  public TFinishTaskRequest setSnapshot_path(@org.apache.thrift.annotation.Nullable java.lang.String snapshot_path) {
    this.snapshot_path = snapshot_path;
    return this;
  }

  public void unsetSnapshot_path() {
    this.snapshot_path = null;
  }

  /** Returns true if field snapshot_path is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshot_path() {
    return this.snapshot_path != null;
  }

  public void setSnapshot_pathIsSet(boolean value) {
    if (!value) {
      this.snapshot_path = null;
    }
  }

  public int getError_tablet_idsSize() {
    return (this.error_tablet_ids == null) ? 0 : this.error_tablet_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getError_tablet_idsIterator() {
    return (this.error_tablet_ids == null) ? null : this.error_tablet_ids.iterator();
  }

  public void addToError_tablet_ids(long elem) {
    if (this.error_tablet_ids == null) {
      this.error_tablet_ids = new java.util.ArrayList<java.lang.Long>();
    }
    this.error_tablet_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getError_tablet_ids() {
    return this.error_tablet_ids;
  }

  public TFinishTaskRequest setError_tablet_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> error_tablet_ids) {
    this.error_tablet_ids = error_tablet_ids;
    return this;
  }

  public void unsetError_tablet_ids() {
    this.error_tablet_ids = null;
  }

  /** Returns true if field error_tablet_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetError_tablet_ids() {
    return this.error_tablet_ids != null;
  }

  public void setError_tablet_idsIsSet(boolean value) {
    if (!value) {
      this.error_tablet_ids = null;
    }
  }

  public int getSnapshot_filesSize() {
    return (this.snapshot_files == null) ? 0 : this.snapshot_files.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getSnapshot_filesIterator() {
    return (this.snapshot_files == null) ? null : this.snapshot_files.iterator();
  }

  public void addToSnapshot_files(java.lang.String elem) {
    if (this.snapshot_files == null) {
      this.snapshot_files = new java.util.ArrayList<java.lang.String>();
    }
    this.snapshot_files.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getSnapshot_files() {
    return this.snapshot_files;
  }

  public TFinishTaskRequest setSnapshot_files(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> snapshot_files) {
    this.snapshot_files = snapshot_files;
    return this;
  }

  public void unsetSnapshot_files() {
    this.snapshot_files = null;
  }

  /** Returns true if field snapshot_files is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshot_files() {
    return this.snapshot_files != null;
  }

  public void setSnapshot_filesIsSet(boolean value) {
    if (!value) {
      this.snapshot_files = null;
    }
  }

  public int getTablet_filesSize() {
    return (this.tablet_files == null) ? 0 : this.tablet_files.size();
  }

  public void putToTablet_files(long key, java.util.List<java.lang.String> val) {
    if (this.tablet_files == null) {
      this.tablet_files = new java.util.HashMap<java.lang.Long,java.util.List<java.lang.String>>();
    }
    this.tablet_files.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Long,java.util.List<java.lang.String>> getTablet_files() {
    return this.tablet_files;
  }

  public TFinishTaskRequest setTablet_files(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,java.util.List<java.lang.String>> tablet_files) {
    this.tablet_files = tablet_files;
    return this;
  }

  public void unsetTablet_files() {
    this.tablet_files = null;
  }

  /** Returns true if field tablet_files is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_files() {
    return this.tablet_files != null;
  }

  public void setTablet_filesIsSet(boolean value) {
    if (!value) {
      this.tablet_files = null;
    }
  }

  public int getDownloaded_tablet_idsSize() {
    return (this.downloaded_tablet_ids == null) ? 0 : this.downloaded_tablet_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getDownloaded_tablet_idsIterator() {
    return (this.downloaded_tablet_ids == null) ? null : this.downloaded_tablet_ids.iterator();
  }

  public void addToDownloaded_tablet_ids(long elem) {
    if (this.downloaded_tablet_ids == null) {
      this.downloaded_tablet_ids = new java.util.ArrayList<java.lang.Long>();
    }
    this.downloaded_tablet_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getDownloaded_tablet_ids() {
    return this.downloaded_tablet_ids;
  }

  public TFinishTaskRequest setDownloaded_tablet_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> downloaded_tablet_ids) {
    this.downloaded_tablet_ids = downloaded_tablet_ids;
    return this;
  }

  public void unsetDownloaded_tablet_ids() {
    this.downloaded_tablet_ids = null;
  }

  /** Returns true if field downloaded_tablet_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetDownloaded_tablet_ids() {
    return this.downloaded_tablet_ids != null;
  }

  public void setDownloaded_tablet_idsIsSet(boolean value) {
    if (!value) {
      this.downloaded_tablet_ids = null;
    }
  }

  public long getCopy_size() {
    return this.copy_size;
  }

  public TFinishTaskRequest setCopy_size(long copy_size) {
    this.copy_size = copy_size;
    setCopy_sizeIsSet(true);
    return this;
  }

  public void unsetCopy_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COPY_SIZE_ISSET_ID);
  }

  /** Returns true if field copy_size is set (has been assigned a value) and false otherwise */
  public boolean isSetCopy_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COPY_SIZE_ISSET_ID);
  }

  public void setCopy_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COPY_SIZE_ISSET_ID, value);
  }

  public long getCopy_time_ms() {
    return this.copy_time_ms;
  }

  public TFinishTaskRequest setCopy_time_ms(long copy_time_ms) {
    this.copy_time_ms = copy_time_ms;
    setCopy_time_msIsSet(true);
    return this;
  }

  public void unsetCopy_time_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COPY_TIME_MS_ISSET_ID);
  }

  /** Returns true if field copy_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetCopy_time_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COPY_TIME_MS_ISSET_ID);
  }

  public void setCopy_time_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COPY_TIME_MS_ISSET_ID, value);
  }

  public int getTablet_versionsSize() {
    return (this.tablet_versions == null) ? 0 : this.tablet_versions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TTabletVersionPair> getTablet_versionsIterator() {
    return (this.tablet_versions == null) ? null : this.tablet_versions.iterator();
  }

  public void addToTablet_versions(TTabletVersionPair elem) {
    if (this.tablet_versions == null) {
      this.tablet_versions = new java.util.ArrayList<TTabletVersionPair>();
    }
    this.tablet_versions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TTabletVersionPair> getTablet_versions() {
    return this.tablet_versions;
  }

  public TFinishTaskRequest setTablet_versions(@org.apache.thrift.annotation.Nullable java.util.List<TTabletVersionPair> tablet_versions) {
    this.tablet_versions = tablet_versions;
    return this;
  }

  public void unsetTablet_versions() {
    this.tablet_versions = null;
  }

  /** Returns true if field tablet_versions is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_versions() {
    return this.tablet_versions != null;
  }

  public void setTablet_versionsIsSet(boolean value) {
    if (!value) {
      this.tablet_versions = null;
    }
  }

  public int getTablet_publish_versionsSize() {
    return (this.tablet_publish_versions == null) ? 0 : this.tablet_publish_versions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TTabletVersionPair> getTablet_publish_versionsIterator() {
    return (this.tablet_publish_versions == null) ? null : this.tablet_publish_versions.iterator();
  }

  public void addToTablet_publish_versions(TTabletVersionPair elem) {
    if (this.tablet_publish_versions == null) {
      this.tablet_publish_versions = new java.util.ArrayList<TTabletVersionPair>();
    }
    this.tablet_publish_versions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TTabletVersionPair> getTablet_publish_versions() {
    return this.tablet_publish_versions;
  }

  public TFinishTaskRequest setTablet_publish_versions(@org.apache.thrift.annotation.Nullable java.util.List<TTabletVersionPair> tablet_publish_versions) {
    this.tablet_publish_versions = tablet_publish_versions;
    return this;
  }

  public void unsetTablet_publish_versions() {
    this.tablet_publish_versions = null;
  }

  /** Returns true if field tablet_publish_versions is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_publish_versions() {
    return this.tablet_publish_versions != null;
  }

  public void setTablet_publish_versionsIsSet(boolean value) {
    if (!value) {
      this.tablet_publish_versions = null;
    }
  }

  public boolean isIncremental_snapshot() {
    return this.incremental_snapshot;
  }

  public TFinishTaskRequest setIncremental_snapshot(boolean incremental_snapshot) {
    this.incremental_snapshot = incremental_snapshot;
    setIncremental_snapshotIsSet(true);
    return this;
  }

  public void unsetIncremental_snapshot() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INCREMENTAL_SNAPSHOT_ISSET_ID);
  }

  /** Returns true if field incremental_snapshot is set (has been assigned a value) and false otherwise */
  public boolean isSetIncremental_snapshot() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INCREMENTAL_SNAPSHOT_ISSET_ID);
  }

  public void setIncremental_snapshotIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INCREMENTAL_SNAPSHOT_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case BACKEND:
      if (value == null) {
        unsetBackend();
      } else {
        setBackend((io.datafibre.fibre.thrift.TBackend)value);
      }
      break;

    case TASK_TYPE:
      if (value == null) {
        unsetTask_type();
      } else {
        setTask_type((io.datafibre.fibre.thrift.TTaskType)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((java.lang.Long)value);
      }
      break;

    case TASK_STATUS:
      if (value == null) {
        unsetTask_status();
      } else {
        setTask_status((io.datafibre.fibre.thrift.TStatus)value);
      }
      break;

    case REPORT_VERSION:
      if (value == null) {
        unsetReport_version();
      } else {
        setReport_version((java.lang.Long)value);
      }
      break;

    case FINISH_TABLET_INFOS:
      if (value == null) {
        unsetFinish_tablet_infos();
      } else {
        setFinish_tablet_infos((java.util.List<TTabletInfo>)value);
      }
      break;

    case TABLET_CHECKSUM:
      if (value == null) {
        unsetTablet_checksum();
      } else {
        setTablet_checksum((java.lang.Long)value);
      }
      break;

    case REQUEST_VERSION:
      if (value == null) {
        unsetRequest_version();
      } else {
        setRequest_version((java.lang.Long)value);
      }
      break;

    case REQUEST_VERSION_HASH:
      if (value == null) {
        unsetRequest_version_hash();
      } else {
        setRequest_version_hash((java.lang.Long)value);
      }
      break;

    case SNAPSHOT_PATH:
      if (value == null) {
        unsetSnapshot_path();
      } else {
        setSnapshot_path((java.lang.String)value);
      }
      break;

    case ERROR_TABLET_IDS:
      if (value == null) {
        unsetError_tablet_ids();
      } else {
        setError_tablet_ids((java.util.List<java.lang.Long>)value);
      }
      break;

    case SNAPSHOT_FILES:
      if (value == null) {
        unsetSnapshot_files();
      } else {
        setSnapshot_files((java.util.List<java.lang.String>)value);
      }
      break;

    case TABLET_FILES:
      if (value == null) {
        unsetTablet_files();
      } else {
        setTablet_files((java.util.Map<java.lang.Long,java.util.List<java.lang.String>>)value);
      }
      break;

    case DOWNLOADED_TABLET_IDS:
      if (value == null) {
        unsetDownloaded_tablet_ids();
      } else {
        setDownloaded_tablet_ids((java.util.List<java.lang.Long>)value);
      }
      break;

    case COPY_SIZE:
      if (value == null) {
        unsetCopy_size();
      } else {
        setCopy_size((java.lang.Long)value);
      }
      break;

    case COPY_TIME_MS:
      if (value == null) {
        unsetCopy_time_ms();
      } else {
        setCopy_time_ms((java.lang.Long)value);
      }
      break;

    case TABLET_VERSIONS:
      if (value == null) {
        unsetTablet_versions();
      } else {
        setTablet_versions((java.util.List<TTabletVersionPair>)value);
      }
      break;

    case TABLET_PUBLISH_VERSIONS:
      if (value == null) {
        unsetTablet_publish_versions();
      } else {
        setTablet_publish_versions((java.util.List<TTabletVersionPair>)value);
      }
      break;

    case INCREMENTAL_SNAPSHOT:
      if (value == null) {
        unsetIncremental_snapshot();
      } else {
        setIncremental_snapshot((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BACKEND:
      return getBackend();

    case TASK_TYPE:
      return getTask_type();

    case SIGNATURE:
      return getSignature();

    case TASK_STATUS:
      return getTask_status();

    case REPORT_VERSION:
      return getReport_version();

    case FINISH_TABLET_INFOS:
      return getFinish_tablet_infos();

    case TABLET_CHECKSUM:
      return getTablet_checksum();

    case REQUEST_VERSION:
      return getRequest_version();

    case REQUEST_VERSION_HASH:
      return getRequest_version_hash();

    case SNAPSHOT_PATH:
      return getSnapshot_path();

    case ERROR_TABLET_IDS:
      return getError_tablet_ids();

    case SNAPSHOT_FILES:
      return getSnapshot_files();

    case TABLET_FILES:
      return getTablet_files();

    case DOWNLOADED_TABLET_IDS:
      return getDownloaded_tablet_ids();

    case COPY_SIZE:
      return getCopy_size();

    case COPY_TIME_MS:
      return getCopy_time_ms();

    case TABLET_VERSIONS:
      return getTablet_versions();

    case TABLET_PUBLISH_VERSIONS:
      return getTablet_publish_versions();

    case INCREMENTAL_SNAPSHOT:
      return isIncremental_snapshot();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BACKEND:
      return isSetBackend();
    case TASK_TYPE:
      return isSetTask_type();
    case SIGNATURE:
      return isSetSignature();
    case TASK_STATUS:
      return isSetTask_status();
    case REPORT_VERSION:
      return isSetReport_version();
    case FINISH_TABLET_INFOS:
      return isSetFinish_tablet_infos();
    case TABLET_CHECKSUM:
      return isSetTablet_checksum();
    case REQUEST_VERSION:
      return isSetRequest_version();
    case REQUEST_VERSION_HASH:
      return isSetRequest_version_hash();
    case SNAPSHOT_PATH:
      return isSetSnapshot_path();
    case ERROR_TABLET_IDS:
      return isSetError_tablet_ids();
    case SNAPSHOT_FILES:
      return isSetSnapshot_files();
    case TABLET_FILES:
      return isSetTablet_files();
    case DOWNLOADED_TABLET_IDS:
      return isSetDownloaded_tablet_ids();
    case COPY_SIZE:
      return isSetCopy_size();
    case COPY_TIME_MS:
      return isSetCopy_time_ms();
    case TABLET_VERSIONS:
      return isSetTablet_versions();
    case TABLET_PUBLISH_VERSIONS:
      return isSetTablet_publish_versions();
    case INCREMENTAL_SNAPSHOT:
      return isSetIncremental_snapshot();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TFinishTaskRequest)
      return this.equals((TFinishTaskRequest)that);
    return false;
  }

  public boolean equals(TFinishTaskRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_backend = true && this.isSetBackend();
    boolean that_present_backend = true && that.isSetBackend();
    if (this_present_backend || that_present_backend) {
      if (!(this_present_backend && that_present_backend))
        return false;
      if (!this.backend.equals(that.backend))
        return false;
    }

    boolean this_present_task_type = true && this.isSetTask_type();
    boolean that_present_task_type = true && that.isSetTask_type();
    if (this_present_task_type || that_present_task_type) {
      if (!(this_present_task_type && that_present_task_type))
        return false;
      if (!this.task_type.equals(that.task_type))
        return false;
    }

    boolean this_present_signature = true;
    boolean that_present_signature = true;
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (this.signature != that.signature)
        return false;
    }

    boolean this_present_task_status = true && this.isSetTask_status();
    boolean that_present_task_status = true && that.isSetTask_status();
    if (this_present_task_status || that_present_task_status) {
      if (!(this_present_task_status && that_present_task_status))
        return false;
      if (!this.task_status.equals(that.task_status))
        return false;
    }

    boolean this_present_report_version = true && this.isSetReport_version();
    boolean that_present_report_version = true && that.isSetReport_version();
    if (this_present_report_version || that_present_report_version) {
      if (!(this_present_report_version && that_present_report_version))
        return false;
      if (this.report_version != that.report_version)
        return false;
    }

    boolean this_present_finish_tablet_infos = true && this.isSetFinish_tablet_infos();
    boolean that_present_finish_tablet_infos = true && that.isSetFinish_tablet_infos();
    if (this_present_finish_tablet_infos || that_present_finish_tablet_infos) {
      if (!(this_present_finish_tablet_infos && that_present_finish_tablet_infos))
        return false;
      if (!this.finish_tablet_infos.equals(that.finish_tablet_infos))
        return false;
    }

    boolean this_present_tablet_checksum = true && this.isSetTablet_checksum();
    boolean that_present_tablet_checksum = true && that.isSetTablet_checksum();
    if (this_present_tablet_checksum || that_present_tablet_checksum) {
      if (!(this_present_tablet_checksum && that_present_tablet_checksum))
        return false;
      if (this.tablet_checksum != that.tablet_checksum)
        return false;
    }

    boolean this_present_request_version = true && this.isSetRequest_version();
    boolean that_present_request_version = true && that.isSetRequest_version();
    if (this_present_request_version || that_present_request_version) {
      if (!(this_present_request_version && that_present_request_version))
        return false;
      if (this.request_version != that.request_version)
        return false;
    }

    boolean this_present_request_version_hash = true && this.isSetRequest_version_hash();
    boolean that_present_request_version_hash = true && that.isSetRequest_version_hash();
    if (this_present_request_version_hash || that_present_request_version_hash) {
      if (!(this_present_request_version_hash && that_present_request_version_hash))
        return false;
      if (this.request_version_hash != that.request_version_hash)
        return false;
    }

    boolean this_present_snapshot_path = true && this.isSetSnapshot_path();
    boolean that_present_snapshot_path = true && that.isSetSnapshot_path();
    if (this_present_snapshot_path || that_present_snapshot_path) {
      if (!(this_present_snapshot_path && that_present_snapshot_path))
        return false;
      if (!this.snapshot_path.equals(that.snapshot_path))
        return false;
    }

    boolean this_present_error_tablet_ids = true && this.isSetError_tablet_ids();
    boolean that_present_error_tablet_ids = true && that.isSetError_tablet_ids();
    if (this_present_error_tablet_ids || that_present_error_tablet_ids) {
      if (!(this_present_error_tablet_ids && that_present_error_tablet_ids))
        return false;
      if (!this.error_tablet_ids.equals(that.error_tablet_ids))
        return false;
    }

    boolean this_present_snapshot_files = true && this.isSetSnapshot_files();
    boolean that_present_snapshot_files = true && that.isSetSnapshot_files();
    if (this_present_snapshot_files || that_present_snapshot_files) {
      if (!(this_present_snapshot_files && that_present_snapshot_files))
        return false;
      if (!this.snapshot_files.equals(that.snapshot_files))
        return false;
    }

    boolean this_present_tablet_files = true && this.isSetTablet_files();
    boolean that_present_tablet_files = true && that.isSetTablet_files();
    if (this_present_tablet_files || that_present_tablet_files) {
      if (!(this_present_tablet_files && that_present_tablet_files))
        return false;
      if (!this.tablet_files.equals(that.tablet_files))
        return false;
    }

    boolean this_present_downloaded_tablet_ids = true && this.isSetDownloaded_tablet_ids();
    boolean that_present_downloaded_tablet_ids = true && that.isSetDownloaded_tablet_ids();
    if (this_present_downloaded_tablet_ids || that_present_downloaded_tablet_ids) {
      if (!(this_present_downloaded_tablet_ids && that_present_downloaded_tablet_ids))
        return false;
      if (!this.downloaded_tablet_ids.equals(that.downloaded_tablet_ids))
        return false;
    }

    boolean this_present_copy_size = true && this.isSetCopy_size();
    boolean that_present_copy_size = true && that.isSetCopy_size();
    if (this_present_copy_size || that_present_copy_size) {
      if (!(this_present_copy_size && that_present_copy_size))
        return false;
      if (this.copy_size != that.copy_size)
        return false;
    }

    boolean this_present_copy_time_ms = true && this.isSetCopy_time_ms();
    boolean that_present_copy_time_ms = true && that.isSetCopy_time_ms();
    if (this_present_copy_time_ms || that_present_copy_time_ms) {
      if (!(this_present_copy_time_ms && that_present_copy_time_ms))
        return false;
      if (this.copy_time_ms != that.copy_time_ms)
        return false;
    }

    boolean this_present_tablet_versions = true && this.isSetTablet_versions();
    boolean that_present_tablet_versions = true && that.isSetTablet_versions();
    if (this_present_tablet_versions || that_present_tablet_versions) {
      if (!(this_present_tablet_versions && that_present_tablet_versions))
        return false;
      if (!this.tablet_versions.equals(that.tablet_versions))
        return false;
    }

    boolean this_present_tablet_publish_versions = true && this.isSetTablet_publish_versions();
    boolean that_present_tablet_publish_versions = true && that.isSetTablet_publish_versions();
    if (this_present_tablet_publish_versions || that_present_tablet_publish_versions) {
      if (!(this_present_tablet_publish_versions && that_present_tablet_publish_versions))
        return false;
      if (!this.tablet_publish_versions.equals(that.tablet_publish_versions))
        return false;
    }

    boolean this_present_incremental_snapshot = true && this.isSetIncremental_snapshot();
    boolean that_present_incremental_snapshot = true && that.isSetIncremental_snapshot();
    if (this_present_incremental_snapshot || that_present_incremental_snapshot) {
      if (!(this_present_incremental_snapshot && that_present_incremental_snapshot))
        return false;
      if (this.incremental_snapshot != that.incremental_snapshot)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBackend()) ? 131071 : 524287);
    if (isSetBackend())
      hashCode = hashCode * 8191 + backend.hashCode();

    hashCode = hashCode * 8191 + ((isSetTask_type()) ? 131071 : 524287);
    if (isSetTask_type())
      hashCode = hashCode * 8191 + task_type.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(signature);

    hashCode = hashCode * 8191 + ((isSetTask_status()) ? 131071 : 524287);
    if (isSetTask_status())
      hashCode = hashCode * 8191 + task_status.hashCode();

    hashCode = hashCode * 8191 + ((isSetReport_version()) ? 131071 : 524287);
    if (isSetReport_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(report_version);

    hashCode = hashCode * 8191 + ((isSetFinish_tablet_infos()) ? 131071 : 524287);
    if (isSetFinish_tablet_infos())
      hashCode = hashCode * 8191 + finish_tablet_infos.hashCode();

    hashCode = hashCode * 8191 + ((isSetTablet_checksum()) ? 131071 : 524287);
    if (isSetTablet_checksum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tablet_checksum);

    hashCode = hashCode * 8191 + ((isSetRequest_version()) ? 131071 : 524287);
    if (isSetRequest_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(request_version);

    hashCode = hashCode * 8191 + ((isSetRequest_version_hash()) ? 131071 : 524287);
    if (isSetRequest_version_hash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(request_version_hash);

    hashCode = hashCode * 8191 + ((isSetSnapshot_path()) ? 131071 : 524287);
    if (isSetSnapshot_path())
      hashCode = hashCode * 8191 + snapshot_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetError_tablet_ids()) ? 131071 : 524287);
    if (isSetError_tablet_ids())
      hashCode = hashCode * 8191 + error_tablet_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetSnapshot_files()) ? 131071 : 524287);
    if (isSetSnapshot_files())
      hashCode = hashCode * 8191 + snapshot_files.hashCode();

    hashCode = hashCode * 8191 + ((isSetTablet_files()) ? 131071 : 524287);
    if (isSetTablet_files())
      hashCode = hashCode * 8191 + tablet_files.hashCode();

    hashCode = hashCode * 8191 + ((isSetDownloaded_tablet_ids()) ? 131071 : 524287);
    if (isSetDownloaded_tablet_ids())
      hashCode = hashCode * 8191 + downloaded_tablet_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetCopy_size()) ? 131071 : 524287);
    if (isSetCopy_size())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(copy_size);

    hashCode = hashCode * 8191 + ((isSetCopy_time_ms()) ? 131071 : 524287);
    if (isSetCopy_time_ms())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(copy_time_ms);

    hashCode = hashCode * 8191 + ((isSetTablet_versions()) ? 131071 : 524287);
    if (isSetTablet_versions())
      hashCode = hashCode * 8191 + tablet_versions.hashCode();

    hashCode = hashCode * 8191 + ((isSetTablet_publish_versions()) ? 131071 : 524287);
    if (isSetTablet_publish_versions())
      hashCode = hashCode * 8191 + tablet_publish_versions.hashCode();

    hashCode = hashCode * 8191 + ((isSetIncremental_snapshot()) ? 131071 : 524287);
    if (isSetIncremental_snapshot())
      hashCode = hashCode * 8191 + ((incremental_snapshot) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TFinishTaskRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetBackend(), other.isSetBackend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend, other.backend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTask_type(), other.isSetTask_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_type, other.task_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSignature(), other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTask_status(), other.isSetTask_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_status, other.task_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReport_version(), other.isSetReport_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReport_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.report_version, other.report_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFinish_tablet_infos(), other.isSetFinish_tablet_infos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinish_tablet_infos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish_tablet_infos, other.finish_tablet_infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_checksum(), other.isSetTablet_checksum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_checksum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_checksum, other.tablet_checksum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRequest_version(), other.isSetRequest_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_version, other.request_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRequest_version_hash(), other.isSetRequest_version_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_version_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_version_hash, other.request_version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSnapshot_path(), other.isSetSnapshot_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshot_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshot_path, other.snapshot_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetError_tablet_ids(), other.isSetError_tablet_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_tablet_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_tablet_ids, other.error_tablet_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSnapshot_files(), other.isSetSnapshot_files());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshot_files()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshot_files, other.snapshot_files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_files(), other.isSetTablet_files());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_files()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_files, other.tablet_files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDownloaded_tablet_ids(), other.isSetDownloaded_tablet_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownloaded_tablet_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloaded_tablet_ids, other.downloaded_tablet_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCopy_size(), other.isSetCopy_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCopy_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.copy_size, other.copy_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCopy_time_ms(), other.isSetCopy_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCopy_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.copy_time_ms, other.copy_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_versions(), other.isSetTablet_versions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_versions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_versions, other.tablet_versions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_publish_versions(), other.isSetTablet_publish_versions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_publish_versions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_publish_versions, other.tablet_publish_versions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIncremental_snapshot(), other.isSetIncremental_snapshot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncremental_snapshot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incremental_snapshot, other.incremental_snapshot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TFinishTaskRequest(");
    boolean first = true;

    sb.append("backend:");
    if (this.backend == null) {
      sb.append("null");
    } else {
      sb.append(this.backend);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("task_type:");
    if (this.task_type == null) {
      sb.append("null");
    } else {
      sb.append(this.task_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signature:");
    sb.append(this.signature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("task_status:");
    if (this.task_status == null) {
      sb.append("null");
    } else {
      sb.append(this.task_status);
    }
    first = false;
    if (isSetReport_version()) {
      if (!first) sb.append(", ");
      sb.append("report_version:");
      sb.append(this.report_version);
      first = false;
    }
    if (isSetFinish_tablet_infos()) {
      if (!first) sb.append(", ");
      sb.append("finish_tablet_infos:");
      if (this.finish_tablet_infos == null) {
        sb.append("null");
      } else {
        sb.append(this.finish_tablet_infos);
      }
      first = false;
    }
    if (isSetTablet_checksum()) {
      if (!first) sb.append(", ");
      sb.append("tablet_checksum:");
      sb.append(this.tablet_checksum);
      first = false;
    }
    if (isSetRequest_version()) {
      if (!first) sb.append(", ");
      sb.append("request_version:");
      sb.append(this.request_version);
      first = false;
    }
    if (isSetRequest_version_hash()) {
      if (!first) sb.append(", ");
      sb.append("request_version_hash:");
      sb.append(this.request_version_hash);
      first = false;
    }
    if (isSetSnapshot_path()) {
      if (!first) sb.append(", ");
      sb.append("snapshot_path:");
      if (this.snapshot_path == null) {
        sb.append("null");
      } else {
        sb.append(this.snapshot_path);
      }
      first = false;
    }
    if (isSetError_tablet_ids()) {
      if (!first) sb.append(", ");
      sb.append("error_tablet_ids:");
      if (this.error_tablet_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.error_tablet_ids);
      }
      first = false;
    }
    if (isSetSnapshot_files()) {
      if (!first) sb.append(", ");
      sb.append("snapshot_files:");
      if (this.snapshot_files == null) {
        sb.append("null");
      } else {
        sb.append(this.snapshot_files);
      }
      first = false;
    }
    if (isSetTablet_files()) {
      if (!first) sb.append(", ");
      sb.append("tablet_files:");
      if (this.tablet_files == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet_files);
      }
      first = false;
    }
    if (isSetDownloaded_tablet_ids()) {
      if (!first) sb.append(", ");
      sb.append("downloaded_tablet_ids:");
      if (this.downloaded_tablet_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.downloaded_tablet_ids);
      }
      first = false;
    }
    if (isSetCopy_size()) {
      if (!first) sb.append(", ");
      sb.append("copy_size:");
      sb.append(this.copy_size);
      first = false;
    }
    if (isSetCopy_time_ms()) {
      if (!first) sb.append(", ");
      sb.append("copy_time_ms:");
      sb.append(this.copy_time_ms);
      first = false;
    }
    if (isSetTablet_versions()) {
      if (!first) sb.append(", ");
      sb.append("tablet_versions:");
      if (this.tablet_versions == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet_versions);
      }
      first = false;
    }
    if (isSetTablet_publish_versions()) {
      if (!first) sb.append(", ");
      sb.append("tablet_publish_versions:");
      if (this.tablet_publish_versions == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet_publish_versions);
      }
      first = false;
    }
    if (isSetIncremental_snapshot()) {
      if (!first) sb.append(", ");
      sb.append("incremental_snapshot:");
      sb.append(this.incremental_snapshot);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (backend == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'backend' was not present! Struct: " + toString());
    }
    if (task_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'task_type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'signature' because it's a primitive and you chose the non-beans generator.
    if (task_status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'task_status' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (backend != null) {
      backend.validate();
    }
    if (task_status != null) {
      task_status.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFinishTaskRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TFinishTaskRequestStandardScheme getScheme() {
      return new TFinishTaskRequestStandardScheme();
    }
  }

  private static class TFinishTaskRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TFinishTaskRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TFinishTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BACKEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.backend = new io.datafibre.fibre.thrift.TBackend();
              struct.backend.read(iprot);
              struct.setBackendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.task_type = io.datafibre.fibre.thrift.TTaskType.findByValue(iprot.readI32());
              struct.setTask_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.signature = iprot.readI64();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TASK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.task_status = new io.datafibre.fibre.thrift.TStatus();
              struct.task_status.read(iprot);
              struct.setTask_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPORT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.report_version = iprot.readI64();
              struct.setReport_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FINISH_TABLET_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.finish_tablet_infos = new java.util.ArrayList<TTabletInfo>(_list8.size);
                @org.apache.thrift.annotation.Nullable TTabletInfo _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new TTabletInfo();
                  _elem9.read(iprot);
                  struct.finish_tablet_infos.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setFinish_tablet_infosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TABLET_CHECKSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_checksum = iprot.readI64();
              struct.setTablet_checksumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REQUEST_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.request_version = iprot.readI64();
              struct.setRequest_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REQUEST_VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.request_version_hash = iprot.readI64();
              struct.setRequest_version_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SNAPSHOT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.snapshot_path = iprot.readString();
              struct.setSnapshot_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ERROR_TABLET_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.error_tablet_ids = new java.util.ArrayList<java.lang.Long>(_list11.size);
                long _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = iprot.readI64();
                  struct.error_tablet_ids.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setError_tablet_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SNAPSHOT_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.snapshot_files = new java.util.ArrayList<java.lang.String>(_list14.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = iprot.readString();
                  struct.snapshot_files.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setSnapshot_filesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TABLET_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map17 = iprot.readMapBegin();
                struct.tablet_files = new java.util.HashMap<java.lang.Long,java.util.List<java.lang.String>>(2*_map17.size);
                long _key18;
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val19;
                for (int _i20 = 0; _i20 < _map17.size; ++_i20)
                {
                  _key18 = iprot.readI64();
                  {
                    org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                    _val19 = new java.util.ArrayList<java.lang.String>(_list21.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem22;
                    for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                    {
                      _elem22 = iprot.readString();
                      _val19.add(_elem22);
                    }
                    iprot.readListEnd();
                  }
                  struct.tablet_files.put(_key18, _val19);
                }
                iprot.readMapEnd();
              }
              struct.setTablet_filesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DOWNLOADED_TABLET_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.downloaded_tablet_ids = new java.util.ArrayList<java.lang.Long>(_list24.size);
                long _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readI64();
                  struct.downloaded_tablet_ids.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setDownloaded_tablet_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COPY_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.copy_size = iprot.readI64();
              struct.setCopy_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // COPY_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.copy_time_ms = iprot.readI64();
              struct.setCopy_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TABLET_VERSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.tablet_versions = new java.util.ArrayList<TTabletVersionPair>(_list27.size);
                @org.apache.thrift.annotation.Nullable TTabletVersionPair _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = new TTabletVersionPair();
                  _elem28.read(iprot);
                  struct.tablet_versions.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setTablet_versionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TABLET_PUBLISH_VERSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.tablet_publish_versions = new java.util.ArrayList<TTabletVersionPair>(_list30.size);
                @org.apache.thrift.annotation.Nullable TTabletVersionPair _elem31;
                for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                {
                  _elem31 = new TTabletVersionPair();
                  _elem31.read(iprot);
                  struct.tablet_publish_versions.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setTablet_publish_versionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // INCREMENTAL_SNAPSHOT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.incremental_snapshot = iprot.readBool();
              struct.setIncremental_snapshotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSignature()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'signature' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TFinishTaskRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.backend != null) {
        oprot.writeFieldBegin(BACKEND_FIELD_DESC);
        struct.backend.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.task_type != null) {
        oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
        oprot.writeI32(struct.task_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
      oprot.writeI64(struct.signature);
      oprot.writeFieldEnd();
      if (struct.task_status != null) {
        oprot.writeFieldBegin(TASK_STATUS_FIELD_DESC);
        struct.task_status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReport_version()) {
        oprot.writeFieldBegin(REPORT_VERSION_FIELD_DESC);
        oprot.writeI64(struct.report_version);
        oprot.writeFieldEnd();
      }
      if (struct.finish_tablet_infos != null) {
        if (struct.isSetFinish_tablet_infos()) {
          oprot.writeFieldBegin(FINISH_TABLET_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.finish_tablet_infos.size()));
            for (TTabletInfo _iter33 : struct.finish_tablet_infos)
            {
              _iter33.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTablet_checksum()) {
        oprot.writeFieldBegin(TABLET_CHECKSUM_FIELD_DESC);
        oprot.writeI64(struct.tablet_checksum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequest_version()) {
        oprot.writeFieldBegin(REQUEST_VERSION_FIELD_DESC);
        oprot.writeI64(struct.request_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequest_version_hash()) {
        oprot.writeFieldBegin(REQUEST_VERSION_HASH_FIELD_DESC);
        oprot.writeI64(struct.request_version_hash);
        oprot.writeFieldEnd();
      }
      if (struct.snapshot_path != null) {
        if (struct.isSetSnapshot_path()) {
          oprot.writeFieldBegin(SNAPSHOT_PATH_FIELD_DESC);
          oprot.writeString(struct.snapshot_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.error_tablet_ids != null) {
        if (struct.isSetError_tablet_ids()) {
          oprot.writeFieldBegin(ERROR_TABLET_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.error_tablet_ids.size()));
            for (long _iter34 : struct.error_tablet_ids)
            {
              oprot.writeI64(_iter34);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.snapshot_files != null) {
        if (struct.isSetSnapshot_files()) {
          oprot.writeFieldBegin(SNAPSHOT_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.snapshot_files.size()));
            for (java.lang.String _iter35 : struct.snapshot_files)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tablet_files != null) {
        if (struct.isSetTablet_files()) {
          oprot.writeFieldBegin(TABLET_FILES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.LIST, struct.tablet_files.size()));
            for (java.util.Map.Entry<java.lang.Long, java.util.List<java.lang.String>> _iter36 : struct.tablet_files.entrySet())
            {
              oprot.writeI64(_iter36.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter36.getValue().size()));
                for (java.lang.String _iter37 : _iter36.getValue())
                {
                  oprot.writeString(_iter37);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.downloaded_tablet_ids != null) {
        if (struct.isSetDownloaded_tablet_ids()) {
          oprot.writeFieldBegin(DOWNLOADED_TABLET_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.downloaded_tablet_ids.size()));
            for (long _iter38 : struct.downloaded_tablet_ids)
            {
              oprot.writeI64(_iter38);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCopy_size()) {
        oprot.writeFieldBegin(COPY_SIZE_FIELD_DESC);
        oprot.writeI64(struct.copy_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCopy_time_ms()) {
        oprot.writeFieldBegin(COPY_TIME_MS_FIELD_DESC);
        oprot.writeI64(struct.copy_time_ms);
        oprot.writeFieldEnd();
      }
      if (struct.tablet_versions != null) {
        if (struct.isSetTablet_versions()) {
          oprot.writeFieldBegin(TABLET_VERSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tablet_versions.size()));
            for (TTabletVersionPair _iter39 : struct.tablet_versions)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tablet_publish_versions != null) {
        if (struct.isSetTablet_publish_versions()) {
          oprot.writeFieldBegin(TABLET_PUBLISH_VERSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tablet_publish_versions.size()));
            for (TTabletVersionPair _iter40 : struct.tablet_publish_versions)
            {
              _iter40.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIncremental_snapshot()) {
        oprot.writeFieldBegin(INCREMENTAL_SNAPSHOT_FIELD_DESC);
        oprot.writeBool(struct.incremental_snapshot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFinishTaskRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TFinishTaskRequestTupleScheme getScheme() {
      return new TFinishTaskRequestTupleScheme();
    }
  }

  private static class TFinishTaskRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TFinishTaskRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFinishTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.backend.write(oprot);
      oprot.writeI32(struct.task_type.getValue());
      oprot.writeI64(struct.signature);
      struct.task_status.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReport_version()) {
        optionals.set(0);
      }
      if (struct.isSetFinish_tablet_infos()) {
        optionals.set(1);
      }
      if (struct.isSetTablet_checksum()) {
        optionals.set(2);
      }
      if (struct.isSetRequest_version()) {
        optionals.set(3);
      }
      if (struct.isSetRequest_version_hash()) {
        optionals.set(4);
      }
      if (struct.isSetSnapshot_path()) {
        optionals.set(5);
      }
      if (struct.isSetError_tablet_ids()) {
        optionals.set(6);
      }
      if (struct.isSetSnapshot_files()) {
        optionals.set(7);
      }
      if (struct.isSetTablet_files()) {
        optionals.set(8);
      }
      if (struct.isSetDownloaded_tablet_ids()) {
        optionals.set(9);
      }
      if (struct.isSetCopy_size()) {
        optionals.set(10);
      }
      if (struct.isSetCopy_time_ms()) {
        optionals.set(11);
      }
      if (struct.isSetTablet_versions()) {
        optionals.set(12);
      }
      if (struct.isSetTablet_publish_versions()) {
        optionals.set(13);
      }
      if (struct.isSetIncremental_snapshot()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetReport_version()) {
        oprot.writeI64(struct.report_version);
      }
      if (struct.isSetFinish_tablet_infos()) {
        {
          oprot.writeI32(struct.finish_tablet_infos.size());
          for (TTabletInfo _iter41 : struct.finish_tablet_infos)
          {
            _iter41.write(oprot);
          }
        }
      }
      if (struct.isSetTablet_checksum()) {
        oprot.writeI64(struct.tablet_checksum);
      }
      if (struct.isSetRequest_version()) {
        oprot.writeI64(struct.request_version);
      }
      if (struct.isSetRequest_version_hash()) {
        oprot.writeI64(struct.request_version_hash);
      }
      if (struct.isSetSnapshot_path()) {
        oprot.writeString(struct.snapshot_path);
      }
      if (struct.isSetError_tablet_ids()) {
        {
          oprot.writeI32(struct.error_tablet_ids.size());
          for (long _iter42 : struct.error_tablet_ids)
          {
            oprot.writeI64(_iter42);
          }
        }
      }
      if (struct.isSetSnapshot_files()) {
        {
          oprot.writeI32(struct.snapshot_files.size());
          for (java.lang.String _iter43 : struct.snapshot_files)
          {
            oprot.writeString(_iter43);
          }
        }
      }
      if (struct.isSetTablet_files()) {
        {
          oprot.writeI32(struct.tablet_files.size());
          for (java.util.Map.Entry<java.lang.Long, java.util.List<java.lang.String>> _iter44 : struct.tablet_files.entrySet())
          {
            oprot.writeI64(_iter44.getKey());
            {
              oprot.writeI32(_iter44.getValue().size());
              for (java.lang.String _iter45 : _iter44.getValue())
              {
                oprot.writeString(_iter45);
              }
            }
          }
        }
      }
      if (struct.isSetDownloaded_tablet_ids()) {
        {
          oprot.writeI32(struct.downloaded_tablet_ids.size());
          for (long _iter46 : struct.downloaded_tablet_ids)
          {
            oprot.writeI64(_iter46);
          }
        }
      }
      if (struct.isSetCopy_size()) {
        oprot.writeI64(struct.copy_size);
      }
      if (struct.isSetCopy_time_ms()) {
        oprot.writeI64(struct.copy_time_ms);
      }
      if (struct.isSetTablet_versions()) {
        {
          oprot.writeI32(struct.tablet_versions.size());
          for (TTabletVersionPair _iter47 : struct.tablet_versions)
          {
            _iter47.write(oprot);
          }
        }
      }
      if (struct.isSetTablet_publish_versions()) {
        {
          oprot.writeI32(struct.tablet_publish_versions.size());
          for (TTabletVersionPair _iter48 : struct.tablet_publish_versions)
          {
            _iter48.write(oprot);
          }
        }
      }
      if (struct.isSetIncremental_snapshot()) {
        oprot.writeBool(struct.incremental_snapshot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFinishTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.backend = new io.datafibre.fibre.thrift.TBackend();
      struct.backend.read(iprot);
      struct.setBackendIsSet(true);
      struct.task_type = io.datafibre.fibre.thrift.TTaskType.findByValue(iprot.readI32());
      struct.setTask_typeIsSet(true);
      struct.signature = iprot.readI64();
      struct.setSignatureIsSet(true);
      struct.task_status = new io.datafibre.fibre.thrift.TStatus();
      struct.task_status.read(iprot);
      struct.setTask_statusIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.report_version = iprot.readI64();
        struct.setReport_versionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list49 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.finish_tablet_infos = new java.util.ArrayList<TTabletInfo>(_list49.size);
          @org.apache.thrift.annotation.Nullable TTabletInfo _elem50;
          for (int _i51 = 0; _i51 < _list49.size; ++_i51)
          {
            _elem50 = new TTabletInfo();
            _elem50.read(iprot);
            struct.finish_tablet_infos.add(_elem50);
          }
        }
        struct.setFinish_tablet_infosIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tablet_checksum = iprot.readI64();
        struct.setTablet_checksumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.request_version = iprot.readI64();
        struct.setRequest_versionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.request_version_hash = iprot.readI64();
        struct.setRequest_version_hashIsSet(true);
      }
      if (incoming.get(5)) {
        struct.snapshot_path = iprot.readString();
        struct.setSnapshot_pathIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list52 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.error_tablet_ids = new java.util.ArrayList<java.lang.Long>(_list52.size);
          long _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            _elem53 = iprot.readI64();
            struct.error_tablet_ids.add(_elem53);
          }
        }
        struct.setError_tablet_idsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list55 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.snapshot_files = new java.util.ArrayList<java.lang.String>(_list55.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = iprot.readString();
            struct.snapshot_files.add(_elem56);
          }
        }
        struct.setSnapshot_filesIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.LIST); 
          struct.tablet_files = new java.util.HashMap<java.lang.Long,java.util.List<java.lang.String>>(2*_map58.size);
          long _key59;
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val60;
          for (int _i61 = 0; _i61 < _map58.size; ++_i61)
          {
            _key59 = iprot.readI64();
            {
              org.apache.thrift.protocol.TList _list62 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
              _val60 = new java.util.ArrayList<java.lang.String>(_list62.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _elem63;
              for (int _i64 = 0; _i64 < _list62.size; ++_i64)
              {
                _elem63 = iprot.readString();
                _val60.add(_elem63);
              }
            }
            struct.tablet_files.put(_key59, _val60);
          }
        }
        struct.setTablet_filesIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list65 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.downloaded_tablet_ids = new java.util.ArrayList<java.lang.Long>(_list65.size);
          long _elem66;
          for (int _i67 = 0; _i67 < _list65.size; ++_i67)
          {
            _elem66 = iprot.readI64();
            struct.downloaded_tablet_ids.add(_elem66);
          }
        }
        struct.setDownloaded_tablet_idsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.copy_size = iprot.readI64();
        struct.setCopy_sizeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.copy_time_ms = iprot.readI64();
        struct.setCopy_time_msIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list68 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.tablet_versions = new java.util.ArrayList<TTabletVersionPair>(_list68.size);
          @org.apache.thrift.annotation.Nullable TTabletVersionPair _elem69;
          for (int _i70 = 0; _i70 < _list68.size; ++_i70)
          {
            _elem69 = new TTabletVersionPair();
            _elem69.read(iprot);
            struct.tablet_versions.add(_elem69);
          }
        }
        struct.setTablet_versionsIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list71 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.tablet_publish_versions = new java.util.ArrayList<TTabletVersionPair>(_list71.size);
          @org.apache.thrift.annotation.Nullable TTabletVersionPair _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = new TTabletVersionPair();
            _elem72.read(iprot);
            struct.tablet_publish_versions.add(_elem72);
          }
        }
        struct.setTablet_publish_versionsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.incremental_snapshot = iprot.readBool();
        struct.setIncremental_snapshotIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

