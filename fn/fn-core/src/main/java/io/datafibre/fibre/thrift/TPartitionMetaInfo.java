/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TPartitionMetaInfo implements org.apache.thrift.TBase<TPartitionMetaInfo, TPartitionMetaInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TPartitionMetaInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPartitionMetaInfo");

  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARTITION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField COMPACT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("compact_version", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField VISIBLE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("visible_version", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField VISIBLE_VERSION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("visible_version_time", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField NEXT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("next_version", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField PARTITION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_key", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PARTITION_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_value", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DISTRIBUTION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("distribution_key", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField BUCKETS_FIELD_DESC = new org.apache.thrift.protocol.TField("buckets", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField REPLICATION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("replication_num", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField STORAGE_MEDIUM_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_medium", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField COOLDOWN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cooldown_time", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField LAST_CONSISTENCY_CHECK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("last_consistency_check_time", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField IS_IN_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_in_memory", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField IS_TEMP_FIELD_DESC = new org.apache.thrift.protocol.TField("is_temp", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField DATA_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_size", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("row_count", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField ENABLE_DATACACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_datacache", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField AVG_CS_FIELD_DESC = new org.apache.thrift.protocol.TField("avg_cs", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField P50_CS_FIELD_DESC = new org.apache.thrift.protocol.TField("p50_cs", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField MAX_CS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_cs", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField STORAGE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_path", org.apache.thrift.protocol.TType.STRING, (short)25);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPartitionMetaInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPartitionMetaInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String partition_name; // optional
  public long partition_id; // optional
  public long compact_version; // optional
  public long visible_version; // optional
  public long visible_version_time; // optional
  public long next_version; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String partition_key; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String partition_value; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String distribution_key; // optional
  public int buckets; // optional
  public int replication_num; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String storage_medium; // optional
  public long cooldown_time; // optional
  public long last_consistency_check_time; // optional
  public boolean is_in_memory; // optional
  public boolean is_temp; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String data_size; // optional
  public long row_count; // optional
  public boolean enable_datacache; // optional
  public double avg_cs; // optional
  public double p50_cs; // optional
  public double max_cs; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String storage_path; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DB_NAME((short)1, "db_name"),
    TABLE_NAME((short)2, "table_name"),
    PARTITION_NAME((short)3, "partition_name"),
    PARTITION_ID((short)4, "partition_id"),
    COMPACT_VERSION((short)5, "compact_version"),
    VISIBLE_VERSION((short)6, "visible_version"),
    VISIBLE_VERSION_TIME((short)7, "visible_version_time"),
    NEXT_VERSION((short)8, "next_version"),
    PARTITION_KEY((short)9, "partition_key"),
    PARTITION_VALUE((short)10, "partition_value"),
    DISTRIBUTION_KEY((short)11, "distribution_key"),
    BUCKETS((short)12, "buckets"),
    REPLICATION_NUM((short)13, "replication_num"),
    STORAGE_MEDIUM((short)14, "storage_medium"),
    COOLDOWN_TIME((short)15, "cooldown_time"),
    LAST_CONSISTENCY_CHECK_TIME((short)16, "last_consistency_check_time"),
    IS_IN_MEMORY((short)17, "is_in_memory"),
    IS_TEMP((short)18, "is_temp"),
    DATA_SIZE((short)19, "data_size"),
    ROW_COUNT((short)20, "row_count"),
    ENABLE_DATACACHE((short)21, "enable_datacache"),
    AVG_CS((short)22, "avg_cs"),
    P50_CS((short)23, "p50_cs"),
    MAX_CS((short)24, "max_cs"),
    STORAGE_PATH((short)25, "storage_path");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DB_NAME
          return DB_NAME;
        case 2: // TABLE_NAME
          return TABLE_NAME;
        case 3: // PARTITION_NAME
          return PARTITION_NAME;
        case 4: // PARTITION_ID
          return PARTITION_ID;
        case 5: // COMPACT_VERSION
          return COMPACT_VERSION;
        case 6: // VISIBLE_VERSION
          return VISIBLE_VERSION;
        case 7: // VISIBLE_VERSION_TIME
          return VISIBLE_VERSION_TIME;
        case 8: // NEXT_VERSION
          return NEXT_VERSION;
        case 9: // PARTITION_KEY
          return PARTITION_KEY;
        case 10: // PARTITION_VALUE
          return PARTITION_VALUE;
        case 11: // DISTRIBUTION_KEY
          return DISTRIBUTION_KEY;
        case 12: // BUCKETS
          return BUCKETS;
        case 13: // REPLICATION_NUM
          return REPLICATION_NUM;
        case 14: // STORAGE_MEDIUM
          return STORAGE_MEDIUM;
        case 15: // COOLDOWN_TIME
          return COOLDOWN_TIME;
        case 16: // LAST_CONSISTENCY_CHECK_TIME
          return LAST_CONSISTENCY_CHECK_TIME;
        case 17: // IS_IN_MEMORY
          return IS_IN_MEMORY;
        case 18: // IS_TEMP
          return IS_TEMP;
        case 19: // DATA_SIZE
          return DATA_SIZE;
        case 20: // ROW_COUNT
          return ROW_COUNT;
        case 21: // ENABLE_DATACACHE
          return ENABLE_DATACACHE;
        case 22: // AVG_CS
          return AVG_CS;
        case 23: // P50_CS
          return P50_CS;
        case 24: // MAX_CS
          return MAX_CS;
        case 25: // STORAGE_PATH
          return STORAGE_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARTITION_ID_ISSET_ID = 0;
  private static final int __COMPACT_VERSION_ISSET_ID = 1;
  private static final int __VISIBLE_VERSION_ISSET_ID = 2;
  private static final int __VISIBLE_VERSION_TIME_ISSET_ID = 3;
  private static final int __NEXT_VERSION_ISSET_ID = 4;
  private static final int __BUCKETS_ISSET_ID = 5;
  private static final int __REPLICATION_NUM_ISSET_ID = 6;
  private static final int __COOLDOWN_TIME_ISSET_ID = 7;
  private static final int __LAST_CONSISTENCY_CHECK_TIME_ISSET_ID = 8;
  private static final int __IS_IN_MEMORY_ISSET_ID = 9;
  private static final int __IS_TEMP_ISSET_ID = 10;
  private static final int __ROW_COUNT_ISSET_ID = 11;
  private static final int __ENABLE_DATACACHE_ISSET_ID = 12;
  private static final int __AVG_CS_ISSET_ID = 13;
  private static final int __P50_CS_ISSET_ID = 14;
  private static final int __MAX_CS_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DB_NAME,_Fields.TABLE_NAME,_Fields.PARTITION_NAME,_Fields.PARTITION_ID,_Fields.COMPACT_VERSION,_Fields.VISIBLE_VERSION,_Fields.VISIBLE_VERSION_TIME,_Fields.NEXT_VERSION,_Fields.PARTITION_KEY,_Fields.PARTITION_VALUE,_Fields.DISTRIBUTION_KEY,_Fields.BUCKETS,_Fields.REPLICATION_NUM,_Fields.STORAGE_MEDIUM,_Fields.COOLDOWN_TIME,_Fields.LAST_CONSISTENCY_CHECK_TIME,_Fields.IS_IN_MEMORY,_Fields.IS_TEMP,_Fields.DATA_SIZE,_Fields.ROW_COUNT,_Fields.ENABLE_DATACACHE,_Fields.AVG_CS,_Fields.P50_CS,_Fields.MAX_CS,_Fields.STORAGE_PATH};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION_NAME, new org.apache.thrift.meta_data.FieldMetaData("partition_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPACT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("compact_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VISIBLE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("visible_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VISIBLE_VERSION_TIME, new org.apache.thrift.meta_data.FieldMetaData("visible_version_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEXT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("next_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_KEY, new org.apache.thrift.meta_data.FieldMetaData("partition_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION_VALUE, new org.apache.thrift.meta_data.FieldMetaData("partition_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTRIBUTION_KEY, new org.apache.thrift.meta_data.FieldMetaData("distribution_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUCKETS, new org.apache.thrift.meta_data.FieldMetaData("buckets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPLICATION_NUM, new org.apache.thrift.meta_data.FieldMetaData("replication_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STORAGE_MEDIUM, new org.apache.thrift.meta_data.FieldMetaData("storage_medium", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COOLDOWN_TIME, new org.apache.thrift.meta_data.FieldMetaData("cooldown_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_CONSISTENCY_CHECK_TIME, new org.apache.thrift.meta_data.FieldMetaData("last_consistency_check_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_IN_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("is_in_memory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_TEMP, new org.apache.thrift.meta_data.FieldMetaData("is_temp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DATA_SIZE, new org.apache.thrift.meta_data.FieldMetaData("data_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("row_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLE_DATACACHE, new org.apache.thrift.meta_data.FieldMetaData("enable_datacache", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AVG_CS, new org.apache.thrift.meta_data.FieldMetaData("avg_cs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.P50_CS, new org.apache.thrift.meta_data.FieldMetaData("p50_cs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_CS, new org.apache.thrift.meta_data.FieldMetaData("max_cs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STORAGE_PATH, new org.apache.thrift.meta_data.FieldMetaData("storage_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPartitionMetaInfo.class, metaDataMap);
  }

  public TPartitionMetaInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPartitionMetaInfo(TPartitionMetaInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    if (other.isSetPartition_name()) {
      this.partition_name = other.partition_name;
    }
    this.partition_id = other.partition_id;
    this.compact_version = other.compact_version;
    this.visible_version = other.visible_version;
    this.visible_version_time = other.visible_version_time;
    this.next_version = other.next_version;
    if (other.isSetPartition_key()) {
      this.partition_key = other.partition_key;
    }
    if (other.isSetPartition_value()) {
      this.partition_value = other.partition_value;
    }
    if (other.isSetDistribution_key()) {
      this.distribution_key = other.distribution_key;
    }
    this.buckets = other.buckets;
    this.replication_num = other.replication_num;
    if (other.isSetStorage_medium()) {
      this.storage_medium = other.storage_medium;
    }
    this.cooldown_time = other.cooldown_time;
    this.last_consistency_check_time = other.last_consistency_check_time;
    this.is_in_memory = other.is_in_memory;
    this.is_temp = other.is_temp;
    if (other.isSetData_size()) {
      this.data_size = other.data_size;
    }
    this.row_count = other.row_count;
    this.enable_datacache = other.enable_datacache;
    this.avg_cs = other.avg_cs;
    this.p50_cs = other.p50_cs;
    this.max_cs = other.max_cs;
    if (other.isSetStorage_path()) {
      this.storage_path = other.storage_path;
    }
  }

  @Override
  public TPartitionMetaInfo deepCopy() {
    return new TPartitionMetaInfo(this);
  }

  @Override
  public void clear() {
    this.db_name = null;
    this.table_name = null;
    this.partition_name = null;
    setPartition_idIsSet(false);
    this.partition_id = 0;
    setCompact_versionIsSet(false);
    this.compact_version = 0;
    setVisible_versionIsSet(false);
    this.visible_version = 0;
    setVisible_version_timeIsSet(false);
    this.visible_version_time = 0;
    setNext_versionIsSet(false);
    this.next_version = 0;
    this.partition_key = null;
    this.partition_value = null;
    this.distribution_key = null;
    setBucketsIsSet(false);
    this.buckets = 0;
    setReplication_numIsSet(false);
    this.replication_num = 0;
    this.storage_medium = null;
    setCooldown_timeIsSet(false);
    this.cooldown_time = 0;
    setLast_consistency_check_timeIsSet(false);
    this.last_consistency_check_time = 0;
    setIs_in_memoryIsSet(false);
    this.is_in_memory = false;
    setIs_tempIsSet(false);
    this.is_temp = false;
    this.data_size = null;
    setRow_countIsSet(false);
    this.row_count = 0;
    setEnable_datacacheIsSet(false);
    this.enable_datacache = false;
    setAvg_csIsSet(false);
    this.avg_cs = 0.0;
    setP50_csIsSet(false);
    this.p50_cs = 0.0;
    setMax_csIsSet(false);
    this.max_cs = 0.0;
    this.storage_path = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb_name() {
    return this.db_name;
  }

  public TPartitionMetaInfo setDb_name(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_name() {
    return this.table_name;
  }

  public TPartitionMetaInfo setTable_name(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartition_name() {
    return this.partition_name;
  }

  public TPartitionMetaInfo setPartition_name(@org.apache.thrift.annotation.Nullable java.lang.String partition_name) {
    this.partition_name = partition_name;
    return this;
  }

  public void unsetPartition_name() {
    this.partition_name = null;
  }

  /** Returns true if field partition_name is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_name() {
    return this.partition_name != null;
  }

  public void setPartition_nameIsSet(boolean value) {
    if (!value) {
      this.partition_name = null;
    }
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public TPartitionMetaInfo setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    return this;
  }

  public void unsetPartition_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  public long getCompact_version() {
    return this.compact_version;
  }

  public TPartitionMetaInfo setCompact_version(long compact_version) {
    this.compact_version = compact_version;
    setCompact_versionIsSet(true);
    return this;
  }

  public void unsetCompact_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPACT_VERSION_ISSET_ID);
  }

  /** Returns true if field compact_version is set (has been assigned a value) and false otherwise */
  public boolean isSetCompact_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPACT_VERSION_ISSET_ID);
  }

  public void setCompact_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPACT_VERSION_ISSET_ID, value);
  }

  public long getVisible_version() {
    return this.visible_version;
  }

  public TPartitionMetaInfo setVisible_version(long visible_version) {
    this.visible_version = visible_version;
    setVisible_versionIsSet(true);
    return this;
  }

  public void unsetVisible_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VISIBLE_VERSION_ISSET_ID);
  }

  /** Returns true if field visible_version is set (has been assigned a value) and false otherwise */
  public boolean isSetVisible_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VISIBLE_VERSION_ISSET_ID);
  }

  public void setVisible_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VISIBLE_VERSION_ISSET_ID, value);
  }

  public long getVisible_version_time() {
    return this.visible_version_time;
  }

  public TPartitionMetaInfo setVisible_version_time(long visible_version_time) {
    this.visible_version_time = visible_version_time;
    setVisible_version_timeIsSet(true);
    return this;
  }

  public void unsetVisible_version_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VISIBLE_VERSION_TIME_ISSET_ID);
  }

  /** Returns true if field visible_version_time is set (has been assigned a value) and false otherwise */
  public boolean isSetVisible_version_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VISIBLE_VERSION_TIME_ISSET_ID);
  }

  public void setVisible_version_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VISIBLE_VERSION_TIME_ISSET_ID, value);
  }

  public long getNext_version() {
    return this.next_version;
  }

  public TPartitionMetaInfo setNext_version(long next_version) {
    this.next_version = next_version;
    setNext_versionIsSet(true);
    return this;
  }

  public void unsetNext_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEXT_VERSION_ISSET_ID);
  }

  /** Returns true if field next_version is set (has been assigned a value) and false otherwise */
  public boolean isSetNext_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEXT_VERSION_ISSET_ID);
  }

  public void setNext_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEXT_VERSION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartition_key() {
    return this.partition_key;
  }

  public TPartitionMetaInfo setPartition_key(@org.apache.thrift.annotation.Nullable java.lang.String partition_key) {
    this.partition_key = partition_key;
    return this;
  }

  public void unsetPartition_key() {
    this.partition_key = null;
  }

  /** Returns true if field partition_key is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_key() {
    return this.partition_key != null;
  }

  public void setPartition_keyIsSet(boolean value) {
    if (!value) {
      this.partition_key = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartition_value() {
    return this.partition_value;
  }

  public TPartitionMetaInfo setPartition_value(@org.apache.thrift.annotation.Nullable java.lang.String partition_value) {
    this.partition_value = partition_value;
    return this;
  }

  public void unsetPartition_value() {
    this.partition_value = null;
  }

  /** Returns true if field partition_value is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_value() {
    return this.partition_value != null;
  }

  public void setPartition_valueIsSet(boolean value) {
    if (!value) {
      this.partition_value = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDistribution_key() {
    return this.distribution_key;
  }

  public TPartitionMetaInfo setDistribution_key(@org.apache.thrift.annotation.Nullable java.lang.String distribution_key) {
    this.distribution_key = distribution_key;
    return this;
  }

  public void unsetDistribution_key() {
    this.distribution_key = null;
  }

  /** Returns true if field distribution_key is set (has been assigned a value) and false otherwise */
  public boolean isSetDistribution_key() {
    return this.distribution_key != null;
  }

  public void setDistribution_keyIsSet(boolean value) {
    if (!value) {
      this.distribution_key = null;
    }
  }

  public int getBuckets() {
    return this.buckets;
  }

  public TPartitionMetaInfo setBuckets(int buckets) {
    this.buckets = buckets;
    setBucketsIsSet(true);
    return this;
  }

  public void unsetBuckets() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUCKETS_ISSET_ID);
  }

  /** Returns true if field buckets is set (has been assigned a value) and false otherwise */
  public boolean isSetBuckets() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUCKETS_ISSET_ID);
  }

  public void setBucketsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUCKETS_ISSET_ID, value);
  }

  public int getReplication_num() {
    return this.replication_num;
  }

  public TPartitionMetaInfo setReplication_num(int replication_num) {
    this.replication_num = replication_num;
    setReplication_numIsSet(true);
    return this;
  }

  public void unsetReplication_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPLICATION_NUM_ISSET_ID);
  }

  /** Returns true if field replication_num is set (has been assigned a value) and false otherwise */
  public boolean isSetReplication_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPLICATION_NUM_ISSET_ID);
  }

  public void setReplication_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPLICATION_NUM_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStorage_medium() {
    return this.storage_medium;
  }

  public TPartitionMetaInfo setStorage_medium(@org.apache.thrift.annotation.Nullable java.lang.String storage_medium) {
    this.storage_medium = storage_medium;
    return this;
  }

  public void unsetStorage_medium() {
    this.storage_medium = null;
  }

  /** Returns true if field storage_medium is set (has been assigned a value) and false otherwise */
  public boolean isSetStorage_medium() {
    return this.storage_medium != null;
  }

  public void setStorage_mediumIsSet(boolean value) {
    if (!value) {
      this.storage_medium = null;
    }
  }

  public long getCooldown_time() {
    return this.cooldown_time;
  }

  public TPartitionMetaInfo setCooldown_time(long cooldown_time) {
    this.cooldown_time = cooldown_time;
    setCooldown_timeIsSet(true);
    return this;
  }

  public void unsetCooldown_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COOLDOWN_TIME_ISSET_ID);
  }

  /** Returns true if field cooldown_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCooldown_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COOLDOWN_TIME_ISSET_ID);
  }

  public void setCooldown_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COOLDOWN_TIME_ISSET_ID, value);
  }

  public long getLast_consistency_check_time() {
    return this.last_consistency_check_time;
  }

  public TPartitionMetaInfo setLast_consistency_check_time(long last_consistency_check_time) {
    this.last_consistency_check_time = last_consistency_check_time;
    setLast_consistency_check_timeIsSet(true);
    return this;
  }

  public void unsetLast_consistency_check_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAST_CONSISTENCY_CHECK_TIME_ISSET_ID);
  }

  /** Returns true if field last_consistency_check_time is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_consistency_check_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAST_CONSISTENCY_CHECK_TIME_ISSET_ID);
  }

  public void setLast_consistency_check_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAST_CONSISTENCY_CHECK_TIME_ISSET_ID, value);
  }

  public boolean isIs_in_memory() {
    return this.is_in_memory;
  }

  public TPartitionMetaInfo setIs_in_memory(boolean is_in_memory) {
    this.is_in_memory = is_in_memory;
    setIs_in_memoryIsSet(true);
    return this;
  }

  public void unsetIs_in_memory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_IN_MEMORY_ISSET_ID);
  }

  /** Returns true if field is_in_memory is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_in_memory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_IN_MEMORY_ISSET_ID);
  }

  public void setIs_in_memoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_IN_MEMORY_ISSET_ID, value);
  }

  public boolean isIs_temp() {
    return this.is_temp;
  }

  public TPartitionMetaInfo setIs_temp(boolean is_temp) {
    this.is_temp = is_temp;
    setIs_tempIsSet(true);
    return this;
  }

  public void unsetIs_temp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_TEMP_ISSET_ID);
  }

  /** Returns true if field is_temp is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_temp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_TEMP_ISSET_ID);
  }

  public void setIs_tempIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_TEMP_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getData_size() {
    return this.data_size;
  }

  public TPartitionMetaInfo setData_size(@org.apache.thrift.annotation.Nullable java.lang.String data_size) {
    this.data_size = data_size;
    return this;
  }

  public void unsetData_size() {
    this.data_size = null;
  }

  /** Returns true if field data_size is set (has been assigned a value) and false otherwise */
  public boolean isSetData_size() {
    return this.data_size != null;
  }

  public void setData_sizeIsSet(boolean value) {
    if (!value) {
      this.data_size = null;
    }
  }

  public long getRow_count() {
    return this.row_count;
  }

  public TPartitionMetaInfo setRow_count(long row_count) {
    this.row_count = row_count;
    setRow_countIsSet(true);
    return this;
  }

  public void unsetRow_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROW_COUNT_ISSET_ID);
  }

  /** Returns true if field row_count is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROW_COUNT_ISSET_ID);
  }

  public void setRow_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROW_COUNT_ISSET_ID, value);
  }

  public boolean isEnable_datacache() {
    return this.enable_datacache;
  }

  public TPartitionMetaInfo setEnable_datacache(boolean enable_datacache) {
    this.enable_datacache = enable_datacache;
    setEnable_datacacheIsSet(true);
    return this;
  }

  public void unsetEnable_datacache() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_DATACACHE_ISSET_ID);
  }

  /** Returns true if field enable_datacache is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_datacache() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_DATACACHE_ISSET_ID);
  }

  public void setEnable_datacacheIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_DATACACHE_ISSET_ID, value);
  }

  public double getAvg_cs() {
    return this.avg_cs;
  }

  public TPartitionMetaInfo setAvg_cs(double avg_cs) {
    this.avg_cs = avg_cs;
    setAvg_csIsSet(true);
    return this;
  }

  public void unsetAvg_cs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AVG_CS_ISSET_ID);
  }

  /** Returns true if field avg_cs is set (has been assigned a value) and false otherwise */
  public boolean isSetAvg_cs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AVG_CS_ISSET_ID);
  }

  public void setAvg_csIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AVG_CS_ISSET_ID, value);
  }

  public double getP50_cs() {
    return this.p50_cs;
  }

  public TPartitionMetaInfo setP50_cs(double p50_cs) {
    this.p50_cs = p50_cs;
    setP50_csIsSet(true);
    return this;
  }

  public void unsetP50_cs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __P50_CS_ISSET_ID);
  }

  /** Returns true if field p50_cs is set (has been assigned a value) and false otherwise */
  public boolean isSetP50_cs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __P50_CS_ISSET_ID);
  }

  public void setP50_csIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __P50_CS_ISSET_ID, value);
  }

  public double getMax_cs() {
    return this.max_cs;
  }

  public TPartitionMetaInfo setMax_cs(double max_cs) {
    this.max_cs = max_cs;
    setMax_csIsSet(true);
    return this;
  }

  public void unsetMax_cs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_CS_ISSET_ID);
  }

  /** Returns true if field max_cs is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_cs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_CS_ISSET_ID);
  }

  public void setMax_csIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_CS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStorage_path() {
    return this.storage_path;
  }

  public TPartitionMetaInfo setStorage_path(@org.apache.thrift.annotation.Nullable java.lang.String storage_path) {
    this.storage_path = storage_path;
    return this;
  }

  public void unsetStorage_path() {
    this.storage_path = null;
  }

  /** Returns true if field storage_path is set (has been assigned a value) and false otherwise */
  public boolean isSetStorage_path() {
    return this.storage_path != null;
  }

  public void setStorage_pathIsSet(boolean value) {
    if (!value) {
      this.storage_path = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((java.lang.String)value);
      }
      break;

    case PARTITION_NAME:
      if (value == null) {
        unsetPartition_name();
      } else {
        setPartition_name((java.lang.String)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((java.lang.Long)value);
      }
      break;

    case COMPACT_VERSION:
      if (value == null) {
        unsetCompact_version();
      } else {
        setCompact_version((java.lang.Long)value);
      }
      break;

    case VISIBLE_VERSION:
      if (value == null) {
        unsetVisible_version();
      } else {
        setVisible_version((java.lang.Long)value);
      }
      break;

    case VISIBLE_VERSION_TIME:
      if (value == null) {
        unsetVisible_version_time();
      } else {
        setVisible_version_time((java.lang.Long)value);
      }
      break;

    case NEXT_VERSION:
      if (value == null) {
        unsetNext_version();
      } else {
        setNext_version((java.lang.Long)value);
      }
      break;

    case PARTITION_KEY:
      if (value == null) {
        unsetPartition_key();
      } else {
        setPartition_key((java.lang.String)value);
      }
      break;

    case PARTITION_VALUE:
      if (value == null) {
        unsetPartition_value();
      } else {
        setPartition_value((java.lang.String)value);
      }
      break;

    case DISTRIBUTION_KEY:
      if (value == null) {
        unsetDistribution_key();
      } else {
        setDistribution_key((java.lang.String)value);
      }
      break;

    case BUCKETS:
      if (value == null) {
        unsetBuckets();
      } else {
        setBuckets((java.lang.Integer)value);
      }
      break;

    case REPLICATION_NUM:
      if (value == null) {
        unsetReplication_num();
      } else {
        setReplication_num((java.lang.Integer)value);
      }
      break;

    case STORAGE_MEDIUM:
      if (value == null) {
        unsetStorage_medium();
      } else {
        setStorage_medium((java.lang.String)value);
      }
      break;

    case COOLDOWN_TIME:
      if (value == null) {
        unsetCooldown_time();
      } else {
        setCooldown_time((java.lang.Long)value);
      }
      break;

    case LAST_CONSISTENCY_CHECK_TIME:
      if (value == null) {
        unsetLast_consistency_check_time();
      } else {
        setLast_consistency_check_time((java.lang.Long)value);
      }
      break;

    case IS_IN_MEMORY:
      if (value == null) {
        unsetIs_in_memory();
      } else {
        setIs_in_memory((java.lang.Boolean)value);
      }
      break;

    case IS_TEMP:
      if (value == null) {
        unsetIs_temp();
      } else {
        setIs_temp((java.lang.Boolean)value);
      }
      break;

    case DATA_SIZE:
      if (value == null) {
        unsetData_size();
      } else {
        setData_size((java.lang.String)value);
      }
      break;

    case ROW_COUNT:
      if (value == null) {
        unsetRow_count();
      } else {
        setRow_count((java.lang.Long)value);
      }
      break;

    case ENABLE_DATACACHE:
      if (value == null) {
        unsetEnable_datacache();
      } else {
        setEnable_datacache((java.lang.Boolean)value);
      }
      break;

    case AVG_CS:
      if (value == null) {
        unsetAvg_cs();
      } else {
        setAvg_cs((java.lang.Double)value);
      }
      break;

    case P50_CS:
      if (value == null) {
        unsetP50_cs();
      } else {
        setP50_cs((java.lang.Double)value);
      }
      break;

    case MAX_CS:
      if (value == null) {
        unsetMax_cs();
      } else {
        setMax_cs((java.lang.Double)value);
      }
      break;

    case STORAGE_PATH:
      if (value == null) {
        unsetStorage_path();
      } else {
        setStorage_path((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DB_NAME:
      return getDb_name();

    case TABLE_NAME:
      return getTable_name();

    case PARTITION_NAME:
      return getPartition_name();

    case PARTITION_ID:
      return getPartition_id();

    case COMPACT_VERSION:
      return getCompact_version();

    case VISIBLE_VERSION:
      return getVisible_version();

    case VISIBLE_VERSION_TIME:
      return getVisible_version_time();

    case NEXT_VERSION:
      return getNext_version();

    case PARTITION_KEY:
      return getPartition_key();

    case PARTITION_VALUE:
      return getPartition_value();

    case DISTRIBUTION_KEY:
      return getDistribution_key();

    case BUCKETS:
      return getBuckets();

    case REPLICATION_NUM:
      return getReplication_num();

    case STORAGE_MEDIUM:
      return getStorage_medium();

    case COOLDOWN_TIME:
      return getCooldown_time();

    case LAST_CONSISTENCY_CHECK_TIME:
      return getLast_consistency_check_time();

    case IS_IN_MEMORY:
      return isIs_in_memory();

    case IS_TEMP:
      return isIs_temp();

    case DATA_SIZE:
      return getData_size();

    case ROW_COUNT:
      return getRow_count();

    case ENABLE_DATACACHE:
      return isEnable_datacache();

    case AVG_CS:
      return getAvg_cs();

    case P50_CS:
      return getP50_cs();

    case MAX_CS:
      return getMax_cs();

    case STORAGE_PATH:
      return getStorage_path();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DB_NAME:
      return isSetDb_name();
    case TABLE_NAME:
      return isSetTable_name();
    case PARTITION_NAME:
      return isSetPartition_name();
    case PARTITION_ID:
      return isSetPartition_id();
    case COMPACT_VERSION:
      return isSetCompact_version();
    case VISIBLE_VERSION:
      return isSetVisible_version();
    case VISIBLE_VERSION_TIME:
      return isSetVisible_version_time();
    case NEXT_VERSION:
      return isSetNext_version();
    case PARTITION_KEY:
      return isSetPartition_key();
    case PARTITION_VALUE:
      return isSetPartition_value();
    case DISTRIBUTION_KEY:
      return isSetDistribution_key();
    case BUCKETS:
      return isSetBuckets();
    case REPLICATION_NUM:
      return isSetReplication_num();
    case STORAGE_MEDIUM:
      return isSetStorage_medium();
    case COOLDOWN_TIME:
      return isSetCooldown_time();
    case LAST_CONSISTENCY_CHECK_TIME:
      return isSetLast_consistency_check_time();
    case IS_IN_MEMORY:
      return isSetIs_in_memory();
    case IS_TEMP:
      return isSetIs_temp();
    case DATA_SIZE:
      return isSetData_size();
    case ROW_COUNT:
      return isSetRow_count();
    case ENABLE_DATACACHE:
      return isSetEnable_datacache();
    case AVG_CS:
      return isSetAvg_cs();
    case P50_CS:
      return isSetP50_cs();
    case MAX_CS:
      return isSetMax_cs();
    case STORAGE_PATH:
      return isSetStorage_path();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TPartitionMetaInfo)
      return this.equals((TPartitionMetaInfo)that);
    return false;
  }

  public boolean equals(TPartitionMetaInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_partition_name = true && this.isSetPartition_name();
    boolean that_present_partition_name = true && that.isSetPartition_name();
    if (this_present_partition_name || that_present_partition_name) {
      if (!(this_present_partition_name && that_present_partition_name))
        return false;
      if (!this.partition_name.equals(that.partition_name))
        return false;
    }

    boolean this_present_partition_id = true && this.isSetPartition_id();
    boolean that_present_partition_id = true && that.isSetPartition_id();
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_compact_version = true && this.isSetCompact_version();
    boolean that_present_compact_version = true && that.isSetCompact_version();
    if (this_present_compact_version || that_present_compact_version) {
      if (!(this_present_compact_version && that_present_compact_version))
        return false;
      if (this.compact_version != that.compact_version)
        return false;
    }

    boolean this_present_visible_version = true && this.isSetVisible_version();
    boolean that_present_visible_version = true && that.isSetVisible_version();
    if (this_present_visible_version || that_present_visible_version) {
      if (!(this_present_visible_version && that_present_visible_version))
        return false;
      if (this.visible_version != that.visible_version)
        return false;
    }

    boolean this_present_visible_version_time = true && this.isSetVisible_version_time();
    boolean that_present_visible_version_time = true && that.isSetVisible_version_time();
    if (this_present_visible_version_time || that_present_visible_version_time) {
      if (!(this_present_visible_version_time && that_present_visible_version_time))
        return false;
      if (this.visible_version_time != that.visible_version_time)
        return false;
    }

    boolean this_present_next_version = true && this.isSetNext_version();
    boolean that_present_next_version = true && that.isSetNext_version();
    if (this_present_next_version || that_present_next_version) {
      if (!(this_present_next_version && that_present_next_version))
        return false;
      if (this.next_version != that.next_version)
        return false;
    }

    boolean this_present_partition_key = true && this.isSetPartition_key();
    boolean that_present_partition_key = true && that.isSetPartition_key();
    if (this_present_partition_key || that_present_partition_key) {
      if (!(this_present_partition_key && that_present_partition_key))
        return false;
      if (!this.partition_key.equals(that.partition_key))
        return false;
    }

    boolean this_present_partition_value = true && this.isSetPartition_value();
    boolean that_present_partition_value = true && that.isSetPartition_value();
    if (this_present_partition_value || that_present_partition_value) {
      if (!(this_present_partition_value && that_present_partition_value))
        return false;
      if (!this.partition_value.equals(that.partition_value))
        return false;
    }

    boolean this_present_distribution_key = true && this.isSetDistribution_key();
    boolean that_present_distribution_key = true && that.isSetDistribution_key();
    if (this_present_distribution_key || that_present_distribution_key) {
      if (!(this_present_distribution_key && that_present_distribution_key))
        return false;
      if (!this.distribution_key.equals(that.distribution_key))
        return false;
    }

    boolean this_present_buckets = true && this.isSetBuckets();
    boolean that_present_buckets = true && that.isSetBuckets();
    if (this_present_buckets || that_present_buckets) {
      if (!(this_present_buckets && that_present_buckets))
        return false;
      if (this.buckets != that.buckets)
        return false;
    }

    boolean this_present_replication_num = true && this.isSetReplication_num();
    boolean that_present_replication_num = true && that.isSetReplication_num();
    if (this_present_replication_num || that_present_replication_num) {
      if (!(this_present_replication_num && that_present_replication_num))
        return false;
      if (this.replication_num != that.replication_num)
        return false;
    }

    boolean this_present_storage_medium = true && this.isSetStorage_medium();
    boolean that_present_storage_medium = true && that.isSetStorage_medium();
    if (this_present_storage_medium || that_present_storage_medium) {
      if (!(this_present_storage_medium && that_present_storage_medium))
        return false;
      if (!this.storage_medium.equals(that.storage_medium))
        return false;
    }

    boolean this_present_cooldown_time = true && this.isSetCooldown_time();
    boolean that_present_cooldown_time = true && that.isSetCooldown_time();
    if (this_present_cooldown_time || that_present_cooldown_time) {
      if (!(this_present_cooldown_time && that_present_cooldown_time))
        return false;
      if (this.cooldown_time != that.cooldown_time)
        return false;
    }

    boolean this_present_last_consistency_check_time = true && this.isSetLast_consistency_check_time();
    boolean that_present_last_consistency_check_time = true && that.isSetLast_consistency_check_time();
    if (this_present_last_consistency_check_time || that_present_last_consistency_check_time) {
      if (!(this_present_last_consistency_check_time && that_present_last_consistency_check_time))
        return false;
      if (this.last_consistency_check_time != that.last_consistency_check_time)
        return false;
    }

    boolean this_present_is_in_memory = true && this.isSetIs_in_memory();
    boolean that_present_is_in_memory = true && that.isSetIs_in_memory();
    if (this_present_is_in_memory || that_present_is_in_memory) {
      if (!(this_present_is_in_memory && that_present_is_in_memory))
        return false;
      if (this.is_in_memory != that.is_in_memory)
        return false;
    }

    boolean this_present_is_temp = true && this.isSetIs_temp();
    boolean that_present_is_temp = true && that.isSetIs_temp();
    if (this_present_is_temp || that_present_is_temp) {
      if (!(this_present_is_temp && that_present_is_temp))
        return false;
      if (this.is_temp != that.is_temp)
        return false;
    }

    boolean this_present_data_size = true && this.isSetData_size();
    boolean that_present_data_size = true && that.isSetData_size();
    if (this_present_data_size || that_present_data_size) {
      if (!(this_present_data_size && that_present_data_size))
        return false;
      if (!this.data_size.equals(that.data_size))
        return false;
    }

    boolean this_present_row_count = true && this.isSetRow_count();
    boolean that_present_row_count = true && that.isSetRow_count();
    if (this_present_row_count || that_present_row_count) {
      if (!(this_present_row_count && that_present_row_count))
        return false;
      if (this.row_count != that.row_count)
        return false;
    }

    boolean this_present_enable_datacache = true && this.isSetEnable_datacache();
    boolean that_present_enable_datacache = true && that.isSetEnable_datacache();
    if (this_present_enable_datacache || that_present_enable_datacache) {
      if (!(this_present_enable_datacache && that_present_enable_datacache))
        return false;
      if (this.enable_datacache != that.enable_datacache)
        return false;
    }

    boolean this_present_avg_cs = true && this.isSetAvg_cs();
    boolean that_present_avg_cs = true && that.isSetAvg_cs();
    if (this_present_avg_cs || that_present_avg_cs) {
      if (!(this_present_avg_cs && that_present_avg_cs))
        return false;
      if (this.avg_cs != that.avg_cs)
        return false;
    }

    boolean this_present_p50_cs = true && this.isSetP50_cs();
    boolean that_present_p50_cs = true && that.isSetP50_cs();
    if (this_present_p50_cs || that_present_p50_cs) {
      if (!(this_present_p50_cs && that_present_p50_cs))
        return false;
      if (this.p50_cs != that.p50_cs)
        return false;
    }

    boolean this_present_max_cs = true && this.isSetMax_cs();
    boolean that_present_max_cs = true && that.isSetMax_cs();
    if (this_present_max_cs || that_present_max_cs) {
      if (!(this_present_max_cs && that_present_max_cs))
        return false;
      if (this.max_cs != that.max_cs)
        return false;
    }

    boolean this_present_storage_path = true && this.isSetStorage_path();
    boolean that_present_storage_path = true && that.isSetStorage_path();
    if (this_present_storage_path || that_present_storage_path) {
      if (!(this_present_storage_path && that_present_storage_path))
        return false;
      if (!this.storage_path.equals(that.storage_path))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDb_name()) ? 131071 : 524287);
    if (isSetDb_name())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_name()) ? 131071 : 524287);
    if (isSetPartition_name())
      hashCode = hashCode * 8191 + partition_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_id()) ? 131071 : 524287);
    if (isSetPartition_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_id);

    hashCode = hashCode * 8191 + ((isSetCompact_version()) ? 131071 : 524287);
    if (isSetCompact_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(compact_version);

    hashCode = hashCode * 8191 + ((isSetVisible_version()) ? 131071 : 524287);
    if (isSetVisible_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(visible_version);

    hashCode = hashCode * 8191 + ((isSetVisible_version_time()) ? 131071 : 524287);
    if (isSetVisible_version_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(visible_version_time);

    hashCode = hashCode * 8191 + ((isSetNext_version()) ? 131071 : 524287);
    if (isSetNext_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(next_version);

    hashCode = hashCode * 8191 + ((isSetPartition_key()) ? 131071 : 524287);
    if (isSetPartition_key())
      hashCode = hashCode * 8191 + partition_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_value()) ? 131071 : 524287);
    if (isSetPartition_value())
      hashCode = hashCode * 8191 + partition_value.hashCode();

    hashCode = hashCode * 8191 + ((isSetDistribution_key()) ? 131071 : 524287);
    if (isSetDistribution_key())
      hashCode = hashCode * 8191 + distribution_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetBuckets()) ? 131071 : 524287);
    if (isSetBuckets())
      hashCode = hashCode * 8191 + buckets;

    hashCode = hashCode * 8191 + ((isSetReplication_num()) ? 131071 : 524287);
    if (isSetReplication_num())
      hashCode = hashCode * 8191 + replication_num;

    hashCode = hashCode * 8191 + ((isSetStorage_medium()) ? 131071 : 524287);
    if (isSetStorage_medium())
      hashCode = hashCode * 8191 + storage_medium.hashCode();

    hashCode = hashCode * 8191 + ((isSetCooldown_time()) ? 131071 : 524287);
    if (isSetCooldown_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cooldown_time);

    hashCode = hashCode * 8191 + ((isSetLast_consistency_check_time()) ? 131071 : 524287);
    if (isSetLast_consistency_check_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(last_consistency_check_time);

    hashCode = hashCode * 8191 + ((isSetIs_in_memory()) ? 131071 : 524287);
    if (isSetIs_in_memory())
      hashCode = hashCode * 8191 + ((is_in_memory) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIs_temp()) ? 131071 : 524287);
    if (isSetIs_temp())
      hashCode = hashCode * 8191 + ((is_temp) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetData_size()) ? 131071 : 524287);
    if (isSetData_size())
      hashCode = hashCode * 8191 + data_size.hashCode();

    hashCode = hashCode * 8191 + ((isSetRow_count()) ? 131071 : 524287);
    if (isSetRow_count())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(row_count);

    hashCode = hashCode * 8191 + ((isSetEnable_datacache()) ? 131071 : 524287);
    if (isSetEnable_datacache())
      hashCode = hashCode * 8191 + ((enable_datacache) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAvg_cs()) ? 131071 : 524287);
    if (isSetAvg_cs())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(avg_cs);

    hashCode = hashCode * 8191 + ((isSetP50_cs()) ? 131071 : 524287);
    if (isSetP50_cs())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(p50_cs);

    hashCode = hashCode * 8191 + ((isSetMax_cs()) ? 131071 : 524287);
    if (isSetMax_cs())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_cs);

    hashCode = hashCode * 8191 + ((isSetStorage_path()) ? 131071 : 524287);
    if (isSetStorage_path())
      hashCode = hashCode * 8191 + storage_path.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TPartitionMetaInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetDb_name(), other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_name(), other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_name(), other.isSetPartition_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_name, other.partition_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_id(), other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCompact_version(), other.isSetCompact_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompact_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compact_version, other.compact_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVisible_version(), other.isSetVisible_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisible_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visible_version, other.visible_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVisible_version_time(), other.isSetVisible_version_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisible_version_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visible_version_time, other.visible_version_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNext_version(), other.isSetNext_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNext_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.next_version, other.next_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_key(), other.isSetPartition_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_key, other.partition_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_value(), other.isSetPartition_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_value, other.partition_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDistribution_key(), other.isSetDistribution_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistribution_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distribution_key, other.distribution_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBuckets(), other.isSetBuckets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuckets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buckets, other.buckets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReplication_num(), other.isSetReplication_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplication_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replication_num, other.replication_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStorage_medium(), other.isSetStorage_medium());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorage_medium()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_medium, other.storage_medium);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCooldown_time(), other.isSetCooldown_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCooldown_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cooldown_time, other.cooldown_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_consistency_check_time(), other.isSetLast_consistency_check_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_consistency_check_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_consistency_check_time, other.last_consistency_check_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_in_memory(), other.isSetIs_in_memory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_in_memory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_in_memory, other.is_in_memory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_temp(), other.isSetIs_temp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_temp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_temp, other.is_temp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetData_size(), other.isSetData_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_size, other.data_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRow_count(), other.isSetRow_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_count, other.row_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_datacache(), other.isSetEnable_datacache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_datacache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_datacache, other.enable_datacache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAvg_cs(), other.isSetAvg_cs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvg_cs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avg_cs, other.avg_cs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetP50_cs(), other.isSetP50_cs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP50_cs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p50_cs, other.p50_cs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_cs(), other.isSetMax_cs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_cs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_cs, other.max_cs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStorage_path(), other.isSetStorage_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorage_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_path, other.storage_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPartitionMetaInfo(");
    boolean first = true;

    if (isSetDb_name()) {
      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetPartition_name()) {
      if (!first) sb.append(", ");
      sb.append("partition_name:");
      if (this.partition_name == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_name);
      }
      first = false;
    }
    if (isSetPartition_id()) {
      if (!first) sb.append(", ");
      sb.append("partition_id:");
      sb.append(this.partition_id);
      first = false;
    }
    if (isSetCompact_version()) {
      if (!first) sb.append(", ");
      sb.append("compact_version:");
      sb.append(this.compact_version);
      first = false;
    }
    if (isSetVisible_version()) {
      if (!first) sb.append(", ");
      sb.append("visible_version:");
      sb.append(this.visible_version);
      first = false;
    }
    if (isSetVisible_version_time()) {
      if (!first) sb.append(", ");
      sb.append("visible_version_time:");
      sb.append(this.visible_version_time);
      first = false;
    }
    if (isSetNext_version()) {
      if (!first) sb.append(", ");
      sb.append("next_version:");
      sb.append(this.next_version);
      first = false;
    }
    if (isSetPartition_key()) {
      if (!first) sb.append(", ");
      sb.append("partition_key:");
      if (this.partition_key == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_key);
      }
      first = false;
    }
    if (isSetPartition_value()) {
      if (!first) sb.append(", ");
      sb.append("partition_value:");
      if (this.partition_value == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_value);
      }
      first = false;
    }
    if (isSetDistribution_key()) {
      if (!first) sb.append(", ");
      sb.append("distribution_key:");
      if (this.distribution_key == null) {
        sb.append("null");
      } else {
        sb.append(this.distribution_key);
      }
      first = false;
    }
    if (isSetBuckets()) {
      if (!first) sb.append(", ");
      sb.append("buckets:");
      sb.append(this.buckets);
      first = false;
    }
    if (isSetReplication_num()) {
      if (!first) sb.append(", ");
      sb.append("replication_num:");
      sb.append(this.replication_num);
      first = false;
    }
    if (isSetStorage_medium()) {
      if (!first) sb.append(", ");
      sb.append("storage_medium:");
      if (this.storage_medium == null) {
        sb.append("null");
      } else {
        sb.append(this.storage_medium);
      }
      first = false;
    }
    if (isSetCooldown_time()) {
      if (!first) sb.append(", ");
      sb.append("cooldown_time:");
      sb.append(this.cooldown_time);
      first = false;
    }
    if (isSetLast_consistency_check_time()) {
      if (!first) sb.append(", ");
      sb.append("last_consistency_check_time:");
      sb.append(this.last_consistency_check_time);
      first = false;
    }
    if (isSetIs_in_memory()) {
      if (!first) sb.append(", ");
      sb.append("is_in_memory:");
      sb.append(this.is_in_memory);
      first = false;
    }
    if (isSetIs_temp()) {
      if (!first) sb.append(", ");
      sb.append("is_temp:");
      sb.append(this.is_temp);
      first = false;
    }
    if (isSetData_size()) {
      if (!first) sb.append(", ");
      sb.append("data_size:");
      if (this.data_size == null) {
        sb.append("null");
      } else {
        sb.append(this.data_size);
      }
      first = false;
    }
    if (isSetRow_count()) {
      if (!first) sb.append(", ");
      sb.append("row_count:");
      sb.append(this.row_count);
      first = false;
    }
    if (isSetEnable_datacache()) {
      if (!first) sb.append(", ");
      sb.append("enable_datacache:");
      sb.append(this.enable_datacache);
      first = false;
    }
    if (isSetAvg_cs()) {
      if (!first) sb.append(", ");
      sb.append("avg_cs:");
      sb.append(this.avg_cs);
      first = false;
    }
    if (isSetP50_cs()) {
      if (!first) sb.append(", ");
      sb.append("p50_cs:");
      sb.append(this.p50_cs);
      first = false;
    }
    if (isSetMax_cs()) {
      if (!first) sb.append(", ");
      sb.append("max_cs:");
      sb.append(this.max_cs);
      first = false;
    }
    if (isSetStorage_path()) {
      if (!first) sb.append(", ");
      sb.append("storage_path:");
      if (this.storage_path == null) {
        sb.append("null");
      } else {
        sb.append(this.storage_path);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPartitionMetaInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPartitionMetaInfoStandardScheme getScheme() {
      return new TPartitionMetaInfoStandardScheme();
    }
  }

  private static class TPartitionMetaInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPartitionMetaInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TPartitionMetaInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTITION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partition_name = iprot.readString();
              struct.setPartition_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPACT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.compact_version = iprot.readI64();
              struct.setCompact_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VISIBLE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.visible_version = iprot.readI64();
              struct.setVisible_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VISIBLE_VERSION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.visible_version_time = iprot.readI64();
              struct.setVisible_version_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NEXT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.next_version = iprot.readI64();
              struct.setNext_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARTITION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partition_key = iprot.readString();
              struct.setPartition_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PARTITION_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partition_value = iprot.readString();
              struct.setPartition_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DISTRIBUTION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.distribution_key = iprot.readString();
              struct.setDistribution_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BUCKETS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.buckets = iprot.readI32();
              struct.setBucketsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REPLICATION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replication_num = iprot.readI32();
              struct.setReplication_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STORAGE_MEDIUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storage_medium = iprot.readString();
              struct.setStorage_mediumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COOLDOWN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cooldown_time = iprot.readI64();
              struct.setCooldown_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LAST_CONSISTENCY_CHECK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.last_consistency_check_time = iprot.readI64();
              struct.setLast_consistency_check_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_IN_MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_in_memory = iprot.readBool();
              struct.setIs_in_memoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IS_TEMP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_temp = iprot.readBool();
              struct.setIs_tempIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // DATA_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data_size = iprot.readString();
              struct.setData_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.row_count = iprot.readI64();
              struct.setRow_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ENABLE_DATACACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_datacache = iprot.readBool();
              struct.setEnable_datacacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // AVG_CS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.avg_cs = iprot.readDouble();
              struct.setAvg_csIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // P50_CS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.p50_cs = iprot.readDouble();
              struct.setP50_csIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MAX_CS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max_cs = iprot.readDouble();
              struct.setMax_csIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // STORAGE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storage_path = iprot.readString();
              struct.setStorage_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TPartitionMetaInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.db_name != null) {
        if (struct.isSetDb_name()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.db_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_name != null) {
        if (struct.isSetPartition_name()) {
          oprot.writeFieldBegin(PARTITION_NAME_FIELD_DESC);
          oprot.writeString(struct.partition_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPartition_id()) {
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI64(struct.partition_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompact_version()) {
        oprot.writeFieldBegin(COMPACT_VERSION_FIELD_DESC);
        oprot.writeI64(struct.compact_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVisible_version()) {
        oprot.writeFieldBegin(VISIBLE_VERSION_FIELD_DESC);
        oprot.writeI64(struct.visible_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVisible_version_time()) {
        oprot.writeFieldBegin(VISIBLE_VERSION_TIME_FIELD_DESC);
        oprot.writeI64(struct.visible_version_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNext_version()) {
        oprot.writeFieldBegin(NEXT_VERSION_FIELD_DESC);
        oprot.writeI64(struct.next_version);
        oprot.writeFieldEnd();
      }
      if (struct.partition_key != null) {
        if (struct.isSetPartition_key()) {
          oprot.writeFieldBegin(PARTITION_KEY_FIELD_DESC);
          oprot.writeString(struct.partition_key);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_value != null) {
        if (struct.isSetPartition_value()) {
          oprot.writeFieldBegin(PARTITION_VALUE_FIELD_DESC);
          oprot.writeString(struct.partition_value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.distribution_key != null) {
        if (struct.isSetDistribution_key()) {
          oprot.writeFieldBegin(DISTRIBUTION_KEY_FIELD_DESC);
          oprot.writeString(struct.distribution_key);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBuckets()) {
        oprot.writeFieldBegin(BUCKETS_FIELD_DESC);
        oprot.writeI32(struct.buckets);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReplication_num()) {
        oprot.writeFieldBegin(REPLICATION_NUM_FIELD_DESC);
        oprot.writeI32(struct.replication_num);
        oprot.writeFieldEnd();
      }
      if (struct.storage_medium != null) {
        if (struct.isSetStorage_medium()) {
          oprot.writeFieldBegin(STORAGE_MEDIUM_FIELD_DESC);
          oprot.writeString(struct.storage_medium);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCooldown_time()) {
        oprot.writeFieldBegin(COOLDOWN_TIME_FIELD_DESC);
        oprot.writeI64(struct.cooldown_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLast_consistency_check_time()) {
        oprot.writeFieldBegin(LAST_CONSISTENCY_CHECK_TIME_FIELD_DESC);
        oprot.writeI64(struct.last_consistency_check_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_in_memory()) {
        oprot.writeFieldBegin(IS_IN_MEMORY_FIELD_DESC);
        oprot.writeBool(struct.is_in_memory);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_temp()) {
        oprot.writeFieldBegin(IS_TEMP_FIELD_DESC);
        oprot.writeBool(struct.is_temp);
        oprot.writeFieldEnd();
      }
      if (struct.data_size != null) {
        if (struct.isSetData_size()) {
          oprot.writeFieldBegin(DATA_SIZE_FIELD_DESC);
          oprot.writeString(struct.data_size);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRow_count()) {
        oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
        oprot.writeI64(struct.row_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_datacache()) {
        oprot.writeFieldBegin(ENABLE_DATACACHE_FIELD_DESC);
        oprot.writeBool(struct.enable_datacache);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAvg_cs()) {
        oprot.writeFieldBegin(AVG_CS_FIELD_DESC);
        oprot.writeDouble(struct.avg_cs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetP50_cs()) {
        oprot.writeFieldBegin(P50_CS_FIELD_DESC);
        oprot.writeDouble(struct.p50_cs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_cs()) {
        oprot.writeFieldBegin(MAX_CS_FIELD_DESC);
        oprot.writeDouble(struct.max_cs);
        oprot.writeFieldEnd();
      }
      if (struct.storage_path != null) {
        if (struct.isSetStorage_path()) {
          oprot.writeFieldBegin(STORAGE_PATH_FIELD_DESC);
          oprot.writeString(struct.storage_path);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPartitionMetaInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPartitionMetaInfoTupleScheme getScheme() {
      return new TPartitionMetaInfoTupleScheme();
    }
  }

  private static class TPartitionMetaInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPartitionMetaInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPartitionMetaInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDb_name()) {
        optionals.set(0);
      }
      if (struct.isSetTable_name()) {
        optionals.set(1);
      }
      if (struct.isSetPartition_name()) {
        optionals.set(2);
      }
      if (struct.isSetPartition_id()) {
        optionals.set(3);
      }
      if (struct.isSetCompact_version()) {
        optionals.set(4);
      }
      if (struct.isSetVisible_version()) {
        optionals.set(5);
      }
      if (struct.isSetVisible_version_time()) {
        optionals.set(6);
      }
      if (struct.isSetNext_version()) {
        optionals.set(7);
      }
      if (struct.isSetPartition_key()) {
        optionals.set(8);
      }
      if (struct.isSetPartition_value()) {
        optionals.set(9);
      }
      if (struct.isSetDistribution_key()) {
        optionals.set(10);
      }
      if (struct.isSetBuckets()) {
        optionals.set(11);
      }
      if (struct.isSetReplication_num()) {
        optionals.set(12);
      }
      if (struct.isSetStorage_medium()) {
        optionals.set(13);
      }
      if (struct.isSetCooldown_time()) {
        optionals.set(14);
      }
      if (struct.isSetLast_consistency_check_time()) {
        optionals.set(15);
      }
      if (struct.isSetIs_in_memory()) {
        optionals.set(16);
      }
      if (struct.isSetIs_temp()) {
        optionals.set(17);
      }
      if (struct.isSetData_size()) {
        optionals.set(18);
      }
      if (struct.isSetRow_count()) {
        optionals.set(19);
      }
      if (struct.isSetEnable_datacache()) {
        optionals.set(20);
      }
      if (struct.isSetAvg_cs()) {
        optionals.set(21);
      }
      if (struct.isSetP50_cs()) {
        optionals.set(22);
      }
      if (struct.isSetMax_cs()) {
        optionals.set(23);
      }
      if (struct.isSetStorage_path()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetDb_name()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetPartition_name()) {
        oprot.writeString(struct.partition_name);
      }
      if (struct.isSetPartition_id()) {
        oprot.writeI64(struct.partition_id);
      }
      if (struct.isSetCompact_version()) {
        oprot.writeI64(struct.compact_version);
      }
      if (struct.isSetVisible_version()) {
        oprot.writeI64(struct.visible_version);
      }
      if (struct.isSetVisible_version_time()) {
        oprot.writeI64(struct.visible_version_time);
      }
      if (struct.isSetNext_version()) {
        oprot.writeI64(struct.next_version);
      }
      if (struct.isSetPartition_key()) {
        oprot.writeString(struct.partition_key);
      }
      if (struct.isSetPartition_value()) {
        oprot.writeString(struct.partition_value);
      }
      if (struct.isSetDistribution_key()) {
        oprot.writeString(struct.distribution_key);
      }
      if (struct.isSetBuckets()) {
        oprot.writeI32(struct.buckets);
      }
      if (struct.isSetReplication_num()) {
        oprot.writeI32(struct.replication_num);
      }
      if (struct.isSetStorage_medium()) {
        oprot.writeString(struct.storage_medium);
      }
      if (struct.isSetCooldown_time()) {
        oprot.writeI64(struct.cooldown_time);
      }
      if (struct.isSetLast_consistency_check_time()) {
        oprot.writeI64(struct.last_consistency_check_time);
      }
      if (struct.isSetIs_in_memory()) {
        oprot.writeBool(struct.is_in_memory);
      }
      if (struct.isSetIs_temp()) {
        oprot.writeBool(struct.is_temp);
      }
      if (struct.isSetData_size()) {
        oprot.writeString(struct.data_size);
      }
      if (struct.isSetRow_count()) {
        oprot.writeI64(struct.row_count);
      }
      if (struct.isSetEnable_datacache()) {
        oprot.writeBool(struct.enable_datacache);
      }
      if (struct.isSetAvg_cs()) {
        oprot.writeDouble(struct.avg_cs);
      }
      if (struct.isSetP50_cs()) {
        oprot.writeDouble(struct.p50_cs);
      }
      if (struct.isSetMax_cs()) {
        oprot.writeDouble(struct.max_cs);
      }
      if (struct.isSetStorage_path()) {
        oprot.writeString(struct.storage_path);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPartitionMetaInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.db_name = iprot.readString();
        struct.setDb_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.partition_name = iprot.readString();
        struct.setPartition_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.partition_id = iprot.readI64();
        struct.setPartition_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.compact_version = iprot.readI64();
        struct.setCompact_versionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.visible_version = iprot.readI64();
        struct.setVisible_versionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.visible_version_time = iprot.readI64();
        struct.setVisible_version_timeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.next_version = iprot.readI64();
        struct.setNext_versionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.partition_key = iprot.readString();
        struct.setPartition_keyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.partition_value = iprot.readString();
        struct.setPartition_valueIsSet(true);
      }
      if (incoming.get(10)) {
        struct.distribution_key = iprot.readString();
        struct.setDistribution_keyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.buckets = iprot.readI32();
        struct.setBucketsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.replication_num = iprot.readI32();
        struct.setReplication_numIsSet(true);
      }
      if (incoming.get(13)) {
        struct.storage_medium = iprot.readString();
        struct.setStorage_mediumIsSet(true);
      }
      if (incoming.get(14)) {
        struct.cooldown_time = iprot.readI64();
        struct.setCooldown_timeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.last_consistency_check_time = iprot.readI64();
        struct.setLast_consistency_check_timeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.is_in_memory = iprot.readBool();
        struct.setIs_in_memoryIsSet(true);
      }
      if (incoming.get(17)) {
        struct.is_temp = iprot.readBool();
        struct.setIs_tempIsSet(true);
      }
      if (incoming.get(18)) {
        struct.data_size = iprot.readString();
        struct.setData_sizeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.row_count = iprot.readI64();
        struct.setRow_countIsSet(true);
      }
      if (incoming.get(20)) {
        struct.enable_datacache = iprot.readBool();
        struct.setEnable_datacacheIsSet(true);
      }
      if (incoming.get(21)) {
        struct.avg_cs = iprot.readDouble();
        struct.setAvg_csIsSet(true);
      }
      if (incoming.get(22)) {
        struct.p50_cs = iprot.readDouble();
        struct.setP50_csIsSet(true);
      }
      if (incoming.get(23)) {
        struct.max_cs = iprot.readDouble();
        struct.setMax_csIsSet(true);
      }
      if (incoming.get(24)) {
        struct.storage_path = iprot.readString();
        struct.setStorage_pathIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

