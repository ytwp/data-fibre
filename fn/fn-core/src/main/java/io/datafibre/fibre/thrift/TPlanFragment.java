/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TPlanFragment implements org.apache.thrift.TBase<TPlanFragment, TPlanFragment._Fields>, java.io.Serializable, Cloneable, Comparable<TPlanFragment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlanFragment");

  private static final org.apache.thrift.protocol.TField PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("plan", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField OUTPUT_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("output_exprs", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField OUTPUT_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("output_sink", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("partition", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField MIN_RESERVATION_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("min_reservation_bytes", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField INITIAL_RESERVATION_TOTAL_CLAIMS_FIELD_DESC = new org.apache.thrift.protocol.TField("initial_reservation_total_claims", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField QUERY_GLOBAL_DICTS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_global_dicts", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField LOAD_GLOBAL_DICTS_FIELD_DESC = new org.apache.thrift.protocol.TField("load_global_dicts", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField CACHE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_param", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField QUERY_GLOBAL_DICT_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_global_dict_exprs", org.apache.thrift.protocol.TType.MAP, (short)23);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPlanFragmentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPlanFragmentTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPlan plan; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> output_exprs; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TDataSink output_sink; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TDataPartition partition; // required
  public long min_reservation_bytes; // optional
  public long initial_reservation_total_claims; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TGlobalDict> query_global_dicts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TGlobalDict> load_global_dicts; // optional
  public @org.apache.thrift.annotation.Nullable TCacheParam cache_param; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,io.datafibre.fibre.thrift.TExpr> query_global_dict_exprs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLAN((short)2, "plan"),
    OUTPUT_EXPRS((short)4, "output_exprs"),
    OUTPUT_SINK((short)5, "output_sink"),
    PARTITION((short)6, "partition"),
    MIN_RESERVATION_BYTES((short)7, "min_reservation_bytes"),
    INITIAL_RESERVATION_TOTAL_CLAIMS((short)8, "initial_reservation_total_claims"),
    QUERY_GLOBAL_DICTS((short)20, "query_global_dicts"),
    LOAD_GLOBAL_DICTS((short)21, "load_global_dicts"),
    CACHE_PARAM((short)22, "cache_param"),
    QUERY_GLOBAL_DICT_EXPRS((short)23, "query_global_dict_exprs");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // PLAN
          return PLAN;
        case 4: // OUTPUT_EXPRS
          return OUTPUT_EXPRS;
        case 5: // OUTPUT_SINK
          return OUTPUT_SINK;
        case 6: // PARTITION
          return PARTITION;
        case 7: // MIN_RESERVATION_BYTES
          return MIN_RESERVATION_BYTES;
        case 8: // INITIAL_RESERVATION_TOTAL_CLAIMS
          return INITIAL_RESERVATION_TOTAL_CLAIMS;
        case 20: // QUERY_GLOBAL_DICTS
          return QUERY_GLOBAL_DICTS;
        case 21: // LOAD_GLOBAL_DICTS
          return LOAD_GLOBAL_DICTS;
        case 22: // CACHE_PARAM
          return CACHE_PARAM;
        case 23: // QUERY_GLOBAL_DICT_EXPRS
          return QUERY_GLOBAL_DICT_EXPRS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MIN_RESERVATION_BYTES_ISSET_ID = 0;
  private static final int __INITIAL_RESERVATION_TOTAL_CLAIMS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PLAN,_Fields.OUTPUT_EXPRS,_Fields.OUTPUT_SINK,_Fields.MIN_RESERVATION_BYTES,_Fields.INITIAL_RESERVATION_TOTAL_CLAIMS,_Fields.QUERY_GLOBAL_DICTS,_Fields.LOAD_GLOBAL_DICTS,_Fields.CACHE_PARAM,_Fields.QUERY_GLOBAL_DICT_EXPRS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAN, new org.apache.thrift.meta_data.FieldMetaData("plan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TPlan.class)));
    tmpMap.put(_Fields.OUTPUT_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("output_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TExpr.class))));
    tmpMap.put(_Fields.OUTPUT_SINK, new org.apache.thrift.meta_data.FieldMetaData("output_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TDataSink.class)));
    tmpMap.put(_Fields.PARTITION, new org.apache.thrift.meta_data.FieldMetaData("partition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TDataPartition.class)));
    tmpMap.put(_Fields.MIN_RESERVATION_BYTES, new org.apache.thrift.meta_data.FieldMetaData("min_reservation_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INITIAL_RESERVATION_TOTAL_CLAIMS, new org.apache.thrift.meta_data.FieldMetaData("initial_reservation_total_claims", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_GLOBAL_DICTS, new org.apache.thrift.meta_data.FieldMetaData("query_global_dicts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TGlobalDict.class))));
    tmpMap.put(_Fields.LOAD_GLOBAL_DICTS, new org.apache.thrift.meta_data.FieldMetaData("load_global_dicts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TGlobalDict.class))));
    tmpMap.put(_Fields.CACHE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("cache_param", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCacheParam.class)));
    tmpMap.put(_Fields.QUERY_GLOBAL_DICT_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("query_global_dict_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TExpr.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlanFragment.class, metaDataMap);
  }

  public TPlanFragment() {
  }

  public TPlanFragment(
    io.datafibre.fibre.thrift.TDataPartition partition)
  {
    this();
    this.partition = partition;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlanFragment(TPlanFragment other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPlan()) {
      this.plan = new io.datafibre.fibre.thrift.TPlan(other.plan);
    }
    if (other.isSetOutput_exprs()) {
      java.util.List<io.datafibre.fibre.thrift.TExpr> __this__output_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(other.output_exprs.size());
      for (io.datafibre.fibre.thrift.TExpr other_element : other.output_exprs) {
        __this__output_exprs.add(new io.datafibre.fibre.thrift.TExpr(other_element));
      }
      this.output_exprs = __this__output_exprs;
    }
    if (other.isSetOutput_sink()) {
      this.output_sink = new io.datafibre.fibre.thrift.TDataSink(other.output_sink);
    }
    if (other.isSetPartition()) {
      this.partition = new io.datafibre.fibre.thrift.TDataPartition(other.partition);
    }
    this.min_reservation_bytes = other.min_reservation_bytes;
    this.initial_reservation_total_claims = other.initial_reservation_total_claims;
    if (other.isSetQuery_global_dicts()) {
      java.util.List<io.datafibre.fibre.thrift.TGlobalDict> __this__query_global_dicts = new java.util.ArrayList<io.datafibre.fibre.thrift.TGlobalDict>(other.query_global_dicts.size());
      for (io.datafibre.fibre.thrift.TGlobalDict other_element : other.query_global_dicts) {
        __this__query_global_dicts.add(new io.datafibre.fibre.thrift.TGlobalDict(other_element));
      }
      this.query_global_dicts = __this__query_global_dicts;
    }
    if (other.isSetLoad_global_dicts()) {
      java.util.List<io.datafibre.fibre.thrift.TGlobalDict> __this__load_global_dicts = new java.util.ArrayList<io.datafibre.fibre.thrift.TGlobalDict>(other.load_global_dicts.size());
      for (io.datafibre.fibre.thrift.TGlobalDict other_element : other.load_global_dicts) {
        __this__load_global_dicts.add(new io.datafibre.fibre.thrift.TGlobalDict(other_element));
      }
      this.load_global_dicts = __this__load_global_dicts;
    }
    if (other.isSetCache_param()) {
      this.cache_param = new TCacheParam(other.cache_param);
    }
    if (other.isSetQuery_global_dict_exprs()) {
      java.util.Map<java.lang.Integer,io.datafibre.fibre.thrift.TExpr> __this__query_global_dict_exprs = new java.util.HashMap<java.lang.Integer,io.datafibre.fibre.thrift.TExpr>(other.query_global_dict_exprs.size());
      for (java.util.Map.Entry<java.lang.Integer, io.datafibre.fibre.thrift.TExpr> other_element : other.query_global_dict_exprs.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        io.datafibre.fibre.thrift.TExpr other_element_value = other_element.getValue();

        java.lang.Integer __this__query_global_dict_exprs_copy_key = other_element_key;

        io.datafibre.fibre.thrift.TExpr __this__query_global_dict_exprs_copy_value = new io.datafibre.fibre.thrift.TExpr(other_element_value);

        __this__query_global_dict_exprs.put(__this__query_global_dict_exprs_copy_key, __this__query_global_dict_exprs_copy_value);
      }
      this.query_global_dict_exprs = __this__query_global_dict_exprs;
    }
  }

  @Override
  public TPlanFragment deepCopy() {
    return new TPlanFragment(this);
  }

  @Override
  public void clear() {
    this.plan = null;
    this.output_exprs = null;
    this.output_sink = null;
    this.partition = null;
    setMin_reservation_bytesIsSet(false);
    this.min_reservation_bytes = 0;
    setInitial_reservation_total_claimsIsSet(false);
    this.initial_reservation_total_claims = 0;
    this.query_global_dicts = null;
    this.load_global_dicts = null;
    this.cache_param = null;
    this.query_global_dict_exprs = null;
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TPlan getPlan() {
    return this.plan;
  }

  public TPlanFragment setPlan(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPlan plan) {
    this.plan = plan;
    return this;
  }

  public void unsetPlan() {
    this.plan = null;
  }

  /** Returns true if field plan is set (has been assigned a value) and false otherwise */
  public boolean isSetPlan() {
    return this.plan != null;
  }

  public void setPlanIsSet(boolean value) {
    if (!value) {
      this.plan = null;
    }
  }

  public int getOutput_exprsSize() {
    return (this.output_exprs == null) ? 0 : this.output_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TExpr> getOutput_exprsIterator() {
    return (this.output_exprs == null) ? null : this.output_exprs.iterator();
  }

  public void addToOutput_exprs(io.datafibre.fibre.thrift.TExpr elem) {
    if (this.output_exprs == null) {
      this.output_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>();
    }
    this.output_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TExpr> getOutput_exprs() {
    return this.output_exprs;
  }

  public TPlanFragment setOutput_exprs(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> output_exprs) {
    this.output_exprs = output_exprs;
    return this;
  }

  public void unsetOutput_exprs() {
    this.output_exprs = null;
  }

  /** Returns true if field output_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_exprs() {
    return this.output_exprs != null;
  }

  public void setOutput_exprsIsSet(boolean value) {
    if (!value) {
      this.output_exprs = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TDataSink getOutput_sink() {
    return this.output_sink;
  }

  public TPlanFragment setOutput_sink(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TDataSink output_sink) {
    this.output_sink = output_sink;
    return this;
  }

  public void unsetOutput_sink() {
    this.output_sink = null;
  }

  /** Returns true if field output_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_sink() {
    return this.output_sink != null;
  }

  public void setOutput_sinkIsSet(boolean value) {
    if (!value) {
      this.output_sink = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TDataPartition getPartition() {
    return this.partition;
  }

  public TPlanFragment setPartition(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TDataPartition partition) {
    this.partition = partition;
    return this;
  }

  public void unsetPartition() {
    this.partition = null;
  }

  /** Returns true if field partition is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition() {
    return this.partition != null;
  }

  public void setPartitionIsSet(boolean value) {
    if (!value) {
      this.partition = null;
    }
  }

  public long getMin_reservation_bytes() {
    return this.min_reservation_bytes;
  }

  public TPlanFragment setMin_reservation_bytes(long min_reservation_bytes) {
    this.min_reservation_bytes = min_reservation_bytes;
    setMin_reservation_bytesIsSet(true);
    return this;
  }

  public void unsetMin_reservation_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_RESERVATION_BYTES_ISSET_ID);
  }

  /** Returns true if field min_reservation_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_reservation_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_RESERVATION_BYTES_ISSET_ID);
  }

  public void setMin_reservation_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_RESERVATION_BYTES_ISSET_ID, value);
  }

  public long getInitial_reservation_total_claims() {
    return this.initial_reservation_total_claims;
  }

  public TPlanFragment setInitial_reservation_total_claims(long initial_reservation_total_claims) {
    this.initial_reservation_total_claims = initial_reservation_total_claims;
    setInitial_reservation_total_claimsIsSet(true);
    return this;
  }

  public void unsetInitial_reservation_total_claims() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INITIAL_RESERVATION_TOTAL_CLAIMS_ISSET_ID);
  }

  /** Returns true if field initial_reservation_total_claims is set (has been assigned a value) and false otherwise */
  public boolean isSetInitial_reservation_total_claims() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INITIAL_RESERVATION_TOTAL_CLAIMS_ISSET_ID);
  }

  public void setInitial_reservation_total_claimsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INITIAL_RESERVATION_TOTAL_CLAIMS_ISSET_ID, value);
  }

  public int getQuery_global_dictsSize() {
    return (this.query_global_dicts == null) ? 0 : this.query_global_dicts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TGlobalDict> getQuery_global_dictsIterator() {
    return (this.query_global_dicts == null) ? null : this.query_global_dicts.iterator();
  }

  public void addToQuery_global_dicts(io.datafibre.fibre.thrift.TGlobalDict elem) {
    if (this.query_global_dicts == null) {
      this.query_global_dicts = new java.util.ArrayList<io.datafibre.fibre.thrift.TGlobalDict>();
    }
    this.query_global_dicts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TGlobalDict> getQuery_global_dicts() {
    return this.query_global_dicts;
  }

  public TPlanFragment setQuery_global_dicts(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TGlobalDict> query_global_dicts) {
    this.query_global_dicts = query_global_dicts;
    return this;
  }

  public void unsetQuery_global_dicts() {
    this.query_global_dicts = null;
  }

  /** Returns true if field query_global_dicts is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_global_dicts() {
    return this.query_global_dicts != null;
  }

  public void setQuery_global_dictsIsSet(boolean value) {
    if (!value) {
      this.query_global_dicts = null;
    }
  }

  public int getLoad_global_dictsSize() {
    return (this.load_global_dicts == null) ? 0 : this.load_global_dicts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TGlobalDict> getLoad_global_dictsIterator() {
    return (this.load_global_dicts == null) ? null : this.load_global_dicts.iterator();
  }

  public void addToLoad_global_dicts(io.datafibre.fibre.thrift.TGlobalDict elem) {
    if (this.load_global_dicts == null) {
      this.load_global_dicts = new java.util.ArrayList<io.datafibre.fibre.thrift.TGlobalDict>();
    }
    this.load_global_dicts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TGlobalDict> getLoad_global_dicts() {
    return this.load_global_dicts;
  }

  public TPlanFragment setLoad_global_dicts(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TGlobalDict> load_global_dicts) {
    this.load_global_dicts = load_global_dicts;
    return this;
  }

  public void unsetLoad_global_dicts() {
    this.load_global_dicts = null;
  }

  /** Returns true if field load_global_dicts is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_global_dicts() {
    return this.load_global_dicts != null;
  }

  public void setLoad_global_dictsIsSet(boolean value) {
    if (!value) {
      this.load_global_dicts = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TCacheParam getCache_param() {
    return this.cache_param;
  }

  public TPlanFragment setCache_param(@org.apache.thrift.annotation.Nullable TCacheParam cache_param) {
    this.cache_param = cache_param;
    return this;
  }

  public void unsetCache_param() {
    this.cache_param = null;
  }

  /** Returns true if field cache_param is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_param() {
    return this.cache_param != null;
  }

  public void setCache_paramIsSet(boolean value) {
    if (!value) {
      this.cache_param = null;
    }
  }

  public int getQuery_global_dict_exprsSize() {
    return (this.query_global_dict_exprs == null) ? 0 : this.query_global_dict_exprs.size();
  }

  public void putToQuery_global_dict_exprs(int key, io.datafibre.fibre.thrift.TExpr val) {
    if (this.query_global_dict_exprs == null) {
      this.query_global_dict_exprs = new java.util.HashMap<java.lang.Integer,io.datafibre.fibre.thrift.TExpr>();
    }
    this.query_global_dict_exprs.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,io.datafibre.fibre.thrift.TExpr> getQuery_global_dict_exprs() {
    return this.query_global_dict_exprs;
  }

  public TPlanFragment setQuery_global_dict_exprs(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,io.datafibre.fibre.thrift.TExpr> query_global_dict_exprs) {
    this.query_global_dict_exprs = query_global_dict_exprs;
    return this;
  }

  public void unsetQuery_global_dict_exprs() {
    this.query_global_dict_exprs = null;
  }

  /** Returns true if field query_global_dict_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_global_dict_exprs() {
    return this.query_global_dict_exprs != null;
  }

  public void setQuery_global_dict_exprsIsSet(boolean value) {
    if (!value) {
      this.query_global_dict_exprs = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PLAN:
      if (value == null) {
        unsetPlan();
      } else {
        setPlan((io.datafibre.fibre.thrift.TPlan)value);
      }
      break;

    case OUTPUT_EXPRS:
      if (value == null) {
        unsetOutput_exprs();
      } else {
        setOutput_exprs((java.util.List<io.datafibre.fibre.thrift.TExpr>)value);
      }
      break;

    case OUTPUT_SINK:
      if (value == null) {
        unsetOutput_sink();
      } else {
        setOutput_sink((io.datafibre.fibre.thrift.TDataSink)value);
      }
      break;

    case PARTITION:
      if (value == null) {
        unsetPartition();
      } else {
        setPartition((io.datafibre.fibre.thrift.TDataPartition)value);
      }
      break;

    case MIN_RESERVATION_BYTES:
      if (value == null) {
        unsetMin_reservation_bytes();
      } else {
        setMin_reservation_bytes((java.lang.Long)value);
      }
      break;

    case INITIAL_RESERVATION_TOTAL_CLAIMS:
      if (value == null) {
        unsetInitial_reservation_total_claims();
      } else {
        setInitial_reservation_total_claims((java.lang.Long)value);
      }
      break;

    case QUERY_GLOBAL_DICTS:
      if (value == null) {
        unsetQuery_global_dicts();
      } else {
        setQuery_global_dicts((java.util.List<io.datafibre.fibre.thrift.TGlobalDict>)value);
      }
      break;

    case LOAD_GLOBAL_DICTS:
      if (value == null) {
        unsetLoad_global_dicts();
      } else {
        setLoad_global_dicts((java.util.List<io.datafibre.fibre.thrift.TGlobalDict>)value);
      }
      break;

    case CACHE_PARAM:
      if (value == null) {
        unsetCache_param();
      } else {
        setCache_param((TCacheParam)value);
      }
      break;

    case QUERY_GLOBAL_DICT_EXPRS:
      if (value == null) {
        unsetQuery_global_dict_exprs();
      } else {
        setQuery_global_dict_exprs((java.util.Map<java.lang.Integer,io.datafibre.fibre.thrift.TExpr>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PLAN:
      return getPlan();

    case OUTPUT_EXPRS:
      return getOutput_exprs();

    case OUTPUT_SINK:
      return getOutput_sink();

    case PARTITION:
      return getPartition();

    case MIN_RESERVATION_BYTES:
      return getMin_reservation_bytes();

    case INITIAL_RESERVATION_TOTAL_CLAIMS:
      return getInitial_reservation_total_claims();

    case QUERY_GLOBAL_DICTS:
      return getQuery_global_dicts();

    case LOAD_GLOBAL_DICTS:
      return getLoad_global_dicts();

    case CACHE_PARAM:
      return getCache_param();

    case QUERY_GLOBAL_DICT_EXPRS:
      return getQuery_global_dict_exprs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PLAN:
      return isSetPlan();
    case OUTPUT_EXPRS:
      return isSetOutput_exprs();
    case OUTPUT_SINK:
      return isSetOutput_sink();
    case PARTITION:
      return isSetPartition();
    case MIN_RESERVATION_BYTES:
      return isSetMin_reservation_bytes();
    case INITIAL_RESERVATION_TOTAL_CLAIMS:
      return isSetInitial_reservation_total_claims();
    case QUERY_GLOBAL_DICTS:
      return isSetQuery_global_dicts();
    case LOAD_GLOBAL_DICTS:
      return isSetLoad_global_dicts();
    case CACHE_PARAM:
      return isSetCache_param();
    case QUERY_GLOBAL_DICT_EXPRS:
      return isSetQuery_global_dict_exprs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TPlanFragment)
      return this.equals((TPlanFragment)that);
    return false;
  }

  public boolean equals(TPlanFragment that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_plan = true && this.isSetPlan();
    boolean that_present_plan = true && that.isSetPlan();
    if (this_present_plan || that_present_plan) {
      if (!(this_present_plan && that_present_plan))
        return false;
      if (!this.plan.equals(that.plan))
        return false;
    }

    boolean this_present_output_exprs = true && this.isSetOutput_exprs();
    boolean that_present_output_exprs = true && that.isSetOutput_exprs();
    if (this_present_output_exprs || that_present_output_exprs) {
      if (!(this_present_output_exprs && that_present_output_exprs))
        return false;
      if (!this.output_exprs.equals(that.output_exprs))
        return false;
    }

    boolean this_present_output_sink = true && this.isSetOutput_sink();
    boolean that_present_output_sink = true && that.isSetOutput_sink();
    if (this_present_output_sink || that_present_output_sink) {
      if (!(this_present_output_sink && that_present_output_sink))
        return false;
      if (!this.output_sink.equals(that.output_sink))
        return false;
    }

    boolean this_present_partition = true && this.isSetPartition();
    boolean that_present_partition = true && that.isSetPartition();
    if (this_present_partition || that_present_partition) {
      if (!(this_present_partition && that_present_partition))
        return false;
      if (!this.partition.equals(that.partition))
        return false;
    }

    boolean this_present_min_reservation_bytes = true && this.isSetMin_reservation_bytes();
    boolean that_present_min_reservation_bytes = true && that.isSetMin_reservation_bytes();
    if (this_present_min_reservation_bytes || that_present_min_reservation_bytes) {
      if (!(this_present_min_reservation_bytes && that_present_min_reservation_bytes))
        return false;
      if (this.min_reservation_bytes != that.min_reservation_bytes)
        return false;
    }

    boolean this_present_initial_reservation_total_claims = true && this.isSetInitial_reservation_total_claims();
    boolean that_present_initial_reservation_total_claims = true && that.isSetInitial_reservation_total_claims();
    if (this_present_initial_reservation_total_claims || that_present_initial_reservation_total_claims) {
      if (!(this_present_initial_reservation_total_claims && that_present_initial_reservation_total_claims))
        return false;
      if (this.initial_reservation_total_claims != that.initial_reservation_total_claims)
        return false;
    }

    boolean this_present_query_global_dicts = true && this.isSetQuery_global_dicts();
    boolean that_present_query_global_dicts = true && that.isSetQuery_global_dicts();
    if (this_present_query_global_dicts || that_present_query_global_dicts) {
      if (!(this_present_query_global_dicts && that_present_query_global_dicts))
        return false;
      if (!this.query_global_dicts.equals(that.query_global_dicts))
        return false;
    }

    boolean this_present_load_global_dicts = true && this.isSetLoad_global_dicts();
    boolean that_present_load_global_dicts = true && that.isSetLoad_global_dicts();
    if (this_present_load_global_dicts || that_present_load_global_dicts) {
      if (!(this_present_load_global_dicts && that_present_load_global_dicts))
        return false;
      if (!this.load_global_dicts.equals(that.load_global_dicts))
        return false;
    }

    boolean this_present_cache_param = true && this.isSetCache_param();
    boolean that_present_cache_param = true && that.isSetCache_param();
    if (this_present_cache_param || that_present_cache_param) {
      if (!(this_present_cache_param && that_present_cache_param))
        return false;
      if (!this.cache_param.equals(that.cache_param))
        return false;
    }

    boolean this_present_query_global_dict_exprs = true && this.isSetQuery_global_dict_exprs();
    boolean that_present_query_global_dict_exprs = true && that.isSetQuery_global_dict_exprs();
    if (this_present_query_global_dict_exprs || that_present_query_global_dict_exprs) {
      if (!(this_present_query_global_dict_exprs && that_present_query_global_dict_exprs))
        return false;
      if (!this.query_global_dict_exprs.equals(that.query_global_dict_exprs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPlan()) ? 131071 : 524287);
    if (isSetPlan())
      hashCode = hashCode * 8191 + plan.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutput_exprs()) ? 131071 : 524287);
    if (isSetOutput_exprs())
      hashCode = hashCode * 8191 + output_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutput_sink()) ? 131071 : 524287);
    if (isSetOutput_sink())
      hashCode = hashCode * 8191 + output_sink.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition()) ? 131071 : 524287);
    if (isSetPartition())
      hashCode = hashCode * 8191 + partition.hashCode();

    hashCode = hashCode * 8191 + ((isSetMin_reservation_bytes()) ? 131071 : 524287);
    if (isSetMin_reservation_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(min_reservation_bytes);

    hashCode = hashCode * 8191 + ((isSetInitial_reservation_total_claims()) ? 131071 : 524287);
    if (isSetInitial_reservation_total_claims())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(initial_reservation_total_claims);

    hashCode = hashCode * 8191 + ((isSetQuery_global_dicts()) ? 131071 : 524287);
    if (isSetQuery_global_dicts())
      hashCode = hashCode * 8191 + query_global_dicts.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoad_global_dicts()) ? 131071 : 524287);
    if (isSetLoad_global_dicts())
      hashCode = hashCode * 8191 + load_global_dicts.hashCode();

    hashCode = hashCode * 8191 + ((isSetCache_param()) ? 131071 : 524287);
    if (isSetCache_param())
      hashCode = hashCode * 8191 + cache_param.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuery_global_dict_exprs()) ? 131071 : 524287);
    if (isSetQuery_global_dict_exprs())
      hashCode = hashCode * 8191 + query_global_dict_exprs.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TPlanFragment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPlan(), other.isSetPlan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan, other.plan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutput_exprs(), other.isSetOutput_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_exprs, other.output_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutput_sink(), other.isSetOutput_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_sink, other.output_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition(), other.isSetPartition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition, other.partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMin_reservation_bytes(), other.isSetMin_reservation_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_reservation_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_reservation_bytes, other.min_reservation_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInitial_reservation_total_claims(), other.isSetInitial_reservation_total_claims());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitial_reservation_total_claims()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initial_reservation_total_claims, other.initial_reservation_total_claims);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_global_dicts(), other.isSetQuery_global_dicts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_global_dicts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_global_dicts, other.query_global_dicts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_global_dicts(), other.isSetLoad_global_dicts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_global_dicts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_global_dicts, other.load_global_dicts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCache_param(), other.isSetCache_param());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_param()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_param, other.cache_param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_global_dict_exprs(), other.isSetQuery_global_dict_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_global_dict_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_global_dict_exprs, other.query_global_dict_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPlanFragment(");
    boolean first = true;

    if (isSetPlan()) {
      sb.append("plan:");
      if (this.plan == null) {
        sb.append("null");
      } else {
        sb.append(this.plan);
      }
      first = false;
    }
    if (isSetOutput_exprs()) {
      if (!first) sb.append(", ");
      sb.append("output_exprs:");
      if (this.output_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.output_exprs);
      }
      first = false;
    }
    if (isSetOutput_sink()) {
      if (!first) sb.append(", ");
      sb.append("output_sink:");
      if (this.output_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.output_sink);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("partition:");
    if (this.partition == null) {
      sb.append("null");
    } else {
      sb.append(this.partition);
    }
    first = false;
    if (isSetMin_reservation_bytes()) {
      if (!first) sb.append(", ");
      sb.append("min_reservation_bytes:");
      sb.append(this.min_reservation_bytes);
      first = false;
    }
    if (isSetInitial_reservation_total_claims()) {
      if (!first) sb.append(", ");
      sb.append("initial_reservation_total_claims:");
      sb.append(this.initial_reservation_total_claims);
      first = false;
    }
    if (isSetQuery_global_dicts()) {
      if (!first) sb.append(", ");
      sb.append("query_global_dicts:");
      if (this.query_global_dicts == null) {
        sb.append("null");
      } else {
        sb.append(this.query_global_dicts);
      }
      first = false;
    }
    if (isSetLoad_global_dicts()) {
      if (!first) sb.append(", ");
      sb.append("load_global_dicts:");
      if (this.load_global_dicts == null) {
        sb.append("null");
      } else {
        sb.append(this.load_global_dicts);
      }
      first = false;
    }
    if (isSetCache_param()) {
      if (!first) sb.append(", ");
      sb.append("cache_param:");
      if (this.cache_param == null) {
        sb.append("null");
      } else {
        sb.append(this.cache_param);
      }
      first = false;
    }
    if (isSetQuery_global_dict_exprs()) {
      if (!first) sb.append(", ");
      sb.append("query_global_dict_exprs:");
      if (this.query_global_dict_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.query_global_dict_exprs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (partition == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (plan != null) {
      plan.validate();
    }
    if (output_sink != null) {
      output_sink.validate();
    }
    if (partition != null) {
      partition.validate();
    }
    if (cache_param != null) {
      cache_param.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlanFragmentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPlanFragmentStandardScheme getScheme() {
      return new TPlanFragmentStandardScheme();
    }
  }

  private static class TPlanFragmentStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPlanFragment> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlanFragment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // PLAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.plan = new io.datafibre.fibre.thrift.TPlan();
              struct.plan.read(iprot);
              struct.setPlanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OUTPUT_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.output_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list28.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem29;
                for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                {
                  _elem29 = new io.datafibre.fibre.thrift.TExpr();
                  _elem29.read(iprot);
                  struct.output_exprs.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setOutput_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OUTPUT_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.output_sink = new io.datafibre.fibre.thrift.TDataSink();
              struct.output_sink.read(iprot);
              struct.setOutput_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.partition = new io.datafibre.fibre.thrift.TDataPartition();
              struct.partition.read(iprot);
              struct.setPartitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MIN_RESERVATION_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_reservation_bytes = iprot.readI64();
              struct.setMin_reservation_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INITIAL_RESERVATION_TOTAL_CLAIMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.initial_reservation_total_claims = iprot.readI64();
              struct.setInitial_reservation_total_claimsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // QUERY_GLOBAL_DICTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
                struct.query_global_dicts = new java.util.ArrayList<io.datafibre.fibre.thrift.TGlobalDict>(_list31.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TGlobalDict _elem32;
                for (int _i33 = 0; _i33 < _list31.size; ++_i33)
                {
                  _elem32 = new io.datafibre.fibre.thrift.TGlobalDict();
                  _elem32.read(iprot);
                  struct.query_global_dicts.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setQuery_global_dictsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LOAD_GLOBAL_DICTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                struct.load_global_dicts = new java.util.ArrayList<io.datafibre.fibre.thrift.TGlobalDict>(_list34.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TGlobalDict _elem35;
                for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                {
                  _elem35 = new io.datafibre.fibre.thrift.TGlobalDict();
                  _elem35.read(iprot);
                  struct.load_global_dicts.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setLoad_global_dictsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CACHE_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cache_param = new TCacheParam();
              struct.cache_param.read(iprot);
              struct.setCache_paramIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // QUERY_GLOBAL_DICT_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map37 = iprot.readMapBegin();
                struct.query_global_dict_exprs = new java.util.HashMap<java.lang.Integer,io.datafibre.fibre.thrift.TExpr>(2*_map37.size);
                int _key38;
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _val39;
                for (int _i40 = 0; _i40 < _map37.size; ++_i40)
                {
                  _key38 = iprot.readI32();
                  _val39 = new io.datafibre.fibre.thrift.TExpr();
                  _val39.read(iprot);
                  struct.query_global_dict_exprs.put(_key38, _val39);
                }
                iprot.readMapEnd();
              }
              struct.setQuery_global_dict_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlanFragment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.plan != null) {
        if (struct.isSetPlan()) {
          oprot.writeFieldBegin(PLAN_FIELD_DESC);
          struct.plan.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.output_exprs != null) {
        if (struct.isSetOutput_exprs()) {
          oprot.writeFieldBegin(OUTPUT_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.output_exprs.size()));
            for (io.datafibre.fibre.thrift.TExpr _iter41 : struct.output_exprs)
            {
              _iter41.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.output_sink != null) {
        if (struct.isSetOutput_sink()) {
          oprot.writeFieldBegin(OUTPUT_SINK_FIELD_DESC);
          struct.output_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition != null) {
        oprot.writeFieldBegin(PARTITION_FIELD_DESC);
        struct.partition.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMin_reservation_bytes()) {
        oprot.writeFieldBegin(MIN_RESERVATION_BYTES_FIELD_DESC);
        oprot.writeI64(struct.min_reservation_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInitial_reservation_total_claims()) {
        oprot.writeFieldBegin(INITIAL_RESERVATION_TOTAL_CLAIMS_FIELD_DESC);
        oprot.writeI64(struct.initial_reservation_total_claims);
        oprot.writeFieldEnd();
      }
      if (struct.query_global_dicts != null) {
        if (struct.isSetQuery_global_dicts()) {
          oprot.writeFieldBegin(QUERY_GLOBAL_DICTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.query_global_dicts.size()));
            for (io.datafibre.fibre.thrift.TGlobalDict _iter42 : struct.query_global_dicts)
            {
              _iter42.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.load_global_dicts != null) {
        if (struct.isSetLoad_global_dicts()) {
          oprot.writeFieldBegin(LOAD_GLOBAL_DICTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.load_global_dicts.size()));
            for (io.datafibre.fibre.thrift.TGlobalDict _iter43 : struct.load_global_dicts)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.cache_param != null) {
        if (struct.isSetCache_param()) {
          oprot.writeFieldBegin(CACHE_PARAM_FIELD_DESC);
          struct.cache_param.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_global_dict_exprs != null) {
        if (struct.isSetQuery_global_dict_exprs()) {
          oprot.writeFieldBegin(QUERY_GLOBAL_DICT_EXPRS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.query_global_dict_exprs.size()));
            for (java.util.Map.Entry<java.lang.Integer, io.datafibre.fibre.thrift.TExpr> _iter44 : struct.query_global_dict_exprs.entrySet())
            {
              oprot.writeI32(_iter44.getKey());
              _iter44.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlanFragmentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPlanFragmentTupleScheme getScheme() {
      return new TPlanFragmentTupleScheme();
    }
  }

  private static class TPlanFragmentTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPlanFragment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlanFragment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.partition.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPlan()) {
        optionals.set(0);
      }
      if (struct.isSetOutput_exprs()) {
        optionals.set(1);
      }
      if (struct.isSetOutput_sink()) {
        optionals.set(2);
      }
      if (struct.isSetMin_reservation_bytes()) {
        optionals.set(3);
      }
      if (struct.isSetInitial_reservation_total_claims()) {
        optionals.set(4);
      }
      if (struct.isSetQuery_global_dicts()) {
        optionals.set(5);
      }
      if (struct.isSetLoad_global_dicts()) {
        optionals.set(6);
      }
      if (struct.isSetCache_param()) {
        optionals.set(7);
      }
      if (struct.isSetQuery_global_dict_exprs()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPlan()) {
        struct.plan.write(oprot);
      }
      if (struct.isSetOutput_exprs()) {
        {
          oprot.writeI32(struct.output_exprs.size());
          for (io.datafibre.fibre.thrift.TExpr _iter45 : struct.output_exprs)
          {
            _iter45.write(oprot);
          }
        }
      }
      if (struct.isSetOutput_sink()) {
        struct.output_sink.write(oprot);
      }
      if (struct.isSetMin_reservation_bytes()) {
        oprot.writeI64(struct.min_reservation_bytes);
      }
      if (struct.isSetInitial_reservation_total_claims()) {
        oprot.writeI64(struct.initial_reservation_total_claims);
      }
      if (struct.isSetQuery_global_dicts()) {
        {
          oprot.writeI32(struct.query_global_dicts.size());
          for (io.datafibre.fibre.thrift.TGlobalDict _iter46 : struct.query_global_dicts)
          {
            _iter46.write(oprot);
          }
        }
      }
      if (struct.isSetLoad_global_dicts()) {
        {
          oprot.writeI32(struct.load_global_dicts.size());
          for (io.datafibre.fibre.thrift.TGlobalDict _iter47 : struct.load_global_dicts)
          {
            _iter47.write(oprot);
          }
        }
      }
      if (struct.isSetCache_param()) {
        struct.cache_param.write(oprot);
      }
      if (struct.isSetQuery_global_dict_exprs()) {
        {
          oprot.writeI32(struct.query_global_dict_exprs.size());
          for (java.util.Map.Entry<java.lang.Integer, io.datafibre.fibre.thrift.TExpr> _iter48 : struct.query_global_dict_exprs.entrySet())
          {
            oprot.writeI32(_iter48.getKey());
            _iter48.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlanFragment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.partition = new io.datafibre.fibre.thrift.TDataPartition();
      struct.partition.read(iprot);
      struct.setPartitionIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.plan = new io.datafibre.fibre.thrift.TPlan();
        struct.plan.read(iprot);
        struct.setPlanIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list49 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.output_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list49.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem50;
          for (int _i51 = 0; _i51 < _list49.size; ++_i51)
          {
            _elem50 = new io.datafibre.fibre.thrift.TExpr();
            _elem50.read(iprot);
            struct.output_exprs.add(_elem50);
          }
        }
        struct.setOutput_exprsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.output_sink = new io.datafibre.fibre.thrift.TDataSink();
        struct.output_sink.read(iprot);
        struct.setOutput_sinkIsSet(true);
      }
      if (incoming.get(3)) {
        struct.min_reservation_bytes = iprot.readI64();
        struct.setMin_reservation_bytesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.initial_reservation_total_claims = iprot.readI64();
        struct.setInitial_reservation_total_claimsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list52 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.query_global_dicts = new java.util.ArrayList<io.datafibre.fibre.thrift.TGlobalDict>(_list52.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TGlobalDict _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            _elem53 = new io.datafibre.fibre.thrift.TGlobalDict();
            _elem53.read(iprot);
            struct.query_global_dicts.add(_elem53);
          }
        }
        struct.setQuery_global_dictsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list55 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.load_global_dicts = new java.util.ArrayList<io.datafibre.fibre.thrift.TGlobalDict>(_list55.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TGlobalDict _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = new io.datafibre.fibre.thrift.TGlobalDict();
            _elem56.read(iprot);
            struct.load_global_dicts.add(_elem56);
          }
        }
        struct.setLoad_global_dictsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cache_param = new TCacheParam();
        struct.cache_param.read(iprot);
        struct.setCache_paramIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT); 
          struct.query_global_dict_exprs = new java.util.HashMap<java.lang.Integer,io.datafibre.fibre.thrift.TExpr>(2*_map58.size);
          int _key59;
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _val60;
          for (int _i61 = 0; _i61 < _map58.size; ++_i61)
          {
            _key59 = iprot.readI32();
            _val60 = new io.datafibre.fibre.thrift.TExpr();
            _val60.read(iprot);
            struct.query_global_dict_exprs.put(_key59, _val60);
          }
        }
        struct.setQuery_global_dict_exprsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

