// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lake_types.proto

package io.datafibre.fibre.proto;

public interface DelvecMetadataPBOrBuilder extends
    // @@protoc_insertion_point(interface_extends:starrocks.lake.DelvecMetadataPB)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * map from version to delete vector file meta
   * so that we no need to keep file name (consume more memory) in each DelvecPagePB
   * instead we can lookup delete vector file name by version saved in DelvecPagePB
   * </pre>
   *
   * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
   */
  int getVersionToFileCount();
  /**
   * <pre>
   * map from version to delete vector file meta
   * so that we no need to keep file name (consume more memory) in each DelvecPagePB
   * instead we can lookup delete vector file name by version saved in DelvecPagePB
   * </pre>
   *
   * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
   */
  boolean containsVersionToFile(
      long key);
  /**
   * Use {@link #getVersionToFileMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB>
  getVersionToFile();
  /**
   * <pre>
   * map from version to delete vector file meta
   * so that we no need to keep file name (consume more memory) in each DelvecPagePB
   * instead we can lookup delete vector file name by version saved in DelvecPagePB
   * </pre>
   *
   * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
   */
  java.util.Map<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB>
  getVersionToFileMap();
  /**
   * <pre>
   * map from version to delete vector file meta
   * so that we no need to keep file name (consume more memory) in each DelvecPagePB
   * instead we can lookup delete vector file name by version saved in DelvecPagePB
   * </pre>
   *
   * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
   */

  /* nullable */
io.datafibre.fibre.proto.FileMetaPB getVersionToFileOrDefault(
      long key,
      /* nullable */
io.datafibre.fibre.proto.FileMetaPB defaultValue);
  /**
   * <pre>
   * map from version to delete vector file meta
   * so that we no need to keep file name (consume more memory) in each DelvecPagePB
   * instead we can lookup delete vector file name by version saved in DelvecPagePB
   * </pre>
   *
   * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
   */

  io.datafibre.fibre.proto.FileMetaPB getVersionToFileOrThrow(
      long key);

  /**
   * <pre>
   * from segment id to delvec page
   * </pre>
   *
   * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
   */
  int getDelvecsCount();
  /**
   * <pre>
   * from segment id to delvec page
   * </pre>
   *
   * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
   */
  boolean containsDelvecs(
      int key);
  /**
   * Use {@link #getDelvecsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB>
  getDelvecs();
  /**
   * <pre>
   * from segment id to delvec page
   * </pre>
   *
   * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
   */
  java.util.Map<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB>
  getDelvecsMap();
  /**
   * <pre>
   * from segment id to delvec page
   * </pre>
   *
   * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
   */

  /* nullable */
io.datafibre.fibre.proto.DelvecPagePB getDelvecsOrDefault(
      int key,
      /* nullable */
io.datafibre.fibre.proto.DelvecPagePB defaultValue);
  /**
   * <pre>
   * from segment id to delvec page
   * </pre>
   *
   * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
   */

  io.datafibre.fibre.proto.DelvecPagePB getDelvecsOrThrow(
      int key);
}
