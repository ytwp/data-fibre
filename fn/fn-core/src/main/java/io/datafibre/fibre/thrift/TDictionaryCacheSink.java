/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TDictionaryCacheSink implements org.apache.thrift.TBase<TDictionaryCacheSink, TDictionaryCacheSink._Fields>, java.io.Serializable, Cloneable, Comparable<TDictionaryCacheSink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDictionaryCacheSink");

  private static final org.apache.thrift.protocol.TField NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("nodes", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField DICTIONARY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dictionary_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField MEMORY_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("memory_limit", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField KEY_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("key_size", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDictionaryCacheSinkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDictionaryCacheSinkTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<TNetworkAddress> nodes; // optional
  public long dictionary_id; // optional
  public long txn_id; // optional
  public @org.apache.thrift.annotation.Nullable TOlapTableSchemaParam schema; // optional
  public long memory_limit; // optional
  public int key_size; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODES((short)1, "nodes"),
    DICTIONARY_ID((short)2, "dictionary_id"),
    TXN_ID((short)3, "txn_id"),
    SCHEMA((short)4, "schema"),
    MEMORY_LIMIT((short)5, "memory_limit"),
    KEY_SIZE((short)6, "key_size");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODES
          return NODES;
        case 2: // DICTIONARY_ID
          return DICTIONARY_ID;
        case 3: // TXN_ID
          return TXN_ID;
        case 4: // SCHEMA
          return SCHEMA;
        case 5: // MEMORY_LIMIT
          return MEMORY_LIMIT;
        case 6: // KEY_SIZE
          return KEY_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DICTIONARY_ID_ISSET_ID = 0;
  private static final int __TXN_ID_ISSET_ID = 1;
  private static final int __MEMORY_LIMIT_ISSET_ID = 2;
  private static final int __KEY_SIZE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NODES,_Fields.DICTIONARY_ID,_Fields.TXN_ID,_Fields.SCHEMA,_Fields.MEMORY_LIMIT,_Fields.KEY_SIZE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODES, new org.apache.thrift.meta_data.FieldMetaData("nodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNetworkAddress.class))));
    tmpMap.put(_Fields.DICTIONARY_ID, new org.apache.thrift.meta_data.FieldMetaData("dictionary_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txn_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlapTableSchemaParam.class)));
    tmpMap.put(_Fields.MEMORY_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("memory_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.KEY_SIZE, new org.apache.thrift.meta_data.FieldMetaData("key_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDictionaryCacheSink.class, metaDataMap);
  }

  public TDictionaryCacheSink() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDictionaryCacheSink(TDictionaryCacheSink other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNodes()) {
      java.util.List<TNetworkAddress> __this__nodes = new java.util.ArrayList<TNetworkAddress>(other.nodes.size());
      for (TNetworkAddress other_element : other.nodes) {
        __this__nodes.add(new TNetworkAddress(other_element));
      }
      this.nodes = __this__nodes;
    }
    this.dictionary_id = other.dictionary_id;
    this.txn_id = other.txn_id;
    if (other.isSetSchema()) {
      this.schema = new TOlapTableSchemaParam(other.schema);
    }
    this.memory_limit = other.memory_limit;
    this.key_size = other.key_size;
  }

  @Override
  public TDictionaryCacheSink deepCopy() {
    return new TDictionaryCacheSink(this);
  }

  @Override
  public void clear() {
    this.nodes = null;
    setDictionary_idIsSet(false);
    this.dictionary_id = 0;
    setTxn_idIsSet(false);
    this.txn_id = 0;
    this.schema = null;
    setMemory_limitIsSet(false);
    this.memory_limit = 0;
    setKey_sizeIsSet(false);
    this.key_size = 0;
  }

  public int getNodesSize() {
    return (this.nodes == null) ? 0 : this.nodes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TNetworkAddress> getNodesIterator() {
    return (this.nodes == null) ? null : this.nodes.iterator();
  }

  public void addToNodes(TNetworkAddress elem) {
    if (this.nodes == null) {
      this.nodes = new java.util.ArrayList<TNetworkAddress>();
    }
    this.nodes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TNetworkAddress> getNodes() {
    return this.nodes;
  }

  public TDictionaryCacheSink setNodes(@org.apache.thrift.annotation.Nullable java.util.List<TNetworkAddress> nodes) {
    this.nodes = nodes;
    return this;
  }

  public void unsetNodes() {
    this.nodes = null;
  }

  /** Returns true if field nodes is set (has been assigned a value) and false otherwise */
  public boolean isSetNodes() {
    return this.nodes != null;
  }

  public void setNodesIsSet(boolean value) {
    if (!value) {
      this.nodes = null;
    }
  }

  public long getDictionary_id() {
    return this.dictionary_id;
  }

  public TDictionaryCacheSink setDictionary_id(long dictionary_id) {
    this.dictionary_id = dictionary_id;
    setDictionary_idIsSet(true);
    return this;
  }

  public void unsetDictionary_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DICTIONARY_ID_ISSET_ID);
  }

  /** Returns true if field dictionary_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDictionary_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DICTIONARY_ID_ISSET_ID);
  }

  public void setDictionary_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DICTIONARY_ID_ISSET_ID, value);
  }

  public long getTxn_id() {
    return this.txn_id;
  }

  public TDictionaryCacheSink setTxn_id(long txn_id) {
    this.txn_id = txn_id;
    setTxn_idIsSet(true);
    return this;
  }

  public void unsetTxn_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  /** Returns true if field txn_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  public void setTxn_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXN_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TOlapTableSchemaParam getSchema() {
    return this.schema;
  }

  public TDictionaryCacheSink setSchema(@org.apache.thrift.annotation.Nullable TOlapTableSchemaParam schema) {
    this.schema = schema;
    return this;
  }

  public void unsetSchema() {
    this.schema = null;
  }

  /** Returns true if field schema is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema() {
    return this.schema != null;
  }

  public void setSchemaIsSet(boolean value) {
    if (!value) {
      this.schema = null;
    }
  }

  public long getMemory_limit() {
    return this.memory_limit;
  }

  public TDictionaryCacheSink setMemory_limit(long memory_limit) {
    this.memory_limit = memory_limit;
    setMemory_limitIsSet(true);
    return this;
  }

  public void unsetMemory_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEMORY_LIMIT_ISSET_ID);
  }

  /** Returns true if field memory_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEMORY_LIMIT_ISSET_ID);
  }

  public void setMemory_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEMORY_LIMIT_ISSET_ID, value);
  }

  public int getKey_size() {
    return this.key_size;
  }

  public TDictionaryCacheSink setKey_size(int key_size) {
    this.key_size = key_size;
    setKey_sizeIsSet(true);
    return this;
  }

  public void unsetKey_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEY_SIZE_ISSET_ID);
  }

  /** Returns true if field key_size is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEY_SIZE_ISSET_ID);
  }

  public void setKey_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEY_SIZE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case NODES:
      if (value == null) {
        unsetNodes();
      } else {
        setNodes((java.util.List<TNetworkAddress>)value);
      }
      break;

    case DICTIONARY_ID:
      if (value == null) {
        unsetDictionary_id();
      } else {
        setDictionary_id((Long)value);
      }
      break;

    case TXN_ID:
      if (value == null) {
        unsetTxn_id();
      } else {
        setTxn_id((Long)value);
      }
      break;

    case SCHEMA:
      if (value == null) {
        unsetSchema();
      } else {
        setSchema((TOlapTableSchemaParam)value);
      }
      break;

    case MEMORY_LIMIT:
      if (value == null) {
        unsetMemory_limit();
      } else {
        setMemory_limit((Long)value);
      }
      break;

    case KEY_SIZE:
      if (value == null) {
        unsetKey_size();
      } else {
        setKey_size((Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODES:
      return getNodes();

    case DICTIONARY_ID:
      return getDictionary_id();

    case TXN_ID:
      return getTxn_id();

    case SCHEMA:
      return getSchema();

    case MEMORY_LIMIT:
      return getMemory_limit();

    case KEY_SIZE:
      return getKey_size();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODES:
      return isSetNodes();
    case DICTIONARY_ID:
      return isSetDictionary_id();
    case TXN_ID:
      return isSetTxn_id();
    case SCHEMA:
      return isSetSchema();
    case MEMORY_LIMIT:
      return isSetMemory_limit();
    case KEY_SIZE:
      return isSetKey_size();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof TDictionaryCacheSink)
      return this.equals((TDictionaryCacheSink)that);
    return false;
  }

  public boolean equals(TDictionaryCacheSink that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nodes = true && this.isSetNodes();
    boolean that_present_nodes = true && that.isSetNodes();
    if (this_present_nodes || that_present_nodes) {
      if (!(this_present_nodes && that_present_nodes))
        return false;
      if (!this.nodes.equals(that.nodes))
        return false;
    }

    boolean this_present_dictionary_id = true && this.isSetDictionary_id();
    boolean that_present_dictionary_id = true && that.isSetDictionary_id();
    if (this_present_dictionary_id || that_present_dictionary_id) {
      if (!(this_present_dictionary_id && that_present_dictionary_id))
        return false;
      if (this.dictionary_id != that.dictionary_id)
        return false;
    }

    boolean this_present_txn_id = true && this.isSetTxn_id();
    boolean that_present_txn_id = true && that.isSetTxn_id();
    if (this_present_txn_id || that_present_txn_id) {
      if (!(this_present_txn_id && that_present_txn_id))
        return false;
      if (this.txn_id != that.txn_id)
        return false;
    }

    boolean this_present_schema = true && this.isSetSchema();
    boolean that_present_schema = true && that.isSetSchema();
    if (this_present_schema || that_present_schema) {
      if (!(this_present_schema && that_present_schema))
        return false;
      if (!this.schema.equals(that.schema))
        return false;
    }

    boolean this_present_memory_limit = true && this.isSetMemory_limit();
    boolean that_present_memory_limit = true && that.isSetMemory_limit();
    if (this_present_memory_limit || that_present_memory_limit) {
      if (!(this_present_memory_limit && that_present_memory_limit))
        return false;
      if (this.memory_limit != that.memory_limit)
        return false;
    }

    boolean this_present_key_size = true && this.isSetKey_size();
    boolean that_present_key_size = true && that.isSetKey_size();
    if (this_present_key_size || that_present_key_size) {
      if (!(this_present_key_size && that_present_key_size))
        return false;
      if (this.key_size != that.key_size)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNodes()) ? 131071 : 524287);
    if (isSetNodes())
      hashCode = hashCode * 8191 + nodes.hashCode();

    hashCode = hashCode * 8191 + ((isSetDictionary_id()) ? 131071 : 524287);
    if (isSetDictionary_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dictionary_id);

    hashCode = hashCode * 8191 + ((isSetTxn_id()) ? 131071 : 524287);
    if (isSetTxn_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txn_id);

    hashCode = hashCode * 8191 + ((isSetSchema()) ? 131071 : 524287);
    if (isSetSchema())
      hashCode = hashCode * 8191 + schema.hashCode();

    hashCode = hashCode * 8191 + ((isSetMemory_limit()) ? 131071 : 524287);
    if (isSetMemory_limit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(memory_limit);

    hashCode = hashCode * 8191 + ((isSetKey_size()) ? 131071 : 524287);
    if (isSetKey_size())
      hashCode = hashCode * 8191 + key_size;

    return hashCode;
  }

  @Override
  public int compareTo(TDictionaryCacheSink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetNodes(), other.isSetNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodes, other.nodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDictionary_id(), other.isSetDictionary_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDictionary_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictionary_id, other.dictionary_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTxn_id(), other.isSetTxn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_id, other.txn_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetSchema(), other.isSetSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, other.schema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetMemory_limit(), other.isSetMemory_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory_limit, other.memory_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetKey_size(), other.isSetKey_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_size, other.key_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDictionaryCacheSink(");
    boolean first = true;

    if (isSetNodes()) {
      sb.append("nodes:");
      if (this.nodes == null) {
        sb.append("null");
      } else {
        sb.append(this.nodes);
      }
      first = false;
    }
    if (isSetDictionary_id()) {
      if (!first) sb.append(", ");
      sb.append("dictionary_id:");
      sb.append(this.dictionary_id);
      first = false;
    }
    if (isSetTxn_id()) {
      if (!first) sb.append(", ");
      sb.append("txn_id:");
      sb.append(this.txn_id);
      first = false;
    }
    if (isSetSchema()) {
      if (!first) sb.append(", ");
      sb.append("schema:");
      if (this.schema == null) {
        sb.append("null");
      } else {
        sb.append(this.schema);
      }
      first = false;
    }
    if (isSetMemory_limit()) {
      if (!first) sb.append(", ");
      sb.append("memory_limit:");
      sb.append(this.memory_limit);
      first = false;
    }
    if (isSetKey_size()) {
      if (!first) sb.append(", ");
      sb.append("key_size:");
      sb.append(this.key_size);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (schema != null) {
      schema.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDictionaryCacheSinkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDictionaryCacheSinkStandardScheme getScheme() {
      return new TDictionaryCacheSinkStandardScheme();
    }
  }

  private static class TDictionaryCacheSinkStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDictionaryCacheSink> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TDictionaryCacheSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                struct.nodes = new java.util.ArrayList<TNetworkAddress>(_list76.size);
                @org.apache.thrift.annotation.Nullable TNetworkAddress _elem77;
                for (int _i78 = 0; _i78 < _list76.size; ++_i78)
                {
                  _elem77 = new TNetworkAddress();
                  _elem77.read(iprot);
                  struct.nodes.add(_elem77);
                }
                iprot.readListEnd();
              }
              struct.setNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DICTIONARY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dictionary_id = iprot.readI64();
              struct.setDictionary_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txn_id = iprot.readI64();
              struct.setTxn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schema = new TOlapTableSchemaParam();
              struct.schema.read(iprot);
              struct.setSchemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEMORY_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memory_limit = iprot.readI64();
              struct.setMemory_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KEY_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.key_size = iprot.readI32();
              struct.setKey_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TDictionaryCacheSink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodes != null) {
        if (struct.isSetNodes()) {
          oprot.writeFieldBegin(NODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nodes.size()));
            for (TNetworkAddress _iter79 : struct.nodes)
            {
              _iter79.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDictionary_id()) {
        oprot.writeFieldBegin(DICTIONARY_ID_FIELD_DESC);
        oprot.writeI64(struct.dictionary_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTxn_id()) {
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txn_id);
        oprot.writeFieldEnd();
      }
      if (struct.schema != null) {
        if (struct.isSetSchema()) {
          oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
          struct.schema.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMemory_limit()) {
        oprot.writeFieldBegin(MEMORY_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.memory_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetKey_size()) {
        oprot.writeFieldBegin(KEY_SIZE_FIELD_DESC);
        oprot.writeI32(struct.key_size);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDictionaryCacheSinkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDictionaryCacheSinkTupleScheme getScheme() {
      return new TDictionaryCacheSinkTupleScheme();
    }
  }

  private static class TDictionaryCacheSinkTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDictionaryCacheSink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDictionaryCacheSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNodes()) {
        optionals.set(0);
      }
      if (struct.isSetDictionary_id()) {
        optionals.set(1);
      }
      if (struct.isSetTxn_id()) {
        optionals.set(2);
      }
      if (struct.isSetSchema()) {
        optionals.set(3);
      }
      if (struct.isSetMemory_limit()) {
        optionals.set(4);
      }
      if (struct.isSetKey_size()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetNodes()) {
        {
          oprot.writeI32(struct.nodes.size());
          for (TNetworkAddress _iter80 : struct.nodes)
          {
            _iter80.write(oprot);
          }
        }
      }
      if (struct.isSetDictionary_id()) {
        oprot.writeI64(struct.dictionary_id);
      }
      if (struct.isSetTxn_id()) {
        oprot.writeI64(struct.txn_id);
      }
      if (struct.isSetSchema()) {
        struct.schema.write(oprot);
      }
      if (struct.isSetMemory_limit()) {
        oprot.writeI64(struct.memory_limit);
      }
      if (struct.isSetKey_size()) {
        oprot.writeI32(struct.key_size);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDictionaryCacheSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list81 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.nodes = new java.util.ArrayList<TNetworkAddress>(_list81.size);
          @org.apache.thrift.annotation.Nullable TNetworkAddress _elem82;
          for (int _i83 = 0; _i83 < _list81.size; ++_i83)
          {
            _elem82 = new TNetworkAddress();
            _elem82.read(iprot);
            struct.nodes.add(_elem82);
          }
        }
        struct.setNodesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dictionary_id = iprot.readI64();
        struct.setDictionary_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.txn_id = iprot.readI64();
        struct.setTxn_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.schema = new TOlapTableSchemaParam();
        struct.schema.read(iprot);
        struct.setSchemaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.memory_limit = iprot.readI64();
        struct.setMemory_limitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.key_size = iprot.readI32();
        struct.setKey_sizeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

