/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TTabletMeta implements org.apache.thrift.TBase<TTabletMeta, TTabletMeta._Fields>, java.io.Serializable, Cloneable, Comparable<TTabletMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTabletMeta");

  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("db_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField INDEX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("index_id", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField STORAGE_MEDIUM_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_medium", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField OLD_SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("old_schema_hash", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NEW_SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("new_schema_hash", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CHECKED_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("checked_version", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField CHECKED_VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("checked_version_hash", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField CONSISTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("consistent", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField REPLICAS_FIELD_DESC = new org.apache.thrift.protocol.TField("replicas", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTabletMetaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTabletMetaTupleSchemeFactory();

  public long tablet_id; // optional
  public long db_id; // optional
  public long table_id; // optional
  public long partition_id; // optional
  public long index_id; // optional
  /**
   * 
   * @see io.datafibre.fibre.thrift.TStorageMedium
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TStorageMedium storage_medium; // optional
  public int old_schema_hash; // optional
  public int new_schema_hash; // optional
  public long checked_version; // optional
  public long checked_version_hash; // optional
  public boolean consistent; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TReplicaMeta> replicas; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLET_ID((short)1, "tablet_id"),
    DB_ID((short)2, "db_id"),
    TABLE_ID((short)3, "table_id"),
    PARTITION_ID((short)4, "partition_id"),
    INDEX_ID((short)5, "index_id"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TStorageMedium
     */
    STORAGE_MEDIUM((short)6, "storage_medium"),
    OLD_SCHEMA_HASH((short)7, "old_schema_hash"),
    NEW_SCHEMA_HASH((short)8, "new_schema_hash"),
    CHECKED_VERSION((short)9, "checked_version"),
    CHECKED_VERSION_HASH((short)10, "checked_version_hash"),
    CONSISTENT((short)11, "consistent"),
    REPLICAS((short)12, "replicas");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLET_ID
          return TABLET_ID;
        case 2: // DB_ID
          return DB_ID;
        case 3: // TABLE_ID
          return TABLE_ID;
        case 4: // PARTITION_ID
          return PARTITION_ID;
        case 5: // INDEX_ID
          return INDEX_ID;
        case 6: // STORAGE_MEDIUM
          return STORAGE_MEDIUM;
        case 7: // OLD_SCHEMA_HASH
          return OLD_SCHEMA_HASH;
        case 8: // NEW_SCHEMA_HASH
          return NEW_SCHEMA_HASH;
        case 9: // CHECKED_VERSION
          return CHECKED_VERSION;
        case 10: // CHECKED_VERSION_HASH
          return CHECKED_VERSION_HASH;
        case 11: // CONSISTENT
          return CONSISTENT;
        case 12: // REPLICAS
          return REPLICAS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLET_ID_ISSET_ID = 0;
  private static final int __DB_ID_ISSET_ID = 1;
  private static final int __TABLE_ID_ISSET_ID = 2;
  private static final int __PARTITION_ID_ISSET_ID = 3;
  private static final int __INDEX_ID_ISSET_ID = 4;
  private static final int __OLD_SCHEMA_HASH_ISSET_ID = 5;
  private static final int __NEW_SCHEMA_HASH_ISSET_ID = 6;
  private static final int __CHECKED_VERSION_ISSET_ID = 7;
  private static final int __CHECKED_VERSION_HASH_ISSET_ID = 8;
  private static final int __CONSISTENT_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TABLET_ID,_Fields.DB_ID,_Fields.TABLE_ID,_Fields.PARTITION_ID,_Fields.INDEX_ID,_Fields.STORAGE_MEDIUM,_Fields.OLD_SCHEMA_HASH,_Fields.NEW_SCHEMA_HASH,_Fields.CHECKED_VERSION,_Fields.CHECKED_VERSION_HASH,_Fields.CONSISTENT,_Fields.REPLICAS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DB_ID, new org.apache.thrift.meta_data.FieldMetaData("db_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INDEX_ID, new org.apache.thrift.meta_data.FieldMetaData("index_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STORAGE_MEDIUM, new org.apache.thrift.meta_data.FieldMetaData("storage_medium", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TStorageMedium.class)));
    tmpMap.put(_Fields.OLD_SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("old_schema_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEW_SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("new_schema_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECKED_VERSION, new org.apache.thrift.meta_data.FieldMetaData("checked_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHECKED_VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("checked_version_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONSISTENT, new org.apache.thrift.meta_data.FieldMetaData("consistent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REPLICAS, new org.apache.thrift.meta_data.FieldMetaData("replicas", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TReplicaMeta.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTabletMeta.class, metaDataMap);
  }

  public TTabletMeta() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTabletMeta(TTabletMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tablet_id = other.tablet_id;
    this.db_id = other.db_id;
    this.table_id = other.table_id;
    this.partition_id = other.partition_id;
    this.index_id = other.index_id;
    if (other.isSetStorage_medium()) {
      this.storage_medium = other.storage_medium;
    }
    this.old_schema_hash = other.old_schema_hash;
    this.new_schema_hash = other.new_schema_hash;
    this.checked_version = other.checked_version;
    this.checked_version_hash = other.checked_version_hash;
    this.consistent = other.consistent;
    if (other.isSetReplicas()) {
      java.util.List<TReplicaMeta> __this__replicas = new java.util.ArrayList<TReplicaMeta>(other.replicas.size());
      for (TReplicaMeta other_element : other.replicas) {
        __this__replicas.add(new TReplicaMeta(other_element));
      }
      this.replicas = __this__replicas;
    }
  }

  @Override
  public TTabletMeta deepCopy() {
    return new TTabletMeta(this);
  }

  @Override
  public void clear() {
    setTablet_idIsSet(false);
    this.tablet_id = 0;
    setDb_idIsSet(false);
    this.db_id = 0;
    setTable_idIsSet(false);
    this.table_id = 0;
    setPartition_idIsSet(false);
    this.partition_id = 0;
    setIndex_idIsSet(false);
    this.index_id = 0;
    this.storage_medium = null;
    setOld_schema_hashIsSet(false);
    this.old_schema_hash = 0;
    setNew_schema_hashIsSet(false);
    this.new_schema_hash = 0;
    setChecked_versionIsSet(false);
    this.checked_version = 0;
    setChecked_version_hashIsSet(false);
    this.checked_version_hash = 0;
    setConsistentIsSet(false);
    this.consistent = false;
    this.replicas = null;
  }

  public long getTablet_id() {
    return this.tablet_id;
  }

  public TTabletMeta setTablet_id(long tablet_id) {
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    return this;
  }

  public void unsetTablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  public long getDb_id() {
    return this.db_id;
  }

  public TTabletMeta setDb_id(long db_id) {
    this.db_id = db_id;
    setDb_idIsSet(true);
    return this;
  }

  public void unsetDb_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  /** Returns true if field db_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  public void setDb_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DB_ID_ISSET_ID, value);
  }

  public long getTable_id() {
    return this.table_id;
  }

  public TTabletMeta setTable_id(long table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public TTabletMeta setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    return this;
  }

  public void unsetPartition_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  public long getIndex_id() {
    return this.index_id;
  }

  public TTabletMeta setIndex_id(long index_id) {
    this.index_id = index_id;
    setIndex_idIsSet(true);
    return this;
  }

  public void unsetIndex_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_ID_ISSET_ID);
  }

  /** Returns true if field index_id is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_ID_ISSET_ID);
  }

  public void setIndex_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TStorageMedium
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TStorageMedium getStorage_medium() {
    return this.storage_medium;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TStorageMedium
   */
  public TTabletMeta setStorage_medium(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TStorageMedium storage_medium) {
    this.storage_medium = storage_medium;
    return this;
  }

  public void unsetStorage_medium() {
    this.storage_medium = null;
  }

  /** Returns true if field storage_medium is set (has been assigned a value) and false otherwise */
  public boolean isSetStorage_medium() {
    return this.storage_medium != null;
  }

  public void setStorage_mediumIsSet(boolean value) {
    if (!value) {
      this.storage_medium = null;
    }
  }

  public int getOld_schema_hash() {
    return this.old_schema_hash;
  }

  public TTabletMeta setOld_schema_hash(int old_schema_hash) {
    this.old_schema_hash = old_schema_hash;
    setOld_schema_hashIsSet(true);
    return this;
  }

  public void unsetOld_schema_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OLD_SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field old_schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetOld_schema_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OLD_SCHEMA_HASH_ISSET_ID);
  }

  public void setOld_schema_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OLD_SCHEMA_HASH_ISSET_ID, value);
  }

  public int getNew_schema_hash() {
    return this.new_schema_hash;
  }

  public TTabletMeta setNew_schema_hash(int new_schema_hash) {
    this.new_schema_hash = new_schema_hash;
    setNew_schema_hashIsSet(true);
    return this;
  }

  public void unsetNew_schema_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEW_SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field new_schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetNew_schema_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEW_SCHEMA_HASH_ISSET_ID);
  }

  public void setNew_schema_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEW_SCHEMA_HASH_ISSET_ID, value);
  }

  public long getChecked_version() {
    return this.checked_version;
  }

  public TTabletMeta setChecked_version(long checked_version) {
    this.checked_version = checked_version;
    setChecked_versionIsSet(true);
    return this;
  }

  public void unsetChecked_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKED_VERSION_ISSET_ID);
  }

  /** Returns true if field checked_version is set (has been assigned a value) and false otherwise */
  public boolean isSetChecked_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKED_VERSION_ISSET_ID);
  }

  public void setChecked_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKED_VERSION_ISSET_ID, value);
  }

  public long getChecked_version_hash() {
    return this.checked_version_hash;
  }

  public TTabletMeta setChecked_version_hash(long checked_version_hash) {
    this.checked_version_hash = checked_version_hash;
    setChecked_version_hashIsSet(true);
    return this;
  }

  public void unsetChecked_version_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKED_VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field checked_version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetChecked_version_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKED_VERSION_HASH_ISSET_ID);
  }

  public void setChecked_version_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKED_VERSION_HASH_ISSET_ID, value);
  }

  public boolean isConsistent() {
    return this.consistent;
  }

  public TTabletMeta setConsistent(boolean consistent) {
    this.consistent = consistent;
    setConsistentIsSet(true);
    return this;
  }

  public void unsetConsistent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONSISTENT_ISSET_ID);
  }

  /** Returns true if field consistent is set (has been assigned a value) and false otherwise */
  public boolean isSetConsistent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONSISTENT_ISSET_ID);
  }

  public void setConsistentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONSISTENT_ISSET_ID, value);
  }

  public int getReplicasSize() {
    return (this.replicas == null) ? 0 : this.replicas.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TReplicaMeta> getReplicasIterator() {
    return (this.replicas == null) ? null : this.replicas.iterator();
  }

  public void addToReplicas(TReplicaMeta elem) {
    if (this.replicas == null) {
      this.replicas = new java.util.ArrayList<TReplicaMeta>();
    }
    this.replicas.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TReplicaMeta> getReplicas() {
    return this.replicas;
  }

  public TTabletMeta setReplicas(@org.apache.thrift.annotation.Nullable java.util.List<TReplicaMeta> replicas) {
    this.replicas = replicas;
    return this;
  }

  public void unsetReplicas() {
    this.replicas = null;
  }

  /** Returns true if field replicas is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicas() {
    return this.replicas != null;
  }

  public void setReplicasIsSet(boolean value) {
    if (!value) {
      this.replicas = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLET_ID:
      if (value == null) {
        unsetTablet_id();
      } else {
        setTablet_id((java.lang.Long)value);
      }
      break;

    case DB_ID:
      if (value == null) {
        unsetDb_id();
      } else {
        setDb_id((java.lang.Long)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((java.lang.Long)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((java.lang.Long)value);
      }
      break;

    case INDEX_ID:
      if (value == null) {
        unsetIndex_id();
      } else {
        setIndex_id((java.lang.Long)value);
      }
      break;

    case STORAGE_MEDIUM:
      if (value == null) {
        unsetStorage_medium();
      } else {
        setStorage_medium((io.datafibre.fibre.thrift.TStorageMedium)value);
      }
      break;

    case OLD_SCHEMA_HASH:
      if (value == null) {
        unsetOld_schema_hash();
      } else {
        setOld_schema_hash((java.lang.Integer)value);
      }
      break;

    case NEW_SCHEMA_HASH:
      if (value == null) {
        unsetNew_schema_hash();
      } else {
        setNew_schema_hash((java.lang.Integer)value);
      }
      break;

    case CHECKED_VERSION:
      if (value == null) {
        unsetChecked_version();
      } else {
        setChecked_version((java.lang.Long)value);
      }
      break;

    case CHECKED_VERSION_HASH:
      if (value == null) {
        unsetChecked_version_hash();
      } else {
        setChecked_version_hash((java.lang.Long)value);
      }
      break;

    case CONSISTENT:
      if (value == null) {
        unsetConsistent();
      } else {
        setConsistent((java.lang.Boolean)value);
      }
      break;

    case REPLICAS:
      if (value == null) {
        unsetReplicas();
      } else {
        setReplicas((java.util.List<TReplicaMeta>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLET_ID:
      return getTablet_id();

    case DB_ID:
      return getDb_id();

    case TABLE_ID:
      return getTable_id();

    case PARTITION_ID:
      return getPartition_id();

    case INDEX_ID:
      return getIndex_id();

    case STORAGE_MEDIUM:
      return getStorage_medium();

    case OLD_SCHEMA_HASH:
      return getOld_schema_hash();

    case NEW_SCHEMA_HASH:
      return getNew_schema_hash();

    case CHECKED_VERSION:
      return getChecked_version();

    case CHECKED_VERSION_HASH:
      return getChecked_version_hash();

    case CONSISTENT:
      return isConsistent();

    case REPLICAS:
      return getReplicas();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLET_ID:
      return isSetTablet_id();
    case DB_ID:
      return isSetDb_id();
    case TABLE_ID:
      return isSetTable_id();
    case PARTITION_ID:
      return isSetPartition_id();
    case INDEX_ID:
      return isSetIndex_id();
    case STORAGE_MEDIUM:
      return isSetStorage_medium();
    case OLD_SCHEMA_HASH:
      return isSetOld_schema_hash();
    case NEW_SCHEMA_HASH:
      return isSetNew_schema_hash();
    case CHECKED_VERSION:
      return isSetChecked_version();
    case CHECKED_VERSION_HASH:
      return isSetChecked_version_hash();
    case CONSISTENT:
      return isSetConsistent();
    case REPLICAS:
      return isSetReplicas();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTabletMeta)
      return this.equals((TTabletMeta)that);
    return false;
  }

  public boolean equals(TTabletMeta that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tablet_id = true && this.isSetTablet_id();
    boolean that_present_tablet_id = true && that.isSetTablet_id();
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_db_id = true && this.isSetDb_id();
    boolean that_present_db_id = true && that.isSetDb_id();
    if (this_present_db_id || that_present_db_id) {
      if (!(this_present_db_id && that_present_db_id))
        return false;
      if (this.db_id != that.db_id)
        return false;
    }

    boolean this_present_table_id = true && this.isSetTable_id();
    boolean that_present_table_id = true && that.isSetTable_id();
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    boolean this_present_partition_id = true && this.isSetPartition_id();
    boolean that_present_partition_id = true && that.isSetPartition_id();
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_index_id = true && this.isSetIndex_id();
    boolean that_present_index_id = true && that.isSetIndex_id();
    if (this_present_index_id || that_present_index_id) {
      if (!(this_present_index_id && that_present_index_id))
        return false;
      if (this.index_id != that.index_id)
        return false;
    }

    boolean this_present_storage_medium = true && this.isSetStorage_medium();
    boolean that_present_storage_medium = true && that.isSetStorage_medium();
    if (this_present_storage_medium || that_present_storage_medium) {
      if (!(this_present_storage_medium && that_present_storage_medium))
        return false;
      if (!this.storage_medium.equals(that.storage_medium))
        return false;
    }

    boolean this_present_old_schema_hash = true && this.isSetOld_schema_hash();
    boolean that_present_old_schema_hash = true && that.isSetOld_schema_hash();
    if (this_present_old_schema_hash || that_present_old_schema_hash) {
      if (!(this_present_old_schema_hash && that_present_old_schema_hash))
        return false;
      if (this.old_schema_hash != that.old_schema_hash)
        return false;
    }

    boolean this_present_new_schema_hash = true && this.isSetNew_schema_hash();
    boolean that_present_new_schema_hash = true && that.isSetNew_schema_hash();
    if (this_present_new_schema_hash || that_present_new_schema_hash) {
      if (!(this_present_new_schema_hash && that_present_new_schema_hash))
        return false;
      if (this.new_schema_hash != that.new_schema_hash)
        return false;
    }

    boolean this_present_checked_version = true && this.isSetChecked_version();
    boolean that_present_checked_version = true && that.isSetChecked_version();
    if (this_present_checked_version || that_present_checked_version) {
      if (!(this_present_checked_version && that_present_checked_version))
        return false;
      if (this.checked_version != that.checked_version)
        return false;
    }

    boolean this_present_checked_version_hash = true && this.isSetChecked_version_hash();
    boolean that_present_checked_version_hash = true && that.isSetChecked_version_hash();
    if (this_present_checked_version_hash || that_present_checked_version_hash) {
      if (!(this_present_checked_version_hash && that_present_checked_version_hash))
        return false;
      if (this.checked_version_hash != that.checked_version_hash)
        return false;
    }

    boolean this_present_consistent = true && this.isSetConsistent();
    boolean that_present_consistent = true && that.isSetConsistent();
    if (this_present_consistent || that_present_consistent) {
      if (!(this_present_consistent && that_present_consistent))
        return false;
      if (this.consistent != that.consistent)
        return false;
    }

    boolean this_present_replicas = true && this.isSetReplicas();
    boolean that_present_replicas = true && that.isSetReplicas();
    if (this_present_replicas || that_present_replicas) {
      if (!(this_present_replicas && that_present_replicas))
        return false;
      if (!this.replicas.equals(that.replicas))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTablet_id()) ? 131071 : 524287);
    if (isSetTablet_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tablet_id);

    hashCode = hashCode * 8191 + ((isSetDb_id()) ? 131071 : 524287);
    if (isSetDb_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(db_id);

    hashCode = hashCode * 8191 + ((isSetTable_id()) ? 131071 : 524287);
    if (isSetTable_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_id);

    hashCode = hashCode * 8191 + ((isSetPartition_id()) ? 131071 : 524287);
    if (isSetPartition_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_id);

    hashCode = hashCode * 8191 + ((isSetIndex_id()) ? 131071 : 524287);
    if (isSetIndex_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(index_id);

    hashCode = hashCode * 8191 + ((isSetStorage_medium()) ? 131071 : 524287);
    if (isSetStorage_medium())
      hashCode = hashCode * 8191 + storage_medium.getValue();

    hashCode = hashCode * 8191 + ((isSetOld_schema_hash()) ? 131071 : 524287);
    if (isSetOld_schema_hash())
      hashCode = hashCode * 8191 + old_schema_hash;

    hashCode = hashCode * 8191 + ((isSetNew_schema_hash()) ? 131071 : 524287);
    if (isSetNew_schema_hash())
      hashCode = hashCode * 8191 + new_schema_hash;

    hashCode = hashCode * 8191 + ((isSetChecked_version()) ? 131071 : 524287);
    if (isSetChecked_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(checked_version);

    hashCode = hashCode * 8191 + ((isSetChecked_version_hash()) ? 131071 : 524287);
    if (isSetChecked_version_hash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(checked_version_hash);

    hashCode = hashCode * 8191 + ((isSetConsistent()) ? 131071 : 524287);
    if (isSetConsistent())
      hashCode = hashCode * 8191 + ((consistent) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetReplicas()) ? 131071 : 524287);
    if (isSetReplicas())
      hashCode = hashCode * 8191 + replicas.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TTabletMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTablet_id(), other.isSetTablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb_id(), other.isSetDb_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_id, other.db_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_id(), other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_id(), other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIndex_id(), other.isSetIndex_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_id, other.index_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStorage_medium(), other.isSetStorage_medium());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorage_medium()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_medium, other.storage_medium);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOld_schema_hash(), other.isSetOld_schema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOld_schema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.old_schema_hash, other.old_schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNew_schema_hash(), other.isSetNew_schema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNew_schema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_schema_hash, other.new_schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChecked_version(), other.isSetChecked_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChecked_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checked_version, other.checked_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChecked_version_hash(), other.isSetChecked_version_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChecked_version_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checked_version_hash, other.checked_version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConsistent(), other.isSetConsistent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsistent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consistent, other.consistent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReplicas(), other.isSetReplicas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicas, other.replicas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTabletMeta(");
    boolean first = true;

    if (isSetTablet_id()) {
      sb.append("tablet_id:");
      sb.append(this.tablet_id);
      first = false;
    }
    if (isSetDb_id()) {
      if (!first) sb.append(", ");
      sb.append("db_id:");
      sb.append(this.db_id);
      first = false;
    }
    if (isSetTable_id()) {
      if (!first) sb.append(", ");
      sb.append("table_id:");
      sb.append(this.table_id);
      first = false;
    }
    if (isSetPartition_id()) {
      if (!first) sb.append(", ");
      sb.append("partition_id:");
      sb.append(this.partition_id);
      first = false;
    }
    if (isSetIndex_id()) {
      if (!first) sb.append(", ");
      sb.append("index_id:");
      sb.append(this.index_id);
      first = false;
    }
    if (isSetStorage_medium()) {
      if (!first) sb.append(", ");
      sb.append("storage_medium:");
      if (this.storage_medium == null) {
        sb.append("null");
      } else {
        sb.append(this.storage_medium);
      }
      first = false;
    }
    if (isSetOld_schema_hash()) {
      if (!first) sb.append(", ");
      sb.append("old_schema_hash:");
      sb.append(this.old_schema_hash);
      first = false;
    }
    if (isSetNew_schema_hash()) {
      if (!first) sb.append(", ");
      sb.append("new_schema_hash:");
      sb.append(this.new_schema_hash);
      first = false;
    }
    if (isSetChecked_version()) {
      if (!first) sb.append(", ");
      sb.append("checked_version:");
      sb.append(this.checked_version);
      first = false;
    }
    if (isSetChecked_version_hash()) {
      if (!first) sb.append(", ");
      sb.append("checked_version_hash:");
      sb.append(this.checked_version_hash);
      first = false;
    }
    if (isSetConsistent()) {
      if (!first) sb.append(", ");
      sb.append("consistent:");
      sb.append(this.consistent);
      first = false;
    }
    if (isSetReplicas()) {
      if (!first) sb.append(", ");
      sb.append("replicas:");
      if (this.replicas == null) {
        sb.append("null");
      } else {
        sb.append(this.replicas);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTabletMetaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTabletMetaStandardScheme getScheme() {
      return new TTabletMetaStandardScheme();
    }
  }

  private static class TTabletMetaStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTabletMeta> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTabletMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.db_id = iprot.readI64();
              struct.setDb_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_id = iprot.readI64();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INDEX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.index_id = iprot.readI64();
              struct.setIndex_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STORAGE_MEDIUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.storage_medium = io.datafibre.fibre.thrift.TStorageMedium.findByValue(iprot.readI32());
              struct.setStorage_mediumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OLD_SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.old_schema_hash = iprot.readI32();
              struct.setOld_schema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NEW_SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.new_schema_hash = iprot.readI32();
              struct.setNew_schema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHECKED_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.checked_version = iprot.readI64();
              struct.setChecked_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CHECKED_VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.checked_version_hash = iprot.readI64();
              struct.setChecked_version_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CONSISTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.consistent = iprot.readBool();
              struct.setConsistentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REPLICAS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list404 = iprot.readListBegin();
                struct.replicas = new java.util.ArrayList<TReplicaMeta>(_list404.size);
                @org.apache.thrift.annotation.Nullable TReplicaMeta _elem405;
                for (int _i406 = 0; _i406 < _list404.size; ++_i406)
                {
                  _elem405 = new TReplicaMeta();
                  _elem405.read(iprot);
                  struct.replicas.add(_elem405);
                }
                iprot.readListEnd();
              }
              struct.setReplicasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTabletMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTablet_id()) {
        oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
        oprot.writeI64(struct.tablet_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDb_id()) {
        oprot.writeFieldBegin(DB_ID_FIELD_DESC);
        oprot.writeI64(struct.db_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTable_id()) {
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeI64(struct.table_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartition_id()) {
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI64(struct.partition_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIndex_id()) {
        oprot.writeFieldBegin(INDEX_ID_FIELD_DESC);
        oprot.writeI64(struct.index_id);
        oprot.writeFieldEnd();
      }
      if (struct.storage_medium != null) {
        if (struct.isSetStorage_medium()) {
          oprot.writeFieldBegin(STORAGE_MEDIUM_FIELD_DESC);
          oprot.writeI32(struct.storage_medium.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOld_schema_hash()) {
        oprot.writeFieldBegin(OLD_SCHEMA_HASH_FIELD_DESC);
        oprot.writeI32(struct.old_schema_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNew_schema_hash()) {
        oprot.writeFieldBegin(NEW_SCHEMA_HASH_FIELD_DESC);
        oprot.writeI32(struct.new_schema_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChecked_version()) {
        oprot.writeFieldBegin(CHECKED_VERSION_FIELD_DESC);
        oprot.writeI64(struct.checked_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChecked_version_hash()) {
        oprot.writeFieldBegin(CHECKED_VERSION_HASH_FIELD_DESC);
        oprot.writeI64(struct.checked_version_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetConsistent()) {
        oprot.writeFieldBegin(CONSISTENT_FIELD_DESC);
        oprot.writeBool(struct.consistent);
        oprot.writeFieldEnd();
      }
      if (struct.replicas != null) {
        if (struct.isSetReplicas()) {
          oprot.writeFieldBegin(REPLICAS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.replicas.size()));
            for (TReplicaMeta _iter407 : struct.replicas)
            {
              _iter407.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTabletMetaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTabletMetaTupleScheme getScheme() {
      return new TTabletMetaTupleScheme();
    }
  }

  private static class TTabletMetaTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTabletMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTabletMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTablet_id()) {
        optionals.set(0);
      }
      if (struct.isSetDb_id()) {
        optionals.set(1);
      }
      if (struct.isSetTable_id()) {
        optionals.set(2);
      }
      if (struct.isSetPartition_id()) {
        optionals.set(3);
      }
      if (struct.isSetIndex_id()) {
        optionals.set(4);
      }
      if (struct.isSetStorage_medium()) {
        optionals.set(5);
      }
      if (struct.isSetOld_schema_hash()) {
        optionals.set(6);
      }
      if (struct.isSetNew_schema_hash()) {
        optionals.set(7);
      }
      if (struct.isSetChecked_version()) {
        optionals.set(8);
      }
      if (struct.isSetChecked_version_hash()) {
        optionals.set(9);
      }
      if (struct.isSetConsistent()) {
        optionals.set(10);
      }
      if (struct.isSetReplicas()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetTablet_id()) {
        oprot.writeI64(struct.tablet_id);
      }
      if (struct.isSetDb_id()) {
        oprot.writeI64(struct.db_id);
      }
      if (struct.isSetTable_id()) {
        oprot.writeI64(struct.table_id);
      }
      if (struct.isSetPartition_id()) {
        oprot.writeI64(struct.partition_id);
      }
      if (struct.isSetIndex_id()) {
        oprot.writeI64(struct.index_id);
      }
      if (struct.isSetStorage_medium()) {
        oprot.writeI32(struct.storage_medium.getValue());
      }
      if (struct.isSetOld_schema_hash()) {
        oprot.writeI32(struct.old_schema_hash);
      }
      if (struct.isSetNew_schema_hash()) {
        oprot.writeI32(struct.new_schema_hash);
      }
      if (struct.isSetChecked_version()) {
        oprot.writeI64(struct.checked_version);
      }
      if (struct.isSetChecked_version_hash()) {
        oprot.writeI64(struct.checked_version_hash);
      }
      if (struct.isSetConsistent()) {
        oprot.writeBool(struct.consistent);
      }
      if (struct.isSetReplicas()) {
        {
          oprot.writeI32(struct.replicas.size());
          for (TReplicaMeta _iter408 : struct.replicas)
          {
            _iter408.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTabletMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.tablet_id = iprot.readI64();
        struct.setTablet_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.db_id = iprot.readI64();
        struct.setDb_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.table_id = iprot.readI64();
        struct.setTable_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.partition_id = iprot.readI64();
        struct.setPartition_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.index_id = iprot.readI64();
        struct.setIndex_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.storage_medium = io.datafibre.fibre.thrift.TStorageMedium.findByValue(iprot.readI32());
        struct.setStorage_mediumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.old_schema_hash = iprot.readI32();
        struct.setOld_schema_hashIsSet(true);
      }
      if (incoming.get(7)) {
        struct.new_schema_hash = iprot.readI32();
        struct.setNew_schema_hashIsSet(true);
      }
      if (incoming.get(8)) {
        struct.checked_version = iprot.readI64();
        struct.setChecked_versionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.checked_version_hash = iprot.readI64();
        struct.setChecked_version_hashIsSet(true);
      }
      if (incoming.get(10)) {
        struct.consistent = iprot.readBool();
        struct.setConsistentIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list409 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.replicas = new java.util.ArrayList<TReplicaMeta>(_list409.size);
          @org.apache.thrift.annotation.Nullable TReplicaMeta _elem410;
          for (int _i411 = 0; _i411 < _list409.size; ++_i411)
          {
            _elem410 = new TReplicaMeta();
            _elem410.read(iprot);
            struct.replicas.add(_elem410);
          }
        }
        struct.setReplicasIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

