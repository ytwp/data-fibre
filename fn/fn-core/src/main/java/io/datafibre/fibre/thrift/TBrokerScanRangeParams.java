/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TBrokerScanRangeParams implements org.apache.thrift.TBase<TBrokerScanRangeParams, TBrokerScanRangeParams._Fields>, java.io.Serializable, Cloneable, Comparable<TBrokerScanRangeParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBrokerScanRangeParams");

  private static final org.apache.thrift.protocol.TField COLUMN_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("column_separator", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField ROW_DELIMITER_FIELD_DESC = new org.apache.thrift.protocol.TField("row_delimiter", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField SRC_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("src_tuple_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SRC_SLOT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("src_slot_ids", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DEST_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dest_tuple_id", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField EXPR_OF_DEST_SLOT_FIELD_DESC = new org.apache.thrift.protocol.TField("expr_of_dest_slot", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField PARTITION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_ids", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField DEST_SID_TO_SRC_SID_WITHOUT_TRANS_FIELD_DESC = new org.apache.thrift.protocol.TField("dest_sid_to_src_sid_without_trans", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField STRICT_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("strict_mode", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField MULTI_COLUMN_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("multi_column_separator", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MULTI_ROW_DELIMITER_FIELD_DESC = new org.apache.thrift.protocol.TField("multi_row_delimiter", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField NON_BLOCKING_READ_FIELD_DESC = new org.apache.thrift.protocol.TField("non_blocking_read", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField USE_BROKER_FIELD_DESC = new org.apache.thrift.protocol.TField("use_broker", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField HDFS_READ_BUFFER_SIZE_KB_FIELD_DESC = new org.apache.thrift.protocol.TField("hdfs_read_buffer_size_kb", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField HDFS_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("hdfs_properties", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_id", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField SKIP_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("skip_header", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField TRIM_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("trim_space", org.apache.thrift.protocol.TType.BOOL, (short)25);
  private static final org.apache.thrift.protocol.TField ENCLOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("enclose", org.apache.thrift.protocol.TType.BYTE, (short)26);
  private static final org.apache.thrift.protocol.TField ESCAPE_FIELD_DESC = new org.apache.thrift.protocol.TField("escape", org.apache.thrift.protocol.TType.BYTE, (short)27);
  private static final org.apache.thrift.protocol.TField CONFLUENT_SCHEMA_REGISTRY_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("confluent_schema_registry_url", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField JSON_FILE_SIZE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("json_file_size_limit", org.apache.thrift.protocol.TType.I64, (short)29);
  private static final org.apache.thrift.protocol.TField SCHEMA_SAMPLE_FILE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_sample_file_count", org.apache.thrift.protocol.TType.I64, (short)30);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TBrokerScanRangeParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TBrokerScanRangeParamsTupleSchemeFactory();

  public byte column_separator; // required
  public byte row_delimiter; // required
  public int src_tuple_id; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> src_slot_ids; // required
  public int dest_tuple_id; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,io.datafibre.fibre.thrift.TExpr> expr_of_dest_slot; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> partition_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> dest_sid_to_src_sid_without_trans; // optional
  public boolean strict_mode; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String multi_column_separator; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String multi_row_delimiter; // optional
  public boolean non_blocking_read; // optional
  public boolean use_broker; // optional
  public int hdfs_read_buffer_size_kb; // optional
  public @org.apache.thrift.annotation.Nullable THdfsProperties hdfs_properties; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String label; // optional
  public long txn_id; // optional
  public long skip_header; // optional
  public boolean trim_space; // optional
  public byte enclose; // optional
  public byte escape; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String confluent_schema_registry_url; // optional
  public long json_file_size_limit; // optional
  public long schema_sample_file_count; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_SEPARATOR((short)1, "column_separator"),
    ROW_DELIMITER((short)2, "row_delimiter"),
    SRC_TUPLE_ID((short)3, "src_tuple_id"),
    SRC_SLOT_IDS((short)4, "src_slot_ids"),
    DEST_TUPLE_ID((short)5, "dest_tuple_id"),
    EXPR_OF_DEST_SLOT((short)6, "expr_of_dest_slot"),
    PROPERTIES((short)7, "properties"),
    PARTITION_IDS((short)8, "partition_ids"),
    DEST_SID_TO_SRC_SID_WITHOUT_TRANS((short)9, "dest_sid_to_src_sid_without_trans"),
    STRICT_MODE((short)10, "strict_mode"),
    MULTI_COLUMN_SEPARATOR((short)11, "multi_column_separator"),
    MULTI_ROW_DELIMITER((short)12, "multi_row_delimiter"),
    NON_BLOCKING_READ((short)13, "non_blocking_read"),
    USE_BROKER((short)14, "use_broker"),
    HDFS_READ_BUFFER_SIZE_KB((short)15, "hdfs_read_buffer_size_kb"),
    HDFS_PROPERTIES((short)16, "hdfs_properties"),
    DB_NAME((short)20, "db_name"),
    TABLE_NAME((short)21, "table_name"),
    LABEL((short)22, "label"),
    TXN_ID((short)23, "txn_id"),
    SKIP_HEADER((short)24, "skip_header"),
    TRIM_SPACE((short)25, "trim_space"),
    ENCLOSE((short)26, "enclose"),
    ESCAPE((short)27, "escape"),
    CONFLUENT_SCHEMA_REGISTRY_URL((short)28, "confluent_schema_registry_url"),
    JSON_FILE_SIZE_LIMIT((short)29, "json_file_size_limit"),
    SCHEMA_SAMPLE_FILE_COUNT((short)30, "schema_sample_file_count");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_SEPARATOR
          return COLUMN_SEPARATOR;
        case 2: // ROW_DELIMITER
          return ROW_DELIMITER;
        case 3: // SRC_TUPLE_ID
          return SRC_TUPLE_ID;
        case 4: // SRC_SLOT_IDS
          return SRC_SLOT_IDS;
        case 5: // DEST_TUPLE_ID
          return DEST_TUPLE_ID;
        case 6: // EXPR_OF_DEST_SLOT
          return EXPR_OF_DEST_SLOT;
        case 7: // PROPERTIES
          return PROPERTIES;
        case 8: // PARTITION_IDS
          return PARTITION_IDS;
        case 9: // DEST_SID_TO_SRC_SID_WITHOUT_TRANS
          return DEST_SID_TO_SRC_SID_WITHOUT_TRANS;
        case 10: // STRICT_MODE
          return STRICT_MODE;
        case 11: // MULTI_COLUMN_SEPARATOR
          return MULTI_COLUMN_SEPARATOR;
        case 12: // MULTI_ROW_DELIMITER
          return MULTI_ROW_DELIMITER;
        case 13: // NON_BLOCKING_READ
          return NON_BLOCKING_READ;
        case 14: // USE_BROKER
          return USE_BROKER;
        case 15: // HDFS_READ_BUFFER_SIZE_KB
          return HDFS_READ_BUFFER_SIZE_KB;
        case 16: // HDFS_PROPERTIES
          return HDFS_PROPERTIES;
        case 20: // DB_NAME
          return DB_NAME;
        case 21: // TABLE_NAME
          return TABLE_NAME;
        case 22: // LABEL
          return LABEL;
        case 23: // TXN_ID
          return TXN_ID;
        case 24: // SKIP_HEADER
          return SKIP_HEADER;
        case 25: // TRIM_SPACE
          return TRIM_SPACE;
        case 26: // ENCLOSE
          return ENCLOSE;
        case 27: // ESCAPE
          return ESCAPE;
        case 28: // CONFLUENT_SCHEMA_REGISTRY_URL
          return CONFLUENT_SCHEMA_REGISTRY_URL;
        case 29: // JSON_FILE_SIZE_LIMIT
          return JSON_FILE_SIZE_LIMIT;
        case 30: // SCHEMA_SAMPLE_FILE_COUNT
          return SCHEMA_SAMPLE_FILE_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COLUMN_SEPARATOR_ISSET_ID = 0;
  private static final int __ROW_DELIMITER_ISSET_ID = 1;
  private static final int __SRC_TUPLE_ID_ISSET_ID = 2;
  private static final int __DEST_TUPLE_ID_ISSET_ID = 3;
  private static final int __STRICT_MODE_ISSET_ID = 4;
  private static final int __NON_BLOCKING_READ_ISSET_ID = 5;
  private static final int __USE_BROKER_ISSET_ID = 6;
  private static final int __HDFS_READ_BUFFER_SIZE_KB_ISSET_ID = 7;
  private static final int __TXN_ID_ISSET_ID = 8;
  private static final int __SKIP_HEADER_ISSET_ID = 9;
  private static final int __TRIM_SPACE_ISSET_ID = 10;
  private static final int __ENCLOSE_ISSET_ID = 11;
  private static final int __ESCAPE_ISSET_ID = 12;
  private static final int __JSON_FILE_SIZE_LIMIT_ISSET_ID = 13;
  private static final int __SCHEMA_SAMPLE_FILE_COUNT_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXPR_OF_DEST_SLOT,_Fields.PROPERTIES,_Fields.PARTITION_IDS,_Fields.DEST_SID_TO_SRC_SID_WITHOUT_TRANS,_Fields.STRICT_MODE,_Fields.MULTI_COLUMN_SEPARATOR,_Fields.MULTI_ROW_DELIMITER,_Fields.NON_BLOCKING_READ,_Fields.USE_BROKER,_Fields.HDFS_READ_BUFFER_SIZE_KB,_Fields.HDFS_PROPERTIES,_Fields.DB_NAME,_Fields.TABLE_NAME,_Fields.LABEL,_Fields.TXN_ID,_Fields.SKIP_HEADER,_Fields.TRIM_SPACE,_Fields.ENCLOSE,_Fields.ESCAPE,_Fields.CONFLUENT_SCHEMA_REGISTRY_URL,_Fields.JSON_FILE_SIZE_LIMIT,_Fields.SCHEMA_SAMPLE_FILE_COUNT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("column_separator", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ROW_DELIMITER, new org.apache.thrift.meta_data.FieldMetaData("row_delimiter", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SRC_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("src_tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.SRC_SLOT_IDS, new org.apache.thrift.meta_data.FieldMetaData("src_slot_ids", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    tmpMap.put(_Fields.DEST_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("dest_tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.EXPR_OF_DEST_SLOT, new org.apache.thrift.meta_data.FieldMetaData("expr_of_dest_slot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TExpr.class))));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARTITION_IDS, new org.apache.thrift.meta_data.FieldMetaData("partition_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DEST_SID_TO_SRC_SID_WITHOUT_TRANS, new org.apache.thrift.meta_data.FieldMetaData("dest_sid_to_src_sid_without_trans", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    tmpMap.put(_Fields.STRICT_MODE, new org.apache.thrift.meta_data.FieldMetaData("strict_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MULTI_COLUMN_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("multi_column_separator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_ROW_DELIMITER, new org.apache.thrift.meta_data.FieldMetaData("multi_row_delimiter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NON_BLOCKING_READ, new org.apache.thrift.meta_data.FieldMetaData("non_blocking_read", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USE_BROKER, new org.apache.thrift.meta_data.FieldMetaData("use_broker", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HDFS_READ_BUFFER_SIZE_KB, new org.apache.thrift.meta_data.FieldMetaData("hdfs_read_buffer_size_kb", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HDFS_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("hdfs_properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsProperties.class)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txn_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SKIP_HEADER, new org.apache.thrift.meta_data.FieldMetaData("skip_header", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRIM_SPACE, new org.apache.thrift.meta_data.FieldMetaData("trim_space", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENCLOSE, new org.apache.thrift.meta_data.FieldMetaData("enclose", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ESCAPE, new org.apache.thrift.meta_data.FieldMetaData("escape", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CONFLUENT_SCHEMA_REGISTRY_URL, new org.apache.thrift.meta_data.FieldMetaData("confluent_schema_registry_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JSON_FILE_SIZE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("json_file_size_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCHEMA_SAMPLE_FILE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("schema_sample_file_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBrokerScanRangeParams.class, metaDataMap);
  }

  public TBrokerScanRangeParams() {
    this.hdfs_read_buffer_size_kb = 0;

  }

  public TBrokerScanRangeParams(
    byte column_separator,
    byte row_delimiter,
    int src_tuple_id,
    java.util.List<java.lang.Integer> src_slot_ids,
    int dest_tuple_id)
  {
    this();
    this.column_separator = column_separator;
    setColumn_separatorIsSet(true);
    this.row_delimiter = row_delimiter;
    setRow_delimiterIsSet(true);
    this.src_tuple_id = src_tuple_id;
    setSrc_tuple_idIsSet(true);
    this.src_slot_ids = src_slot_ids;
    this.dest_tuple_id = dest_tuple_id;
    setDest_tuple_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBrokerScanRangeParams(TBrokerScanRangeParams other) {
    __isset_bitfield = other.__isset_bitfield;
    this.column_separator = other.column_separator;
    this.row_delimiter = other.row_delimiter;
    this.src_tuple_id = other.src_tuple_id;
    if (other.isSetSrc_slot_ids()) {
      java.util.List<java.lang.Integer> __this__src_slot_ids = new java.util.ArrayList<java.lang.Integer>(other.src_slot_ids.size());
      for (java.lang.Integer other_element : other.src_slot_ids) {
        __this__src_slot_ids.add(other_element);
      }
      this.src_slot_ids = __this__src_slot_ids;
    }
    this.dest_tuple_id = other.dest_tuple_id;
    if (other.isSetExpr_of_dest_slot()) {
      java.util.Map<java.lang.Integer,io.datafibre.fibre.thrift.TExpr> __this__expr_of_dest_slot = new java.util.HashMap<java.lang.Integer,io.datafibre.fibre.thrift.TExpr>(other.expr_of_dest_slot.size());
      for (java.util.Map.Entry<java.lang.Integer, io.datafibre.fibre.thrift.TExpr> other_element : other.expr_of_dest_slot.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        io.datafibre.fibre.thrift.TExpr other_element_value = other_element.getValue();

        java.lang.Integer __this__expr_of_dest_slot_copy_key = other_element_key;

        io.datafibre.fibre.thrift.TExpr __this__expr_of_dest_slot_copy_value = new io.datafibre.fibre.thrift.TExpr(other_element_value);

        __this__expr_of_dest_slot.put(__this__expr_of_dest_slot_copy_key, __this__expr_of_dest_slot_copy_value);
      }
      this.expr_of_dest_slot = __this__expr_of_dest_slot;
    }
    if (other.isSetProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.properties);
      this.properties = __this__properties;
    }
    if (other.isSetPartition_ids()) {
      java.util.List<java.lang.Long> __this__partition_ids = new java.util.ArrayList<java.lang.Long>(other.partition_ids);
      this.partition_ids = __this__partition_ids;
    }
    if (other.isSetDest_sid_to_src_sid_without_trans()) {
      java.util.Map<java.lang.Integer,java.lang.Integer> __this__dest_sid_to_src_sid_without_trans = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.dest_sid_to_src_sid_without_trans.size());
      for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> other_element : other.dest_sid_to_src_sid_without_trans.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.lang.Integer other_element_value = other_element.getValue();

        java.lang.Integer __this__dest_sid_to_src_sid_without_trans_copy_key = other_element_key;

        java.lang.Integer __this__dest_sid_to_src_sid_without_trans_copy_value = other_element_value;

        __this__dest_sid_to_src_sid_without_trans.put(__this__dest_sid_to_src_sid_without_trans_copy_key, __this__dest_sid_to_src_sid_without_trans_copy_value);
      }
      this.dest_sid_to_src_sid_without_trans = __this__dest_sid_to_src_sid_without_trans;
    }
    this.strict_mode = other.strict_mode;
    if (other.isSetMulti_column_separator()) {
      this.multi_column_separator = other.multi_column_separator;
    }
    if (other.isSetMulti_row_delimiter()) {
      this.multi_row_delimiter = other.multi_row_delimiter;
    }
    this.non_blocking_read = other.non_blocking_read;
    this.use_broker = other.use_broker;
    this.hdfs_read_buffer_size_kb = other.hdfs_read_buffer_size_kb;
    if (other.isSetHdfs_properties()) {
      this.hdfs_properties = new THdfsProperties(other.hdfs_properties);
    }
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    this.txn_id = other.txn_id;
    this.skip_header = other.skip_header;
    this.trim_space = other.trim_space;
    this.enclose = other.enclose;
    this.escape = other.escape;
    if (other.isSetConfluent_schema_registry_url()) {
      this.confluent_schema_registry_url = other.confluent_schema_registry_url;
    }
    this.json_file_size_limit = other.json_file_size_limit;
    this.schema_sample_file_count = other.schema_sample_file_count;
  }

  @Override
  public TBrokerScanRangeParams deepCopy() {
    return new TBrokerScanRangeParams(this);
  }

  @Override
  public void clear() {
    setColumn_separatorIsSet(false);
    this.column_separator = 0;
    setRow_delimiterIsSet(false);
    this.row_delimiter = 0;
    setSrc_tuple_idIsSet(false);
    this.src_tuple_id = 0;
    this.src_slot_ids = null;
    setDest_tuple_idIsSet(false);
    this.dest_tuple_id = 0;
    this.expr_of_dest_slot = null;
    this.properties = null;
    this.partition_ids = null;
    this.dest_sid_to_src_sid_without_trans = null;
    setStrict_modeIsSet(false);
    this.strict_mode = false;
    this.multi_column_separator = null;
    this.multi_row_delimiter = null;
    setNon_blocking_readIsSet(false);
    this.non_blocking_read = false;
    setUse_brokerIsSet(false);
    this.use_broker = false;
    this.hdfs_read_buffer_size_kb = 0;

    this.hdfs_properties = null;
    this.db_name = null;
    this.table_name = null;
    this.label = null;
    setTxn_idIsSet(false);
    this.txn_id = 0;
    setSkip_headerIsSet(false);
    this.skip_header = 0;
    setTrim_spaceIsSet(false);
    this.trim_space = false;
    setEncloseIsSet(false);
    this.enclose = 0;
    setEscapeIsSet(false);
    this.escape = 0;
    this.confluent_schema_registry_url = null;
    setJson_file_size_limitIsSet(false);
    this.json_file_size_limit = 0;
    setSchema_sample_file_countIsSet(false);
    this.schema_sample_file_count = 0;
  }

  public byte getColumn_separator() {
    return this.column_separator;
  }

  public TBrokerScanRangeParams setColumn_separator(byte column_separator) {
    this.column_separator = column_separator;
    setColumn_separatorIsSet(true);
    return this;
  }

  public void unsetColumn_separator() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLUMN_SEPARATOR_ISSET_ID);
  }

  /** Returns true if field column_separator is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_separator() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLUMN_SEPARATOR_ISSET_ID);
  }

  public void setColumn_separatorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLUMN_SEPARATOR_ISSET_ID, value);
  }

  public byte getRow_delimiter() {
    return this.row_delimiter;
  }

  public TBrokerScanRangeParams setRow_delimiter(byte row_delimiter) {
    this.row_delimiter = row_delimiter;
    setRow_delimiterIsSet(true);
    return this;
  }

  public void unsetRow_delimiter() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROW_DELIMITER_ISSET_ID);
  }

  /** Returns true if field row_delimiter is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_delimiter() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROW_DELIMITER_ISSET_ID);
  }

  public void setRow_delimiterIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROW_DELIMITER_ISSET_ID, value);
  }

  public int getSrc_tuple_id() {
    return this.src_tuple_id;
  }

  public TBrokerScanRangeParams setSrc_tuple_id(int src_tuple_id) {
    this.src_tuple_id = src_tuple_id;
    setSrc_tuple_idIsSet(true);
    return this;
  }

  public void unsetSrc_tuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRC_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field src_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_tuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRC_TUPLE_ID_ISSET_ID);
  }

  public void setSrc_tuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRC_TUPLE_ID_ISSET_ID, value);
  }

  public int getSrc_slot_idsSize() {
    return (this.src_slot_ids == null) ? 0 : this.src_slot_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getSrc_slot_idsIterator() {
    return (this.src_slot_ids == null) ? null : this.src_slot_ids.iterator();
  }

  public void addToSrc_slot_ids(int elem) {
    if (this.src_slot_ids == null) {
      this.src_slot_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.src_slot_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getSrc_slot_ids() {
    return this.src_slot_ids;
  }

  public TBrokerScanRangeParams setSrc_slot_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> src_slot_ids) {
    this.src_slot_ids = src_slot_ids;
    return this;
  }

  public void unsetSrc_slot_ids() {
    this.src_slot_ids = null;
  }

  /** Returns true if field src_slot_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_slot_ids() {
    return this.src_slot_ids != null;
  }

  public void setSrc_slot_idsIsSet(boolean value) {
    if (!value) {
      this.src_slot_ids = null;
    }
  }

  public int getDest_tuple_id() {
    return this.dest_tuple_id;
  }

  public TBrokerScanRangeParams setDest_tuple_id(int dest_tuple_id) {
    this.dest_tuple_id = dest_tuple_id;
    setDest_tuple_idIsSet(true);
    return this;
  }

  public void unsetDest_tuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEST_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field dest_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDest_tuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEST_TUPLE_ID_ISSET_ID);
  }

  public void setDest_tuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEST_TUPLE_ID_ISSET_ID, value);
  }

  public int getExpr_of_dest_slotSize() {
    return (this.expr_of_dest_slot == null) ? 0 : this.expr_of_dest_slot.size();
  }

  public void putToExpr_of_dest_slot(int key, io.datafibre.fibre.thrift.TExpr val) {
    if (this.expr_of_dest_slot == null) {
      this.expr_of_dest_slot = new java.util.HashMap<java.lang.Integer,io.datafibre.fibre.thrift.TExpr>();
    }
    this.expr_of_dest_slot.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,io.datafibre.fibre.thrift.TExpr> getExpr_of_dest_slot() {
    return this.expr_of_dest_slot;
  }

  public TBrokerScanRangeParams setExpr_of_dest_slot(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,io.datafibre.fibre.thrift.TExpr> expr_of_dest_slot) {
    this.expr_of_dest_slot = expr_of_dest_slot;
    return this;
  }

  public void unsetExpr_of_dest_slot() {
    this.expr_of_dest_slot = null;
  }

  /** Returns true if field expr_of_dest_slot is set (has been assigned a value) and false otherwise */
  public boolean isSetExpr_of_dest_slot() {
    return this.expr_of_dest_slot != null;
  }

  public void setExpr_of_dest_slotIsSet(boolean value) {
    if (!value) {
      this.expr_of_dest_slot = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(java.lang.String key, java.lang.String val) {
    if (this.properties == null) {
      this.properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return this.properties;
  }

  public TBrokerScanRangeParams setProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public int getPartition_idsSize() {
    return (this.partition_ids == null) ? 0 : this.partition_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getPartition_idsIterator() {
    return (this.partition_ids == null) ? null : this.partition_ids.iterator();
  }

  public void addToPartition_ids(long elem) {
    if (this.partition_ids == null) {
      this.partition_ids = new java.util.ArrayList<java.lang.Long>();
    }
    this.partition_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getPartition_ids() {
    return this.partition_ids;
  }

  public TBrokerScanRangeParams setPartition_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> partition_ids) {
    this.partition_ids = partition_ids;
    return this;
  }

  public void unsetPartition_ids() {
    this.partition_ids = null;
  }

  /** Returns true if field partition_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_ids() {
    return this.partition_ids != null;
  }

  public void setPartition_idsIsSet(boolean value) {
    if (!value) {
      this.partition_ids = null;
    }
  }

  public int getDest_sid_to_src_sid_without_transSize() {
    return (this.dest_sid_to_src_sid_without_trans == null) ? 0 : this.dest_sid_to_src_sid_without_trans.size();
  }

  public void putToDest_sid_to_src_sid_without_trans(int key, int val) {
    if (this.dest_sid_to_src_sid_without_trans == null) {
      this.dest_sid_to_src_sid_without_trans = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
    }
    this.dest_sid_to_src_sid_without_trans.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Integer> getDest_sid_to_src_sid_without_trans() {
    return this.dest_sid_to_src_sid_without_trans;
  }

  public TBrokerScanRangeParams setDest_sid_to_src_sid_without_trans(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> dest_sid_to_src_sid_without_trans) {
    this.dest_sid_to_src_sid_without_trans = dest_sid_to_src_sid_without_trans;
    return this;
  }

  public void unsetDest_sid_to_src_sid_without_trans() {
    this.dest_sid_to_src_sid_without_trans = null;
  }

  /** Returns true if field dest_sid_to_src_sid_without_trans is set (has been assigned a value) and false otherwise */
  public boolean isSetDest_sid_to_src_sid_without_trans() {
    return this.dest_sid_to_src_sid_without_trans != null;
  }

  public void setDest_sid_to_src_sid_without_transIsSet(boolean value) {
    if (!value) {
      this.dest_sid_to_src_sid_without_trans = null;
    }
  }

  public boolean isStrict_mode() {
    return this.strict_mode;
  }

  public TBrokerScanRangeParams setStrict_mode(boolean strict_mode) {
    this.strict_mode = strict_mode;
    setStrict_modeIsSet(true);
    return this;
  }

  public void unsetStrict_mode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRICT_MODE_ISSET_ID);
  }

  /** Returns true if field strict_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetStrict_mode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRICT_MODE_ISSET_ID);
  }

  public void setStrict_modeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRICT_MODE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMulti_column_separator() {
    return this.multi_column_separator;
  }

  public TBrokerScanRangeParams setMulti_column_separator(@org.apache.thrift.annotation.Nullable java.lang.String multi_column_separator) {
    this.multi_column_separator = multi_column_separator;
    return this;
  }

  public void unsetMulti_column_separator() {
    this.multi_column_separator = null;
  }

  /** Returns true if field multi_column_separator is set (has been assigned a value) and false otherwise */
  public boolean isSetMulti_column_separator() {
    return this.multi_column_separator != null;
  }

  public void setMulti_column_separatorIsSet(boolean value) {
    if (!value) {
      this.multi_column_separator = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMulti_row_delimiter() {
    return this.multi_row_delimiter;
  }

  public TBrokerScanRangeParams setMulti_row_delimiter(@org.apache.thrift.annotation.Nullable java.lang.String multi_row_delimiter) {
    this.multi_row_delimiter = multi_row_delimiter;
    return this;
  }

  public void unsetMulti_row_delimiter() {
    this.multi_row_delimiter = null;
  }

  /** Returns true if field multi_row_delimiter is set (has been assigned a value) and false otherwise */
  public boolean isSetMulti_row_delimiter() {
    return this.multi_row_delimiter != null;
  }

  public void setMulti_row_delimiterIsSet(boolean value) {
    if (!value) {
      this.multi_row_delimiter = null;
    }
  }

  public boolean isNon_blocking_read() {
    return this.non_blocking_read;
  }

  public TBrokerScanRangeParams setNon_blocking_read(boolean non_blocking_read) {
    this.non_blocking_read = non_blocking_read;
    setNon_blocking_readIsSet(true);
    return this;
  }

  public void unsetNon_blocking_read() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NON_BLOCKING_READ_ISSET_ID);
  }

  /** Returns true if field non_blocking_read is set (has been assigned a value) and false otherwise */
  public boolean isSetNon_blocking_read() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NON_BLOCKING_READ_ISSET_ID);
  }

  public void setNon_blocking_readIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NON_BLOCKING_READ_ISSET_ID, value);
  }

  public boolean isUse_broker() {
    return this.use_broker;
  }

  public TBrokerScanRangeParams setUse_broker(boolean use_broker) {
    this.use_broker = use_broker;
    setUse_brokerIsSet(true);
    return this;
  }

  public void unsetUse_broker() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_BROKER_ISSET_ID);
  }

  /** Returns true if field use_broker is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_broker() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_BROKER_ISSET_ID);
  }

  public void setUse_brokerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_BROKER_ISSET_ID, value);
  }

  public int getHdfs_read_buffer_size_kb() {
    return this.hdfs_read_buffer_size_kb;
  }

  public TBrokerScanRangeParams setHdfs_read_buffer_size_kb(int hdfs_read_buffer_size_kb) {
    this.hdfs_read_buffer_size_kb = hdfs_read_buffer_size_kb;
    setHdfs_read_buffer_size_kbIsSet(true);
    return this;
  }

  public void unsetHdfs_read_buffer_size_kb() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HDFS_READ_BUFFER_SIZE_KB_ISSET_ID);
  }

  /** Returns true if field hdfs_read_buffer_size_kb is set (has been assigned a value) and false otherwise */
  public boolean isSetHdfs_read_buffer_size_kb() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HDFS_READ_BUFFER_SIZE_KB_ISSET_ID);
  }

  public void setHdfs_read_buffer_size_kbIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HDFS_READ_BUFFER_SIZE_KB_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public THdfsProperties getHdfs_properties() {
    return this.hdfs_properties;
  }

  public TBrokerScanRangeParams setHdfs_properties(@org.apache.thrift.annotation.Nullable THdfsProperties hdfs_properties) {
    this.hdfs_properties = hdfs_properties;
    return this;
  }

  public void unsetHdfs_properties() {
    this.hdfs_properties = null;
  }

  /** Returns true if field hdfs_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetHdfs_properties() {
    return this.hdfs_properties != null;
  }

  public void setHdfs_propertiesIsSet(boolean value) {
    if (!value) {
      this.hdfs_properties = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb_name() {
    return this.db_name;
  }

  public TBrokerScanRangeParams setDb_name(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_name() {
    return this.table_name;
  }

  public TBrokerScanRangeParams setTable_name(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLabel() {
    return this.label;
  }

  public TBrokerScanRangeParams setLabel(@org.apache.thrift.annotation.Nullable java.lang.String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public long getTxn_id() {
    return this.txn_id;
  }

  public TBrokerScanRangeParams setTxn_id(long txn_id) {
    this.txn_id = txn_id;
    setTxn_idIsSet(true);
    return this;
  }

  public void unsetTxn_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  /** Returns true if field txn_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  public void setTxn_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXN_ID_ISSET_ID, value);
  }

  public long getSkip_header() {
    return this.skip_header;
  }

  public TBrokerScanRangeParams setSkip_header(long skip_header) {
    this.skip_header = skip_header;
    setSkip_headerIsSet(true);
    return this;
  }

  public void unsetSkip_header() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SKIP_HEADER_ISSET_ID);
  }

  /** Returns true if field skip_header is set (has been assigned a value) and false otherwise */
  public boolean isSetSkip_header() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SKIP_HEADER_ISSET_ID);
  }

  public void setSkip_headerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SKIP_HEADER_ISSET_ID, value);
  }

  public boolean isTrim_space() {
    return this.trim_space;
  }

  public TBrokerScanRangeParams setTrim_space(boolean trim_space) {
    this.trim_space = trim_space;
    setTrim_spaceIsSet(true);
    return this;
  }

  public void unsetTrim_space() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRIM_SPACE_ISSET_ID);
  }

  /** Returns true if field trim_space is set (has been assigned a value) and false otherwise */
  public boolean isSetTrim_space() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRIM_SPACE_ISSET_ID);
  }

  public void setTrim_spaceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRIM_SPACE_ISSET_ID, value);
  }

  public byte getEnclose() {
    return this.enclose;
  }

  public TBrokerScanRangeParams setEnclose(byte enclose) {
    this.enclose = enclose;
    setEncloseIsSet(true);
    return this;
  }

  public void unsetEnclose() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENCLOSE_ISSET_ID);
  }

  /** Returns true if field enclose is set (has been assigned a value) and false otherwise */
  public boolean isSetEnclose() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENCLOSE_ISSET_ID);
  }

  public void setEncloseIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENCLOSE_ISSET_ID, value);
  }

  public byte getEscape() {
    return this.escape;
  }

  public TBrokerScanRangeParams setEscape(byte escape) {
    this.escape = escape;
    setEscapeIsSet(true);
    return this;
  }

  public void unsetEscape() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ESCAPE_ISSET_ID);
  }

  /** Returns true if field escape is set (has been assigned a value) and false otherwise */
  public boolean isSetEscape() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ESCAPE_ISSET_ID);
  }

  public void setEscapeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ESCAPE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getConfluent_schema_registry_url() {
    return this.confluent_schema_registry_url;
  }

  public TBrokerScanRangeParams setConfluent_schema_registry_url(@org.apache.thrift.annotation.Nullable java.lang.String confluent_schema_registry_url) {
    this.confluent_schema_registry_url = confluent_schema_registry_url;
    return this;
  }

  public void unsetConfluent_schema_registry_url() {
    this.confluent_schema_registry_url = null;
  }

  /** Returns true if field confluent_schema_registry_url is set (has been assigned a value) and false otherwise */
  public boolean isSetConfluent_schema_registry_url() {
    return this.confluent_schema_registry_url != null;
  }

  public void setConfluent_schema_registry_urlIsSet(boolean value) {
    if (!value) {
      this.confluent_schema_registry_url = null;
    }
  }

  public long getJson_file_size_limit() {
    return this.json_file_size_limit;
  }

  public TBrokerScanRangeParams setJson_file_size_limit(long json_file_size_limit) {
    this.json_file_size_limit = json_file_size_limit;
    setJson_file_size_limitIsSet(true);
    return this;
  }

  public void unsetJson_file_size_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JSON_FILE_SIZE_LIMIT_ISSET_ID);
  }

  /** Returns true if field json_file_size_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetJson_file_size_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JSON_FILE_SIZE_LIMIT_ISSET_ID);
  }

  public void setJson_file_size_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JSON_FILE_SIZE_LIMIT_ISSET_ID, value);
  }

  public long getSchema_sample_file_count() {
    return this.schema_sample_file_count;
  }

  public TBrokerScanRangeParams setSchema_sample_file_count(long schema_sample_file_count) {
    this.schema_sample_file_count = schema_sample_file_count;
    setSchema_sample_file_countIsSet(true);
    return this;
  }

  public void unsetSchema_sample_file_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_SAMPLE_FILE_COUNT_ISSET_ID);
  }

  /** Returns true if field schema_sample_file_count is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_sample_file_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCHEMA_SAMPLE_FILE_COUNT_ISSET_ID);
  }

  public void setSchema_sample_file_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCHEMA_SAMPLE_FILE_COUNT_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COLUMN_SEPARATOR:
      if (value == null) {
        unsetColumn_separator();
      } else {
        setColumn_separator((java.lang.Byte)value);
      }
      break;

    case ROW_DELIMITER:
      if (value == null) {
        unsetRow_delimiter();
      } else {
        setRow_delimiter((java.lang.Byte)value);
      }
      break;

    case SRC_TUPLE_ID:
      if (value == null) {
        unsetSrc_tuple_id();
      } else {
        setSrc_tuple_id((java.lang.Integer)value);
      }
      break;

    case SRC_SLOT_IDS:
      if (value == null) {
        unsetSrc_slot_ids();
      } else {
        setSrc_slot_ids((java.util.List<java.lang.Integer>)value);
      }
      break;

    case DEST_TUPLE_ID:
      if (value == null) {
        unsetDest_tuple_id();
      } else {
        setDest_tuple_id((java.lang.Integer)value);
      }
      break;

    case EXPR_OF_DEST_SLOT:
      if (value == null) {
        unsetExpr_of_dest_slot();
      } else {
        setExpr_of_dest_slot((java.util.Map<java.lang.Integer,io.datafibre.fibre.thrift.TExpr>)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case PARTITION_IDS:
      if (value == null) {
        unsetPartition_ids();
      } else {
        setPartition_ids((java.util.List<java.lang.Long>)value);
      }
      break;

    case DEST_SID_TO_SRC_SID_WITHOUT_TRANS:
      if (value == null) {
        unsetDest_sid_to_src_sid_without_trans();
      } else {
        setDest_sid_to_src_sid_without_trans((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
      }
      break;

    case STRICT_MODE:
      if (value == null) {
        unsetStrict_mode();
      } else {
        setStrict_mode((java.lang.Boolean)value);
      }
      break;

    case MULTI_COLUMN_SEPARATOR:
      if (value == null) {
        unsetMulti_column_separator();
      } else {
        setMulti_column_separator((java.lang.String)value);
      }
      break;

    case MULTI_ROW_DELIMITER:
      if (value == null) {
        unsetMulti_row_delimiter();
      } else {
        setMulti_row_delimiter((java.lang.String)value);
      }
      break;

    case NON_BLOCKING_READ:
      if (value == null) {
        unsetNon_blocking_read();
      } else {
        setNon_blocking_read((java.lang.Boolean)value);
      }
      break;

    case USE_BROKER:
      if (value == null) {
        unsetUse_broker();
      } else {
        setUse_broker((java.lang.Boolean)value);
      }
      break;

    case HDFS_READ_BUFFER_SIZE_KB:
      if (value == null) {
        unsetHdfs_read_buffer_size_kb();
      } else {
        setHdfs_read_buffer_size_kb((java.lang.Integer)value);
      }
      break;

    case HDFS_PROPERTIES:
      if (value == null) {
        unsetHdfs_properties();
      } else {
        setHdfs_properties((THdfsProperties)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((java.lang.String)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((java.lang.String)value);
      }
      break;

    case TXN_ID:
      if (value == null) {
        unsetTxn_id();
      } else {
        setTxn_id((java.lang.Long)value);
      }
      break;

    case SKIP_HEADER:
      if (value == null) {
        unsetSkip_header();
      } else {
        setSkip_header((java.lang.Long)value);
      }
      break;

    case TRIM_SPACE:
      if (value == null) {
        unsetTrim_space();
      } else {
        setTrim_space((java.lang.Boolean)value);
      }
      break;

    case ENCLOSE:
      if (value == null) {
        unsetEnclose();
      } else {
        setEnclose((java.lang.Byte)value);
      }
      break;

    case ESCAPE:
      if (value == null) {
        unsetEscape();
      } else {
        setEscape((java.lang.Byte)value);
      }
      break;

    case CONFLUENT_SCHEMA_REGISTRY_URL:
      if (value == null) {
        unsetConfluent_schema_registry_url();
      } else {
        setConfluent_schema_registry_url((java.lang.String)value);
      }
      break;

    case JSON_FILE_SIZE_LIMIT:
      if (value == null) {
        unsetJson_file_size_limit();
      } else {
        setJson_file_size_limit((java.lang.Long)value);
      }
      break;

    case SCHEMA_SAMPLE_FILE_COUNT:
      if (value == null) {
        unsetSchema_sample_file_count();
      } else {
        setSchema_sample_file_count((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_SEPARATOR:
      return getColumn_separator();

    case ROW_DELIMITER:
      return getRow_delimiter();

    case SRC_TUPLE_ID:
      return getSrc_tuple_id();

    case SRC_SLOT_IDS:
      return getSrc_slot_ids();

    case DEST_TUPLE_ID:
      return getDest_tuple_id();

    case EXPR_OF_DEST_SLOT:
      return getExpr_of_dest_slot();

    case PROPERTIES:
      return getProperties();

    case PARTITION_IDS:
      return getPartition_ids();

    case DEST_SID_TO_SRC_SID_WITHOUT_TRANS:
      return getDest_sid_to_src_sid_without_trans();

    case STRICT_MODE:
      return isStrict_mode();

    case MULTI_COLUMN_SEPARATOR:
      return getMulti_column_separator();

    case MULTI_ROW_DELIMITER:
      return getMulti_row_delimiter();

    case NON_BLOCKING_READ:
      return isNon_blocking_read();

    case USE_BROKER:
      return isUse_broker();

    case HDFS_READ_BUFFER_SIZE_KB:
      return getHdfs_read_buffer_size_kb();

    case HDFS_PROPERTIES:
      return getHdfs_properties();

    case DB_NAME:
      return getDb_name();

    case TABLE_NAME:
      return getTable_name();

    case LABEL:
      return getLabel();

    case TXN_ID:
      return getTxn_id();

    case SKIP_HEADER:
      return getSkip_header();

    case TRIM_SPACE:
      return isTrim_space();

    case ENCLOSE:
      return getEnclose();

    case ESCAPE:
      return getEscape();

    case CONFLUENT_SCHEMA_REGISTRY_URL:
      return getConfluent_schema_registry_url();

    case JSON_FILE_SIZE_LIMIT:
      return getJson_file_size_limit();

    case SCHEMA_SAMPLE_FILE_COUNT:
      return getSchema_sample_file_count();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_SEPARATOR:
      return isSetColumn_separator();
    case ROW_DELIMITER:
      return isSetRow_delimiter();
    case SRC_TUPLE_ID:
      return isSetSrc_tuple_id();
    case SRC_SLOT_IDS:
      return isSetSrc_slot_ids();
    case DEST_TUPLE_ID:
      return isSetDest_tuple_id();
    case EXPR_OF_DEST_SLOT:
      return isSetExpr_of_dest_slot();
    case PROPERTIES:
      return isSetProperties();
    case PARTITION_IDS:
      return isSetPartition_ids();
    case DEST_SID_TO_SRC_SID_WITHOUT_TRANS:
      return isSetDest_sid_to_src_sid_without_trans();
    case STRICT_MODE:
      return isSetStrict_mode();
    case MULTI_COLUMN_SEPARATOR:
      return isSetMulti_column_separator();
    case MULTI_ROW_DELIMITER:
      return isSetMulti_row_delimiter();
    case NON_BLOCKING_READ:
      return isSetNon_blocking_read();
    case USE_BROKER:
      return isSetUse_broker();
    case HDFS_READ_BUFFER_SIZE_KB:
      return isSetHdfs_read_buffer_size_kb();
    case HDFS_PROPERTIES:
      return isSetHdfs_properties();
    case DB_NAME:
      return isSetDb_name();
    case TABLE_NAME:
      return isSetTable_name();
    case LABEL:
      return isSetLabel();
    case TXN_ID:
      return isSetTxn_id();
    case SKIP_HEADER:
      return isSetSkip_header();
    case TRIM_SPACE:
      return isSetTrim_space();
    case ENCLOSE:
      return isSetEnclose();
    case ESCAPE:
      return isSetEscape();
    case CONFLUENT_SCHEMA_REGISTRY_URL:
      return isSetConfluent_schema_registry_url();
    case JSON_FILE_SIZE_LIMIT:
      return isSetJson_file_size_limit();
    case SCHEMA_SAMPLE_FILE_COUNT:
      return isSetSchema_sample_file_count();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TBrokerScanRangeParams)
      return this.equals((TBrokerScanRangeParams)that);
    return false;
  }

  public boolean equals(TBrokerScanRangeParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_column_separator = true;
    boolean that_present_column_separator = true;
    if (this_present_column_separator || that_present_column_separator) {
      if (!(this_present_column_separator && that_present_column_separator))
        return false;
      if (this.column_separator != that.column_separator)
        return false;
    }

    boolean this_present_row_delimiter = true;
    boolean that_present_row_delimiter = true;
    if (this_present_row_delimiter || that_present_row_delimiter) {
      if (!(this_present_row_delimiter && that_present_row_delimiter))
        return false;
      if (this.row_delimiter != that.row_delimiter)
        return false;
    }

    boolean this_present_src_tuple_id = true;
    boolean that_present_src_tuple_id = true;
    if (this_present_src_tuple_id || that_present_src_tuple_id) {
      if (!(this_present_src_tuple_id && that_present_src_tuple_id))
        return false;
      if (this.src_tuple_id != that.src_tuple_id)
        return false;
    }

    boolean this_present_src_slot_ids = true && this.isSetSrc_slot_ids();
    boolean that_present_src_slot_ids = true && that.isSetSrc_slot_ids();
    if (this_present_src_slot_ids || that_present_src_slot_ids) {
      if (!(this_present_src_slot_ids && that_present_src_slot_ids))
        return false;
      if (!this.src_slot_ids.equals(that.src_slot_ids))
        return false;
    }

    boolean this_present_dest_tuple_id = true;
    boolean that_present_dest_tuple_id = true;
    if (this_present_dest_tuple_id || that_present_dest_tuple_id) {
      if (!(this_present_dest_tuple_id && that_present_dest_tuple_id))
        return false;
      if (this.dest_tuple_id != that.dest_tuple_id)
        return false;
    }

    boolean this_present_expr_of_dest_slot = true && this.isSetExpr_of_dest_slot();
    boolean that_present_expr_of_dest_slot = true && that.isSetExpr_of_dest_slot();
    if (this_present_expr_of_dest_slot || that_present_expr_of_dest_slot) {
      if (!(this_present_expr_of_dest_slot && that_present_expr_of_dest_slot))
        return false;
      if (!this.expr_of_dest_slot.equals(that.expr_of_dest_slot))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_partition_ids = true && this.isSetPartition_ids();
    boolean that_present_partition_ids = true && that.isSetPartition_ids();
    if (this_present_partition_ids || that_present_partition_ids) {
      if (!(this_present_partition_ids && that_present_partition_ids))
        return false;
      if (!this.partition_ids.equals(that.partition_ids))
        return false;
    }

    boolean this_present_dest_sid_to_src_sid_without_trans = true && this.isSetDest_sid_to_src_sid_without_trans();
    boolean that_present_dest_sid_to_src_sid_without_trans = true && that.isSetDest_sid_to_src_sid_without_trans();
    if (this_present_dest_sid_to_src_sid_without_trans || that_present_dest_sid_to_src_sid_without_trans) {
      if (!(this_present_dest_sid_to_src_sid_without_trans && that_present_dest_sid_to_src_sid_without_trans))
        return false;
      if (!this.dest_sid_to_src_sid_without_trans.equals(that.dest_sid_to_src_sid_without_trans))
        return false;
    }

    boolean this_present_strict_mode = true && this.isSetStrict_mode();
    boolean that_present_strict_mode = true && that.isSetStrict_mode();
    if (this_present_strict_mode || that_present_strict_mode) {
      if (!(this_present_strict_mode && that_present_strict_mode))
        return false;
      if (this.strict_mode != that.strict_mode)
        return false;
    }

    boolean this_present_multi_column_separator = true && this.isSetMulti_column_separator();
    boolean that_present_multi_column_separator = true && that.isSetMulti_column_separator();
    if (this_present_multi_column_separator || that_present_multi_column_separator) {
      if (!(this_present_multi_column_separator && that_present_multi_column_separator))
        return false;
      if (!this.multi_column_separator.equals(that.multi_column_separator))
        return false;
    }

    boolean this_present_multi_row_delimiter = true && this.isSetMulti_row_delimiter();
    boolean that_present_multi_row_delimiter = true && that.isSetMulti_row_delimiter();
    if (this_present_multi_row_delimiter || that_present_multi_row_delimiter) {
      if (!(this_present_multi_row_delimiter && that_present_multi_row_delimiter))
        return false;
      if (!this.multi_row_delimiter.equals(that.multi_row_delimiter))
        return false;
    }

    boolean this_present_non_blocking_read = true && this.isSetNon_blocking_read();
    boolean that_present_non_blocking_read = true && that.isSetNon_blocking_read();
    if (this_present_non_blocking_read || that_present_non_blocking_read) {
      if (!(this_present_non_blocking_read && that_present_non_blocking_read))
        return false;
      if (this.non_blocking_read != that.non_blocking_read)
        return false;
    }

    boolean this_present_use_broker = true && this.isSetUse_broker();
    boolean that_present_use_broker = true && that.isSetUse_broker();
    if (this_present_use_broker || that_present_use_broker) {
      if (!(this_present_use_broker && that_present_use_broker))
        return false;
      if (this.use_broker != that.use_broker)
        return false;
    }

    boolean this_present_hdfs_read_buffer_size_kb = true && this.isSetHdfs_read_buffer_size_kb();
    boolean that_present_hdfs_read_buffer_size_kb = true && that.isSetHdfs_read_buffer_size_kb();
    if (this_present_hdfs_read_buffer_size_kb || that_present_hdfs_read_buffer_size_kb) {
      if (!(this_present_hdfs_read_buffer_size_kb && that_present_hdfs_read_buffer_size_kb))
        return false;
      if (this.hdfs_read_buffer_size_kb != that.hdfs_read_buffer_size_kb)
        return false;
    }

    boolean this_present_hdfs_properties = true && this.isSetHdfs_properties();
    boolean that_present_hdfs_properties = true && that.isSetHdfs_properties();
    if (this_present_hdfs_properties || that_present_hdfs_properties) {
      if (!(this_present_hdfs_properties && that_present_hdfs_properties))
        return false;
      if (!this.hdfs_properties.equals(that.hdfs_properties))
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_txn_id = true && this.isSetTxn_id();
    boolean that_present_txn_id = true && that.isSetTxn_id();
    if (this_present_txn_id || that_present_txn_id) {
      if (!(this_present_txn_id && that_present_txn_id))
        return false;
      if (this.txn_id != that.txn_id)
        return false;
    }

    boolean this_present_skip_header = true && this.isSetSkip_header();
    boolean that_present_skip_header = true && that.isSetSkip_header();
    if (this_present_skip_header || that_present_skip_header) {
      if (!(this_present_skip_header && that_present_skip_header))
        return false;
      if (this.skip_header != that.skip_header)
        return false;
    }

    boolean this_present_trim_space = true && this.isSetTrim_space();
    boolean that_present_trim_space = true && that.isSetTrim_space();
    if (this_present_trim_space || that_present_trim_space) {
      if (!(this_present_trim_space && that_present_trim_space))
        return false;
      if (this.trim_space != that.trim_space)
        return false;
    }

    boolean this_present_enclose = true && this.isSetEnclose();
    boolean that_present_enclose = true && that.isSetEnclose();
    if (this_present_enclose || that_present_enclose) {
      if (!(this_present_enclose && that_present_enclose))
        return false;
      if (this.enclose != that.enclose)
        return false;
    }

    boolean this_present_escape = true && this.isSetEscape();
    boolean that_present_escape = true && that.isSetEscape();
    if (this_present_escape || that_present_escape) {
      if (!(this_present_escape && that_present_escape))
        return false;
      if (this.escape != that.escape)
        return false;
    }

    boolean this_present_confluent_schema_registry_url = true && this.isSetConfluent_schema_registry_url();
    boolean that_present_confluent_schema_registry_url = true && that.isSetConfluent_schema_registry_url();
    if (this_present_confluent_schema_registry_url || that_present_confluent_schema_registry_url) {
      if (!(this_present_confluent_schema_registry_url && that_present_confluent_schema_registry_url))
        return false;
      if (!this.confluent_schema_registry_url.equals(that.confluent_schema_registry_url))
        return false;
    }

    boolean this_present_json_file_size_limit = true && this.isSetJson_file_size_limit();
    boolean that_present_json_file_size_limit = true && that.isSetJson_file_size_limit();
    if (this_present_json_file_size_limit || that_present_json_file_size_limit) {
      if (!(this_present_json_file_size_limit && that_present_json_file_size_limit))
        return false;
      if (this.json_file_size_limit != that.json_file_size_limit)
        return false;
    }

    boolean this_present_schema_sample_file_count = true && this.isSetSchema_sample_file_count();
    boolean that_present_schema_sample_file_count = true && that.isSetSchema_sample_file_count();
    if (this_present_schema_sample_file_count || that_present_schema_sample_file_count) {
      if (!(this_present_schema_sample_file_count && that_present_schema_sample_file_count))
        return false;
      if (this.schema_sample_file_count != that.schema_sample_file_count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (column_separator);

    hashCode = hashCode * 8191 + (int) (row_delimiter);

    hashCode = hashCode * 8191 + src_tuple_id;

    hashCode = hashCode * 8191 + ((isSetSrc_slot_ids()) ? 131071 : 524287);
    if (isSetSrc_slot_ids())
      hashCode = hashCode * 8191 + src_slot_ids.hashCode();

    hashCode = hashCode * 8191 + dest_tuple_id;

    hashCode = hashCode * 8191 + ((isSetExpr_of_dest_slot()) ? 131071 : 524287);
    if (isSetExpr_of_dest_slot())
      hashCode = hashCode * 8191 + expr_of_dest_slot.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_ids()) ? 131071 : 524287);
    if (isSetPartition_ids())
      hashCode = hashCode * 8191 + partition_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetDest_sid_to_src_sid_without_trans()) ? 131071 : 524287);
    if (isSetDest_sid_to_src_sid_without_trans())
      hashCode = hashCode * 8191 + dest_sid_to_src_sid_without_trans.hashCode();

    hashCode = hashCode * 8191 + ((isSetStrict_mode()) ? 131071 : 524287);
    if (isSetStrict_mode())
      hashCode = hashCode * 8191 + ((strict_mode) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMulti_column_separator()) ? 131071 : 524287);
    if (isSetMulti_column_separator())
      hashCode = hashCode * 8191 + multi_column_separator.hashCode();

    hashCode = hashCode * 8191 + ((isSetMulti_row_delimiter()) ? 131071 : 524287);
    if (isSetMulti_row_delimiter())
      hashCode = hashCode * 8191 + multi_row_delimiter.hashCode();

    hashCode = hashCode * 8191 + ((isSetNon_blocking_read()) ? 131071 : 524287);
    if (isSetNon_blocking_read())
      hashCode = hashCode * 8191 + ((non_blocking_read) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetUse_broker()) ? 131071 : 524287);
    if (isSetUse_broker())
      hashCode = hashCode * 8191 + ((use_broker) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetHdfs_read_buffer_size_kb()) ? 131071 : 524287);
    if (isSetHdfs_read_buffer_size_kb())
      hashCode = hashCode * 8191 + hdfs_read_buffer_size_kb;

    hashCode = hashCode * 8191 + ((isSetHdfs_properties()) ? 131071 : 524287);
    if (isSetHdfs_properties())
      hashCode = hashCode * 8191 + hdfs_properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb_name()) ? 131071 : 524287);
    if (isSetDb_name())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetLabel()) ? 131071 : 524287);
    if (isSetLabel())
      hashCode = hashCode * 8191 + label.hashCode();

    hashCode = hashCode * 8191 + ((isSetTxn_id()) ? 131071 : 524287);
    if (isSetTxn_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txn_id);

    hashCode = hashCode * 8191 + ((isSetSkip_header()) ? 131071 : 524287);
    if (isSetSkip_header())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(skip_header);

    hashCode = hashCode * 8191 + ((isSetTrim_space()) ? 131071 : 524287);
    if (isSetTrim_space())
      hashCode = hashCode * 8191 + ((trim_space) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnclose()) ? 131071 : 524287);
    if (isSetEnclose())
      hashCode = hashCode * 8191 + (int) (enclose);

    hashCode = hashCode * 8191 + ((isSetEscape()) ? 131071 : 524287);
    if (isSetEscape())
      hashCode = hashCode * 8191 + (int) (escape);

    hashCode = hashCode * 8191 + ((isSetConfluent_schema_registry_url()) ? 131071 : 524287);
    if (isSetConfluent_schema_registry_url())
      hashCode = hashCode * 8191 + confluent_schema_registry_url.hashCode();

    hashCode = hashCode * 8191 + ((isSetJson_file_size_limit()) ? 131071 : 524287);
    if (isSetJson_file_size_limit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(json_file_size_limit);

    hashCode = hashCode * 8191 + ((isSetSchema_sample_file_count()) ? 131071 : 524287);
    if (isSetSchema_sample_file_count())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(schema_sample_file_count);

    return hashCode;
  }

  @Override
  public int compareTo(TBrokerScanRangeParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetColumn_separator(), other.isSetColumn_separator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_separator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_separator, other.column_separator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRow_delimiter(), other.isSetRow_delimiter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_delimiter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_delimiter, other.row_delimiter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrc_tuple_id(), other.isSetSrc_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_tuple_id, other.src_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrc_slot_ids(), other.isSetSrc_slot_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_slot_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_slot_ids, other.src_slot_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDest_tuple_id(), other.isSetDest_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDest_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dest_tuple_id, other.dest_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExpr_of_dest_slot(), other.isSetExpr_of_dest_slot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpr_of_dest_slot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expr_of_dest_slot, other.expr_of_dest_slot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProperties(), other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_ids(), other.isSetPartition_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_ids, other.partition_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDest_sid_to_src_sid_without_trans(), other.isSetDest_sid_to_src_sid_without_trans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDest_sid_to_src_sid_without_trans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dest_sid_to_src_sid_without_trans, other.dest_sid_to_src_sid_without_trans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStrict_mode(), other.isSetStrict_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrict_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strict_mode, other.strict_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMulti_column_separator(), other.isSetMulti_column_separator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMulti_column_separator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multi_column_separator, other.multi_column_separator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMulti_row_delimiter(), other.isSetMulti_row_delimiter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMulti_row_delimiter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multi_row_delimiter, other.multi_row_delimiter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNon_blocking_read(), other.isSetNon_blocking_read());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNon_blocking_read()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_blocking_read, other.non_blocking_read);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_broker(), other.isSetUse_broker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_broker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_broker, other.use_broker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHdfs_read_buffer_size_kb(), other.isSetHdfs_read_buffer_size_kb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHdfs_read_buffer_size_kb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hdfs_read_buffer_size_kb, other.hdfs_read_buffer_size_kb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHdfs_properties(), other.isSetHdfs_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHdfs_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hdfs_properties, other.hdfs_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb_name(), other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_name(), other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLabel(), other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxn_id(), other.isSetTxn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_id, other.txn_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSkip_header(), other.isSetSkip_header());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkip_header()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skip_header, other.skip_header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrim_space(), other.isSetTrim_space());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrim_space()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trim_space, other.trim_space);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnclose(), other.isSetEnclose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnclose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enclose, other.enclose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEscape(), other.isSetEscape());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEscape()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.escape, other.escape);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConfluent_schema_registry_url(), other.isSetConfluent_schema_registry_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfluent_schema_registry_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confluent_schema_registry_url, other.confluent_schema_registry_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJson_file_size_limit(), other.isSetJson_file_size_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJson_file_size_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json_file_size_limit, other.json_file_size_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchema_sample_file_count(), other.isSetSchema_sample_file_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_sample_file_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_sample_file_count, other.schema_sample_file_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TBrokerScanRangeParams(");
    boolean first = true;

    sb.append("column_separator:");
    sb.append(this.column_separator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("row_delimiter:");
    sb.append(this.row_delimiter);
    first = false;
    if (!first) sb.append(", ");
    sb.append("src_tuple_id:");
    sb.append(this.src_tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("src_slot_ids:");
    if (this.src_slot_ids == null) {
      sb.append("null");
    } else {
      sb.append(this.src_slot_ids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dest_tuple_id:");
    sb.append(this.dest_tuple_id);
    first = false;
    if (isSetExpr_of_dest_slot()) {
      if (!first) sb.append(", ");
      sb.append("expr_of_dest_slot:");
      if (this.expr_of_dest_slot == null) {
        sb.append("null");
      } else {
        sb.append(this.expr_of_dest_slot);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    if (isSetPartition_ids()) {
      if (!first) sb.append(", ");
      sb.append("partition_ids:");
      if (this.partition_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_ids);
      }
      first = false;
    }
    if (isSetDest_sid_to_src_sid_without_trans()) {
      if (!first) sb.append(", ");
      sb.append("dest_sid_to_src_sid_without_trans:");
      if (this.dest_sid_to_src_sid_without_trans == null) {
        sb.append("null");
      } else {
        sb.append(this.dest_sid_to_src_sid_without_trans);
      }
      first = false;
    }
    if (isSetStrict_mode()) {
      if (!first) sb.append(", ");
      sb.append("strict_mode:");
      sb.append(this.strict_mode);
      first = false;
    }
    if (isSetMulti_column_separator()) {
      if (!first) sb.append(", ");
      sb.append("multi_column_separator:");
      if (this.multi_column_separator == null) {
        sb.append("null");
      } else {
        sb.append(this.multi_column_separator);
      }
      first = false;
    }
    if (isSetMulti_row_delimiter()) {
      if (!first) sb.append(", ");
      sb.append("multi_row_delimiter:");
      if (this.multi_row_delimiter == null) {
        sb.append("null");
      } else {
        sb.append(this.multi_row_delimiter);
      }
      first = false;
    }
    if (isSetNon_blocking_read()) {
      if (!first) sb.append(", ");
      sb.append("non_blocking_read:");
      sb.append(this.non_blocking_read);
      first = false;
    }
    if (isSetUse_broker()) {
      if (!first) sb.append(", ");
      sb.append("use_broker:");
      sb.append(this.use_broker);
      first = false;
    }
    if (isSetHdfs_read_buffer_size_kb()) {
      if (!first) sb.append(", ");
      sb.append("hdfs_read_buffer_size_kb:");
      sb.append(this.hdfs_read_buffer_size_kb);
      first = false;
    }
    if (isSetHdfs_properties()) {
      if (!first) sb.append(", ");
      sb.append("hdfs_properties:");
      if (this.hdfs_properties == null) {
        sb.append("null");
      } else {
        sb.append(this.hdfs_properties);
      }
      first = false;
    }
    if (isSetDb_name()) {
      if (!first) sb.append(", ");
      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetLabel()) {
      if (!first) sb.append(", ");
      sb.append("label:");
      if (this.label == null) {
        sb.append("null");
      } else {
        sb.append(this.label);
      }
      first = false;
    }
    if (isSetTxn_id()) {
      if (!first) sb.append(", ");
      sb.append("txn_id:");
      sb.append(this.txn_id);
      first = false;
    }
    if (isSetSkip_header()) {
      if (!first) sb.append(", ");
      sb.append("skip_header:");
      sb.append(this.skip_header);
      first = false;
    }
    if (isSetTrim_space()) {
      if (!first) sb.append(", ");
      sb.append("trim_space:");
      sb.append(this.trim_space);
      first = false;
    }
    if (isSetEnclose()) {
      if (!first) sb.append(", ");
      sb.append("enclose:");
      sb.append(this.enclose);
      first = false;
    }
    if (isSetEscape()) {
      if (!first) sb.append(", ");
      sb.append("escape:");
      sb.append(this.escape);
      first = false;
    }
    if (isSetConfluent_schema_registry_url()) {
      if (!first) sb.append(", ");
      sb.append("confluent_schema_registry_url:");
      if (this.confluent_schema_registry_url == null) {
        sb.append("null");
      } else {
        sb.append(this.confluent_schema_registry_url);
      }
      first = false;
    }
    if (isSetJson_file_size_limit()) {
      if (!first) sb.append(", ");
      sb.append("json_file_size_limit:");
      sb.append(this.json_file_size_limit);
      first = false;
    }
    if (isSetSchema_sample_file_count()) {
      if (!first) sb.append(", ");
      sb.append("schema_sample_file_count:");
      sb.append(this.schema_sample_file_count);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'column_separator' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'row_delimiter' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'src_tuple_id' because it's a primitive and you chose the non-beans generator.
    if (src_slot_ids == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'src_slot_ids' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'dest_tuple_id' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (hdfs_properties != null) {
      hdfs_properties.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBrokerScanRangeParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TBrokerScanRangeParamsStandardScheme getScheme() {
      return new TBrokerScanRangeParamsStandardScheme();
    }
  }

  private static class TBrokerScanRangeParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TBrokerScanRangeParams> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TBrokerScanRangeParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_SEPARATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.column_separator = iprot.readByte();
              struct.setColumn_separatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROW_DELIMITER
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.row_delimiter = iprot.readByte();
              struct.setRow_delimiterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SRC_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.src_tuple_id = iprot.readI32();
              struct.setSrc_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SRC_SLOT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.src_slot_ids = new java.util.ArrayList<java.lang.Integer>(_list32.size);
                int _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readI32();
                  struct.src_slot_ids.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setSrc_slot_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEST_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dest_tuple_id = iprot.readI32();
              struct.setDest_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPR_OF_DEST_SLOT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map35 = iprot.readMapBegin();
                struct.expr_of_dest_slot = new java.util.HashMap<java.lang.Integer,io.datafibre.fibre.thrift.TExpr>(2*_map35.size);
                int _key36;
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _val37;
                for (int _i38 = 0; _i38 < _map35.size; ++_i38)
                {
                  _key36 = iprot.readI32();
                  _val37 = new io.datafibre.fibre.thrift.TExpr();
                  _val37.read(iprot);
                  struct.expr_of_dest_slot.put(_key36, _val37);
                }
                iprot.readMapEnd();
              }
              struct.setExpr_of_dest_slotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map39 = iprot.readMapBegin();
                struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map39.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key40;
                @org.apache.thrift.annotation.Nullable java.lang.String _val41;
                for (int _i42 = 0; _i42 < _map39.size; ++_i42)
                {
                  _key40 = iprot.readString();
                  _val41 = iprot.readString();
                  struct.properties.put(_key40, _val41);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARTITION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.partition_ids = new java.util.ArrayList<java.lang.Long>(_list43.size);
                long _elem44;
                for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                {
                  _elem44 = iprot.readI64();
                  struct.partition_ids.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setPartition_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEST_SID_TO_SRC_SID_WITHOUT_TRANS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map46 = iprot.readMapBegin();
                struct.dest_sid_to_src_sid_without_trans = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map46.size);
                int _key47;
                int _val48;
                for (int _i49 = 0; _i49 < _map46.size; ++_i49)
                {
                  _key47 = iprot.readI32();
                  _val48 = iprot.readI32();
                  struct.dest_sid_to_src_sid_without_trans.put(_key47, _val48);
                }
                iprot.readMapEnd();
              }
              struct.setDest_sid_to_src_sid_without_transIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STRICT_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.strict_mode = iprot.readBool();
              struct.setStrict_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MULTI_COLUMN_SEPARATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.multi_column_separator = iprot.readString();
              struct.setMulti_column_separatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MULTI_ROW_DELIMITER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.multi_row_delimiter = iprot.readString();
              struct.setMulti_row_delimiterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NON_BLOCKING_READ
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.non_blocking_read = iprot.readBool();
              struct.setNon_blocking_readIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // USE_BROKER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_broker = iprot.readBool();
              struct.setUse_brokerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // HDFS_READ_BUFFER_SIZE_KB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hdfs_read_buffer_size_kb = iprot.readI32();
              struct.setHdfs_read_buffer_size_kbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HDFS_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hdfs_properties = new THdfsProperties();
              struct.hdfs_properties.read(iprot);
              struct.setHdfs_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txn_id = iprot.readI64();
              struct.setTxn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SKIP_HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.skip_header = iprot.readI64();
              struct.setSkip_headerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TRIM_SPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.trim_space = iprot.readBool();
              struct.setTrim_spaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ENCLOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.enclose = iprot.readByte();
              struct.setEncloseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // ESCAPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.escape = iprot.readByte();
              struct.setEscapeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // CONFLUENT_SCHEMA_REGISTRY_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.confluent_schema_registry_url = iprot.readString();
              struct.setConfluent_schema_registry_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // JSON_FILE_SIZE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.json_file_size_limit = iprot.readI64();
              struct.setJson_file_size_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // SCHEMA_SAMPLE_FILE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.schema_sample_file_count = iprot.readI64();
              struct.setSchema_sample_file_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetColumn_separator()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_separator' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRow_delimiter()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'row_delimiter' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSrc_tuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'src_tuple_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDest_tuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dest_tuple_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TBrokerScanRangeParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COLUMN_SEPARATOR_FIELD_DESC);
      oprot.writeByte(struct.column_separator);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROW_DELIMITER_FIELD_DESC);
      oprot.writeByte(struct.row_delimiter);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SRC_TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.src_tuple_id);
      oprot.writeFieldEnd();
      if (struct.src_slot_ids != null) {
        oprot.writeFieldBegin(SRC_SLOT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.src_slot_ids.size()));
          for (int _iter50 : struct.src_slot_ids)
          {
            oprot.writeI32(_iter50);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEST_TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.dest_tuple_id);
      oprot.writeFieldEnd();
      if (struct.expr_of_dest_slot != null) {
        if (struct.isSetExpr_of_dest_slot()) {
          oprot.writeFieldBegin(EXPR_OF_DEST_SLOT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.expr_of_dest_slot.size()));
            for (java.util.Map.Entry<java.lang.Integer, io.datafibre.fibre.thrift.TExpr> _iter51 : struct.expr_of_dest_slot.entrySet())
            {
              oprot.writeI32(_iter51.getKey());
              _iter51.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter52 : struct.properties.entrySet())
            {
              oprot.writeString(_iter52.getKey());
              oprot.writeString(_iter52.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_ids != null) {
        if (struct.isSetPartition_ids()) {
          oprot.writeFieldBegin(PARTITION_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.partition_ids.size()));
            for (long _iter53 : struct.partition_ids)
            {
              oprot.writeI64(_iter53);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.dest_sid_to_src_sid_without_trans != null) {
        if (struct.isSetDest_sid_to_src_sid_without_trans()) {
          oprot.writeFieldBegin(DEST_SID_TO_SRC_SID_WITHOUT_TRANS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.dest_sid_to_src_sid_without_trans.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter54 : struct.dest_sid_to_src_sid_without_trans.entrySet())
            {
              oprot.writeI32(_iter54.getKey());
              oprot.writeI32(_iter54.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStrict_mode()) {
        oprot.writeFieldBegin(STRICT_MODE_FIELD_DESC);
        oprot.writeBool(struct.strict_mode);
        oprot.writeFieldEnd();
      }
      if (struct.multi_column_separator != null) {
        if (struct.isSetMulti_column_separator()) {
          oprot.writeFieldBegin(MULTI_COLUMN_SEPARATOR_FIELD_DESC);
          oprot.writeString(struct.multi_column_separator);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multi_row_delimiter != null) {
        if (struct.isSetMulti_row_delimiter()) {
          oprot.writeFieldBegin(MULTI_ROW_DELIMITER_FIELD_DESC);
          oprot.writeString(struct.multi_row_delimiter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNon_blocking_read()) {
        oprot.writeFieldBegin(NON_BLOCKING_READ_FIELD_DESC);
        oprot.writeBool(struct.non_blocking_read);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUse_broker()) {
        oprot.writeFieldBegin(USE_BROKER_FIELD_DESC);
        oprot.writeBool(struct.use_broker);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHdfs_read_buffer_size_kb()) {
        oprot.writeFieldBegin(HDFS_READ_BUFFER_SIZE_KB_FIELD_DESC);
        oprot.writeI32(struct.hdfs_read_buffer_size_kb);
        oprot.writeFieldEnd();
      }
      if (struct.hdfs_properties != null) {
        if (struct.isSetHdfs_properties()) {
          oprot.writeFieldBegin(HDFS_PROPERTIES_FIELD_DESC);
          struct.hdfs_properties.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db_name != null) {
        if (struct.isSetDb_name()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.db_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.label != null) {
        if (struct.isSetLabel()) {
          oprot.writeFieldBegin(LABEL_FIELD_DESC);
          oprot.writeString(struct.label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTxn_id()) {
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txn_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSkip_header()) {
        oprot.writeFieldBegin(SKIP_HEADER_FIELD_DESC);
        oprot.writeI64(struct.skip_header);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTrim_space()) {
        oprot.writeFieldBegin(TRIM_SPACE_FIELD_DESC);
        oprot.writeBool(struct.trim_space);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnclose()) {
        oprot.writeFieldBegin(ENCLOSE_FIELD_DESC);
        oprot.writeByte(struct.enclose);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEscape()) {
        oprot.writeFieldBegin(ESCAPE_FIELD_DESC);
        oprot.writeByte(struct.escape);
        oprot.writeFieldEnd();
      }
      if (struct.confluent_schema_registry_url != null) {
        if (struct.isSetConfluent_schema_registry_url()) {
          oprot.writeFieldBegin(CONFLUENT_SCHEMA_REGISTRY_URL_FIELD_DESC);
          oprot.writeString(struct.confluent_schema_registry_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetJson_file_size_limit()) {
        oprot.writeFieldBegin(JSON_FILE_SIZE_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.json_file_size_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSchema_sample_file_count()) {
        oprot.writeFieldBegin(SCHEMA_SAMPLE_FILE_COUNT_FIELD_DESC);
        oprot.writeI64(struct.schema_sample_file_count);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBrokerScanRangeParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TBrokerScanRangeParamsTupleScheme getScheme() {
      return new TBrokerScanRangeParamsTupleScheme();
    }
  }

  private static class TBrokerScanRangeParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TBrokerScanRangeParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBrokerScanRangeParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeByte(struct.column_separator);
      oprot.writeByte(struct.row_delimiter);
      oprot.writeI32(struct.src_tuple_id);
      {
        oprot.writeI32(struct.src_slot_ids.size());
        for (int _iter55 : struct.src_slot_ids)
        {
          oprot.writeI32(_iter55);
        }
      }
      oprot.writeI32(struct.dest_tuple_id);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetExpr_of_dest_slot()) {
        optionals.set(0);
      }
      if (struct.isSetProperties()) {
        optionals.set(1);
      }
      if (struct.isSetPartition_ids()) {
        optionals.set(2);
      }
      if (struct.isSetDest_sid_to_src_sid_without_trans()) {
        optionals.set(3);
      }
      if (struct.isSetStrict_mode()) {
        optionals.set(4);
      }
      if (struct.isSetMulti_column_separator()) {
        optionals.set(5);
      }
      if (struct.isSetMulti_row_delimiter()) {
        optionals.set(6);
      }
      if (struct.isSetNon_blocking_read()) {
        optionals.set(7);
      }
      if (struct.isSetUse_broker()) {
        optionals.set(8);
      }
      if (struct.isSetHdfs_read_buffer_size_kb()) {
        optionals.set(9);
      }
      if (struct.isSetHdfs_properties()) {
        optionals.set(10);
      }
      if (struct.isSetDb_name()) {
        optionals.set(11);
      }
      if (struct.isSetTable_name()) {
        optionals.set(12);
      }
      if (struct.isSetLabel()) {
        optionals.set(13);
      }
      if (struct.isSetTxn_id()) {
        optionals.set(14);
      }
      if (struct.isSetSkip_header()) {
        optionals.set(15);
      }
      if (struct.isSetTrim_space()) {
        optionals.set(16);
      }
      if (struct.isSetEnclose()) {
        optionals.set(17);
      }
      if (struct.isSetEscape()) {
        optionals.set(18);
      }
      if (struct.isSetConfluent_schema_registry_url()) {
        optionals.set(19);
      }
      if (struct.isSetJson_file_size_limit()) {
        optionals.set(20);
      }
      if (struct.isSetSchema_sample_file_count()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetExpr_of_dest_slot()) {
        {
          oprot.writeI32(struct.expr_of_dest_slot.size());
          for (java.util.Map.Entry<java.lang.Integer, io.datafibre.fibre.thrift.TExpr> _iter56 : struct.expr_of_dest_slot.entrySet())
          {
            oprot.writeI32(_iter56.getKey());
            _iter56.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter57 : struct.properties.entrySet())
          {
            oprot.writeString(_iter57.getKey());
            oprot.writeString(_iter57.getValue());
          }
        }
      }
      if (struct.isSetPartition_ids()) {
        {
          oprot.writeI32(struct.partition_ids.size());
          for (long _iter58 : struct.partition_ids)
          {
            oprot.writeI64(_iter58);
          }
        }
      }
      if (struct.isSetDest_sid_to_src_sid_without_trans()) {
        {
          oprot.writeI32(struct.dest_sid_to_src_sid_without_trans.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter59 : struct.dest_sid_to_src_sid_without_trans.entrySet())
          {
            oprot.writeI32(_iter59.getKey());
            oprot.writeI32(_iter59.getValue());
          }
        }
      }
      if (struct.isSetStrict_mode()) {
        oprot.writeBool(struct.strict_mode);
      }
      if (struct.isSetMulti_column_separator()) {
        oprot.writeString(struct.multi_column_separator);
      }
      if (struct.isSetMulti_row_delimiter()) {
        oprot.writeString(struct.multi_row_delimiter);
      }
      if (struct.isSetNon_blocking_read()) {
        oprot.writeBool(struct.non_blocking_read);
      }
      if (struct.isSetUse_broker()) {
        oprot.writeBool(struct.use_broker);
      }
      if (struct.isSetHdfs_read_buffer_size_kb()) {
        oprot.writeI32(struct.hdfs_read_buffer_size_kb);
      }
      if (struct.isSetHdfs_properties()) {
        struct.hdfs_properties.write(oprot);
      }
      if (struct.isSetDb_name()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
      if (struct.isSetTxn_id()) {
        oprot.writeI64(struct.txn_id);
      }
      if (struct.isSetSkip_header()) {
        oprot.writeI64(struct.skip_header);
      }
      if (struct.isSetTrim_space()) {
        oprot.writeBool(struct.trim_space);
      }
      if (struct.isSetEnclose()) {
        oprot.writeByte(struct.enclose);
      }
      if (struct.isSetEscape()) {
        oprot.writeByte(struct.escape);
      }
      if (struct.isSetConfluent_schema_registry_url()) {
        oprot.writeString(struct.confluent_schema_registry_url);
      }
      if (struct.isSetJson_file_size_limit()) {
        oprot.writeI64(struct.json_file_size_limit);
      }
      if (struct.isSetSchema_sample_file_count()) {
        oprot.writeI64(struct.schema_sample_file_count);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBrokerScanRangeParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.column_separator = iprot.readByte();
      struct.setColumn_separatorIsSet(true);
      struct.row_delimiter = iprot.readByte();
      struct.setRow_delimiterIsSet(true);
      struct.src_tuple_id = iprot.readI32();
      struct.setSrc_tuple_idIsSet(true);
      {
        org.apache.thrift.protocol.TList _list60 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
        struct.src_slot_ids = new java.util.ArrayList<java.lang.Integer>(_list60.size);
        int _elem61;
        for (int _i62 = 0; _i62 < _list60.size; ++_i62)
        {
          _elem61 = iprot.readI32();
          struct.src_slot_ids.add(_elem61);
        }
      }
      struct.setSrc_slot_idsIsSet(true);
      struct.dest_tuple_id = iprot.readI32();
      struct.setDest_tuple_idIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map63 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT); 
          struct.expr_of_dest_slot = new java.util.HashMap<java.lang.Integer,io.datafibre.fibre.thrift.TExpr>(2*_map63.size);
          int _key64;
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _val65;
          for (int _i66 = 0; _i66 < _map63.size; ++_i66)
          {
            _key64 = iprot.readI32();
            _val65 = new io.datafibre.fibre.thrift.TExpr();
            _val65.read(iprot);
            struct.expr_of_dest_slot.put(_key64, _val65);
          }
        }
        struct.setExpr_of_dest_slotIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map67 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map67.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key68;
          @org.apache.thrift.annotation.Nullable java.lang.String _val69;
          for (int _i70 = 0; _i70 < _map67.size; ++_i70)
          {
            _key68 = iprot.readString();
            _val69 = iprot.readString();
            struct.properties.put(_key68, _val69);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list71 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.partition_ids = new java.util.ArrayList<java.lang.Long>(_list71.size);
          long _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = iprot.readI64();
            struct.partition_ids.add(_elem72);
          }
        }
        struct.setPartition_idsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map74 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32); 
          struct.dest_sid_to_src_sid_without_trans = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map74.size);
          int _key75;
          int _val76;
          for (int _i77 = 0; _i77 < _map74.size; ++_i77)
          {
            _key75 = iprot.readI32();
            _val76 = iprot.readI32();
            struct.dest_sid_to_src_sid_without_trans.put(_key75, _val76);
          }
        }
        struct.setDest_sid_to_src_sid_without_transIsSet(true);
      }
      if (incoming.get(4)) {
        struct.strict_mode = iprot.readBool();
        struct.setStrict_modeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.multi_column_separator = iprot.readString();
        struct.setMulti_column_separatorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.multi_row_delimiter = iprot.readString();
        struct.setMulti_row_delimiterIsSet(true);
      }
      if (incoming.get(7)) {
        struct.non_blocking_read = iprot.readBool();
        struct.setNon_blocking_readIsSet(true);
      }
      if (incoming.get(8)) {
        struct.use_broker = iprot.readBool();
        struct.setUse_brokerIsSet(true);
      }
      if (incoming.get(9)) {
        struct.hdfs_read_buffer_size_kb = iprot.readI32();
        struct.setHdfs_read_buffer_size_kbIsSet(true);
      }
      if (incoming.get(10)) {
        struct.hdfs_properties = new THdfsProperties();
        struct.hdfs_properties.read(iprot);
        struct.setHdfs_propertiesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.db_name = iprot.readString();
        struct.setDb_nameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(14)) {
        struct.txn_id = iprot.readI64();
        struct.setTxn_idIsSet(true);
      }
      if (incoming.get(15)) {
        struct.skip_header = iprot.readI64();
        struct.setSkip_headerIsSet(true);
      }
      if (incoming.get(16)) {
        struct.trim_space = iprot.readBool();
        struct.setTrim_spaceIsSet(true);
      }
      if (incoming.get(17)) {
        struct.enclose = iprot.readByte();
        struct.setEncloseIsSet(true);
      }
      if (incoming.get(18)) {
        struct.escape = iprot.readByte();
        struct.setEscapeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.confluent_schema_registry_url = iprot.readString();
        struct.setConfluent_schema_registry_urlIsSet(true);
      }
      if (incoming.get(20)) {
        struct.json_file_size_limit = iprot.readI64();
        struct.setJson_file_size_limitIsSet(true);
      }
      if (incoming.get(21)) {
        struct.schema_sample_file_count = iprot.readI64();
        struct.setSchema_sample_file_countIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

