/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TResultFileSinkOptions implements org.apache.thrift.TBase<TResultFileSinkOptions, TResultFileSinkOptions._Fields>, java.io.Serializable, Cloneable, Comparable<TResultFileSinkOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResultFileSinkOptions");

  private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("file_path", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("file_format", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("column_separator", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ROW_DELIMITER_FIELD_DESC = new org.apache.thrift.protocol.TField("row_delimiter", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_FILE_SIZE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("max_file_size_bytes", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField BROKER_ADDRESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("broker_addresses", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField BROKER_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("broker_properties", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField USE_BROKER_FIELD_DESC = new org.apache.thrift.protocol.TField("use_broker", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField HDFS_WRITE_BUFFER_SIZE_KB_FIELD_DESC = new org.apache.thrift.protocol.TField("hdfs_write_buffer_size_kb", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField HDFS_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("hdfs_properties", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField PARQUET_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("parquet_options", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField FILE_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("file_column_names", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TResultFileSinkOptionsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TResultFileSinkOptionsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String file_path; // required
  /**
   * 
   * @see TFileFormatType
   */
  public @org.apache.thrift.annotation.Nullable TFileFormatType file_format; // required
  public @org.apache.thrift.annotation.Nullable String column_separator; // optional
  public @org.apache.thrift.annotation.Nullable String row_delimiter; // optional
  public long max_file_size_bytes; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TNetworkAddress> broker_addresses; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<String, String> broker_properties; // optional
  public boolean use_broker; // optional
  public int hdfs_write_buffer_size_kb; // optional
  public @org.apache.thrift.annotation.Nullable THdfsProperties hdfs_properties; // optional
  public @org.apache.thrift.annotation.Nullable TParquetOptions parquet_options; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<String> file_column_names; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_PATH((short)1, "file_path"),
    /**
     * 
     * @see TFileFormatType
     */
    FILE_FORMAT((short)2, "file_format"),
    COLUMN_SEPARATOR((short)3, "column_separator"),
    ROW_DELIMITER((short)4, "row_delimiter"),
    MAX_FILE_SIZE_BYTES((short)5, "max_file_size_bytes"),
    BROKER_ADDRESSES((short)6, "broker_addresses"),
    BROKER_PROPERTIES((short)7, "broker_properties"),
    USE_BROKER((short)8, "use_broker"),
    HDFS_WRITE_BUFFER_SIZE_KB((short)9, "hdfs_write_buffer_size_kb"),
    HDFS_PROPERTIES((short)10, "hdfs_properties"),
    PARQUET_OPTIONS((short)11, "parquet_options"),
    FILE_COLUMN_NAMES((short)12, "file_column_names");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_PATH
          return FILE_PATH;
        case 2: // FILE_FORMAT
          return FILE_FORMAT;
        case 3: // COLUMN_SEPARATOR
          return COLUMN_SEPARATOR;
        case 4: // ROW_DELIMITER
          return ROW_DELIMITER;
        case 5: // MAX_FILE_SIZE_BYTES
          return MAX_FILE_SIZE_BYTES;
        case 6: // BROKER_ADDRESSES
          return BROKER_ADDRESSES;
        case 7: // BROKER_PROPERTIES
          return BROKER_PROPERTIES;
        case 8: // USE_BROKER
          return USE_BROKER;
        case 9: // HDFS_WRITE_BUFFER_SIZE_KB
          return HDFS_WRITE_BUFFER_SIZE_KB;
        case 10: // HDFS_PROPERTIES
          return HDFS_PROPERTIES;
        case 11: // PARQUET_OPTIONS
          return PARQUET_OPTIONS;
        case 12: // FILE_COLUMN_NAMES
          return FILE_COLUMN_NAMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAX_FILE_SIZE_BYTES_ISSET_ID = 0;
  private static final int __USE_BROKER_ISSET_ID = 1;
  private static final int __HDFS_WRITE_BUFFER_SIZE_KB_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COLUMN_SEPARATOR,_Fields.ROW_DELIMITER,_Fields.MAX_FILE_SIZE_BYTES,_Fields.BROKER_ADDRESSES,_Fields.BROKER_PROPERTIES,_Fields.USE_BROKER,_Fields.HDFS_WRITE_BUFFER_SIZE_KB,_Fields.HDFS_PROPERTIES,_Fields.PARQUET_OPTIONS,_Fields.FILE_COLUMN_NAMES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("file_path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("file_format", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFileFormatType.class)));
    tmpMap.put(_Fields.COLUMN_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("column_separator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROW_DELIMITER, new org.apache.thrift.meta_data.FieldMetaData("row_delimiter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_FILE_SIZE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("max_file_size_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BROKER_ADDRESSES, new org.apache.thrift.meta_data.FieldMetaData("broker_addresses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNetworkAddress.class))));
    tmpMap.put(_Fields.BROKER_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("broker_properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USE_BROKER, new org.apache.thrift.meta_data.FieldMetaData("use_broker", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HDFS_WRITE_BUFFER_SIZE_KB, new org.apache.thrift.meta_data.FieldMetaData("hdfs_write_buffer_size_kb", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HDFS_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("hdfs_properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsProperties.class)));
    tmpMap.put(_Fields.PARQUET_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("parquet_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TParquetOptions.class)));
    tmpMap.put(_Fields.FILE_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("file_column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResultFileSinkOptions.class, metaDataMap);
  }

  public TResultFileSinkOptions() {
    this.hdfs_write_buffer_size_kb = 0;

  }

  public TResultFileSinkOptions(
    String file_path,
    TFileFormatType file_format)
  {
    this();
    this.file_path = file_path;
    this.file_format = file_format;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResultFileSinkOptions(TResultFileSinkOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFile_path()) {
      this.file_path = other.file_path;
    }
    if (other.isSetFile_format()) {
      this.file_format = other.file_format;
    }
    if (other.isSetColumn_separator()) {
      this.column_separator = other.column_separator;
    }
    if (other.isSetRow_delimiter()) {
      this.row_delimiter = other.row_delimiter;
    }
    this.max_file_size_bytes = other.max_file_size_bytes;
    if (other.isSetBroker_addresses()) {
      java.util.List<TNetworkAddress> __this__broker_addresses = new java.util.ArrayList<TNetworkAddress>(other.broker_addresses.size());
      for (TNetworkAddress other_element : other.broker_addresses) {
        __this__broker_addresses.add(new TNetworkAddress(other_element));
      }
      this.broker_addresses = __this__broker_addresses;
    }
    if (other.isSetBroker_properties()) {
      java.util.Map<String, String> __this__broker_properties = new java.util.HashMap<String, String>(other.broker_properties);
      this.broker_properties = __this__broker_properties;
    }
    this.use_broker = other.use_broker;
    this.hdfs_write_buffer_size_kb = other.hdfs_write_buffer_size_kb;
    if (other.isSetHdfs_properties()) {
      this.hdfs_properties = new THdfsProperties(other.hdfs_properties);
    }
    if (other.isSetParquet_options()) {
      this.parquet_options = new TParquetOptions(other.parquet_options);
    }
    if (other.isSetFile_column_names()) {
      java.util.List<String> __this__file_column_names = new java.util.ArrayList<String>(other.file_column_names);
      this.file_column_names = __this__file_column_names;
    }
  }

  @Override
  public TResultFileSinkOptions deepCopy() {
    return new TResultFileSinkOptions(this);
  }

  @Override
  public void clear() {
    this.file_path = null;
    this.file_format = null;
    this.column_separator = null;
    this.row_delimiter = null;
    setMax_file_size_bytesIsSet(false);
    this.max_file_size_bytes = 0;
    this.broker_addresses = null;
    this.broker_properties = null;
    setUse_brokerIsSet(false);
    this.use_broker = false;
    this.hdfs_write_buffer_size_kb = 0;

    this.hdfs_properties = null;
    this.parquet_options = null;
    this.file_column_names = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getFile_path() {
    return this.file_path;
  }

  public TResultFileSinkOptions setFile_path(@org.apache.thrift.annotation.Nullable String file_path) {
    this.file_path = file_path;
    return this;
  }

  public void unsetFile_path() {
    this.file_path = null;
  }

  /** Returns true if field file_path is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_path() {
    return this.file_path != null;
  }

  public void setFile_pathIsSet(boolean value) {
    if (!value) {
      this.file_path = null;
    }
  }

  /**
   * 
   * @see TFileFormatType
   */
  @org.apache.thrift.annotation.Nullable
  public TFileFormatType getFile_format() {
    return this.file_format;
  }

  /**
   * 
   * @see TFileFormatType
   */
  public TResultFileSinkOptions setFile_format(@org.apache.thrift.annotation.Nullable TFileFormatType file_format) {
    this.file_format = file_format;
    return this;
  }

  public void unsetFile_format() {
    this.file_format = null;
  }

  /** Returns true if field file_format is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_format() {
    return this.file_format != null;
  }

  public void setFile_formatIsSet(boolean value) {
    if (!value) {
      this.file_format = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getColumn_separator() {
    return this.column_separator;
  }

  public TResultFileSinkOptions setColumn_separator(@org.apache.thrift.annotation.Nullable String column_separator) {
    this.column_separator = column_separator;
    return this;
  }

  public void unsetColumn_separator() {
    this.column_separator = null;
  }

  /** Returns true if field column_separator is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_separator() {
    return this.column_separator != null;
  }

  public void setColumn_separatorIsSet(boolean value) {
    if (!value) {
      this.column_separator = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getRow_delimiter() {
    return this.row_delimiter;
  }

  public TResultFileSinkOptions setRow_delimiter(@org.apache.thrift.annotation.Nullable String row_delimiter) {
    this.row_delimiter = row_delimiter;
    return this;
  }

  public void unsetRow_delimiter() {
    this.row_delimiter = null;
  }

  /** Returns true if field row_delimiter is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_delimiter() {
    return this.row_delimiter != null;
  }

  public void setRow_delimiterIsSet(boolean value) {
    if (!value) {
      this.row_delimiter = null;
    }
  }

  public long getMax_file_size_bytes() {
    return this.max_file_size_bytes;
  }

  public TResultFileSinkOptions setMax_file_size_bytes(long max_file_size_bytes) {
    this.max_file_size_bytes = max_file_size_bytes;
    setMax_file_size_bytesIsSet(true);
    return this;
  }

  public void unsetMax_file_size_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_FILE_SIZE_BYTES_ISSET_ID);
  }

  /** Returns true if field max_file_size_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_file_size_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_FILE_SIZE_BYTES_ISSET_ID);
  }

  public void setMax_file_size_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_FILE_SIZE_BYTES_ISSET_ID, value);
  }

  public int getBroker_addressesSize() {
    return (this.broker_addresses == null) ? 0 : this.broker_addresses.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TNetworkAddress> getBroker_addressesIterator() {
    return (this.broker_addresses == null) ? null : this.broker_addresses.iterator();
  }

  public void addToBroker_addresses(TNetworkAddress elem) {
    if (this.broker_addresses == null) {
      this.broker_addresses = new java.util.ArrayList<TNetworkAddress>();
    }
    this.broker_addresses.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TNetworkAddress> getBroker_addresses() {
    return this.broker_addresses;
  }

  public TResultFileSinkOptions setBroker_addresses(@org.apache.thrift.annotation.Nullable java.util.List<TNetworkAddress> broker_addresses) {
    this.broker_addresses = broker_addresses;
    return this;
  }

  public void unsetBroker_addresses() {
    this.broker_addresses = null;
  }

  /** Returns true if field broker_addresses is set (has been assigned a value) and false otherwise */
  public boolean isSetBroker_addresses() {
    return this.broker_addresses != null;
  }

  public void setBroker_addressesIsSet(boolean value) {
    if (!value) {
      this.broker_addresses = null;
    }
  }

  public int getBroker_propertiesSize() {
    return (this.broker_properties == null) ? 0 : this.broker_properties.size();
  }

  public void putToBroker_properties(String key, String val) {
    if (this.broker_properties == null) {
      this.broker_properties = new java.util.HashMap<String, String>();
    }
    this.broker_properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<String, String> getBroker_properties() {
    return this.broker_properties;
  }

  public TResultFileSinkOptions setBroker_properties(@org.apache.thrift.annotation.Nullable java.util.Map<String, String> broker_properties) {
    this.broker_properties = broker_properties;
    return this;
  }

  public void unsetBroker_properties() {
    this.broker_properties = null;
  }

  /** Returns true if field broker_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetBroker_properties() {
    return this.broker_properties != null;
  }

  public void setBroker_propertiesIsSet(boolean value) {
    if (!value) {
      this.broker_properties = null;
    }
  }

  public boolean isUse_broker() {
    return this.use_broker;
  }

  public TResultFileSinkOptions setUse_broker(boolean use_broker) {
    this.use_broker = use_broker;
    setUse_brokerIsSet(true);
    return this;
  }

  public void unsetUse_broker() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_BROKER_ISSET_ID);
  }

  /** Returns true if field use_broker is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_broker() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_BROKER_ISSET_ID);
  }

  public void setUse_brokerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_BROKER_ISSET_ID, value);
  }

  public int getHdfs_write_buffer_size_kb() {
    return this.hdfs_write_buffer_size_kb;
  }

  public TResultFileSinkOptions setHdfs_write_buffer_size_kb(int hdfs_write_buffer_size_kb) {
    this.hdfs_write_buffer_size_kb = hdfs_write_buffer_size_kb;
    setHdfs_write_buffer_size_kbIsSet(true);
    return this;
  }

  public void unsetHdfs_write_buffer_size_kb() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HDFS_WRITE_BUFFER_SIZE_KB_ISSET_ID);
  }

  /** Returns true if field hdfs_write_buffer_size_kb is set (has been assigned a value) and false otherwise */
  public boolean isSetHdfs_write_buffer_size_kb() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HDFS_WRITE_BUFFER_SIZE_KB_ISSET_ID);
  }

  public void setHdfs_write_buffer_size_kbIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HDFS_WRITE_BUFFER_SIZE_KB_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public THdfsProperties getHdfs_properties() {
    return this.hdfs_properties;
  }

  public TResultFileSinkOptions setHdfs_properties(@org.apache.thrift.annotation.Nullable THdfsProperties hdfs_properties) {
    this.hdfs_properties = hdfs_properties;
    return this;
  }

  public void unsetHdfs_properties() {
    this.hdfs_properties = null;
  }

  /** Returns true if field hdfs_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetHdfs_properties() {
    return this.hdfs_properties != null;
  }

  public void setHdfs_propertiesIsSet(boolean value) {
    if (!value) {
      this.hdfs_properties = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TParquetOptions getParquet_options() {
    return this.parquet_options;
  }

  public TResultFileSinkOptions setParquet_options(@org.apache.thrift.annotation.Nullable TParquetOptions parquet_options) {
    this.parquet_options = parquet_options;
    return this;
  }

  public void unsetParquet_options() {
    this.parquet_options = null;
  }

  /** Returns true if field parquet_options is set (has been assigned a value) and false otherwise */
  public boolean isSetParquet_options() {
    return this.parquet_options != null;
  }

  public void setParquet_optionsIsSet(boolean value) {
    if (!value) {
      this.parquet_options = null;
    }
  }

  public int getFile_column_namesSize() {
    return (this.file_column_names == null) ? 0 : this.file_column_names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<String> getFile_column_namesIterator() {
    return (this.file_column_names == null) ? null : this.file_column_names.iterator();
  }

  public void addToFile_column_names(String elem) {
    if (this.file_column_names == null) {
      this.file_column_names = new java.util.ArrayList<String>();
    }
    this.file_column_names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<String> getFile_column_names() {
    return this.file_column_names;
  }

  public TResultFileSinkOptions setFile_column_names(@org.apache.thrift.annotation.Nullable java.util.List<String> file_column_names) {
    this.file_column_names = file_column_names;
    return this;
  }

  public void unsetFile_column_names() {
    this.file_column_names = null;
  }

  /** Returns true if field file_column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_column_names() {
    return this.file_column_names != null;
  }

  public void setFile_column_namesIsSet(boolean value) {
    if (!value) {
      this.file_column_names = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case FILE_PATH:
      if (value == null) {
        unsetFile_path();
      } else {
        setFile_path((String)value);
      }
      break;

    case FILE_FORMAT:
      if (value == null) {
        unsetFile_format();
      } else {
        setFile_format((TFileFormatType)value);
      }
      break;

    case COLUMN_SEPARATOR:
      if (value == null) {
        unsetColumn_separator();
      } else {
        setColumn_separator((String)value);
      }
      break;

    case ROW_DELIMITER:
      if (value == null) {
        unsetRow_delimiter();
      } else {
        setRow_delimiter((String)value);
      }
      break;

    case MAX_FILE_SIZE_BYTES:
      if (value == null) {
        unsetMax_file_size_bytes();
      } else {
        setMax_file_size_bytes((Long)value);
      }
      break;

    case BROKER_ADDRESSES:
      if (value == null) {
        unsetBroker_addresses();
      } else {
        setBroker_addresses((java.util.List<TNetworkAddress>)value);
      }
      break;

    case BROKER_PROPERTIES:
      if (value == null) {
        unsetBroker_properties();
      } else {
        setBroker_properties((java.util.Map<String, String>)value);
      }
      break;

    case USE_BROKER:
      if (value == null) {
        unsetUse_broker();
      } else {
        setUse_broker((Boolean)value);
      }
      break;

    case HDFS_WRITE_BUFFER_SIZE_KB:
      if (value == null) {
        unsetHdfs_write_buffer_size_kb();
      } else {
        setHdfs_write_buffer_size_kb((Integer)value);
      }
      break;

    case HDFS_PROPERTIES:
      if (value == null) {
        unsetHdfs_properties();
      } else {
        setHdfs_properties((THdfsProperties)value);
      }
      break;

    case PARQUET_OPTIONS:
      if (value == null) {
        unsetParquet_options();
      } else {
        setParquet_options((TParquetOptions)value);
      }
      break;

    case FILE_COLUMN_NAMES:
      if (value == null) {
        unsetFile_column_names();
      } else {
        setFile_column_names((java.util.List<String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_PATH:
      return getFile_path();

    case FILE_FORMAT:
      return getFile_format();

    case COLUMN_SEPARATOR:
      return getColumn_separator();

    case ROW_DELIMITER:
      return getRow_delimiter();

    case MAX_FILE_SIZE_BYTES:
      return getMax_file_size_bytes();

    case BROKER_ADDRESSES:
      return getBroker_addresses();

    case BROKER_PROPERTIES:
      return getBroker_properties();

    case USE_BROKER:
      return isUse_broker();

    case HDFS_WRITE_BUFFER_SIZE_KB:
      return getHdfs_write_buffer_size_kb();

    case HDFS_PROPERTIES:
      return getHdfs_properties();

    case PARQUET_OPTIONS:
      return getParquet_options();

    case FILE_COLUMN_NAMES:
      return getFile_column_names();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILE_PATH:
      return isSetFile_path();
    case FILE_FORMAT:
      return isSetFile_format();
    case COLUMN_SEPARATOR:
      return isSetColumn_separator();
    case ROW_DELIMITER:
      return isSetRow_delimiter();
    case MAX_FILE_SIZE_BYTES:
      return isSetMax_file_size_bytes();
    case BROKER_ADDRESSES:
      return isSetBroker_addresses();
    case BROKER_PROPERTIES:
      return isSetBroker_properties();
    case USE_BROKER:
      return isSetUse_broker();
    case HDFS_WRITE_BUFFER_SIZE_KB:
      return isSetHdfs_write_buffer_size_kb();
    case HDFS_PROPERTIES:
      return isSetHdfs_properties();
    case PARQUET_OPTIONS:
      return isSetParquet_options();
    case FILE_COLUMN_NAMES:
      return isSetFile_column_names();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof TResultFileSinkOptions)
      return this.equals((TResultFileSinkOptions)that);
    return false;
  }

  public boolean equals(TResultFileSinkOptions that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_file_path = true && this.isSetFile_path();
    boolean that_present_file_path = true && that.isSetFile_path();
    if (this_present_file_path || that_present_file_path) {
      if (!(this_present_file_path && that_present_file_path))
        return false;
      if (!this.file_path.equals(that.file_path))
        return false;
    }

    boolean this_present_file_format = true && this.isSetFile_format();
    boolean that_present_file_format = true && that.isSetFile_format();
    if (this_present_file_format || that_present_file_format) {
      if (!(this_present_file_format && that_present_file_format))
        return false;
      if (!this.file_format.equals(that.file_format))
        return false;
    }

    boolean this_present_column_separator = true && this.isSetColumn_separator();
    boolean that_present_column_separator = true && that.isSetColumn_separator();
    if (this_present_column_separator || that_present_column_separator) {
      if (!(this_present_column_separator && that_present_column_separator))
        return false;
      if (!this.column_separator.equals(that.column_separator))
        return false;
    }

    boolean this_present_row_delimiter = true && this.isSetRow_delimiter();
    boolean that_present_row_delimiter = true && that.isSetRow_delimiter();
    if (this_present_row_delimiter || that_present_row_delimiter) {
      if (!(this_present_row_delimiter && that_present_row_delimiter))
        return false;
      if (!this.row_delimiter.equals(that.row_delimiter))
        return false;
    }

    boolean this_present_max_file_size_bytes = true && this.isSetMax_file_size_bytes();
    boolean that_present_max_file_size_bytes = true && that.isSetMax_file_size_bytes();
    if (this_present_max_file_size_bytes || that_present_max_file_size_bytes) {
      if (!(this_present_max_file_size_bytes && that_present_max_file_size_bytes))
        return false;
      if (this.max_file_size_bytes != that.max_file_size_bytes)
        return false;
    }

    boolean this_present_broker_addresses = true && this.isSetBroker_addresses();
    boolean that_present_broker_addresses = true && that.isSetBroker_addresses();
    if (this_present_broker_addresses || that_present_broker_addresses) {
      if (!(this_present_broker_addresses && that_present_broker_addresses))
        return false;
      if (!this.broker_addresses.equals(that.broker_addresses))
        return false;
    }

    boolean this_present_broker_properties = true && this.isSetBroker_properties();
    boolean that_present_broker_properties = true && that.isSetBroker_properties();
    if (this_present_broker_properties || that_present_broker_properties) {
      if (!(this_present_broker_properties && that_present_broker_properties))
        return false;
      if (!this.broker_properties.equals(that.broker_properties))
        return false;
    }

    boolean this_present_use_broker = true && this.isSetUse_broker();
    boolean that_present_use_broker = true && that.isSetUse_broker();
    if (this_present_use_broker || that_present_use_broker) {
      if (!(this_present_use_broker && that_present_use_broker))
        return false;
      if (this.use_broker != that.use_broker)
        return false;
    }

    boolean this_present_hdfs_write_buffer_size_kb = true && this.isSetHdfs_write_buffer_size_kb();
    boolean that_present_hdfs_write_buffer_size_kb = true && that.isSetHdfs_write_buffer_size_kb();
    if (this_present_hdfs_write_buffer_size_kb || that_present_hdfs_write_buffer_size_kb) {
      if (!(this_present_hdfs_write_buffer_size_kb && that_present_hdfs_write_buffer_size_kb))
        return false;
      if (this.hdfs_write_buffer_size_kb != that.hdfs_write_buffer_size_kb)
        return false;
    }

    boolean this_present_hdfs_properties = true && this.isSetHdfs_properties();
    boolean that_present_hdfs_properties = true && that.isSetHdfs_properties();
    if (this_present_hdfs_properties || that_present_hdfs_properties) {
      if (!(this_present_hdfs_properties && that_present_hdfs_properties))
        return false;
      if (!this.hdfs_properties.equals(that.hdfs_properties))
        return false;
    }

    boolean this_present_parquet_options = true && this.isSetParquet_options();
    boolean that_present_parquet_options = true && that.isSetParquet_options();
    if (this_present_parquet_options || that_present_parquet_options) {
      if (!(this_present_parquet_options && that_present_parquet_options))
        return false;
      if (!this.parquet_options.equals(that.parquet_options))
        return false;
    }

    boolean this_present_file_column_names = true && this.isSetFile_column_names();
    boolean that_present_file_column_names = true && that.isSetFile_column_names();
    if (this_present_file_column_names || that_present_file_column_names) {
      if (!(this_present_file_column_names && that_present_file_column_names))
        return false;
      if (!this.file_column_names.equals(that.file_column_names))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFile_path()) ? 131071 : 524287);
    if (isSetFile_path())
      hashCode = hashCode * 8191 + file_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetFile_format()) ? 131071 : 524287);
    if (isSetFile_format())
      hashCode = hashCode * 8191 + file_format.getValue();

    hashCode = hashCode * 8191 + ((isSetColumn_separator()) ? 131071 : 524287);
    if (isSetColumn_separator())
      hashCode = hashCode * 8191 + column_separator.hashCode();

    hashCode = hashCode * 8191 + ((isSetRow_delimiter()) ? 131071 : 524287);
    if (isSetRow_delimiter())
      hashCode = hashCode * 8191 + row_delimiter.hashCode();

    hashCode = hashCode * 8191 + ((isSetMax_file_size_bytes()) ? 131071 : 524287);
    if (isSetMax_file_size_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_file_size_bytes);

    hashCode = hashCode * 8191 + ((isSetBroker_addresses()) ? 131071 : 524287);
    if (isSetBroker_addresses())
      hashCode = hashCode * 8191 + broker_addresses.hashCode();

    hashCode = hashCode * 8191 + ((isSetBroker_properties()) ? 131071 : 524287);
    if (isSetBroker_properties())
      hashCode = hashCode * 8191 + broker_properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetUse_broker()) ? 131071 : 524287);
    if (isSetUse_broker())
      hashCode = hashCode * 8191 + ((use_broker) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetHdfs_write_buffer_size_kb()) ? 131071 : 524287);
    if (isSetHdfs_write_buffer_size_kb())
      hashCode = hashCode * 8191 + hdfs_write_buffer_size_kb;

    hashCode = hashCode * 8191 + ((isSetHdfs_properties()) ? 131071 : 524287);
    if (isSetHdfs_properties())
      hashCode = hashCode * 8191 + hdfs_properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetParquet_options()) ? 131071 : 524287);
    if (isSetParquet_options())
      hashCode = hashCode * 8191 + parquet_options.hashCode();

    hashCode = hashCode * 8191 + ((isSetFile_column_names()) ? 131071 : 524287);
    if (isSetFile_column_names())
      hashCode = hashCode * 8191 + file_column_names.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TResultFileSinkOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetFile_path(), other.isSetFile_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_path, other.file_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetFile_format(), other.isSetFile_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_format, other.file_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetColumn_separator(), other.isSetColumn_separator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_separator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_separator, other.column_separator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetRow_delimiter(), other.isSetRow_delimiter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_delimiter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_delimiter, other.row_delimiter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetMax_file_size_bytes(), other.isSetMax_file_size_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_file_size_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_file_size_bytes, other.max_file_size_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetBroker_addresses(), other.isSetBroker_addresses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBroker_addresses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.broker_addresses, other.broker_addresses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetBroker_properties(), other.isSetBroker_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBroker_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.broker_properties, other.broker_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetUse_broker(), other.isSetUse_broker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_broker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_broker, other.use_broker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetHdfs_write_buffer_size_kb(), other.isSetHdfs_write_buffer_size_kb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHdfs_write_buffer_size_kb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hdfs_write_buffer_size_kb, other.hdfs_write_buffer_size_kb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetHdfs_properties(), other.isSetHdfs_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHdfs_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hdfs_properties, other.hdfs_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetParquet_options(), other.isSetParquet_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParquet_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parquet_options, other.parquet_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetFile_column_names(), other.isSetFile_column_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_column_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_column_names, other.file_column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResultFileSinkOptions(");
    boolean first = true;

    sb.append("file_path:");
    if (this.file_path == null) {
      sb.append("null");
    } else {
      sb.append(this.file_path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("file_format:");
    if (this.file_format == null) {
      sb.append("null");
    } else {
      sb.append(this.file_format);
    }
    first = false;
    if (isSetColumn_separator()) {
      if (!first) sb.append(", ");
      sb.append("column_separator:");
      if (this.column_separator == null) {
        sb.append("null");
      } else {
        sb.append(this.column_separator);
      }
      first = false;
    }
    if (isSetRow_delimiter()) {
      if (!first) sb.append(", ");
      sb.append("row_delimiter:");
      if (this.row_delimiter == null) {
        sb.append("null");
      } else {
        sb.append(this.row_delimiter);
      }
      first = false;
    }
    if (isSetMax_file_size_bytes()) {
      if (!first) sb.append(", ");
      sb.append("max_file_size_bytes:");
      sb.append(this.max_file_size_bytes);
      first = false;
    }
    if (isSetBroker_addresses()) {
      if (!first) sb.append(", ");
      sb.append("broker_addresses:");
      if (this.broker_addresses == null) {
        sb.append("null");
      } else {
        sb.append(this.broker_addresses);
      }
      first = false;
    }
    if (isSetBroker_properties()) {
      if (!first) sb.append(", ");
      sb.append("broker_properties:");
      if (this.broker_properties == null) {
        sb.append("null");
      } else {
        sb.append(this.broker_properties);
      }
      first = false;
    }
    if (isSetUse_broker()) {
      if (!first) sb.append(", ");
      sb.append("use_broker:");
      sb.append(this.use_broker);
      first = false;
    }
    if (isSetHdfs_write_buffer_size_kb()) {
      if (!first) sb.append(", ");
      sb.append("hdfs_write_buffer_size_kb:");
      sb.append(this.hdfs_write_buffer_size_kb);
      first = false;
    }
    if (isSetHdfs_properties()) {
      if (!first) sb.append(", ");
      sb.append("hdfs_properties:");
      if (this.hdfs_properties == null) {
        sb.append("null");
      } else {
        sb.append(this.hdfs_properties);
      }
      first = false;
    }
    if (isSetParquet_options()) {
      if (!first) sb.append(", ");
      sb.append("parquet_options:");
      if (this.parquet_options == null) {
        sb.append("null");
      } else {
        sb.append(this.parquet_options);
      }
      first = false;
    }
    if (isSetFile_column_names()) {
      if (!first) sb.append(", ");
      sb.append("file_column_names:");
      if (this.file_column_names == null) {
        sb.append("null");
      } else {
        sb.append(this.file_column_names);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (file_path == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_path' was not present! Struct: " + toString());
    }
    if (file_format == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_format' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (hdfs_properties != null) {
      hdfs_properties.validate();
    }
    if (parquet_options != null) {
      parquet_options.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResultFileSinkOptionsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TResultFileSinkOptionsStandardScheme getScheme() {
      return new TResultFileSinkOptionsStandardScheme();
    }
  }

  private static class TResultFileSinkOptionsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TResultFileSinkOptions> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TResultFileSinkOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_path = iprot.readString();
              struct.setFile_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.file_format = TFileFormatType.findByValue(iprot.readI32());
              struct.setFile_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_SEPARATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_separator = iprot.readString();
              struct.setColumn_separatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROW_DELIMITER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.row_delimiter = iprot.readString();
              struct.setRow_delimiterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX_FILE_SIZE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_file_size_bytes = iprot.readI64();
              struct.setMax_file_size_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BROKER_ADDRESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.broker_addresses = new java.util.ArrayList<TNetworkAddress>(_list0.size);
                @org.apache.thrift.annotation.Nullable TNetworkAddress _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TNetworkAddress();
                  _elem1.read(iprot);
                  struct.broker_addresses.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setBroker_addressesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BROKER_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.broker_properties = new java.util.HashMap<String, String>(2 * _map3.size);
                @org.apache.thrift.annotation.Nullable String _key4;
                @org.apache.thrift.annotation.Nullable String _val5;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readString();
                  _val5 = iprot.readString();
                  struct.broker_properties.put(_key4, _val5);
                }
                iprot.readMapEnd();
              }
              struct.setBroker_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USE_BROKER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_broker = iprot.readBool();
              struct.setUse_brokerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HDFS_WRITE_BUFFER_SIZE_KB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hdfs_write_buffer_size_kb = iprot.readI32();
              struct.setHdfs_write_buffer_size_kbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HDFS_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hdfs_properties = new THdfsProperties();
              struct.hdfs_properties.read(iprot);
              struct.setHdfs_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PARQUET_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.parquet_options = new TParquetOptions();
              struct.parquet_options.read(iprot);
              struct.setParquet_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FILE_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                struct.file_column_names = new java.util.ArrayList<String>(_list7.size);
                @org.apache.thrift.annotation.Nullable String _elem8;
                for (int _i9 = 0; _i9 < _list7.size; ++_i9)
                {
                  _elem8 = iprot.readString();
                  struct.file_column_names.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setFile_column_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TResultFileSinkOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.file_path != null) {
        oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.file_path);
        oprot.writeFieldEnd();
      }
      if (struct.file_format != null) {
        oprot.writeFieldBegin(FILE_FORMAT_FIELD_DESC);
        oprot.writeI32(struct.file_format.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.column_separator != null) {
        if (struct.isSetColumn_separator()) {
          oprot.writeFieldBegin(COLUMN_SEPARATOR_FIELD_DESC);
          oprot.writeString(struct.column_separator);
          oprot.writeFieldEnd();
        }
      }
      if (struct.row_delimiter != null) {
        if (struct.isSetRow_delimiter()) {
          oprot.writeFieldBegin(ROW_DELIMITER_FIELD_DESC);
          oprot.writeString(struct.row_delimiter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMax_file_size_bytes()) {
        oprot.writeFieldBegin(MAX_FILE_SIZE_BYTES_FIELD_DESC);
        oprot.writeI64(struct.max_file_size_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.broker_addresses != null) {
        if (struct.isSetBroker_addresses()) {
          oprot.writeFieldBegin(BROKER_ADDRESSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.broker_addresses.size()));
            for (TNetworkAddress _iter10 : struct.broker_addresses)
            {
              _iter10.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.broker_properties != null) {
        if (struct.isSetBroker_properties()) {
          oprot.writeFieldBegin(BROKER_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.broker_properties.size()));
            for (java.util.Map.Entry<String, String> _iter11 : struct.broker_properties.entrySet())
            {
              oprot.writeString(_iter11.getKey());
              oprot.writeString(_iter11.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUse_broker()) {
        oprot.writeFieldBegin(USE_BROKER_FIELD_DESC);
        oprot.writeBool(struct.use_broker);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHdfs_write_buffer_size_kb()) {
        oprot.writeFieldBegin(HDFS_WRITE_BUFFER_SIZE_KB_FIELD_DESC);
        oprot.writeI32(struct.hdfs_write_buffer_size_kb);
        oprot.writeFieldEnd();
      }
      if (struct.hdfs_properties != null) {
        if (struct.isSetHdfs_properties()) {
          oprot.writeFieldBegin(HDFS_PROPERTIES_FIELD_DESC);
          struct.hdfs_properties.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.parquet_options != null) {
        if (struct.isSetParquet_options()) {
          oprot.writeFieldBegin(PARQUET_OPTIONS_FIELD_DESC);
          struct.parquet_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.file_column_names != null) {
        if (struct.isSetFile_column_names()) {
          oprot.writeFieldBegin(FILE_COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.file_column_names.size()));
            for (String _iter12 : struct.file_column_names)
            {
              oprot.writeString(_iter12);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResultFileSinkOptionsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TResultFileSinkOptionsTupleScheme getScheme() {
      return new TResultFileSinkOptionsTupleScheme();
    }
  }

  private static class TResultFileSinkOptionsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TResultFileSinkOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResultFileSinkOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.file_path);
      oprot.writeI32(struct.file_format.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetColumn_separator()) {
        optionals.set(0);
      }
      if (struct.isSetRow_delimiter()) {
        optionals.set(1);
      }
      if (struct.isSetMax_file_size_bytes()) {
        optionals.set(2);
      }
      if (struct.isSetBroker_addresses()) {
        optionals.set(3);
      }
      if (struct.isSetBroker_properties()) {
        optionals.set(4);
      }
      if (struct.isSetUse_broker()) {
        optionals.set(5);
      }
      if (struct.isSetHdfs_write_buffer_size_kb()) {
        optionals.set(6);
      }
      if (struct.isSetHdfs_properties()) {
        optionals.set(7);
      }
      if (struct.isSetParquet_options()) {
        optionals.set(8);
      }
      if (struct.isSetFile_column_names()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetColumn_separator()) {
        oprot.writeString(struct.column_separator);
      }
      if (struct.isSetRow_delimiter()) {
        oprot.writeString(struct.row_delimiter);
      }
      if (struct.isSetMax_file_size_bytes()) {
        oprot.writeI64(struct.max_file_size_bytes);
      }
      if (struct.isSetBroker_addresses()) {
        {
          oprot.writeI32(struct.broker_addresses.size());
          for (TNetworkAddress _iter13 : struct.broker_addresses)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetBroker_properties()) {
        {
          oprot.writeI32(struct.broker_properties.size());
          for (java.util.Map.Entry<String, String> _iter14 : struct.broker_properties.entrySet())
          {
            oprot.writeString(_iter14.getKey());
            oprot.writeString(_iter14.getValue());
          }
        }
      }
      if (struct.isSetUse_broker()) {
        oprot.writeBool(struct.use_broker);
      }
      if (struct.isSetHdfs_write_buffer_size_kb()) {
        oprot.writeI32(struct.hdfs_write_buffer_size_kb);
      }
      if (struct.isSetHdfs_properties()) {
        struct.hdfs_properties.write(oprot);
      }
      if (struct.isSetParquet_options()) {
        struct.parquet_options.write(oprot);
      }
      if (struct.isSetFile_column_names()) {
        {
          oprot.writeI32(struct.file_column_names.size());
          for (String _iter15 : struct.file_column_names)
          {
            oprot.writeString(_iter15);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResultFileSinkOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.file_path = iprot.readString();
      struct.setFile_pathIsSet(true);
      struct.file_format = TFileFormatType.findByValue(iprot.readI32());
      struct.setFile_formatIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.column_separator = iprot.readString();
        struct.setColumn_separatorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.row_delimiter = iprot.readString();
        struct.setRow_delimiterIsSet(true);
      }
      if (incoming.get(2)) {
        struct.max_file_size_bytes = iprot.readI64();
        struct.setMax_file_size_bytesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list16 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.broker_addresses = new java.util.ArrayList<TNetworkAddress>(_list16.size);
          @org.apache.thrift.annotation.Nullable TNetworkAddress _elem17;
          for (int _i18 = 0; _i18 < _list16.size; ++_i18)
          {
            _elem17 = new TNetworkAddress();
            _elem17.read(iprot);
            struct.broker_addresses.add(_elem17);
          }
        }
        struct.setBroker_addressesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.broker_properties = new java.util.HashMap<String, String>(2 * _map19.size);
          @org.apache.thrift.annotation.Nullable String _key20;
          @org.apache.thrift.annotation.Nullable String _val21;
          for (int _i22 = 0; _i22 < _map19.size; ++_i22)
          {
            _key20 = iprot.readString();
            _val21 = iprot.readString();
            struct.broker_properties.put(_key20, _val21);
          }
        }
        struct.setBroker_propertiesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.use_broker = iprot.readBool();
        struct.setUse_brokerIsSet(true);
      }
      if (incoming.get(6)) {
        struct.hdfs_write_buffer_size_kb = iprot.readI32();
        struct.setHdfs_write_buffer_size_kbIsSet(true);
      }
      if (incoming.get(7)) {
        struct.hdfs_properties = new THdfsProperties();
        struct.hdfs_properties.read(iprot);
        struct.setHdfs_propertiesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.parquet_options = new TParquetOptions();
        struct.parquet_options.read(iprot);
        struct.setParquet_optionsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list23 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.file_column_names = new java.util.ArrayList<String>(_list23.size);
          @org.apache.thrift.annotation.Nullable String _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = iprot.readString();
            struct.file_column_names.add(_elem24);
          }
        }
        struct.setFile_column_namesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

