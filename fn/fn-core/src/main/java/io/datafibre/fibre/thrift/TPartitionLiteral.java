/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TPartitionLiteral implements org.apache.thrift.TBase<TPartitionLiteral, TPartitionLiteral._Fields>, java.io.Serializable, Cloneable, Comparable<TPartitionLiteral> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPartitionLiteral");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField INT_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("int_literal", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DATE_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("date_literal", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField STRING_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("string_literal", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPartitionLiteralStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPartitionLiteralTupleSchemeFactory();

  /**
   * 
   * @see io.datafibre.fibre.thrift.TPrimitiveType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPrimitiveType type; // optional
  public @org.apache.thrift.annotation.Nullable TIntLiteral int_literal; // optional
  public @org.apache.thrift.annotation.Nullable TDateLiteral date_literal; // optional
  public @org.apache.thrift.annotation.Nullable TStringLiteral string_literal; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see io.datafibre.fibre.thrift.TPrimitiveType
     */
    TYPE((short)1, "type"),
    INT_LITERAL((short)2, "int_literal"),
    DATE_LITERAL((short)3, "date_literal"),
    STRING_LITERAL((short)4, "string_literal");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // INT_LITERAL
          return INT_LITERAL;
        case 3: // DATE_LITERAL
          return DATE_LITERAL;
        case 4: // STRING_LITERAL
          return STRING_LITERAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TYPE,_Fields.INT_LITERAL,_Fields.DATE_LITERAL,_Fields.STRING_LITERAL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TPrimitiveType.class)));
    tmpMap.put(_Fields.INT_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("int_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIntLiteral.class)));
    tmpMap.put(_Fields.DATE_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("date_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDateLiteral.class)));
    tmpMap.put(_Fields.STRING_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("string_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStringLiteral.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPartitionLiteral.class, metaDataMap);
  }

  public TPartitionLiteral() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPartitionLiteral(TPartitionLiteral other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetInt_literal()) {
      this.int_literal = new TIntLiteral(other.int_literal);
    }
    if (other.isSetDate_literal()) {
      this.date_literal = new TDateLiteral(other.date_literal);
    }
    if (other.isSetString_literal()) {
      this.string_literal = new TStringLiteral(other.string_literal);
    }
  }

  @Override
  public TPartitionLiteral deepCopy() {
    return new TPartitionLiteral(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.int_literal = null;
    this.date_literal = null;
    this.string_literal = null;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TPrimitiveType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TPrimitiveType getType() {
    return this.type;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TPrimitiveType
   */
  public TPartitionLiteral setType(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPrimitiveType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TIntLiteral getInt_literal() {
    return this.int_literal;
  }

  public TPartitionLiteral setInt_literal(@org.apache.thrift.annotation.Nullable TIntLiteral int_literal) {
    this.int_literal = int_literal;
    return this;
  }

  public void unsetInt_literal() {
    this.int_literal = null;
  }

  /** Returns true if field int_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetInt_literal() {
    return this.int_literal != null;
  }

  public void setInt_literalIsSet(boolean value) {
    if (!value) {
      this.int_literal = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDateLiteral getDate_literal() {
    return this.date_literal;
  }

  public TPartitionLiteral setDate_literal(@org.apache.thrift.annotation.Nullable TDateLiteral date_literal) {
    this.date_literal = date_literal;
    return this;
  }

  public void unsetDate_literal() {
    this.date_literal = null;
  }

  /** Returns true if field date_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetDate_literal() {
    return this.date_literal != null;
  }

  public void setDate_literalIsSet(boolean value) {
    if (!value) {
      this.date_literal = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TStringLiteral getString_literal() {
    return this.string_literal;
  }

  public TPartitionLiteral setString_literal(@org.apache.thrift.annotation.Nullable TStringLiteral string_literal) {
    this.string_literal = string_literal;
    return this;
  }

  public void unsetString_literal() {
    this.string_literal = null;
  }

  /** Returns true if field string_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetString_literal() {
    return this.string_literal != null;
  }

  public void setString_literalIsSet(boolean value) {
    if (!value) {
      this.string_literal = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((io.datafibre.fibre.thrift.TPrimitiveType)value);
      }
      break;

    case INT_LITERAL:
      if (value == null) {
        unsetInt_literal();
      } else {
        setInt_literal((TIntLiteral)value);
      }
      break;

    case DATE_LITERAL:
      if (value == null) {
        unsetDate_literal();
      } else {
        setDate_literal((TDateLiteral)value);
      }
      break;

    case STRING_LITERAL:
      if (value == null) {
        unsetString_literal();
      } else {
        setString_literal((TStringLiteral)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case INT_LITERAL:
      return getInt_literal();

    case DATE_LITERAL:
      return getDate_literal();

    case STRING_LITERAL:
      return getString_literal();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case INT_LITERAL:
      return isSetInt_literal();
    case DATE_LITERAL:
      return isSetDate_literal();
    case STRING_LITERAL:
      return isSetString_literal();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TPartitionLiteral)
      return this.equals((TPartitionLiteral)that);
    return false;
  }

  public boolean equals(TPartitionLiteral that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_int_literal = true && this.isSetInt_literal();
    boolean that_present_int_literal = true && that.isSetInt_literal();
    if (this_present_int_literal || that_present_int_literal) {
      if (!(this_present_int_literal && that_present_int_literal))
        return false;
      if (!this.int_literal.equals(that.int_literal))
        return false;
    }

    boolean this_present_date_literal = true && this.isSetDate_literal();
    boolean that_present_date_literal = true && that.isSetDate_literal();
    if (this_present_date_literal || that_present_date_literal) {
      if (!(this_present_date_literal && that_present_date_literal))
        return false;
      if (!this.date_literal.equals(that.date_literal))
        return false;
    }

    boolean this_present_string_literal = true && this.isSetString_literal();
    boolean that_present_string_literal = true && that.isSetString_literal();
    if (this_present_string_literal || that_present_string_literal) {
      if (!(this_present_string_literal && that_present_string_literal))
        return false;
      if (!this.string_literal.equals(that.string_literal))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetInt_literal()) ? 131071 : 524287);
    if (isSetInt_literal())
      hashCode = hashCode * 8191 + int_literal.hashCode();

    hashCode = hashCode * 8191 + ((isSetDate_literal()) ? 131071 : 524287);
    if (isSetDate_literal())
      hashCode = hashCode * 8191 + date_literal.hashCode();

    hashCode = hashCode * 8191 + ((isSetString_literal()) ? 131071 : 524287);
    if (isSetString_literal())
      hashCode = hashCode * 8191 + string_literal.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TPartitionLiteral other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInt_literal(), other.isSetInt_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_literal, other.int_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDate_literal(), other.isSetDate_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date_literal, other.date_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetString_literal(), other.isSetString_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_literal, other.string_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPartitionLiteral(");
    boolean first = true;

    if (isSetType()) {
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetInt_literal()) {
      if (!first) sb.append(", ");
      sb.append("int_literal:");
      if (this.int_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.int_literal);
      }
      first = false;
    }
    if (isSetDate_literal()) {
      if (!first) sb.append(", ");
      sb.append("date_literal:");
      if (this.date_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.date_literal);
      }
      first = false;
    }
    if (isSetString_literal()) {
      if (!first) sb.append(", ");
      sb.append("string_literal:");
      if (this.string_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.string_literal);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (int_literal != null) {
      int_literal.validate();
    }
    if (date_literal != null) {
      date_literal.validate();
    }
    if (string_literal != null) {
      string_literal.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPartitionLiteralStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPartitionLiteralStandardScheme getScheme() {
      return new TPartitionLiteralStandardScheme();
    }
  }

  private static class TPartitionLiteralStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPartitionLiteral> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TPartitionLiteral struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = io.datafibre.fibre.thrift.TPrimitiveType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INT_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.int_literal = new TIntLiteral();
              struct.int_literal.read(iprot);
              struct.setInt_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATE_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.date_literal = new TDateLiteral();
              struct.date_literal.read(iprot);
              struct.setDate_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STRING_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.string_literal = new TStringLiteral();
              struct.string_literal.read(iprot);
              struct.setString_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TPartitionLiteral struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.int_literal != null) {
        if (struct.isSetInt_literal()) {
          oprot.writeFieldBegin(INT_LITERAL_FIELD_DESC);
          struct.int_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.date_literal != null) {
        if (struct.isSetDate_literal()) {
          oprot.writeFieldBegin(DATE_LITERAL_FIELD_DESC);
          struct.date_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.string_literal != null) {
        if (struct.isSetString_literal()) {
          oprot.writeFieldBegin(STRING_LITERAL_FIELD_DESC);
          struct.string_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPartitionLiteralTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPartitionLiteralTupleScheme getScheme() {
      return new TPartitionLiteralTupleScheme();
    }
  }

  private static class TPartitionLiteralTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPartitionLiteral> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPartitionLiteral struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetInt_literal()) {
        optionals.set(1);
      }
      if (struct.isSetDate_literal()) {
        optionals.set(2);
      }
      if (struct.isSetString_literal()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetInt_literal()) {
        struct.int_literal.write(oprot);
      }
      if (struct.isSetDate_literal()) {
        struct.date_literal.write(oprot);
      }
      if (struct.isSetString_literal()) {
        struct.string_literal.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPartitionLiteral struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.type = io.datafibre.fibre.thrift.TPrimitiveType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.int_literal = new TIntLiteral();
        struct.int_literal.read(iprot);
        struct.setInt_literalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.date_literal = new TDateLiteral();
        struct.date_literal.read(iprot);
        struct.setDate_literalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.string_literal = new TStringLiteral();
        struct.string_literal.read(iprot);
        struct.setString_literalIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

