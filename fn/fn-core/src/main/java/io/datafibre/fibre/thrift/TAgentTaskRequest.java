/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TAgentTaskRequest implements org.apache.thrift.TBase<TAgentTaskRequest, TAgentTaskRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TAgentTaskRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAgentTaskRequest");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("task_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CREATE_TABLET_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("create_tablet_req", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DROP_TABLET_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("drop_tablet_req", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField ALTER_TABLET_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_tablet_req", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField CLONE_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("clone_req", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField PUSH_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("push_req", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField CANCEL_DELETE_DATA_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("cancel_delete_data_req", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField RESOURCE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_info", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField STORAGE_MEDIUM_MIGRATE_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_medium_migrate_req", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField CHECK_CONSISTENCY_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("check_consistency_req", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField UPLOAD_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("upload_req", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField DOWNLOAD_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("download_req", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField SNAPSHOT_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshot_req", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField RELEASE_SNAPSHOT_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("release_snapshot_req", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField CLEAR_REMOTE_FILE_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("clear_remote_file_req", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField PUBLISH_VERSION_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("publish_version_req", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField CLEAR_ALTER_TASK_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("clear_alter_task_req", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField CLEAR_TRANSACTION_TASK_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("clear_transaction_task_req", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField MOVE_DIR_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("move_dir_req", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField RECOVER_TABLET_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("recover_tablet_req", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField ALTER_TABLET_REQ_V2_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_tablet_req_v2", org.apache.thrift.protocol.TType.STRUCT, (short)24);
  private static final org.apache.thrift.protocol.TField RECV_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("recv_time", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField UPDATE_TABLET_META_INFO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("update_tablet_meta_info_req", org.apache.thrift.protocol.TType.STRUCT, (short)26);
  private static final org.apache.thrift.protocol.TField DROP_AUTO_INCREMENT_MAP_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("drop_auto_increment_map_req", org.apache.thrift.protocol.TType.STRUCT, (short)27);
  private static final org.apache.thrift.protocol.TField COMPACTION_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("compaction_req", org.apache.thrift.protocol.TType.STRUCT, (short)28);
  private static final org.apache.thrift.protocol.TField REMOTE_SNAPSHOT_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("remote_snapshot_req", org.apache.thrift.protocol.TType.STRUCT, (short)29);
  private static final org.apache.thrift.protocol.TField REPLICATE_SNAPSHOT_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("replicate_snapshot_req", org.apache.thrift.protocol.TType.STRUCT, (short)30);
  private static final org.apache.thrift.protocol.TField UPDATE_SCHEMA_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("update_schema_req", org.apache.thrift.protocol.TType.STRUCT, (short)31);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAgentTaskRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAgentTaskRequestTupleSchemeFactory();

  /**
   * 
   * @see TAgentServiceVersion
   */
  public @org.apache.thrift.annotation.Nullable TAgentServiceVersion protocol_version; // required
  /**
   * 
   * @see io.datafibre.fibre.thrift.TTaskType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTaskType task_type; // required
  public long signature; // required
  /**
   * 
   * @see io.datafibre.fibre.thrift.TPriority
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPriority priority; // optional
  public @org.apache.thrift.annotation.Nullable TCreateTabletReq create_tablet_req; // optional
  public @org.apache.thrift.annotation.Nullable TDropTabletReq drop_tablet_req; // optional
  public @org.apache.thrift.annotation.Nullable TAlterTabletReq alter_tablet_req; // optional
  public @org.apache.thrift.annotation.Nullable TCloneReq clone_req; // optional
  public @org.apache.thrift.annotation.Nullable TPushReq push_req; // optional
  public @org.apache.thrift.annotation.Nullable TCancelDeleteDataReq cancel_delete_data_req; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TResourceInfo resource_info; // optional
  public @org.apache.thrift.annotation.Nullable TStorageMediumMigrateReq storage_medium_migrate_req; // optional
  public @org.apache.thrift.annotation.Nullable TCheckConsistencyReq check_consistency_req; // optional
  public @org.apache.thrift.annotation.Nullable TUploadReq upload_req; // optional
  public @org.apache.thrift.annotation.Nullable TDownloadReq download_req; // optional
  public @org.apache.thrift.annotation.Nullable TSnapshotRequest snapshot_req; // optional
  public @org.apache.thrift.annotation.Nullable TReleaseSnapshotRequest release_snapshot_req; // optional
  public @org.apache.thrift.annotation.Nullable TClearRemoteFileReq clear_remote_file_req; // optional
  public @org.apache.thrift.annotation.Nullable TPublishVersionRequest publish_version_req; // optional
  public @org.apache.thrift.annotation.Nullable TClearAlterTaskRequest clear_alter_task_req; // optional
  public @org.apache.thrift.annotation.Nullable TClearTransactionTaskRequest clear_transaction_task_req; // optional
  public @org.apache.thrift.annotation.Nullable TMoveDirReq move_dir_req; // optional
  public @org.apache.thrift.annotation.Nullable TRecoverTabletReq recover_tablet_req; // optional
  public @org.apache.thrift.annotation.Nullable TAlterTabletReqV2 alter_tablet_req_v2; // optional
  public long recv_time; // optional
  public @org.apache.thrift.annotation.Nullable TUpdateTabletMetaInfoReq update_tablet_meta_info_req; // optional
  public @org.apache.thrift.annotation.Nullable TDropAutoIncrementMapReq drop_auto_increment_map_req; // optional
  public @org.apache.thrift.annotation.Nullable TCompactionReq compaction_req; // optional
  public @org.apache.thrift.annotation.Nullable TRemoteSnapshotRequest remote_snapshot_req; // optional
  public @org.apache.thrift.annotation.Nullable TReplicateSnapshotRequest replicate_snapshot_req; // optional
  public @org.apache.thrift.annotation.Nullable TUpdateSchemaReq update_schema_req; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TAgentServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TTaskType
     */
    TASK_TYPE((short)2, "task_type"),
    SIGNATURE((short)3, "signature"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TPriority
     */
    PRIORITY((short)4, "priority"),
    CREATE_TABLET_REQ((short)5, "create_tablet_req"),
    DROP_TABLET_REQ((short)6, "drop_tablet_req"),
    ALTER_TABLET_REQ((short)7, "alter_tablet_req"),
    CLONE_REQ((short)8, "clone_req"),
    PUSH_REQ((short)9, "push_req"),
    CANCEL_DELETE_DATA_REQ((short)10, "cancel_delete_data_req"),
    RESOURCE_INFO((short)11, "resource_info"),
    STORAGE_MEDIUM_MIGRATE_REQ((short)12, "storage_medium_migrate_req"),
    CHECK_CONSISTENCY_REQ((short)13, "check_consistency_req"),
    UPLOAD_REQ((short)14, "upload_req"),
    DOWNLOAD_REQ((short)15, "download_req"),
    SNAPSHOT_REQ((short)16, "snapshot_req"),
    RELEASE_SNAPSHOT_REQ((short)17, "release_snapshot_req"),
    CLEAR_REMOTE_FILE_REQ((short)18, "clear_remote_file_req"),
    PUBLISH_VERSION_REQ((short)19, "publish_version_req"),
    CLEAR_ALTER_TASK_REQ((short)20, "clear_alter_task_req"),
    CLEAR_TRANSACTION_TASK_REQ((short)21, "clear_transaction_task_req"),
    MOVE_DIR_REQ((short)22, "move_dir_req"),
    RECOVER_TABLET_REQ((short)23, "recover_tablet_req"),
    ALTER_TABLET_REQ_V2((short)24, "alter_tablet_req_v2"),
    RECV_TIME((short)25, "recv_time"),
    UPDATE_TABLET_META_INFO_REQ((short)26, "update_tablet_meta_info_req"),
    DROP_AUTO_INCREMENT_MAP_REQ((short)27, "drop_auto_increment_map_req"),
    COMPACTION_REQ((short)28, "compaction_req"),
    REMOTE_SNAPSHOT_REQ((short)29, "remote_snapshot_req"),
    REPLICATE_SNAPSHOT_REQ((short)30, "replicate_snapshot_req"),
    UPDATE_SCHEMA_REQ((short)31, "update_schema_req");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // TASK_TYPE
          return TASK_TYPE;
        case 3: // SIGNATURE
          return SIGNATURE;
        case 4: // PRIORITY
          return PRIORITY;
        case 5: // CREATE_TABLET_REQ
          return CREATE_TABLET_REQ;
        case 6: // DROP_TABLET_REQ
          return DROP_TABLET_REQ;
        case 7: // ALTER_TABLET_REQ
          return ALTER_TABLET_REQ;
        case 8: // CLONE_REQ
          return CLONE_REQ;
        case 9: // PUSH_REQ
          return PUSH_REQ;
        case 10: // CANCEL_DELETE_DATA_REQ
          return CANCEL_DELETE_DATA_REQ;
        case 11: // RESOURCE_INFO
          return RESOURCE_INFO;
        case 12: // STORAGE_MEDIUM_MIGRATE_REQ
          return STORAGE_MEDIUM_MIGRATE_REQ;
        case 13: // CHECK_CONSISTENCY_REQ
          return CHECK_CONSISTENCY_REQ;
        case 14: // UPLOAD_REQ
          return UPLOAD_REQ;
        case 15: // DOWNLOAD_REQ
          return DOWNLOAD_REQ;
        case 16: // SNAPSHOT_REQ
          return SNAPSHOT_REQ;
        case 17: // RELEASE_SNAPSHOT_REQ
          return RELEASE_SNAPSHOT_REQ;
        case 18: // CLEAR_REMOTE_FILE_REQ
          return CLEAR_REMOTE_FILE_REQ;
        case 19: // PUBLISH_VERSION_REQ
          return PUBLISH_VERSION_REQ;
        case 20: // CLEAR_ALTER_TASK_REQ
          return CLEAR_ALTER_TASK_REQ;
        case 21: // CLEAR_TRANSACTION_TASK_REQ
          return CLEAR_TRANSACTION_TASK_REQ;
        case 22: // MOVE_DIR_REQ
          return MOVE_DIR_REQ;
        case 23: // RECOVER_TABLET_REQ
          return RECOVER_TABLET_REQ;
        case 24: // ALTER_TABLET_REQ_V2
          return ALTER_TABLET_REQ_V2;
        case 25: // RECV_TIME
          return RECV_TIME;
        case 26: // UPDATE_TABLET_META_INFO_REQ
          return UPDATE_TABLET_META_INFO_REQ;
        case 27: // DROP_AUTO_INCREMENT_MAP_REQ
          return DROP_AUTO_INCREMENT_MAP_REQ;
        case 28: // COMPACTION_REQ
          return COMPACTION_REQ;
        case 29: // REMOTE_SNAPSHOT_REQ
          return REMOTE_SNAPSHOT_REQ;
        case 30: // REPLICATE_SNAPSHOT_REQ
          return REPLICATE_SNAPSHOT_REQ;
        case 31: // UPDATE_SCHEMA_REQ
          return UPDATE_SCHEMA_REQ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIGNATURE_ISSET_ID = 0;
  private static final int __RECV_TIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PRIORITY,_Fields.CREATE_TABLET_REQ,_Fields.DROP_TABLET_REQ,_Fields.ALTER_TABLET_REQ,_Fields.CLONE_REQ,_Fields.PUSH_REQ,_Fields.CANCEL_DELETE_DATA_REQ,_Fields.RESOURCE_INFO,_Fields.STORAGE_MEDIUM_MIGRATE_REQ,_Fields.CHECK_CONSISTENCY_REQ,_Fields.UPLOAD_REQ,_Fields.DOWNLOAD_REQ,_Fields.SNAPSHOT_REQ,_Fields.RELEASE_SNAPSHOT_REQ,_Fields.CLEAR_REMOTE_FILE_REQ,_Fields.PUBLISH_VERSION_REQ,_Fields.CLEAR_ALTER_TASK_REQ,_Fields.CLEAR_TRANSACTION_TASK_REQ,_Fields.MOVE_DIR_REQ,_Fields.RECOVER_TABLET_REQ,_Fields.ALTER_TABLET_REQ_V2,_Fields.RECV_TIME,_Fields.UPDATE_TABLET_META_INFO_REQ,_Fields.DROP_AUTO_INCREMENT_MAP_REQ,_Fields.COMPACTION_REQ,_Fields.REMOTE_SNAPSHOT_REQ,_Fields.REPLICATE_SNAPSHOT_REQ,_Fields.UPDATE_SCHEMA_REQ};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TAgentServiceVersion.class)));
    tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("task_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TTaskType.class)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TPriority.class)));
    tmpMap.put(_Fields.CREATE_TABLET_REQ, new org.apache.thrift.meta_data.FieldMetaData("create_tablet_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCreateTabletReq.class)));
    tmpMap.put(_Fields.DROP_TABLET_REQ, new org.apache.thrift.meta_data.FieldMetaData("drop_tablet_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDropTabletReq.class)));
    tmpMap.put(_Fields.ALTER_TABLET_REQ, new org.apache.thrift.meta_data.FieldMetaData("alter_tablet_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterTabletReq.class)));
    tmpMap.put(_Fields.CLONE_REQ, new org.apache.thrift.meta_data.FieldMetaData("clone_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCloneReq.class)));
    tmpMap.put(_Fields.PUSH_REQ, new org.apache.thrift.meta_data.FieldMetaData("push_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPushReq.class)));
    tmpMap.put(_Fields.CANCEL_DELETE_DATA_REQ, new org.apache.thrift.meta_data.FieldMetaData("cancel_delete_data_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCancelDeleteDataReq.class)));
    tmpMap.put(_Fields.RESOURCE_INFO, new org.apache.thrift.meta_data.FieldMetaData("resource_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TResourceInfo.class)));
    tmpMap.put(_Fields.STORAGE_MEDIUM_MIGRATE_REQ, new org.apache.thrift.meta_data.FieldMetaData("storage_medium_migrate_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStorageMediumMigrateReq.class)));
    tmpMap.put(_Fields.CHECK_CONSISTENCY_REQ, new org.apache.thrift.meta_data.FieldMetaData("check_consistency_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCheckConsistencyReq.class)));
    tmpMap.put(_Fields.UPLOAD_REQ, new org.apache.thrift.meta_data.FieldMetaData("upload_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUploadReq.class)));
    tmpMap.put(_Fields.DOWNLOAD_REQ, new org.apache.thrift.meta_data.FieldMetaData("download_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDownloadReq.class)));
    tmpMap.put(_Fields.SNAPSHOT_REQ, new org.apache.thrift.meta_data.FieldMetaData("snapshot_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSnapshotRequest.class)));
    tmpMap.put(_Fields.RELEASE_SNAPSHOT_REQ, new org.apache.thrift.meta_data.FieldMetaData("release_snapshot_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TReleaseSnapshotRequest.class)));
    tmpMap.put(_Fields.CLEAR_REMOTE_FILE_REQ, new org.apache.thrift.meta_data.FieldMetaData("clear_remote_file_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TClearRemoteFileReq.class)));
    tmpMap.put(_Fields.PUBLISH_VERSION_REQ, new org.apache.thrift.meta_data.FieldMetaData("publish_version_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPublishVersionRequest.class)));
    tmpMap.put(_Fields.CLEAR_ALTER_TASK_REQ, new org.apache.thrift.meta_data.FieldMetaData("clear_alter_task_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TClearAlterTaskRequest.class)));
    tmpMap.put(_Fields.CLEAR_TRANSACTION_TASK_REQ, new org.apache.thrift.meta_data.FieldMetaData("clear_transaction_task_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TClearTransactionTaskRequest.class)));
    tmpMap.put(_Fields.MOVE_DIR_REQ, new org.apache.thrift.meta_data.FieldMetaData("move_dir_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMoveDirReq.class)));
    tmpMap.put(_Fields.RECOVER_TABLET_REQ, new org.apache.thrift.meta_data.FieldMetaData("recover_tablet_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRecoverTabletReq.class)));
    tmpMap.put(_Fields.ALTER_TABLET_REQ_V2, new org.apache.thrift.meta_data.FieldMetaData("alter_tablet_req_v2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterTabletReqV2.class)));
    tmpMap.put(_Fields.RECV_TIME, new org.apache.thrift.meta_data.FieldMetaData("recv_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TABLET_META_INFO_REQ, new org.apache.thrift.meta_data.FieldMetaData("update_tablet_meta_info_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUpdateTabletMetaInfoReq.class)));
    tmpMap.put(_Fields.DROP_AUTO_INCREMENT_MAP_REQ, new org.apache.thrift.meta_data.FieldMetaData("drop_auto_increment_map_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDropAutoIncrementMapReq.class)));
    tmpMap.put(_Fields.COMPACTION_REQ, new org.apache.thrift.meta_data.FieldMetaData("compaction_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCompactionReq.class)));
    tmpMap.put(_Fields.REMOTE_SNAPSHOT_REQ, new org.apache.thrift.meta_data.FieldMetaData("remote_snapshot_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRemoteSnapshotRequest.class)));
    tmpMap.put(_Fields.REPLICATE_SNAPSHOT_REQ, new org.apache.thrift.meta_data.FieldMetaData("replicate_snapshot_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TReplicateSnapshotRequest.class)));
    tmpMap.put(_Fields.UPDATE_SCHEMA_REQ, new org.apache.thrift.meta_data.FieldMetaData("update_schema_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUpdateSchemaReq.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAgentTaskRequest.class, metaDataMap);
  }

  public TAgentTaskRequest() {
  }

  public TAgentTaskRequest(
    TAgentServiceVersion protocol_version,
    io.datafibre.fibre.thrift.TTaskType task_type,
    long signature)
  {
    this();
    this.protocol_version = protocol_version;
    this.task_type = task_type;
    this.signature = signature;
    setSignatureIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAgentTaskRequest(TAgentTaskRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocol_version()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetTask_type()) {
      this.task_type = other.task_type;
    }
    this.signature = other.signature;
    if (other.isSetPriority()) {
      this.priority = other.priority;
    }
    if (other.isSetCreate_tablet_req()) {
      this.create_tablet_req = new TCreateTabletReq(other.create_tablet_req);
    }
    if (other.isSetDrop_tablet_req()) {
      this.drop_tablet_req = new TDropTabletReq(other.drop_tablet_req);
    }
    if (other.isSetAlter_tablet_req()) {
      this.alter_tablet_req = new TAlterTabletReq(other.alter_tablet_req);
    }
    if (other.isSetClone_req()) {
      this.clone_req = new TCloneReq(other.clone_req);
    }
    if (other.isSetPush_req()) {
      this.push_req = new TPushReq(other.push_req);
    }
    if (other.isSetCancel_delete_data_req()) {
      this.cancel_delete_data_req = new TCancelDeleteDataReq(other.cancel_delete_data_req);
    }
    if (other.isSetResource_info()) {
      this.resource_info = new io.datafibre.fibre.thrift.TResourceInfo(other.resource_info);
    }
    if (other.isSetStorage_medium_migrate_req()) {
      this.storage_medium_migrate_req = new TStorageMediumMigrateReq(other.storage_medium_migrate_req);
    }
    if (other.isSetCheck_consistency_req()) {
      this.check_consistency_req = new TCheckConsistencyReq(other.check_consistency_req);
    }
    if (other.isSetUpload_req()) {
      this.upload_req = new TUploadReq(other.upload_req);
    }
    if (other.isSetDownload_req()) {
      this.download_req = new TDownloadReq(other.download_req);
    }
    if (other.isSetSnapshot_req()) {
      this.snapshot_req = new TSnapshotRequest(other.snapshot_req);
    }
    if (other.isSetRelease_snapshot_req()) {
      this.release_snapshot_req = new TReleaseSnapshotRequest(other.release_snapshot_req);
    }
    if (other.isSetClear_remote_file_req()) {
      this.clear_remote_file_req = new TClearRemoteFileReq(other.clear_remote_file_req);
    }
    if (other.isSetPublish_version_req()) {
      this.publish_version_req = new TPublishVersionRequest(other.publish_version_req);
    }
    if (other.isSetClear_alter_task_req()) {
      this.clear_alter_task_req = new TClearAlterTaskRequest(other.clear_alter_task_req);
    }
    if (other.isSetClear_transaction_task_req()) {
      this.clear_transaction_task_req = new TClearTransactionTaskRequest(other.clear_transaction_task_req);
    }
    if (other.isSetMove_dir_req()) {
      this.move_dir_req = new TMoveDirReq(other.move_dir_req);
    }
    if (other.isSetRecover_tablet_req()) {
      this.recover_tablet_req = new TRecoverTabletReq(other.recover_tablet_req);
    }
    if (other.isSetAlter_tablet_req_v2()) {
      this.alter_tablet_req_v2 = new TAlterTabletReqV2(other.alter_tablet_req_v2);
    }
    this.recv_time = other.recv_time;
    if (other.isSetUpdate_tablet_meta_info_req()) {
      this.update_tablet_meta_info_req = new TUpdateTabletMetaInfoReq(other.update_tablet_meta_info_req);
    }
    if (other.isSetDrop_auto_increment_map_req()) {
      this.drop_auto_increment_map_req = new TDropAutoIncrementMapReq(other.drop_auto_increment_map_req);
    }
    if (other.isSetCompaction_req()) {
      this.compaction_req = new TCompactionReq(other.compaction_req);
    }
    if (other.isSetRemote_snapshot_req()) {
      this.remote_snapshot_req = new TRemoteSnapshotRequest(other.remote_snapshot_req);
    }
    if (other.isSetReplicate_snapshot_req()) {
      this.replicate_snapshot_req = new TReplicateSnapshotRequest(other.replicate_snapshot_req);
    }
    if (other.isSetUpdate_schema_req()) {
      this.update_schema_req = new TUpdateSchemaReq(other.update_schema_req);
    }
  }

  @Override
  public TAgentTaskRequest deepCopy() {
    return new TAgentTaskRequest(this);
  }

  @Override
  public void clear() {
    this.protocol_version = null;
    this.task_type = null;
    setSignatureIsSet(false);
    this.signature = 0;
    this.priority = null;
    this.create_tablet_req = null;
    this.drop_tablet_req = null;
    this.alter_tablet_req = null;
    this.clone_req = null;
    this.push_req = null;
    this.cancel_delete_data_req = null;
    this.resource_info = null;
    this.storage_medium_migrate_req = null;
    this.check_consistency_req = null;
    this.upload_req = null;
    this.download_req = null;
    this.snapshot_req = null;
    this.release_snapshot_req = null;
    this.clear_remote_file_req = null;
    this.publish_version_req = null;
    this.clear_alter_task_req = null;
    this.clear_transaction_task_req = null;
    this.move_dir_req = null;
    this.recover_tablet_req = null;
    this.alter_tablet_req_v2 = null;
    setRecv_timeIsSet(false);
    this.recv_time = 0;
    this.update_tablet_meta_info_req = null;
    this.drop_auto_increment_map_req = null;
    this.compaction_req = null;
    this.remote_snapshot_req = null;
    this.replicate_snapshot_req = null;
    this.update_schema_req = null;
  }

  /**
   * 
   * @see TAgentServiceVersion
   */
  @org.apache.thrift.annotation.Nullable
  public TAgentServiceVersion getProtocol_version() {
    return this.protocol_version;
  }

  /**
   * 
   * @see TAgentServiceVersion
   */
  public TAgentTaskRequest setProtocol_version(@org.apache.thrift.annotation.Nullable TAgentServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocol_version() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol_version() {
    return this.protocol_version != null;
  }

  public void setProtocol_versionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TTaskType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TTaskType getTask_type() {
    return this.task_type;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TTaskType
   */
  public TAgentTaskRequest setTask_type(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTaskType task_type) {
    this.task_type = task_type;
    return this;
  }

  public void unsetTask_type() {
    this.task_type = null;
  }

  /** Returns true if field task_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_type() {
    return this.task_type != null;
  }

  public void setTask_typeIsSet(boolean value) {
    if (!value) {
      this.task_type = null;
    }
  }

  public long getSignature() {
    return this.signature;
  }

  public TAgentTaskRequest setSignature(long signature) {
    this.signature = signature;
    setSignatureIsSet(true);
    return this;
  }

  public void unsetSignature() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIGNATURE_ISSET_ID);
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIGNATURE_ISSET_ID);
  }

  public void setSignatureIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIGNATURE_ISSET_ID, value);
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TPriority
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TPriority getPriority() {
    return this.priority;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TPriority
   */
  public TAgentTaskRequest setPriority(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPriority priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TCreateTabletReq getCreate_tablet_req() {
    return this.create_tablet_req;
  }

  public TAgentTaskRequest setCreate_tablet_req(@org.apache.thrift.annotation.Nullable TCreateTabletReq create_tablet_req) {
    this.create_tablet_req = create_tablet_req;
    return this;
  }

  public void unsetCreate_tablet_req() {
    this.create_tablet_req = null;
  }

  /** Returns true if field create_tablet_req is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_tablet_req() {
    return this.create_tablet_req != null;
  }

  public void setCreate_tablet_reqIsSet(boolean value) {
    if (!value) {
      this.create_tablet_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDropTabletReq getDrop_tablet_req() {
    return this.drop_tablet_req;
  }

  public TAgentTaskRequest setDrop_tablet_req(@org.apache.thrift.annotation.Nullable TDropTabletReq drop_tablet_req) {
    this.drop_tablet_req = drop_tablet_req;
    return this;
  }

  public void unsetDrop_tablet_req() {
    this.drop_tablet_req = null;
  }

  /** Returns true if field drop_tablet_req is set (has been assigned a value) and false otherwise */
  public boolean isSetDrop_tablet_req() {
    return this.drop_tablet_req != null;
  }

  public void setDrop_tablet_reqIsSet(boolean value) {
    if (!value) {
      this.drop_tablet_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TAlterTabletReq getAlter_tablet_req() {
    return this.alter_tablet_req;
  }

  public TAgentTaskRequest setAlter_tablet_req(@org.apache.thrift.annotation.Nullable TAlterTabletReq alter_tablet_req) {
    this.alter_tablet_req = alter_tablet_req;
    return this;
  }

  public void unsetAlter_tablet_req() {
    this.alter_tablet_req = null;
  }

  /** Returns true if field alter_tablet_req is set (has been assigned a value) and false otherwise */
  public boolean isSetAlter_tablet_req() {
    return this.alter_tablet_req != null;
  }

  public void setAlter_tablet_reqIsSet(boolean value) {
    if (!value) {
      this.alter_tablet_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TCloneReq getClone_req() {
    return this.clone_req;
  }

  public TAgentTaskRequest setClone_req(@org.apache.thrift.annotation.Nullable TCloneReq clone_req) {
    this.clone_req = clone_req;
    return this;
  }

  public void unsetClone_req() {
    this.clone_req = null;
  }

  /** Returns true if field clone_req is set (has been assigned a value) and false otherwise */
  public boolean isSetClone_req() {
    return this.clone_req != null;
  }

  public void setClone_reqIsSet(boolean value) {
    if (!value) {
      this.clone_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TPushReq getPush_req() {
    return this.push_req;
  }

  public TAgentTaskRequest setPush_req(@org.apache.thrift.annotation.Nullable TPushReq push_req) {
    this.push_req = push_req;
    return this;
  }

  public void unsetPush_req() {
    this.push_req = null;
  }

  /** Returns true if field push_req is set (has been assigned a value) and false otherwise */
  public boolean isSetPush_req() {
    return this.push_req != null;
  }

  public void setPush_reqIsSet(boolean value) {
    if (!value) {
      this.push_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TCancelDeleteDataReq getCancel_delete_data_req() {
    return this.cancel_delete_data_req;
  }

  public TAgentTaskRequest setCancel_delete_data_req(@org.apache.thrift.annotation.Nullable TCancelDeleteDataReq cancel_delete_data_req) {
    this.cancel_delete_data_req = cancel_delete_data_req;
    return this;
  }

  public void unsetCancel_delete_data_req() {
    this.cancel_delete_data_req = null;
  }

  /** Returns true if field cancel_delete_data_req is set (has been assigned a value) and false otherwise */
  public boolean isSetCancel_delete_data_req() {
    return this.cancel_delete_data_req != null;
  }

  public void setCancel_delete_data_reqIsSet(boolean value) {
    if (!value) {
      this.cancel_delete_data_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TResourceInfo getResource_info() {
    return this.resource_info;
  }

  public TAgentTaskRequest setResource_info(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TResourceInfo resource_info) {
    this.resource_info = resource_info;
    return this;
  }

  public void unsetResource_info() {
    this.resource_info = null;
  }

  /** Returns true if field resource_info is set (has been assigned a value) and false otherwise */
  public boolean isSetResource_info() {
    return this.resource_info != null;
  }

  public void setResource_infoIsSet(boolean value) {
    if (!value) {
      this.resource_info = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TStorageMediumMigrateReq getStorage_medium_migrate_req() {
    return this.storage_medium_migrate_req;
  }

  public TAgentTaskRequest setStorage_medium_migrate_req(@org.apache.thrift.annotation.Nullable TStorageMediumMigrateReq storage_medium_migrate_req) {
    this.storage_medium_migrate_req = storage_medium_migrate_req;
    return this;
  }

  public void unsetStorage_medium_migrate_req() {
    this.storage_medium_migrate_req = null;
  }

  /** Returns true if field storage_medium_migrate_req is set (has been assigned a value) and false otherwise */
  public boolean isSetStorage_medium_migrate_req() {
    return this.storage_medium_migrate_req != null;
  }

  public void setStorage_medium_migrate_reqIsSet(boolean value) {
    if (!value) {
      this.storage_medium_migrate_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TCheckConsistencyReq getCheck_consistency_req() {
    return this.check_consistency_req;
  }

  public TAgentTaskRequest setCheck_consistency_req(@org.apache.thrift.annotation.Nullable TCheckConsistencyReq check_consistency_req) {
    this.check_consistency_req = check_consistency_req;
    return this;
  }

  public void unsetCheck_consistency_req() {
    this.check_consistency_req = null;
  }

  /** Returns true if field check_consistency_req is set (has been assigned a value) and false otherwise */
  public boolean isSetCheck_consistency_req() {
    return this.check_consistency_req != null;
  }

  public void setCheck_consistency_reqIsSet(boolean value) {
    if (!value) {
      this.check_consistency_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TUploadReq getUpload_req() {
    return this.upload_req;
  }

  public TAgentTaskRequest setUpload_req(@org.apache.thrift.annotation.Nullable TUploadReq upload_req) {
    this.upload_req = upload_req;
    return this;
  }

  public void unsetUpload_req() {
    this.upload_req = null;
  }

  /** Returns true if field upload_req is set (has been assigned a value) and false otherwise */
  public boolean isSetUpload_req() {
    return this.upload_req != null;
  }

  public void setUpload_reqIsSet(boolean value) {
    if (!value) {
      this.upload_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDownloadReq getDownload_req() {
    return this.download_req;
  }

  public TAgentTaskRequest setDownload_req(@org.apache.thrift.annotation.Nullable TDownloadReq download_req) {
    this.download_req = download_req;
    return this;
  }

  public void unsetDownload_req() {
    this.download_req = null;
  }

  /** Returns true if field download_req is set (has been assigned a value) and false otherwise */
  public boolean isSetDownload_req() {
    return this.download_req != null;
  }

  public void setDownload_reqIsSet(boolean value) {
    if (!value) {
      this.download_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TSnapshotRequest getSnapshot_req() {
    return this.snapshot_req;
  }

  public TAgentTaskRequest setSnapshot_req(@org.apache.thrift.annotation.Nullable TSnapshotRequest snapshot_req) {
    this.snapshot_req = snapshot_req;
    return this;
  }

  public void unsetSnapshot_req() {
    this.snapshot_req = null;
  }

  /** Returns true if field snapshot_req is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshot_req() {
    return this.snapshot_req != null;
  }

  public void setSnapshot_reqIsSet(boolean value) {
    if (!value) {
      this.snapshot_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TReleaseSnapshotRequest getRelease_snapshot_req() {
    return this.release_snapshot_req;
  }

  public TAgentTaskRequest setRelease_snapshot_req(@org.apache.thrift.annotation.Nullable TReleaseSnapshotRequest release_snapshot_req) {
    this.release_snapshot_req = release_snapshot_req;
    return this;
  }

  public void unsetRelease_snapshot_req() {
    this.release_snapshot_req = null;
  }

  /** Returns true if field release_snapshot_req is set (has been assigned a value) and false otherwise */
  public boolean isSetRelease_snapshot_req() {
    return this.release_snapshot_req != null;
  }

  public void setRelease_snapshot_reqIsSet(boolean value) {
    if (!value) {
      this.release_snapshot_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TClearRemoteFileReq getClear_remote_file_req() {
    return this.clear_remote_file_req;
  }

  public TAgentTaskRequest setClear_remote_file_req(@org.apache.thrift.annotation.Nullable TClearRemoteFileReq clear_remote_file_req) {
    this.clear_remote_file_req = clear_remote_file_req;
    return this;
  }

  public void unsetClear_remote_file_req() {
    this.clear_remote_file_req = null;
  }

  /** Returns true if field clear_remote_file_req is set (has been assigned a value) and false otherwise */
  public boolean isSetClear_remote_file_req() {
    return this.clear_remote_file_req != null;
  }

  public void setClear_remote_file_reqIsSet(boolean value) {
    if (!value) {
      this.clear_remote_file_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TPublishVersionRequest getPublish_version_req() {
    return this.publish_version_req;
  }

  public TAgentTaskRequest setPublish_version_req(@org.apache.thrift.annotation.Nullable TPublishVersionRequest publish_version_req) {
    this.publish_version_req = publish_version_req;
    return this;
  }

  public void unsetPublish_version_req() {
    this.publish_version_req = null;
  }

  /** Returns true if field publish_version_req is set (has been assigned a value) and false otherwise */
  public boolean isSetPublish_version_req() {
    return this.publish_version_req != null;
  }

  public void setPublish_version_reqIsSet(boolean value) {
    if (!value) {
      this.publish_version_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TClearAlterTaskRequest getClear_alter_task_req() {
    return this.clear_alter_task_req;
  }

  public TAgentTaskRequest setClear_alter_task_req(@org.apache.thrift.annotation.Nullable TClearAlterTaskRequest clear_alter_task_req) {
    this.clear_alter_task_req = clear_alter_task_req;
    return this;
  }

  public void unsetClear_alter_task_req() {
    this.clear_alter_task_req = null;
  }

  /** Returns true if field clear_alter_task_req is set (has been assigned a value) and false otherwise */
  public boolean isSetClear_alter_task_req() {
    return this.clear_alter_task_req != null;
  }

  public void setClear_alter_task_reqIsSet(boolean value) {
    if (!value) {
      this.clear_alter_task_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TClearTransactionTaskRequest getClear_transaction_task_req() {
    return this.clear_transaction_task_req;
  }

  public TAgentTaskRequest setClear_transaction_task_req(@org.apache.thrift.annotation.Nullable TClearTransactionTaskRequest clear_transaction_task_req) {
    this.clear_transaction_task_req = clear_transaction_task_req;
    return this;
  }

  public void unsetClear_transaction_task_req() {
    this.clear_transaction_task_req = null;
  }

  /** Returns true if field clear_transaction_task_req is set (has been assigned a value) and false otherwise */
  public boolean isSetClear_transaction_task_req() {
    return this.clear_transaction_task_req != null;
  }

  public void setClear_transaction_task_reqIsSet(boolean value) {
    if (!value) {
      this.clear_transaction_task_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TMoveDirReq getMove_dir_req() {
    return this.move_dir_req;
  }

  public TAgentTaskRequest setMove_dir_req(@org.apache.thrift.annotation.Nullable TMoveDirReq move_dir_req) {
    this.move_dir_req = move_dir_req;
    return this;
  }

  public void unsetMove_dir_req() {
    this.move_dir_req = null;
  }

  /** Returns true if field move_dir_req is set (has been assigned a value) and false otherwise */
  public boolean isSetMove_dir_req() {
    return this.move_dir_req != null;
  }

  public void setMove_dir_reqIsSet(boolean value) {
    if (!value) {
      this.move_dir_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TRecoverTabletReq getRecover_tablet_req() {
    return this.recover_tablet_req;
  }

  public TAgentTaskRequest setRecover_tablet_req(@org.apache.thrift.annotation.Nullable TRecoverTabletReq recover_tablet_req) {
    this.recover_tablet_req = recover_tablet_req;
    return this;
  }

  public void unsetRecover_tablet_req() {
    this.recover_tablet_req = null;
  }

  /** Returns true if field recover_tablet_req is set (has been assigned a value) and false otherwise */
  public boolean isSetRecover_tablet_req() {
    return this.recover_tablet_req != null;
  }

  public void setRecover_tablet_reqIsSet(boolean value) {
    if (!value) {
      this.recover_tablet_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TAlterTabletReqV2 getAlter_tablet_req_v2() {
    return this.alter_tablet_req_v2;
  }

  public TAgentTaskRequest setAlter_tablet_req_v2(@org.apache.thrift.annotation.Nullable TAlterTabletReqV2 alter_tablet_req_v2) {
    this.alter_tablet_req_v2 = alter_tablet_req_v2;
    return this;
  }

  public void unsetAlter_tablet_req_v2() {
    this.alter_tablet_req_v2 = null;
  }

  /** Returns true if field alter_tablet_req_v2 is set (has been assigned a value) and false otherwise */
  public boolean isSetAlter_tablet_req_v2() {
    return this.alter_tablet_req_v2 != null;
  }

  public void setAlter_tablet_req_v2IsSet(boolean value) {
    if (!value) {
      this.alter_tablet_req_v2 = null;
    }
  }

  public long getRecv_time() {
    return this.recv_time;
  }

  public TAgentTaskRequest setRecv_time(long recv_time) {
    this.recv_time = recv_time;
    setRecv_timeIsSet(true);
    return this;
  }

  public void unsetRecv_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECV_TIME_ISSET_ID);
  }

  /** Returns true if field recv_time is set (has been assigned a value) and false otherwise */
  public boolean isSetRecv_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECV_TIME_ISSET_ID);
  }

  public void setRecv_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECV_TIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TUpdateTabletMetaInfoReq getUpdate_tablet_meta_info_req() {
    return this.update_tablet_meta_info_req;
  }

  public TAgentTaskRequest setUpdate_tablet_meta_info_req(@org.apache.thrift.annotation.Nullable TUpdateTabletMetaInfoReq update_tablet_meta_info_req) {
    this.update_tablet_meta_info_req = update_tablet_meta_info_req;
    return this;
  }

  public void unsetUpdate_tablet_meta_info_req() {
    this.update_tablet_meta_info_req = null;
  }

  /** Returns true if field update_tablet_meta_info_req is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_tablet_meta_info_req() {
    return this.update_tablet_meta_info_req != null;
  }

  public void setUpdate_tablet_meta_info_reqIsSet(boolean value) {
    if (!value) {
      this.update_tablet_meta_info_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDropAutoIncrementMapReq getDrop_auto_increment_map_req() {
    return this.drop_auto_increment_map_req;
  }

  public TAgentTaskRequest setDrop_auto_increment_map_req(@org.apache.thrift.annotation.Nullable TDropAutoIncrementMapReq drop_auto_increment_map_req) {
    this.drop_auto_increment_map_req = drop_auto_increment_map_req;
    return this;
  }

  public void unsetDrop_auto_increment_map_req() {
    this.drop_auto_increment_map_req = null;
  }

  /** Returns true if field drop_auto_increment_map_req is set (has been assigned a value) and false otherwise */
  public boolean isSetDrop_auto_increment_map_req() {
    return this.drop_auto_increment_map_req != null;
  }

  public void setDrop_auto_increment_map_reqIsSet(boolean value) {
    if (!value) {
      this.drop_auto_increment_map_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TCompactionReq getCompaction_req() {
    return this.compaction_req;
  }

  public TAgentTaskRequest setCompaction_req(@org.apache.thrift.annotation.Nullable TCompactionReq compaction_req) {
    this.compaction_req = compaction_req;
    return this;
  }

  public void unsetCompaction_req() {
    this.compaction_req = null;
  }

  /** Returns true if field compaction_req is set (has been assigned a value) and false otherwise */
  public boolean isSetCompaction_req() {
    return this.compaction_req != null;
  }

  public void setCompaction_reqIsSet(boolean value) {
    if (!value) {
      this.compaction_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TRemoteSnapshotRequest getRemote_snapshot_req() {
    return this.remote_snapshot_req;
  }

  public TAgentTaskRequest setRemote_snapshot_req(@org.apache.thrift.annotation.Nullable TRemoteSnapshotRequest remote_snapshot_req) {
    this.remote_snapshot_req = remote_snapshot_req;
    return this;
  }

  public void unsetRemote_snapshot_req() {
    this.remote_snapshot_req = null;
  }

  /** Returns true if field remote_snapshot_req is set (has been assigned a value) and false otherwise */
  public boolean isSetRemote_snapshot_req() {
    return this.remote_snapshot_req != null;
  }

  public void setRemote_snapshot_reqIsSet(boolean value) {
    if (!value) {
      this.remote_snapshot_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TReplicateSnapshotRequest getReplicate_snapshot_req() {
    return this.replicate_snapshot_req;
  }

  public TAgentTaskRequest setReplicate_snapshot_req(@org.apache.thrift.annotation.Nullable TReplicateSnapshotRequest replicate_snapshot_req) {
    this.replicate_snapshot_req = replicate_snapshot_req;
    return this;
  }

  public void unsetReplicate_snapshot_req() {
    this.replicate_snapshot_req = null;
  }

  /** Returns true if field replicate_snapshot_req is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicate_snapshot_req() {
    return this.replicate_snapshot_req != null;
  }

  public void setReplicate_snapshot_reqIsSet(boolean value) {
    if (!value) {
      this.replicate_snapshot_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TUpdateSchemaReq getUpdate_schema_req() {
    return this.update_schema_req;
  }

  public TAgentTaskRequest setUpdate_schema_req(@org.apache.thrift.annotation.Nullable TUpdateSchemaReq update_schema_req) {
    this.update_schema_req = update_schema_req;
    return this;
  }

  public void unsetUpdate_schema_req() {
    this.update_schema_req = null;
  }

  /** Returns true if field update_schema_req is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_schema_req() {
    return this.update_schema_req != null;
  }

  public void setUpdate_schema_reqIsSet(boolean value) {
    if (!value) {
      this.update_schema_req = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocol_version();
      } else {
        setProtocol_version((TAgentServiceVersion)value);
      }
      break;

    case TASK_TYPE:
      if (value == null) {
        unsetTask_type();
      } else {
        setTask_type((io.datafibre.fibre.thrift.TTaskType)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((java.lang.Long)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((io.datafibre.fibre.thrift.TPriority)value);
      }
      break;

    case CREATE_TABLET_REQ:
      if (value == null) {
        unsetCreate_tablet_req();
      } else {
        setCreate_tablet_req((TCreateTabletReq)value);
      }
      break;

    case DROP_TABLET_REQ:
      if (value == null) {
        unsetDrop_tablet_req();
      } else {
        setDrop_tablet_req((TDropTabletReq)value);
      }
      break;

    case ALTER_TABLET_REQ:
      if (value == null) {
        unsetAlter_tablet_req();
      } else {
        setAlter_tablet_req((TAlterTabletReq)value);
      }
      break;

    case CLONE_REQ:
      if (value == null) {
        unsetClone_req();
      } else {
        setClone_req((TCloneReq)value);
      }
      break;

    case PUSH_REQ:
      if (value == null) {
        unsetPush_req();
      } else {
        setPush_req((TPushReq)value);
      }
      break;

    case CANCEL_DELETE_DATA_REQ:
      if (value == null) {
        unsetCancel_delete_data_req();
      } else {
        setCancel_delete_data_req((TCancelDeleteDataReq)value);
      }
      break;

    case RESOURCE_INFO:
      if (value == null) {
        unsetResource_info();
      } else {
        setResource_info((io.datafibre.fibre.thrift.TResourceInfo)value);
      }
      break;

    case STORAGE_MEDIUM_MIGRATE_REQ:
      if (value == null) {
        unsetStorage_medium_migrate_req();
      } else {
        setStorage_medium_migrate_req((TStorageMediumMigrateReq)value);
      }
      break;

    case CHECK_CONSISTENCY_REQ:
      if (value == null) {
        unsetCheck_consistency_req();
      } else {
        setCheck_consistency_req((TCheckConsistencyReq)value);
      }
      break;

    case UPLOAD_REQ:
      if (value == null) {
        unsetUpload_req();
      } else {
        setUpload_req((TUploadReq)value);
      }
      break;

    case DOWNLOAD_REQ:
      if (value == null) {
        unsetDownload_req();
      } else {
        setDownload_req((TDownloadReq)value);
      }
      break;

    case SNAPSHOT_REQ:
      if (value == null) {
        unsetSnapshot_req();
      } else {
        setSnapshot_req((TSnapshotRequest)value);
      }
      break;

    case RELEASE_SNAPSHOT_REQ:
      if (value == null) {
        unsetRelease_snapshot_req();
      } else {
        setRelease_snapshot_req((TReleaseSnapshotRequest)value);
      }
      break;

    case CLEAR_REMOTE_FILE_REQ:
      if (value == null) {
        unsetClear_remote_file_req();
      } else {
        setClear_remote_file_req((TClearRemoteFileReq)value);
      }
      break;

    case PUBLISH_VERSION_REQ:
      if (value == null) {
        unsetPublish_version_req();
      } else {
        setPublish_version_req((TPublishVersionRequest)value);
      }
      break;

    case CLEAR_ALTER_TASK_REQ:
      if (value == null) {
        unsetClear_alter_task_req();
      } else {
        setClear_alter_task_req((TClearAlterTaskRequest)value);
      }
      break;

    case CLEAR_TRANSACTION_TASK_REQ:
      if (value == null) {
        unsetClear_transaction_task_req();
      } else {
        setClear_transaction_task_req((TClearTransactionTaskRequest)value);
      }
      break;

    case MOVE_DIR_REQ:
      if (value == null) {
        unsetMove_dir_req();
      } else {
        setMove_dir_req((TMoveDirReq)value);
      }
      break;

    case RECOVER_TABLET_REQ:
      if (value == null) {
        unsetRecover_tablet_req();
      } else {
        setRecover_tablet_req((TRecoverTabletReq)value);
      }
      break;

    case ALTER_TABLET_REQ_V2:
      if (value == null) {
        unsetAlter_tablet_req_v2();
      } else {
        setAlter_tablet_req_v2((TAlterTabletReqV2)value);
      }
      break;

    case RECV_TIME:
      if (value == null) {
        unsetRecv_time();
      } else {
        setRecv_time((java.lang.Long)value);
      }
      break;

    case UPDATE_TABLET_META_INFO_REQ:
      if (value == null) {
        unsetUpdate_tablet_meta_info_req();
      } else {
        setUpdate_tablet_meta_info_req((TUpdateTabletMetaInfoReq)value);
      }
      break;

    case DROP_AUTO_INCREMENT_MAP_REQ:
      if (value == null) {
        unsetDrop_auto_increment_map_req();
      } else {
        setDrop_auto_increment_map_req((TDropAutoIncrementMapReq)value);
      }
      break;

    case COMPACTION_REQ:
      if (value == null) {
        unsetCompaction_req();
      } else {
        setCompaction_req((TCompactionReq)value);
      }
      break;

    case REMOTE_SNAPSHOT_REQ:
      if (value == null) {
        unsetRemote_snapshot_req();
      } else {
        setRemote_snapshot_req((TRemoteSnapshotRequest)value);
      }
      break;

    case REPLICATE_SNAPSHOT_REQ:
      if (value == null) {
        unsetReplicate_snapshot_req();
      } else {
        setReplicate_snapshot_req((TReplicateSnapshotRequest)value);
      }
      break;

    case UPDATE_SCHEMA_REQ:
      if (value == null) {
        unsetUpdate_schema_req();
      } else {
        setUpdate_schema_req((TUpdateSchemaReq)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocol_version();

    case TASK_TYPE:
      return getTask_type();

    case SIGNATURE:
      return getSignature();

    case PRIORITY:
      return getPriority();

    case CREATE_TABLET_REQ:
      return getCreate_tablet_req();

    case DROP_TABLET_REQ:
      return getDrop_tablet_req();

    case ALTER_TABLET_REQ:
      return getAlter_tablet_req();

    case CLONE_REQ:
      return getClone_req();

    case PUSH_REQ:
      return getPush_req();

    case CANCEL_DELETE_DATA_REQ:
      return getCancel_delete_data_req();

    case RESOURCE_INFO:
      return getResource_info();

    case STORAGE_MEDIUM_MIGRATE_REQ:
      return getStorage_medium_migrate_req();

    case CHECK_CONSISTENCY_REQ:
      return getCheck_consistency_req();

    case UPLOAD_REQ:
      return getUpload_req();

    case DOWNLOAD_REQ:
      return getDownload_req();

    case SNAPSHOT_REQ:
      return getSnapshot_req();

    case RELEASE_SNAPSHOT_REQ:
      return getRelease_snapshot_req();

    case CLEAR_REMOTE_FILE_REQ:
      return getClear_remote_file_req();

    case PUBLISH_VERSION_REQ:
      return getPublish_version_req();

    case CLEAR_ALTER_TASK_REQ:
      return getClear_alter_task_req();

    case CLEAR_TRANSACTION_TASK_REQ:
      return getClear_transaction_task_req();

    case MOVE_DIR_REQ:
      return getMove_dir_req();

    case RECOVER_TABLET_REQ:
      return getRecover_tablet_req();

    case ALTER_TABLET_REQ_V2:
      return getAlter_tablet_req_v2();

    case RECV_TIME:
      return getRecv_time();

    case UPDATE_TABLET_META_INFO_REQ:
      return getUpdate_tablet_meta_info_req();

    case DROP_AUTO_INCREMENT_MAP_REQ:
      return getDrop_auto_increment_map_req();

    case COMPACTION_REQ:
      return getCompaction_req();

    case REMOTE_SNAPSHOT_REQ:
      return getRemote_snapshot_req();

    case REPLICATE_SNAPSHOT_REQ:
      return getReplicate_snapshot_req();

    case UPDATE_SCHEMA_REQ:
      return getUpdate_schema_req();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocol_version();
    case TASK_TYPE:
      return isSetTask_type();
    case SIGNATURE:
      return isSetSignature();
    case PRIORITY:
      return isSetPriority();
    case CREATE_TABLET_REQ:
      return isSetCreate_tablet_req();
    case DROP_TABLET_REQ:
      return isSetDrop_tablet_req();
    case ALTER_TABLET_REQ:
      return isSetAlter_tablet_req();
    case CLONE_REQ:
      return isSetClone_req();
    case PUSH_REQ:
      return isSetPush_req();
    case CANCEL_DELETE_DATA_REQ:
      return isSetCancel_delete_data_req();
    case RESOURCE_INFO:
      return isSetResource_info();
    case STORAGE_MEDIUM_MIGRATE_REQ:
      return isSetStorage_medium_migrate_req();
    case CHECK_CONSISTENCY_REQ:
      return isSetCheck_consistency_req();
    case UPLOAD_REQ:
      return isSetUpload_req();
    case DOWNLOAD_REQ:
      return isSetDownload_req();
    case SNAPSHOT_REQ:
      return isSetSnapshot_req();
    case RELEASE_SNAPSHOT_REQ:
      return isSetRelease_snapshot_req();
    case CLEAR_REMOTE_FILE_REQ:
      return isSetClear_remote_file_req();
    case PUBLISH_VERSION_REQ:
      return isSetPublish_version_req();
    case CLEAR_ALTER_TASK_REQ:
      return isSetClear_alter_task_req();
    case CLEAR_TRANSACTION_TASK_REQ:
      return isSetClear_transaction_task_req();
    case MOVE_DIR_REQ:
      return isSetMove_dir_req();
    case RECOVER_TABLET_REQ:
      return isSetRecover_tablet_req();
    case ALTER_TABLET_REQ_V2:
      return isSetAlter_tablet_req_v2();
    case RECV_TIME:
      return isSetRecv_time();
    case UPDATE_TABLET_META_INFO_REQ:
      return isSetUpdate_tablet_meta_info_req();
    case DROP_AUTO_INCREMENT_MAP_REQ:
      return isSetDrop_auto_increment_map_req();
    case COMPACTION_REQ:
      return isSetCompaction_req();
    case REMOTE_SNAPSHOT_REQ:
      return isSetRemote_snapshot_req();
    case REPLICATE_SNAPSHOT_REQ:
      return isSetReplicate_snapshot_req();
    case UPDATE_SCHEMA_REQ:
      return isSetUpdate_schema_req();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TAgentTaskRequest)
      return this.equals((TAgentTaskRequest)that);
    return false;
  }

  public boolean equals(TAgentTaskRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_protocol_version = true && this.isSetProtocol_version();
    boolean that_present_protocol_version = true && that.isSetProtocol_version();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_task_type = true && this.isSetTask_type();
    boolean that_present_task_type = true && that.isSetTask_type();
    if (this_present_task_type || that_present_task_type) {
      if (!(this_present_task_type && that_present_task_type))
        return false;
      if (!this.task_type.equals(that.task_type))
        return false;
    }

    boolean this_present_signature = true;
    boolean that_present_signature = true;
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (this.signature != that.signature)
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_create_tablet_req = true && this.isSetCreate_tablet_req();
    boolean that_present_create_tablet_req = true && that.isSetCreate_tablet_req();
    if (this_present_create_tablet_req || that_present_create_tablet_req) {
      if (!(this_present_create_tablet_req && that_present_create_tablet_req))
        return false;
      if (!this.create_tablet_req.equals(that.create_tablet_req))
        return false;
    }

    boolean this_present_drop_tablet_req = true && this.isSetDrop_tablet_req();
    boolean that_present_drop_tablet_req = true && that.isSetDrop_tablet_req();
    if (this_present_drop_tablet_req || that_present_drop_tablet_req) {
      if (!(this_present_drop_tablet_req && that_present_drop_tablet_req))
        return false;
      if (!this.drop_tablet_req.equals(that.drop_tablet_req))
        return false;
    }

    boolean this_present_alter_tablet_req = true && this.isSetAlter_tablet_req();
    boolean that_present_alter_tablet_req = true && that.isSetAlter_tablet_req();
    if (this_present_alter_tablet_req || that_present_alter_tablet_req) {
      if (!(this_present_alter_tablet_req && that_present_alter_tablet_req))
        return false;
      if (!this.alter_tablet_req.equals(that.alter_tablet_req))
        return false;
    }

    boolean this_present_clone_req = true && this.isSetClone_req();
    boolean that_present_clone_req = true && that.isSetClone_req();
    if (this_present_clone_req || that_present_clone_req) {
      if (!(this_present_clone_req && that_present_clone_req))
        return false;
      if (!this.clone_req.equals(that.clone_req))
        return false;
    }

    boolean this_present_push_req = true && this.isSetPush_req();
    boolean that_present_push_req = true && that.isSetPush_req();
    if (this_present_push_req || that_present_push_req) {
      if (!(this_present_push_req && that_present_push_req))
        return false;
      if (!this.push_req.equals(that.push_req))
        return false;
    }

    boolean this_present_cancel_delete_data_req = true && this.isSetCancel_delete_data_req();
    boolean that_present_cancel_delete_data_req = true && that.isSetCancel_delete_data_req();
    if (this_present_cancel_delete_data_req || that_present_cancel_delete_data_req) {
      if (!(this_present_cancel_delete_data_req && that_present_cancel_delete_data_req))
        return false;
      if (!this.cancel_delete_data_req.equals(that.cancel_delete_data_req))
        return false;
    }

    boolean this_present_resource_info = true && this.isSetResource_info();
    boolean that_present_resource_info = true && that.isSetResource_info();
    if (this_present_resource_info || that_present_resource_info) {
      if (!(this_present_resource_info && that_present_resource_info))
        return false;
      if (!this.resource_info.equals(that.resource_info))
        return false;
    }

    boolean this_present_storage_medium_migrate_req = true && this.isSetStorage_medium_migrate_req();
    boolean that_present_storage_medium_migrate_req = true && that.isSetStorage_medium_migrate_req();
    if (this_present_storage_medium_migrate_req || that_present_storage_medium_migrate_req) {
      if (!(this_present_storage_medium_migrate_req && that_present_storage_medium_migrate_req))
        return false;
      if (!this.storage_medium_migrate_req.equals(that.storage_medium_migrate_req))
        return false;
    }

    boolean this_present_check_consistency_req = true && this.isSetCheck_consistency_req();
    boolean that_present_check_consistency_req = true && that.isSetCheck_consistency_req();
    if (this_present_check_consistency_req || that_present_check_consistency_req) {
      if (!(this_present_check_consistency_req && that_present_check_consistency_req))
        return false;
      if (!this.check_consistency_req.equals(that.check_consistency_req))
        return false;
    }

    boolean this_present_upload_req = true && this.isSetUpload_req();
    boolean that_present_upload_req = true && that.isSetUpload_req();
    if (this_present_upload_req || that_present_upload_req) {
      if (!(this_present_upload_req && that_present_upload_req))
        return false;
      if (!this.upload_req.equals(that.upload_req))
        return false;
    }

    boolean this_present_download_req = true && this.isSetDownload_req();
    boolean that_present_download_req = true && that.isSetDownload_req();
    if (this_present_download_req || that_present_download_req) {
      if (!(this_present_download_req && that_present_download_req))
        return false;
      if (!this.download_req.equals(that.download_req))
        return false;
    }

    boolean this_present_snapshot_req = true && this.isSetSnapshot_req();
    boolean that_present_snapshot_req = true && that.isSetSnapshot_req();
    if (this_present_snapshot_req || that_present_snapshot_req) {
      if (!(this_present_snapshot_req && that_present_snapshot_req))
        return false;
      if (!this.snapshot_req.equals(that.snapshot_req))
        return false;
    }

    boolean this_present_release_snapshot_req = true && this.isSetRelease_snapshot_req();
    boolean that_present_release_snapshot_req = true && that.isSetRelease_snapshot_req();
    if (this_present_release_snapshot_req || that_present_release_snapshot_req) {
      if (!(this_present_release_snapshot_req && that_present_release_snapshot_req))
        return false;
      if (!this.release_snapshot_req.equals(that.release_snapshot_req))
        return false;
    }

    boolean this_present_clear_remote_file_req = true && this.isSetClear_remote_file_req();
    boolean that_present_clear_remote_file_req = true && that.isSetClear_remote_file_req();
    if (this_present_clear_remote_file_req || that_present_clear_remote_file_req) {
      if (!(this_present_clear_remote_file_req && that_present_clear_remote_file_req))
        return false;
      if (!this.clear_remote_file_req.equals(that.clear_remote_file_req))
        return false;
    }

    boolean this_present_publish_version_req = true && this.isSetPublish_version_req();
    boolean that_present_publish_version_req = true && that.isSetPublish_version_req();
    if (this_present_publish_version_req || that_present_publish_version_req) {
      if (!(this_present_publish_version_req && that_present_publish_version_req))
        return false;
      if (!this.publish_version_req.equals(that.publish_version_req))
        return false;
    }

    boolean this_present_clear_alter_task_req = true && this.isSetClear_alter_task_req();
    boolean that_present_clear_alter_task_req = true && that.isSetClear_alter_task_req();
    if (this_present_clear_alter_task_req || that_present_clear_alter_task_req) {
      if (!(this_present_clear_alter_task_req && that_present_clear_alter_task_req))
        return false;
      if (!this.clear_alter_task_req.equals(that.clear_alter_task_req))
        return false;
    }

    boolean this_present_clear_transaction_task_req = true && this.isSetClear_transaction_task_req();
    boolean that_present_clear_transaction_task_req = true && that.isSetClear_transaction_task_req();
    if (this_present_clear_transaction_task_req || that_present_clear_transaction_task_req) {
      if (!(this_present_clear_transaction_task_req && that_present_clear_transaction_task_req))
        return false;
      if (!this.clear_transaction_task_req.equals(that.clear_transaction_task_req))
        return false;
    }

    boolean this_present_move_dir_req = true && this.isSetMove_dir_req();
    boolean that_present_move_dir_req = true && that.isSetMove_dir_req();
    if (this_present_move_dir_req || that_present_move_dir_req) {
      if (!(this_present_move_dir_req && that_present_move_dir_req))
        return false;
      if (!this.move_dir_req.equals(that.move_dir_req))
        return false;
    }

    boolean this_present_recover_tablet_req = true && this.isSetRecover_tablet_req();
    boolean that_present_recover_tablet_req = true && that.isSetRecover_tablet_req();
    if (this_present_recover_tablet_req || that_present_recover_tablet_req) {
      if (!(this_present_recover_tablet_req && that_present_recover_tablet_req))
        return false;
      if (!this.recover_tablet_req.equals(that.recover_tablet_req))
        return false;
    }

    boolean this_present_alter_tablet_req_v2 = true && this.isSetAlter_tablet_req_v2();
    boolean that_present_alter_tablet_req_v2 = true && that.isSetAlter_tablet_req_v2();
    if (this_present_alter_tablet_req_v2 || that_present_alter_tablet_req_v2) {
      if (!(this_present_alter_tablet_req_v2 && that_present_alter_tablet_req_v2))
        return false;
      if (!this.alter_tablet_req_v2.equals(that.alter_tablet_req_v2))
        return false;
    }

    boolean this_present_recv_time = true && this.isSetRecv_time();
    boolean that_present_recv_time = true && that.isSetRecv_time();
    if (this_present_recv_time || that_present_recv_time) {
      if (!(this_present_recv_time && that_present_recv_time))
        return false;
      if (this.recv_time != that.recv_time)
        return false;
    }

    boolean this_present_update_tablet_meta_info_req = true && this.isSetUpdate_tablet_meta_info_req();
    boolean that_present_update_tablet_meta_info_req = true && that.isSetUpdate_tablet_meta_info_req();
    if (this_present_update_tablet_meta_info_req || that_present_update_tablet_meta_info_req) {
      if (!(this_present_update_tablet_meta_info_req && that_present_update_tablet_meta_info_req))
        return false;
      if (!this.update_tablet_meta_info_req.equals(that.update_tablet_meta_info_req))
        return false;
    }

    boolean this_present_drop_auto_increment_map_req = true && this.isSetDrop_auto_increment_map_req();
    boolean that_present_drop_auto_increment_map_req = true && that.isSetDrop_auto_increment_map_req();
    if (this_present_drop_auto_increment_map_req || that_present_drop_auto_increment_map_req) {
      if (!(this_present_drop_auto_increment_map_req && that_present_drop_auto_increment_map_req))
        return false;
      if (!this.drop_auto_increment_map_req.equals(that.drop_auto_increment_map_req))
        return false;
    }

    boolean this_present_compaction_req = true && this.isSetCompaction_req();
    boolean that_present_compaction_req = true && that.isSetCompaction_req();
    if (this_present_compaction_req || that_present_compaction_req) {
      if (!(this_present_compaction_req && that_present_compaction_req))
        return false;
      if (!this.compaction_req.equals(that.compaction_req))
        return false;
    }

    boolean this_present_remote_snapshot_req = true && this.isSetRemote_snapshot_req();
    boolean that_present_remote_snapshot_req = true && that.isSetRemote_snapshot_req();
    if (this_present_remote_snapshot_req || that_present_remote_snapshot_req) {
      if (!(this_present_remote_snapshot_req && that_present_remote_snapshot_req))
        return false;
      if (!this.remote_snapshot_req.equals(that.remote_snapshot_req))
        return false;
    }

    boolean this_present_replicate_snapshot_req = true && this.isSetReplicate_snapshot_req();
    boolean that_present_replicate_snapshot_req = true && that.isSetReplicate_snapshot_req();
    if (this_present_replicate_snapshot_req || that_present_replicate_snapshot_req) {
      if (!(this_present_replicate_snapshot_req && that_present_replicate_snapshot_req))
        return false;
      if (!this.replicate_snapshot_req.equals(that.replicate_snapshot_req))
        return false;
    }

    boolean this_present_update_schema_req = true && this.isSetUpdate_schema_req();
    boolean that_present_update_schema_req = true && that.isSetUpdate_schema_req();
    if (this_present_update_schema_req || that_present_update_schema_req) {
      if (!(this_present_update_schema_req && that_present_update_schema_req))
        return false;
      if (!this.update_schema_req.equals(that.update_schema_req))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProtocol_version()) ? 131071 : 524287);
    if (isSetProtocol_version())
      hashCode = hashCode * 8191 + protocol_version.getValue();

    hashCode = hashCode * 8191 + ((isSetTask_type()) ? 131071 : 524287);
    if (isSetTask_type())
      hashCode = hashCode * 8191 + task_type.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(signature);

    hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
    if (isSetPriority())
      hashCode = hashCode * 8191 + priority.getValue();

    hashCode = hashCode * 8191 + ((isSetCreate_tablet_req()) ? 131071 : 524287);
    if (isSetCreate_tablet_req())
      hashCode = hashCode * 8191 + create_tablet_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetDrop_tablet_req()) ? 131071 : 524287);
    if (isSetDrop_tablet_req())
      hashCode = hashCode * 8191 + drop_tablet_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetAlter_tablet_req()) ? 131071 : 524287);
    if (isSetAlter_tablet_req())
      hashCode = hashCode * 8191 + alter_tablet_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetClone_req()) ? 131071 : 524287);
    if (isSetClone_req())
      hashCode = hashCode * 8191 + clone_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetPush_req()) ? 131071 : 524287);
    if (isSetPush_req())
      hashCode = hashCode * 8191 + push_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetCancel_delete_data_req()) ? 131071 : 524287);
    if (isSetCancel_delete_data_req())
      hashCode = hashCode * 8191 + cancel_delete_data_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetResource_info()) ? 131071 : 524287);
    if (isSetResource_info())
      hashCode = hashCode * 8191 + resource_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetStorage_medium_migrate_req()) ? 131071 : 524287);
    if (isSetStorage_medium_migrate_req())
      hashCode = hashCode * 8191 + storage_medium_migrate_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetCheck_consistency_req()) ? 131071 : 524287);
    if (isSetCheck_consistency_req())
      hashCode = hashCode * 8191 + check_consistency_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpload_req()) ? 131071 : 524287);
    if (isSetUpload_req())
      hashCode = hashCode * 8191 + upload_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetDownload_req()) ? 131071 : 524287);
    if (isSetDownload_req())
      hashCode = hashCode * 8191 + download_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetSnapshot_req()) ? 131071 : 524287);
    if (isSetSnapshot_req())
      hashCode = hashCode * 8191 + snapshot_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetRelease_snapshot_req()) ? 131071 : 524287);
    if (isSetRelease_snapshot_req())
      hashCode = hashCode * 8191 + release_snapshot_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetClear_remote_file_req()) ? 131071 : 524287);
    if (isSetClear_remote_file_req())
      hashCode = hashCode * 8191 + clear_remote_file_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetPublish_version_req()) ? 131071 : 524287);
    if (isSetPublish_version_req())
      hashCode = hashCode * 8191 + publish_version_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetClear_alter_task_req()) ? 131071 : 524287);
    if (isSetClear_alter_task_req())
      hashCode = hashCode * 8191 + clear_alter_task_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetClear_transaction_task_req()) ? 131071 : 524287);
    if (isSetClear_transaction_task_req())
      hashCode = hashCode * 8191 + clear_transaction_task_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetMove_dir_req()) ? 131071 : 524287);
    if (isSetMove_dir_req())
      hashCode = hashCode * 8191 + move_dir_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetRecover_tablet_req()) ? 131071 : 524287);
    if (isSetRecover_tablet_req())
      hashCode = hashCode * 8191 + recover_tablet_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetAlter_tablet_req_v2()) ? 131071 : 524287);
    if (isSetAlter_tablet_req_v2())
      hashCode = hashCode * 8191 + alter_tablet_req_v2.hashCode();

    hashCode = hashCode * 8191 + ((isSetRecv_time()) ? 131071 : 524287);
    if (isSetRecv_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recv_time);

    hashCode = hashCode * 8191 + ((isSetUpdate_tablet_meta_info_req()) ? 131071 : 524287);
    if (isSetUpdate_tablet_meta_info_req())
      hashCode = hashCode * 8191 + update_tablet_meta_info_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetDrop_auto_increment_map_req()) ? 131071 : 524287);
    if (isSetDrop_auto_increment_map_req())
      hashCode = hashCode * 8191 + drop_auto_increment_map_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompaction_req()) ? 131071 : 524287);
    if (isSetCompaction_req())
      hashCode = hashCode * 8191 + compaction_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemote_snapshot_req()) ? 131071 : 524287);
    if (isSetRemote_snapshot_req())
      hashCode = hashCode * 8191 + remote_snapshot_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetReplicate_snapshot_req()) ? 131071 : 524287);
    if (isSetReplicate_snapshot_req())
      hashCode = hashCode * 8191 + replicate_snapshot_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdate_schema_req()) ? 131071 : 524287);
    if (isSetUpdate_schema_req())
      hashCode = hashCode * 8191 + update_schema_req.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TAgentTaskRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetProtocol_version(), other.isSetProtocol_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, other.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTask_type(), other.isSetTask_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_type, other.task_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSignature(), other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPriority(), other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreate_tablet_req(), other.isSetCreate_tablet_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_tablet_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_tablet_req, other.create_tablet_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDrop_tablet_req(), other.isSetDrop_tablet_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrop_tablet_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drop_tablet_req, other.drop_tablet_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAlter_tablet_req(), other.isSetAlter_tablet_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlter_tablet_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_tablet_req, other.alter_tablet_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClone_req(), other.isSetClone_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClone_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clone_req, other.clone_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPush_req(), other.isSetPush_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPush_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.push_req, other.push_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCancel_delete_data_req(), other.isSetCancel_delete_data_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancel_delete_data_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancel_delete_data_req, other.cancel_delete_data_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResource_info(), other.isSetResource_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_info, other.resource_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStorage_medium_migrate_req(), other.isSetStorage_medium_migrate_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorage_medium_migrate_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_medium_migrate_req, other.storage_medium_migrate_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCheck_consistency_req(), other.isSetCheck_consistency_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheck_consistency_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.check_consistency_req, other.check_consistency_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUpload_req(), other.isSetUpload_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpload_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upload_req, other.upload_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDownload_req(), other.isSetDownload_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownload_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.download_req, other.download_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSnapshot_req(), other.isSetSnapshot_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshot_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshot_req, other.snapshot_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRelease_snapshot_req(), other.isSetRelease_snapshot_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelease_snapshot_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.release_snapshot_req, other.release_snapshot_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClear_remote_file_req(), other.isSetClear_remote_file_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClear_remote_file_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clear_remote_file_req, other.clear_remote_file_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPublish_version_req(), other.isSetPublish_version_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublish_version_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publish_version_req, other.publish_version_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClear_alter_task_req(), other.isSetClear_alter_task_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClear_alter_task_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clear_alter_task_req, other.clear_alter_task_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClear_transaction_task_req(), other.isSetClear_transaction_task_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClear_transaction_task_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clear_transaction_task_req, other.clear_transaction_task_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMove_dir_req(), other.isSetMove_dir_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMove_dir_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.move_dir_req, other.move_dir_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRecover_tablet_req(), other.isSetRecover_tablet_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecover_tablet_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recover_tablet_req, other.recover_tablet_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAlter_tablet_req_v2(), other.isSetAlter_tablet_req_v2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlter_tablet_req_v2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_tablet_req_v2, other.alter_tablet_req_v2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRecv_time(), other.isSetRecv_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecv_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recv_time, other.recv_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUpdate_tablet_meta_info_req(), other.isSetUpdate_tablet_meta_info_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_tablet_meta_info_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_tablet_meta_info_req, other.update_tablet_meta_info_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDrop_auto_increment_map_req(), other.isSetDrop_auto_increment_map_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrop_auto_increment_map_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drop_auto_increment_map_req, other.drop_auto_increment_map_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCompaction_req(), other.isSetCompaction_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompaction_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compaction_req, other.compaction_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRemote_snapshot_req(), other.isSetRemote_snapshot_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemote_snapshot_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remote_snapshot_req, other.remote_snapshot_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReplicate_snapshot_req(), other.isSetReplicate_snapshot_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicate_snapshot_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicate_snapshot_req, other.replicate_snapshot_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUpdate_schema_req(), other.isSetUpdate_schema_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_schema_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_schema_req, other.update_schema_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAgentTaskRequest(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("task_type:");
    if (this.task_type == null) {
      sb.append("null");
    } else {
      sb.append(this.task_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signature:");
    sb.append(this.signature);
    first = false;
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      if (this.priority == null) {
        sb.append("null");
      } else {
        sb.append(this.priority);
      }
      first = false;
    }
    if (isSetCreate_tablet_req()) {
      if (!first) sb.append(", ");
      sb.append("create_tablet_req:");
      if (this.create_tablet_req == null) {
        sb.append("null");
      } else {
        sb.append(this.create_tablet_req);
      }
      first = false;
    }
    if (isSetDrop_tablet_req()) {
      if (!first) sb.append(", ");
      sb.append("drop_tablet_req:");
      if (this.drop_tablet_req == null) {
        sb.append("null");
      } else {
        sb.append(this.drop_tablet_req);
      }
      first = false;
    }
    if (isSetAlter_tablet_req()) {
      if (!first) sb.append(", ");
      sb.append("alter_tablet_req:");
      if (this.alter_tablet_req == null) {
        sb.append("null");
      } else {
        sb.append(this.alter_tablet_req);
      }
      first = false;
    }
    if (isSetClone_req()) {
      if (!first) sb.append(", ");
      sb.append("clone_req:");
      if (this.clone_req == null) {
        sb.append("null");
      } else {
        sb.append(this.clone_req);
      }
      first = false;
    }
    if (isSetPush_req()) {
      if (!first) sb.append(", ");
      sb.append("push_req:");
      if (this.push_req == null) {
        sb.append("null");
      } else {
        sb.append(this.push_req);
      }
      first = false;
    }
    if (isSetCancel_delete_data_req()) {
      if (!first) sb.append(", ");
      sb.append("cancel_delete_data_req:");
      if (this.cancel_delete_data_req == null) {
        sb.append("null");
      } else {
        sb.append(this.cancel_delete_data_req);
      }
      first = false;
    }
    if (isSetResource_info()) {
      if (!first) sb.append(", ");
      sb.append("resource_info:");
      if (this.resource_info == null) {
        sb.append("null");
      } else {
        sb.append(this.resource_info);
      }
      first = false;
    }
    if (isSetStorage_medium_migrate_req()) {
      if (!first) sb.append(", ");
      sb.append("storage_medium_migrate_req:");
      if (this.storage_medium_migrate_req == null) {
        sb.append("null");
      } else {
        sb.append(this.storage_medium_migrate_req);
      }
      first = false;
    }
    if (isSetCheck_consistency_req()) {
      if (!first) sb.append(", ");
      sb.append("check_consistency_req:");
      if (this.check_consistency_req == null) {
        sb.append("null");
      } else {
        sb.append(this.check_consistency_req);
      }
      first = false;
    }
    if (isSetUpload_req()) {
      if (!first) sb.append(", ");
      sb.append("upload_req:");
      if (this.upload_req == null) {
        sb.append("null");
      } else {
        sb.append(this.upload_req);
      }
      first = false;
    }
    if (isSetDownload_req()) {
      if (!first) sb.append(", ");
      sb.append("download_req:");
      if (this.download_req == null) {
        sb.append("null");
      } else {
        sb.append(this.download_req);
      }
      first = false;
    }
    if (isSetSnapshot_req()) {
      if (!first) sb.append(", ");
      sb.append("snapshot_req:");
      if (this.snapshot_req == null) {
        sb.append("null");
      } else {
        sb.append(this.snapshot_req);
      }
      first = false;
    }
    if (isSetRelease_snapshot_req()) {
      if (!first) sb.append(", ");
      sb.append("release_snapshot_req:");
      if (this.release_snapshot_req == null) {
        sb.append("null");
      } else {
        sb.append(this.release_snapshot_req);
      }
      first = false;
    }
    if (isSetClear_remote_file_req()) {
      if (!first) sb.append(", ");
      sb.append("clear_remote_file_req:");
      if (this.clear_remote_file_req == null) {
        sb.append("null");
      } else {
        sb.append(this.clear_remote_file_req);
      }
      first = false;
    }
    if (isSetPublish_version_req()) {
      if (!first) sb.append(", ");
      sb.append("publish_version_req:");
      if (this.publish_version_req == null) {
        sb.append("null");
      } else {
        sb.append(this.publish_version_req);
      }
      first = false;
    }
    if (isSetClear_alter_task_req()) {
      if (!first) sb.append(", ");
      sb.append("clear_alter_task_req:");
      if (this.clear_alter_task_req == null) {
        sb.append("null");
      } else {
        sb.append(this.clear_alter_task_req);
      }
      first = false;
    }
    if (isSetClear_transaction_task_req()) {
      if (!first) sb.append(", ");
      sb.append("clear_transaction_task_req:");
      if (this.clear_transaction_task_req == null) {
        sb.append("null");
      } else {
        sb.append(this.clear_transaction_task_req);
      }
      first = false;
    }
    if (isSetMove_dir_req()) {
      if (!first) sb.append(", ");
      sb.append("move_dir_req:");
      if (this.move_dir_req == null) {
        sb.append("null");
      } else {
        sb.append(this.move_dir_req);
      }
      first = false;
    }
    if (isSetRecover_tablet_req()) {
      if (!first) sb.append(", ");
      sb.append("recover_tablet_req:");
      if (this.recover_tablet_req == null) {
        sb.append("null");
      } else {
        sb.append(this.recover_tablet_req);
      }
      first = false;
    }
    if (isSetAlter_tablet_req_v2()) {
      if (!first) sb.append(", ");
      sb.append("alter_tablet_req_v2:");
      if (this.alter_tablet_req_v2 == null) {
        sb.append("null");
      } else {
        sb.append(this.alter_tablet_req_v2);
      }
      first = false;
    }
    if (isSetRecv_time()) {
      if (!first) sb.append(", ");
      sb.append("recv_time:");
      sb.append(this.recv_time);
      first = false;
    }
    if (isSetUpdate_tablet_meta_info_req()) {
      if (!first) sb.append(", ");
      sb.append("update_tablet_meta_info_req:");
      if (this.update_tablet_meta_info_req == null) {
        sb.append("null");
      } else {
        sb.append(this.update_tablet_meta_info_req);
      }
      first = false;
    }
    if (isSetDrop_auto_increment_map_req()) {
      if (!first) sb.append(", ");
      sb.append("drop_auto_increment_map_req:");
      if (this.drop_auto_increment_map_req == null) {
        sb.append("null");
      } else {
        sb.append(this.drop_auto_increment_map_req);
      }
      first = false;
    }
    if (isSetCompaction_req()) {
      if (!first) sb.append(", ");
      sb.append("compaction_req:");
      if (this.compaction_req == null) {
        sb.append("null");
      } else {
        sb.append(this.compaction_req);
      }
      first = false;
    }
    if (isSetRemote_snapshot_req()) {
      if (!first) sb.append(", ");
      sb.append("remote_snapshot_req:");
      if (this.remote_snapshot_req == null) {
        sb.append("null");
      } else {
        sb.append(this.remote_snapshot_req);
      }
      first = false;
    }
    if (isSetReplicate_snapshot_req()) {
      if (!first) sb.append(", ");
      sb.append("replicate_snapshot_req:");
      if (this.replicate_snapshot_req == null) {
        sb.append("null");
      } else {
        sb.append(this.replicate_snapshot_req);
      }
      first = false;
    }
    if (isSetUpdate_schema_req()) {
      if (!first) sb.append(", ");
      sb.append("update_schema_req:");
      if (this.update_schema_req == null) {
        sb.append("null");
      } else {
        sb.append(this.update_schema_req);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    if (task_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'task_type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'signature' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (create_tablet_req != null) {
      create_tablet_req.validate();
    }
    if (drop_tablet_req != null) {
      drop_tablet_req.validate();
    }
    if (alter_tablet_req != null) {
      alter_tablet_req.validate();
    }
    if (clone_req != null) {
      clone_req.validate();
    }
    if (push_req != null) {
      push_req.validate();
    }
    if (cancel_delete_data_req != null) {
      cancel_delete_data_req.validate();
    }
    if (resource_info != null) {
      resource_info.validate();
    }
    if (storage_medium_migrate_req != null) {
      storage_medium_migrate_req.validate();
    }
    if (check_consistency_req != null) {
      check_consistency_req.validate();
    }
    if (upload_req != null) {
      upload_req.validate();
    }
    if (download_req != null) {
      download_req.validate();
    }
    if (snapshot_req != null) {
      snapshot_req.validate();
    }
    if (release_snapshot_req != null) {
      release_snapshot_req.validate();
    }
    if (clear_remote_file_req != null) {
      clear_remote_file_req.validate();
    }
    if (publish_version_req != null) {
      publish_version_req.validate();
    }
    if (clear_alter_task_req != null) {
      clear_alter_task_req.validate();
    }
    if (clear_transaction_task_req != null) {
      clear_transaction_task_req.validate();
    }
    if (move_dir_req != null) {
      move_dir_req.validate();
    }
    if (recover_tablet_req != null) {
      recover_tablet_req.validate();
    }
    if (alter_tablet_req_v2 != null) {
      alter_tablet_req_v2.validate();
    }
    if (update_tablet_meta_info_req != null) {
      update_tablet_meta_info_req.validate();
    }
    if (drop_auto_increment_map_req != null) {
      drop_auto_increment_map_req.validate();
    }
    if (compaction_req != null) {
      compaction_req.validate();
    }
    if (remote_snapshot_req != null) {
      remote_snapshot_req.validate();
    }
    if (replicate_snapshot_req != null) {
      replicate_snapshot_req.validate();
    }
    if (update_schema_req != null) {
      update_schema_req.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAgentTaskRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAgentTaskRequestStandardScheme getScheme() {
      return new TAgentTaskRequestStandardScheme();
    }
  }

  private static class TAgentTaskRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAgentTaskRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TAgentTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = io.datafibre.fibre.thrift.TAgentServiceVersion.findByValue(iprot.readI32());
              struct.setProtocol_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.task_type = io.datafibre.fibre.thrift.TTaskType.findByValue(iprot.readI32());
              struct.setTask_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.signature = iprot.readI64();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = io.datafibre.fibre.thrift.TPriority.findByValue(iprot.readI32());
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATE_TABLET_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.create_tablet_req = new TCreateTabletReq();
              struct.create_tablet_req.read(iprot);
              struct.setCreate_tablet_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DROP_TABLET_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.drop_tablet_req = new TDropTabletReq();
              struct.drop_tablet_req.read(iprot);
              struct.setDrop_tablet_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ALTER_TABLET_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.alter_tablet_req = new TAlterTabletReq();
              struct.alter_tablet_req.read(iprot);
              struct.setAlter_tablet_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLONE_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clone_req = new TCloneReq();
              struct.clone_req.read(iprot);
              struct.setClone_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PUSH_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.push_req = new TPushReq();
              struct.push_req.read(iprot);
              struct.setPush_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CANCEL_DELETE_DATA_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cancel_delete_data_req = new TCancelDeleteDataReq();
              struct.cancel_delete_data_req.read(iprot);
              struct.setCancel_delete_data_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RESOURCE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resource_info = new io.datafibre.fibre.thrift.TResourceInfo();
              struct.resource_info.read(iprot);
              struct.setResource_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STORAGE_MEDIUM_MIGRATE_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.storage_medium_migrate_req = new TStorageMediumMigrateReq();
              struct.storage_medium_migrate_req.read(iprot);
              struct.setStorage_medium_migrate_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CHECK_CONSISTENCY_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.check_consistency_req = new TCheckConsistencyReq();
              struct.check_consistency_req.read(iprot);
              struct.setCheck_consistency_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UPLOAD_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.upload_req = new TUploadReq();
              struct.upload_req.read(iprot);
              struct.setUpload_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DOWNLOAD_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.download_req = new TDownloadReq();
              struct.download_req.read(iprot);
              struct.setDownload_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SNAPSHOT_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.snapshot_req = new TSnapshotRequest();
              struct.snapshot_req.read(iprot);
              struct.setSnapshot_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RELEASE_SNAPSHOT_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.release_snapshot_req = new TReleaseSnapshotRequest();
              struct.release_snapshot_req.read(iprot);
              struct.setRelease_snapshot_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CLEAR_REMOTE_FILE_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clear_remote_file_req = new TClearRemoteFileReq();
              struct.clear_remote_file_req.read(iprot);
              struct.setClear_remote_file_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PUBLISH_VERSION_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.publish_version_req = new TPublishVersionRequest();
              struct.publish_version_req.read(iprot);
              struct.setPublish_version_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CLEAR_ALTER_TASK_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clear_alter_task_req = new TClearAlterTaskRequest();
              struct.clear_alter_task_req.read(iprot);
              struct.setClear_alter_task_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CLEAR_TRANSACTION_TASK_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clear_transaction_task_req = new TClearTransactionTaskRequest();
              struct.clear_transaction_task_req.read(iprot);
              struct.setClear_transaction_task_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MOVE_DIR_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.move_dir_req = new TMoveDirReq();
              struct.move_dir_req.read(iprot);
              struct.setMove_dir_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // RECOVER_TABLET_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.recover_tablet_req = new TRecoverTabletReq();
              struct.recover_tablet_req.read(iprot);
              struct.setRecover_tablet_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ALTER_TABLET_REQ_V2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.alter_tablet_req_v2 = new TAlterTabletReqV2();
              struct.alter_tablet_req_v2.read(iprot);
              struct.setAlter_tablet_req_v2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // RECV_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.recv_time = iprot.readI64();
              struct.setRecv_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // UPDATE_TABLET_META_INFO_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.update_tablet_meta_info_req = new TUpdateTabletMetaInfoReq();
              struct.update_tablet_meta_info_req.read(iprot);
              struct.setUpdate_tablet_meta_info_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // DROP_AUTO_INCREMENT_MAP_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.drop_auto_increment_map_req = new TDropAutoIncrementMapReq();
              struct.drop_auto_increment_map_req.read(iprot);
              struct.setDrop_auto_increment_map_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // COMPACTION_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.compaction_req = new TCompactionReq();
              struct.compaction_req.read(iprot);
              struct.setCompaction_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // REMOTE_SNAPSHOT_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.remote_snapshot_req = new TRemoteSnapshotRequest();
              struct.remote_snapshot_req.read(iprot);
              struct.setRemote_snapshot_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // REPLICATE_SNAPSHOT_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.replicate_snapshot_req = new TReplicateSnapshotRequest();
              struct.replicate_snapshot_req.read(iprot);
              struct.setReplicate_snapshot_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // UPDATE_SCHEMA_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.update_schema_req = new TUpdateSchemaReq();
              struct.update_schema_req.read(iprot);
              struct.setUpdate_schema_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSignature()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'signature' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TAgentTaskRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.task_type != null) {
        oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
        oprot.writeI32(struct.task_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
      oprot.writeI64(struct.signature);
      oprot.writeFieldEnd();
      if (struct.priority != null) {
        if (struct.isSetPriority()) {
          oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
          oprot.writeI32(struct.priority.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_tablet_req != null) {
        if (struct.isSetCreate_tablet_req()) {
          oprot.writeFieldBegin(CREATE_TABLET_REQ_FIELD_DESC);
          struct.create_tablet_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.drop_tablet_req != null) {
        if (struct.isSetDrop_tablet_req()) {
          oprot.writeFieldBegin(DROP_TABLET_REQ_FIELD_DESC);
          struct.drop_tablet_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alter_tablet_req != null) {
        if (struct.isSetAlter_tablet_req()) {
          oprot.writeFieldBegin(ALTER_TABLET_REQ_FIELD_DESC);
          struct.alter_tablet_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clone_req != null) {
        if (struct.isSetClone_req()) {
          oprot.writeFieldBegin(CLONE_REQ_FIELD_DESC);
          struct.clone_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.push_req != null) {
        if (struct.isSetPush_req()) {
          oprot.writeFieldBegin(PUSH_REQ_FIELD_DESC);
          struct.push_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cancel_delete_data_req != null) {
        if (struct.isSetCancel_delete_data_req()) {
          oprot.writeFieldBegin(CANCEL_DELETE_DATA_REQ_FIELD_DESC);
          struct.cancel_delete_data_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resource_info != null) {
        if (struct.isSetResource_info()) {
          oprot.writeFieldBegin(RESOURCE_INFO_FIELD_DESC);
          struct.resource_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.storage_medium_migrate_req != null) {
        if (struct.isSetStorage_medium_migrate_req()) {
          oprot.writeFieldBegin(STORAGE_MEDIUM_MIGRATE_REQ_FIELD_DESC);
          struct.storage_medium_migrate_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.check_consistency_req != null) {
        if (struct.isSetCheck_consistency_req()) {
          oprot.writeFieldBegin(CHECK_CONSISTENCY_REQ_FIELD_DESC);
          struct.check_consistency_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.upload_req != null) {
        if (struct.isSetUpload_req()) {
          oprot.writeFieldBegin(UPLOAD_REQ_FIELD_DESC);
          struct.upload_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.download_req != null) {
        if (struct.isSetDownload_req()) {
          oprot.writeFieldBegin(DOWNLOAD_REQ_FIELD_DESC);
          struct.download_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.snapshot_req != null) {
        if (struct.isSetSnapshot_req()) {
          oprot.writeFieldBegin(SNAPSHOT_REQ_FIELD_DESC);
          struct.snapshot_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.release_snapshot_req != null) {
        if (struct.isSetRelease_snapshot_req()) {
          oprot.writeFieldBegin(RELEASE_SNAPSHOT_REQ_FIELD_DESC);
          struct.release_snapshot_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clear_remote_file_req != null) {
        if (struct.isSetClear_remote_file_req()) {
          oprot.writeFieldBegin(CLEAR_REMOTE_FILE_REQ_FIELD_DESC);
          struct.clear_remote_file_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.publish_version_req != null) {
        if (struct.isSetPublish_version_req()) {
          oprot.writeFieldBegin(PUBLISH_VERSION_REQ_FIELD_DESC);
          struct.publish_version_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clear_alter_task_req != null) {
        if (struct.isSetClear_alter_task_req()) {
          oprot.writeFieldBegin(CLEAR_ALTER_TASK_REQ_FIELD_DESC);
          struct.clear_alter_task_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clear_transaction_task_req != null) {
        if (struct.isSetClear_transaction_task_req()) {
          oprot.writeFieldBegin(CLEAR_TRANSACTION_TASK_REQ_FIELD_DESC);
          struct.clear_transaction_task_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.move_dir_req != null) {
        if (struct.isSetMove_dir_req()) {
          oprot.writeFieldBegin(MOVE_DIR_REQ_FIELD_DESC);
          struct.move_dir_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recover_tablet_req != null) {
        if (struct.isSetRecover_tablet_req()) {
          oprot.writeFieldBegin(RECOVER_TABLET_REQ_FIELD_DESC);
          struct.recover_tablet_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alter_tablet_req_v2 != null) {
        if (struct.isSetAlter_tablet_req_v2()) {
          oprot.writeFieldBegin(ALTER_TABLET_REQ_V2_FIELD_DESC);
          struct.alter_tablet_req_v2.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRecv_time()) {
        oprot.writeFieldBegin(RECV_TIME_FIELD_DESC);
        oprot.writeI64(struct.recv_time);
        oprot.writeFieldEnd();
      }
      if (struct.update_tablet_meta_info_req != null) {
        if (struct.isSetUpdate_tablet_meta_info_req()) {
          oprot.writeFieldBegin(UPDATE_TABLET_META_INFO_REQ_FIELD_DESC);
          struct.update_tablet_meta_info_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.drop_auto_increment_map_req != null) {
        if (struct.isSetDrop_auto_increment_map_req()) {
          oprot.writeFieldBegin(DROP_AUTO_INCREMENT_MAP_REQ_FIELD_DESC);
          struct.drop_auto_increment_map_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.compaction_req != null) {
        if (struct.isSetCompaction_req()) {
          oprot.writeFieldBegin(COMPACTION_REQ_FIELD_DESC);
          struct.compaction_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remote_snapshot_req != null) {
        if (struct.isSetRemote_snapshot_req()) {
          oprot.writeFieldBegin(REMOTE_SNAPSHOT_REQ_FIELD_DESC);
          struct.remote_snapshot_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.replicate_snapshot_req != null) {
        if (struct.isSetReplicate_snapshot_req()) {
          oprot.writeFieldBegin(REPLICATE_SNAPSHOT_REQ_FIELD_DESC);
          struct.replicate_snapshot_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.update_schema_req != null) {
        if (struct.isSetUpdate_schema_req()) {
          oprot.writeFieldBegin(UPDATE_SCHEMA_REQ_FIELD_DESC);
          struct.update_schema_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAgentTaskRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAgentTaskRequestTupleScheme getScheme() {
      return new TAgentTaskRequestTupleScheme();
    }
  }

  private static class TAgentTaskRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAgentTaskRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAgentTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      oprot.writeI32(struct.task_type.getValue());
      oprot.writeI64(struct.signature);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPriority()) {
        optionals.set(0);
      }
      if (struct.isSetCreate_tablet_req()) {
        optionals.set(1);
      }
      if (struct.isSetDrop_tablet_req()) {
        optionals.set(2);
      }
      if (struct.isSetAlter_tablet_req()) {
        optionals.set(3);
      }
      if (struct.isSetClone_req()) {
        optionals.set(4);
      }
      if (struct.isSetPush_req()) {
        optionals.set(5);
      }
      if (struct.isSetCancel_delete_data_req()) {
        optionals.set(6);
      }
      if (struct.isSetResource_info()) {
        optionals.set(7);
      }
      if (struct.isSetStorage_medium_migrate_req()) {
        optionals.set(8);
      }
      if (struct.isSetCheck_consistency_req()) {
        optionals.set(9);
      }
      if (struct.isSetUpload_req()) {
        optionals.set(10);
      }
      if (struct.isSetDownload_req()) {
        optionals.set(11);
      }
      if (struct.isSetSnapshot_req()) {
        optionals.set(12);
      }
      if (struct.isSetRelease_snapshot_req()) {
        optionals.set(13);
      }
      if (struct.isSetClear_remote_file_req()) {
        optionals.set(14);
      }
      if (struct.isSetPublish_version_req()) {
        optionals.set(15);
      }
      if (struct.isSetClear_alter_task_req()) {
        optionals.set(16);
      }
      if (struct.isSetClear_transaction_task_req()) {
        optionals.set(17);
      }
      if (struct.isSetMove_dir_req()) {
        optionals.set(18);
      }
      if (struct.isSetRecover_tablet_req()) {
        optionals.set(19);
      }
      if (struct.isSetAlter_tablet_req_v2()) {
        optionals.set(20);
      }
      if (struct.isSetRecv_time()) {
        optionals.set(21);
      }
      if (struct.isSetUpdate_tablet_meta_info_req()) {
        optionals.set(22);
      }
      if (struct.isSetDrop_auto_increment_map_req()) {
        optionals.set(23);
      }
      if (struct.isSetCompaction_req()) {
        optionals.set(24);
      }
      if (struct.isSetRemote_snapshot_req()) {
        optionals.set(25);
      }
      if (struct.isSetReplicate_snapshot_req()) {
        optionals.set(26);
      }
      if (struct.isSetUpdate_schema_req()) {
        optionals.set(27);
      }
      oprot.writeBitSet(optionals, 28);
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority.getValue());
      }
      if (struct.isSetCreate_tablet_req()) {
        struct.create_tablet_req.write(oprot);
      }
      if (struct.isSetDrop_tablet_req()) {
        struct.drop_tablet_req.write(oprot);
      }
      if (struct.isSetAlter_tablet_req()) {
        struct.alter_tablet_req.write(oprot);
      }
      if (struct.isSetClone_req()) {
        struct.clone_req.write(oprot);
      }
      if (struct.isSetPush_req()) {
        struct.push_req.write(oprot);
      }
      if (struct.isSetCancel_delete_data_req()) {
        struct.cancel_delete_data_req.write(oprot);
      }
      if (struct.isSetResource_info()) {
        struct.resource_info.write(oprot);
      }
      if (struct.isSetStorage_medium_migrate_req()) {
        struct.storage_medium_migrate_req.write(oprot);
      }
      if (struct.isSetCheck_consistency_req()) {
        struct.check_consistency_req.write(oprot);
      }
      if (struct.isSetUpload_req()) {
        struct.upload_req.write(oprot);
      }
      if (struct.isSetDownload_req()) {
        struct.download_req.write(oprot);
      }
      if (struct.isSetSnapshot_req()) {
        struct.snapshot_req.write(oprot);
      }
      if (struct.isSetRelease_snapshot_req()) {
        struct.release_snapshot_req.write(oprot);
      }
      if (struct.isSetClear_remote_file_req()) {
        struct.clear_remote_file_req.write(oprot);
      }
      if (struct.isSetPublish_version_req()) {
        struct.publish_version_req.write(oprot);
      }
      if (struct.isSetClear_alter_task_req()) {
        struct.clear_alter_task_req.write(oprot);
      }
      if (struct.isSetClear_transaction_task_req()) {
        struct.clear_transaction_task_req.write(oprot);
      }
      if (struct.isSetMove_dir_req()) {
        struct.move_dir_req.write(oprot);
      }
      if (struct.isSetRecover_tablet_req()) {
        struct.recover_tablet_req.write(oprot);
      }
      if (struct.isSetAlter_tablet_req_v2()) {
        struct.alter_tablet_req_v2.write(oprot);
      }
      if (struct.isSetRecv_time()) {
        oprot.writeI64(struct.recv_time);
      }
      if (struct.isSetUpdate_tablet_meta_info_req()) {
        struct.update_tablet_meta_info_req.write(oprot);
      }
      if (struct.isSetDrop_auto_increment_map_req()) {
        struct.drop_auto_increment_map_req.write(oprot);
      }
      if (struct.isSetCompaction_req()) {
        struct.compaction_req.write(oprot);
      }
      if (struct.isSetRemote_snapshot_req()) {
        struct.remote_snapshot_req.write(oprot);
      }
      if (struct.isSetReplicate_snapshot_req()) {
        struct.replicate_snapshot_req.write(oprot);
      }
      if (struct.isSetUpdate_schema_req()) {
        struct.update_schema_req.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAgentTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.protocol_version = io.datafibre.fibre.thrift.TAgentServiceVersion.findByValue(iprot.readI32());
      struct.setProtocol_versionIsSet(true);
      struct.task_type = io.datafibre.fibre.thrift.TTaskType.findByValue(iprot.readI32());
      struct.setTask_typeIsSet(true);
      struct.signature = iprot.readI64();
      struct.setSignatureIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(28);
      if (incoming.get(0)) {
        struct.priority = io.datafibre.fibre.thrift.TPriority.findByValue(iprot.readI32());
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(1)) {
        struct.create_tablet_req = new TCreateTabletReq();
        struct.create_tablet_req.read(iprot);
        struct.setCreate_tablet_reqIsSet(true);
      }
      if (incoming.get(2)) {
        struct.drop_tablet_req = new TDropTabletReq();
        struct.drop_tablet_req.read(iprot);
        struct.setDrop_tablet_reqIsSet(true);
      }
      if (incoming.get(3)) {
        struct.alter_tablet_req = new TAlterTabletReq();
        struct.alter_tablet_req.read(iprot);
        struct.setAlter_tablet_reqIsSet(true);
      }
      if (incoming.get(4)) {
        struct.clone_req = new TCloneReq();
        struct.clone_req.read(iprot);
        struct.setClone_reqIsSet(true);
      }
      if (incoming.get(5)) {
        struct.push_req = new TPushReq();
        struct.push_req.read(iprot);
        struct.setPush_reqIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cancel_delete_data_req = new TCancelDeleteDataReq();
        struct.cancel_delete_data_req.read(iprot);
        struct.setCancel_delete_data_reqIsSet(true);
      }
      if (incoming.get(7)) {
        struct.resource_info = new io.datafibre.fibre.thrift.TResourceInfo();
        struct.resource_info.read(iprot);
        struct.setResource_infoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.storage_medium_migrate_req = new TStorageMediumMigrateReq();
        struct.storage_medium_migrate_req.read(iprot);
        struct.setStorage_medium_migrate_reqIsSet(true);
      }
      if (incoming.get(9)) {
        struct.check_consistency_req = new TCheckConsistencyReq();
        struct.check_consistency_req.read(iprot);
        struct.setCheck_consistency_reqIsSet(true);
      }
      if (incoming.get(10)) {
        struct.upload_req = new TUploadReq();
        struct.upload_req.read(iprot);
        struct.setUpload_reqIsSet(true);
      }
      if (incoming.get(11)) {
        struct.download_req = new TDownloadReq();
        struct.download_req.read(iprot);
        struct.setDownload_reqIsSet(true);
      }
      if (incoming.get(12)) {
        struct.snapshot_req = new TSnapshotRequest();
        struct.snapshot_req.read(iprot);
        struct.setSnapshot_reqIsSet(true);
      }
      if (incoming.get(13)) {
        struct.release_snapshot_req = new TReleaseSnapshotRequest();
        struct.release_snapshot_req.read(iprot);
        struct.setRelease_snapshot_reqIsSet(true);
      }
      if (incoming.get(14)) {
        struct.clear_remote_file_req = new TClearRemoteFileReq();
        struct.clear_remote_file_req.read(iprot);
        struct.setClear_remote_file_reqIsSet(true);
      }
      if (incoming.get(15)) {
        struct.publish_version_req = new TPublishVersionRequest();
        struct.publish_version_req.read(iprot);
        struct.setPublish_version_reqIsSet(true);
      }
      if (incoming.get(16)) {
        struct.clear_alter_task_req = new TClearAlterTaskRequest();
        struct.clear_alter_task_req.read(iprot);
        struct.setClear_alter_task_reqIsSet(true);
      }
      if (incoming.get(17)) {
        struct.clear_transaction_task_req = new TClearTransactionTaskRequest();
        struct.clear_transaction_task_req.read(iprot);
        struct.setClear_transaction_task_reqIsSet(true);
      }
      if (incoming.get(18)) {
        struct.move_dir_req = new TMoveDirReq();
        struct.move_dir_req.read(iprot);
        struct.setMove_dir_reqIsSet(true);
      }
      if (incoming.get(19)) {
        struct.recover_tablet_req = new TRecoverTabletReq();
        struct.recover_tablet_req.read(iprot);
        struct.setRecover_tablet_reqIsSet(true);
      }
      if (incoming.get(20)) {
        struct.alter_tablet_req_v2 = new TAlterTabletReqV2();
        struct.alter_tablet_req_v2.read(iprot);
        struct.setAlter_tablet_req_v2IsSet(true);
      }
      if (incoming.get(21)) {
        struct.recv_time = iprot.readI64();
        struct.setRecv_timeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.update_tablet_meta_info_req = new TUpdateTabletMetaInfoReq();
        struct.update_tablet_meta_info_req.read(iprot);
        struct.setUpdate_tablet_meta_info_reqIsSet(true);
      }
      if (incoming.get(23)) {
        struct.drop_auto_increment_map_req = new TDropAutoIncrementMapReq();
        struct.drop_auto_increment_map_req.read(iprot);
        struct.setDrop_auto_increment_map_reqIsSet(true);
      }
      if (incoming.get(24)) {
        struct.compaction_req = new TCompactionReq();
        struct.compaction_req.read(iprot);
        struct.setCompaction_reqIsSet(true);
      }
      if (incoming.get(25)) {
        struct.remote_snapshot_req = new TRemoteSnapshotRequest();
        struct.remote_snapshot_req.read(iprot);
        struct.setRemote_snapshot_reqIsSet(true);
      }
      if (incoming.get(26)) {
        struct.replicate_snapshot_req = new TReplicateSnapshotRequest();
        struct.replicate_snapshot_req.read(iprot);
        struct.setReplicate_snapshot_reqIsSet(true);
      }
      if (incoming.get(27)) {
        struct.update_schema_req = new TUpdateSchemaReq();
        struct.update_schema_req.read(iprot);
        struct.setUpdate_schema_reqIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

