/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TIcebergTableSink implements org.apache.thrift.TBase<TIcebergTableSink, TIcebergTableSink._Fields>, java.io.Serializable, Cloneable, Comparable<TIcebergTableSink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIcebergTableSink");

  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("file_format", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("target_table_id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COMPRESSION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("compression_type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IS_STATIC_PARTITION_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("is_static_partition_sink", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField CLOUD_CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("cloud_configuration", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TIcebergTableSinkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TIcebergTableSinkTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String location; // optional
  public @org.apache.thrift.annotation.Nullable String file_format; // optional
  public long target_table_id; // optional
  /**
   * 
   * @see TCompressionType
   */
  public @org.apache.thrift.annotation.Nullable TCompressionType compression_type; // optional
  public boolean is_static_partition_sink; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TCloudConfiguration cloud_configuration; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCATION((short)1, "location"),
    FILE_FORMAT((short)2, "file_format"),
    TARGET_TABLE_ID((short)3, "target_table_id"),
    /**
     * 
     * @see TCompressionType
     */
    COMPRESSION_TYPE((short)4, "compression_type"),
    IS_STATIC_PARTITION_SINK((short)5, "is_static_partition_sink"),
    CLOUD_CONFIGURATION((short)6, "cloud_configuration");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCATION
          return LOCATION;
        case 2: // FILE_FORMAT
          return FILE_FORMAT;
        case 3: // TARGET_TABLE_ID
          return TARGET_TABLE_ID;
        case 4: // COMPRESSION_TYPE
          return COMPRESSION_TYPE;
        case 5: // IS_STATIC_PARTITION_SINK
          return IS_STATIC_PARTITION_SINK;
        case 6: // CLOUD_CONFIGURATION
          return CLOUD_CONFIGURATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TARGET_TABLE_ID_ISSET_ID = 0;
  private static final int __IS_STATIC_PARTITION_SINK_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LOCATION,_Fields.FILE_FORMAT,_Fields.TARGET_TABLE_ID,_Fields.COMPRESSION_TYPE,_Fields.IS_STATIC_PARTITION_SINK,_Fields.CLOUD_CONFIGURATION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("file_format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGET_TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("target_table_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPRESSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("compression_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCompressionType.class)));
    tmpMap.put(_Fields.IS_STATIC_PARTITION_SINK, new org.apache.thrift.meta_data.FieldMetaData("is_static_partition_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CLOUD_CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("cloud_configuration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TCloudConfiguration.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TIcebergTableSink.class, metaDataMap);
  }

  public TIcebergTableSink() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TIcebergTableSink(TIcebergTableSink other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetFile_format()) {
      this.file_format = other.file_format;
    }
    this.target_table_id = other.target_table_id;
    if (other.isSetCompression_type()) {
      this.compression_type = other.compression_type;
    }
    this.is_static_partition_sink = other.is_static_partition_sink;
    if (other.isSetCloud_configuration()) {
      this.cloud_configuration = new com.starrocks.thrift.TCloudConfiguration(other.cloud_configuration);
    }
  }

  @Override
  public TIcebergTableSink deepCopy() {
    return new TIcebergTableSink(this);
  }

  @Override
  public void clear() {
    this.location = null;
    this.file_format = null;
    setTarget_table_idIsSet(false);
    this.target_table_id = 0;
    this.compression_type = null;
    setIs_static_partition_sinkIsSet(false);
    this.is_static_partition_sink = false;
    this.cloud_configuration = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getLocation() {
    return this.location;
  }

  public TIcebergTableSink setLocation(@org.apache.thrift.annotation.Nullable String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getFile_format() {
    return this.file_format;
  }

  public TIcebergTableSink setFile_format(@org.apache.thrift.annotation.Nullable String file_format) {
    this.file_format = file_format;
    return this;
  }

  public void unsetFile_format() {
    this.file_format = null;
  }

  /** Returns true if field file_format is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_format() {
    return this.file_format != null;
  }

  public void setFile_formatIsSet(boolean value) {
    if (!value) {
      this.file_format = null;
    }
  }

  public long getTarget_table_id() {
    return this.target_table_id;
  }

  public TIcebergTableSink setTarget_table_id(long target_table_id) {
    this.target_table_id = target_table_id;
    setTarget_table_idIsSet(true);
    return this;
  }

  public void unsetTarget_table_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARGET_TABLE_ID_ISSET_ID);
  }

  /** Returns true if field target_table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget_table_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARGET_TABLE_ID_ISSET_ID);
  }

  public void setTarget_table_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARGET_TABLE_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see TCompressionType
   */
  @org.apache.thrift.annotation.Nullable
  public TCompressionType getCompression_type() {
    return this.compression_type;
  }

  /**
   * 
   * @see TCompressionType
   */
  public TIcebergTableSink setCompression_type(@org.apache.thrift.annotation.Nullable TCompressionType compression_type) {
    this.compression_type = compression_type;
    return this;
  }

  public void unsetCompression_type() {
    this.compression_type = null;
  }

  /** Returns true if field compression_type is set (has been assigned a value) and false otherwise */
  public boolean isSetCompression_type() {
    return this.compression_type != null;
  }

  public void setCompression_typeIsSet(boolean value) {
    if (!value) {
      this.compression_type = null;
    }
  }

  public boolean isIs_static_partition_sink() {
    return this.is_static_partition_sink;
  }

  public TIcebergTableSink setIs_static_partition_sink(boolean is_static_partition_sink) {
    this.is_static_partition_sink = is_static_partition_sink;
    setIs_static_partition_sinkIsSet(true);
    return this;
  }

  public void unsetIs_static_partition_sink() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_STATIC_PARTITION_SINK_ISSET_ID);
  }

  /** Returns true if field is_static_partition_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_static_partition_sink() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_STATIC_PARTITION_SINK_ISSET_ID);
  }

  public void setIs_static_partition_sinkIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_STATIC_PARTITION_SINK_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TCloudConfiguration getCloud_configuration() {
    return this.cloud_configuration;
  }

  public TIcebergTableSink setCloud_configuration(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TCloudConfiguration cloud_configuration) {
    this.cloud_configuration = cloud_configuration;
    return this;
  }

  public void unsetCloud_configuration() {
    this.cloud_configuration = null;
  }

  /** Returns true if field cloud_configuration is set (has been assigned a value) and false otherwise */
  public boolean isSetCloud_configuration() {
    return this.cloud_configuration != null;
  }

  public void setCloud_configurationIsSet(boolean value) {
    if (!value) {
      this.cloud_configuration = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case FILE_FORMAT:
      if (value == null) {
        unsetFile_format();
      } else {
        setFile_format((String)value);
      }
      break;

    case TARGET_TABLE_ID:
      if (value == null) {
        unsetTarget_table_id();
      } else {
        setTarget_table_id((Long)value);
      }
      break;

    case COMPRESSION_TYPE:
      if (value == null) {
        unsetCompression_type();
      } else {
        setCompression_type((TCompressionType)value);
      }
      break;

    case IS_STATIC_PARTITION_SINK:
      if (value == null) {
        unsetIs_static_partition_sink();
      } else {
        setIs_static_partition_sink((Boolean)value);
      }
      break;

    case CLOUD_CONFIGURATION:
      if (value == null) {
        unsetCloud_configuration();
      } else {
        setCloud_configuration((com.starrocks.thrift.TCloudConfiguration)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCATION:
      return getLocation();

    case FILE_FORMAT:
      return getFile_format();

    case TARGET_TABLE_ID:
      return getTarget_table_id();

    case COMPRESSION_TYPE:
      return getCompression_type();

    case IS_STATIC_PARTITION_SINK:
      return isIs_static_partition_sink();

    case CLOUD_CONFIGURATION:
      return getCloud_configuration();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOCATION:
      return isSetLocation();
    case FILE_FORMAT:
      return isSetFile_format();
    case TARGET_TABLE_ID:
      return isSetTarget_table_id();
    case COMPRESSION_TYPE:
      return isSetCompression_type();
    case IS_STATIC_PARTITION_SINK:
      return isSetIs_static_partition_sink();
    case CLOUD_CONFIGURATION:
      return isSetCloud_configuration();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof TIcebergTableSink)
      return this.equals((TIcebergTableSink)that);
    return false;
  }

  public boolean equals(TIcebergTableSink that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_file_format = true && this.isSetFile_format();
    boolean that_present_file_format = true && that.isSetFile_format();
    if (this_present_file_format || that_present_file_format) {
      if (!(this_present_file_format && that_present_file_format))
        return false;
      if (!this.file_format.equals(that.file_format))
        return false;
    }

    boolean this_present_target_table_id = true && this.isSetTarget_table_id();
    boolean that_present_target_table_id = true && that.isSetTarget_table_id();
    if (this_present_target_table_id || that_present_target_table_id) {
      if (!(this_present_target_table_id && that_present_target_table_id))
        return false;
      if (this.target_table_id != that.target_table_id)
        return false;
    }

    boolean this_present_compression_type = true && this.isSetCompression_type();
    boolean that_present_compression_type = true && that.isSetCompression_type();
    if (this_present_compression_type || that_present_compression_type) {
      if (!(this_present_compression_type && that_present_compression_type))
        return false;
      if (!this.compression_type.equals(that.compression_type))
        return false;
    }

    boolean this_present_is_static_partition_sink = true && this.isSetIs_static_partition_sink();
    boolean that_present_is_static_partition_sink = true && that.isSetIs_static_partition_sink();
    if (this_present_is_static_partition_sink || that_present_is_static_partition_sink) {
      if (!(this_present_is_static_partition_sink && that_present_is_static_partition_sink))
        return false;
      if (this.is_static_partition_sink != that.is_static_partition_sink)
        return false;
    }

    boolean this_present_cloud_configuration = true && this.isSetCloud_configuration();
    boolean that_present_cloud_configuration = true && that.isSetCloud_configuration();
    if (this_present_cloud_configuration || that_present_cloud_configuration) {
      if (!(this_present_cloud_configuration && that_present_cloud_configuration))
        return false;
      if (!this.cloud_configuration.equals(that.cloud_configuration))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
    if (isSetLocation())
      hashCode = hashCode * 8191 + location.hashCode();

    hashCode = hashCode * 8191 + ((isSetFile_format()) ? 131071 : 524287);
    if (isSetFile_format())
      hashCode = hashCode * 8191 + file_format.hashCode();

    hashCode = hashCode * 8191 + ((isSetTarget_table_id()) ? 131071 : 524287);
    if (isSetTarget_table_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(target_table_id);

    hashCode = hashCode * 8191 + ((isSetCompression_type()) ? 131071 : 524287);
    if (isSetCompression_type())
      hashCode = hashCode * 8191 + compression_type.getValue();

    hashCode = hashCode * 8191 + ((isSetIs_static_partition_sink()) ? 131071 : 524287);
    if (isSetIs_static_partition_sink())
      hashCode = hashCode * 8191 + ((is_static_partition_sink) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCloud_configuration()) ? 131071 : 524287);
    if (isSetCloud_configuration())
      hashCode = hashCode * 8191 + cloud_configuration.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TIcebergTableSink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetLocation(), other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetFile_format(), other.isSetFile_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_format, other.file_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTarget_table_id(), other.isSetTarget_table_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget_table_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target_table_id, other.target_table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetCompression_type(), other.isSetCompression_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompression_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compression_type, other.compression_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetIs_static_partition_sink(), other.isSetIs_static_partition_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_static_partition_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_static_partition_sink, other.is_static_partition_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetCloud_configuration(), other.isSetCloud_configuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloud_configuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloud_configuration, other.cloud_configuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TIcebergTableSink(");
    boolean first = true;

    if (isSetLocation()) {
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetFile_format()) {
      if (!first) sb.append(", ");
      sb.append("file_format:");
      if (this.file_format == null) {
        sb.append("null");
      } else {
        sb.append(this.file_format);
      }
      first = false;
    }
    if (isSetTarget_table_id()) {
      if (!first) sb.append(", ");
      sb.append("target_table_id:");
      sb.append(this.target_table_id);
      first = false;
    }
    if (isSetCompression_type()) {
      if (!first) sb.append(", ");
      sb.append("compression_type:");
      if (this.compression_type == null) {
        sb.append("null");
      } else {
        sb.append(this.compression_type);
      }
      first = false;
    }
    if (isSetIs_static_partition_sink()) {
      if (!first) sb.append(", ");
      sb.append("is_static_partition_sink:");
      sb.append(this.is_static_partition_sink);
      first = false;
    }
    if (isSetCloud_configuration()) {
      if (!first) sb.append(", ");
      sb.append("cloud_configuration:");
      if (this.cloud_configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.cloud_configuration);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cloud_configuration != null) {
      cloud_configuration.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TIcebergTableSinkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIcebergTableSinkStandardScheme getScheme() {
      return new TIcebergTableSinkStandardScheme();
    }
  }

  private static class TIcebergTableSinkStandardScheme extends org.apache.thrift.scheme.StandardScheme<TIcebergTableSink> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TIcebergTableSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_format = iprot.readString();
              struct.setFile_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET_TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.target_table_id = iprot.readI64();
              struct.setTarget_table_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPRESSION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compression_type = TCompressionType.findByValue(iprot.readI32());
              struct.setCompression_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_STATIC_PARTITION_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_static_partition_sink = iprot.readBool();
              struct.setIs_static_partition_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLOUD_CONFIGURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cloud_configuration = new com.starrocks.thrift.TCloudConfiguration();
              struct.cloud_configuration.read(iprot);
              struct.setCloud_configurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TIcebergTableSink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      if (struct.file_format != null) {
        if (struct.isSetFile_format()) {
          oprot.writeFieldBegin(FILE_FORMAT_FIELD_DESC);
          oprot.writeString(struct.file_format);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTarget_table_id()) {
        oprot.writeFieldBegin(TARGET_TABLE_ID_FIELD_DESC);
        oprot.writeI64(struct.target_table_id);
        oprot.writeFieldEnd();
      }
      if (struct.compression_type != null) {
        if (struct.isSetCompression_type()) {
          oprot.writeFieldBegin(COMPRESSION_TYPE_FIELD_DESC);
          oprot.writeI32(struct.compression_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_static_partition_sink()) {
        oprot.writeFieldBegin(IS_STATIC_PARTITION_SINK_FIELD_DESC);
        oprot.writeBool(struct.is_static_partition_sink);
        oprot.writeFieldEnd();
      }
      if (struct.cloud_configuration != null) {
        if (struct.isSetCloud_configuration()) {
          oprot.writeFieldBegin(CLOUD_CONFIGURATION_FIELD_DESC);
          struct.cloud_configuration.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TIcebergTableSinkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIcebergTableSinkTupleScheme getScheme() {
      return new TIcebergTableSinkTupleScheme();
    }
  }

  private static class TIcebergTableSinkTupleScheme extends org.apache.thrift.scheme.TupleScheme<TIcebergTableSink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TIcebergTableSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLocation()) {
        optionals.set(0);
      }
      if (struct.isSetFile_format()) {
        optionals.set(1);
      }
      if (struct.isSetTarget_table_id()) {
        optionals.set(2);
      }
      if (struct.isSetCompression_type()) {
        optionals.set(3);
      }
      if (struct.isSetIs_static_partition_sink()) {
        optionals.set(4);
      }
      if (struct.isSetCloud_configuration()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetFile_format()) {
        oprot.writeString(struct.file_format);
      }
      if (struct.isSetTarget_table_id()) {
        oprot.writeI64(struct.target_table_id);
      }
      if (struct.isSetCompression_type()) {
        oprot.writeI32(struct.compression_type.getValue());
      }
      if (struct.isSetIs_static_partition_sink()) {
        oprot.writeBool(struct.is_static_partition_sink);
      }
      if (struct.isSetCloud_configuration()) {
        struct.cloud_configuration.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TIcebergTableSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.file_format = iprot.readString();
        struct.setFile_formatIsSet(true);
      }
      if (incoming.get(2)) {
        struct.target_table_id = iprot.readI64();
        struct.setTarget_table_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.compression_type = TCompressionType.findByValue(iprot.readI32());
        struct.setCompression_typeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.is_static_partition_sink = iprot.readBool();
        struct.setIs_static_partition_sinkIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cloud_configuration = new com.starrocks.thrift.TCloudConfiguration();
        struct.cloud_configuration.read(iprot);
        struct.setCloud_configurationIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

