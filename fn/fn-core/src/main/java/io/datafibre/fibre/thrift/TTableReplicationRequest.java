/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TTableReplicationRequest implements org.apache.thrift.TBase<TTableReplicationRequest, TTableReplicationRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TTableReplicationRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableReplicationRequest");

  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATABASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("database_id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SRC_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("src_token", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SRC_TABLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("src_table_type", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SRC_TABLE_DATA_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("src_table_data_size", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField PARTITION_REPLICATION_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_replication_infos", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("job_id", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTableReplicationRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTableReplicationRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String username; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String password; // optional
  public long database_id; // optional
  public long table_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String src_token; // optional
  /**
   * 
   * @see io.datafibre.fibre.thrift.TTableType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTableType src_table_type; // optional
  public long src_table_data_size; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,TPartitionReplicationInfo> partition_replication_infos; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String job_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USERNAME((short)1, "username"),
    PASSWORD((short)2, "password"),
    DATABASE_ID((short)3, "database_id"),
    TABLE_ID((short)4, "table_id"),
    SRC_TOKEN((short)5, "src_token"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TTableType
     */
    SRC_TABLE_TYPE((short)6, "src_table_type"),
    SRC_TABLE_DATA_SIZE((short)7, "src_table_data_size"),
    PARTITION_REPLICATION_INFOS((short)8, "partition_replication_infos"),
    JOB_ID((short)9, "job_id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USERNAME
          return USERNAME;
        case 2: // PASSWORD
          return PASSWORD;
        case 3: // DATABASE_ID
          return DATABASE_ID;
        case 4: // TABLE_ID
          return TABLE_ID;
        case 5: // SRC_TOKEN
          return SRC_TOKEN;
        case 6: // SRC_TABLE_TYPE
          return SRC_TABLE_TYPE;
        case 7: // SRC_TABLE_DATA_SIZE
          return SRC_TABLE_DATA_SIZE;
        case 8: // PARTITION_REPLICATION_INFOS
          return PARTITION_REPLICATION_INFOS;
        case 9: // JOB_ID
          return JOB_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DATABASE_ID_ISSET_ID = 0;
  private static final int __TABLE_ID_ISSET_ID = 1;
  private static final int __SRC_TABLE_DATA_SIZE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USERNAME,_Fields.PASSWORD,_Fields.DATABASE_ID,_Fields.TABLE_ID,_Fields.SRC_TOKEN,_Fields.SRC_TABLE_TYPE,_Fields.SRC_TABLE_DATA_SIZE,_Fields.PARTITION_REPLICATION_INFOS,_Fields.JOB_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATABASE_ID, new org.apache.thrift.meta_data.FieldMetaData("database_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SRC_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("src_token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_TABLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("src_table_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TTableType.class)));
    tmpMap.put(_Fields.SRC_TABLE_DATA_SIZE, new org.apache.thrift.meta_data.FieldMetaData("src_table_data_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_REPLICATION_INFOS, new org.apache.thrift.meta_data.FieldMetaData("partition_replication_infos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPartitionReplicationInfo.class))));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("job_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableReplicationRequest.class, metaDataMap);
  }

  public TTableReplicationRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableReplicationRequest(TTableReplicationRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    this.database_id = other.database_id;
    this.table_id = other.table_id;
    if (other.isSetSrc_token()) {
      this.src_token = other.src_token;
    }
    if (other.isSetSrc_table_type()) {
      this.src_table_type = other.src_table_type;
    }
    this.src_table_data_size = other.src_table_data_size;
    if (other.isSetPartition_replication_infos()) {
      java.util.Map<java.lang.Long,TPartitionReplicationInfo> __this__partition_replication_infos = new java.util.HashMap<java.lang.Long,TPartitionReplicationInfo>(other.partition_replication_infos.size());
      for (java.util.Map.Entry<java.lang.Long, TPartitionReplicationInfo> other_element : other.partition_replication_infos.entrySet()) {

        java.lang.Long other_element_key = other_element.getKey();
        TPartitionReplicationInfo other_element_value = other_element.getValue();

        java.lang.Long __this__partition_replication_infos_copy_key = other_element_key;

        TPartitionReplicationInfo __this__partition_replication_infos_copy_value = new TPartitionReplicationInfo(other_element_value);

        __this__partition_replication_infos.put(__this__partition_replication_infos_copy_key, __this__partition_replication_infos_copy_value);
      }
      this.partition_replication_infos = __this__partition_replication_infos;
    }
    if (other.isSetJob_id()) {
      this.job_id = other.job_id;
    }
  }

  @Override
  public TTableReplicationRequest deepCopy() {
    return new TTableReplicationRequest(this);
  }

  @Override
  public void clear() {
    this.username = null;
    this.password = null;
    setDatabase_idIsSet(false);
    this.database_id = 0;
    setTable_idIsSet(false);
    this.table_id = 0;
    this.src_token = null;
    this.src_table_type = null;
    setSrc_table_data_sizeIsSet(false);
    this.src_table_data_size = 0;
    this.partition_replication_infos = null;
    this.job_id = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUsername() {
    return this.username;
  }

  public TTableReplicationRequest setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPassword() {
    return this.password;
  }

  public TTableReplicationRequest setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public long getDatabase_id() {
    return this.database_id;
  }

  public TTableReplicationRequest setDatabase_id(long database_id) {
    this.database_id = database_id;
    setDatabase_idIsSet(true);
    return this;
  }

  public void unsetDatabase_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATABASE_ID_ISSET_ID);
  }

  /** Returns true if field database_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabase_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATABASE_ID_ISSET_ID);
  }

  public void setDatabase_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATABASE_ID_ISSET_ID, value);
  }

  public long getTable_id() {
    return this.table_id;
  }

  public TTableReplicationRequest setTable_id(long table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSrc_token() {
    return this.src_token;
  }

  public TTableReplicationRequest setSrc_token(@org.apache.thrift.annotation.Nullable java.lang.String src_token) {
    this.src_token = src_token;
    return this;
  }

  public void unsetSrc_token() {
    this.src_token = null;
  }

  /** Returns true if field src_token is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_token() {
    return this.src_token != null;
  }

  public void setSrc_tokenIsSet(boolean value) {
    if (!value) {
      this.src_token = null;
    }
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TTableType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TTableType getSrc_table_type() {
    return this.src_table_type;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TTableType
   */
  public TTableReplicationRequest setSrc_table_type(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTableType src_table_type) {
    this.src_table_type = src_table_type;
    return this;
  }

  public void unsetSrc_table_type() {
    this.src_table_type = null;
  }

  /** Returns true if field src_table_type is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_table_type() {
    return this.src_table_type != null;
  }

  public void setSrc_table_typeIsSet(boolean value) {
    if (!value) {
      this.src_table_type = null;
    }
  }

  public long getSrc_table_data_size() {
    return this.src_table_data_size;
  }

  public TTableReplicationRequest setSrc_table_data_size(long src_table_data_size) {
    this.src_table_data_size = src_table_data_size;
    setSrc_table_data_sizeIsSet(true);
    return this;
  }

  public void unsetSrc_table_data_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRC_TABLE_DATA_SIZE_ISSET_ID);
  }

  /** Returns true if field src_table_data_size is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_table_data_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRC_TABLE_DATA_SIZE_ISSET_ID);
  }

  public void setSrc_table_data_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRC_TABLE_DATA_SIZE_ISSET_ID, value);
  }

  public int getPartition_replication_infosSize() {
    return (this.partition_replication_infos == null) ? 0 : this.partition_replication_infos.size();
  }

  public void putToPartition_replication_infos(long key, TPartitionReplicationInfo val) {
    if (this.partition_replication_infos == null) {
      this.partition_replication_infos = new java.util.HashMap<java.lang.Long,TPartitionReplicationInfo>();
    }
    this.partition_replication_infos.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Long,TPartitionReplicationInfo> getPartition_replication_infos() {
    return this.partition_replication_infos;
  }

  public TTableReplicationRequest setPartition_replication_infos(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,TPartitionReplicationInfo> partition_replication_infos) {
    this.partition_replication_infos = partition_replication_infos;
    return this;
  }

  public void unsetPartition_replication_infos() {
    this.partition_replication_infos = null;
  }

  /** Returns true if field partition_replication_infos is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_replication_infos() {
    return this.partition_replication_infos != null;
  }

  public void setPartition_replication_infosIsSet(boolean value) {
    if (!value) {
      this.partition_replication_infos = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJob_id() {
    return this.job_id;
  }

  public TTableReplicationRequest setJob_id(@org.apache.thrift.annotation.Nullable java.lang.String job_id) {
    this.job_id = job_id;
    return this;
  }

  public void unsetJob_id() {
    this.job_id = null;
  }

  /** Returns true if field job_id is set (has been assigned a value) and false otherwise */
  public boolean isSetJob_id() {
    return this.job_id != null;
  }

  public void setJob_idIsSet(boolean value) {
    if (!value) {
      this.job_id = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((java.lang.String)value);
      }
      break;

    case DATABASE_ID:
      if (value == null) {
        unsetDatabase_id();
      } else {
        setDatabase_id((java.lang.Long)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((java.lang.Long)value);
      }
      break;

    case SRC_TOKEN:
      if (value == null) {
        unsetSrc_token();
      } else {
        setSrc_token((java.lang.String)value);
      }
      break;

    case SRC_TABLE_TYPE:
      if (value == null) {
        unsetSrc_table_type();
      } else {
        setSrc_table_type((io.datafibre.fibre.thrift.TTableType)value);
      }
      break;

    case SRC_TABLE_DATA_SIZE:
      if (value == null) {
        unsetSrc_table_data_size();
      } else {
        setSrc_table_data_size((java.lang.Long)value);
      }
      break;

    case PARTITION_REPLICATION_INFOS:
      if (value == null) {
        unsetPartition_replication_infos();
      } else {
        setPartition_replication_infos((java.util.Map<java.lang.Long,TPartitionReplicationInfo>)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJob_id();
      } else {
        setJob_id((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USERNAME:
      return getUsername();

    case PASSWORD:
      return getPassword();

    case DATABASE_ID:
      return getDatabase_id();

    case TABLE_ID:
      return getTable_id();

    case SRC_TOKEN:
      return getSrc_token();

    case SRC_TABLE_TYPE:
      return getSrc_table_type();

    case SRC_TABLE_DATA_SIZE:
      return getSrc_table_data_size();

    case PARTITION_REPLICATION_INFOS:
      return getPartition_replication_infos();

    case JOB_ID:
      return getJob_id();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USERNAME:
      return isSetUsername();
    case PASSWORD:
      return isSetPassword();
    case DATABASE_ID:
      return isSetDatabase_id();
    case TABLE_ID:
      return isSetTable_id();
    case SRC_TOKEN:
      return isSetSrc_token();
    case SRC_TABLE_TYPE:
      return isSetSrc_table_type();
    case SRC_TABLE_DATA_SIZE:
      return isSetSrc_table_data_size();
    case PARTITION_REPLICATION_INFOS:
      return isSetPartition_replication_infos();
    case JOB_ID:
      return isSetJob_id();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTableReplicationRequest)
      return this.equals((TTableReplicationRequest)that);
    return false;
  }

  public boolean equals(TTableReplicationRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_database_id = true && this.isSetDatabase_id();
    boolean that_present_database_id = true && that.isSetDatabase_id();
    if (this_present_database_id || that_present_database_id) {
      if (!(this_present_database_id && that_present_database_id))
        return false;
      if (this.database_id != that.database_id)
        return false;
    }

    boolean this_present_table_id = true && this.isSetTable_id();
    boolean that_present_table_id = true && that.isSetTable_id();
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    boolean this_present_src_token = true && this.isSetSrc_token();
    boolean that_present_src_token = true && that.isSetSrc_token();
    if (this_present_src_token || that_present_src_token) {
      if (!(this_present_src_token && that_present_src_token))
        return false;
      if (!this.src_token.equals(that.src_token))
        return false;
    }

    boolean this_present_src_table_type = true && this.isSetSrc_table_type();
    boolean that_present_src_table_type = true && that.isSetSrc_table_type();
    if (this_present_src_table_type || that_present_src_table_type) {
      if (!(this_present_src_table_type && that_present_src_table_type))
        return false;
      if (!this.src_table_type.equals(that.src_table_type))
        return false;
    }

    boolean this_present_src_table_data_size = true && this.isSetSrc_table_data_size();
    boolean that_present_src_table_data_size = true && that.isSetSrc_table_data_size();
    if (this_present_src_table_data_size || that_present_src_table_data_size) {
      if (!(this_present_src_table_data_size && that_present_src_table_data_size))
        return false;
      if (this.src_table_data_size != that.src_table_data_size)
        return false;
    }

    boolean this_present_partition_replication_infos = true && this.isSetPartition_replication_infos();
    boolean that_present_partition_replication_infos = true && that.isSetPartition_replication_infos();
    if (this_present_partition_replication_infos || that_present_partition_replication_infos) {
      if (!(this_present_partition_replication_infos && that_present_partition_replication_infos))
        return false;
      if (!this.partition_replication_infos.equals(that.partition_replication_infos))
        return false;
    }

    boolean this_present_job_id = true && this.isSetJob_id();
    boolean that_present_job_id = true && that.isSetJob_id();
    if (this_present_job_id || that_present_job_id) {
      if (!(this_present_job_id && that_present_job_id))
        return false;
      if (!this.job_id.equals(that.job_id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatabase_id()) ? 131071 : 524287);
    if (isSetDatabase_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(database_id);

    hashCode = hashCode * 8191 + ((isSetTable_id()) ? 131071 : 524287);
    if (isSetTable_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_id);

    hashCode = hashCode * 8191 + ((isSetSrc_token()) ? 131071 : 524287);
    if (isSetSrc_token())
      hashCode = hashCode * 8191 + src_token.hashCode();

    hashCode = hashCode * 8191 + ((isSetSrc_table_type()) ? 131071 : 524287);
    if (isSetSrc_table_type())
      hashCode = hashCode * 8191 + src_table_type.getValue();

    hashCode = hashCode * 8191 + ((isSetSrc_table_data_size()) ? 131071 : 524287);
    if (isSetSrc_table_data_size())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(src_table_data_size);

    hashCode = hashCode * 8191 + ((isSetPartition_replication_infos()) ? 131071 : 524287);
    if (isSetPartition_replication_infos())
      hashCode = hashCode * 8191 + partition_replication_infos.hashCode();

    hashCode = hashCode * 8191 + ((isSetJob_id()) ? 131071 : 524287);
    if (isSetJob_id())
      hashCode = hashCode * 8191 + job_id.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TTableReplicationRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUsername(), other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPassword(), other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDatabase_id(), other.isSetDatabase_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabase_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database_id, other.database_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_id(), other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrc_token(), other.isSetSrc_token());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_token()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_token, other.src_token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrc_table_type(), other.isSetSrc_table_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_table_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_table_type, other.src_table_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrc_table_data_size(), other.isSetSrc_table_data_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_table_data_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_table_data_size, other.src_table_data_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_replication_infos(), other.isSetPartition_replication_infos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_replication_infos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_replication_infos, other.partition_replication_infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJob_id(), other.isSetJob_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job_id, other.job_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTableReplicationRequest(");
    boolean first = true;

    if (isSetUsername()) {
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetDatabase_id()) {
      if (!first) sb.append(", ");
      sb.append("database_id:");
      sb.append(this.database_id);
      first = false;
    }
    if (isSetTable_id()) {
      if (!first) sb.append(", ");
      sb.append("table_id:");
      sb.append(this.table_id);
      first = false;
    }
    if (isSetSrc_token()) {
      if (!first) sb.append(", ");
      sb.append("src_token:");
      if (this.src_token == null) {
        sb.append("null");
      } else {
        sb.append(this.src_token);
      }
      first = false;
    }
    if (isSetSrc_table_type()) {
      if (!first) sb.append(", ");
      sb.append("src_table_type:");
      if (this.src_table_type == null) {
        sb.append("null");
      } else {
        sb.append(this.src_table_type);
      }
      first = false;
    }
    if (isSetSrc_table_data_size()) {
      if (!first) sb.append(", ");
      sb.append("src_table_data_size:");
      sb.append(this.src_table_data_size);
      first = false;
    }
    if (isSetPartition_replication_infos()) {
      if (!first) sb.append(", ");
      sb.append("partition_replication_infos:");
      if (this.partition_replication_infos == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_replication_infos);
      }
      first = false;
    }
    if (isSetJob_id()) {
      if (!first) sb.append(", ");
      sb.append("job_id:");
      if (this.job_id == null) {
        sb.append("null");
      } else {
        sb.append(this.job_id);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableReplicationRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTableReplicationRequestStandardScheme getScheme() {
      return new TTableReplicationRequestStandardScheme();
    }
  }

  private static class TTableReplicationRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTableReplicationRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableReplicationRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATABASE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.database_id = iprot.readI64();
              struct.setDatabase_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_id = iprot.readI64();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SRC_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.src_token = iprot.readString();
              struct.setSrc_tokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SRC_TABLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.src_table_type = io.datafibre.fibre.thrift.TTableType.findByValue(iprot.readI32());
              struct.setSrc_table_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SRC_TABLE_DATA_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.src_table_data_size = iprot.readI64();
              struct.setSrc_table_data_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARTITION_REPLICATION_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map794 = iprot.readMapBegin();
                struct.partition_replication_infos = new java.util.HashMap<java.lang.Long,TPartitionReplicationInfo>(2*_map794.size);
                long _key795;
                @org.apache.thrift.annotation.Nullable TPartitionReplicationInfo _val796;
                for (int _i797 = 0; _i797 < _map794.size; ++_i797)
                {
                  _key795 = iprot.readI64();
                  _val796 = new TPartitionReplicationInfo();
                  _val796.read(iprot);
                  struct.partition_replication_infos.put(_key795, _val796);
                }
                iprot.readMapEnd();
              }
              struct.setPartition_replication_infosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.job_id = iprot.readString();
              struct.setJob_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableReplicationRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDatabase_id()) {
        oprot.writeFieldBegin(DATABASE_ID_FIELD_DESC);
        oprot.writeI64(struct.database_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTable_id()) {
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeI64(struct.table_id);
        oprot.writeFieldEnd();
      }
      if (struct.src_token != null) {
        if (struct.isSetSrc_token()) {
          oprot.writeFieldBegin(SRC_TOKEN_FIELD_DESC);
          oprot.writeString(struct.src_token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.src_table_type != null) {
        if (struct.isSetSrc_table_type()) {
          oprot.writeFieldBegin(SRC_TABLE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.src_table_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSrc_table_data_size()) {
        oprot.writeFieldBegin(SRC_TABLE_DATA_SIZE_FIELD_DESC);
        oprot.writeI64(struct.src_table_data_size);
        oprot.writeFieldEnd();
      }
      if (struct.partition_replication_infos != null) {
        if (struct.isSetPartition_replication_infos()) {
          oprot.writeFieldBegin(PARTITION_REPLICATION_INFOS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.partition_replication_infos.size()));
            for (java.util.Map.Entry<java.lang.Long, TPartitionReplicationInfo> _iter798 : struct.partition_replication_infos.entrySet())
            {
              oprot.writeI64(_iter798.getKey());
              _iter798.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.job_id != null) {
        if (struct.isSetJob_id()) {
          oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
          oprot.writeString(struct.job_id);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableReplicationRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTableReplicationRequestTupleScheme getScheme() {
      return new TTableReplicationRequestTupleScheme();
    }
  }

  private static class TTableReplicationRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTableReplicationRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableReplicationRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUsername()) {
        optionals.set(0);
      }
      if (struct.isSetPassword()) {
        optionals.set(1);
      }
      if (struct.isSetDatabase_id()) {
        optionals.set(2);
      }
      if (struct.isSetTable_id()) {
        optionals.set(3);
      }
      if (struct.isSetSrc_token()) {
        optionals.set(4);
      }
      if (struct.isSetSrc_table_type()) {
        optionals.set(5);
      }
      if (struct.isSetSrc_table_data_size()) {
        optionals.set(6);
      }
      if (struct.isSetPartition_replication_infos()) {
        optionals.set(7);
      }
      if (struct.isSetJob_id()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetDatabase_id()) {
        oprot.writeI64(struct.database_id);
      }
      if (struct.isSetTable_id()) {
        oprot.writeI64(struct.table_id);
      }
      if (struct.isSetSrc_token()) {
        oprot.writeString(struct.src_token);
      }
      if (struct.isSetSrc_table_type()) {
        oprot.writeI32(struct.src_table_type.getValue());
      }
      if (struct.isSetSrc_table_data_size()) {
        oprot.writeI64(struct.src_table_data_size);
      }
      if (struct.isSetPartition_replication_infos()) {
        {
          oprot.writeI32(struct.partition_replication_infos.size());
          for (java.util.Map.Entry<java.lang.Long, TPartitionReplicationInfo> _iter799 : struct.partition_replication_infos.entrySet())
          {
            oprot.writeI64(_iter799.getKey());
            _iter799.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetJob_id()) {
        oprot.writeString(struct.job_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableReplicationRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(2)) {
        struct.database_id = iprot.readI64();
        struct.setDatabase_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.table_id = iprot.readI64();
        struct.setTable_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.src_token = iprot.readString();
        struct.setSrc_tokenIsSet(true);
      }
      if (incoming.get(5)) {
        struct.src_table_type = io.datafibre.fibre.thrift.TTableType.findByValue(iprot.readI32());
        struct.setSrc_table_typeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.src_table_data_size = iprot.readI64();
        struct.setSrc_table_data_sizeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map800 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT); 
          struct.partition_replication_infos = new java.util.HashMap<java.lang.Long,TPartitionReplicationInfo>(2*_map800.size);
          long _key801;
          @org.apache.thrift.annotation.Nullable TPartitionReplicationInfo _val802;
          for (int _i803 = 0; _i803 < _map800.size; ++_i803)
          {
            _key801 = iprot.readI64();
            _val802 = new TPartitionReplicationInfo();
            _val802.read(iprot);
            struct.partition_replication_infos.put(_key801, _val802);
          }
        }
        struct.setPartition_replication_infosIsSet(true);
      }
      if (incoming.get(8)) {
        struct.job_id = iprot.readString();
        struct.setJob_idIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

