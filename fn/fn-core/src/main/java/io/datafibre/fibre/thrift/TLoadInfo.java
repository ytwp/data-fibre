/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TLoadInfo implements org.apache.thrift.TBase<TLoadInfo, TLoadInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TLoadInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLoadInfo");

  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("job_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ETL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("etl_info", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TASK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("task_info", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ETL_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("etl_start_time", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ETL_FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("etl_finish_time", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LOAD_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("load_start_time", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LOAD_FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("load_finish_time", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField JOB_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("job_details", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("error_msg", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_id", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField TRACKING_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("tracking_sql", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField NUM_SCAN_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_scan_rows", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField NUM_FILTERED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_filtered_rows", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField NUM_UNSELECTED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_unselected_rows", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField NUM_SINK_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_sink_rows", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField REJECTED_RECORD_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("rejected_record_path", org.apache.thrift.protocol.TType.STRING, (short)24);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TLoadInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TLoadInfoTupleSchemeFactory();

  public long job_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String label; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String state; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String progress; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String type; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String priority; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String etl_info; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String task_info; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String create_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String etl_start_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String etl_finish_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String load_start_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String load_finish_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String url; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String job_details; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String error_msg; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String db; // optional
  public long txn_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String tracking_sql; // optional
  public long num_scan_rows; // optional
  public long num_filtered_rows; // optional
  public long num_unselected_rows; // optional
  public long num_sink_rows; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String rejected_record_path; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOB_ID((short)1, "job_id"),
    LABEL((short)2, "label"),
    STATE((short)3, "state"),
    PROGRESS((short)4, "progress"),
    TYPE((short)5, "type"),
    PRIORITY((short)6, "priority"),
    ETL_INFO((short)7, "etl_info"),
    TASK_INFO((short)8, "task_info"),
    CREATE_TIME((short)9, "create_time"),
    ETL_START_TIME((short)10, "etl_start_time"),
    ETL_FINISH_TIME((short)11, "etl_finish_time"),
    LOAD_START_TIME((short)12, "load_start_time"),
    LOAD_FINISH_TIME((short)13, "load_finish_time"),
    URL((short)14, "url"),
    JOB_DETAILS((short)15, "job_details"),
    ERROR_MSG((short)16, "error_msg"),
    DB((short)17, "db"),
    TXN_ID((short)18, "txn_id"),
    TRACKING_SQL((short)19, "tracking_sql"),
    NUM_SCAN_ROWS((short)20, "num_scan_rows"),
    NUM_FILTERED_ROWS((short)21, "num_filtered_rows"),
    NUM_UNSELECTED_ROWS((short)22, "num_unselected_rows"),
    NUM_SINK_ROWS((short)23, "num_sink_rows"),
    REJECTED_RECORD_PATH((short)24, "rejected_record_path");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB_ID
          return JOB_ID;
        case 2: // LABEL
          return LABEL;
        case 3: // STATE
          return STATE;
        case 4: // PROGRESS
          return PROGRESS;
        case 5: // TYPE
          return TYPE;
        case 6: // PRIORITY
          return PRIORITY;
        case 7: // ETL_INFO
          return ETL_INFO;
        case 8: // TASK_INFO
          return TASK_INFO;
        case 9: // CREATE_TIME
          return CREATE_TIME;
        case 10: // ETL_START_TIME
          return ETL_START_TIME;
        case 11: // ETL_FINISH_TIME
          return ETL_FINISH_TIME;
        case 12: // LOAD_START_TIME
          return LOAD_START_TIME;
        case 13: // LOAD_FINISH_TIME
          return LOAD_FINISH_TIME;
        case 14: // URL
          return URL;
        case 15: // JOB_DETAILS
          return JOB_DETAILS;
        case 16: // ERROR_MSG
          return ERROR_MSG;
        case 17: // DB
          return DB;
        case 18: // TXN_ID
          return TXN_ID;
        case 19: // TRACKING_SQL
          return TRACKING_SQL;
        case 20: // NUM_SCAN_ROWS
          return NUM_SCAN_ROWS;
        case 21: // NUM_FILTERED_ROWS
          return NUM_FILTERED_ROWS;
        case 22: // NUM_UNSELECTED_ROWS
          return NUM_UNSELECTED_ROWS;
        case 23: // NUM_SINK_ROWS
          return NUM_SINK_ROWS;
        case 24: // REJECTED_RECORD_PATH
          return REJECTED_RECORD_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __JOB_ID_ISSET_ID = 0;
  private static final int __TXN_ID_ISSET_ID = 1;
  private static final int __NUM_SCAN_ROWS_ISSET_ID = 2;
  private static final int __NUM_FILTERED_ROWS_ISSET_ID = 3;
  private static final int __NUM_UNSELECTED_ROWS_ISSET_ID = 4;
  private static final int __NUM_SINK_ROWS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.JOB_ID,_Fields.LABEL,_Fields.STATE,_Fields.PROGRESS,_Fields.TYPE,_Fields.PRIORITY,_Fields.ETL_INFO,_Fields.TASK_INFO,_Fields.CREATE_TIME,_Fields.ETL_START_TIME,_Fields.ETL_FINISH_TIME,_Fields.LOAD_START_TIME,_Fields.LOAD_FINISH_TIME,_Fields.URL,_Fields.JOB_DETAILS,_Fields.ERROR_MSG,_Fields.DB,_Fields.TXN_ID,_Fields.TRACKING_SQL,_Fields.NUM_SCAN_ROWS,_Fields.NUM_FILTERED_ROWS,_Fields.NUM_UNSELECTED_ROWS,_Fields.NUM_SINK_ROWS,_Fields.REJECTED_RECORD_PATH};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("job_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("progress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ETL_INFO, new org.apache.thrift.meta_data.FieldMetaData("etl_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_INFO, new org.apache.thrift.meta_data.FieldMetaData("task_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ETL_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("etl_start_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ETL_FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("etl_finish_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAD_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("load_start_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAD_FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("load_finish_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("job_details", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("error_msg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txn_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRACKING_SQL, new org.apache.thrift.meta_data.FieldMetaData("tracking_sql", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_SCAN_ROWS, new org.apache.thrift.meta_data.FieldMetaData("num_scan_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_FILTERED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("num_filtered_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_UNSELECTED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("num_unselected_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_SINK_ROWS, new org.apache.thrift.meta_data.FieldMetaData("num_sink_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REJECTED_RECORD_PATH, new org.apache.thrift.meta_data.FieldMetaData("rejected_record_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLoadInfo.class, metaDataMap);
  }

  public TLoadInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLoadInfo(TLoadInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.job_id = other.job_id;
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetProgress()) {
      this.progress = other.progress;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetPriority()) {
      this.priority = other.priority;
    }
    if (other.isSetEtl_info()) {
      this.etl_info = other.etl_info;
    }
    if (other.isSetTask_info()) {
      this.task_info = other.task_info;
    }
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    if (other.isSetEtl_start_time()) {
      this.etl_start_time = other.etl_start_time;
    }
    if (other.isSetEtl_finish_time()) {
      this.etl_finish_time = other.etl_finish_time;
    }
    if (other.isSetLoad_start_time()) {
      this.load_start_time = other.load_start_time;
    }
    if (other.isSetLoad_finish_time()) {
      this.load_finish_time = other.load_finish_time;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetJob_details()) {
      this.job_details = other.job_details;
    }
    if (other.isSetError_msg()) {
      this.error_msg = other.error_msg;
    }
    if (other.isSetDb()) {
      this.db = other.db;
    }
    this.txn_id = other.txn_id;
    if (other.isSetTracking_sql()) {
      this.tracking_sql = other.tracking_sql;
    }
    this.num_scan_rows = other.num_scan_rows;
    this.num_filtered_rows = other.num_filtered_rows;
    this.num_unselected_rows = other.num_unselected_rows;
    this.num_sink_rows = other.num_sink_rows;
    if (other.isSetRejected_record_path()) {
      this.rejected_record_path = other.rejected_record_path;
    }
  }

  @Override
  public TLoadInfo deepCopy() {
    return new TLoadInfo(this);
  }

  @Override
  public void clear() {
    setJob_idIsSet(false);
    this.job_id = 0;
    this.label = null;
    this.state = null;
    this.progress = null;
    this.type = null;
    this.priority = null;
    this.etl_info = null;
    this.task_info = null;
    this.create_time = null;
    this.etl_start_time = null;
    this.etl_finish_time = null;
    this.load_start_time = null;
    this.load_finish_time = null;
    this.url = null;
    this.job_details = null;
    this.error_msg = null;
    this.db = null;
    setTxn_idIsSet(false);
    this.txn_id = 0;
    this.tracking_sql = null;
    setNum_scan_rowsIsSet(false);
    this.num_scan_rows = 0;
    setNum_filtered_rowsIsSet(false);
    this.num_filtered_rows = 0;
    setNum_unselected_rowsIsSet(false);
    this.num_unselected_rows = 0;
    setNum_sink_rowsIsSet(false);
    this.num_sink_rows = 0;
    this.rejected_record_path = null;
  }

  public long getJob_id() {
    return this.job_id;
  }

  public TLoadInfo setJob_id(long job_id) {
    this.job_id = job_id;
    setJob_idIsSet(true);
    return this;
  }

  public void unsetJob_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOB_ID_ISSET_ID);
  }

  /** Returns true if field job_id is set (has been assigned a value) and false otherwise */
  public boolean isSetJob_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOB_ID_ISSET_ID);
  }

  public void setJob_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOB_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLabel() {
    return this.label;
  }

  public TLoadInfo setLabel(@org.apache.thrift.annotation.Nullable java.lang.String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getState() {
    return this.state;
  }

  public TLoadInfo setState(@org.apache.thrift.annotation.Nullable java.lang.String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getProgress() {
    return this.progress;
  }

  public TLoadInfo setProgress(@org.apache.thrift.annotation.Nullable java.lang.String progress) {
    this.progress = progress;
    return this;
  }

  public void unsetProgress() {
    this.progress = null;
  }

  /** Returns true if field progress is set (has been assigned a value) and false otherwise */
  public boolean isSetProgress() {
    return this.progress != null;
  }

  public void setProgressIsSet(boolean value) {
    if (!value) {
      this.progress = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getType() {
    return this.type;
  }

  public TLoadInfo setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPriority() {
    return this.priority;
  }

  public TLoadInfo setPriority(@org.apache.thrift.annotation.Nullable java.lang.String priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEtl_info() {
    return this.etl_info;
  }

  public TLoadInfo setEtl_info(@org.apache.thrift.annotation.Nullable java.lang.String etl_info) {
    this.etl_info = etl_info;
    return this;
  }

  public void unsetEtl_info() {
    this.etl_info = null;
  }

  /** Returns true if field etl_info is set (has been assigned a value) and false otherwise */
  public boolean isSetEtl_info() {
    return this.etl_info != null;
  }

  public void setEtl_infoIsSet(boolean value) {
    if (!value) {
      this.etl_info = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTask_info() {
    return this.task_info;
  }

  public TLoadInfo setTask_info(@org.apache.thrift.annotation.Nullable java.lang.String task_info) {
    this.task_info = task_info;
    return this;
  }

  public void unsetTask_info() {
    this.task_info = null;
  }

  /** Returns true if field task_info is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_info() {
    return this.task_info != null;
  }

  public void setTask_infoIsSet(boolean value) {
    if (!value) {
      this.task_info = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCreate_time() {
    return this.create_time;
  }

  public TLoadInfo setCreate_time(@org.apache.thrift.annotation.Nullable java.lang.String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEtl_start_time() {
    return this.etl_start_time;
  }

  public TLoadInfo setEtl_start_time(@org.apache.thrift.annotation.Nullable java.lang.String etl_start_time) {
    this.etl_start_time = etl_start_time;
    return this;
  }

  public void unsetEtl_start_time() {
    this.etl_start_time = null;
  }

  /** Returns true if field etl_start_time is set (has been assigned a value) and false otherwise */
  public boolean isSetEtl_start_time() {
    return this.etl_start_time != null;
  }

  public void setEtl_start_timeIsSet(boolean value) {
    if (!value) {
      this.etl_start_time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEtl_finish_time() {
    return this.etl_finish_time;
  }

  public TLoadInfo setEtl_finish_time(@org.apache.thrift.annotation.Nullable java.lang.String etl_finish_time) {
    this.etl_finish_time = etl_finish_time;
    return this;
  }

  public void unsetEtl_finish_time() {
    this.etl_finish_time = null;
  }

  /** Returns true if field etl_finish_time is set (has been assigned a value) and false otherwise */
  public boolean isSetEtl_finish_time() {
    return this.etl_finish_time != null;
  }

  public void setEtl_finish_timeIsSet(boolean value) {
    if (!value) {
      this.etl_finish_time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLoad_start_time() {
    return this.load_start_time;
  }

  public TLoadInfo setLoad_start_time(@org.apache.thrift.annotation.Nullable java.lang.String load_start_time) {
    this.load_start_time = load_start_time;
    return this;
  }

  public void unsetLoad_start_time() {
    this.load_start_time = null;
  }

  /** Returns true if field load_start_time is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_start_time() {
    return this.load_start_time != null;
  }

  public void setLoad_start_timeIsSet(boolean value) {
    if (!value) {
      this.load_start_time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLoad_finish_time() {
    return this.load_finish_time;
  }

  public TLoadInfo setLoad_finish_time(@org.apache.thrift.annotation.Nullable java.lang.String load_finish_time) {
    this.load_finish_time = load_finish_time;
    return this;
  }

  public void unsetLoad_finish_time() {
    this.load_finish_time = null;
  }

  /** Returns true if field load_finish_time is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_finish_time() {
    return this.load_finish_time != null;
  }

  public void setLoad_finish_timeIsSet(boolean value) {
    if (!value) {
      this.load_finish_time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUrl() {
    return this.url;
  }

  public TLoadInfo setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJob_details() {
    return this.job_details;
  }

  public TLoadInfo setJob_details(@org.apache.thrift.annotation.Nullable java.lang.String job_details) {
    this.job_details = job_details;
    return this;
  }

  public void unsetJob_details() {
    this.job_details = null;
  }

  /** Returns true if field job_details is set (has been assigned a value) and false otherwise */
  public boolean isSetJob_details() {
    return this.job_details != null;
  }

  public void setJob_detailsIsSet(boolean value) {
    if (!value) {
      this.job_details = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getError_msg() {
    return this.error_msg;
  }

  public TLoadInfo setError_msg(@org.apache.thrift.annotation.Nullable java.lang.String error_msg) {
    this.error_msg = error_msg;
    return this;
  }

  public void unsetError_msg() {
    this.error_msg = null;
  }

  /** Returns true if field error_msg is set (has been assigned a value) and false otherwise */
  public boolean isSetError_msg() {
    return this.error_msg != null;
  }

  public void setError_msgIsSet(boolean value) {
    if (!value) {
      this.error_msg = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb() {
    return this.db;
  }

  public TLoadInfo setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  public long getTxn_id() {
    return this.txn_id;
  }

  public TLoadInfo setTxn_id(long txn_id) {
    this.txn_id = txn_id;
    setTxn_idIsSet(true);
    return this;
  }

  public void unsetTxn_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  /** Returns true if field txn_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  public void setTxn_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXN_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTracking_sql() {
    return this.tracking_sql;
  }

  public TLoadInfo setTracking_sql(@org.apache.thrift.annotation.Nullable java.lang.String tracking_sql) {
    this.tracking_sql = tracking_sql;
    return this;
  }

  public void unsetTracking_sql() {
    this.tracking_sql = null;
  }

  /** Returns true if field tracking_sql is set (has been assigned a value) and false otherwise */
  public boolean isSetTracking_sql() {
    return this.tracking_sql != null;
  }

  public void setTracking_sqlIsSet(boolean value) {
    if (!value) {
      this.tracking_sql = null;
    }
  }

  public long getNum_scan_rows() {
    return this.num_scan_rows;
  }

  public TLoadInfo setNum_scan_rows(long num_scan_rows) {
    this.num_scan_rows = num_scan_rows;
    setNum_scan_rowsIsSet(true);
    return this;
  }

  public void unsetNum_scan_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_SCAN_ROWS_ISSET_ID);
  }

  /** Returns true if field num_scan_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_scan_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_SCAN_ROWS_ISSET_ID);
  }

  public void setNum_scan_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_SCAN_ROWS_ISSET_ID, value);
  }

  public long getNum_filtered_rows() {
    return this.num_filtered_rows;
  }

  public TLoadInfo setNum_filtered_rows(long num_filtered_rows) {
    this.num_filtered_rows = num_filtered_rows;
    setNum_filtered_rowsIsSet(true);
    return this;
  }

  public void unsetNum_filtered_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_FILTERED_ROWS_ISSET_ID);
  }

  /** Returns true if field num_filtered_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_filtered_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_FILTERED_ROWS_ISSET_ID);
  }

  public void setNum_filtered_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_FILTERED_ROWS_ISSET_ID, value);
  }

  public long getNum_unselected_rows() {
    return this.num_unselected_rows;
  }

  public TLoadInfo setNum_unselected_rows(long num_unselected_rows) {
    this.num_unselected_rows = num_unselected_rows;
    setNum_unselected_rowsIsSet(true);
    return this;
  }

  public void unsetNum_unselected_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_UNSELECTED_ROWS_ISSET_ID);
  }

  /** Returns true if field num_unselected_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_unselected_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_UNSELECTED_ROWS_ISSET_ID);
  }

  public void setNum_unselected_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_UNSELECTED_ROWS_ISSET_ID, value);
  }

  public long getNum_sink_rows() {
    return this.num_sink_rows;
  }

  public TLoadInfo setNum_sink_rows(long num_sink_rows) {
    this.num_sink_rows = num_sink_rows;
    setNum_sink_rowsIsSet(true);
    return this;
  }

  public void unsetNum_sink_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_SINK_ROWS_ISSET_ID);
  }

  /** Returns true if field num_sink_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_sink_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_SINK_ROWS_ISSET_ID);
  }

  public void setNum_sink_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_SINK_ROWS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRejected_record_path() {
    return this.rejected_record_path;
  }

  public TLoadInfo setRejected_record_path(@org.apache.thrift.annotation.Nullable java.lang.String rejected_record_path) {
    this.rejected_record_path = rejected_record_path;
    return this;
  }

  public void unsetRejected_record_path() {
    this.rejected_record_path = null;
  }

  /** Returns true if field rejected_record_path is set (has been assigned a value) and false otherwise */
  public boolean isSetRejected_record_path() {
    return this.rejected_record_path != null;
  }

  public void setRejected_record_pathIsSet(boolean value) {
    if (!value) {
      this.rejected_record_path = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case JOB_ID:
      if (value == null) {
        unsetJob_id();
      } else {
        setJob_id((java.lang.Long)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((java.lang.String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.String)value);
      }
      break;

    case PROGRESS:
      if (value == null) {
        unsetProgress();
      } else {
        setProgress((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((java.lang.String)value);
      }
      break;

    case ETL_INFO:
      if (value == null) {
        unsetEtl_info();
      } else {
        setEtl_info((java.lang.String)value);
      }
      break;

    case TASK_INFO:
      if (value == null) {
        unsetTask_info();
      } else {
        setTask_info((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((java.lang.String)value);
      }
      break;

    case ETL_START_TIME:
      if (value == null) {
        unsetEtl_start_time();
      } else {
        setEtl_start_time((java.lang.String)value);
      }
      break;

    case ETL_FINISH_TIME:
      if (value == null) {
        unsetEtl_finish_time();
      } else {
        setEtl_finish_time((java.lang.String)value);
      }
      break;

    case LOAD_START_TIME:
      if (value == null) {
        unsetLoad_start_time();
      } else {
        setLoad_start_time((java.lang.String)value);
      }
      break;

    case LOAD_FINISH_TIME:
      if (value == null) {
        unsetLoad_finish_time();
      } else {
        setLoad_finish_time((java.lang.String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((java.lang.String)value);
      }
      break;

    case JOB_DETAILS:
      if (value == null) {
        unsetJob_details();
      } else {
        setJob_details((java.lang.String)value);
      }
      break;

    case ERROR_MSG:
      if (value == null) {
        unsetError_msg();
      } else {
        setError_msg((java.lang.String)value);
      }
      break;

    case DB:
      if (value == null) {
        unsetDb();
      } else {
        setDb((java.lang.String)value);
      }
      break;

    case TXN_ID:
      if (value == null) {
        unsetTxn_id();
      } else {
        setTxn_id((java.lang.Long)value);
      }
      break;

    case TRACKING_SQL:
      if (value == null) {
        unsetTracking_sql();
      } else {
        setTracking_sql((java.lang.String)value);
      }
      break;

    case NUM_SCAN_ROWS:
      if (value == null) {
        unsetNum_scan_rows();
      } else {
        setNum_scan_rows((java.lang.Long)value);
      }
      break;

    case NUM_FILTERED_ROWS:
      if (value == null) {
        unsetNum_filtered_rows();
      } else {
        setNum_filtered_rows((java.lang.Long)value);
      }
      break;

    case NUM_UNSELECTED_ROWS:
      if (value == null) {
        unsetNum_unselected_rows();
      } else {
        setNum_unselected_rows((java.lang.Long)value);
      }
      break;

    case NUM_SINK_ROWS:
      if (value == null) {
        unsetNum_sink_rows();
      } else {
        setNum_sink_rows((java.lang.Long)value);
      }
      break;

    case REJECTED_RECORD_PATH:
      if (value == null) {
        unsetRejected_record_path();
      } else {
        setRejected_record_path((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case JOB_ID:
      return getJob_id();

    case LABEL:
      return getLabel();

    case STATE:
      return getState();

    case PROGRESS:
      return getProgress();

    case TYPE:
      return getType();

    case PRIORITY:
      return getPriority();

    case ETL_INFO:
      return getEtl_info();

    case TASK_INFO:
      return getTask_info();

    case CREATE_TIME:
      return getCreate_time();

    case ETL_START_TIME:
      return getEtl_start_time();

    case ETL_FINISH_TIME:
      return getEtl_finish_time();

    case LOAD_START_TIME:
      return getLoad_start_time();

    case LOAD_FINISH_TIME:
      return getLoad_finish_time();

    case URL:
      return getUrl();

    case JOB_DETAILS:
      return getJob_details();

    case ERROR_MSG:
      return getError_msg();

    case DB:
      return getDb();

    case TXN_ID:
      return getTxn_id();

    case TRACKING_SQL:
      return getTracking_sql();

    case NUM_SCAN_ROWS:
      return getNum_scan_rows();

    case NUM_FILTERED_ROWS:
      return getNum_filtered_rows();

    case NUM_UNSELECTED_ROWS:
      return getNum_unselected_rows();

    case NUM_SINK_ROWS:
      return getNum_sink_rows();

    case REJECTED_RECORD_PATH:
      return getRejected_record_path();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case JOB_ID:
      return isSetJob_id();
    case LABEL:
      return isSetLabel();
    case STATE:
      return isSetState();
    case PROGRESS:
      return isSetProgress();
    case TYPE:
      return isSetType();
    case PRIORITY:
      return isSetPriority();
    case ETL_INFO:
      return isSetEtl_info();
    case TASK_INFO:
      return isSetTask_info();
    case CREATE_TIME:
      return isSetCreate_time();
    case ETL_START_TIME:
      return isSetEtl_start_time();
    case ETL_FINISH_TIME:
      return isSetEtl_finish_time();
    case LOAD_START_TIME:
      return isSetLoad_start_time();
    case LOAD_FINISH_TIME:
      return isSetLoad_finish_time();
    case URL:
      return isSetUrl();
    case JOB_DETAILS:
      return isSetJob_details();
    case ERROR_MSG:
      return isSetError_msg();
    case DB:
      return isSetDb();
    case TXN_ID:
      return isSetTxn_id();
    case TRACKING_SQL:
      return isSetTracking_sql();
    case NUM_SCAN_ROWS:
      return isSetNum_scan_rows();
    case NUM_FILTERED_ROWS:
      return isSetNum_filtered_rows();
    case NUM_UNSELECTED_ROWS:
      return isSetNum_unselected_rows();
    case NUM_SINK_ROWS:
      return isSetNum_sink_rows();
    case REJECTED_RECORD_PATH:
      return isSetRejected_record_path();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TLoadInfo)
      return this.equals((TLoadInfo)that);
    return false;
  }

  public boolean equals(TLoadInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_job_id = true && this.isSetJob_id();
    boolean that_present_job_id = true && that.isSetJob_id();
    if (this_present_job_id || that_present_job_id) {
      if (!(this_present_job_id && that_present_job_id))
        return false;
      if (this.job_id != that.job_id)
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_progress = true && this.isSetProgress();
    boolean that_present_progress = true && that.isSetProgress();
    if (this_present_progress || that_present_progress) {
      if (!(this_present_progress && that_present_progress))
        return false;
      if (!this.progress.equals(that.progress))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_etl_info = true && this.isSetEtl_info();
    boolean that_present_etl_info = true && that.isSetEtl_info();
    if (this_present_etl_info || that_present_etl_info) {
      if (!(this_present_etl_info && that_present_etl_info))
        return false;
      if (!this.etl_info.equals(that.etl_info))
        return false;
    }

    boolean this_present_task_info = true && this.isSetTask_info();
    boolean that_present_task_info = true && that.isSetTask_info();
    if (this_present_task_info || that_present_task_info) {
      if (!(this_present_task_info && that_present_task_info))
        return false;
      if (!this.task_info.equals(that.task_info))
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_etl_start_time = true && this.isSetEtl_start_time();
    boolean that_present_etl_start_time = true && that.isSetEtl_start_time();
    if (this_present_etl_start_time || that_present_etl_start_time) {
      if (!(this_present_etl_start_time && that_present_etl_start_time))
        return false;
      if (!this.etl_start_time.equals(that.etl_start_time))
        return false;
    }

    boolean this_present_etl_finish_time = true && this.isSetEtl_finish_time();
    boolean that_present_etl_finish_time = true && that.isSetEtl_finish_time();
    if (this_present_etl_finish_time || that_present_etl_finish_time) {
      if (!(this_present_etl_finish_time && that_present_etl_finish_time))
        return false;
      if (!this.etl_finish_time.equals(that.etl_finish_time))
        return false;
    }

    boolean this_present_load_start_time = true && this.isSetLoad_start_time();
    boolean that_present_load_start_time = true && that.isSetLoad_start_time();
    if (this_present_load_start_time || that_present_load_start_time) {
      if (!(this_present_load_start_time && that_present_load_start_time))
        return false;
      if (!this.load_start_time.equals(that.load_start_time))
        return false;
    }

    boolean this_present_load_finish_time = true && this.isSetLoad_finish_time();
    boolean that_present_load_finish_time = true && that.isSetLoad_finish_time();
    if (this_present_load_finish_time || that_present_load_finish_time) {
      if (!(this_present_load_finish_time && that_present_load_finish_time))
        return false;
      if (!this.load_finish_time.equals(that.load_finish_time))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_job_details = true && this.isSetJob_details();
    boolean that_present_job_details = true && that.isSetJob_details();
    if (this_present_job_details || that_present_job_details) {
      if (!(this_present_job_details && that_present_job_details))
        return false;
      if (!this.job_details.equals(that.job_details))
        return false;
    }

    boolean this_present_error_msg = true && this.isSetError_msg();
    boolean that_present_error_msg = true && that.isSetError_msg();
    if (this_present_error_msg || that_present_error_msg) {
      if (!(this_present_error_msg && that_present_error_msg))
        return false;
      if (!this.error_msg.equals(that.error_msg))
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_txn_id = true && this.isSetTxn_id();
    boolean that_present_txn_id = true && that.isSetTxn_id();
    if (this_present_txn_id || that_present_txn_id) {
      if (!(this_present_txn_id && that_present_txn_id))
        return false;
      if (this.txn_id != that.txn_id)
        return false;
    }

    boolean this_present_tracking_sql = true && this.isSetTracking_sql();
    boolean that_present_tracking_sql = true && that.isSetTracking_sql();
    if (this_present_tracking_sql || that_present_tracking_sql) {
      if (!(this_present_tracking_sql && that_present_tracking_sql))
        return false;
      if (!this.tracking_sql.equals(that.tracking_sql))
        return false;
    }

    boolean this_present_num_scan_rows = true && this.isSetNum_scan_rows();
    boolean that_present_num_scan_rows = true && that.isSetNum_scan_rows();
    if (this_present_num_scan_rows || that_present_num_scan_rows) {
      if (!(this_present_num_scan_rows && that_present_num_scan_rows))
        return false;
      if (this.num_scan_rows != that.num_scan_rows)
        return false;
    }

    boolean this_present_num_filtered_rows = true && this.isSetNum_filtered_rows();
    boolean that_present_num_filtered_rows = true && that.isSetNum_filtered_rows();
    if (this_present_num_filtered_rows || that_present_num_filtered_rows) {
      if (!(this_present_num_filtered_rows && that_present_num_filtered_rows))
        return false;
      if (this.num_filtered_rows != that.num_filtered_rows)
        return false;
    }

    boolean this_present_num_unselected_rows = true && this.isSetNum_unselected_rows();
    boolean that_present_num_unselected_rows = true && that.isSetNum_unselected_rows();
    if (this_present_num_unselected_rows || that_present_num_unselected_rows) {
      if (!(this_present_num_unselected_rows && that_present_num_unselected_rows))
        return false;
      if (this.num_unselected_rows != that.num_unselected_rows)
        return false;
    }

    boolean this_present_num_sink_rows = true && this.isSetNum_sink_rows();
    boolean that_present_num_sink_rows = true && that.isSetNum_sink_rows();
    if (this_present_num_sink_rows || that_present_num_sink_rows) {
      if (!(this_present_num_sink_rows && that_present_num_sink_rows))
        return false;
      if (this.num_sink_rows != that.num_sink_rows)
        return false;
    }

    boolean this_present_rejected_record_path = true && this.isSetRejected_record_path();
    boolean that_present_rejected_record_path = true && that.isSetRejected_record_path();
    if (this_present_rejected_record_path || that_present_rejected_record_path) {
      if (!(this_present_rejected_record_path && that_present_rejected_record_path))
        return false;
      if (!this.rejected_record_path.equals(that.rejected_record_path))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetJob_id()) ? 131071 : 524287);
    if (isSetJob_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(job_id);

    hashCode = hashCode * 8191 + ((isSetLabel()) ? 131071 : 524287);
    if (isSetLabel())
      hashCode = hashCode * 8191 + label.hashCode();

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.hashCode();

    hashCode = hashCode * 8191 + ((isSetProgress()) ? 131071 : 524287);
    if (isSetProgress())
      hashCode = hashCode * 8191 + progress.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
    if (isSetPriority())
      hashCode = hashCode * 8191 + priority.hashCode();

    hashCode = hashCode * 8191 + ((isSetEtl_info()) ? 131071 : 524287);
    if (isSetEtl_info())
      hashCode = hashCode * 8191 + etl_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetTask_info()) ? 131071 : 524287);
    if (isSetTask_info())
      hashCode = hashCode * 8191 + task_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreate_time()) ? 131071 : 524287);
    if (isSetCreate_time())
      hashCode = hashCode * 8191 + create_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetEtl_start_time()) ? 131071 : 524287);
    if (isSetEtl_start_time())
      hashCode = hashCode * 8191 + etl_start_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetEtl_finish_time()) ? 131071 : 524287);
    if (isSetEtl_finish_time())
      hashCode = hashCode * 8191 + etl_finish_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoad_start_time()) ? 131071 : 524287);
    if (isSetLoad_start_time())
      hashCode = hashCode * 8191 + load_start_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoad_finish_time()) ? 131071 : 524287);
    if (isSetLoad_finish_time())
      hashCode = hashCode * 8191 + load_finish_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + ((isSetJob_details()) ? 131071 : 524287);
    if (isSetJob_details())
      hashCode = hashCode * 8191 + job_details.hashCode();

    hashCode = hashCode * 8191 + ((isSetError_msg()) ? 131071 : 524287);
    if (isSetError_msg())
      hashCode = hashCode * 8191 + error_msg.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
    if (isSetDb())
      hashCode = hashCode * 8191 + db.hashCode();

    hashCode = hashCode * 8191 + ((isSetTxn_id()) ? 131071 : 524287);
    if (isSetTxn_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txn_id);

    hashCode = hashCode * 8191 + ((isSetTracking_sql()) ? 131071 : 524287);
    if (isSetTracking_sql())
      hashCode = hashCode * 8191 + tracking_sql.hashCode();

    hashCode = hashCode * 8191 + ((isSetNum_scan_rows()) ? 131071 : 524287);
    if (isSetNum_scan_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(num_scan_rows);

    hashCode = hashCode * 8191 + ((isSetNum_filtered_rows()) ? 131071 : 524287);
    if (isSetNum_filtered_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(num_filtered_rows);

    hashCode = hashCode * 8191 + ((isSetNum_unselected_rows()) ? 131071 : 524287);
    if (isSetNum_unselected_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(num_unselected_rows);

    hashCode = hashCode * 8191 + ((isSetNum_sink_rows()) ? 131071 : 524287);
    if (isSetNum_sink_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(num_sink_rows);

    hashCode = hashCode * 8191 + ((isSetRejected_record_path()) ? 131071 : 524287);
    if (isSetRejected_record_path())
      hashCode = hashCode * 8191 + rejected_record_path.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TLoadInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetJob_id(), other.isSetJob_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job_id, other.job_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLabel(), other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProgress(), other.isSetProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress, other.progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPriority(), other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEtl_info(), other.isSetEtl_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEtl_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.etl_info, other.etl_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTask_info(), other.isSetTask_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_info, other.task_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreate_time(), other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEtl_start_time(), other.isSetEtl_start_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEtl_start_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.etl_start_time, other.etl_start_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEtl_finish_time(), other.isSetEtl_finish_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEtl_finish_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.etl_finish_time, other.etl_finish_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_start_time(), other.isSetLoad_start_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_start_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_start_time, other.load_start_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_finish_time(), other.isSetLoad_finish_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_finish_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_finish_time, other.load_finish_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJob_details(), other.isSetJob_details());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob_details()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job_details, other.job_details);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetError_msg(), other.isSetError_msg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_msg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_msg, other.error_msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb(), other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxn_id(), other.isSetTxn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_id, other.txn_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTracking_sql(), other.isSetTracking_sql());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTracking_sql()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracking_sql, other.tracking_sql);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_scan_rows(), other.isSetNum_scan_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_scan_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_scan_rows, other.num_scan_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_filtered_rows(), other.isSetNum_filtered_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_filtered_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_filtered_rows, other.num_filtered_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_unselected_rows(), other.isSetNum_unselected_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_unselected_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_unselected_rows, other.num_unselected_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_sink_rows(), other.isSetNum_sink_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_sink_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_sink_rows, other.num_sink_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRejected_record_path(), other.isSetRejected_record_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRejected_record_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rejected_record_path, other.rejected_record_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TLoadInfo(");
    boolean first = true;

    if (isSetJob_id()) {
      sb.append("job_id:");
      sb.append(this.job_id);
      first = false;
    }
    if (isSetLabel()) {
      if (!first) sb.append(", ");
      sb.append("label:");
      if (this.label == null) {
        sb.append("null");
      } else {
        sb.append(this.label);
      }
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetProgress()) {
      if (!first) sb.append(", ");
      sb.append("progress:");
      if (this.progress == null) {
        sb.append("null");
      } else {
        sb.append(this.progress);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      if (this.priority == null) {
        sb.append("null");
      } else {
        sb.append(this.priority);
      }
      first = false;
    }
    if (isSetEtl_info()) {
      if (!first) sb.append(", ");
      sb.append("etl_info:");
      if (this.etl_info == null) {
        sb.append("null");
      } else {
        sb.append(this.etl_info);
      }
      first = false;
    }
    if (isSetTask_info()) {
      if (!first) sb.append(", ");
      sb.append("task_info:");
      if (this.task_info == null) {
        sb.append("null");
      } else {
        sb.append(this.task_info);
      }
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      if (this.create_time == null) {
        sb.append("null");
      } else {
        sb.append(this.create_time);
      }
      first = false;
    }
    if (isSetEtl_start_time()) {
      if (!first) sb.append(", ");
      sb.append("etl_start_time:");
      if (this.etl_start_time == null) {
        sb.append("null");
      } else {
        sb.append(this.etl_start_time);
      }
      first = false;
    }
    if (isSetEtl_finish_time()) {
      if (!first) sb.append(", ");
      sb.append("etl_finish_time:");
      if (this.etl_finish_time == null) {
        sb.append("null");
      } else {
        sb.append(this.etl_finish_time);
      }
      first = false;
    }
    if (isSetLoad_start_time()) {
      if (!first) sb.append(", ");
      sb.append("load_start_time:");
      if (this.load_start_time == null) {
        sb.append("null");
      } else {
        sb.append(this.load_start_time);
      }
      first = false;
    }
    if (isSetLoad_finish_time()) {
      if (!first) sb.append(", ");
      sb.append("load_finish_time:");
      if (this.load_finish_time == null) {
        sb.append("null");
      } else {
        sb.append(this.load_finish_time);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetJob_details()) {
      if (!first) sb.append(", ");
      sb.append("job_details:");
      if (this.job_details == null) {
        sb.append("null");
      } else {
        sb.append(this.job_details);
      }
      first = false;
    }
    if (isSetError_msg()) {
      if (!first) sb.append(", ");
      sb.append("error_msg:");
      if (this.error_msg == null) {
        sb.append("null");
      } else {
        sb.append(this.error_msg);
      }
      first = false;
    }
    if (isSetDb()) {
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
    }
    if (isSetTxn_id()) {
      if (!first) sb.append(", ");
      sb.append("txn_id:");
      sb.append(this.txn_id);
      first = false;
    }
    if (isSetTracking_sql()) {
      if (!first) sb.append(", ");
      sb.append("tracking_sql:");
      if (this.tracking_sql == null) {
        sb.append("null");
      } else {
        sb.append(this.tracking_sql);
      }
      first = false;
    }
    if (isSetNum_scan_rows()) {
      if (!first) sb.append(", ");
      sb.append("num_scan_rows:");
      sb.append(this.num_scan_rows);
      first = false;
    }
    if (isSetNum_filtered_rows()) {
      if (!first) sb.append(", ");
      sb.append("num_filtered_rows:");
      sb.append(this.num_filtered_rows);
      first = false;
    }
    if (isSetNum_unselected_rows()) {
      if (!first) sb.append(", ");
      sb.append("num_unselected_rows:");
      sb.append(this.num_unselected_rows);
      first = false;
    }
    if (isSetNum_sink_rows()) {
      if (!first) sb.append(", ");
      sb.append("num_sink_rows:");
      sb.append(this.num_sink_rows);
      first = false;
    }
    if (isSetRejected_record_path()) {
      if (!first) sb.append(", ");
      sb.append("rejected_record_path:");
      if (this.rejected_record_path == null) {
        sb.append("null");
      } else {
        sb.append(this.rejected_record_path);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLoadInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TLoadInfoStandardScheme getScheme() {
      return new TLoadInfoStandardScheme();
    }
  }

  private static class TLoadInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TLoadInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TLoadInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.job_id = iprot.readI64();
              struct.setJob_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.progress = iprot.readString();
              struct.setProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.priority = iprot.readString();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ETL_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.etl_info = iprot.readString();
              struct.setEtl_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TASK_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.task_info = iprot.readString();
              struct.setTask_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ETL_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.etl_start_time = iprot.readString();
              struct.setEtl_start_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ETL_FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.etl_finish_time = iprot.readString();
              struct.setEtl_finish_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOAD_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.load_start_time = iprot.readString();
              struct.setLoad_start_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LOAD_FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.load_finish_time = iprot.readString();
              struct.setLoad_finish_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // JOB_DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.job_details = iprot.readString();
              struct.setJob_detailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ERROR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error_msg = iprot.readString();
              struct.setError_msgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txn_id = iprot.readI64();
              struct.setTxn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TRACKING_SQL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tracking_sql = iprot.readString();
              struct.setTracking_sqlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // NUM_SCAN_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_scan_rows = iprot.readI64();
              struct.setNum_scan_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // NUM_FILTERED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_filtered_rows = iprot.readI64();
              struct.setNum_filtered_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // NUM_UNSELECTED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_unselected_rows = iprot.readI64();
              struct.setNum_unselected_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // NUM_SINK_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_sink_rows = iprot.readI64();
              struct.setNum_sink_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // REJECTED_RECORD_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rejected_record_path = iprot.readString();
              struct.setRejected_record_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TLoadInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetJob_id()) {
        oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
        oprot.writeI64(struct.job_id);
        oprot.writeFieldEnd();
      }
      if (struct.label != null) {
        if (struct.isSetLabel()) {
          oprot.writeFieldBegin(LABEL_FIELD_DESC);
          oprot.writeString(struct.label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.progress != null) {
        if (struct.isSetProgress()) {
          oprot.writeFieldBegin(PROGRESS_FIELD_DESC);
          oprot.writeString(struct.progress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.priority != null) {
        if (struct.isSetPriority()) {
          oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
          oprot.writeString(struct.priority);
          oprot.writeFieldEnd();
        }
      }
      if (struct.etl_info != null) {
        if (struct.isSetEtl_info()) {
          oprot.writeFieldBegin(ETL_INFO_FIELD_DESC);
          oprot.writeString(struct.etl_info);
          oprot.writeFieldEnd();
        }
      }
      if (struct.task_info != null) {
        if (struct.isSetTask_info()) {
          oprot.writeFieldBegin(TASK_INFO_FIELD_DESC);
          oprot.writeString(struct.task_info);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_time != null) {
        if (struct.isSetCreate_time()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.create_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.etl_start_time != null) {
        if (struct.isSetEtl_start_time()) {
          oprot.writeFieldBegin(ETL_START_TIME_FIELD_DESC);
          oprot.writeString(struct.etl_start_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.etl_finish_time != null) {
        if (struct.isSetEtl_finish_time()) {
          oprot.writeFieldBegin(ETL_FINISH_TIME_FIELD_DESC);
          oprot.writeString(struct.etl_finish_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.load_start_time != null) {
        if (struct.isSetLoad_start_time()) {
          oprot.writeFieldBegin(LOAD_START_TIME_FIELD_DESC);
          oprot.writeString(struct.load_start_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.load_finish_time != null) {
        if (struct.isSetLoad_finish_time()) {
          oprot.writeFieldBegin(LOAD_FINISH_TIME_FIELD_DESC);
          oprot.writeString(struct.load_finish_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.job_details != null) {
        if (struct.isSetJob_details()) {
          oprot.writeFieldBegin(JOB_DETAILS_FIELD_DESC);
          oprot.writeString(struct.job_details);
          oprot.writeFieldEnd();
        }
      }
      if (struct.error_msg != null) {
        if (struct.isSetError_msg()) {
          oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
          oprot.writeString(struct.error_msg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db != null) {
        if (struct.isSetDb()) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTxn_id()) {
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txn_id);
        oprot.writeFieldEnd();
      }
      if (struct.tracking_sql != null) {
        if (struct.isSetTracking_sql()) {
          oprot.writeFieldBegin(TRACKING_SQL_FIELD_DESC);
          oprot.writeString(struct.tracking_sql);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNum_scan_rows()) {
        oprot.writeFieldBegin(NUM_SCAN_ROWS_FIELD_DESC);
        oprot.writeI64(struct.num_scan_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_filtered_rows()) {
        oprot.writeFieldBegin(NUM_FILTERED_ROWS_FIELD_DESC);
        oprot.writeI64(struct.num_filtered_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_unselected_rows()) {
        oprot.writeFieldBegin(NUM_UNSELECTED_ROWS_FIELD_DESC);
        oprot.writeI64(struct.num_unselected_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_sink_rows()) {
        oprot.writeFieldBegin(NUM_SINK_ROWS_FIELD_DESC);
        oprot.writeI64(struct.num_sink_rows);
        oprot.writeFieldEnd();
      }
      if (struct.rejected_record_path != null) {
        if (struct.isSetRejected_record_path()) {
          oprot.writeFieldBegin(REJECTED_RECORD_PATH_FIELD_DESC);
          oprot.writeString(struct.rejected_record_path);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLoadInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TLoadInfoTupleScheme getScheme() {
      return new TLoadInfoTupleScheme();
    }
  }

  private static class TLoadInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TLoadInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLoadInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetJob_id()) {
        optionals.set(0);
      }
      if (struct.isSetLabel()) {
        optionals.set(1);
      }
      if (struct.isSetState()) {
        optionals.set(2);
      }
      if (struct.isSetProgress()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      if (struct.isSetPriority()) {
        optionals.set(5);
      }
      if (struct.isSetEtl_info()) {
        optionals.set(6);
      }
      if (struct.isSetTask_info()) {
        optionals.set(7);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(8);
      }
      if (struct.isSetEtl_start_time()) {
        optionals.set(9);
      }
      if (struct.isSetEtl_finish_time()) {
        optionals.set(10);
      }
      if (struct.isSetLoad_start_time()) {
        optionals.set(11);
      }
      if (struct.isSetLoad_finish_time()) {
        optionals.set(12);
      }
      if (struct.isSetUrl()) {
        optionals.set(13);
      }
      if (struct.isSetJob_details()) {
        optionals.set(14);
      }
      if (struct.isSetError_msg()) {
        optionals.set(15);
      }
      if (struct.isSetDb()) {
        optionals.set(16);
      }
      if (struct.isSetTxn_id()) {
        optionals.set(17);
      }
      if (struct.isSetTracking_sql()) {
        optionals.set(18);
      }
      if (struct.isSetNum_scan_rows()) {
        optionals.set(19);
      }
      if (struct.isSetNum_filtered_rows()) {
        optionals.set(20);
      }
      if (struct.isSetNum_unselected_rows()) {
        optionals.set(21);
      }
      if (struct.isSetNum_sink_rows()) {
        optionals.set(22);
      }
      if (struct.isSetRejected_record_path()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetJob_id()) {
        oprot.writeI64(struct.job_id);
      }
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetProgress()) {
        oprot.writeString(struct.progress);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetPriority()) {
        oprot.writeString(struct.priority);
      }
      if (struct.isSetEtl_info()) {
        oprot.writeString(struct.etl_info);
      }
      if (struct.isSetTask_info()) {
        oprot.writeString(struct.task_info);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetEtl_start_time()) {
        oprot.writeString(struct.etl_start_time);
      }
      if (struct.isSetEtl_finish_time()) {
        oprot.writeString(struct.etl_finish_time);
      }
      if (struct.isSetLoad_start_time()) {
        oprot.writeString(struct.load_start_time);
      }
      if (struct.isSetLoad_finish_time()) {
        oprot.writeString(struct.load_finish_time);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetJob_details()) {
        oprot.writeString(struct.job_details);
      }
      if (struct.isSetError_msg()) {
        oprot.writeString(struct.error_msg);
      }
      if (struct.isSetDb()) {
        oprot.writeString(struct.db);
      }
      if (struct.isSetTxn_id()) {
        oprot.writeI64(struct.txn_id);
      }
      if (struct.isSetTracking_sql()) {
        oprot.writeString(struct.tracking_sql);
      }
      if (struct.isSetNum_scan_rows()) {
        oprot.writeI64(struct.num_scan_rows);
      }
      if (struct.isSetNum_filtered_rows()) {
        oprot.writeI64(struct.num_filtered_rows);
      }
      if (struct.isSetNum_unselected_rows()) {
        oprot.writeI64(struct.num_unselected_rows);
      }
      if (struct.isSetNum_sink_rows()) {
        oprot.writeI64(struct.num_sink_rows);
      }
      if (struct.isSetRejected_record_path()) {
        oprot.writeString(struct.rejected_record_path);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLoadInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.job_id = iprot.readI64();
        struct.setJob_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.progress = iprot.readString();
        struct.setProgressIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.priority = iprot.readString();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.etl_info = iprot.readString();
        struct.setEtl_infoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.task_info = iprot.readString();
        struct.setTask_infoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.etl_start_time = iprot.readString();
        struct.setEtl_start_timeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.etl_finish_time = iprot.readString();
        struct.setEtl_finish_timeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.load_start_time = iprot.readString();
        struct.setLoad_start_timeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.load_finish_time = iprot.readString();
        struct.setLoad_finish_timeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(14)) {
        struct.job_details = iprot.readString();
        struct.setJob_detailsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.error_msg = iprot.readString();
        struct.setError_msgIsSet(true);
      }
      if (incoming.get(16)) {
        struct.db = iprot.readString();
        struct.setDbIsSet(true);
      }
      if (incoming.get(17)) {
        struct.txn_id = iprot.readI64();
        struct.setTxn_idIsSet(true);
      }
      if (incoming.get(18)) {
        struct.tracking_sql = iprot.readString();
        struct.setTracking_sqlIsSet(true);
      }
      if (incoming.get(19)) {
        struct.num_scan_rows = iprot.readI64();
        struct.setNum_scan_rowsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.num_filtered_rows = iprot.readI64();
        struct.setNum_filtered_rowsIsSet(true);
      }
      if (incoming.get(21)) {
        struct.num_unselected_rows = iprot.readI64();
        struct.setNum_unselected_rowsIsSet(true);
      }
      if (incoming.get(22)) {
        struct.num_sink_rows = iprot.readI64();
        struct.setNum_sink_rowsIsSet(true);
      }
      if (incoming.get(23)) {
        struct.rejected_record_path = iprot.readString();
        struct.setRejected_record_pathIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

