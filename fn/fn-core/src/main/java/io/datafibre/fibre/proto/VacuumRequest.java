// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lake_service.proto

package io.datafibre.fibre.proto;

/**
 * Protobuf type {@code starrocks.lake.VacuumRequest}
 */
public final class VacuumRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:starrocks.lake.VacuumRequest)
    VacuumRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use VacuumRequest.newBuilder() to construct.
  private VacuumRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private VacuumRequest() {
    tabletIds_ = emptyLongList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new VacuumRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.datafibre.fibre.proto.LakeServiceOuterClass.internal_static_starrocks_lake_VacuumRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.datafibre.fibre.proto.LakeServiceOuterClass.internal_static_starrocks_lake_VacuumRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.datafibre.fibre.proto.VacuumRequest.class, io.datafibre.fibre.proto.VacuumRequest.Builder.class);
  }

  private int bitField0_;
  public static final int TABLET_IDS_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.LongList tabletIds_;
  /**
   * <pre>
   * All tablets must be in the same partition.
   * </pre>
   *
   * <code>repeated int64 tablet_ids = 1;</code>
   * @return A list containing the tabletIds.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long>
      getTabletIdsList() {
    return tabletIds_;
  }
  /**
   * <pre>
   * All tablets must be in the same partition.
   * </pre>
   *
   * <code>repeated int64 tablet_ids = 1;</code>
   * @return The count of tabletIds.
   */
  public int getTabletIdsCount() {
    return tabletIds_.size();
  }
  /**
   * <pre>
   * All tablets must be in the same partition.
   * </pre>
   *
   * <code>repeated int64 tablet_ids = 1;</code>
   * @param index The index of the element to return.
   * @return The tabletIds at the given index.
   */
  public long getTabletIds(int index) {
    return tabletIds_.getLong(index);
  }

  public static final int MIN_RETAIN_VERSION_FIELD_NUMBER = 2;
  private long minRetainVersion_;
  /**
   * <pre>
   * Tablet metadata files with version numbers greater than or equals to min_retain_version
   * will NOT be vacuumed. For tablet metadata files with version numbers less than
   * min_retain_version, decide whether they should be deleted by comparing the create time
   * against the grace_timestamp.
   * </pre>
   *
   * <code>optional int64 min_retain_version = 2;</code>
   * @return Whether the minRetainVersion field is set.
   */
  @java.lang.Override
  public boolean hasMinRetainVersion() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Tablet metadata files with version numbers greater than or equals to min_retain_version
   * will NOT be vacuumed. For tablet metadata files with version numbers less than
   * min_retain_version, decide whether they should be deleted by comparing the create time
   * against the grace_timestamp.
   * </pre>
   *
   * <code>optional int64 min_retain_version = 2;</code>
   * @return The minRetainVersion.
   */
  @java.lang.Override
  public long getMinRetainVersion() {
    return minRetainVersion_;
  }

  public static final int GRACE_TIMESTAMP_FIELD_NUMBER = 3;
  private long graceTimestamp_;
  /**
   * <pre>
   * the timestamp after which created tablet metadata files will not be vacuumed.
   * In addition to retaining all versions after grace_timestamp, retain the last version before
   * grace_timestamp.
   * Meansured as the number of seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC)
   * </pre>
   *
   * <code>optional int64 grace_timestamp = 3;</code>
   * @return Whether the graceTimestamp field is set.
   */
  @java.lang.Override
  public boolean hasGraceTimestamp() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * the timestamp after which created tablet metadata files will not be vacuumed.
   * In addition to retaining all versions after grace_timestamp, retain the last version before
   * grace_timestamp.
   * Meansured as the number of seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC)
   * </pre>
   *
   * <code>optional int64 grace_timestamp = 3;</code>
   * @return The graceTimestamp.
   */
  @java.lang.Override
  public long getGraceTimestamp() {
    return graceTimestamp_;
  }

  public static final int MIN_ACTIVE_TXN_ID_FIELD_NUMBER = 4;
  private long minActiveTxnId_;
  /**
   * <pre>
   * Delete txn log files with txn IDs less than min_active_txn_id
   * </pre>
   *
   * <code>optional int64 min_active_txn_id = 4;</code>
   * @return Whether the minActiveTxnId field is set.
   */
  @java.lang.Override
  public boolean hasMinActiveTxnId() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Delete txn log files with txn IDs less than min_active_txn_id
   * </pre>
   *
   * <code>optional int64 min_active_txn_id = 4;</code>
   * @return The minActiveTxnId.
   */
  @java.lang.Override
  public long getMinActiveTxnId() {
    return minActiveTxnId_;
  }

  public static final int DELETE_TXN_LOG_FIELD_NUMBER = 5;
  private boolean deleteTxnLog_;
  /**
   * <pre>
   * Whether need to delete committed txn logs or not.
   * </pre>
   *
   * <code>optional bool delete_txn_log = 5;</code>
   * @return Whether the deleteTxnLog field is set.
   */
  @java.lang.Override
  public boolean hasDeleteTxnLog() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Whether need to delete committed txn logs or not.
   * </pre>
   *
   * <code>optional bool delete_txn_log = 5;</code>
   * @return The deleteTxnLog.
   */
  @java.lang.Override
  public boolean getDeleteTxnLog() {
    return deleteTxnLog_;
  }

  public static final int PARTITION_ID_FIELD_NUMBER = 6;
  private long partitionId_;
  /**
   * <pre>
   * ID of the partition the tablet belongs to.
   * </pre>
   *
   * <code>optional int64 partition_id = 6;</code>
   * @return Whether the partitionId field is set.
   */
  @java.lang.Override
  public boolean hasPartitionId() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * ID of the partition the tablet belongs to.
   * </pre>
   *
   * <code>optional int64 partition_id = 6;</code>
   * @return The partitionId.
   */
  @java.lang.Override
  public long getPartitionId() {
    return partitionId_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < tabletIds_.size(); i++) {
      output.writeInt64(1, tabletIds_.getLong(i));
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeInt64(2, minRetainVersion_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeInt64(3, graceTimestamp_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeInt64(4, minActiveTxnId_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeBool(5, deleteTxnLog_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeInt64(6, partitionId_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < tabletIds_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt64SizeNoTag(tabletIds_.getLong(i));
      }
      size += dataSize;
      size += 1 * getTabletIdsList().size();
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(2, minRetainVersion_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(3, graceTimestamp_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(4, minActiveTxnId_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, deleteTxnLog_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(6, partitionId_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.datafibre.fibre.proto.VacuumRequest)) {
      return super.equals(obj);
    }
    io.datafibre.fibre.proto.VacuumRequest other = (io.datafibre.fibre.proto.VacuumRequest) obj;

    if (!getTabletIdsList()
        .equals(other.getTabletIdsList())) return false;
    if (hasMinRetainVersion() != other.hasMinRetainVersion()) return false;
    if (hasMinRetainVersion()) {
      if (getMinRetainVersion()
          != other.getMinRetainVersion()) return false;
    }
    if (hasGraceTimestamp() != other.hasGraceTimestamp()) return false;
    if (hasGraceTimestamp()) {
      if (getGraceTimestamp()
          != other.getGraceTimestamp()) return false;
    }
    if (hasMinActiveTxnId() != other.hasMinActiveTxnId()) return false;
    if (hasMinActiveTxnId()) {
      if (getMinActiveTxnId()
          != other.getMinActiveTxnId()) return false;
    }
    if (hasDeleteTxnLog() != other.hasDeleteTxnLog()) return false;
    if (hasDeleteTxnLog()) {
      if (getDeleteTxnLog()
          != other.getDeleteTxnLog()) return false;
    }
    if (hasPartitionId() != other.hasPartitionId()) return false;
    if (hasPartitionId()) {
      if (getPartitionId()
          != other.getPartitionId()) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getTabletIdsCount() > 0) {
      hash = (37 * hash) + TABLET_IDS_FIELD_NUMBER;
      hash = (53 * hash) + getTabletIdsList().hashCode();
    }
    if (hasMinRetainVersion()) {
      hash = (37 * hash) + MIN_RETAIN_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMinRetainVersion());
    }
    if (hasGraceTimestamp()) {
      hash = (37 * hash) + GRACE_TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getGraceTimestamp());
    }
    if (hasMinActiveTxnId()) {
      hash = (37 * hash) + MIN_ACTIVE_TXN_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMinActiveTxnId());
    }
    if (hasDeleteTxnLog()) {
      hash = (37 * hash) + DELETE_TXN_LOG_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDeleteTxnLog());
    }
    if (hasPartitionId()) {
      hash = (37 * hash) + PARTITION_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getPartitionId());
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.datafibre.fibre.proto.VacuumRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.datafibre.fibre.proto.VacuumRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.datafibre.fibre.proto.VacuumRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.datafibre.fibre.proto.VacuumRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.datafibre.fibre.proto.VacuumRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.datafibre.fibre.proto.VacuumRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.datafibre.fibre.proto.VacuumRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.datafibre.fibre.proto.VacuumRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.datafibre.fibre.proto.VacuumRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.datafibre.fibre.proto.VacuumRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.datafibre.fibre.proto.VacuumRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.datafibre.fibre.proto.VacuumRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.datafibre.fibre.proto.VacuumRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code starrocks.lake.VacuumRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:starrocks.lake.VacuumRequest)
      io.datafibre.fibre.proto.VacuumRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.datafibre.fibre.proto.LakeServiceOuterClass.internal_static_starrocks_lake_VacuumRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.datafibre.fibre.proto.LakeServiceOuterClass.internal_static_starrocks_lake_VacuumRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.datafibre.fibre.proto.VacuumRequest.class, io.datafibre.fibre.proto.VacuumRequest.Builder.class);
    }

    // Construct using io.datafibre.fibre.proto.VacuumRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      tabletIds_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000001);
      minRetainVersion_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000002);
      graceTimestamp_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000004);
      minActiveTxnId_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000008);
      deleteTxnLog_ = false;
      bitField0_ = (bitField0_ & ~0x00000010);
      partitionId_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000020);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.datafibre.fibre.proto.LakeServiceOuterClass.internal_static_starrocks_lake_VacuumRequest_descriptor;
    }

    @java.lang.Override
    public io.datafibre.fibre.proto.VacuumRequest getDefaultInstanceForType() {
      return io.datafibre.fibre.proto.VacuumRequest.getDefaultInstance();
    }

    @java.lang.Override
    public io.datafibre.fibre.proto.VacuumRequest build() {
      io.datafibre.fibre.proto.VacuumRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.datafibre.fibre.proto.VacuumRequest buildPartial() {
      io.datafibre.fibre.proto.VacuumRequest result = new io.datafibre.fibre.proto.VacuumRequest(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        tabletIds_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.tabletIds_ = tabletIds_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.minRetainVersion_ = minRetainVersion_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.graceTimestamp_ = graceTimestamp_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.minActiveTxnId_ = minActiveTxnId_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.deleteTxnLog_ = deleteTxnLog_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.partitionId_ = partitionId_;
        to_bitField0_ |= 0x00000010;
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.datafibre.fibre.proto.VacuumRequest) {
        return mergeFrom((io.datafibre.fibre.proto.VacuumRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.datafibre.fibre.proto.VacuumRequest other) {
      if (other == io.datafibre.fibre.proto.VacuumRequest.getDefaultInstance()) return this;
      if (!other.tabletIds_.isEmpty()) {
        if (tabletIds_.isEmpty()) {
          tabletIds_ = other.tabletIds_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureTabletIdsIsMutable();
          tabletIds_.addAll(other.tabletIds_);
        }
        onChanged();
      }
      if (other.hasMinRetainVersion()) {
        setMinRetainVersion(other.getMinRetainVersion());
      }
      if (other.hasGraceTimestamp()) {
        setGraceTimestamp(other.getGraceTimestamp());
      }
      if (other.hasMinActiveTxnId()) {
        setMinActiveTxnId(other.getMinActiveTxnId());
      }
      if (other.hasDeleteTxnLog()) {
        setDeleteTxnLog(other.getDeleteTxnLog());
      }
      if (other.hasPartitionId()) {
        setPartitionId(other.getPartitionId());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              long v = input.readInt64();
              ensureTabletIdsIsMutable();
              tabletIds_.addLong(v);
              break;
            } // case 8
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureTabletIdsIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                tabletIds_.addLong(input.readInt64());
              }
              input.popLimit(limit);
              break;
            } // case 10
            case 16: {
              minRetainVersion_ = input.readInt64();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              graceTimestamp_ = input.readInt64();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              minActiveTxnId_ = input.readInt64();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              deleteTxnLog_ = input.readBool();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 48: {
              partitionId_ = input.readInt64();
              bitField0_ |= 0x00000020;
              break;
            } // case 48
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Internal.LongList tabletIds_ = emptyLongList();
    private void ensureTabletIdsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        tabletIds_ = mutableCopy(tabletIds_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * All tablets must be in the same partition.
     * </pre>
     *
     * <code>repeated int64 tablet_ids = 1;</code>
     * @return A list containing the tabletIds.
     */
    public java.util.List<java.lang.Long>
        getTabletIdsList() {
      return ((bitField0_ & 0x00000001) != 0) ?
               java.util.Collections.unmodifiableList(tabletIds_) : tabletIds_;
    }
    /**
     * <pre>
     * All tablets must be in the same partition.
     * </pre>
     *
     * <code>repeated int64 tablet_ids = 1;</code>
     * @return The count of tabletIds.
     */
    public int getTabletIdsCount() {
      return tabletIds_.size();
    }
    /**
     * <pre>
     * All tablets must be in the same partition.
     * </pre>
     *
     * <code>repeated int64 tablet_ids = 1;</code>
     * @param index The index of the element to return.
     * @return The tabletIds at the given index.
     */
    public long getTabletIds(int index) {
      return tabletIds_.getLong(index);
    }
    /**
     * <pre>
     * All tablets must be in the same partition.
     * </pre>
     *
     * <code>repeated int64 tablet_ids = 1;</code>
     * @param index The index to set the value at.
     * @param value The tabletIds to set.
     * @return This builder for chaining.
     */
    public Builder setTabletIds(
        int index, long value) {
      ensureTabletIdsIsMutable();
      tabletIds_.setLong(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All tablets must be in the same partition.
     * </pre>
     *
     * <code>repeated int64 tablet_ids = 1;</code>
     * @param value The tabletIds to add.
     * @return This builder for chaining.
     */
    public Builder addTabletIds(long value) {
      ensureTabletIdsIsMutable();
      tabletIds_.addLong(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All tablets must be in the same partition.
     * </pre>
     *
     * <code>repeated int64 tablet_ids = 1;</code>
     * @param values The tabletIds to add.
     * @return This builder for chaining.
     */
    public Builder addAllTabletIds(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureTabletIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, tabletIds_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All tablets must be in the same partition.
     * </pre>
     *
     * <code>repeated int64 tablet_ids = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearTabletIds() {
      tabletIds_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private long minRetainVersion_ ;
    /**
     * <pre>
     * Tablet metadata files with version numbers greater than or equals to min_retain_version
     * will NOT be vacuumed. For tablet metadata files with version numbers less than
     * min_retain_version, decide whether they should be deleted by comparing the create time
     * against the grace_timestamp.
     * </pre>
     *
     * <code>optional int64 min_retain_version = 2;</code>
     * @return Whether the minRetainVersion field is set.
     */
    @java.lang.Override
    public boolean hasMinRetainVersion() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Tablet metadata files with version numbers greater than or equals to min_retain_version
     * will NOT be vacuumed. For tablet metadata files with version numbers less than
     * min_retain_version, decide whether they should be deleted by comparing the create time
     * against the grace_timestamp.
     * </pre>
     *
     * <code>optional int64 min_retain_version = 2;</code>
     * @return The minRetainVersion.
     */
    @java.lang.Override
    public long getMinRetainVersion() {
      return minRetainVersion_;
    }
    /**
     * <pre>
     * Tablet metadata files with version numbers greater than or equals to min_retain_version
     * will NOT be vacuumed. For tablet metadata files with version numbers less than
     * min_retain_version, decide whether they should be deleted by comparing the create time
     * against the grace_timestamp.
     * </pre>
     *
     * <code>optional int64 min_retain_version = 2;</code>
     * @param value The minRetainVersion to set.
     * @return This builder for chaining.
     */
    public Builder setMinRetainVersion(long value) {
      bitField0_ |= 0x00000002;
      minRetainVersion_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Tablet metadata files with version numbers greater than or equals to min_retain_version
     * will NOT be vacuumed. For tablet metadata files with version numbers less than
     * min_retain_version, decide whether they should be deleted by comparing the create time
     * against the grace_timestamp.
     * </pre>
     *
     * <code>optional int64 min_retain_version = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearMinRetainVersion() {
      bitField0_ = (bitField0_ & ~0x00000002);
      minRetainVersion_ = 0L;
      onChanged();
      return this;
    }

    private long graceTimestamp_ ;
    /**
     * <pre>
     * the timestamp after which created tablet metadata files will not be vacuumed.
     * In addition to retaining all versions after grace_timestamp, retain the last version before
     * grace_timestamp.
     * Meansured as the number of seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC)
     * </pre>
     *
     * <code>optional int64 grace_timestamp = 3;</code>
     * @return Whether the graceTimestamp field is set.
     */
    @java.lang.Override
    public boolean hasGraceTimestamp() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * the timestamp after which created tablet metadata files will not be vacuumed.
     * In addition to retaining all versions after grace_timestamp, retain the last version before
     * grace_timestamp.
     * Meansured as the number of seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC)
     * </pre>
     *
     * <code>optional int64 grace_timestamp = 3;</code>
     * @return The graceTimestamp.
     */
    @java.lang.Override
    public long getGraceTimestamp() {
      return graceTimestamp_;
    }
    /**
     * <pre>
     * the timestamp after which created tablet metadata files will not be vacuumed.
     * In addition to retaining all versions after grace_timestamp, retain the last version before
     * grace_timestamp.
     * Meansured as the number of seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC)
     * </pre>
     *
     * <code>optional int64 grace_timestamp = 3;</code>
     * @param value The graceTimestamp to set.
     * @return This builder for chaining.
     */
    public Builder setGraceTimestamp(long value) {
      bitField0_ |= 0x00000004;
      graceTimestamp_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * the timestamp after which created tablet metadata files will not be vacuumed.
     * In addition to retaining all versions after grace_timestamp, retain the last version before
     * grace_timestamp.
     * Meansured as the number of seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC)
     * </pre>
     *
     * <code>optional int64 grace_timestamp = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearGraceTimestamp() {
      bitField0_ = (bitField0_ & ~0x00000004);
      graceTimestamp_ = 0L;
      onChanged();
      return this;
    }

    private long minActiveTxnId_ ;
    /**
     * <pre>
     * Delete txn log files with txn IDs less than min_active_txn_id
     * </pre>
     *
     * <code>optional int64 min_active_txn_id = 4;</code>
     * @return Whether the minActiveTxnId field is set.
     */
    @java.lang.Override
    public boolean hasMinActiveTxnId() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Delete txn log files with txn IDs less than min_active_txn_id
     * </pre>
     *
     * <code>optional int64 min_active_txn_id = 4;</code>
     * @return The minActiveTxnId.
     */
    @java.lang.Override
    public long getMinActiveTxnId() {
      return minActiveTxnId_;
    }
    /**
     * <pre>
     * Delete txn log files with txn IDs less than min_active_txn_id
     * </pre>
     *
     * <code>optional int64 min_active_txn_id = 4;</code>
     * @param value The minActiveTxnId to set.
     * @return This builder for chaining.
     */
    public Builder setMinActiveTxnId(long value) {
      bitField0_ |= 0x00000008;
      minActiveTxnId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Delete txn log files with txn IDs less than min_active_txn_id
     * </pre>
     *
     * <code>optional int64 min_active_txn_id = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearMinActiveTxnId() {
      bitField0_ = (bitField0_ & ~0x00000008);
      minActiveTxnId_ = 0L;
      onChanged();
      return this;
    }

    private boolean deleteTxnLog_ ;
    /**
     * <pre>
     * Whether need to delete committed txn logs or not.
     * </pre>
     *
     * <code>optional bool delete_txn_log = 5;</code>
     * @return Whether the deleteTxnLog field is set.
     */
    @java.lang.Override
    public boolean hasDeleteTxnLog() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Whether need to delete committed txn logs or not.
     * </pre>
     *
     * <code>optional bool delete_txn_log = 5;</code>
     * @return The deleteTxnLog.
     */
    @java.lang.Override
    public boolean getDeleteTxnLog() {
      return deleteTxnLog_;
    }
    /**
     * <pre>
     * Whether need to delete committed txn logs or not.
     * </pre>
     *
     * <code>optional bool delete_txn_log = 5;</code>
     * @param value The deleteTxnLog to set.
     * @return This builder for chaining.
     */
    public Builder setDeleteTxnLog(boolean value) {
      bitField0_ |= 0x00000010;
      deleteTxnLog_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether need to delete committed txn logs or not.
     * </pre>
     *
     * <code>optional bool delete_txn_log = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearDeleteTxnLog() {
      bitField0_ = (bitField0_ & ~0x00000010);
      deleteTxnLog_ = false;
      onChanged();
      return this;
    }

    private long partitionId_ ;
    /**
     * <pre>
     * ID of the partition the tablet belongs to.
     * </pre>
     *
     * <code>optional int64 partition_id = 6;</code>
     * @return Whether the partitionId field is set.
     */
    @java.lang.Override
    public boolean hasPartitionId() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * ID of the partition the tablet belongs to.
     * </pre>
     *
     * <code>optional int64 partition_id = 6;</code>
     * @return The partitionId.
     */
    @java.lang.Override
    public long getPartitionId() {
      return partitionId_;
    }
    /**
     * <pre>
     * ID of the partition the tablet belongs to.
     * </pre>
     *
     * <code>optional int64 partition_id = 6;</code>
     * @param value The partitionId to set.
     * @return This builder for chaining.
     */
    public Builder setPartitionId(long value) {
      bitField0_ |= 0x00000020;
      partitionId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ID of the partition the tablet belongs to.
     * </pre>
     *
     * <code>optional int64 partition_id = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearPartitionId() {
      bitField0_ = (bitField0_ & ~0x00000020);
      partitionId_ = 0L;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:starrocks.lake.VacuumRequest)
  }

  // @@protoc_insertion_point(class_scope:starrocks.lake.VacuumRequest)
  private static final io.datafibre.fibre.proto.VacuumRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.datafibre.fibre.proto.VacuumRequest();
  }

  public static io.datafibre.fibre.proto.VacuumRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<VacuumRequest>
      PARSER = new com.google.protobuf.AbstractParser<VacuumRequest>() {
    @java.lang.Override
    public VacuumRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<VacuumRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<VacuumRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.datafibre.fibre.proto.VacuumRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

