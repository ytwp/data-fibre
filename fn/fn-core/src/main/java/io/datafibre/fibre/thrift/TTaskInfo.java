/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TTaskInfo implements org.apache.thrift.TBase<TTaskInfo, TTaskInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TTaskInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTaskInfo");

  private static final org.apache.thrift.protocol.TField TASK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("task_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SCHEDULE_FIELD_DESC = new org.apache.thrift.protocol.TField("schedule", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEFINITION_FIELD_DESC = new org.apache.thrift.protocol.TField("definition", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expire_time", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTaskInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTaskInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String task_name; // optional
  public long create_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String schedule; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String database; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String definition; // optional
  public long expire_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String properties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_NAME((short)1, "task_name"),
    CREATE_TIME((short)2, "create_time"),
    SCHEDULE((short)3, "schedule"),
    DATABASE((short)4, "database"),
    DEFINITION((short)5, "definition"),
    EXPIRE_TIME((short)6, "expire_time"),
    PROPERTIES((short)7, "properties");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_NAME
          return TASK_NAME;
        case 2: // CREATE_TIME
          return CREATE_TIME;
        case 3: // SCHEDULE
          return SCHEDULE;
        case 4: // DATABASE
          return DATABASE;
        case 5: // DEFINITION
          return DEFINITION;
        case 6: // EXPIRE_TIME
          return EXPIRE_TIME;
        case 7: // PROPERTIES
          return PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATE_TIME_ISSET_ID = 0;
  private static final int __EXPIRE_TIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TASK_NAME,_Fields.CREATE_TIME,_Fields.SCHEDULE,_Fields.DATABASE,_Fields.DEFINITION,_Fields.EXPIRE_TIME,_Fields.PROPERTIES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_NAME, new org.apache.thrift.meta_data.FieldMetaData("task_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCHEDULE, new org.apache.thrift.meta_data.FieldMetaData("schedule", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFINITION, new org.apache.thrift.meta_data.FieldMetaData("definition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expire_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTaskInfo.class, metaDataMap);
  }

  public TTaskInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTaskInfo(TTaskInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTask_name()) {
      this.task_name = other.task_name;
    }
    this.create_time = other.create_time;
    if (other.isSetSchedule()) {
      this.schedule = other.schedule;
    }
    if (other.isSetDatabase()) {
      this.database = other.database;
    }
    if (other.isSetDefinition()) {
      this.definition = other.definition;
    }
    this.expire_time = other.expire_time;
    if (other.isSetProperties()) {
      this.properties = other.properties;
    }
  }

  @Override
  public TTaskInfo deepCopy() {
    return new TTaskInfo(this);
  }

  @Override
  public void clear() {
    this.task_name = null;
    setCreate_timeIsSet(false);
    this.create_time = 0;
    this.schedule = null;
    this.database = null;
    this.definition = null;
    setExpire_timeIsSet(false);
    this.expire_time = 0;
    this.properties = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTask_name() {
    return this.task_name;
  }

  public TTaskInfo setTask_name(@org.apache.thrift.annotation.Nullable java.lang.String task_name) {
    this.task_name = task_name;
    return this;
  }

  public void unsetTask_name() {
    this.task_name = null;
  }

  /** Returns true if field task_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_name() {
    return this.task_name != null;
  }

  public void setTask_nameIsSet(boolean value) {
    if (!value) {
      this.task_name = null;
    }
  }

  public long getCreate_time() {
    return this.create_time;
  }

  public TTaskInfo setCreate_time(long create_time) {
    this.create_time = create_time;
    setCreate_timeIsSet(true);
    return this;
  }

  public void unsetCreate_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  public void setCreate_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATE_TIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSchedule() {
    return this.schedule;
  }

  public TTaskInfo setSchedule(@org.apache.thrift.annotation.Nullable java.lang.String schedule) {
    this.schedule = schedule;
    return this;
  }

  public void unsetSchedule() {
    this.schedule = null;
  }

  /** Returns true if field schedule is set (has been assigned a value) and false otherwise */
  public boolean isSetSchedule() {
    return this.schedule != null;
  }

  public void setScheduleIsSet(boolean value) {
    if (!value) {
      this.schedule = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDatabase() {
    return this.database;
  }

  public TTaskInfo setDatabase(@org.apache.thrift.annotation.Nullable java.lang.String database) {
    this.database = database;
    return this;
  }

  public void unsetDatabase() {
    this.database = null;
  }

  /** Returns true if field database is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabase() {
    return this.database != null;
  }

  public void setDatabaseIsSet(boolean value) {
    if (!value) {
      this.database = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDefinition() {
    return this.definition;
  }

  public TTaskInfo setDefinition(@org.apache.thrift.annotation.Nullable java.lang.String definition) {
    this.definition = definition;
    return this;
  }

  public void unsetDefinition() {
    this.definition = null;
  }

  /** Returns true if field definition is set (has been assigned a value) and false otherwise */
  public boolean isSetDefinition() {
    return this.definition != null;
  }

  public void setDefinitionIsSet(boolean value) {
    if (!value) {
      this.definition = null;
    }
  }

  public long getExpire_time() {
    return this.expire_time;
  }

  public TTaskInfo setExpire_time(long expire_time) {
    this.expire_time = expire_time;
    setExpire_timeIsSet(true);
    return this;
  }

  public void unsetExpire_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPIRE_TIME_ISSET_ID);
  }

  /** Returns true if field expire_time is set (has been assigned a value) and false otherwise */
  public boolean isSetExpire_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPIRE_TIME_ISSET_ID);
  }

  public void setExpire_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPIRE_TIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getProperties() {
    return this.properties;
  }

  public TTaskInfo setProperties(@org.apache.thrift.annotation.Nullable java.lang.String properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TASK_NAME:
      if (value == null) {
        unsetTask_name();
      } else {
        setTask_name((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((java.lang.Long)value);
      }
      break;

    case SCHEDULE:
      if (value == null) {
        unsetSchedule();
      } else {
        setSchedule((java.lang.String)value);
      }
      break;

    case DATABASE:
      if (value == null) {
        unsetDatabase();
      } else {
        setDatabase((java.lang.String)value);
      }
      break;

    case DEFINITION:
      if (value == null) {
        unsetDefinition();
      } else {
        setDefinition((java.lang.String)value);
      }
      break;

    case EXPIRE_TIME:
      if (value == null) {
        unsetExpire_time();
      } else {
        setExpire_time((java.lang.Long)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_NAME:
      return getTask_name();

    case CREATE_TIME:
      return getCreate_time();

    case SCHEDULE:
      return getSchedule();

    case DATABASE:
      return getDatabase();

    case DEFINITION:
      return getDefinition();

    case EXPIRE_TIME:
      return getExpire_time();

    case PROPERTIES:
      return getProperties();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TASK_NAME:
      return isSetTask_name();
    case CREATE_TIME:
      return isSetCreate_time();
    case SCHEDULE:
      return isSetSchedule();
    case DATABASE:
      return isSetDatabase();
    case DEFINITION:
      return isSetDefinition();
    case EXPIRE_TIME:
      return isSetExpire_time();
    case PROPERTIES:
      return isSetProperties();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTaskInfo)
      return this.equals((TTaskInfo)that);
    return false;
  }

  public boolean equals(TTaskInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_task_name = true && this.isSetTask_name();
    boolean that_present_task_name = true && that.isSetTask_name();
    if (this_present_task_name || that_present_task_name) {
      if (!(this_present_task_name && that_present_task_name))
        return false;
      if (!this.task_name.equals(that.task_name))
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (this.create_time != that.create_time)
        return false;
    }

    boolean this_present_schedule = true && this.isSetSchedule();
    boolean that_present_schedule = true && that.isSetSchedule();
    if (this_present_schedule || that_present_schedule) {
      if (!(this_present_schedule && that_present_schedule))
        return false;
      if (!this.schedule.equals(that.schedule))
        return false;
    }

    boolean this_present_database = true && this.isSetDatabase();
    boolean that_present_database = true && that.isSetDatabase();
    if (this_present_database || that_present_database) {
      if (!(this_present_database && that_present_database))
        return false;
      if (!this.database.equals(that.database))
        return false;
    }

    boolean this_present_definition = true && this.isSetDefinition();
    boolean that_present_definition = true && that.isSetDefinition();
    if (this_present_definition || that_present_definition) {
      if (!(this_present_definition && that_present_definition))
        return false;
      if (!this.definition.equals(that.definition))
        return false;
    }

    boolean this_present_expire_time = true && this.isSetExpire_time();
    boolean that_present_expire_time = true && that.isSetExpire_time();
    if (this_present_expire_time || that_present_expire_time) {
      if (!(this_present_expire_time && that_present_expire_time))
        return false;
      if (this.expire_time != that.expire_time)
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTask_name()) ? 131071 : 524287);
    if (isSetTask_name())
      hashCode = hashCode * 8191 + task_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreate_time()) ? 131071 : 524287);
    if (isSetCreate_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(create_time);

    hashCode = hashCode * 8191 + ((isSetSchedule()) ? 131071 : 524287);
    if (isSetSchedule())
      hashCode = hashCode * 8191 + schedule.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatabase()) ? 131071 : 524287);
    if (isSetDatabase())
      hashCode = hashCode * 8191 + database.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefinition()) ? 131071 : 524287);
    if (isSetDefinition())
      hashCode = hashCode * 8191 + definition.hashCode();

    hashCode = hashCode * 8191 + ((isSetExpire_time()) ? 131071 : 524287);
    if (isSetExpire_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(expire_time);

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TTaskInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTask_name(), other.isSetTask_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_name, other.task_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreate_time(), other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchedule(), other.isSetSchedule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchedule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedule, other.schedule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDatabase(), other.isSetDatabase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDefinition(), other.isSetDefinition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefinition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.definition, other.definition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExpire_time(), other.isSetExpire_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpire_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expire_time, other.expire_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProperties(), other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTaskInfo(");
    boolean first = true;

    if (isSetTask_name()) {
      sb.append("task_name:");
      if (this.task_name == null) {
        sb.append("null");
      } else {
        sb.append(this.task_name);
      }
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      sb.append(this.create_time);
      first = false;
    }
    if (isSetSchedule()) {
      if (!first) sb.append(", ");
      sb.append("schedule:");
      if (this.schedule == null) {
        sb.append("null");
      } else {
        sb.append(this.schedule);
      }
      first = false;
    }
    if (isSetDatabase()) {
      if (!first) sb.append(", ");
      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
    }
    if (isSetDefinition()) {
      if (!first) sb.append(", ");
      sb.append("definition:");
      if (this.definition == null) {
        sb.append("null");
      } else {
        sb.append(this.definition);
      }
      first = false;
    }
    if (isSetExpire_time()) {
      if (!first) sb.append(", ");
      sb.append("expire_time:");
      sb.append(this.expire_time);
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTaskInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTaskInfoStandardScheme getScheme() {
      return new TTaskInfoStandardScheme();
    }
  }

  private static class TTaskInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTaskInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTaskInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.task_name = iprot.readString();
              struct.setTask_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.create_time = iprot.readI64();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCHEDULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.schedule = iprot.readString();
              struct.setScheduleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.database = iprot.readString();
              struct.setDatabaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEFINITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.definition = iprot.readString();
              struct.setDefinitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPIRE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expire_time = iprot.readI64();
              struct.setExpire_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.properties = iprot.readString();
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTaskInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.task_name != null) {
        if (struct.isSetTask_name()) {
          oprot.writeFieldBegin(TASK_NAME_FIELD_DESC);
          oprot.writeString(struct.task_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreate_time()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.create_time);
        oprot.writeFieldEnd();
      }
      if (struct.schedule != null) {
        if (struct.isSetSchedule()) {
          oprot.writeFieldBegin(SCHEDULE_FIELD_DESC);
          oprot.writeString(struct.schedule);
          oprot.writeFieldEnd();
        }
      }
      if (struct.database != null) {
        if (struct.isSetDatabase()) {
          oprot.writeFieldBegin(DATABASE_FIELD_DESC);
          oprot.writeString(struct.database);
          oprot.writeFieldEnd();
        }
      }
      if (struct.definition != null) {
        if (struct.isSetDefinition()) {
          oprot.writeFieldBegin(DEFINITION_FIELD_DESC);
          oprot.writeString(struct.definition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExpire_time()) {
        oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
        oprot.writeI64(struct.expire_time);
        oprot.writeFieldEnd();
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          oprot.writeString(struct.properties);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTaskInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTaskInfoTupleScheme getScheme() {
      return new TTaskInfoTupleScheme();
    }
  }

  private static class TTaskInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTaskInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTaskInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTask_name()) {
        optionals.set(0);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(1);
      }
      if (struct.isSetSchedule()) {
        optionals.set(2);
      }
      if (struct.isSetDatabase()) {
        optionals.set(3);
      }
      if (struct.isSetDefinition()) {
        optionals.set(4);
      }
      if (struct.isSetExpire_time()) {
        optionals.set(5);
      }
      if (struct.isSetProperties()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetTask_name()) {
        oprot.writeString(struct.task_name);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeI64(struct.create_time);
      }
      if (struct.isSetSchedule()) {
        oprot.writeString(struct.schedule);
      }
      if (struct.isSetDatabase()) {
        oprot.writeString(struct.database);
      }
      if (struct.isSetDefinition()) {
        oprot.writeString(struct.definition);
      }
      if (struct.isSetExpire_time()) {
        oprot.writeI64(struct.expire_time);
      }
      if (struct.isSetProperties()) {
        oprot.writeString(struct.properties);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTaskInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.task_name = iprot.readString();
        struct.setTask_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.create_time = iprot.readI64();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.schedule = iprot.readString();
        struct.setScheduleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.database = iprot.readString();
        struct.setDatabaseIsSet(true);
      }
      if (incoming.get(4)) {
        struct.definition = iprot.readString();
        struct.setDefinitionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.expire_time = iprot.readI64();
        struct.setExpire_timeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.properties = iprot.readString();
        struct.setPropertiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

