/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TRemoteSnapshotInfo implements org.apache.thrift.TBase<TRemoteSnapshotInfo, TRemoteSnapshotInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TRemoteSnapshotInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRemoteSnapshotInfo");

  private static final org.apache.thrift.protocol.TField BACKEND_FIELD_DESC = new org.apache.thrift.protocol.TField("backend", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SNAPSHOT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshot_path", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INCREMENTAL_SNAPSHOT_FIELD_DESC = new org.apache.thrift.protocol.TField("incremental_snapshot", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRemoteSnapshotInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRemoteSnapshotInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TBackend backend; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String snapshot_path; // optional
  public boolean incremental_snapshot; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BACKEND((short)1, "backend"),
    SNAPSHOT_PATH((short)2, "snapshot_path"),
    INCREMENTAL_SNAPSHOT((short)3, "incremental_snapshot");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BACKEND
          return BACKEND;
        case 2: // SNAPSHOT_PATH
          return SNAPSHOT_PATH;
        case 3: // INCREMENTAL_SNAPSHOT
          return INCREMENTAL_SNAPSHOT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INCREMENTAL_SNAPSHOT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BACKEND,_Fields.SNAPSHOT_PATH,_Fields.INCREMENTAL_SNAPSHOT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BACKEND, new org.apache.thrift.meta_data.FieldMetaData("backend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TBackend.class)));
    tmpMap.put(_Fields.SNAPSHOT_PATH, new org.apache.thrift.meta_data.FieldMetaData("snapshot_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INCREMENTAL_SNAPSHOT, new org.apache.thrift.meta_data.FieldMetaData("incremental_snapshot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRemoteSnapshotInfo.class, metaDataMap);
  }

  public TRemoteSnapshotInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRemoteSnapshotInfo(TRemoteSnapshotInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBackend()) {
      this.backend = new com.starrocks.thrift.TBackend(other.backend);
    }
    if (other.isSetSnapshot_path()) {
      this.snapshot_path = other.snapshot_path;
    }
    this.incremental_snapshot = other.incremental_snapshot;
  }

  @Override
  public TRemoteSnapshotInfo deepCopy() {
    return new TRemoteSnapshotInfo(this);
  }

  @Override
  public void clear() {
    this.backend = null;
    this.snapshot_path = null;
    setIncremental_snapshotIsSet(false);
    this.incremental_snapshot = false;
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TBackend getBackend() {
    return this.backend;
  }

  public TRemoteSnapshotInfo setBackend(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TBackend backend) {
    this.backend = backend;
    return this;
  }

  public void unsetBackend() {
    this.backend = null;
  }

  /** Returns true if field backend is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend() {
    return this.backend != null;
  }

  public void setBackendIsSet(boolean value) {
    if (!value) {
      this.backend = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSnapshot_path() {
    return this.snapshot_path;
  }

  public TRemoteSnapshotInfo setSnapshot_path(@org.apache.thrift.annotation.Nullable java.lang.String snapshot_path) {
    this.snapshot_path = snapshot_path;
    return this;
  }

  public void unsetSnapshot_path() {
    this.snapshot_path = null;
  }

  /** Returns true if field snapshot_path is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshot_path() {
    return this.snapshot_path != null;
  }

  public void setSnapshot_pathIsSet(boolean value) {
    if (!value) {
      this.snapshot_path = null;
    }
  }

  public boolean isIncremental_snapshot() {
    return this.incremental_snapshot;
  }

  public TRemoteSnapshotInfo setIncremental_snapshot(boolean incremental_snapshot) {
    this.incremental_snapshot = incremental_snapshot;
    setIncremental_snapshotIsSet(true);
    return this;
  }

  public void unsetIncremental_snapshot() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INCREMENTAL_SNAPSHOT_ISSET_ID);
  }

  /** Returns true if field incremental_snapshot is set (has been assigned a value) and false otherwise */
  public boolean isSetIncremental_snapshot() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INCREMENTAL_SNAPSHOT_ISSET_ID);
  }

  public void setIncremental_snapshotIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INCREMENTAL_SNAPSHOT_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case BACKEND:
      if (value == null) {
        unsetBackend();
      } else {
        setBackend((com.starrocks.thrift.TBackend)value);
      }
      break;

    case SNAPSHOT_PATH:
      if (value == null) {
        unsetSnapshot_path();
      } else {
        setSnapshot_path((java.lang.String)value);
      }
      break;

    case INCREMENTAL_SNAPSHOT:
      if (value == null) {
        unsetIncremental_snapshot();
      } else {
        setIncremental_snapshot((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BACKEND:
      return getBackend();

    case SNAPSHOT_PATH:
      return getSnapshot_path();

    case INCREMENTAL_SNAPSHOT:
      return isIncremental_snapshot();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BACKEND:
      return isSetBackend();
    case SNAPSHOT_PATH:
      return isSetSnapshot_path();
    case INCREMENTAL_SNAPSHOT:
      return isSetIncremental_snapshot();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRemoteSnapshotInfo)
      return this.equals((TRemoteSnapshotInfo)that);
    return false;
  }

  public boolean equals(TRemoteSnapshotInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_backend = true && this.isSetBackend();
    boolean that_present_backend = true && that.isSetBackend();
    if (this_present_backend || that_present_backend) {
      if (!(this_present_backend && that_present_backend))
        return false;
      if (!this.backend.equals(that.backend))
        return false;
    }

    boolean this_present_snapshot_path = true && this.isSetSnapshot_path();
    boolean that_present_snapshot_path = true && that.isSetSnapshot_path();
    if (this_present_snapshot_path || that_present_snapshot_path) {
      if (!(this_present_snapshot_path && that_present_snapshot_path))
        return false;
      if (!this.snapshot_path.equals(that.snapshot_path))
        return false;
    }

    boolean this_present_incremental_snapshot = true && this.isSetIncremental_snapshot();
    boolean that_present_incremental_snapshot = true && that.isSetIncremental_snapshot();
    if (this_present_incremental_snapshot || that_present_incremental_snapshot) {
      if (!(this_present_incremental_snapshot && that_present_incremental_snapshot))
        return false;
      if (this.incremental_snapshot != that.incremental_snapshot)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBackend()) ? 131071 : 524287);
    if (isSetBackend())
      hashCode = hashCode * 8191 + backend.hashCode();

    hashCode = hashCode * 8191 + ((isSetSnapshot_path()) ? 131071 : 524287);
    if (isSetSnapshot_path())
      hashCode = hashCode * 8191 + snapshot_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetIncremental_snapshot()) ? 131071 : 524287);
    if (isSetIncremental_snapshot())
      hashCode = hashCode * 8191 + ((incremental_snapshot) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TRemoteSnapshotInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetBackend(), other.isSetBackend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend, other.backend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSnapshot_path(), other.isSetSnapshot_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshot_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshot_path, other.snapshot_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIncremental_snapshot(), other.isSetIncremental_snapshot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncremental_snapshot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incremental_snapshot, other.incremental_snapshot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRemoteSnapshotInfo(");
    boolean first = true;

    if (isSetBackend()) {
      sb.append("backend:");
      if (this.backend == null) {
        sb.append("null");
      } else {
        sb.append(this.backend);
      }
      first = false;
    }
    if (isSetSnapshot_path()) {
      if (!first) sb.append(", ");
      sb.append("snapshot_path:");
      if (this.snapshot_path == null) {
        sb.append("null");
      } else {
        sb.append(this.snapshot_path);
      }
      first = false;
    }
    if (isSetIncremental_snapshot()) {
      if (!first) sb.append(", ");
      sb.append("incremental_snapshot:");
      sb.append(this.incremental_snapshot);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (backend != null) {
      backend.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRemoteSnapshotInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRemoteSnapshotInfoStandardScheme getScheme() {
      return new TRemoteSnapshotInfoStandardScheme();
    }
  }

  private static class TRemoteSnapshotInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRemoteSnapshotInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TRemoteSnapshotInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BACKEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.backend = new com.starrocks.thrift.TBackend();
              struct.backend.read(iprot);
              struct.setBackendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SNAPSHOT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.snapshot_path = iprot.readString();
              struct.setSnapshot_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INCREMENTAL_SNAPSHOT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.incremental_snapshot = iprot.readBool();
              struct.setIncremental_snapshotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TRemoteSnapshotInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.backend != null) {
        if (struct.isSetBackend()) {
          oprot.writeFieldBegin(BACKEND_FIELD_DESC);
          struct.backend.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.snapshot_path != null) {
        if (struct.isSetSnapshot_path()) {
          oprot.writeFieldBegin(SNAPSHOT_PATH_FIELD_DESC);
          oprot.writeString(struct.snapshot_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIncremental_snapshot()) {
        oprot.writeFieldBegin(INCREMENTAL_SNAPSHOT_FIELD_DESC);
        oprot.writeBool(struct.incremental_snapshot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRemoteSnapshotInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRemoteSnapshotInfoTupleScheme getScheme() {
      return new TRemoteSnapshotInfoTupleScheme();
    }
  }

  private static class TRemoteSnapshotInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRemoteSnapshotInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRemoteSnapshotInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBackend()) {
        optionals.set(0);
      }
      if (struct.isSetSnapshot_path()) {
        optionals.set(1);
      }
      if (struct.isSetIncremental_snapshot()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBackend()) {
        struct.backend.write(oprot);
      }
      if (struct.isSetSnapshot_path()) {
        oprot.writeString(struct.snapshot_path);
      }
      if (struct.isSetIncremental_snapshot()) {
        oprot.writeBool(struct.incremental_snapshot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRemoteSnapshotInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.backend = new com.starrocks.thrift.TBackend();
        struct.backend.read(iprot);
        struct.setBackendIsSet(true);
      }
      if (incoming.get(1)) {
        struct.snapshot_path = iprot.readString();
        struct.setSnapshot_pathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.incremental_snapshot = iprot.readBool();
        struct.setIncremental_snapshotIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

