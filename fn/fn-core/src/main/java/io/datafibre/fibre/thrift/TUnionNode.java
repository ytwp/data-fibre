/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TUnionNode implements org.apache.thrift.TBase<TUnionNode, TUnionNode._Fields>, java.io.Serializable, Cloneable, Comparable<TUnionNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUnionNode");

  private static final org.apache.thrift.protocol.TField TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_EXPR_LISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("result_expr_lists", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CONST_EXPR_LISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("const_expr_lists", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField FIRST_MATERIALIZED_CHILD_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("first_materialized_child_idx", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField PASS_THROUGH_SLOT_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("pass_through_slot_maps", org.apache.thrift.protocol.TType.LIST, (short)20);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TUnionNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TUnionNodeTupleSchemeFactory();

  public int tuple_id; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<com.starrocks.thrift.TExpr>> result_expr_lists; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<com.starrocks.thrift.TExpr>> const_expr_lists; // required
  public long first_materialized_child_idx; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> pass_through_slot_maps; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TUPLE_ID((short)1, "tuple_id"),
    RESULT_EXPR_LISTS((short)2, "result_expr_lists"),
    CONST_EXPR_LISTS((short)3, "const_expr_lists"),
    FIRST_MATERIALIZED_CHILD_IDX((short)4, "first_materialized_child_idx"),
    PASS_THROUGH_SLOT_MAPS((short)20, "pass_through_slot_maps");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TUPLE_ID
          return TUPLE_ID;
        case 2: // RESULT_EXPR_LISTS
          return RESULT_EXPR_LISTS;
        case 3: // CONST_EXPR_LISTS
          return CONST_EXPR_LISTS;
        case 4: // FIRST_MATERIALIZED_CHILD_IDX
          return FIRST_MATERIALIZED_CHILD_IDX;
        case 20: // PASS_THROUGH_SLOT_MAPS
          return PASS_THROUGH_SLOT_MAPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TUPLE_ID_ISSET_ID = 0;
  private static final int __FIRST_MATERIALIZED_CHILD_IDX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PASS_THROUGH_SLOT_MAPS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.RESULT_EXPR_LISTS, new org.apache.thrift.meta_data.FieldMetaData("result_expr_lists", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class)))));
    tmpMap.put(_Fields.CONST_EXPR_LISTS, new org.apache.thrift.meta_data.FieldMetaData("const_expr_lists", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class)))));
    tmpMap.put(_Fields.FIRST_MATERIALIZED_CHILD_IDX, new org.apache.thrift.meta_data.FieldMetaData("first_materialized_child_idx", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PASS_THROUGH_SLOT_MAPS, new org.apache.thrift.meta_data.FieldMetaData("pass_through_slot_maps", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32                , "TSlotId"), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32                , "TSlotId")))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUnionNode.class, metaDataMap);
  }

  public TUnionNode() {
  }

  public TUnionNode(
    int tuple_id,
    java.util.List<java.util.List<com.starrocks.thrift.TExpr>> result_expr_lists,
    java.util.List<java.util.List<com.starrocks.thrift.TExpr>> const_expr_lists,
    long first_materialized_child_idx)
  {
    this();
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    this.result_expr_lists = result_expr_lists;
    this.const_expr_lists = const_expr_lists;
    this.first_materialized_child_idx = first_materialized_child_idx;
    setFirst_materialized_child_idxIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUnionNode(TUnionNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tuple_id = other.tuple_id;
    if (other.isSetResult_expr_lists()) {
      java.util.List<java.util.List<com.starrocks.thrift.TExpr>> __this__result_expr_lists = new java.util.ArrayList<java.util.List<com.starrocks.thrift.TExpr>>(other.result_expr_lists.size());
      for (java.util.List<com.starrocks.thrift.TExpr> other_element : other.result_expr_lists) {
        java.util.List<com.starrocks.thrift.TExpr> __this__result_expr_lists_copy = new java.util.ArrayList<com.starrocks.thrift.TExpr>(other_element.size());
        for (com.starrocks.thrift.TExpr other_element_element : other_element) {
          __this__result_expr_lists_copy.add(new com.starrocks.thrift.TExpr(other_element_element));
        }
        __this__result_expr_lists.add(__this__result_expr_lists_copy);
      }
      this.result_expr_lists = __this__result_expr_lists;
    }
    if (other.isSetConst_expr_lists()) {
      java.util.List<java.util.List<com.starrocks.thrift.TExpr>> __this__const_expr_lists = new java.util.ArrayList<java.util.List<com.starrocks.thrift.TExpr>>(other.const_expr_lists.size());
      for (java.util.List<com.starrocks.thrift.TExpr> other_element : other.const_expr_lists) {
        java.util.List<com.starrocks.thrift.TExpr> __this__const_expr_lists_copy = new java.util.ArrayList<com.starrocks.thrift.TExpr>(other_element.size());
        for (com.starrocks.thrift.TExpr other_element_element : other_element) {
          __this__const_expr_lists_copy.add(new com.starrocks.thrift.TExpr(other_element_element));
        }
        __this__const_expr_lists.add(__this__const_expr_lists_copy);
      }
      this.const_expr_lists = __this__const_expr_lists;
    }
    this.first_materialized_child_idx = other.first_materialized_child_idx;
    if (other.isSetPass_through_slot_maps()) {
      java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> __this__pass_through_slot_maps = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Integer>>(other.pass_through_slot_maps.size());
      for (java.util.Map<java.lang.Integer,java.lang.Integer> other_element : other.pass_through_slot_maps) {
        java.util.Map<java.lang.Integer,java.lang.Integer> __this__pass_through_slot_maps_copy = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other_element.size());
        for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> other_element_element : other_element.entrySet()) {

          java.lang.Integer other_element_element_key = other_element_element.getKey();
          java.lang.Integer other_element_element_value = other_element_element.getValue();

          java.lang.Integer __this__pass_through_slot_maps_copy_copy_key = other_element_element_key;

          java.lang.Integer __this__pass_through_slot_maps_copy_copy_value = other_element_element_value;

          __this__pass_through_slot_maps_copy.put(__this__pass_through_slot_maps_copy_copy_key, __this__pass_through_slot_maps_copy_copy_value);
        }
        __this__pass_through_slot_maps.add(__this__pass_through_slot_maps_copy);
      }
      this.pass_through_slot_maps = __this__pass_through_slot_maps;
    }
  }

  @Override
  public TUnionNode deepCopy() {
    return new TUnionNode(this);
  }

  @Override
  public void clear() {
    setTuple_idIsSet(false);
    this.tuple_id = 0;
    this.result_expr_lists = null;
    this.const_expr_lists = null;
    setFirst_materialized_child_idxIsSet(false);
    this.first_materialized_child_idx = 0;
    this.pass_through_slot_maps = null;
  }

  public int getTuple_id() {
    return this.tuple_id;
  }

  public TUnionNode setTuple_id(int tuple_id) {
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    return this;
  }

  public void unsetTuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  public void setTuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TUPLE_ID_ISSET_ID, value);
  }

  public int getResult_expr_listsSize() {
    return (this.result_expr_lists == null) ? 0 : this.result_expr_lists.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<com.starrocks.thrift.TExpr>> getResult_expr_listsIterator() {
    return (this.result_expr_lists == null) ? null : this.result_expr_lists.iterator();
  }

  public void addToResult_expr_lists(java.util.List<com.starrocks.thrift.TExpr> elem) {
    if (this.result_expr_lists == null) {
      this.result_expr_lists = new java.util.ArrayList<java.util.List<com.starrocks.thrift.TExpr>>();
    }
    this.result_expr_lists.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<com.starrocks.thrift.TExpr>> getResult_expr_lists() {
    return this.result_expr_lists;
  }

  public TUnionNode setResult_expr_lists(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<com.starrocks.thrift.TExpr>> result_expr_lists) {
    this.result_expr_lists = result_expr_lists;
    return this;
  }

  public void unsetResult_expr_lists() {
    this.result_expr_lists = null;
  }

  /** Returns true if field result_expr_lists is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_expr_lists() {
    return this.result_expr_lists != null;
  }

  public void setResult_expr_listsIsSet(boolean value) {
    if (!value) {
      this.result_expr_lists = null;
    }
  }

  public int getConst_expr_listsSize() {
    return (this.const_expr_lists == null) ? 0 : this.const_expr_lists.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<com.starrocks.thrift.TExpr>> getConst_expr_listsIterator() {
    return (this.const_expr_lists == null) ? null : this.const_expr_lists.iterator();
  }

  public void addToConst_expr_lists(java.util.List<com.starrocks.thrift.TExpr> elem) {
    if (this.const_expr_lists == null) {
      this.const_expr_lists = new java.util.ArrayList<java.util.List<com.starrocks.thrift.TExpr>>();
    }
    this.const_expr_lists.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<com.starrocks.thrift.TExpr>> getConst_expr_lists() {
    return this.const_expr_lists;
  }

  public TUnionNode setConst_expr_lists(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<com.starrocks.thrift.TExpr>> const_expr_lists) {
    this.const_expr_lists = const_expr_lists;
    return this;
  }

  public void unsetConst_expr_lists() {
    this.const_expr_lists = null;
  }

  /** Returns true if field const_expr_lists is set (has been assigned a value) and false otherwise */
  public boolean isSetConst_expr_lists() {
    return this.const_expr_lists != null;
  }

  public void setConst_expr_listsIsSet(boolean value) {
    if (!value) {
      this.const_expr_lists = null;
    }
  }

  public long getFirst_materialized_child_idx() {
    return this.first_materialized_child_idx;
  }

  public TUnionNode setFirst_materialized_child_idx(long first_materialized_child_idx) {
    this.first_materialized_child_idx = first_materialized_child_idx;
    setFirst_materialized_child_idxIsSet(true);
    return this;
  }

  public void unsetFirst_materialized_child_idx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIRST_MATERIALIZED_CHILD_IDX_ISSET_ID);
  }

  /** Returns true if field first_materialized_child_idx is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst_materialized_child_idx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIRST_MATERIALIZED_CHILD_IDX_ISSET_ID);
  }

  public void setFirst_materialized_child_idxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIRST_MATERIALIZED_CHILD_IDX_ISSET_ID, value);
  }

  public int getPass_through_slot_mapsSize() {
    return (this.pass_through_slot_maps == null) ? 0 : this.pass_through_slot_maps.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.Map<java.lang.Integer,java.lang.Integer>> getPass_through_slot_mapsIterator() {
    return (this.pass_through_slot_maps == null) ? null : this.pass_through_slot_maps.iterator();
  }

  public void addToPass_through_slot_maps(java.util.Map<java.lang.Integer,java.lang.Integer> elem) {
    if (this.pass_through_slot_maps == null) {
      this.pass_through_slot_maps = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Integer>>();
    }
    this.pass_through_slot_maps.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> getPass_through_slot_maps() {
    return this.pass_through_slot_maps;
  }

  public TUnionNode setPass_through_slot_maps(@org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> pass_through_slot_maps) {
    this.pass_through_slot_maps = pass_through_slot_maps;
    return this;
  }

  public void unsetPass_through_slot_maps() {
    this.pass_through_slot_maps = null;
  }

  /** Returns true if field pass_through_slot_maps is set (has been assigned a value) and false otherwise */
  public boolean isSetPass_through_slot_maps() {
    return this.pass_through_slot_maps != null;
  }

  public void setPass_through_slot_mapsIsSet(boolean value) {
    if (!value) {
      this.pass_through_slot_maps = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TUPLE_ID:
      if (value == null) {
        unsetTuple_id();
      } else {
        setTuple_id((java.lang.Integer)value);
      }
      break;

    case RESULT_EXPR_LISTS:
      if (value == null) {
        unsetResult_expr_lists();
      } else {
        setResult_expr_lists((java.util.List<java.util.List<com.starrocks.thrift.TExpr>>)value);
      }
      break;

    case CONST_EXPR_LISTS:
      if (value == null) {
        unsetConst_expr_lists();
      } else {
        setConst_expr_lists((java.util.List<java.util.List<com.starrocks.thrift.TExpr>>)value);
      }
      break;

    case FIRST_MATERIALIZED_CHILD_IDX:
      if (value == null) {
        unsetFirst_materialized_child_idx();
      } else {
        setFirst_materialized_child_idx((java.lang.Long)value);
      }
      break;

    case PASS_THROUGH_SLOT_MAPS:
      if (value == null) {
        unsetPass_through_slot_maps();
      } else {
        setPass_through_slot_maps((java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TUPLE_ID:
      return getTuple_id();

    case RESULT_EXPR_LISTS:
      return getResult_expr_lists();

    case CONST_EXPR_LISTS:
      return getConst_expr_lists();

    case FIRST_MATERIALIZED_CHILD_IDX:
      return getFirst_materialized_child_idx();

    case PASS_THROUGH_SLOT_MAPS:
      return getPass_through_slot_maps();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TUPLE_ID:
      return isSetTuple_id();
    case RESULT_EXPR_LISTS:
      return isSetResult_expr_lists();
    case CONST_EXPR_LISTS:
      return isSetConst_expr_lists();
    case FIRST_MATERIALIZED_CHILD_IDX:
      return isSetFirst_materialized_child_idx();
    case PASS_THROUGH_SLOT_MAPS:
      return isSetPass_through_slot_maps();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TUnionNode)
      return this.equals((TUnionNode)that);
    return false;
  }

  public boolean equals(TUnionNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tuple_id = true;
    boolean that_present_tuple_id = true;
    if (this_present_tuple_id || that_present_tuple_id) {
      if (!(this_present_tuple_id && that_present_tuple_id))
        return false;
      if (this.tuple_id != that.tuple_id)
        return false;
    }

    boolean this_present_result_expr_lists = true && this.isSetResult_expr_lists();
    boolean that_present_result_expr_lists = true && that.isSetResult_expr_lists();
    if (this_present_result_expr_lists || that_present_result_expr_lists) {
      if (!(this_present_result_expr_lists && that_present_result_expr_lists))
        return false;
      if (!this.result_expr_lists.equals(that.result_expr_lists))
        return false;
    }

    boolean this_present_const_expr_lists = true && this.isSetConst_expr_lists();
    boolean that_present_const_expr_lists = true && that.isSetConst_expr_lists();
    if (this_present_const_expr_lists || that_present_const_expr_lists) {
      if (!(this_present_const_expr_lists && that_present_const_expr_lists))
        return false;
      if (!this.const_expr_lists.equals(that.const_expr_lists))
        return false;
    }

    boolean this_present_first_materialized_child_idx = true;
    boolean that_present_first_materialized_child_idx = true;
    if (this_present_first_materialized_child_idx || that_present_first_materialized_child_idx) {
      if (!(this_present_first_materialized_child_idx && that_present_first_materialized_child_idx))
        return false;
      if (this.first_materialized_child_idx != that.first_materialized_child_idx)
        return false;
    }

    boolean this_present_pass_through_slot_maps = true && this.isSetPass_through_slot_maps();
    boolean that_present_pass_through_slot_maps = true && that.isSetPass_through_slot_maps();
    if (this_present_pass_through_slot_maps || that_present_pass_through_slot_maps) {
      if (!(this_present_pass_through_slot_maps && that_present_pass_through_slot_maps))
        return false;
      if (!this.pass_through_slot_maps.equals(that.pass_through_slot_maps))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + tuple_id;

    hashCode = hashCode * 8191 + ((isSetResult_expr_lists()) ? 131071 : 524287);
    if (isSetResult_expr_lists())
      hashCode = hashCode * 8191 + result_expr_lists.hashCode();

    hashCode = hashCode * 8191 + ((isSetConst_expr_lists()) ? 131071 : 524287);
    if (isSetConst_expr_lists())
      hashCode = hashCode * 8191 + const_expr_lists.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(first_materialized_child_idx);

    hashCode = hashCode * 8191 + ((isSetPass_through_slot_maps()) ? 131071 : 524287);
    if (isSetPass_through_slot_maps())
      hashCode = hashCode * 8191 + pass_through_slot_maps.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TUnionNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTuple_id(), other.isSetTuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_id, other.tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResult_expr_lists(), other.isSetResult_expr_lists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_expr_lists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_expr_lists, other.result_expr_lists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConst_expr_lists(), other.isSetConst_expr_lists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConst_expr_lists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.const_expr_lists, other.const_expr_lists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFirst_materialized_child_idx(), other.isSetFirst_materialized_child_idx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst_materialized_child_idx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first_materialized_child_idx, other.first_materialized_child_idx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPass_through_slot_maps(), other.isSetPass_through_slot_maps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPass_through_slot_maps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pass_through_slot_maps, other.pass_through_slot_maps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TUnionNode(");
    boolean first = true;

    sb.append("tuple_id:");
    sb.append(this.tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("result_expr_lists:");
    if (this.result_expr_lists == null) {
      sb.append("null");
    } else {
      sb.append(this.result_expr_lists);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("const_expr_lists:");
    if (this.const_expr_lists == null) {
      sb.append("null");
    } else {
      sb.append(this.const_expr_lists);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("first_materialized_child_idx:");
    sb.append(this.first_materialized_child_idx);
    first = false;
    if (isSetPass_through_slot_maps()) {
      if (!first) sb.append(", ");
      sb.append("pass_through_slot_maps:");
      if (this.pass_through_slot_maps == null) {
        sb.append("null");
      } else {
        sb.append(this.pass_through_slot_maps);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tuple_id' because it's a primitive and you chose the non-beans generator.
    if (result_expr_lists == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'result_expr_lists' was not present! Struct: " + toString());
    }
    if (const_expr_lists == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'const_expr_lists' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'first_materialized_child_idx' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUnionNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TUnionNodeStandardScheme getScheme() {
      return new TUnionNodeStandardScheme();
    }
  }

  private static class TUnionNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TUnionNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TUnionNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tuple_id = iprot.readI32();
              struct.setTuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT_EXPR_LISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list674 = iprot.readListBegin();
                struct.result_expr_lists = new java.util.ArrayList<java.util.List<com.starrocks.thrift.TExpr>>(_list674.size);
                @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> _elem675;
                for (int _i676 = 0; _i676 < _list674.size; ++_i676)
                {
                  {
                    org.apache.thrift.protocol.TList _list677 = iprot.readListBegin();
                    _elem675 = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list677.size);
                    @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem678;
                    for (int _i679 = 0; _i679 < _list677.size; ++_i679)
                    {
                      _elem678 = new com.starrocks.thrift.TExpr();
                      _elem678.read(iprot);
                      _elem675.add(_elem678);
                    }
                    iprot.readListEnd();
                  }
                  struct.result_expr_lists.add(_elem675);
                }
                iprot.readListEnd();
              }
              struct.setResult_expr_listsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONST_EXPR_LISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list680 = iprot.readListBegin();
                struct.const_expr_lists = new java.util.ArrayList<java.util.List<com.starrocks.thrift.TExpr>>(_list680.size);
                @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> _elem681;
                for (int _i682 = 0; _i682 < _list680.size; ++_i682)
                {
                  {
                    org.apache.thrift.protocol.TList _list683 = iprot.readListBegin();
                    _elem681 = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list683.size);
                    @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem684;
                    for (int _i685 = 0; _i685 < _list683.size; ++_i685)
                    {
                      _elem684 = new com.starrocks.thrift.TExpr();
                      _elem684.read(iprot);
                      _elem681.add(_elem684);
                    }
                    iprot.readListEnd();
                  }
                  struct.const_expr_lists.add(_elem681);
                }
                iprot.readListEnd();
              }
              struct.setConst_expr_listsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIRST_MATERIALIZED_CHILD_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.first_materialized_child_idx = iprot.readI64();
              struct.setFirst_materialized_child_idxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PASS_THROUGH_SLOT_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list686 = iprot.readListBegin();
                struct.pass_through_slot_maps = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Integer>>(_list686.size);
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> _elem687;
                for (int _i688 = 0; _i688 < _list686.size; ++_i688)
                {
                  {
                    org.apache.thrift.protocol.TMap _map689 = iprot.readMapBegin();
                    _elem687 = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map689.size);
                    int _key690;
                    int _val691;
                    for (int _i692 = 0; _i692 < _map689.size; ++_i692)
                    {
                      _key690 = iprot.readI32();
                      _val691 = iprot.readI32();
                      _elem687.put(_key690, _val691);
                    }
                    iprot.readMapEnd();
                  }
                  struct.pass_through_slot_maps.add(_elem687);
                }
                iprot.readListEnd();
              }
              struct.setPass_through_slot_mapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tuple_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFirst_materialized_child_idx()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'first_materialized_child_idx' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TUnionNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.tuple_id);
      oprot.writeFieldEnd();
      if (struct.result_expr_lists != null) {
        oprot.writeFieldBegin(RESULT_EXPR_LISTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.result_expr_lists.size()));
          for (java.util.List<com.starrocks.thrift.TExpr> _iter693 : struct.result_expr_lists)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter693.size()));
              for (com.starrocks.thrift.TExpr _iter694 : _iter693)
              {
                _iter694.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.const_expr_lists != null) {
        oprot.writeFieldBegin(CONST_EXPR_LISTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.const_expr_lists.size()));
          for (java.util.List<com.starrocks.thrift.TExpr> _iter695 : struct.const_expr_lists)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter695.size()));
              for (com.starrocks.thrift.TExpr _iter696 : _iter695)
              {
                _iter696.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FIRST_MATERIALIZED_CHILD_IDX_FIELD_DESC);
      oprot.writeI64(struct.first_materialized_child_idx);
      oprot.writeFieldEnd();
      if (struct.pass_through_slot_maps != null) {
        if (struct.isSetPass_through_slot_maps()) {
          oprot.writeFieldBegin(PASS_THROUGH_SLOT_MAPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.pass_through_slot_maps.size()));
            for (java.util.Map<java.lang.Integer,java.lang.Integer> _iter697 : struct.pass_through_slot_maps)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, _iter697.size()));
                for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter698 : _iter697.entrySet())
                {
                  oprot.writeI32(_iter698.getKey());
                  oprot.writeI32(_iter698.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUnionNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TUnionNodeTupleScheme getScheme() {
      return new TUnionNodeTupleScheme();
    }
  }

  private static class TUnionNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TUnionNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUnionNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.tuple_id);
      {
        oprot.writeI32(struct.result_expr_lists.size());
        for (java.util.List<com.starrocks.thrift.TExpr> _iter699 : struct.result_expr_lists)
        {
          {
            oprot.writeI32(_iter699.size());
            for (com.starrocks.thrift.TExpr _iter700 : _iter699)
            {
              _iter700.write(oprot);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.const_expr_lists.size());
        for (java.util.List<com.starrocks.thrift.TExpr> _iter701 : struct.const_expr_lists)
        {
          {
            oprot.writeI32(_iter701.size());
            for (com.starrocks.thrift.TExpr _iter702 : _iter701)
            {
              _iter702.write(oprot);
            }
          }
        }
      }
      oprot.writeI64(struct.first_materialized_child_idx);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPass_through_slot_maps()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetPass_through_slot_maps()) {
        {
          oprot.writeI32(struct.pass_through_slot_maps.size());
          for (java.util.Map<java.lang.Integer,java.lang.Integer> _iter703 : struct.pass_through_slot_maps)
          {
            {
              oprot.writeI32(_iter703.size());
              for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter704 : _iter703.entrySet())
              {
                oprot.writeI32(_iter704.getKey());
                oprot.writeI32(_iter704.getValue());
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUnionNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tuple_id = iprot.readI32();
      struct.setTuple_idIsSet(true);
      {
        org.apache.thrift.protocol.TList _list705 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
        struct.result_expr_lists = new java.util.ArrayList<java.util.List<com.starrocks.thrift.TExpr>>(_list705.size);
        @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> _elem706;
        for (int _i707 = 0; _i707 < _list705.size; ++_i707)
        {
          {
            org.apache.thrift.protocol.TList _list708 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            _elem706 = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list708.size);
            @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem709;
            for (int _i710 = 0; _i710 < _list708.size; ++_i710)
            {
              _elem709 = new com.starrocks.thrift.TExpr();
              _elem709.read(iprot);
              _elem706.add(_elem709);
            }
          }
          struct.result_expr_lists.add(_elem706);
        }
      }
      struct.setResult_expr_listsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list711 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
        struct.const_expr_lists = new java.util.ArrayList<java.util.List<com.starrocks.thrift.TExpr>>(_list711.size);
        @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> _elem712;
        for (int _i713 = 0; _i713 < _list711.size; ++_i713)
        {
          {
            org.apache.thrift.protocol.TList _list714 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            _elem712 = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list714.size);
            @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem715;
            for (int _i716 = 0; _i716 < _list714.size; ++_i716)
            {
              _elem715 = new com.starrocks.thrift.TExpr();
              _elem715.read(iprot);
              _elem712.add(_elem715);
            }
          }
          struct.const_expr_lists.add(_elem712);
        }
      }
      struct.setConst_expr_listsIsSet(true);
      struct.first_materialized_child_idx = iprot.readI64();
      struct.setFirst_materialized_child_idxIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list717 = iprot.readListBegin(org.apache.thrift.protocol.TType.MAP);
          struct.pass_through_slot_maps = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Integer>>(_list717.size);
          @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> _elem718;
          for (int _i719 = 0; _i719 < _list717.size; ++_i719)
          {
            {
              org.apache.thrift.protocol.TMap _map720 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32); 
              _elem718 = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map720.size);
              int _key721;
              int _val722;
              for (int _i723 = 0; _i723 < _map720.size; ++_i723)
              {
                _key721 = iprot.readI32();
                _val722 = iprot.readI32();
                _elem718.put(_key721, _val722);
              }
            }
            struct.pass_through_slot_maps.add(_elem718);
          }
        }
        struct.setPass_through_slot_mapsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

