/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TTableInfo implements org.apache.thrift.TBase<TTableInfo, TTableInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TTableInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableInfo");

  private static final org.apache.thrift.protocol.TField TABLE_CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("table_catalog", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("table_schema", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TABLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("table_type", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ENGINE_FIELD_DESC = new org.apache.thrift.protocol.TField("engine", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ROW_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("row_format", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TABLE_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("table_rows", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField AVG_ROW_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("avg_row_length", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField DATA_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("data_length", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField MAX_DATA_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("max_data_length", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField INDEX_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("index_length", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField DATA_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_free", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField AUTO_INCREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("auto_increment", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField CHECK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("check_time", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField TABLE_COLLATION_FIELD_DESC = new org.apache.thrift.protocol.TField("table_collation", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("checksum", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField CREATE_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("create_options", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField TABLE_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("table_comment", org.apache.thrift.protocol.TType.STRING, (short)21);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTableInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTableInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String table_catalog; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_schema; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_type; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String engine; // optional
  public long version; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String row_format; // optional
  public long table_rows; // optional
  public long avg_row_length; // optional
  public long data_length; // optional
  public long max_data_length; // optional
  public long index_length; // optional
  public long data_free; // optional
  public long auto_increment; // optional
  public long create_time; // optional
  public long update_time; // optional
  public long check_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_collation; // optional
  public long checksum; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String create_options; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_comment; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_CATALOG((short)1, "table_catalog"),
    TABLE_SCHEMA((short)2, "table_schema"),
    TABLE_NAME((short)3, "table_name"),
    TABLE_TYPE((short)4, "table_type"),
    ENGINE((short)5, "engine"),
    VERSION((short)6, "version"),
    ROW_FORMAT((short)7, "row_format"),
    TABLE_ROWS((short)8, "table_rows"),
    AVG_ROW_LENGTH((short)9, "avg_row_length"),
    DATA_LENGTH((short)10, "data_length"),
    MAX_DATA_LENGTH((short)11, "max_data_length"),
    INDEX_LENGTH((short)12, "index_length"),
    DATA_FREE((short)13, "data_free"),
    AUTO_INCREMENT((short)14, "auto_increment"),
    CREATE_TIME((short)15, "create_time"),
    UPDATE_TIME((short)16, "update_time"),
    CHECK_TIME((short)17, "check_time"),
    TABLE_COLLATION((short)18, "table_collation"),
    CHECKSUM((short)19, "checksum"),
    CREATE_OPTIONS((short)20, "create_options"),
    TABLE_COMMENT((short)21, "table_comment");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_CATALOG
          return TABLE_CATALOG;
        case 2: // TABLE_SCHEMA
          return TABLE_SCHEMA;
        case 3: // TABLE_NAME
          return TABLE_NAME;
        case 4: // TABLE_TYPE
          return TABLE_TYPE;
        case 5: // ENGINE
          return ENGINE;
        case 6: // VERSION
          return VERSION;
        case 7: // ROW_FORMAT
          return ROW_FORMAT;
        case 8: // TABLE_ROWS
          return TABLE_ROWS;
        case 9: // AVG_ROW_LENGTH
          return AVG_ROW_LENGTH;
        case 10: // DATA_LENGTH
          return DATA_LENGTH;
        case 11: // MAX_DATA_LENGTH
          return MAX_DATA_LENGTH;
        case 12: // INDEX_LENGTH
          return INDEX_LENGTH;
        case 13: // DATA_FREE
          return DATA_FREE;
        case 14: // AUTO_INCREMENT
          return AUTO_INCREMENT;
        case 15: // CREATE_TIME
          return CREATE_TIME;
        case 16: // UPDATE_TIME
          return UPDATE_TIME;
        case 17: // CHECK_TIME
          return CHECK_TIME;
        case 18: // TABLE_COLLATION
          return TABLE_COLLATION;
        case 19: // CHECKSUM
          return CHECKSUM;
        case 20: // CREATE_OPTIONS
          return CREATE_OPTIONS;
        case 21: // TABLE_COMMENT
          return TABLE_COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __TABLE_ROWS_ISSET_ID = 1;
  private static final int __AVG_ROW_LENGTH_ISSET_ID = 2;
  private static final int __DATA_LENGTH_ISSET_ID = 3;
  private static final int __MAX_DATA_LENGTH_ISSET_ID = 4;
  private static final int __INDEX_LENGTH_ISSET_ID = 5;
  private static final int __DATA_FREE_ISSET_ID = 6;
  private static final int __AUTO_INCREMENT_ISSET_ID = 7;
  private static final int __CREATE_TIME_ISSET_ID = 8;
  private static final int __UPDATE_TIME_ISSET_ID = 9;
  private static final int __CHECK_TIME_ISSET_ID = 10;
  private static final int __CHECKSUM_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TABLE_CATALOG,_Fields.TABLE_SCHEMA,_Fields.TABLE_NAME,_Fields.TABLE_TYPE,_Fields.ENGINE,_Fields.VERSION,_Fields.ROW_FORMAT,_Fields.TABLE_ROWS,_Fields.AVG_ROW_LENGTH,_Fields.DATA_LENGTH,_Fields.MAX_DATA_LENGTH,_Fields.INDEX_LENGTH,_Fields.DATA_FREE,_Fields.AUTO_INCREMENT,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.CHECK_TIME,_Fields.TABLE_COLLATION,_Fields.CHECKSUM,_Fields.CREATE_OPTIONS,_Fields.TABLE_COMMENT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_CATALOG, new org.apache.thrift.meta_data.FieldMetaData("table_catalog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("table_schema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("table_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENGINE, new org.apache.thrift.meta_data.FieldMetaData("engine", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROW_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("row_format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_ROWS, new org.apache.thrift.meta_data.FieldMetaData("table_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AVG_ROW_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("avg_row_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("data_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_DATA_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("max_data_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INDEX_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("index_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_FREE, new org.apache.thrift.meta_data.FieldMetaData("data_free", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUTO_INCREMENT, new org.apache.thrift.meta_data.FieldMetaData("auto_increment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHECK_TIME, new org.apache.thrift.meta_data.FieldMetaData("check_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLE_COLLATION, new org.apache.thrift.meta_data.FieldMetaData("table_collation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("checksum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("create_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("table_comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableInfo.class, metaDataMap);
  }

  public TTableInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableInfo(TTableInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTable_catalog()) {
      this.table_catalog = other.table_catalog;
    }
    if (other.isSetTable_schema()) {
      this.table_schema = other.table_schema;
    }
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    if (other.isSetTable_type()) {
      this.table_type = other.table_type;
    }
    if (other.isSetEngine()) {
      this.engine = other.engine;
    }
    this.version = other.version;
    if (other.isSetRow_format()) {
      this.row_format = other.row_format;
    }
    this.table_rows = other.table_rows;
    this.avg_row_length = other.avg_row_length;
    this.data_length = other.data_length;
    this.max_data_length = other.max_data_length;
    this.index_length = other.index_length;
    this.data_free = other.data_free;
    this.auto_increment = other.auto_increment;
    this.create_time = other.create_time;
    this.update_time = other.update_time;
    this.check_time = other.check_time;
    if (other.isSetTable_collation()) {
      this.table_collation = other.table_collation;
    }
    this.checksum = other.checksum;
    if (other.isSetCreate_options()) {
      this.create_options = other.create_options;
    }
    if (other.isSetTable_comment()) {
      this.table_comment = other.table_comment;
    }
  }

  @Override
  public TTableInfo deepCopy() {
    return new TTableInfo(this);
  }

  @Override
  public void clear() {
    this.table_catalog = null;
    this.table_schema = null;
    this.table_name = null;
    this.table_type = null;
    this.engine = null;
    setVersionIsSet(false);
    this.version = 0;
    this.row_format = null;
    setTable_rowsIsSet(false);
    this.table_rows = 0;
    setAvg_row_lengthIsSet(false);
    this.avg_row_length = 0;
    setData_lengthIsSet(false);
    this.data_length = 0;
    setMax_data_lengthIsSet(false);
    this.max_data_length = 0;
    setIndex_lengthIsSet(false);
    this.index_length = 0;
    setData_freeIsSet(false);
    this.data_free = 0;
    setAuto_incrementIsSet(false);
    this.auto_increment = 0;
    setCreate_timeIsSet(false);
    this.create_time = 0;
    setUpdate_timeIsSet(false);
    this.update_time = 0;
    setCheck_timeIsSet(false);
    this.check_time = 0;
    this.table_collation = null;
    setChecksumIsSet(false);
    this.checksum = 0;
    this.create_options = null;
    this.table_comment = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_catalog() {
    return this.table_catalog;
  }

  public TTableInfo setTable_catalog(@org.apache.thrift.annotation.Nullable java.lang.String table_catalog) {
    this.table_catalog = table_catalog;
    return this;
  }

  public void unsetTable_catalog() {
    this.table_catalog = null;
  }

  /** Returns true if field table_catalog is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_catalog() {
    return this.table_catalog != null;
  }

  public void setTable_catalogIsSet(boolean value) {
    if (!value) {
      this.table_catalog = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_schema() {
    return this.table_schema;
  }

  public TTableInfo setTable_schema(@org.apache.thrift.annotation.Nullable java.lang.String table_schema) {
    this.table_schema = table_schema;
    return this;
  }

  public void unsetTable_schema() {
    this.table_schema = null;
  }

  /** Returns true if field table_schema is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_schema() {
    return this.table_schema != null;
  }

  public void setTable_schemaIsSet(boolean value) {
    if (!value) {
      this.table_schema = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_name() {
    return this.table_name;
  }

  public TTableInfo setTable_name(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_type() {
    return this.table_type;
  }

  public TTableInfo setTable_type(@org.apache.thrift.annotation.Nullable java.lang.String table_type) {
    this.table_type = table_type;
    return this;
  }

  public void unsetTable_type() {
    this.table_type = null;
  }

  /** Returns true if field table_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_type() {
    return this.table_type != null;
  }

  public void setTable_typeIsSet(boolean value) {
    if (!value) {
      this.table_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEngine() {
    return this.engine;
  }

  public TTableInfo setEngine(@org.apache.thrift.annotation.Nullable java.lang.String engine) {
    this.engine = engine;
    return this;
  }

  public void unsetEngine() {
    this.engine = null;
  }

  /** Returns true if field engine is set (has been assigned a value) and false otherwise */
  public boolean isSetEngine() {
    return this.engine != null;
  }

  public void setEngineIsSet(boolean value) {
    if (!value) {
      this.engine = null;
    }
  }

  public long getVersion() {
    return this.version;
  }

  public TTableInfo setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRow_format() {
    return this.row_format;
  }

  public TTableInfo setRow_format(@org.apache.thrift.annotation.Nullable java.lang.String row_format) {
    this.row_format = row_format;
    return this;
  }

  public void unsetRow_format() {
    this.row_format = null;
  }

  /** Returns true if field row_format is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_format() {
    return this.row_format != null;
  }

  public void setRow_formatIsSet(boolean value) {
    if (!value) {
      this.row_format = null;
    }
  }

  public long getTable_rows() {
    return this.table_rows;
  }

  public TTableInfo setTable_rows(long table_rows) {
    this.table_rows = table_rows;
    setTable_rowsIsSet(true);
    return this;
  }

  public void unsetTable_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ROWS_ISSET_ID);
  }

  /** Returns true if field table_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ROWS_ISSET_ID);
  }

  public void setTable_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ROWS_ISSET_ID, value);
  }

  public long getAvg_row_length() {
    return this.avg_row_length;
  }

  public TTableInfo setAvg_row_length(long avg_row_length) {
    this.avg_row_length = avg_row_length;
    setAvg_row_lengthIsSet(true);
    return this;
  }

  public void unsetAvg_row_length() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AVG_ROW_LENGTH_ISSET_ID);
  }

  /** Returns true if field avg_row_length is set (has been assigned a value) and false otherwise */
  public boolean isSetAvg_row_length() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AVG_ROW_LENGTH_ISSET_ID);
  }

  public void setAvg_row_lengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AVG_ROW_LENGTH_ISSET_ID, value);
  }

  public long getData_length() {
    return this.data_length;
  }

  public TTableInfo setData_length(long data_length) {
    this.data_length = data_length;
    setData_lengthIsSet(true);
    return this;
  }

  public void unsetData_length() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATA_LENGTH_ISSET_ID);
  }

  /** Returns true if field data_length is set (has been assigned a value) and false otherwise */
  public boolean isSetData_length() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATA_LENGTH_ISSET_ID);
  }

  public void setData_lengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATA_LENGTH_ISSET_ID, value);
  }

  public long getMax_data_length() {
    return this.max_data_length;
  }

  public TTableInfo setMax_data_length(long max_data_length) {
    this.max_data_length = max_data_length;
    setMax_data_lengthIsSet(true);
    return this;
  }

  public void unsetMax_data_length() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_DATA_LENGTH_ISSET_ID);
  }

  /** Returns true if field max_data_length is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_data_length() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_DATA_LENGTH_ISSET_ID);
  }

  public void setMax_data_lengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_DATA_LENGTH_ISSET_ID, value);
  }

  public long getIndex_length() {
    return this.index_length;
  }

  public TTableInfo setIndex_length(long index_length) {
    this.index_length = index_length;
    setIndex_lengthIsSet(true);
    return this;
  }

  public void unsetIndex_length() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_LENGTH_ISSET_ID);
  }

  /** Returns true if field index_length is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_length() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_LENGTH_ISSET_ID);
  }

  public void setIndex_lengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_LENGTH_ISSET_ID, value);
  }

  public long getData_free() {
    return this.data_free;
  }

  public TTableInfo setData_free(long data_free) {
    this.data_free = data_free;
    setData_freeIsSet(true);
    return this;
  }

  public void unsetData_free() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATA_FREE_ISSET_ID);
  }

  /** Returns true if field data_free is set (has been assigned a value) and false otherwise */
  public boolean isSetData_free() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATA_FREE_ISSET_ID);
  }

  public void setData_freeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATA_FREE_ISSET_ID, value);
  }

  public long getAuto_increment() {
    return this.auto_increment;
  }

  public TTableInfo setAuto_increment(long auto_increment) {
    this.auto_increment = auto_increment;
    setAuto_incrementIsSet(true);
    return this;
  }

  public void unsetAuto_increment() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTO_INCREMENT_ISSET_ID);
  }

  /** Returns true if field auto_increment is set (has been assigned a value) and false otherwise */
  public boolean isSetAuto_increment() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTO_INCREMENT_ISSET_ID);
  }

  public void setAuto_incrementIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTO_INCREMENT_ISSET_ID, value);
  }

  public long getCreate_time() {
    return this.create_time;
  }

  public TTableInfo setCreate_time(long create_time) {
    this.create_time = create_time;
    setCreate_timeIsSet(true);
    return this;
  }

  public void unsetCreate_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  public void setCreate_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATE_TIME_ISSET_ID, value);
  }

  public long getUpdate_time() {
    return this.update_time;
  }

  public TTableInfo setUpdate_time(long update_time) {
    this.update_time = update_time;
    setUpdate_timeIsSet(true);
    return this;
  }

  public void unsetUpdate_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATE_TIME_ISSET_ID);
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATE_TIME_ISSET_ID);
  }

  public void setUpdate_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATE_TIME_ISSET_ID, value);
  }

  public long getCheck_time() {
    return this.check_time;
  }

  public TTableInfo setCheck_time(long check_time) {
    this.check_time = check_time;
    setCheck_timeIsSet(true);
    return this;
  }

  public void unsetCheck_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECK_TIME_ISSET_ID);
  }

  /** Returns true if field check_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCheck_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECK_TIME_ISSET_ID);
  }

  public void setCheck_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECK_TIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_collation() {
    return this.table_collation;
  }

  public TTableInfo setTable_collation(@org.apache.thrift.annotation.Nullable java.lang.String table_collation) {
    this.table_collation = table_collation;
    return this;
  }

  public void unsetTable_collation() {
    this.table_collation = null;
  }

  /** Returns true if field table_collation is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_collation() {
    return this.table_collation != null;
  }

  public void setTable_collationIsSet(boolean value) {
    if (!value) {
      this.table_collation = null;
    }
  }

  public long getChecksum() {
    return this.checksum;
  }

  public TTableInfo setChecksum(long checksum) {
    this.checksum = checksum;
    setChecksumIsSet(true);
    return this;
  }

  public void unsetChecksum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKSUM_ISSET_ID);
  }

  /** Returns true if field checksum is set (has been assigned a value) and false otherwise */
  public boolean isSetChecksum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKSUM_ISSET_ID);
  }

  public void setChecksumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKSUM_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCreate_options() {
    return this.create_options;
  }

  public TTableInfo setCreate_options(@org.apache.thrift.annotation.Nullable java.lang.String create_options) {
    this.create_options = create_options;
    return this;
  }

  public void unsetCreate_options() {
    this.create_options = null;
  }

  /** Returns true if field create_options is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_options() {
    return this.create_options != null;
  }

  public void setCreate_optionsIsSet(boolean value) {
    if (!value) {
      this.create_options = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_comment() {
    return this.table_comment;
  }

  public TTableInfo setTable_comment(@org.apache.thrift.annotation.Nullable java.lang.String table_comment) {
    this.table_comment = table_comment;
    return this;
  }

  public void unsetTable_comment() {
    this.table_comment = null;
  }

  /** Returns true if field table_comment is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_comment() {
    return this.table_comment != null;
  }

  public void setTable_commentIsSet(boolean value) {
    if (!value) {
      this.table_comment = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLE_CATALOG:
      if (value == null) {
        unsetTable_catalog();
      } else {
        setTable_catalog((java.lang.String)value);
      }
      break;

    case TABLE_SCHEMA:
      if (value == null) {
        unsetTable_schema();
      } else {
        setTable_schema((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((java.lang.String)value);
      }
      break;

    case TABLE_TYPE:
      if (value == null) {
        unsetTable_type();
      } else {
        setTable_type((java.lang.String)value);
      }
      break;

    case ENGINE:
      if (value == null) {
        unsetEngine();
      } else {
        setEngine((java.lang.String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Long)value);
      }
      break;

    case ROW_FORMAT:
      if (value == null) {
        unsetRow_format();
      } else {
        setRow_format((java.lang.String)value);
      }
      break;

    case TABLE_ROWS:
      if (value == null) {
        unsetTable_rows();
      } else {
        setTable_rows((java.lang.Long)value);
      }
      break;

    case AVG_ROW_LENGTH:
      if (value == null) {
        unsetAvg_row_length();
      } else {
        setAvg_row_length((java.lang.Long)value);
      }
      break;

    case DATA_LENGTH:
      if (value == null) {
        unsetData_length();
      } else {
        setData_length((java.lang.Long)value);
      }
      break;

    case MAX_DATA_LENGTH:
      if (value == null) {
        unsetMax_data_length();
      } else {
        setMax_data_length((java.lang.Long)value);
      }
      break;

    case INDEX_LENGTH:
      if (value == null) {
        unsetIndex_length();
      } else {
        setIndex_length((java.lang.Long)value);
      }
      break;

    case DATA_FREE:
      if (value == null) {
        unsetData_free();
      } else {
        setData_free((java.lang.Long)value);
      }
      break;

    case AUTO_INCREMENT:
      if (value == null) {
        unsetAuto_increment();
      } else {
        setAuto_increment((java.lang.Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((java.lang.Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((java.lang.Long)value);
      }
      break;

    case CHECK_TIME:
      if (value == null) {
        unsetCheck_time();
      } else {
        setCheck_time((java.lang.Long)value);
      }
      break;

    case TABLE_COLLATION:
      if (value == null) {
        unsetTable_collation();
      } else {
        setTable_collation((java.lang.String)value);
      }
      break;

    case CHECKSUM:
      if (value == null) {
        unsetChecksum();
      } else {
        setChecksum((java.lang.Long)value);
      }
      break;

    case CREATE_OPTIONS:
      if (value == null) {
        unsetCreate_options();
      } else {
        setCreate_options((java.lang.String)value);
      }
      break;

    case TABLE_COMMENT:
      if (value == null) {
        unsetTable_comment();
      } else {
        setTable_comment((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_CATALOG:
      return getTable_catalog();

    case TABLE_SCHEMA:
      return getTable_schema();

    case TABLE_NAME:
      return getTable_name();

    case TABLE_TYPE:
      return getTable_type();

    case ENGINE:
      return getEngine();

    case VERSION:
      return getVersion();

    case ROW_FORMAT:
      return getRow_format();

    case TABLE_ROWS:
      return getTable_rows();

    case AVG_ROW_LENGTH:
      return getAvg_row_length();

    case DATA_LENGTH:
      return getData_length();

    case MAX_DATA_LENGTH:
      return getMax_data_length();

    case INDEX_LENGTH:
      return getIndex_length();

    case DATA_FREE:
      return getData_free();

    case AUTO_INCREMENT:
      return getAuto_increment();

    case CREATE_TIME:
      return getCreate_time();

    case UPDATE_TIME:
      return getUpdate_time();

    case CHECK_TIME:
      return getCheck_time();

    case TABLE_COLLATION:
      return getTable_collation();

    case CHECKSUM:
      return getChecksum();

    case CREATE_OPTIONS:
      return getCreate_options();

    case TABLE_COMMENT:
      return getTable_comment();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLE_CATALOG:
      return isSetTable_catalog();
    case TABLE_SCHEMA:
      return isSetTable_schema();
    case TABLE_NAME:
      return isSetTable_name();
    case TABLE_TYPE:
      return isSetTable_type();
    case ENGINE:
      return isSetEngine();
    case VERSION:
      return isSetVersion();
    case ROW_FORMAT:
      return isSetRow_format();
    case TABLE_ROWS:
      return isSetTable_rows();
    case AVG_ROW_LENGTH:
      return isSetAvg_row_length();
    case DATA_LENGTH:
      return isSetData_length();
    case MAX_DATA_LENGTH:
      return isSetMax_data_length();
    case INDEX_LENGTH:
      return isSetIndex_length();
    case DATA_FREE:
      return isSetData_free();
    case AUTO_INCREMENT:
      return isSetAuto_increment();
    case CREATE_TIME:
      return isSetCreate_time();
    case UPDATE_TIME:
      return isSetUpdate_time();
    case CHECK_TIME:
      return isSetCheck_time();
    case TABLE_COLLATION:
      return isSetTable_collation();
    case CHECKSUM:
      return isSetChecksum();
    case CREATE_OPTIONS:
      return isSetCreate_options();
    case TABLE_COMMENT:
      return isSetTable_comment();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTableInfo)
      return this.equals((TTableInfo)that);
    return false;
  }

  public boolean equals(TTableInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_table_catalog = true && this.isSetTable_catalog();
    boolean that_present_table_catalog = true && that.isSetTable_catalog();
    if (this_present_table_catalog || that_present_table_catalog) {
      if (!(this_present_table_catalog && that_present_table_catalog))
        return false;
      if (!this.table_catalog.equals(that.table_catalog))
        return false;
    }

    boolean this_present_table_schema = true && this.isSetTable_schema();
    boolean that_present_table_schema = true && that.isSetTable_schema();
    if (this_present_table_schema || that_present_table_schema) {
      if (!(this_present_table_schema && that_present_table_schema))
        return false;
      if (!this.table_schema.equals(that.table_schema))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_table_type = true && this.isSetTable_type();
    boolean that_present_table_type = true && that.isSetTable_type();
    if (this_present_table_type || that_present_table_type) {
      if (!(this_present_table_type && that_present_table_type))
        return false;
      if (!this.table_type.equals(that.table_type))
        return false;
    }

    boolean this_present_engine = true && this.isSetEngine();
    boolean that_present_engine = true && that.isSetEngine();
    if (this_present_engine || that_present_engine) {
      if (!(this_present_engine && that_present_engine))
        return false;
      if (!this.engine.equals(that.engine))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_row_format = true && this.isSetRow_format();
    boolean that_present_row_format = true && that.isSetRow_format();
    if (this_present_row_format || that_present_row_format) {
      if (!(this_present_row_format && that_present_row_format))
        return false;
      if (!this.row_format.equals(that.row_format))
        return false;
    }

    boolean this_present_table_rows = true && this.isSetTable_rows();
    boolean that_present_table_rows = true && that.isSetTable_rows();
    if (this_present_table_rows || that_present_table_rows) {
      if (!(this_present_table_rows && that_present_table_rows))
        return false;
      if (this.table_rows != that.table_rows)
        return false;
    }

    boolean this_present_avg_row_length = true && this.isSetAvg_row_length();
    boolean that_present_avg_row_length = true && that.isSetAvg_row_length();
    if (this_present_avg_row_length || that_present_avg_row_length) {
      if (!(this_present_avg_row_length && that_present_avg_row_length))
        return false;
      if (this.avg_row_length != that.avg_row_length)
        return false;
    }

    boolean this_present_data_length = true && this.isSetData_length();
    boolean that_present_data_length = true && that.isSetData_length();
    if (this_present_data_length || that_present_data_length) {
      if (!(this_present_data_length && that_present_data_length))
        return false;
      if (this.data_length != that.data_length)
        return false;
    }

    boolean this_present_max_data_length = true && this.isSetMax_data_length();
    boolean that_present_max_data_length = true && that.isSetMax_data_length();
    if (this_present_max_data_length || that_present_max_data_length) {
      if (!(this_present_max_data_length && that_present_max_data_length))
        return false;
      if (this.max_data_length != that.max_data_length)
        return false;
    }

    boolean this_present_index_length = true && this.isSetIndex_length();
    boolean that_present_index_length = true && that.isSetIndex_length();
    if (this_present_index_length || that_present_index_length) {
      if (!(this_present_index_length && that_present_index_length))
        return false;
      if (this.index_length != that.index_length)
        return false;
    }

    boolean this_present_data_free = true && this.isSetData_free();
    boolean that_present_data_free = true && that.isSetData_free();
    if (this_present_data_free || that_present_data_free) {
      if (!(this_present_data_free && that_present_data_free))
        return false;
      if (this.data_free != that.data_free)
        return false;
    }

    boolean this_present_auto_increment = true && this.isSetAuto_increment();
    boolean that_present_auto_increment = true && that.isSetAuto_increment();
    if (this_present_auto_increment || that_present_auto_increment) {
      if (!(this_present_auto_increment && that_present_auto_increment))
        return false;
      if (this.auto_increment != that.auto_increment)
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (this.create_time != that.create_time)
        return false;
    }

    boolean this_present_update_time = true && this.isSetUpdate_time();
    boolean that_present_update_time = true && that.isSetUpdate_time();
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (this.update_time != that.update_time)
        return false;
    }

    boolean this_present_check_time = true && this.isSetCheck_time();
    boolean that_present_check_time = true && that.isSetCheck_time();
    if (this_present_check_time || that_present_check_time) {
      if (!(this_present_check_time && that_present_check_time))
        return false;
      if (this.check_time != that.check_time)
        return false;
    }

    boolean this_present_table_collation = true && this.isSetTable_collation();
    boolean that_present_table_collation = true && that.isSetTable_collation();
    if (this_present_table_collation || that_present_table_collation) {
      if (!(this_present_table_collation && that_present_table_collation))
        return false;
      if (!this.table_collation.equals(that.table_collation))
        return false;
    }

    boolean this_present_checksum = true && this.isSetChecksum();
    boolean that_present_checksum = true && that.isSetChecksum();
    if (this_present_checksum || that_present_checksum) {
      if (!(this_present_checksum && that_present_checksum))
        return false;
      if (this.checksum != that.checksum)
        return false;
    }

    boolean this_present_create_options = true && this.isSetCreate_options();
    boolean that_present_create_options = true && that.isSetCreate_options();
    if (this_present_create_options || that_present_create_options) {
      if (!(this_present_create_options && that_present_create_options))
        return false;
      if (!this.create_options.equals(that.create_options))
        return false;
    }

    boolean this_present_table_comment = true && this.isSetTable_comment();
    boolean that_present_table_comment = true && that.isSetTable_comment();
    if (this_present_table_comment || that_present_table_comment) {
      if (!(this_present_table_comment && that_present_table_comment))
        return false;
      if (!this.table_comment.equals(that.table_comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTable_catalog()) ? 131071 : 524287);
    if (isSetTable_catalog())
      hashCode = hashCode * 8191 + table_catalog.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_schema()) ? 131071 : 524287);
    if (isSetTable_schema())
      hashCode = hashCode * 8191 + table_schema.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_type()) ? 131071 : 524287);
    if (isSetTable_type())
      hashCode = hashCode * 8191 + table_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetEngine()) ? 131071 : 524287);
    if (isSetEngine())
      hashCode = hashCode * 8191 + engine.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

    hashCode = hashCode * 8191 + ((isSetRow_format()) ? 131071 : 524287);
    if (isSetRow_format())
      hashCode = hashCode * 8191 + row_format.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_rows()) ? 131071 : 524287);
    if (isSetTable_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_rows);

    hashCode = hashCode * 8191 + ((isSetAvg_row_length()) ? 131071 : 524287);
    if (isSetAvg_row_length())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(avg_row_length);

    hashCode = hashCode * 8191 + ((isSetData_length()) ? 131071 : 524287);
    if (isSetData_length())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(data_length);

    hashCode = hashCode * 8191 + ((isSetMax_data_length()) ? 131071 : 524287);
    if (isSetMax_data_length())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_data_length);

    hashCode = hashCode * 8191 + ((isSetIndex_length()) ? 131071 : 524287);
    if (isSetIndex_length())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(index_length);

    hashCode = hashCode * 8191 + ((isSetData_free()) ? 131071 : 524287);
    if (isSetData_free())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(data_free);

    hashCode = hashCode * 8191 + ((isSetAuto_increment()) ? 131071 : 524287);
    if (isSetAuto_increment())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(auto_increment);

    hashCode = hashCode * 8191 + ((isSetCreate_time()) ? 131071 : 524287);
    if (isSetCreate_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(create_time);

    hashCode = hashCode * 8191 + ((isSetUpdate_time()) ? 131071 : 524287);
    if (isSetUpdate_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(update_time);

    hashCode = hashCode * 8191 + ((isSetCheck_time()) ? 131071 : 524287);
    if (isSetCheck_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(check_time);

    hashCode = hashCode * 8191 + ((isSetTable_collation()) ? 131071 : 524287);
    if (isSetTable_collation())
      hashCode = hashCode * 8191 + table_collation.hashCode();

    hashCode = hashCode * 8191 + ((isSetChecksum()) ? 131071 : 524287);
    if (isSetChecksum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(checksum);

    hashCode = hashCode * 8191 + ((isSetCreate_options()) ? 131071 : 524287);
    if (isSetCreate_options())
      hashCode = hashCode * 8191 + create_options.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_comment()) ? 131071 : 524287);
    if (isSetTable_comment())
      hashCode = hashCode * 8191 + table_comment.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TTableInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTable_catalog(), other.isSetTable_catalog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_catalog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_catalog, other.table_catalog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_schema(), other.isSetTable_schema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_schema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_schema, other.table_schema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_name(), other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_type(), other.isSetTable_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_type, other.table_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEngine(), other.isSetEngine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engine, other.engine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRow_format(), other.isSetRow_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_format, other.row_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_rows(), other.isSetTable_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_rows, other.table_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAvg_row_length(), other.isSetAvg_row_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvg_row_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avg_row_length, other.avg_row_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetData_length(), other.isSetData_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_length, other.data_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_data_length(), other.isSetMax_data_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_data_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_data_length, other.max_data_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIndex_length(), other.isSetIndex_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_length, other.index_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetData_free(), other.isSetData_free());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_free()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_free, other.data_free);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAuto_increment(), other.isSetAuto_increment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuto_increment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auto_increment, other.auto_increment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreate_time(), other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUpdate_time(), other.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCheck_time(), other.isSetCheck_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheck_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.check_time, other.check_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_collation(), other.isSetTable_collation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_collation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_collation, other.table_collation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChecksum(), other.isSetChecksum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChecksum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checksum, other.checksum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreate_options(), other.isSetCreate_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_options, other.create_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_comment(), other.isSetTable_comment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_comment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_comment, other.table_comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTableInfo(");
    boolean first = true;

    if (isSetTable_catalog()) {
      sb.append("table_catalog:");
      if (this.table_catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.table_catalog);
      }
      first = false;
    }
    if (isSetTable_schema()) {
      if (!first) sb.append(", ");
      sb.append("table_schema:");
      if (this.table_schema == null) {
        sb.append("null");
      } else {
        sb.append(this.table_schema);
      }
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetTable_type()) {
      if (!first) sb.append(", ");
      sb.append("table_type:");
      if (this.table_type == null) {
        sb.append("null");
      } else {
        sb.append(this.table_type);
      }
      first = false;
    }
    if (isSetEngine()) {
      if (!first) sb.append(", ");
      sb.append("engine:");
      if (this.engine == null) {
        sb.append("null");
      } else {
        sb.append(this.engine);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetRow_format()) {
      if (!first) sb.append(", ");
      sb.append("row_format:");
      if (this.row_format == null) {
        sb.append("null");
      } else {
        sb.append(this.row_format);
      }
      first = false;
    }
    if (isSetTable_rows()) {
      if (!first) sb.append(", ");
      sb.append("table_rows:");
      sb.append(this.table_rows);
      first = false;
    }
    if (isSetAvg_row_length()) {
      if (!first) sb.append(", ");
      sb.append("avg_row_length:");
      sb.append(this.avg_row_length);
      first = false;
    }
    if (isSetData_length()) {
      if (!first) sb.append(", ");
      sb.append("data_length:");
      sb.append(this.data_length);
      first = false;
    }
    if (isSetMax_data_length()) {
      if (!first) sb.append(", ");
      sb.append("max_data_length:");
      sb.append(this.max_data_length);
      first = false;
    }
    if (isSetIndex_length()) {
      if (!first) sb.append(", ");
      sb.append("index_length:");
      sb.append(this.index_length);
      first = false;
    }
    if (isSetData_free()) {
      if (!first) sb.append(", ");
      sb.append("data_free:");
      sb.append(this.data_free);
      first = false;
    }
    if (isSetAuto_increment()) {
      if (!first) sb.append(", ");
      sb.append("auto_increment:");
      sb.append(this.auto_increment);
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      sb.append(this.create_time);
      first = false;
    }
    if (isSetUpdate_time()) {
      if (!first) sb.append(", ");
      sb.append("update_time:");
      sb.append(this.update_time);
      first = false;
    }
    if (isSetCheck_time()) {
      if (!first) sb.append(", ");
      sb.append("check_time:");
      sb.append(this.check_time);
      first = false;
    }
    if (isSetTable_collation()) {
      if (!first) sb.append(", ");
      sb.append("table_collation:");
      if (this.table_collation == null) {
        sb.append("null");
      } else {
        sb.append(this.table_collation);
      }
      first = false;
    }
    if (isSetChecksum()) {
      if (!first) sb.append(", ");
      sb.append("checksum:");
      sb.append(this.checksum);
      first = false;
    }
    if (isSetCreate_options()) {
      if (!first) sb.append(", ");
      sb.append("create_options:");
      if (this.create_options == null) {
        sb.append("null");
      } else {
        sb.append(this.create_options);
      }
      first = false;
    }
    if (isSetTable_comment()) {
      if (!first) sb.append(", ");
      sb.append("table_comment:");
      if (this.table_comment == null) {
        sb.append("null");
      } else {
        sb.append(this.table_comment);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTableInfoStandardScheme getScheme() {
      return new TTableInfoStandardScheme();
    }
  }

  private static class TTableInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTableInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_CATALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_catalog = iprot.readString();
              struct.setTable_catalogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_schema = iprot.readString();
              struct.setTable_schemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_type = iprot.readString();
              struct.setTable_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENGINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engine = iprot.readString();
              struct.setEngineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROW_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.row_format = iprot.readString();
              struct.setRow_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TABLE_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_rows = iprot.readI64();
              struct.setTable_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AVG_ROW_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.avg_row_length = iprot.readI64();
              struct.setAvg_row_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DATA_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.data_length = iprot.readI64();
              struct.setData_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAX_DATA_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_data_length = iprot.readI64();
              struct.setMax_data_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INDEX_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.index_length = iprot.readI64();
              struct.setIndex_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DATA_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.data_free = iprot.readI64();
              struct.setData_freeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // AUTO_INCREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.auto_increment = iprot.readI64();
              struct.setAuto_incrementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.create_time = iprot.readI64();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.update_time = iprot.readI64();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CHECK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.check_time = iprot.readI64();
              struct.setCheck_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TABLE_COLLATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_collation = iprot.readString();
              struct.setTable_collationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CHECKSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.checksum = iprot.readI64();
              struct.setChecksumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CREATE_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_options = iprot.readString();
              struct.setCreate_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TABLE_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_comment = iprot.readString();
              struct.setTable_commentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_catalog != null) {
        if (struct.isSetTable_catalog()) {
          oprot.writeFieldBegin(TABLE_CATALOG_FIELD_DESC);
          oprot.writeString(struct.table_catalog);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_schema != null) {
        if (struct.isSetTable_schema()) {
          oprot.writeFieldBegin(TABLE_SCHEMA_FIELD_DESC);
          oprot.writeString(struct.table_schema);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_type != null) {
        if (struct.isSetTable_type()) {
          oprot.writeFieldBegin(TABLE_TYPE_FIELD_DESC);
          oprot.writeString(struct.table_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.engine != null) {
        if (struct.isSetEngine()) {
          oprot.writeFieldBegin(ENGINE_FIELD_DESC);
          oprot.writeString(struct.engine);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI64(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.row_format != null) {
        if (struct.isSetRow_format()) {
          oprot.writeFieldBegin(ROW_FORMAT_FIELD_DESC);
          oprot.writeString(struct.row_format);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTable_rows()) {
        oprot.writeFieldBegin(TABLE_ROWS_FIELD_DESC);
        oprot.writeI64(struct.table_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAvg_row_length()) {
        oprot.writeFieldBegin(AVG_ROW_LENGTH_FIELD_DESC);
        oprot.writeI64(struct.avg_row_length);
        oprot.writeFieldEnd();
      }
      if (struct.isSetData_length()) {
        oprot.writeFieldBegin(DATA_LENGTH_FIELD_DESC);
        oprot.writeI64(struct.data_length);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_data_length()) {
        oprot.writeFieldBegin(MAX_DATA_LENGTH_FIELD_DESC);
        oprot.writeI64(struct.max_data_length);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIndex_length()) {
        oprot.writeFieldBegin(INDEX_LENGTH_FIELD_DESC);
        oprot.writeI64(struct.index_length);
        oprot.writeFieldEnd();
      }
      if (struct.isSetData_free()) {
        oprot.writeFieldBegin(DATA_FREE_FIELD_DESC);
        oprot.writeI64(struct.data_free);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAuto_increment()) {
        oprot.writeFieldBegin(AUTO_INCREMENT_FIELD_DESC);
        oprot.writeI64(struct.auto_increment);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreate_time()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.create_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.update_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheck_time()) {
        oprot.writeFieldBegin(CHECK_TIME_FIELD_DESC);
        oprot.writeI64(struct.check_time);
        oprot.writeFieldEnd();
      }
      if (struct.table_collation != null) {
        if (struct.isSetTable_collation()) {
          oprot.writeFieldBegin(TABLE_COLLATION_FIELD_DESC);
          oprot.writeString(struct.table_collation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetChecksum()) {
        oprot.writeFieldBegin(CHECKSUM_FIELD_DESC);
        oprot.writeI64(struct.checksum);
        oprot.writeFieldEnd();
      }
      if (struct.create_options != null) {
        if (struct.isSetCreate_options()) {
          oprot.writeFieldBegin(CREATE_OPTIONS_FIELD_DESC);
          oprot.writeString(struct.create_options);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_comment != null) {
        if (struct.isSetTable_comment()) {
          oprot.writeFieldBegin(TABLE_COMMENT_FIELD_DESC);
          oprot.writeString(struct.table_comment);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTableInfoTupleScheme getScheme() {
      return new TTableInfoTupleScheme();
    }
  }

  private static class TTableInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTableInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTable_catalog()) {
        optionals.set(0);
      }
      if (struct.isSetTable_schema()) {
        optionals.set(1);
      }
      if (struct.isSetTable_name()) {
        optionals.set(2);
      }
      if (struct.isSetTable_type()) {
        optionals.set(3);
      }
      if (struct.isSetEngine()) {
        optionals.set(4);
      }
      if (struct.isSetVersion()) {
        optionals.set(5);
      }
      if (struct.isSetRow_format()) {
        optionals.set(6);
      }
      if (struct.isSetTable_rows()) {
        optionals.set(7);
      }
      if (struct.isSetAvg_row_length()) {
        optionals.set(8);
      }
      if (struct.isSetData_length()) {
        optionals.set(9);
      }
      if (struct.isSetMax_data_length()) {
        optionals.set(10);
      }
      if (struct.isSetIndex_length()) {
        optionals.set(11);
      }
      if (struct.isSetData_free()) {
        optionals.set(12);
      }
      if (struct.isSetAuto_increment()) {
        optionals.set(13);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(14);
      }
      if (struct.isSetUpdate_time()) {
        optionals.set(15);
      }
      if (struct.isSetCheck_time()) {
        optionals.set(16);
      }
      if (struct.isSetTable_collation()) {
        optionals.set(17);
      }
      if (struct.isSetChecksum()) {
        optionals.set(18);
      }
      if (struct.isSetCreate_options()) {
        optionals.set(19);
      }
      if (struct.isSetTable_comment()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetTable_catalog()) {
        oprot.writeString(struct.table_catalog);
      }
      if (struct.isSetTable_schema()) {
        oprot.writeString(struct.table_schema);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetTable_type()) {
        oprot.writeString(struct.table_type);
      }
      if (struct.isSetEngine()) {
        oprot.writeString(struct.engine);
      }
      if (struct.isSetVersion()) {
        oprot.writeI64(struct.version);
      }
      if (struct.isSetRow_format()) {
        oprot.writeString(struct.row_format);
      }
      if (struct.isSetTable_rows()) {
        oprot.writeI64(struct.table_rows);
      }
      if (struct.isSetAvg_row_length()) {
        oprot.writeI64(struct.avg_row_length);
      }
      if (struct.isSetData_length()) {
        oprot.writeI64(struct.data_length);
      }
      if (struct.isSetMax_data_length()) {
        oprot.writeI64(struct.max_data_length);
      }
      if (struct.isSetIndex_length()) {
        oprot.writeI64(struct.index_length);
      }
      if (struct.isSetData_free()) {
        oprot.writeI64(struct.data_free);
      }
      if (struct.isSetAuto_increment()) {
        oprot.writeI64(struct.auto_increment);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeI64(struct.create_time);
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeI64(struct.update_time);
      }
      if (struct.isSetCheck_time()) {
        oprot.writeI64(struct.check_time);
      }
      if (struct.isSetTable_collation()) {
        oprot.writeString(struct.table_collation);
      }
      if (struct.isSetChecksum()) {
        oprot.writeI64(struct.checksum);
      }
      if (struct.isSetCreate_options()) {
        oprot.writeString(struct.create_options);
      }
      if (struct.isSetTable_comment()) {
        oprot.writeString(struct.table_comment);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.table_catalog = iprot.readString();
        struct.setTable_catalogIsSet(true);
      }
      if (incoming.get(1)) {
        struct.table_schema = iprot.readString();
        struct.setTable_schemaIsSet(true);
      }
      if (incoming.get(2)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.table_type = iprot.readString();
        struct.setTable_typeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.engine = iprot.readString();
        struct.setEngineIsSet(true);
      }
      if (incoming.get(5)) {
        struct.version = iprot.readI64();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.row_format = iprot.readString();
        struct.setRow_formatIsSet(true);
      }
      if (incoming.get(7)) {
        struct.table_rows = iprot.readI64();
        struct.setTable_rowsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.avg_row_length = iprot.readI64();
        struct.setAvg_row_lengthIsSet(true);
      }
      if (incoming.get(9)) {
        struct.data_length = iprot.readI64();
        struct.setData_lengthIsSet(true);
      }
      if (incoming.get(10)) {
        struct.max_data_length = iprot.readI64();
        struct.setMax_data_lengthIsSet(true);
      }
      if (incoming.get(11)) {
        struct.index_length = iprot.readI64();
        struct.setIndex_lengthIsSet(true);
      }
      if (incoming.get(12)) {
        struct.data_free = iprot.readI64();
        struct.setData_freeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.auto_increment = iprot.readI64();
        struct.setAuto_incrementIsSet(true);
      }
      if (incoming.get(14)) {
        struct.create_time = iprot.readI64();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.update_time = iprot.readI64();
        struct.setUpdate_timeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.check_time = iprot.readI64();
        struct.setCheck_timeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.table_collation = iprot.readString();
        struct.setTable_collationIsSet(true);
      }
      if (incoming.get(18)) {
        struct.checksum = iprot.readI64();
        struct.setChecksumIsSet(true);
      }
      if (incoming.get(19)) {
        struct.create_options = iprot.readString();
        struct.setCreate_optionsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.table_comment = iprot.readString();
        struct.setTable_commentIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

