/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TMiniLoadTxnCommitAttachment implements org.apache.thrift.TBase<TMiniLoadTxnCommitAttachment, TMiniLoadTxnCommitAttachment._Fields>, java.io.Serializable, Cloneable, Comparable<TMiniLoadTxnCommitAttachment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMiniLoadTxnCommitAttachment");

  private static final org.apache.thrift.protocol.TField LOADED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("loadedRows", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FILTERED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("filteredRows", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ERROR_LOG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("errorLogUrl", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMiniLoadTxnCommitAttachmentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMiniLoadTxnCommitAttachmentTupleSchemeFactory();

  public long loadedRows; // required
  public long filteredRows; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String errorLogUrl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOADED_ROWS((short)1, "loadedRows"),
    FILTERED_ROWS((short)2, "filteredRows"),
    ERROR_LOG_URL((short)3, "errorLogUrl");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOADED_ROWS
          return LOADED_ROWS;
        case 2: // FILTERED_ROWS
          return FILTERED_ROWS;
        case 3: // ERROR_LOG_URL
          return ERROR_LOG_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOADEDROWS_ISSET_ID = 0;
  private static final int __FILTEREDROWS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ERROR_LOG_URL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOADED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("loadedRows", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILTERED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("filteredRows", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERROR_LOG_URL, new org.apache.thrift.meta_data.FieldMetaData("errorLogUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMiniLoadTxnCommitAttachment.class, metaDataMap);
  }

  public TMiniLoadTxnCommitAttachment() {
  }

  public TMiniLoadTxnCommitAttachment(
    long loadedRows,
    long filteredRows)
  {
    this();
    this.loadedRows = loadedRows;
    setLoadedRowsIsSet(true);
    this.filteredRows = filteredRows;
    setFilteredRowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMiniLoadTxnCommitAttachment(TMiniLoadTxnCommitAttachment other) {
    __isset_bitfield = other.__isset_bitfield;
    this.loadedRows = other.loadedRows;
    this.filteredRows = other.filteredRows;
    if (other.isSetErrorLogUrl()) {
      this.errorLogUrl = other.errorLogUrl;
    }
  }

  @Override
  public TMiniLoadTxnCommitAttachment deepCopy() {
    return new TMiniLoadTxnCommitAttachment(this);
  }

  @Override
  public void clear() {
    setLoadedRowsIsSet(false);
    this.loadedRows = 0;
    setFilteredRowsIsSet(false);
    this.filteredRows = 0;
    this.errorLogUrl = null;
  }

  public long getLoadedRows() {
    return this.loadedRows;
  }

  public TMiniLoadTxnCommitAttachment setLoadedRows(long loadedRows) {
    this.loadedRows = loadedRows;
    setLoadedRowsIsSet(true);
    return this;
  }

  public void unsetLoadedRows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADEDROWS_ISSET_ID);
  }

  /** Returns true if field loadedRows is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadedRows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADEDROWS_ISSET_ID);
  }

  public void setLoadedRowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADEDROWS_ISSET_ID, value);
  }

  public long getFilteredRows() {
    return this.filteredRows;
  }

  public TMiniLoadTxnCommitAttachment setFilteredRows(long filteredRows) {
    this.filteredRows = filteredRows;
    setFilteredRowsIsSet(true);
    return this;
  }

  public void unsetFilteredRows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILTEREDROWS_ISSET_ID);
  }

  /** Returns true if field filteredRows is set (has been assigned a value) and false otherwise */
  public boolean isSetFilteredRows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILTEREDROWS_ISSET_ID);
  }

  public void setFilteredRowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILTEREDROWS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getErrorLogUrl() {
    return this.errorLogUrl;
  }

  public TMiniLoadTxnCommitAttachment setErrorLogUrl(@org.apache.thrift.annotation.Nullable java.lang.String errorLogUrl) {
    this.errorLogUrl = errorLogUrl;
    return this;
  }

  public void unsetErrorLogUrl() {
    this.errorLogUrl = null;
  }

  /** Returns true if field errorLogUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorLogUrl() {
    return this.errorLogUrl != null;
  }

  public void setErrorLogUrlIsSet(boolean value) {
    if (!value) {
      this.errorLogUrl = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LOADED_ROWS:
      if (value == null) {
        unsetLoadedRows();
      } else {
        setLoadedRows((java.lang.Long)value);
      }
      break;

    case FILTERED_ROWS:
      if (value == null) {
        unsetFilteredRows();
      } else {
        setFilteredRows((java.lang.Long)value);
      }
      break;

    case ERROR_LOG_URL:
      if (value == null) {
        unsetErrorLogUrl();
      } else {
        setErrorLogUrl((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LOADED_ROWS:
      return getLoadedRows();

    case FILTERED_ROWS:
      return getFilteredRows();

    case ERROR_LOG_URL:
      return getErrorLogUrl();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LOADED_ROWS:
      return isSetLoadedRows();
    case FILTERED_ROWS:
      return isSetFilteredRows();
    case ERROR_LOG_URL:
      return isSetErrorLogUrl();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TMiniLoadTxnCommitAttachment)
      return this.equals((TMiniLoadTxnCommitAttachment)that);
    return false;
  }

  public boolean equals(TMiniLoadTxnCommitAttachment that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_loadedRows = true;
    boolean that_present_loadedRows = true;
    if (this_present_loadedRows || that_present_loadedRows) {
      if (!(this_present_loadedRows && that_present_loadedRows))
        return false;
      if (this.loadedRows != that.loadedRows)
        return false;
    }

    boolean this_present_filteredRows = true;
    boolean that_present_filteredRows = true;
    if (this_present_filteredRows || that_present_filteredRows) {
      if (!(this_present_filteredRows && that_present_filteredRows))
        return false;
      if (this.filteredRows != that.filteredRows)
        return false;
    }

    boolean this_present_errorLogUrl = true && this.isSetErrorLogUrl();
    boolean that_present_errorLogUrl = true && that.isSetErrorLogUrl();
    if (this_present_errorLogUrl || that_present_errorLogUrl) {
      if (!(this_present_errorLogUrl && that_present_errorLogUrl))
        return false;
      if (!this.errorLogUrl.equals(that.errorLogUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loadedRows);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(filteredRows);

    hashCode = hashCode * 8191 + ((isSetErrorLogUrl()) ? 131071 : 524287);
    if (isSetErrorLogUrl())
      hashCode = hashCode * 8191 + errorLogUrl.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TMiniLoadTxnCommitAttachment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLoadedRows(), other.isSetLoadedRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadedRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadedRows, other.loadedRows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFilteredRows(), other.isSetFilteredRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilteredRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filteredRows, other.filteredRows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetErrorLogUrl(), other.isSetErrorLogUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorLogUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorLogUrl, other.errorLogUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMiniLoadTxnCommitAttachment(");
    boolean first = true;

    sb.append("loadedRows:");
    sb.append(this.loadedRows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("filteredRows:");
    sb.append(this.filteredRows);
    first = false;
    if (isSetErrorLogUrl()) {
      if (!first) sb.append(", ");
      sb.append("errorLogUrl:");
      if (this.errorLogUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.errorLogUrl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'loadedRows' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'filteredRows' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMiniLoadTxnCommitAttachmentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMiniLoadTxnCommitAttachmentStandardScheme getScheme() {
      return new TMiniLoadTxnCommitAttachmentStandardScheme();
    }
  }

  private static class TMiniLoadTxnCommitAttachmentStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMiniLoadTxnCommitAttachment> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TMiniLoadTxnCommitAttachment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOADED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loadedRows = iprot.readI64();
              struct.setLoadedRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILTERED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.filteredRows = iprot.readI64();
              struct.setFilteredRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERROR_LOG_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorLogUrl = iprot.readString();
              struct.setErrorLogUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLoadedRows()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'loadedRows' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFilteredRows()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'filteredRows' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TMiniLoadTxnCommitAttachment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOADED_ROWS_FIELD_DESC);
      oprot.writeI64(struct.loadedRows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILTERED_ROWS_FIELD_DESC);
      oprot.writeI64(struct.filteredRows);
      oprot.writeFieldEnd();
      if (struct.errorLogUrl != null) {
        if (struct.isSetErrorLogUrl()) {
          oprot.writeFieldBegin(ERROR_LOG_URL_FIELD_DESC);
          oprot.writeString(struct.errorLogUrl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMiniLoadTxnCommitAttachmentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMiniLoadTxnCommitAttachmentTupleScheme getScheme() {
      return new TMiniLoadTxnCommitAttachmentTupleScheme();
    }
  }

  private static class TMiniLoadTxnCommitAttachmentTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMiniLoadTxnCommitAttachment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMiniLoadTxnCommitAttachment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.loadedRows);
      oprot.writeI64(struct.filteredRows);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetErrorLogUrl()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetErrorLogUrl()) {
        oprot.writeString(struct.errorLogUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMiniLoadTxnCommitAttachment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.loadedRows = iprot.readI64();
      struct.setLoadedRowsIsSet(true);
      struct.filteredRows = iprot.readI64();
      struct.setFilteredRowsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.errorLogUrl = iprot.readString();
        struct.setErrorLogUrlIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

