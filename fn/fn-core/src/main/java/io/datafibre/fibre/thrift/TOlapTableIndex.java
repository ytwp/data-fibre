/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TOlapTableIndex implements org.apache.thrift.TBase<TOlapTableIndex, TOlapTableIndex._Fields>, java.io.Serializable, Cloneable, Comparable<TOlapTableIndex> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOlapTableIndex");

  private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("index_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField INDEX_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("index_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INDEX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("index_id", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField COMMON_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("common_properties", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField INDEX_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("index_properties", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField SEARCH_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("search_properties", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField EXTRA_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("extra_properties", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TOlapTableIndexStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TOlapTableIndexTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String index_name; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columns; // optional
  /**
   * 
   * @see TIndexType
   */
  public @org.apache.thrift.annotation.Nullable TIndexType index_type; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String comment; // optional
  public long index_id; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> common_properties; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> index_properties; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> search_properties; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extra_properties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX_NAME((short)1, "index_name"),
    COLUMNS((short)2, "columns"),
    /**
     * 
     * @see TIndexType
     */
    INDEX_TYPE((short)3, "index_type"),
    COMMENT((short)4, "comment"),
    INDEX_ID((short)5, "index_id"),
    COMMON_PROPERTIES((short)6, "common_properties"),
    INDEX_PROPERTIES((short)7, "index_properties"),
    SEARCH_PROPERTIES((short)8, "search_properties"),
    EXTRA_PROPERTIES((short)9, "extra_properties");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX_NAME
          return INDEX_NAME;
        case 2: // COLUMNS
          return COLUMNS;
        case 3: // INDEX_TYPE
          return INDEX_TYPE;
        case 4: // COMMENT
          return COMMENT;
        case 5: // INDEX_ID
          return INDEX_ID;
        case 6: // COMMON_PROPERTIES
          return COMMON_PROPERTIES;
        case 7: // INDEX_PROPERTIES
          return INDEX_PROPERTIES;
        case 8: // SEARCH_PROPERTIES
          return SEARCH_PROPERTIES;
        case 9: // EXTRA_PROPERTIES
          return EXTRA_PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INDEX_NAME,_Fields.COLUMNS,_Fields.INDEX_TYPE,_Fields.COMMENT,_Fields.INDEX_ID,_Fields.COMMON_PROPERTIES,_Fields.INDEX_PROPERTIES,_Fields.SEARCH_PROPERTIES,_Fields.EXTRA_PROPERTIES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("index_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INDEX_TYPE, new org.apache.thrift.meta_data.FieldMetaData("index_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TIndexType.class)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDEX_ID, new org.apache.thrift.meta_data.FieldMetaData("index_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMON_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("common_properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INDEX_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("index_properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SEARCH_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("search_properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXTRA_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("extra_properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOlapTableIndex.class, metaDataMap);
  }

  public TOlapTableIndex() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOlapTableIndex(TOlapTableIndex other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIndex_name()) {
      this.index_name = other.index_name;
    }
    if (other.isSetColumns()) {
      java.util.List<java.lang.String> __this__columns = new java.util.ArrayList<java.lang.String>(other.columns);
      this.columns = __this__columns;
    }
    if (other.isSetIndex_type()) {
      this.index_type = other.index_type;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    this.index_id = other.index_id;
    if (other.isSetCommon_properties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__common_properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.common_properties);
      this.common_properties = __this__common_properties;
    }
    if (other.isSetIndex_properties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__index_properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.index_properties);
      this.index_properties = __this__index_properties;
    }
    if (other.isSetSearch_properties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__search_properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.search_properties);
      this.search_properties = __this__search_properties;
    }
    if (other.isSetExtra_properties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__extra_properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.extra_properties);
      this.extra_properties = __this__extra_properties;
    }
  }

  @Override
  public TOlapTableIndex deepCopy() {
    return new TOlapTableIndex(this);
  }

  @Override
  public void clear() {
    this.index_name = null;
    this.columns = null;
    this.index_type = null;
    this.comment = null;
    setIndex_idIsSet(false);
    this.index_id = 0;
    this.common_properties = null;
    this.index_properties = null;
    this.search_properties = null;
    this.extra_properties = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIndex_name() {
    return this.index_name;
  }

  public TOlapTableIndex setIndex_name(@org.apache.thrift.annotation.Nullable java.lang.String index_name) {
    this.index_name = index_name;
    return this;
  }

  public void unsetIndex_name() {
    this.index_name = null;
  }

  /** Returns true if field index_name is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_name() {
    return this.index_name != null;
  }

  public void setIndex_nameIsSet(boolean value) {
    if (!value) {
      this.index_name = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(java.lang.String elem) {
    if (this.columns == null) {
      this.columns = new java.util.ArrayList<java.lang.String>();
    }
    this.columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getColumns() {
    return this.columns;
  }

  public TOlapTableIndex setColumns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  /**
   * 
   * @see TIndexType
   */
  @org.apache.thrift.annotation.Nullable
  public TIndexType getIndex_type() {
    return this.index_type;
  }

  /**
   * 
   * @see TIndexType
   */
  public TOlapTableIndex setIndex_type(@org.apache.thrift.annotation.Nullable TIndexType index_type) {
    this.index_type = index_type;
    return this;
  }

  public void unsetIndex_type() {
    this.index_type = null;
  }

  /** Returns true if field index_type is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_type() {
    return this.index_type != null;
  }

  public void setIndex_typeIsSet(boolean value) {
    if (!value) {
      this.index_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getComment() {
    return this.comment;
  }

  public TOlapTableIndex setComment(@org.apache.thrift.annotation.Nullable java.lang.String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public long getIndex_id() {
    return this.index_id;
  }

  public TOlapTableIndex setIndex_id(long index_id) {
    this.index_id = index_id;
    setIndex_idIsSet(true);
    return this;
  }

  public void unsetIndex_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_ID_ISSET_ID);
  }

  /** Returns true if field index_id is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_ID_ISSET_ID);
  }

  public void setIndex_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_ID_ISSET_ID, value);
  }

  public int getCommon_propertiesSize() {
    return (this.common_properties == null) ? 0 : this.common_properties.size();
  }

  public void putToCommon_properties(java.lang.String key, java.lang.String val) {
    if (this.common_properties == null) {
      this.common_properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.common_properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getCommon_properties() {
    return this.common_properties;
  }

  public TOlapTableIndex setCommon_properties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> common_properties) {
    this.common_properties = common_properties;
    return this;
  }

  public void unsetCommon_properties() {
    this.common_properties = null;
  }

  /** Returns true if field common_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetCommon_properties() {
    return this.common_properties != null;
  }

  public void setCommon_propertiesIsSet(boolean value) {
    if (!value) {
      this.common_properties = null;
    }
  }

  public int getIndex_propertiesSize() {
    return (this.index_properties == null) ? 0 : this.index_properties.size();
  }

  public void putToIndex_properties(java.lang.String key, java.lang.String val) {
    if (this.index_properties == null) {
      this.index_properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.index_properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getIndex_properties() {
    return this.index_properties;
  }

  public TOlapTableIndex setIndex_properties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> index_properties) {
    this.index_properties = index_properties;
    return this;
  }

  public void unsetIndex_properties() {
    this.index_properties = null;
  }

  /** Returns true if field index_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_properties() {
    return this.index_properties != null;
  }

  public void setIndex_propertiesIsSet(boolean value) {
    if (!value) {
      this.index_properties = null;
    }
  }

  public int getSearch_propertiesSize() {
    return (this.search_properties == null) ? 0 : this.search_properties.size();
  }

  public void putToSearch_properties(java.lang.String key, java.lang.String val) {
    if (this.search_properties == null) {
      this.search_properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.search_properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getSearch_properties() {
    return this.search_properties;
  }

  public TOlapTableIndex setSearch_properties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> search_properties) {
    this.search_properties = search_properties;
    return this;
  }

  public void unsetSearch_properties() {
    this.search_properties = null;
  }

  /** Returns true if field search_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetSearch_properties() {
    return this.search_properties != null;
  }

  public void setSearch_propertiesIsSet(boolean value) {
    if (!value) {
      this.search_properties = null;
    }
  }

  public int getExtra_propertiesSize() {
    return (this.extra_properties == null) ? 0 : this.extra_properties.size();
  }

  public void putToExtra_properties(java.lang.String key, java.lang.String val) {
    if (this.extra_properties == null) {
      this.extra_properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.extra_properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getExtra_properties() {
    return this.extra_properties;
  }

  public TOlapTableIndex setExtra_properties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extra_properties) {
    this.extra_properties = extra_properties;
    return this;
  }

  public void unsetExtra_properties() {
    this.extra_properties = null;
  }

  /** Returns true if field extra_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra_properties() {
    return this.extra_properties != null;
  }

  public void setExtra_propertiesIsSet(boolean value) {
    if (!value) {
      this.extra_properties = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case INDEX_NAME:
      if (value == null) {
        unsetIndex_name();
      } else {
        setIndex_name((java.lang.String)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((java.util.List<java.lang.String>)value);
      }
      break;

    case INDEX_TYPE:
      if (value == null) {
        unsetIndex_type();
      } else {
        setIndex_type((TIndexType)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((java.lang.String)value);
      }
      break;

    case INDEX_ID:
      if (value == null) {
        unsetIndex_id();
      } else {
        setIndex_id((java.lang.Long)value);
      }
      break;

    case COMMON_PROPERTIES:
      if (value == null) {
        unsetCommon_properties();
      } else {
        setCommon_properties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case INDEX_PROPERTIES:
      if (value == null) {
        unsetIndex_properties();
      } else {
        setIndex_properties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case SEARCH_PROPERTIES:
      if (value == null) {
        unsetSearch_properties();
      } else {
        setSearch_properties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case EXTRA_PROPERTIES:
      if (value == null) {
        unsetExtra_properties();
      } else {
        setExtra_properties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX_NAME:
      return getIndex_name();

    case COLUMNS:
      return getColumns();

    case INDEX_TYPE:
      return getIndex_type();

    case COMMENT:
      return getComment();

    case INDEX_ID:
      return getIndex_id();

    case COMMON_PROPERTIES:
      return getCommon_properties();

    case INDEX_PROPERTIES:
      return getIndex_properties();

    case SEARCH_PROPERTIES:
      return getSearch_properties();

    case EXTRA_PROPERTIES:
      return getExtra_properties();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INDEX_NAME:
      return isSetIndex_name();
    case COLUMNS:
      return isSetColumns();
    case INDEX_TYPE:
      return isSetIndex_type();
    case COMMENT:
      return isSetComment();
    case INDEX_ID:
      return isSetIndex_id();
    case COMMON_PROPERTIES:
      return isSetCommon_properties();
    case INDEX_PROPERTIES:
      return isSetIndex_properties();
    case SEARCH_PROPERTIES:
      return isSetSearch_properties();
    case EXTRA_PROPERTIES:
      return isSetExtra_properties();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TOlapTableIndex)
      return this.equals((TOlapTableIndex)that);
    return false;
  }

  public boolean equals(TOlapTableIndex that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_index_name = true && this.isSetIndex_name();
    boolean that_present_index_name = true && that.isSetIndex_name();
    if (this_present_index_name || that_present_index_name) {
      if (!(this_present_index_name && that_present_index_name))
        return false;
      if (!this.index_name.equals(that.index_name))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_index_type = true && this.isSetIndex_type();
    boolean that_present_index_type = true && that.isSetIndex_type();
    if (this_present_index_type || that_present_index_type) {
      if (!(this_present_index_type && that_present_index_type))
        return false;
      if (!this.index_type.equals(that.index_type))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_index_id = true && this.isSetIndex_id();
    boolean that_present_index_id = true && that.isSetIndex_id();
    if (this_present_index_id || that_present_index_id) {
      if (!(this_present_index_id && that_present_index_id))
        return false;
      if (this.index_id != that.index_id)
        return false;
    }

    boolean this_present_common_properties = true && this.isSetCommon_properties();
    boolean that_present_common_properties = true && that.isSetCommon_properties();
    if (this_present_common_properties || that_present_common_properties) {
      if (!(this_present_common_properties && that_present_common_properties))
        return false;
      if (!this.common_properties.equals(that.common_properties))
        return false;
    }

    boolean this_present_index_properties = true && this.isSetIndex_properties();
    boolean that_present_index_properties = true && that.isSetIndex_properties();
    if (this_present_index_properties || that_present_index_properties) {
      if (!(this_present_index_properties && that_present_index_properties))
        return false;
      if (!this.index_properties.equals(that.index_properties))
        return false;
    }

    boolean this_present_search_properties = true && this.isSetSearch_properties();
    boolean that_present_search_properties = true && that.isSetSearch_properties();
    if (this_present_search_properties || that_present_search_properties) {
      if (!(this_present_search_properties && that_present_search_properties))
        return false;
      if (!this.search_properties.equals(that.search_properties))
        return false;
    }

    boolean this_present_extra_properties = true && this.isSetExtra_properties();
    boolean that_present_extra_properties = true && that.isSetExtra_properties();
    if (this_present_extra_properties || that_present_extra_properties) {
      if (!(this_present_extra_properties && that_present_extra_properties))
        return false;
      if (!this.extra_properties.equals(that.extra_properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIndex_name()) ? 131071 : 524287);
    if (isSetIndex_name())
      hashCode = hashCode * 8191 + index_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
    if (isSetColumns())
      hashCode = hashCode * 8191 + columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetIndex_type()) ? 131071 : 524287);
    if (isSetIndex_type())
      hashCode = hashCode * 8191 + index_type.getValue();

    hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
    if (isSetComment())
      hashCode = hashCode * 8191 + comment.hashCode();

    hashCode = hashCode * 8191 + ((isSetIndex_id()) ? 131071 : 524287);
    if (isSetIndex_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(index_id);

    hashCode = hashCode * 8191 + ((isSetCommon_properties()) ? 131071 : 524287);
    if (isSetCommon_properties())
      hashCode = hashCode * 8191 + common_properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetIndex_properties()) ? 131071 : 524287);
    if (isSetIndex_properties())
      hashCode = hashCode * 8191 + index_properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetSearch_properties()) ? 131071 : 524287);
    if (isSetSearch_properties())
      hashCode = hashCode * 8191 + search_properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtra_properties()) ? 131071 : 524287);
    if (isSetExtra_properties())
      hashCode = hashCode * 8191 + extra_properties.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TOlapTableIndex other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetIndex_name(), other.isSetIndex_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_name, other.index_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIndex_type(), other.isSetIndex_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_type, other.index_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetComment(), other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIndex_id(), other.isSetIndex_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_id, other.index_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCommon_properties(), other.isSetCommon_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommon_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.common_properties, other.common_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIndex_properties(), other.isSetIndex_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_properties, other.index_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSearch_properties(), other.isSetSearch_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearch_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.search_properties, other.search_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtra_properties(), other.isSetExtra_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra_properties, other.extra_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TOlapTableIndex(");
    boolean first = true;

    if (isSetIndex_name()) {
      sb.append("index_name:");
      if (this.index_name == null) {
        sb.append("null");
      } else {
        sb.append(this.index_name);
      }
      first = false;
    }
    if (isSetColumns()) {
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
    }
    if (isSetIndex_type()) {
      if (!first) sb.append(", ");
      sb.append("index_type:");
      if (this.index_type == null) {
        sb.append("null");
      } else {
        sb.append(this.index_type);
      }
      first = false;
    }
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    if (isSetIndex_id()) {
      if (!first) sb.append(", ");
      sb.append("index_id:");
      sb.append(this.index_id);
      first = false;
    }
    if (isSetCommon_properties()) {
      if (!first) sb.append(", ");
      sb.append("common_properties:");
      if (this.common_properties == null) {
        sb.append("null");
      } else {
        sb.append(this.common_properties);
      }
      first = false;
    }
    if (isSetIndex_properties()) {
      if (!first) sb.append(", ");
      sb.append("index_properties:");
      if (this.index_properties == null) {
        sb.append("null");
      } else {
        sb.append(this.index_properties);
      }
      first = false;
    }
    if (isSetSearch_properties()) {
      if (!first) sb.append(", ");
      sb.append("search_properties:");
      if (this.search_properties == null) {
        sb.append("null");
      } else {
        sb.append(this.search_properties);
      }
      first = false;
    }
    if (isSetExtra_properties()) {
      if (!first) sb.append(", ");
      sb.append("extra_properties:");
      if (this.extra_properties == null) {
        sb.append("null");
      } else {
        sb.append(this.extra_properties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOlapTableIndexStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapTableIndexStandardScheme getScheme() {
      return new TOlapTableIndexStandardScheme();
    }
  }

  private static class TOlapTableIndexStandardScheme extends org.apache.thrift.scheme.StandardScheme<TOlapTableIndex> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TOlapTableIndex struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INDEX_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.index_name = iprot.readString();
              struct.setIndex_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                struct.columns = new java.util.ArrayList<java.lang.String>(_list120.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem121;
                for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                {
                  _elem121 = iprot.readString();
                  struct.columns.add(_elem121);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INDEX_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.index_type = com.starrocks.thrift.TIndexType.findByValue(iprot.readI32());
              struct.setIndex_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INDEX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.index_id = iprot.readI64();
              struct.setIndex_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMON_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map123 = iprot.readMapBegin();
                struct.common_properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map123.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key124;
                @org.apache.thrift.annotation.Nullable java.lang.String _val125;
                for (int _i126 = 0; _i126 < _map123.size; ++_i126)
                {
                  _key124 = iprot.readString();
                  _val125 = iprot.readString();
                  struct.common_properties.put(_key124, _val125);
                }
                iprot.readMapEnd();
              }
              struct.setCommon_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INDEX_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map127 = iprot.readMapBegin();
                struct.index_properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map127.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key128;
                @org.apache.thrift.annotation.Nullable java.lang.String _val129;
                for (int _i130 = 0; _i130 < _map127.size; ++_i130)
                {
                  _key128 = iprot.readString();
                  _val129 = iprot.readString();
                  struct.index_properties.put(_key128, _val129);
                }
                iprot.readMapEnd();
              }
              struct.setIndex_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SEARCH_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map131 = iprot.readMapBegin();
                struct.search_properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map131.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key132;
                @org.apache.thrift.annotation.Nullable java.lang.String _val133;
                for (int _i134 = 0; _i134 < _map131.size; ++_i134)
                {
                  _key132 = iprot.readString();
                  _val133 = iprot.readString();
                  struct.search_properties.put(_key132, _val133);
                }
                iprot.readMapEnd();
              }
              struct.setSearch_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXTRA_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map135 = iprot.readMapBegin();
                struct.extra_properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map135.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key136;
                @org.apache.thrift.annotation.Nullable java.lang.String _val137;
                for (int _i138 = 0; _i138 < _map135.size; ++_i138)
                {
                  _key136 = iprot.readString();
                  _val137 = iprot.readString();
                  struct.extra_properties.put(_key136, _val137);
                }
                iprot.readMapEnd();
              }
              struct.setExtra_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TOlapTableIndex struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.index_name != null) {
        if (struct.isSetIndex_name()) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.index_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columns != null) {
        if (struct.isSetColumns()) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columns.size()));
            for (java.lang.String _iter139 : struct.columns)
            {
              oprot.writeString(_iter139);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.index_type != null) {
        if (struct.isSetIndex_type()) {
          oprot.writeFieldBegin(INDEX_TYPE_FIELD_DESC);
          oprot.writeI32(struct.index_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIndex_id()) {
        oprot.writeFieldBegin(INDEX_ID_FIELD_DESC);
        oprot.writeI64(struct.index_id);
        oprot.writeFieldEnd();
      }
      if (struct.common_properties != null) {
        if (struct.isSetCommon_properties()) {
          oprot.writeFieldBegin(COMMON_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.common_properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter140 : struct.common_properties.entrySet())
            {
              oprot.writeString(_iter140.getKey());
              oprot.writeString(_iter140.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.index_properties != null) {
        if (struct.isSetIndex_properties()) {
          oprot.writeFieldBegin(INDEX_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.index_properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter141 : struct.index_properties.entrySet())
            {
              oprot.writeString(_iter141.getKey());
              oprot.writeString(_iter141.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.search_properties != null) {
        if (struct.isSetSearch_properties()) {
          oprot.writeFieldBegin(SEARCH_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.search_properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter142 : struct.search_properties.entrySet())
            {
              oprot.writeString(_iter142.getKey());
              oprot.writeString(_iter142.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.extra_properties != null) {
        if (struct.isSetExtra_properties()) {
          oprot.writeFieldBegin(EXTRA_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extra_properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter143 : struct.extra_properties.entrySet())
            {
              oprot.writeString(_iter143.getKey());
              oprot.writeString(_iter143.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOlapTableIndexTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapTableIndexTupleScheme getScheme() {
      return new TOlapTableIndexTupleScheme();
    }
  }

  private static class TOlapTableIndexTupleScheme extends org.apache.thrift.scheme.TupleScheme<TOlapTableIndex> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOlapTableIndex struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIndex_name()) {
        optionals.set(0);
      }
      if (struct.isSetColumns()) {
        optionals.set(1);
      }
      if (struct.isSetIndex_type()) {
        optionals.set(2);
      }
      if (struct.isSetComment()) {
        optionals.set(3);
      }
      if (struct.isSetIndex_id()) {
        optionals.set(4);
      }
      if (struct.isSetCommon_properties()) {
        optionals.set(5);
      }
      if (struct.isSetIndex_properties()) {
        optionals.set(6);
      }
      if (struct.isSetSearch_properties()) {
        optionals.set(7);
      }
      if (struct.isSetExtra_properties()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetIndex_name()) {
        oprot.writeString(struct.index_name);
      }
      if (struct.isSetColumns()) {
        {
          oprot.writeI32(struct.columns.size());
          for (java.lang.String _iter144 : struct.columns)
          {
            oprot.writeString(_iter144);
          }
        }
      }
      if (struct.isSetIndex_type()) {
        oprot.writeI32(struct.index_type.getValue());
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetIndex_id()) {
        oprot.writeI64(struct.index_id);
      }
      if (struct.isSetCommon_properties()) {
        {
          oprot.writeI32(struct.common_properties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter145 : struct.common_properties.entrySet())
          {
            oprot.writeString(_iter145.getKey());
            oprot.writeString(_iter145.getValue());
          }
        }
      }
      if (struct.isSetIndex_properties()) {
        {
          oprot.writeI32(struct.index_properties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter146 : struct.index_properties.entrySet())
          {
            oprot.writeString(_iter146.getKey());
            oprot.writeString(_iter146.getValue());
          }
        }
      }
      if (struct.isSetSearch_properties()) {
        {
          oprot.writeI32(struct.search_properties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter147 : struct.search_properties.entrySet())
          {
            oprot.writeString(_iter147.getKey());
            oprot.writeString(_iter147.getValue());
          }
        }
      }
      if (struct.isSetExtra_properties()) {
        {
          oprot.writeI32(struct.extra_properties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter148 : struct.extra_properties.entrySet())
          {
            oprot.writeString(_iter148.getKey());
            oprot.writeString(_iter148.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOlapTableIndex struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.index_name = iprot.readString();
        struct.setIndex_nameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list149 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.columns = new java.util.ArrayList<java.lang.String>(_list149.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem150;
          for (int _i151 = 0; _i151 < _list149.size; ++_i151)
          {
            _elem150 = iprot.readString();
            struct.columns.add(_elem150);
          }
        }
        struct.setColumnsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.index_type = com.starrocks.thrift.TIndexType.findByValue(iprot.readI32());
        struct.setIndex_typeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.index_id = iprot.readI64();
        struct.setIndex_idIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map152 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.common_properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map152.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key153;
          @org.apache.thrift.annotation.Nullable java.lang.String _val154;
          for (int _i155 = 0; _i155 < _map152.size; ++_i155)
          {
            _key153 = iprot.readString();
            _val154 = iprot.readString();
            struct.common_properties.put(_key153, _val154);
          }
        }
        struct.setCommon_propertiesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map156 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.index_properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map156.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key157;
          @org.apache.thrift.annotation.Nullable java.lang.String _val158;
          for (int _i159 = 0; _i159 < _map156.size; ++_i159)
          {
            _key157 = iprot.readString();
            _val158 = iprot.readString();
            struct.index_properties.put(_key157, _val158);
          }
        }
        struct.setIndex_propertiesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map160 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.search_properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map160.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key161;
          @org.apache.thrift.annotation.Nullable java.lang.String _val162;
          for (int _i163 = 0; _i163 < _map160.size; ++_i163)
          {
            _key161 = iprot.readString();
            _val162 = iprot.readString();
            struct.search_properties.put(_key161, _val162);
          }
        }
        struct.setSearch_propertiesIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map164 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.extra_properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map164.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key165;
          @org.apache.thrift.annotation.Nullable java.lang.String _val166;
          for (int _i167 = 0; _i167 < _map164.size; ++_i167)
          {
            _key165 = iprot.readString();
            _val166 = iprot.readString();
            struct.extra_properties.put(_key165, _val166);
          }
        }
        struct.setExtra_propertiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

