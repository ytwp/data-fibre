/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TOlapScanNode implements org.apache.thrift.TBase<TOlapScanNode, TOlapScanNode._Fields>, java.io.Serializable, Cloneable, Comparable<TOlapScanNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOlapScanNode");

  private static final org.apache.thrift.protocol.TField TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("key_column_name", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField KEY_COLUMN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("key_column_type", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField IS_PREAGGREGATION_FIELD_DESC = new org.apache.thrift.protocol.TField("is_preaggregation", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField SORT_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_column", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ROLLUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("rollup_name", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField SQL_PREDICATES_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_predicates", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ENABLE_COLUMN_EXPR_PREDICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_column_expr_predicate", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField DICT_STRING_ID_TO_INT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("dict_string_id_to_int_ids", org.apache.thrift.protocol.TType.MAP, (short)23);
  private static final org.apache.thrift.protocol.TField UNUSED_OUTPUT_COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("unused_output_column_name", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField SORTED_BY_KEYS_PER_TABLET_FIELD_DESC = new org.apache.thrift.protocol.TField("sorted_by_keys_per_tablet", org.apache.thrift.protocol.TType.BOOL, (short)25);
  private static final org.apache.thrift.protocol.TField BUCKET_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("bucket_exprs", org.apache.thrift.protocol.TType.LIST, (short)26);
  private static final org.apache.thrift.protocol.TField SORT_KEY_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_key_column_names", org.apache.thrift.protocol.TType.LIST, (short)27);
  private static final org.apache.thrift.protocol.TField MAX_PARALLEL_SCAN_INSTANCE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("max_parallel_scan_instance_num", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField COLUMN_ACCESS_PATHS_FIELD_DESC = new org.apache.thrift.protocol.TField("column_access_paths", org.apache.thrift.protocol.TType.LIST, (short)29);
  private static final org.apache.thrift.protocol.TField USE_PK_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("use_pk_index", org.apache.thrift.protocol.TType.BOOL, (short)30);
  private static final org.apache.thrift.protocol.TField COLUMNS_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("columns_desc", org.apache.thrift.protocol.TType.LIST, (short)31);
  private static final org.apache.thrift.protocol.TField OUTPUT_CHUNK_BY_BUCKET_FIELD_DESC = new org.apache.thrift.protocol.TField("output_chunk_by_bucket", org.apache.thrift.protocol.TType.BOOL, (short)32);
  private static final org.apache.thrift.protocol.TField OUTPUT_ASC_HINT_FIELD_DESC = new org.apache.thrift.protocol.TField("output_asc_hint", org.apache.thrift.protocol.TType.BOOL, (short)33);
  private static final org.apache.thrift.protocol.TField PARTITION_ORDER_HINT_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_order_hint", org.apache.thrift.protocol.TType.BOOL, (short)34);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TOlapScanNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TOlapScanNodeTupleSchemeFactory();

  public int tuple_id; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> key_column_name; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TPrimitiveType> key_column_type; // required
  public boolean is_preaggregation; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String sort_column; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String rollup_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sql_predicates; // optional
  public boolean enable_column_expr_predicate; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> dict_string_id_to_int_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> unused_output_column_name; // optional
  public boolean sorted_by_keys_per_tablet; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> bucket_exprs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> sort_key_column_names; // optional
  public int max_parallel_scan_instance_num; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TColumnAccessPath> column_access_paths; // optional
  public boolean use_pk_index; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TColumn> columns_desc; // optional
  public boolean output_chunk_by_bucket; // optional
  public boolean output_asc_hint; // optional
  public boolean partition_order_hint; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TUPLE_ID((short)1, "tuple_id"),
    KEY_COLUMN_NAME((short)2, "key_column_name"),
    KEY_COLUMN_TYPE((short)3, "key_column_type"),
    IS_PREAGGREGATION((short)4, "is_preaggregation"),
    SORT_COLUMN((short)5, "sort_column"),
    ROLLUP_NAME((short)20, "rollup_name"),
    SQL_PREDICATES((short)21, "sql_predicates"),
    ENABLE_COLUMN_EXPR_PREDICATE((short)22, "enable_column_expr_predicate"),
    DICT_STRING_ID_TO_INT_IDS((short)23, "dict_string_id_to_int_ids"),
    UNUSED_OUTPUT_COLUMN_NAME((short)24, "unused_output_column_name"),
    SORTED_BY_KEYS_PER_TABLET((short)25, "sorted_by_keys_per_tablet"),
    BUCKET_EXPRS((short)26, "bucket_exprs"),
    SORT_KEY_COLUMN_NAMES((short)27, "sort_key_column_names"),
    MAX_PARALLEL_SCAN_INSTANCE_NUM((short)28, "max_parallel_scan_instance_num"),
    COLUMN_ACCESS_PATHS((short)29, "column_access_paths"),
    USE_PK_INDEX((short)30, "use_pk_index"),
    COLUMNS_DESC((short)31, "columns_desc"),
    OUTPUT_CHUNK_BY_BUCKET((short)32, "output_chunk_by_bucket"),
    OUTPUT_ASC_HINT((short)33, "output_asc_hint"),
    PARTITION_ORDER_HINT((short)34, "partition_order_hint");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TUPLE_ID
          return TUPLE_ID;
        case 2: // KEY_COLUMN_NAME
          return KEY_COLUMN_NAME;
        case 3: // KEY_COLUMN_TYPE
          return KEY_COLUMN_TYPE;
        case 4: // IS_PREAGGREGATION
          return IS_PREAGGREGATION;
        case 5: // SORT_COLUMN
          return SORT_COLUMN;
        case 20: // ROLLUP_NAME
          return ROLLUP_NAME;
        case 21: // SQL_PREDICATES
          return SQL_PREDICATES;
        case 22: // ENABLE_COLUMN_EXPR_PREDICATE
          return ENABLE_COLUMN_EXPR_PREDICATE;
        case 23: // DICT_STRING_ID_TO_INT_IDS
          return DICT_STRING_ID_TO_INT_IDS;
        case 24: // UNUSED_OUTPUT_COLUMN_NAME
          return UNUSED_OUTPUT_COLUMN_NAME;
        case 25: // SORTED_BY_KEYS_PER_TABLET
          return SORTED_BY_KEYS_PER_TABLET;
        case 26: // BUCKET_EXPRS
          return BUCKET_EXPRS;
        case 27: // SORT_KEY_COLUMN_NAMES
          return SORT_KEY_COLUMN_NAMES;
        case 28: // MAX_PARALLEL_SCAN_INSTANCE_NUM
          return MAX_PARALLEL_SCAN_INSTANCE_NUM;
        case 29: // COLUMN_ACCESS_PATHS
          return COLUMN_ACCESS_PATHS;
        case 30: // USE_PK_INDEX
          return USE_PK_INDEX;
        case 31: // COLUMNS_DESC
          return COLUMNS_DESC;
        case 32: // OUTPUT_CHUNK_BY_BUCKET
          return OUTPUT_CHUNK_BY_BUCKET;
        case 33: // OUTPUT_ASC_HINT
          return OUTPUT_ASC_HINT;
        case 34: // PARTITION_ORDER_HINT
          return PARTITION_ORDER_HINT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TUPLE_ID_ISSET_ID = 0;
  private static final int __IS_PREAGGREGATION_ISSET_ID = 1;
  private static final int __ENABLE_COLUMN_EXPR_PREDICATE_ISSET_ID = 2;
  private static final int __SORTED_BY_KEYS_PER_TABLET_ISSET_ID = 3;
  private static final int __MAX_PARALLEL_SCAN_INSTANCE_NUM_ISSET_ID = 4;
  private static final int __USE_PK_INDEX_ISSET_ID = 5;
  private static final int __OUTPUT_CHUNK_BY_BUCKET_ISSET_ID = 6;
  private static final int __OUTPUT_ASC_HINT_ISSET_ID = 7;
  private static final int __PARTITION_ORDER_HINT_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SORT_COLUMN,_Fields.ROLLUP_NAME,_Fields.SQL_PREDICATES,_Fields.ENABLE_COLUMN_EXPR_PREDICATE,_Fields.DICT_STRING_ID_TO_INT_IDS,_Fields.UNUSED_OUTPUT_COLUMN_NAME,_Fields.SORTED_BY_KEYS_PER_TABLET,_Fields.BUCKET_EXPRS,_Fields.SORT_KEY_COLUMN_NAMES,_Fields.MAX_PARALLEL_SCAN_INSTANCE_NUM,_Fields.COLUMN_ACCESS_PATHS,_Fields.USE_PK_INDEX,_Fields.COLUMNS_DESC,_Fields.OUTPUT_CHUNK_BY_BUCKET,_Fields.OUTPUT_ASC_HINT,_Fields.PARTITION_ORDER_HINT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.KEY_COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("key_column_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.KEY_COLUMN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("key_column_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TPrimitiveType.class))));
    tmpMap.put(_Fields.IS_PREAGGREGATION, new org.apache.thrift.meta_data.FieldMetaData("is_preaggregation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SORT_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("sort_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLLUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("rollup_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SQL_PREDICATES, new org.apache.thrift.meta_data.FieldMetaData("sql_predicates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLE_COLUMN_EXPR_PREDICATE, new org.apache.thrift.meta_data.FieldMetaData("enable_column_expr_predicate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DICT_STRING_ID_TO_INT_IDS, new org.apache.thrift.meta_data.FieldMetaData("dict_string_id_to_int_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.UNUSED_OUTPUT_COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("unused_output_column_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SORTED_BY_KEYS_PER_TABLET, new org.apache.thrift.meta_data.FieldMetaData("sorted_by_keys_per_tablet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BUCKET_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("bucket_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TExpr.class))));
    tmpMap.put(_Fields.SORT_KEY_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("sort_key_column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAX_PARALLEL_SCAN_INSTANCE_NUM, new org.apache.thrift.meta_data.FieldMetaData("max_parallel_scan_instance_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_ACCESS_PATHS, new org.apache.thrift.meta_data.FieldMetaData("column_access_paths", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumnAccessPath.class))));
    tmpMap.put(_Fields.USE_PK_INDEX, new org.apache.thrift.meta_data.FieldMetaData("use_pk_index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COLUMNS_DESC, new org.apache.thrift.meta_data.FieldMetaData("columns_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TColumn.class))));
    tmpMap.put(_Fields.OUTPUT_CHUNK_BY_BUCKET, new org.apache.thrift.meta_data.FieldMetaData("output_chunk_by_bucket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OUTPUT_ASC_HINT, new org.apache.thrift.meta_data.FieldMetaData("output_asc_hint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARTITION_ORDER_HINT, new org.apache.thrift.meta_data.FieldMetaData("partition_order_hint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOlapScanNode.class, metaDataMap);
  }

  public TOlapScanNode() {
    this.sorted_by_keys_per_tablet = false;

  }

  public TOlapScanNode(
    int tuple_id,
    java.util.List<java.lang.String> key_column_name,
    java.util.List<io.datafibre.fibre.thrift.TPrimitiveType> key_column_type,
    boolean is_preaggregation)
  {
    this();
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    this.key_column_name = key_column_name;
    this.key_column_type = key_column_type;
    this.is_preaggregation = is_preaggregation;
    setIs_preaggregationIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOlapScanNode(TOlapScanNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tuple_id = other.tuple_id;
    if (other.isSetKey_column_name()) {
      java.util.List<java.lang.String> __this__key_column_name = new java.util.ArrayList<java.lang.String>(other.key_column_name);
      this.key_column_name = __this__key_column_name;
    }
    if (other.isSetKey_column_type()) {
      java.util.List<io.datafibre.fibre.thrift.TPrimitiveType> __this__key_column_type = new java.util.ArrayList<io.datafibre.fibre.thrift.TPrimitiveType>(other.key_column_type.size());
      for (io.datafibre.fibre.thrift.TPrimitiveType other_element : other.key_column_type) {
        __this__key_column_type.add(other_element);
      }
      this.key_column_type = __this__key_column_type;
    }
    this.is_preaggregation = other.is_preaggregation;
    if (other.isSetSort_column()) {
      this.sort_column = other.sort_column;
    }
    if (other.isSetRollup_name()) {
      this.rollup_name = other.rollup_name;
    }
    if (other.isSetSql_predicates()) {
      this.sql_predicates = other.sql_predicates;
    }
    this.enable_column_expr_predicate = other.enable_column_expr_predicate;
    if (other.isSetDict_string_id_to_int_ids()) {
      java.util.Map<java.lang.Integer,java.lang.Integer> __this__dict_string_id_to_int_ids = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.dict_string_id_to_int_ids);
      this.dict_string_id_to_int_ids = __this__dict_string_id_to_int_ids;
    }
    if (other.isSetUnused_output_column_name()) {
      java.util.List<java.lang.String> __this__unused_output_column_name = new java.util.ArrayList<java.lang.String>(other.unused_output_column_name);
      this.unused_output_column_name = __this__unused_output_column_name;
    }
    this.sorted_by_keys_per_tablet = other.sorted_by_keys_per_tablet;
    if (other.isSetBucket_exprs()) {
      java.util.List<io.datafibre.fibre.thrift.TExpr> __this__bucket_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(other.bucket_exprs.size());
      for (io.datafibre.fibre.thrift.TExpr other_element : other.bucket_exprs) {
        __this__bucket_exprs.add(new io.datafibre.fibre.thrift.TExpr(other_element));
      }
      this.bucket_exprs = __this__bucket_exprs;
    }
    if (other.isSetSort_key_column_names()) {
      java.util.List<java.lang.String> __this__sort_key_column_names = new java.util.ArrayList<java.lang.String>(other.sort_key_column_names);
      this.sort_key_column_names = __this__sort_key_column_names;
    }
    this.max_parallel_scan_instance_num = other.max_parallel_scan_instance_num;
    if (other.isSetColumn_access_paths()) {
      java.util.List<TColumnAccessPath> __this__column_access_paths = new java.util.ArrayList<TColumnAccessPath>(other.column_access_paths.size());
      for (TColumnAccessPath other_element : other.column_access_paths) {
        __this__column_access_paths.add(new TColumnAccessPath(other_element));
      }
      this.column_access_paths = __this__column_access_paths;
    }
    this.use_pk_index = other.use_pk_index;
    if (other.isSetColumns_desc()) {
      java.util.List<io.datafibre.fibre.thrift.TColumn> __this__columns_desc = new java.util.ArrayList<io.datafibre.fibre.thrift.TColumn>(other.columns_desc.size());
      for (io.datafibre.fibre.thrift.TColumn other_element : other.columns_desc) {
        __this__columns_desc.add(new io.datafibre.fibre.thrift.TColumn(other_element));
      }
      this.columns_desc = __this__columns_desc;
    }
    this.output_chunk_by_bucket = other.output_chunk_by_bucket;
    this.output_asc_hint = other.output_asc_hint;
    this.partition_order_hint = other.partition_order_hint;
  }

  @Override
  public TOlapScanNode deepCopy() {
    return new TOlapScanNode(this);
  }

  @Override
  public void clear() {
    setTuple_idIsSet(false);
    this.tuple_id = 0;
    this.key_column_name = null;
    this.key_column_type = null;
    setIs_preaggregationIsSet(false);
    this.is_preaggregation = false;
    this.sort_column = null;
    this.rollup_name = null;
    this.sql_predicates = null;
    setEnable_column_expr_predicateIsSet(false);
    this.enable_column_expr_predicate = false;
    this.dict_string_id_to_int_ids = null;
    this.unused_output_column_name = null;
    this.sorted_by_keys_per_tablet = false;

    this.bucket_exprs = null;
    this.sort_key_column_names = null;
    setMax_parallel_scan_instance_numIsSet(false);
    this.max_parallel_scan_instance_num = 0;
    this.column_access_paths = null;
    setUse_pk_indexIsSet(false);
    this.use_pk_index = false;
    this.columns_desc = null;
    setOutput_chunk_by_bucketIsSet(false);
    this.output_chunk_by_bucket = false;
    setOutput_asc_hintIsSet(false);
    this.output_asc_hint = false;
    setPartition_order_hintIsSet(false);
    this.partition_order_hint = false;
  }

  public int getTuple_id() {
    return this.tuple_id;
  }

  public TOlapScanNode setTuple_id(int tuple_id) {
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    return this;
  }

  public void unsetTuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  public void setTuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TUPLE_ID_ISSET_ID, value);
  }

  public int getKey_column_nameSize() {
    return (this.key_column_name == null) ? 0 : this.key_column_name.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getKey_column_nameIterator() {
    return (this.key_column_name == null) ? null : this.key_column_name.iterator();
  }

  public void addToKey_column_name(java.lang.String elem) {
    if (this.key_column_name == null) {
      this.key_column_name = new java.util.ArrayList<java.lang.String>();
    }
    this.key_column_name.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getKey_column_name() {
    return this.key_column_name;
  }

  public TOlapScanNode setKey_column_name(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> key_column_name) {
    this.key_column_name = key_column_name;
    return this;
  }

  public void unsetKey_column_name() {
    this.key_column_name = null;
  }

  /** Returns true if field key_column_name is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_column_name() {
    return this.key_column_name != null;
  }

  public void setKey_column_nameIsSet(boolean value) {
    if (!value) {
      this.key_column_name = null;
    }
  }

  public int getKey_column_typeSize() {
    return (this.key_column_type == null) ? 0 : this.key_column_type.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TPrimitiveType> getKey_column_typeIterator() {
    return (this.key_column_type == null) ? null : this.key_column_type.iterator();
  }

  public void addToKey_column_type(io.datafibre.fibre.thrift.TPrimitiveType elem) {
    if (this.key_column_type == null) {
      this.key_column_type = new java.util.ArrayList<io.datafibre.fibre.thrift.TPrimitiveType>();
    }
    this.key_column_type.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TPrimitiveType> getKey_column_type() {
    return this.key_column_type;
  }

  public TOlapScanNode setKey_column_type(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TPrimitiveType> key_column_type) {
    this.key_column_type = key_column_type;
    return this;
  }

  public void unsetKey_column_type() {
    this.key_column_type = null;
  }

  /** Returns true if field key_column_type is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_column_type() {
    return this.key_column_type != null;
  }

  public void setKey_column_typeIsSet(boolean value) {
    if (!value) {
      this.key_column_type = null;
    }
  }

  public boolean isIs_preaggregation() {
    return this.is_preaggregation;
  }

  public TOlapScanNode setIs_preaggregation(boolean is_preaggregation) {
    this.is_preaggregation = is_preaggregation;
    setIs_preaggregationIsSet(true);
    return this;
  }

  public void unsetIs_preaggregation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_PREAGGREGATION_ISSET_ID);
  }

  /** Returns true if field is_preaggregation is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_preaggregation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_PREAGGREGATION_ISSET_ID);
  }

  public void setIs_preaggregationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_PREAGGREGATION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSort_column() {
    return this.sort_column;
  }

  public TOlapScanNode setSort_column(@org.apache.thrift.annotation.Nullable java.lang.String sort_column) {
    this.sort_column = sort_column;
    return this;
  }

  public void unsetSort_column() {
    this.sort_column = null;
  }

  /** Returns true if field sort_column is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_column() {
    return this.sort_column != null;
  }

  public void setSort_columnIsSet(boolean value) {
    if (!value) {
      this.sort_column = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRollup_name() {
    return this.rollup_name;
  }

  public TOlapScanNode setRollup_name(@org.apache.thrift.annotation.Nullable java.lang.String rollup_name) {
    this.rollup_name = rollup_name;
    return this;
  }

  public void unsetRollup_name() {
    this.rollup_name = null;
  }

  /** Returns true if field rollup_name is set (has been assigned a value) and false otherwise */
  public boolean isSetRollup_name() {
    return this.rollup_name != null;
  }

  public void setRollup_nameIsSet(boolean value) {
    if (!value) {
      this.rollup_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSql_predicates() {
    return this.sql_predicates;
  }

  public TOlapScanNode setSql_predicates(@org.apache.thrift.annotation.Nullable java.lang.String sql_predicates) {
    this.sql_predicates = sql_predicates;
    return this;
  }

  public void unsetSql_predicates() {
    this.sql_predicates = null;
  }

  /** Returns true if field sql_predicates is set (has been assigned a value) and false otherwise */
  public boolean isSetSql_predicates() {
    return this.sql_predicates != null;
  }

  public void setSql_predicatesIsSet(boolean value) {
    if (!value) {
      this.sql_predicates = null;
    }
  }

  public boolean isEnable_column_expr_predicate() {
    return this.enable_column_expr_predicate;
  }

  public TOlapScanNode setEnable_column_expr_predicate(boolean enable_column_expr_predicate) {
    this.enable_column_expr_predicate = enable_column_expr_predicate;
    setEnable_column_expr_predicateIsSet(true);
    return this;
  }

  public void unsetEnable_column_expr_predicate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_COLUMN_EXPR_PREDICATE_ISSET_ID);
  }

  /** Returns true if field enable_column_expr_predicate is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_column_expr_predicate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_COLUMN_EXPR_PREDICATE_ISSET_ID);
  }

  public void setEnable_column_expr_predicateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_COLUMN_EXPR_PREDICATE_ISSET_ID, value);
  }

  public int getDict_string_id_to_int_idsSize() {
    return (this.dict_string_id_to_int_ids == null) ? 0 : this.dict_string_id_to_int_ids.size();
  }

  public void putToDict_string_id_to_int_ids(int key, int val) {
    if (this.dict_string_id_to_int_ids == null) {
      this.dict_string_id_to_int_ids = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
    }
    this.dict_string_id_to_int_ids.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Integer> getDict_string_id_to_int_ids() {
    return this.dict_string_id_to_int_ids;
  }

  public TOlapScanNode setDict_string_id_to_int_ids(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> dict_string_id_to_int_ids) {
    this.dict_string_id_to_int_ids = dict_string_id_to_int_ids;
    return this;
  }

  public void unsetDict_string_id_to_int_ids() {
    this.dict_string_id_to_int_ids = null;
  }

  /** Returns true if field dict_string_id_to_int_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetDict_string_id_to_int_ids() {
    return this.dict_string_id_to_int_ids != null;
  }

  public void setDict_string_id_to_int_idsIsSet(boolean value) {
    if (!value) {
      this.dict_string_id_to_int_ids = null;
    }
  }

  public int getUnused_output_column_nameSize() {
    return (this.unused_output_column_name == null) ? 0 : this.unused_output_column_name.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getUnused_output_column_nameIterator() {
    return (this.unused_output_column_name == null) ? null : this.unused_output_column_name.iterator();
  }

  public void addToUnused_output_column_name(java.lang.String elem) {
    if (this.unused_output_column_name == null) {
      this.unused_output_column_name = new java.util.ArrayList<java.lang.String>();
    }
    this.unused_output_column_name.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getUnused_output_column_name() {
    return this.unused_output_column_name;
  }

  public TOlapScanNode setUnused_output_column_name(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> unused_output_column_name) {
    this.unused_output_column_name = unused_output_column_name;
    return this;
  }

  public void unsetUnused_output_column_name() {
    this.unused_output_column_name = null;
  }

  /** Returns true if field unused_output_column_name is set (has been assigned a value) and false otherwise */
  public boolean isSetUnused_output_column_name() {
    return this.unused_output_column_name != null;
  }

  public void setUnused_output_column_nameIsSet(boolean value) {
    if (!value) {
      this.unused_output_column_name = null;
    }
  }

  public boolean isSorted_by_keys_per_tablet() {
    return this.sorted_by_keys_per_tablet;
  }

  public TOlapScanNode setSorted_by_keys_per_tablet(boolean sorted_by_keys_per_tablet) {
    this.sorted_by_keys_per_tablet = sorted_by_keys_per_tablet;
    setSorted_by_keys_per_tabletIsSet(true);
    return this;
  }

  public void unsetSorted_by_keys_per_tablet() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SORTED_BY_KEYS_PER_TABLET_ISSET_ID);
  }

  /** Returns true if field sorted_by_keys_per_tablet is set (has been assigned a value) and false otherwise */
  public boolean isSetSorted_by_keys_per_tablet() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SORTED_BY_KEYS_PER_TABLET_ISSET_ID);
  }

  public void setSorted_by_keys_per_tabletIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SORTED_BY_KEYS_PER_TABLET_ISSET_ID, value);
  }

  public int getBucket_exprsSize() {
    return (this.bucket_exprs == null) ? 0 : this.bucket_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TExpr> getBucket_exprsIterator() {
    return (this.bucket_exprs == null) ? null : this.bucket_exprs.iterator();
  }

  public void addToBucket_exprs(io.datafibre.fibre.thrift.TExpr elem) {
    if (this.bucket_exprs == null) {
      this.bucket_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>();
    }
    this.bucket_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TExpr> getBucket_exprs() {
    return this.bucket_exprs;
  }

  public TOlapScanNode setBucket_exprs(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> bucket_exprs) {
    this.bucket_exprs = bucket_exprs;
    return this;
  }

  public void unsetBucket_exprs() {
    this.bucket_exprs = null;
  }

  /** Returns true if field bucket_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetBucket_exprs() {
    return this.bucket_exprs != null;
  }

  public void setBucket_exprsIsSet(boolean value) {
    if (!value) {
      this.bucket_exprs = null;
    }
  }

  public int getSort_key_column_namesSize() {
    return (this.sort_key_column_names == null) ? 0 : this.sort_key_column_names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getSort_key_column_namesIterator() {
    return (this.sort_key_column_names == null) ? null : this.sort_key_column_names.iterator();
  }

  public void addToSort_key_column_names(java.lang.String elem) {
    if (this.sort_key_column_names == null) {
      this.sort_key_column_names = new java.util.ArrayList<java.lang.String>();
    }
    this.sort_key_column_names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getSort_key_column_names() {
    return this.sort_key_column_names;
  }

  public TOlapScanNode setSort_key_column_names(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> sort_key_column_names) {
    this.sort_key_column_names = sort_key_column_names;
    return this;
  }

  public void unsetSort_key_column_names() {
    this.sort_key_column_names = null;
  }

  /** Returns true if field sort_key_column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_key_column_names() {
    return this.sort_key_column_names != null;
  }

  public void setSort_key_column_namesIsSet(boolean value) {
    if (!value) {
      this.sort_key_column_names = null;
    }
  }

  public int getMax_parallel_scan_instance_num() {
    return this.max_parallel_scan_instance_num;
  }

  public TOlapScanNode setMax_parallel_scan_instance_num(int max_parallel_scan_instance_num) {
    this.max_parallel_scan_instance_num = max_parallel_scan_instance_num;
    setMax_parallel_scan_instance_numIsSet(true);
    return this;
  }

  public void unsetMax_parallel_scan_instance_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_PARALLEL_SCAN_INSTANCE_NUM_ISSET_ID);
  }

  /** Returns true if field max_parallel_scan_instance_num is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_parallel_scan_instance_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_PARALLEL_SCAN_INSTANCE_NUM_ISSET_ID);
  }

  public void setMax_parallel_scan_instance_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_PARALLEL_SCAN_INSTANCE_NUM_ISSET_ID, value);
  }

  public int getColumn_access_pathsSize() {
    return (this.column_access_paths == null) ? 0 : this.column_access_paths.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TColumnAccessPath> getColumn_access_pathsIterator() {
    return (this.column_access_paths == null) ? null : this.column_access_paths.iterator();
  }

  public void addToColumn_access_paths(TColumnAccessPath elem) {
    if (this.column_access_paths == null) {
      this.column_access_paths = new java.util.ArrayList<TColumnAccessPath>();
    }
    this.column_access_paths.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TColumnAccessPath> getColumn_access_paths() {
    return this.column_access_paths;
  }

  public TOlapScanNode setColumn_access_paths(@org.apache.thrift.annotation.Nullable java.util.List<TColumnAccessPath> column_access_paths) {
    this.column_access_paths = column_access_paths;
    return this;
  }

  public void unsetColumn_access_paths() {
    this.column_access_paths = null;
  }

  /** Returns true if field column_access_paths is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_access_paths() {
    return this.column_access_paths != null;
  }

  public void setColumn_access_pathsIsSet(boolean value) {
    if (!value) {
      this.column_access_paths = null;
    }
  }

  public boolean isUse_pk_index() {
    return this.use_pk_index;
  }

  public TOlapScanNode setUse_pk_index(boolean use_pk_index) {
    this.use_pk_index = use_pk_index;
    setUse_pk_indexIsSet(true);
    return this;
  }

  public void unsetUse_pk_index() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_PK_INDEX_ISSET_ID);
  }

  /** Returns true if field use_pk_index is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_pk_index() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_PK_INDEX_ISSET_ID);
  }

  public void setUse_pk_indexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_PK_INDEX_ISSET_ID, value);
  }

  public int getColumns_descSize() {
    return (this.columns_desc == null) ? 0 : this.columns_desc.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TColumn> getColumns_descIterator() {
    return (this.columns_desc == null) ? null : this.columns_desc.iterator();
  }

  public void addToColumns_desc(io.datafibre.fibre.thrift.TColumn elem) {
    if (this.columns_desc == null) {
      this.columns_desc = new java.util.ArrayList<io.datafibre.fibre.thrift.TColumn>();
    }
    this.columns_desc.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TColumn> getColumns_desc() {
    return this.columns_desc;
  }

  public TOlapScanNode setColumns_desc(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TColumn> columns_desc) {
    this.columns_desc = columns_desc;
    return this;
  }

  public void unsetColumns_desc() {
    this.columns_desc = null;
  }

  /** Returns true if field columns_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns_desc() {
    return this.columns_desc != null;
  }

  public void setColumns_descIsSet(boolean value) {
    if (!value) {
      this.columns_desc = null;
    }
  }

  public boolean isOutput_chunk_by_bucket() {
    return this.output_chunk_by_bucket;
  }

  public TOlapScanNode setOutput_chunk_by_bucket(boolean output_chunk_by_bucket) {
    this.output_chunk_by_bucket = output_chunk_by_bucket;
    setOutput_chunk_by_bucketIsSet(true);
    return this;
  }

  public void unsetOutput_chunk_by_bucket() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_CHUNK_BY_BUCKET_ISSET_ID);
  }

  /** Returns true if field output_chunk_by_bucket is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_chunk_by_bucket() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTPUT_CHUNK_BY_BUCKET_ISSET_ID);
  }

  public void setOutput_chunk_by_bucketIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTPUT_CHUNK_BY_BUCKET_ISSET_ID, value);
  }

  public boolean isOutput_asc_hint() {
    return this.output_asc_hint;
  }

  public TOlapScanNode setOutput_asc_hint(boolean output_asc_hint) {
    this.output_asc_hint = output_asc_hint;
    setOutput_asc_hintIsSet(true);
    return this;
  }

  public void unsetOutput_asc_hint() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_ASC_HINT_ISSET_ID);
  }

  /** Returns true if field output_asc_hint is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_asc_hint() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTPUT_ASC_HINT_ISSET_ID);
  }

  public void setOutput_asc_hintIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTPUT_ASC_HINT_ISSET_ID, value);
  }

  public boolean isPartition_order_hint() {
    return this.partition_order_hint;
  }

  public TOlapScanNode setPartition_order_hint(boolean partition_order_hint) {
    this.partition_order_hint = partition_order_hint;
    setPartition_order_hintIsSet(true);
    return this;
  }

  public void unsetPartition_order_hint() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ORDER_HINT_ISSET_ID);
  }

  /** Returns true if field partition_order_hint is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_order_hint() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_ORDER_HINT_ISSET_ID);
  }

  public void setPartition_order_hintIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_ORDER_HINT_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TUPLE_ID:
      if (value == null) {
        unsetTuple_id();
      } else {
        setTuple_id((java.lang.Integer)value);
      }
      break;

    case KEY_COLUMN_NAME:
      if (value == null) {
        unsetKey_column_name();
      } else {
        setKey_column_name((java.util.List<java.lang.String>)value);
      }
      break;

    case KEY_COLUMN_TYPE:
      if (value == null) {
        unsetKey_column_type();
      } else {
        setKey_column_type((java.util.List<io.datafibre.fibre.thrift.TPrimitiveType>)value);
      }
      break;

    case IS_PREAGGREGATION:
      if (value == null) {
        unsetIs_preaggregation();
      } else {
        setIs_preaggregation((java.lang.Boolean)value);
      }
      break;

    case SORT_COLUMN:
      if (value == null) {
        unsetSort_column();
      } else {
        setSort_column((java.lang.String)value);
      }
      break;

    case ROLLUP_NAME:
      if (value == null) {
        unsetRollup_name();
      } else {
        setRollup_name((java.lang.String)value);
      }
      break;

    case SQL_PREDICATES:
      if (value == null) {
        unsetSql_predicates();
      } else {
        setSql_predicates((java.lang.String)value);
      }
      break;

    case ENABLE_COLUMN_EXPR_PREDICATE:
      if (value == null) {
        unsetEnable_column_expr_predicate();
      } else {
        setEnable_column_expr_predicate((java.lang.Boolean)value);
      }
      break;

    case DICT_STRING_ID_TO_INT_IDS:
      if (value == null) {
        unsetDict_string_id_to_int_ids();
      } else {
        setDict_string_id_to_int_ids((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
      }
      break;

    case UNUSED_OUTPUT_COLUMN_NAME:
      if (value == null) {
        unsetUnused_output_column_name();
      } else {
        setUnused_output_column_name((java.util.List<java.lang.String>)value);
      }
      break;

    case SORTED_BY_KEYS_PER_TABLET:
      if (value == null) {
        unsetSorted_by_keys_per_tablet();
      } else {
        setSorted_by_keys_per_tablet((java.lang.Boolean)value);
      }
      break;

    case BUCKET_EXPRS:
      if (value == null) {
        unsetBucket_exprs();
      } else {
        setBucket_exprs((java.util.List<io.datafibre.fibre.thrift.TExpr>)value);
      }
      break;

    case SORT_KEY_COLUMN_NAMES:
      if (value == null) {
        unsetSort_key_column_names();
      } else {
        setSort_key_column_names((java.util.List<java.lang.String>)value);
      }
      break;

    case MAX_PARALLEL_SCAN_INSTANCE_NUM:
      if (value == null) {
        unsetMax_parallel_scan_instance_num();
      } else {
        setMax_parallel_scan_instance_num((java.lang.Integer)value);
      }
      break;

    case COLUMN_ACCESS_PATHS:
      if (value == null) {
        unsetColumn_access_paths();
      } else {
        setColumn_access_paths((java.util.List<TColumnAccessPath>)value);
      }
      break;

    case USE_PK_INDEX:
      if (value == null) {
        unsetUse_pk_index();
      } else {
        setUse_pk_index((java.lang.Boolean)value);
      }
      break;

    case COLUMNS_DESC:
      if (value == null) {
        unsetColumns_desc();
      } else {
        setColumns_desc((java.util.List<io.datafibre.fibre.thrift.TColumn>)value);
      }
      break;

    case OUTPUT_CHUNK_BY_BUCKET:
      if (value == null) {
        unsetOutput_chunk_by_bucket();
      } else {
        setOutput_chunk_by_bucket((java.lang.Boolean)value);
      }
      break;

    case OUTPUT_ASC_HINT:
      if (value == null) {
        unsetOutput_asc_hint();
      } else {
        setOutput_asc_hint((java.lang.Boolean)value);
      }
      break;

    case PARTITION_ORDER_HINT:
      if (value == null) {
        unsetPartition_order_hint();
      } else {
        setPartition_order_hint((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TUPLE_ID:
      return getTuple_id();

    case KEY_COLUMN_NAME:
      return getKey_column_name();

    case KEY_COLUMN_TYPE:
      return getKey_column_type();

    case IS_PREAGGREGATION:
      return isIs_preaggregation();

    case SORT_COLUMN:
      return getSort_column();

    case ROLLUP_NAME:
      return getRollup_name();

    case SQL_PREDICATES:
      return getSql_predicates();

    case ENABLE_COLUMN_EXPR_PREDICATE:
      return isEnable_column_expr_predicate();

    case DICT_STRING_ID_TO_INT_IDS:
      return getDict_string_id_to_int_ids();

    case UNUSED_OUTPUT_COLUMN_NAME:
      return getUnused_output_column_name();

    case SORTED_BY_KEYS_PER_TABLET:
      return isSorted_by_keys_per_tablet();

    case BUCKET_EXPRS:
      return getBucket_exprs();

    case SORT_KEY_COLUMN_NAMES:
      return getSort_key_column_names();

    case MAX_PARALLEL_SCAN_INSTANCE_NUM:
      return getMax_parallel_scan_instance_num();

    case COLUMN_ACCESS_PATHS:
      return getColumn_access_paths();

    case USE_PK_INDEX:
      return isUse_pk_index();

    case COLUMNS_DESC:
      return getColumns_desc();

    case OUTPUT_CHUNK_BY_BUCKET:
      return isOutput_chunk_by_bucket();

    case OUTPUT_ASC_HINT:
      return isOutput_asc_hint();

    case PARTITION_ORDER_HINT:
      return isPartition_order_hint();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TUPLE_ID:
      return isSetTuple_id();
    case KEY_COLUMN_NAME:
      return isSetKey_column_name();
    case KEY_COLUMN_TYPE:
      return isSetKey_column_type();
    case IS_PREAGGREGATION:
      return isSetIs_preaggregation();
    case SORT_COLUMN:
      return isSetSort_column();
    case ROLLUP_NAME:
      return isSetRollup_name();
    case SQL_PREDICATES:
      return isSetSql_predicates();
    case ENABLE_COLUMN_EXPR_PREDICATE:
      return isSetEnable_column_expr_predicate();
    case DICT_STRING_ID_TO_INT_IDS:
      return isSetDict_string_id_to_int_ids();
    case UNUSED_OUTPUT_COLUMN_NAME:
      return isSetUnused_output_column_name();
    case SORTED_BY_KEYS_PER_TABLET:
      return isSetSorted_by_keys_per_tablet();
    case BUCKET_EXPRS:
      return isSetBucket_exprs();
    case SORT_KEY_COLUMN_NAMES:
      return isSetSort_key_column_names();
    case MAX_PARALLEL_SCAN_INSTANCE_NUM:
      return isSetMax_parallel_scan_instance_num();
    case COLUMN_ACCESS_PATHS:
      return isSetColumn_access_paths();
    case USE_PK_INDEX:
      return isSetUse_pk_index();
    case COLUMNS_DESC:
      return isSetColumns_desc();
    case OUTPUT_CHUNK_BY_BUCKET:
      return isSetOutput_chunk_by_bucket();
    case OUTPUT_ASC_HINT:
      return isSetOutput_asc_hint();
    case PARTITION_ORDER_HINT:
      return isSetPartition_order_hint();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TOlapScanNode)
      return this.equals((TOlapScanNode)that);
    return false;
  }

  public boolean equals(TOlapScanNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tuple_id = true;
    boolean that_present_tuple_id = true;
    if (this_present_tuple_id || that_present_tuple_id) {
      if (!(this_present_tuple_id && that_present_tuple_id))
        return false;
      if (this.tuple_id != that.tuple_id)
        return false;
    }

    boolean this_present_key_column_name = true && this.isSetKey_column_name();
    boolean that_present_key_column_name = true && that.isSetKey_column_name();
    if (this_present_key_column_name || that_present_key_column_name) {
      if (!(this_present_key_column_name && that_present_key_column_name))
        return false;
      if (!this.key_column_name.equals(that.key_column_name))
        return false;
    }

    boolean this_present_key_column_type = true && this.isSetKey_column_type();
    boolean that_present_key_column_type = true && that.isSetKey_column_type();
    if (this_present_key_column_type || that_present_key_column_type) {
      if (!(this_present_key_column_type && that_present_key_column_type))
        return false;
      if (!this.key_column_type.equals(that.key_column_type))
        return false;
    }

    boolean this_present_is_preaggregation = true;
    boolean that_present_is_preaggregation = true;
    if (this_present_is_preaggregation || that_present_is_preaggregation) {
      if (!(this_present_is_preaggregation && that_present_is_preaggregation))
        return false;
      if (this.is_preaggregation != that.is_preaggregation)
        return false;
    }

    boolean this_present_sort_column = true && this.isSetSort_column();
    boolean that_present_sort_column = true && that.isSetSort_column();
    if (this_present_sort_column || that_present_sort_column) {
      if (!(this_present_sort_column && that_present_sort_column))
        return false;
      if (!this.sort_column.equals(that.sort_column))
        return false;
    }

    boolean this_present_rollup_name = true && this.isSetRollup_name();
    boolean that_present_rollup_name = true && that.isSetRollup_name();
    if (this_present_rollup_name || that_present_rollup_name) {
      if (!(this_present_rollup_name && that_present_rollup_name))
        return false;
      if (!this.rollup_name.equals(that.rollup_name))
        return false;
    }

    boolean this_present_sql_predicates = true && this.isSetSql_predicates();
    boolean that_present_sql_predicates = true && that.isSetSql_predicates();
    if (this_present_sql_predicates || that_present_sql_predicates) {
      if (!(this_present_sql_predicates && that_present_sql_predicates))
        return false;
      if (!this.sql_predicates.equals(that.sql_predicates))
        return false;
    }

    boolean this_present_enable_column_expr_predicate = true && this.isSetEnable_column_expr_predicate();
    boolean that_present_enable_column_expr_predicate = true && that.isSetEnable_column_expr_predicate();
    if (this_present_enable_column_expr_predicate || that_present_enable_column_expr_predicate) {
      if (!(this_present_enable_column_expr_predicate && that_present_enable_column_expr_predicate))
        return false;
      if (this.enable_column_expr_predicate != that.enable_column_expr_predicate)
        return false;
    }

    boolean this_present_dict_string_id_to_int_ids = true && this.isSetDict_string_id_to_int_ids();
    boolean that_present_dict_string_id_to_int_ids = true && that.isSetDict_string_id_to_int_ids();
    if (this_present_dict_string_id_to_int_ids || that_present_dict_string_id_to_int_ids) {
      if (!(this_present_dict_string_id_to_int_ids && that_present_dict_string_id_to_int_ids))
        return false;
      if (!this.dict_string_id_to_int_ids.equals(that.dict_string_id_to_int_ids))
        return false;
    }

    boolean this_present_unused_output_column_name = true && this.isSetUnused_output_column_name();
    boolean that_present_unused_output_column_name = true && that.isSetUnused_output_column_name();
    if (this_present_unused_output_column_name || that_present_unused_output_column_name) {
      if (!(this_present_unused_output_column_name && that_present_unused_output_column_name))
        return false;
      if (!this.unused_output_column_name.equals(that.unused_output_column_name))
        return false;
    }

    boolean this_present_sorted_by_keys_per_tablet = true && this.isSetSorted_by_keys_per_tablet();
    boolean that_present_sorted_by_keys_per_tablet = true && that.isSetSorted_by_keys_per_tablet();
    if (this_present_sorted_by_keys_per_tablet || that_present_sorted_by_keys_per_tablet) {
      if (!(this_present_sorted_by_keys_per_tablet && that_present_sorted_by_keys_per_tablet))
        return false;
      if (this.sorted_by_keys_per_tablet != that.sorted_by_keys_per_tablet)
        return false;
    }

    boolean this_present_bucket_exprs = true && this.isSetBucket_exprs();
    boolean that_present_bucket_exprs = true && that.isSetBucket_exprs();
    if (this_present_bucket_exprs || that_present_bucket_exprs) {
      if (!(this_present_bucket_exprs && that_present_bucket_exprs))
        return false;
      if (!this.bucket_exprs.equals(that.bucket_exprs))
        return false;
    }

    boolean this_present_sort_key_column_names = true && this.isSetSort_key_column_names();
    boolean that_present_sort_key_column_names = true && that.isSetSort_key_column_names();
    if (this_present_sort_key_column_names || that_present_sort_key_column_names) {
      if (!(this_present_sort_key_column_names && that_present_sort_key_column_names))
        return false;
      if (!this.sort_key_column_names.equals(that.sort_key_column_names))
        return false;
    }

    boolean this_present_max_parallel_scan_instance_num = true && this.isSetMax_parallel_scan_instance_num();
    boolean that_present_max_parallel_scan_instance_num = true && that.isSetMax_parallel_scan_instance_num();
    if (this_present_max_parallel_scan_instance_num || that_present_max_parallel_scan_instance_num) {
      if (!(this_present_max_parallel_scan_instance_num && that_present_max_parallel_scan_instance_num))
        return false;
      if (this.max_parallel_scan_instance_num != that.max_parallel_scan_instance_num)
        return false;
    }

    boolean this_present_column_access_paths = true && this.isSetColumn_access_paths();
    boolean that_present_column_access_paths = true && that.isSetColumn_access_paths();
    if (this_present_column_access_paths || that_present_column_access_paths) {
      if (!(this_present_column_access_paths && that_present_column_access_paths))
        return false;
      if (!this.column_access_paths.equals(that.column_access_paths))
        return false;
    }

    boolean this_present_use_pk_index = true && this.isSetUse_pk_index();
    boolean that_present_use_pk_index = true && that.isSetUse_pk_index();
    if (this_present_use_pk_index || that_present_use_pk_index) {
      if (!(this_present_use_pk_index && that_present_use_pk_index))
        return false;
      if (this.use_pk_index != that.use_pk_index)
        return false;
    }

    boolean this_present_columns_desc = true && this.isSetColumns_desc();
    boolean that_present_columns_desc = true && that.isSetColumns_desc();
    if (this_present_columns_desc || that_present_columns_desc) {
      if (!(this_present_columns_desc && that_present_columns_desc))
        return false;
      if (!this.columns_desc.equals(that.columns_desc))
        return false;
    }

    boolean this_present_output_chunk_by_bucket = true && this.isSetOutput_chunk_by_bucket();
    boolean that_present_output_chunk_by_bucket = true && that.isSetOutput_chunk_by_bucket();
    if (this_present_output_chunk_by_bucket || that_present_output_chunk_by_bucket) {
      if (!(this_present_output_chunk_by_bucket && that_present_output_chunk_by_bucket))
        return false;
      if (this.output_chunk_by_bucket != that.output_chunk_by_bucket)
        return false;
    }

    boolean this_present_output_asc_hint = true && this.isSetOutput_asc_hint();
    boolean that_present_output_asc_hint = true && that.isSetOutput_asc_hint();
    if (this_present_output_asc_hint || that_present_output_asc_hint) {
      if (!(this_present_output_asc_hint && that_present_output_asc_hint))
        return false;
      if (this.output_asc_hint != that.output_asc_hint)
        return false;
    }

    boolean this_present_partition_order_hint = true && this.isSetPartition_order_hint();
    boolean that_present_partition_order_hint = true && that.isSetPartition_order_hint();
    if (this_present_partition_order_hint || that_present_partition_order_hint) {
      if (!(this_present_partition_order_hint && that_present_partition_order_hint))
        return false;
      if (this.partition_order_hint != that.partition_order_hint)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + tuple_id;

    hashCode = hashCode * 8191 + ((isSetKey_column_name()) ? 131071 : 524287);
    if (isSetKey_column_name())
      hashCode = hashCode * 8191 + key_column_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetKey_column_type()) ? 131071 : 524287);
    if (isSetKey_column_type())
      hashCode = hashCode * 8191 + key_column_type.hashCode();

    hashCode = hashCode * 8191 + ((is_preaggregation) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSort_column()) ? 131071 : 524287);
    if (isSetSort_column())
      hashCode = hashCode * 8191 + sort_column.hashCode();

    hashCode = hashCode * 8191 + ((isSetRollup_name()) ? 131071 : 524287);
    if (isSetRollup_name())
      hashCode = hashCode * 8191 + rollup_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetSql_predicates()) ? 131071 : 524287);
    if (isSetSql_predicates())
      hashCode = hashCode * 8191 + sql_predicates.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnable_column_expr_predicate()) ? 131071 : 524287);
    if (isSetEnable_column_expr_predicate())
      hashCode = hashCode * 8191 + ((enable_column_expr_predicate) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDict_string_id_to_int_ids()) ? 131071 : 524287);
    if (isSetDict_string_id_to_int_ids())
      hashCode = hashCode * 8191 + dict_string_id_to_int_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnused_output_column_name()) ? 131071 : 524287);
    if (isSetUnused_output_column_name())
      hashCode = hashCode * 8191 + unused_output_column_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetSorted_by_keys_per_tablet()) ? 131071 : 524287);
    if (isSetSorted_by_keys_per_tablet())
      hashCode = hashCode * 8191 + ((sorted_by_keys_per_tablet) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBucket_exprs()) ? 131071 : 524287);
    if (isSetBucket_exprs())
      hashCode = hashCode * 8191 + bucket_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetSort_key_column_names()) ? 131071 : 524287);
    if (isSetSort_key_column_names())
      hashCode = hashCode * 8191 + sort_key_column_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetMax_parallel_scan_instance_num()) ? 131071 : 524287);
    if (isSetMax_parallel_scan_instance_num())
      hashCode = hashCode * 8191 + max_parallel_scan_instance_num;

    hashCode = hashCode * 8191 + ((isSetColumn_access_paths()) ? 131071 : 524287);
    if (isSetColumn_access_paths())
      hashCode = hashCode * 8191 + column_access_paths.hashCode();

    hashCode = hashCode * 8191 + ((isSetUse_pk_index()) ? 131071 : 524287);
    if (isSetUse_pk_index())
      hashCode = hashCode * 8191 + ((use_pk_index) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetColumns_desc()) ? 131071 : 524287);
    if (isSetColumns_desc())
      hashCode = hashCode * 8191 + columns_desc.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutput_chunk_by_bucket()) ? 131071 : 524287);
    if (isSetOutput_chunk_by_bucket())
      hashCode = hashCode * 8191 + ((output_chunk_by_bucket) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetOutput_asc_hint()) ? 131071 : 524287);
    if (isSetOutput_asc_hint())
      hashCode = hashCode * 8191 + ((output_asc_hint) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPartition_order_hint()) ? 131071 : 524287);
    if (isSetPartition_order_hint())
      hashCode = hashCode * 8191 + ((partition_order_hint) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TOlapScanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTuple_id(), other.isSetTuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_id, other.tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKey_column_name(), other.isSetKey_column_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_column_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_column_name, other.key_column_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKey_column_type(), other.isSetKey_column_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_column_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_column_type, other.key_column_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_preaggregation(), other.isSetIs_preaggregation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_preaggregation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_preaggregation, other.is_preaggregation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSort_column(), other.isSetSort_column());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_column()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_column, other.sort_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRollup_name(), other.isSetRollup_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRollup_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rollup_name, other.rollup_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSql_predicates(), other.isSetSql_predicates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql_predicates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_predicates, other.sql_predicates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_column_expr_predicate(), other.isSetEnable_column_expr_predicate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_column_expr_predicate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_column_expr_predicate, other.enable_column_expr_predicate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDict_string_id_to_int_ids(), other.isSetDict_string_id_to_int_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDict_string_id_to_int_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dict_string_id_to_int_ids, other.dict_string_id_to_int_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUnused_output_column_name(), other.isSetUnused_output_column_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnused_output_column_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unused_output_column_name, other.unused_output_column_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSorted_by_keys_per_tablet(), other.isSetSorted_by_keys_per_tablet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSorted_by_keys_per_tablet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sorted_by_keys_per_tablet, other.sorted_by_keys_per_tablet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBucket_exprs(), other.isSetBucket_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucket_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucket_exprs, other.bucket_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSort_key_column_names(), other.isSetSort_key_column_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_key_column_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_key_column_names, other.sort_key_column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_parallel_scan_instance_num(), other.isSetMax_parallel_scan_instance_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_parallel_scan_instance_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_parallel_scan_instance_num, other.max_parallel_scan_instance_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumn_access_paths(), other.isSetColumn_access_paths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_access_paths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_access_paths, other.column_access_paths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_pk_index(), other.isSetUse_pk_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_pk_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_pk_index, other.use_pk_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns_desc(), other.isSetColumns_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns_desc, other.columns_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutput_chunk_by_bucket(), other.isSetOutput_chunk_by_bucket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_chunk_by_bucket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_chunk_by_bucket, other.output_chunk_by_bucket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutput_asc_hint(), other.isSetOutput_asc_hint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_asc_hint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_asc_hint, other.output_asc_hint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_order_hint(), other.isSetPartition_order_hint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_order_hint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_order_hint, other.partition_order_hint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TOlapScanNode(");
    boolean first = true;

    sb.append("tuple_id:");
    sb.append(this.tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("key_column_name:");
    if (this.key_column_name == null) {
      sb.append("null");
    } else {
      sb.append(this.key_column_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key_column_type:");
    if (this.key_column_type == null) {
      sb.append("null");
    } else {
      sb.append(this.key_column_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_preaggregation:");
    sb.append(this.is_preaggregation);
    first = false;
    if (isSetSort_column()) {
      if (!first) sb.append(", ");
      sb.append("sort_column:");
      if (this.sort_column == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_column);
      }
      first = false;
    }
    if (isSetRollup_name()) {
      if (!first) sb.append(", ");
      sb.append("rollup_name:");
      if (this.rollup_name == null) {
        sb.append("null");
      } else {
        sb.append(this.rollup_name);
      }
      first = false;
    }
    if (isSetSql_predicates()) {
      if (!first) sb.append(", ");
      sb.append("sql_predicates:");
      if (this.sql_predicates == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_predicates);
      }
      first = false;
    }
    if (isSetEnable_column_expr_predicate()) {
      if (!first) sb.append(", ");
      sb.append("enable_column_expr_predicate:");
      sb.append(this.enable_column_expr_predicate);
      first = false;
    }
    if (isSetDict_string_id_to_int_ids()) {
      if (!first) sb.append(", ");
      sb.append("dict_string_id_to_int_ids:");
      if (this.dict_string_id_to_int_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.dict_string_id_to_int_ids);
      }
      first = false;
    }
    if (isSetUnused_output_column_name()) {
      if (!first) sb.append(", ");
      sb.append("unused_output_column_name:");
      if (this.unused_output_column_name == null) {
        sb.append("null");
      } else {
        sb.append(this.unused_output_column_name);
      }
      first = false;
    }
    if (isSetSorted_by_keys_per_tablet()) {
      if (!first) sb.append(", ");
      sb.append("sorted_by_keys_per_tablet:");
      sb.append(this.sorted_by_keys_per_tablet);
      first = false;
    }
    if (isSetBucket_exprs()) {
      if (!first) sb.append(", ");
      sb.append("bucket_exprs:");
      if (this.bucket_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.bucket_exprs);
      }
      first = false;
    }
    if (isSetSort_key_column_names()) {
      if (!first) sb.append(", ");
      sb.append("sort_key_column_names:");
      if (this.sort_key_column_names == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_key_column_names);
      }
      first = false;
    }
    if (isSetMax_parallel_scan_instance_num()) {
      if (!first) sb.append(", ");
      sb.append("max_parallel_scan_instance_num:");
      sb.append(this.max_parallel_scan_instance_num);
      first = false;
    }
    if (isSetColumn_access_paths()) {
      if (!first) sb.append(", ");
      sb.append("column_access_paths:");
      if (this.column_access_paths == null) {
        sb.append("null");
      } else {
        sb.append(this.column_access_paths);
      }
      first = false;
    }
    if (isSetUse_pk_index()) {
      if (!first) sb.append(", ");
      sb.append("use_pk_index:");
      sb.append(this.use_pk_index);
      first = false;
    }
    if (isSetColumns_desc()) {
      if (!first) sb.append(", ");
      sb.append("columns_desc:");
      if (this.columns_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.columns_desc);
      }
      first = false;
    }
    if (isSetOutput_chunk_by_bucket()) {
      if (!first) sb.append(", ");
      sb.append("output_chunk_by_bucket:");
      sb.append(this.output_chunk_by_bucket);
      first = false;
    }
    if (isSetOutput_asc_hint()) {
      if (!first) sb.append(", ");
      sb.append("output_asc_hint:");
      sb.append(this.output_asc_hint);
      first = false;
    }
    if (isSetPartition_order_hint()) {
      if (!first) sb.append(", ");
      sb.append("partition_order_hint:");
      sb.append(this.partition_order_hint);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tuple_id' because it's a primitive and you chose the non-beans generator.
    if (key_column_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key_column_name' was not present! Struct: " + toString());
    }
    if (key_column_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key_column_type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'is_preaggregation' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOlapScanNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapScanNodeStandardScheme getScheme() {
      return new TOlapScanNodeStandardScheme();
    }
  }

  private static class TOlapScanNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TOlapScanNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TOlapScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tuple_id = iprot.readI32();
              struct.setTuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY_COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list222 = iprot.readListBegin();
                struct.key_column_name = new java.util.ArrayList<java.lang.String>(_list222.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem223;
                for (int _i224 = 0; _i224 < _list222.size; ++_i224)
                {
                  _elem223 = iprot.readString();
                  struct.key_column_name.add(_elem223);
                }
                iprot.readListEnd();
              }
              struct.setKey_column_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEY_COLUMN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list225 = iprot.readListBegin();
                struct.key_column_type = new java.util.ArrayList<io.datafibre.fibre.thrift.TPrimitiveType>(_list225.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPrimitiveType _elem226;
                for (int _i227 = 0; _i227 < _list225.size; ++_i227)
                {
                  _elem226 = io.datafibre.fibre.thrift.TPrimitiveType.findByValue(iprot.readI32());
                  if (_elem226 != null)
                  {
                    struct.key_column_type.add(_elem226);
                  }
                }
                iprot.readListEnd();
              }
              struct.setKey_column_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_PREAGGREGATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_preaggregation = iprot.readBool();
              struct.setIs_preaggregationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SORT_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sort_column = iprot.readString();
              struct.setSort_columnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ROLLUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rollup_name = iprot.readString();
              struct.setRollup_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SQL_PREDICATES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql_predicates = iprot.readString();
              struct.setSql_predicatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ENABLE_COLUMN_EXPR_PREDICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_column_expr_predicate = iprot.readBool();
              struct.setEnable_column_expr_predicateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // DICT_STRING_ID_TO_INT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map228 = iprot.readMapBegin();
                struct.dict_string_id_to_int_ids = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map228.size);
                int _key229;
                int _val230;
                for (int _i231 = 0; _i231 < _map228.size; ++_i231)
                {
                  _key229 = iprot.readI32();
                  _val230 = iprot.readI32();
                  struct.dict_string_id_to_int_ids.put(_key229, _val230);
                }
                iprot.readMapEnd();
              }
              struct.setDict_string_id_to_int_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // UNUSED_OUTPUT_COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                struct.unused_output_column_name = new java.util.ArrayList<java.lang.String>(_list232.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem233;
                for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                {
                  _elem233 = iprot.readString();
                  struct.unused_output_column_name.add(_elem233);
                }
                iprot.readListEnd();
              }
              struct.setUnused_output_column_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SORTED_BY_KEYS_PER_TABLET
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sorted_by_keys_per_tablet = iprot.readBool();
              struct.setSorted_by_keys_per_tabletIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // BUCKET_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list235 = iprot.readListBegin();
                struct.bucket_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list235.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem236;
                for (int _i237 = 0; _i237 < _list235.size; ++_i237)
                {
                  _elem236 = new io.datafibre.fibre.thrift.TExpr();
                  _elem236.read(iprot);
                  struct.bucket_exprs.add(_elem236);
                }
                iprot.readListEnd();
              }
              struct.setBucket_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // SORT_KEY_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list238 = iprot.readListBegin();
                struct.sort_key_column_names = new java.util.ArrayList<java.lang.String>(_list238.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem239;
                for (int _i240 = 0; _i240 < _list238.size; ++_i240)
                {
                  _elem239 = iprot.readString();
                  struct.sort_key_column_names.add(_elem239);
                }
                iprot.readListEnd();
              }
              struct.setSort_key_column_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // MAX_PARALLEL_SCAN_INSTANCE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_parallel_scan_instance_num = iprot.readI32();
              struct.setMax_parallel_scan_instance_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // COLUMN_ACCESS_PATHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list241 = iprot.readListBegin();
                struct.column_access_paths = new java.util.ArrayList<TColumnAccessPath>(_list241.size);
                @org.apache.thrift.annotation.Nullable TColumnAccessPath _elem242;
                for (int _i243 = 0; _i243 < _list241.size; ++_i243)
                {
                  _elem242 = new TColumnAccessPath();
                  _elem242.read(iprot);
                  struct.column_access_paths.add(_elem242);
                }
                iprot.readListEnd();
              }
              struct.setColumn_access_pathsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // USE_PK_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_pk_index = iprot.readBool();
              struct.setUse_pk_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // COLUMNS_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list244 = iprot.readListBegin();
                struct.columns_desc = new java.util.ArrayList<io.datafibre.fibre.thrift.TColumn>(_list244.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TColumn _elem245;
                for (int _i246 = 0; _i246 < _list244.size; ++_i246)
                {
                  _elem245 = new io.datafibre.fibre.thrift.TColumn();
                  _elem245.read(iprot);
                  struct.columns_desc.add(_elem245);
                }
                iprot.readListEnd();
              }
              struct.setColumns_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // OUTPUT_CHUNK_BY_BUCKET
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.output_chunk_by_bucket = iprot.readBool();
              struct.setOutput_chunk_by_bucketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // OUTPUT_ASC_HINT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.output_asc_hint = iprot.readBool();
              struct.setOutput_asc_hintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // PARTITION_ORDER_HINT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.partition_order_hint = iprot.readBool();
              struct.setPartition_order_hintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tuple_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIs_preaggregation()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_preaggregation' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TOlapScanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.tuple_id);
      oprot.writeFieldEnd();
      if (struct.key_column_name != null) {
        oprot.writeFieldBegin(KEY_COLUMN_NAME_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.key_column_name.size()));
          for (java.lang.String _iter247 : struct.key_column_name)
          {
            oprot.writeString(_iter247);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.key_column_type != null) {
        oprot.writeFieldBegin(KEY_COLUMN_TYPE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.key_column_type.size()));
          for (io.datafibre.fibre.thrift.TPrimitiveType _iter248 : struct.key_column_type)
          {
            oprot.writeI32(_iter248.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_PREAGGREGATION_FIELD_DESC);
      oprot.writeBool(struct.is_preaggregation);
      oprot.writeFieldEnd();
      if (struct.sort_column != null) {
        if (struct.isSetSort_column()) {
          oprot.writeFieldBegin(SORT_COLUMN_FIELD_DESC);
          oprot.writeString(struct.sort_column);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rollup_name != null) {
        if (struct.isSetRollup_name()) {
          oprot.writeFieldBegin(ROLLUP_NAME_FIELD_DESC);
          oprot.writeString(struct.rollup_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sql_predicates != null) {
        if (struct.isSetSql_predicates()) {
          oprot.writeFieldBegin(SQL_PREDICATES_FIELD_DESC);
          oprot.writeString(struct.sql_predicates);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_column_expr_predicate()) {
        oprot.writeFieldBegin(ENABLE_COLUMN_EXPR_PREDICATE_FIELD_DESC);
        oprot.writeBool(struct.enable_column_expr_predicate);
        oprot.writeFieldEnd();
      }
      if (struct.dict_string_id_to_int_ids != null) {
        if (struct.isSetDict_string_id_to_int_ids()) {
          oprot.writeFieldBegin(DICT_STRING_ID_TO_INT_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.dict_string_id_to_int_ids.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter249 : struct.dict_string_id_to_int_ids.entrySet())
            {
              oprot.writeI32(_iter249.getKey());
              oprot.writeI32(_iter249.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.unused_output_column_name != null) {
        if (struct.isSetUnused_output_column_name()) {
          oprot.writeFieldBegin(UNUSED_OUTPUT_COLUMN_NAME_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.unused_output_column_name.size()));
            for (java.lang.String _iter250 : struct.unused_output_column_name)
            {
              oprot.writeString(_iter250);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSorted_by_keys_per_tablet()) {
        oprot.writeFieldBegin(SORTED_BY_KEYS_PER_TABLET_FIELD_DESC);
        oprot.writeBool(struct.sorted_by_keys_per_tablet);
        oprot.writeFieldEnd();
      }
      if (struct.bucket_exprs != null) {
        if (struct.isSetBucket_exprs()) {
          oprot.writeFieldBegin(BUCKET_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bucket_exprs.size()));
            for (io.datafibre.fibre.thrift.TExpr _iter251 : struct.bucket_exprs)
            {
              _iter251.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sort_key_column_names != null) {
        if (struct.isSetSort_key_column_names()) {
          oprot.writeFieldBegin(SORT_KEY_COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sort_key_column_names.size()));
            for (java.lang.String _iter252 : struct.sort_key_column_names)
            {
              oprot.writeString(_iter252);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMax_parallel_scan_instance_num()) {
        oprot.writeFieldBegin(MAX_PARALLEL_SCAN_INSTANCE_NUM_FIELD_DESC);
        oprot.writeI32(struct.max_parallel_scan_instance_num);
        oprot.writeFieldEnd();
      }
      if (struct.column_access_paths != null) {
        if (struct.isSetColumn_access_paths()) {
          oprot.writeFieldBegin(COLUMN_ACCESS_PATHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.column_access_paths.size()));
            for (TColumnAccessPath _iter253 : struct.column_access_paths)
            {
              _iter253.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUse_pk_index()) {
        oprot.writeFieldBegin(USE_PK_INDEX_FIELD_DESC);
        oprot.writeBool(struct.use_pk_index);
        oprot.writeFieldEnd();
      }
      if (struct.columns_desc != null) {
        if (struct.isSetColumns_desc()) {
          oprot.writeFieldBegin(COLUMNS_DESC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns_desc.size()));
            for (io.datafibre.fibre.thrift.TColumn _iter254 : struct.columns_desc)
            {
              _iter254.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOutput_chunk_by_bucket()) {
        oprot.writeFieldBegin(OUTPUT_CHUNK_BY_BUCKET_FIELD_DESC);
        oprot.writeBool(struct.output_chunk_by_bucket);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOutput_asc_hint()) {
        oprot.writeFieldBegin(OUTPUT_ASC_HINT_FIELD_DESC);
        oprot.writeBool(struct.output_asc_hint);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartition_order_hint()) {
        oprot.writeFieldBegin(PARTITION_ORDER_HINT_FIELD_DESC);
        oprot.writeBool(struct.partition_order_hint);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOlapScanNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapScanNodeTupleScheme getScheme() {
      return new TOlapScanNodeTupleScheme();
    }
  }

  private static class TOlapScanNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TOlapScanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOlapScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.tuple_id);
      {
        oprot.writeI32(struct.key_column_name.size());
        for (java.lang.String _iter255 : struct.key_column_name)
        {
          oprot.writeString(_iter255);
        }
      }
      {
        oprot.writeI32(struct.key_column_type.size());
        for (io.datafibre.fibre.thrift.TPrimitiveType _iter256 : struct.key_column_type)
        {
          oprot.writeI32(_iter256.getValue());
        }
      }
      oprot.writeBool(struct.is_preaggregation);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSort_column()) {
        optionals.set(0);
      }
      if (struct.isSetRollup_name()) {
        optionals.set(1);
      }
      if (struct.isSetSql_predicates()) {
        optionals.set(2);
      }
      if (struct.isSetEnable_column_expr_predicate()) {
        optionals.set(3);
      }
      if (struct.isSetDict_string_id_to_int_ids()) {
        optionals.set(4);
      }
      if (struct.isSetUnused_output_column_name()) {
        optionals.set(5);
      }
      if (struct.isSetSorted_by_keys_per_tablet()) {
        optionals.set(6);
      }
      if (struct.isSetBucket_exprs()) {
        optionals.set(7);
      }
      if (struct.isSetSort_key_column_names()) {
        optionals.set(8);
      }
      if (struct.isSetMax_parallel_scan_instance_num()) {
        optionals.set(9);
      }
      if (struct.isSetColumn_access_paths()) {
        optionals.set(10);
      }
      if (struct.isSetUse_pk_index()) {
        optionals.set(11);
      }
      if (struct.isSetColumns_desc()) {
        optionals.set(12);
      }
      if (struct.isSetOutput_chunk_by_bucket()) {
        optionals.set(13);
      }
      if (struct.isSetOutput_asc_hint()) {
        optionals.set(14);
      }
      if (struct.isSetPartition_order_hint()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetSort_column()) {
        oprot.writeString(struct.sort_column);
      }
      if (struct.isSetRollup_name()) {
        oprot.writeString(struct.rollup_name);
      }
      if (struct.isSetSql_predicates()) {
        oprot.writeString(struct.sql_predicates);
      }
      if (struct.isSetEnable_column_expr_predicate()) {
        oprot.writeBool(struct.enable_column_expr_predicate);
      }
      if (struct.isSetDict_string_id_to_int_ids()) {
        {
          oprot.writeI32(struct.dict_string_id_to_int_ids.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter257 : struct.dict_string_id_to_int_ids.entrySet())
          {
            oprot.writeI32(_iter257.getKey());
            oprot.writeI32(_iter257.getValue());
          }
        }
      }
      if (struct.isSetUnused_output_column_name()) {
        {
          oprot.writeI32(struct.unused_output_column_name.size());
          for (java.lang.String _iter258 : struct.unused_output_column_name)
          {
            oprot.writeString(_iter258);
          }
        }
      }
      if (struct.isSetSorted_by_keys_per_tablet()) {
        oprot.writeBool(struct.sorted_by_keys_per_tablet);
      }
      if (struct.isSetBucket_exprs()) {
        {
          oprot.writeI32(struct.bucket_exprs.size());
          for (io.datafibre.fibre.thrift.TExpr _iter259 : struct.bucket_exprs)
          {
            _iter259.write(oprot);
          }
        }
      }
      if (struct.isSetSort_key_column_names()) {
        {
          oprot.writeI32(struct.sort_key_column_names.size());
          for (java.lang.String _iter260 : struct.sort_key_column_names)
          {
            oprot.writeString(_iter260);
          }
        }
      }
      if (struct.isSetMax_parallel_scan_instance_num()) {
        oprot.writeI32(struct.max_parallel_scan_instance_num);
      }
      if (struct.isSetColumn_access_paths()) {
        {
          oprot.writeI32(struct.column_access_paths.size());
          for (TColumnAccessPath _iter261 : struct.column_access_paths)
          {
            _iter261.write(oprot);
          }
        }
      }
      if (struct.isSetUse_pk_index()) {
        oprot.writeBool(struct.use_pk_index);
      }
      if (struct.isSetColumns_desc()) {
        {
          oprot.writeI32(struct.columns_desc.size());
          for (io.datafibre.fibre.thrift.TColumn _iter262 : struct.columns_desc)
          {
            _iter262.write(oprot);
          }
        }
      }
      if (struct.isSetOutput_chunk_by_bucket()) {
        oprot.writeBool(struct.output_chunk_by_bucket);
      }
      if (struct.isSetOutput_asc_hint()) {
        oprot.writeBool(struct.output_asc_hint);
      }
      if (struct.isSetPartition_order_hint()) {
        oprot.writeBool(struct.partition_order_hint);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOlapScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tuple_id = iprot.readI32();
      struct.setTuple_idIsSet(true);
      {
        org.apache.thrift.protocol.TList _list263 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.key_column_name = new java.util.ArrayList<java.lang.String>(_list263.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem264;
        for (int _i265 = 0; _i265 < _list263.size; ++_i265)
        {
          _elem264 = iprot.readString();
          struct.key_column_name.add(_elem264);
        }
      }
      struct.setKey_column_nameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list266 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
        struct.key_column_type = new java.util.ArrayList<io.datafibre.fibre.thrift.TPrimitiveType>(_list266.size);
        @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPrimitiveType _elem267;
        for (int _i268 = 0; _i268 < _list266.size; ++_i268)
        {
          _elem267 = io.datafibre.fibre.thrift.TPrimitiveType.findByValue(iprot.readI32());
          if (_elem267 != null)
          {
            struct.key_column_type.add(_elem267);
          }
        }
      }
      struct.setKey_column_typeIsSet(true);
      struct.is_preaggregation = iprot.readBool();
      struct.setIs_preaggregationIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.sort_column = iprot.readString();
        struct.setSort_columnIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rollup_name = iprot.readString();
        struct.setRollup_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sql_predicates = iprot.readString();
        struct.setSql_predicatesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.enable_column_expr_predicate = iprot.readBool();
        struct.setEnable_column_expr_predicateIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map269 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32); 
          struct.dict_string_id_to_int_ids = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map269.size);
          int _key270;
          int _val271;
          for (int _i272 = 0; _i272 < _map269.size; ++_i272)
          {
            _key270 = iprot.readI32();
            _val271 = iprot.readI32();
            struct.dict_string_id_to_int_ids.put(_key270, _val271);
          }
        }
        struct.setDict_string_id_to_int_idsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list273 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.unused_output_column_name = new java.util.ArrayList<java.lang.String>(_list273.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem274;
          for (int _i275 = 0; _i275 < _list273.size; ++_i275)
          {
            _elem274 = iprot.readString();
            struct.unused_output_column_name.add(_elem274);
          }
        }
        struct.setUnused_output_column_nameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sorted_by_keys_per_tablet = iprot.readBool();
        struct.setSorted_by_keys_per_tabletIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list276 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.bucket_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list276.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem277;
          for (int _i278 = 0; _i278 < _list276.size; ++_i278)
          {
            _elem277 = new io.datafibre.fibre.thrift.TExpr();
            _elem277.read(iprot);
            struct.bucket_exprs.add(_elem277);
          }
        }
        struct.setBucket_exprsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list279 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.sort_key_column_names = new java.util.ArrayList<java.lang.String>(_list279.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem280;
          for (int _i281 = 0; _i281 < _list279.size; ++_i281)
          {
            _elem280 = iprot.readString();
            struct.sort_key_column_names.add(_elem280);
          }
        }
        struct.setSort_key_column_namesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.max_parallel_scan_instance_num = iprot.readI32();
        struct.setMax_parallel_scan_instance_numIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list282 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.column_access_paths = new java.util.ArrayList<TColumnAccessPath>(_list282.size);
          @org.apache.thrift.annotation.Nullable TColumnAccessPath _elem283;
          for (int _i284 = 0; _i284 < _list282.size; ++_i284)
          {
            _elem283 = new TColumnAccessPath();
            _elem283.read(iprot);
            struct.column_access_paths.add(_elem283);
          }
        }
        struct.setColumn_access_pathsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.use_pk_index = iprot.readBool();
        struct.setUse_pk_indexIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list285 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.columns_desc = new java.util.ArrayList<io.datafibre.fibre.thrift.TColumn>(_list285.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TColumn _elem286;
          for (int _i287 = 0; _i287 < _list285.size; ++_i287)
          {
            _elem286 = new io.datafibre.fibre.thrift.TColumn();
            _elem286.read(iprot);
            struct.columns_desc.add(_elem286);
          }
        }
        struct.setColumns_descIsSet(true);
      }
      if (incoming.get(13)) {
        struct.output_chunk_by_bucket = iprot.readBool();
        struct.setOutput_chunk_by_bucketIsSet(true);
      }
      if (incoming.get(14)) {
        struct.output_asc_hint = iprot.readBool();
        struct.setOutput_asc_hintIsSet(true);
      }
      if (incoming.get(15)) {
        struct.partition_order_hint = iprot.readBool();
        struct.setPartition_order_hintIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

