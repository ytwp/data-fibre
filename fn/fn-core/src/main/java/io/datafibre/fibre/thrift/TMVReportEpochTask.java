/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TMVReportEpochTask implements org.apache.thrift.TBase<TMVReportEpochTask, TMVReportEpochTask._Fields>, java.io.Serializable, Cloneable, Comparable<TMVReportEpochTask> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMVReportEpochTask");

  private static final org.apache.thrift.protocol.TField EPOCH_FIELD_DESC = new org.apache.thrift.protocol.TField("epoch", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BINLOG_CONSUME_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("binlog_consume_state", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField TXN_COMMIT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_commit_info", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TXN_FAIL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_fail_info", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMVReportEpochTaskStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMVReportEpochTaskTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TMVEpoch epoch; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>> binlog_consume_state; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TTabletCommitInfo> txn_commit_info; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TTabletFailInfo> txn_fail_info; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EPOCH((short)1, "epoch"),
    BINLOG_CONSUME_STATE((short)2, "binlog_consume_state"),
    TXN_COMMIT_INFO((short)3, "txn_commit_info"),
    TXN_FAIL_INFO((short)4, "txn_fail_info");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EPOCH
          return EPOCH;
        case 2: // BINLOG_CONSUME_STATE
          return BINLOG_CONSUME_STATE;
        case 3: // TXN_COMMIT_INFO
          return TXN_COMMIT_INFO;
        case 4: // TXN_FAIL_INFO
          return TXN_FAIL_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.EPOCH,_Fields.BINLOG_CONSUME_STATE,_Fields.TXN_COMMIT_INFO,_Fields.TXN_FAIL_INFO};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EPOCH, new org.apache.thrift.meta_data.FieldMetaData("epoch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMVEpoch.class)));
    tmpMap.put(_Fields.BINLOG_CONSUME_STATE, new org.apache.thrift.meta_data.FieldMetaData("binlog_consume_state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TUniqueId.class), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32                , "TPlanNodeId"), 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TScanRange.class))))));
    tmpMap.put(_Fields.TXN_COMMIT_INFO, new org.apache.thrift.meta_data.FieldMetaData("txn_commit_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TTabletCommitInfo.class))));
    tmpMap.put(_Fields.TXN_FAIL_INFO, new org.apache.thrift.meta_data.FieldMetaData("txn_fail_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TTabletFailInfo.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMVReportEpochTask.class, metaDataMap);
  }

  public TMVReportEpochTask() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMVReportEpochTask(TMVReportEpochTask other) {
    if (other.isSetEpoch()) {
      this.epoch = new TMVEpoch(other.epoch);
    }
    if (other.isSetBinlog_consume_state()) {
      java.util.Map<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>> __this__binlog_consume_state = new java.util.HashMap<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>>(other.binlog_consume_state.size());
      for (java.util.Map.Entry<com.starrocks.thrift.TUniqueId, java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>> other_element : other.binlog_consume_state.entrySet()) {

        com.starrocks.thrift.TUniqueId other_element_key = other_element.getKey();
        java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>> other_element_value = other_element.getValue();

        com.starrocks.thrift.TUniqueId __this__binlog_consume_state_copy_key = new com.starrocks.thrift.TUniqueId(other_element_key);

        java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>> __this__binlog_consume_state_copy_value = new java.util.HashMap<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>(other_element_value.size());
        for (java.util.Map.Entry<java.lang.Integer, java.util.List<com.starrocks.thrift.TScanRange>> other_element_value_element : other_element_value.entrySet()) {

          java.lang.Integer other_element_value_element_key = other_element_value_element.getKey();
          java.util.List<com.starrocks.thrift.TScanRange> other_element_value_element_value = other_element_value_element.getValue();

          java.lang.Integer __this__binlog_consume_state_copy_value_copy_key = other_element_value_element_key;

          java.util.List<com.starrocks.thrift.TScanRange> __this__binlog_consume_state_copy_value_copy_value = new java.util.ArrayList<com.starrocks.thrift.TScanRange>(other_element_value_element_value.size());
          for (com.starrocks.thrift.TScanRange other_element_value_element_value_element : other_element_value_element_value) {
            __this__binlog_consume_state_copy_value_copy_value.add(new com.starrocks.thrift.TScanRange(other_element_value_element_value_element));
          }

          __this__binlog_consume_state_copy_value.put(__this__binlog_consume_state_copy_value_copy_key, __this__binlog_consume_state_copy_value_copy_value);
        }

        __this__binlog_consume_state.put(__this__binlog_consume_state_copy_key, __this__binlog_consume_state_copy_value);
      }
      this.binlog_consume_state = __this__binlog_consume_state;
    }
    if (other.isSetTxn_commit_info()) {
      java.util.List<com.starrocks.thrift.TTabletCommitInfo> __this__txn_commit_info = new java.util.ArrayList<com.starrocks.thrift.TTabletCommitInfo>(other.txn_commit_info.size());
      for (com.starrocks.thrift.TTabletCommitInfo other_element : other.txn_commit_info) {
        __this__txn_commit_info.add(new com.starrocks.thrift.TTabletCommitInfo(other_element));
      }
      this.txn_commit_info = __this__txn_commit_info;
    }
    if (other.isSetTxn_fail_info()) {
      java.util.List<com.starrocks.thrift.TTabletFailInfo> __this__txn_fail_info = new java.util.ArrayList<com.starrocks.thrift.TTabletFailInfo>(other.txn_fail_info.size());
      for (com.starrocks.thrift.TTabletFailInfo other_element : other.txn_fail_info) {
        __this__txn_fail_info.add(new com.starrocks.thrift.TTabletFailInfo(other_element));
      }
      this.txn_fail_info = __this__txn_fail_info;
    }
  }

  @Override
  public TMVReportEpochTask deepCopy() {
    return new TMVReportEpochTask(this);
  }

  @Override
  public void clear() {
    this.epoch = null;
    this.binlog_consume_state = null;
    this.txn_commit_info = null;
    this.txn_fail_info = null;
  }

  @org.apache.thrift.annotation.Nullable
  public TMVEpoch getEpoch() {
    return this.epoch;
  }

  public TMVReportEpochTask setEpoch(@org.apache.thrift.annotation.Nullable TMVEpoch epoch) {
    this.epoch = epoch;
    return this;
  }

  public void unsetEpoch() {
    this.epoch = null;
  }

  /** Returns true if field epoch is set (has been assigned a value) and false otherwise */
  public boolean isSetEpoch() {
    return this.epoch != null;
  }

  public void setEpochIsSet(boolean value) {
    if (!value) {
      this.epoch = null;
    }
  }

  public int getBinlog_consume_stateSize() {
    return (this.binlog_consume_state == null) ? 0 : this.binlog_consume_state.size();
  }

  public void putToBinlog_consume_state(com.starrocks.thrift.TUniqueId key, java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>> val) {
    if (this.binlog_consume_state == null) {
      this.binlog_consume_state = new java.util.HashMap<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>>();
    }
    this.binlog_consume_state.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>> getBinlog_consume_state() {
    return this.binlog_consume_state;
  }

  public TMVReportEpochTask setBinlog_consume_state(@org.apache.thrift.annotation.Nullable java.util.Map<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>> binlog_consume_state) {
    this.binlog_consume_state = binlog_consume_state;
    return this;
  }

  public void unsetBinlog_consume_state() {
    this.binlog_consume_state = null;
  }

  /** Returns true if field binlog_consume_state is set (has been assigned a value) and false otherwise */
  public boolean isSetBinlog_consume_state() {
    return this.binlog_consume_state != null;
  }

  public void setBinlog_consume_stateIsSet(boolean value) {
    if (!value) {
      this.binlog_consume_state = null;
    }
  }

  public int getTxn_commit_infoSize() {
    return (this.txn_commit_info == null) ? 0 : this.txn_commit_info.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TTabletCommitInfo> getTxn_commit_infoIterator() {
    return (this.txn_commit_info == null) ? null : this.txn_commit_info.iterator();
  }

  public void addToTxn_commit_info(com.starrocks.thrift.TTabletCommitInfo elem) {
    if (this.txn_commit_info == null) {
      this.txn_commit_info = new java.util.ArrayList<com.starrocks.thrift.TTabletCommitInfo>();
    }
    this.txn_commit_info.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TTabletCommitInfo> getTxn_commit_info() {
    return this.txn_commit_info;
  }

  public TMVReportEpochTask setTxn_commit_info(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TTabletCommitInfo> txn_commit_info) {
    this.txn_commit_info = txn_commit_info;
    return this;
  }

  public void unsetTxn_commit_info() {
    this.txn_commit_info = null;
  }

  /** Returns true if field txn_commit_info is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_commit_info() {
    return this.txn_commit_info != null;
  }

  public void setTxn_commit_infoIsSet(boolean value) {
    if (!value) {
      this.txn_commit_info = null;
    }
  }

  public int getTxn_fail_infoSize() {
    return (this.txn_fail_info == null) ? 0 : this.txn_fail_info.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TTabletFailInfo> getTxn_fail_infoIterator() {
    return (this.txn_fail_info == null) ? null : this.txn_fail_info.iterator();
  }

  public void addToTxn_fail_info(com.starrocks.thrift.TTabletFailInfo elem) {
    if (this.txn_fail_info == null) {
      this.txn_fail_info = new java.util.ArrayList<com.starrocks.thrift.TTabletFailInfo>();
    }
    this.txn_fail_info.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TTabletFailInfo> getTxn_fail_info() {
    return this.txn_fail_info;
  }

  public TMVReportEpochTask setTxn_fail_info(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TTabletFailInfo> txn_fail_info) {
    this.txn_fail_info = txn_fail_info;
    return this;
  }

  public void unsetTxn_fail_info() {
    this.txn_fail_info = null;
  }

  /** Returns true if field txn_fail_info is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_fail_info() {
    return this.txn_fail_info != null;
  }

  public void setTxn_fail_infoIsSet(boolean value) {
    if (!value) {
      this.txn_fail_info = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case EPOCH:
      if (value == null) {
        unsetEpoch();
      } else {
        setEpoch((TMVEpoch)value);
      }
      break;

    case BINLOG_CONSUME_STATE:
      if (value == null) {
        unsetBinlog_consume_state();
      } else {
        setBinlog_consume_state((java.util.Map<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>>)value);
      }
      break;

    case TXN_COMMIT_INFO:
      if (value == null) {
        unsetTxn_commit_info();
      } else {
        setTxn_commit_info((java.util.List<com.starrocks.thrift.TTabletCommitInfo>)value);
      }
      break;

    case TXN_FAIL_INFO:
      if (value == null) {
        unsetTxn_fail_info();
      } else {
        setTxn_fail_info((java.util.List<com.starrocks.thrift.TTabletFailInfo>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case EPOCH:
      return getEpoch();

    case BINLOG_CONSUME_STATE:
      return getBinlog_consume_state();

    case TXN_COMMIT_INFO:
      return getTxn_commit_info();

    case TXN_FAIL_INFO:
      return getTxn_fail_info();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case EPOCH:
      return isSetEpoch();
    case BINLOG_CONSUME_STATE:
      return isSetBinlog_consume_state();
    case TXN_COMMIT_INFO:
      return isSetTxn_commit_info();
    case TXN_FAIL_INFO:
      return isSetTxn_fail_info();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TMVReportEpochTask)
      return this.equals((TMVReportEpochTask)that);
    return false;
  }

  public boolean equals(TMVReportEpochTask that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_epoch = true && this.isSetEpoch();
    boolean that_present_epoch = true && that.isSetEpoch();
    if (this_present_epoch || that_present_epoch) {
      if (!(this_present_epoch && that_present_epoch))
        return false;
      if (!this.epoch.equals(that.epoch))
        return false;
    }

    boolean this_present_binlog_consume_state = true && this.isSetBinlog_consume_state();
    boolean that_present_binlog_consume_state = true && that.isSetBinlog_consume_state();
    if (this_present_binlog_consume_state || that_present_binlog_consume_state) {
      if (!(this_present_binlog_consume_state && that_present_binlog_consume_state))
        return false;
      if (!this.binlog_consume_state.equals(that.binlog_consume_state))
        return false;
    }

    boolean this_present_txn_commit_info = true && this.isSetTxn_commit_info();
    boolean that_present_txn_commit_info = true && that.isSetTxn_commit_info();
    if (this_present_txn_commit_info || that_present_txn_commit_info) {
      if (!(this_present_txn_commit_info && that_present_txn_commit_info))
        return false;
      if (!this.txn_commit_info.equals(that.txn_commit_info))
        return false;
    }

    boolean this_present_txn_fail_info = true && this.isSetTxn_fail_info();
    boolean that_present_txn_fail_info = true && that.isSetTxn_fail_info();
    if (this_present_txn_fail_info || that_present_txn_fail_info) {
      if (!(this_present_txn_fail_info && that_present_txn_fail_info))
        return false;
      if (!this.txn_fail_info.equals(that.txn_fail_info))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEpoch()) ? 131071 : 524287);
    if (isSetEpoch())
      hashCode = hashCode * 8191 + epoch.hashCode();

    hashCode = hashCode * 8191 + ((isSetBinlog_consume_state()) ? 131071 : 524287);
    if (isSetBinlog_consume_state())
      hashCode = hashCode * 8191 + binlog_consume_state.hashCode();

    hashCode = hashCode * 8191 + ((isSetTxn_commit_info()) ? 131071 : 524287);
    if (isSetTxn_commit_info())
      hashCode = hashCode * 8191 + txn_commit_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetTxn_fail_info()) ? 131071 : 524287);
    if (isSetTxn_fail_info())
      hashCode = hashCode * 8191 + txn_fail_info.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TMVReportEpochTask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetEpoch(), other.isSetEpoch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEpoch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.epoch, other.epoch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBinlog_consume_state(), other.isSetBinlog_consume_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinlog_consume_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binlog_consume_state, other.binlog_consume_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxn_commit_info(), other.isSetTxn_commit_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_commit_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_commit_info, other.txn_commit_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxn_fail_info(), other.isSetTxn_fail_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_fail_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_fail_info, other.txn_fail_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMVReportEpochTask(");
    boolean first = true;

    if (isSetEpoch()) {
      sb.append("epoch:");
      if (this.epoch == null) {
        sb.append("null");
      } else {
        sb.append(this.epoch);
      }
      first = false;
    }
    if (isSetBinlog_consume_state()) {
      if (!first) sb.append(", ");
      sb.append("binlog_consume_state:");
      if (this.binlog_consume_state == null) {
        sb.append("null");
      } else {
        sb.append(this.binlog_consume_state);
      }
      first = false;
    }
    if (isSetTxn_commit_info()) {
      if (!first) sb.append(", ");
      sb.append("txn_commit_info:");
      if (this.txn_commit_info == null) {
        sb.append("null");
      } else {
        sb.append(this.txn_commit_info);
      }
      first = false;
    }
    if (isSetTxn_fail_info()) {
      if (!first) sb.append(", ");
      sb.append("txn_fail_info:");
      if (this.txn_fail_info == null) {
        sb.append("null");
      } else {
        sb.append(this.txn_fail_info);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (epoch != null) {
      epoch.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMVReportEpochTaskStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMVReportEpochTaskStandardScheme getScheme() {
      return new TMVReportEpochTaskStandardScheme();
    }
  }

  private static class TMVReportEpochTaskStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMVReportEpochTask> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TMVReportEpochTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EPOCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.epoch = new TMVEpoch();
              struct.epoch.read(iprot);
              struct.setEpochIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BINLOG_CONSUME_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin();
                struct.binlog_consume_state = new java.util.HashMap<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>>(2*_map44.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId _key45;
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>> _val46;
                for (int _i47 = 0; _i47 < _map44.size; ++_i47)
                {
                  _key45 = new com.starrocks.thrift.TUniqueId();
                  _key45.read(iprot);
                  {
                    org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                    _val46 = new java.util.HashMap<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>(2*_map48.size);
                    int _key49;
                    @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TScanRange> _val50;
                    for (int _i51 = 0; _i51 < _map48.size; ++_i51)
                    {
                      _key49 = iprot.readI32();
                      {
                        org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                        _val50 = new java.util.ArrayList<com.starrocks.thrift.TScanRange>(_list52.size);
                        @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TScanRange _elem53;
                        for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                        {
                          _elem53 = new com.starrocks.thrift.TScanRange();
                          _elem53.read(iprot);
                          _val50.add(_elem53);
                        }
                        iprot.readListEnd();
                      }
                      _val46.put(_key49, _val50);
                    }
                    iprot.readMapEnd();
                  }
                  struct.binlog_consume_state.put(_key45, _val46);
                }
                iprot.readMapEnd();
              }
              struct.setBinlog_consume_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TXN_COMMIT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list55 = iprot.readListBegin();
                struct.txn_commit_info = new java.util.ArrayList<com.starrocks.thrift.TTabletCommitInfo>(_list55.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTabletCommitInfo _elem56;
                for (int _i57 = 0; _i57 < _list55.size; ++_i57)
                {
                  _elem56 = new com.starrocks.thrift.TTabletCommitInfo();
                  _elem56.read(iprot);
                  struct.txn_commit_info.add(_elem56);
                }
                iprot.readListEnd();
              }
              struct.setTxn_commit_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TXN_FAIL_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                struct.txn_fail_info = new java.util.ArrayList<com.starrocks.thrift.TTabletFailInfo>(_list58.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTabletFailInfo _elem59;
                for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                {
                  _elem59 = new com.starrocks.thrift.TTabletFailInfo();
                  _elem59.read(iprot);
                  struct.txn_fail_info.add(_elem59);
                }
                iprot.readListEnd();
              }
              struct.setTxn_fail_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TMVReportEpochTask struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.epoch != null) {
        if (struct.isSetEpoch()) {
          oprot.writeFieldBegin(EPOCH_FIELD_DESC);
          struct.epoch.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.binlog_consume_state != null) {
        if (struct.isSetBinlog_consume_state()) {
          oprot.writeFieldBegin(BINLOG_CONSUME_STATE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.MAP, struct.binlog_consume_state.size()));
            for (java.util.Map.Entry<com.starrocks.thrift.TUniqueId, java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>> _iter61 : struct.binlog_consume_state.entrySet())
            {
              _iter61.getKey().write(oprot);
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, _iter61.getValue().size()));
                for (java.util.Map.Entry<java.lang.Integer, java.util.List<com.starrocks.thrift.TScanRange>> _iter62 : _iter61.getValue().entrySet())
                {
                  oprot.writeI32(_iter62.getKey());
                  {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter62.getValue().size()));
                    for (com.starrocks.thrift.TScanRange _iter63 : _iter62.getValue())
                    {
                      _iter63.write(oprot);
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.txn_commit_info != null) {
        if (struct.isSetTxn_commit_info()) {
          oprot.writeFieldBegin(TXN_COMMIT_INFO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.txn_commit_info.size()));
            for (com.starrocks.thrift.TTabletCommitInfo _iter64 : struct.txn_commit_info)
            {
              _iter64.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.txn_fail_info != null) {
        if (struct.isSetTxn_fail_info()) {
          oprot.writeFieldBegin(TXN_FAIL_INFO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.txn_fail_info.size()));
            for (com.starrocks.thrift.TTabletFailInfo _iter65 : struct.txn_fail_info)
            {
              _iter65.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMVReportEpochTaskTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMVReportEpochTaskTupleScheme getScheme() {
      return new TMVReportEpochTaskTupleScheme();
    }
  }

  private static class TMVReportEpochTaskTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMVReportEpochTask> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMVReportEpochTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEpoch()) {
        optionals.set(0);
      }
      if (struct.isSetBinlog_consume_state()) {
        optionals.set(1);
      }
      if (struct.isSetTxn_commit_info()) {
        optionals.set(2);
      }
      if (struct.isSetTxn_fail_info()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEpoch()) {
        struct.epoch.write(oprot);
      }
      if (struct.isSetBinlog_consume_state()) {
        {
          oprot.writeI32(struct.binlog_consume_state.size());
          for (java.util.Map.Entry<com.starrocks.thrift.TUniqueId, java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>> _iter66 : struct.binlog_consume_state.entrySet())
          {
            _iter66.getKey().write(oprot);
            {
              oprot.writeI32(_iter66.getValue().size());
              for (java.util.Map.Entry<java.lang.Integer, java.util.List<com.starrocks.thrift.TScanRange>> _iter67 : _iter66.getValue().entrySet())
              {
                oprot.writeI32(_iter67.getKey());
                {
                  oprot.writeI32(_iter67.getValue().size());
                  for (com.starrocks.thrift.TScanRange _iter68 : _iter67.getValue())
                  {
                    _iter68.write(oprot);
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetTxn_commit_info()) {
        {
          oprot.writeI32(struct.txn_commit_info.size());
          for (com.starrocks.thrift.TTabletCommitInfo _iter69 : struct.txn_commit_info)
          {
            _iter69.write(oprot);
          }
        }
      }
      if (struct.isSetTxn_fail_info()) {
        {
          oprot.writeI32(struct.txn_fail_info.size());
          for (com.starrocks.thrift.TTabletFailInfo _iter70 : struct.txn_fail_info)
          {
            _iter70.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMVReportEpochTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.epoch = new TMVEpoch();
        struct.epoch.read(iprot);
        struct.setEpochIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map71 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.MAP); 
          struct.binlog_consume_state = new java.util.HashMap<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>>(2*_map71.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId _key72;
          @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>> _val73;
          for (int _i74 = 0; _i74 < _map71.size; ++_i74)
          {
            _key72 = new com.starrocks.thrift.TUniqueId();
            _key72.read(iprot);
            {
              org.apache.thrift.protocol.TMap _map75 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST); 
              _val73 = new java.util.HashMap<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>(2*_map75.size);
              int _key76;
              @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TScanRange> _val77;
              for (int _i78 = 0; _i78 < _map75.size; ++_i78)
              {
                _key76 = iprot.readI32();
                {
                  org.apache.thrift.protocol.TList _list79 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
                  _val77 = new java.util.ArrayList<com.starrocks.thrift.TScanRange>(_list79.size);
                  @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TScanRange _elem80;
                  for (int _i81 = 0; _i81 < _list79.size; ++_i81)
                  {
                    _elem80 = new com.starrocks.thrift.TScanRange();
                    _elem80.read(iprot);
                    _val77.add(_elem80);
                  }
                }
                _val73.put(_key76, _val77);
              }
            }
            struct.binlog_consume_state.put(_key72, _val73);
          }
        }
        struct.setBinlog_consume_stateIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list82 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.txn_commit_info = new java.util.ArrayList<com.starrocks.thrift.TTabletCommitInfo>(_list82.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTabletCommitInfo _elem83;
          for (int _i84 = 0; _i84 < _list82.size; ++_i84)
          {
            _elem83 = new com.starrocks.thrift.TTabletCommitInfo();
            _elem83.read(iprot);
            struct.txn_commit_info.add(_elem83);
          }
        }
        struct.setTxn_commit_infoIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list85 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.txn_fail_info = new java.util.ArrayList<com.starrocks.thrift.TTabletFailInfo>(_list85.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTabletFailInfo _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = new com.starrocks.thrift.TTabletFailInfo();
            _elem86.read(iprot);
            struct.txn_fail_info.add(_elem86);
          }
        }
        struct.setTxn_fail_infoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

