/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TTableMeta implements org.apache.thrift.TBase<TTableMeta, TTableMeta._Fields>, java.io.Serializable, Cloneable, Comparable<TTableMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableMeta");

  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("db_id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster_id", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BLOOMFILTER_FPP_FIELD_DESC = new org.apache.thrift.protocol.TField("bloomfilter_fpp", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField BASE_INDEX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("base_index_id", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField KEY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("key_type", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DISTRIBUTION_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("distribution_desc", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField INDEXES_FIELD_DESC = new org.apache.thrift.protocol.TField("indexes", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField PARTITION_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_info", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField INDEX_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("index_infos", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField COLOCATE_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("colocate_group", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField BLOOMFILTER_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("bloomfilter_columns", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField TABLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("table_type", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTableMetaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTableMetaTupleSchemeFactory();

  public long table_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional
  public long db_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // optional
  public int cluster_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String state; // optional
  public double bloomfilter_fpp; // optional
  public long base_index_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String key_type; // optional
  public @org.apache.thrift.annotation.Nullable TDistributionDesc distribution_desc; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TIndexMeta> indexes; // optional
  public @org.apache.thrift.annotation.Nullable TPartitionInfo partition_info; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TPartitionMeta> partitions; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TIndexInfo> index_infos; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String colocate_group; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> bloomfilter_columns; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_type; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_ID((short)1, "table_id"),
    TABLE_NAME((short)2, "table_name"),
    DB_ID((short)3, "db_id"),
    DB_NAME((short)4, "db_name"),
    CLUSTER_ID((short)5, "cluster_id"),
    STATE((short)6, "state"),
    BLOOMFILTER_FPP((short)7, "bloomfilter_fpp"),
    BASE_INDEX_ID((short)8, "base_index_id"),
    KEY_TYPE((short)9, "key_type"),
    DISTRIBUTION_DESC((short)10, "distribution_desc"),
    PROPERTIES((short)11, "properties"),
    INDEXES((short)12, "indexes"),
    PARTITION_INFO((short)13, "partition_info"),
    PARTITIONS((short)14, "partitions"),
    INDEX_INFOS((short)15, "index_infos"),
    COLOCATE_GROUP((short)16, "colocate_group"),
    BLOOMFILTER_COLUMNS((short)17, "bloomfilter_columns"),
    TABLE_TYPE((short)18, "table_type");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_ID
          return TABLE_ID;
        case 2: // TABLE_NAME
          return TABLE_NAME;
        case 3: // DB_ID
          return DB_ID;
        case 4: // DB_NAME
          return DB_NAME;
        case 5: // CLUSTER_ID
          return CLUSTER_ID;
        case 6: // STATE
          return STATE;
        case 7: // BLOOMFILTER_FPP
          return BLOOMFILTER_FPP;
        case 8: // BASE_INDEX_ID
          return BASE_INDEX_ID;
        case 9: // KEY_TYPE
          return KEY_TYPE;
        case 10: // DISTRIBUTION_DESC
          return DISTRIBUTION_DESC;
        case 11: // PROPERTIES
          return PROPERTIES;
        case 12: // INDEXES
          return INDEXES;
        case 13: // PARTITION_INFO
          return PARTITION_INFO;
        case 14: // PARTITIONS
          return PARTITIONS;
        case 15: // INDEX_INFOS
          return INDEX_INFOS;
        case 16: // COLOCATE_GROUP
          return COLOCATE_GROUP;
        case 17: // BLOOMFILTER_COLUMNS
          return BLOOMFILTER_COLUMNS;
        case 18: // TABLE_TYPE
          return TABLE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLE_ID_ISSET_ID = 0;
  private static final int __DB_ID_ISSET_ID = 1;
  private static final int __CLUSTER_ID_ISSET_ID = 2;
  private static final int __BLOOMFILTER_FPP_ISSET_ID = 3;
  private static final int __BASE_INDEX_ID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TABLE_ID,_Fields.TABLE_NAME,_Fields.DB_ID,_Fields.DB_NAME,_Fields.CLUSTER_ID,_Fields.STATE,_Fields.BLOOMFILTER_FPP,_Fields.BASE_INDEX_ID,_Fields.KEY_TYPE,_Fields.DISTRIBUTION_DESC,_Fields.PROPERTIES,_Fields.INDEXES,_Fields.PARTITION_INFO,_Fields.PARTITIONS,_Fields.INDEX_INFOS,_Fields.COLOCATE_GROUP,_Fields.BLOOMFILTER_COLUMNS,_Fields.TABLE_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_ID, new org.apache.thrift.meta_data.FieldMetaData("db_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("cluster_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BLOOMFILTER_FPP, new org.apache.thrift.meta_data.FieldMetaData("bloomfilter_fpp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BASE_INDEX_ID, new org.apache.thrift.meta_data.FieldMetaData("base_index_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.KEY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("key_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTRIBUTION_DESC, new org.apache.thrift.meta_data.FieldMetaData("distribution_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDistributionDesc.class)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INDEXES, new org.apache.thrift.meta_data.FieldMetaData("indexes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIndexMeta.class))));
    tmpMap.put(_Fields.PARTITION_INFO, new org.apache.thrift.meta_data.FieldMetaData("partition_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPartitionInfo.class)));
    tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPartitionMeta.class))));
    tmpMap.put(_Fields.INDEX_INFOS, new org.apache.thrift.meta_data.FieldMetaData("index_infos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIndexInfo.class))));
    tmpMap.put(_Fields.COLOCATE_GROUP, new org.apache.thrift.meta_data.FieldMetaData("colocate_group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BLOOMFILTER_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("bloomfilter_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TABLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("table_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableMeta.class, metaDataMap);
  }

  public TTableMeta() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableMeta(TTableMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    this.table_id = other.table_id;
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    this.db_id = other.db_id;
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    this.cluster_id = other.cluster_id;
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.bloomfilter_fpp = other.bloomfilter_fpp;
    this.base_index_id = other.base_index_id;
    if (other.isSetKey_type()) {
      this.key_type = other.key_type;
    }
    if (other.isSetDistribution_desc()) {
      this.distribution_desc = new TDistributionDesc(other.distribution_desc);
    }
    if (other.isSetProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.properties);
      this.properties = __this__properties;
    }
    if (other.isSetIndexes()) {
      java.util.List<TIndexMeta> __this__indexes = new java.util.ArrayList<TIndexMeta>(other.indexes.size());
      for (TIndexMeta other_element : other.indexes) {
        __this__indexes.add(new TIndexMeta(other_element));
      }
      this.indexes = __this__indexes;
    }
    if (other.isSetPartition_info()) {
      this.partition_info = new TPartitionInfo(other.partition_info);
    }
    if (other.isSetPartitions()) {
      java.util.List<TPartitionMeta> __this__partitions = new java.util.ArrayList<TPartitionMeta>(other.partitions.size());
      for (TPartitionMeta other_element : other.partitions) {
        __this__partitions.add(new TPartitionMeta(other_element));
      }
      this.partitions = __this__partitions;
    }
    if (other.isSetIndex_infos()) {
      java.util.List<TIndexInfo> __this__index_infos = new java.util.ArrayList<TIndexInfo>(other.index_infos.size());
      for (TIndexInfo other_element : other.index_infos) {
        __this__index_infos.add(new TIndexInfo(other_element));
      }
      this.index_infos = __this__index_infos;
    }
    if (other.isSetColocate_group()) {
      this.colocate_group = other.colocate_group;
    }
    if (other.isSetBloomfilter_columns()) {
      java.util.List<java.lang.String> __this__bloomfilter_columns = new java.util.ArrayList<java.lang.String>(other.bloomfilter_columns);
      this.bloomfilter_columns = __this__bloomfilter_columns;
    }
    if (other.isSetTable_type()) {
      this.table_type = other.table_type;
    }
  }

  @Override
  public TTableMeta deepCopy() {
    return new TTableMeta(this);
  }

  @Override
  public void clear() {
    setTable_idIsSet(false);
    this.table_id = 0;
    this.table_name = null;
    setDb_idIsSet(false);
    this.db_id = 0;
    this.db_name = null;
    setCluster_idIsSet(false);
    this.cluster_id = 0;
    this.state = null;
    setBloomfilter_fppIsSet(false);
    this.bloomfilter_fpp = 0.0;
    setBase_index_idIsSet(false);
    this.base_index_id = 0;
    this.key_type = null;
    this.distribution_desc = null;
    this.properties = null;
    this.indexes = null;
    this.partition_info = null;
    this.partitions = null;
    this.index_infos = null;
    this.colocate_group = null;
    this.bloomfilter_columns = null;
    this.table_type = null;
  }

  public long getTable_id() {
    return this.table_id;
  }

  public TTableMeta setTable_id(long table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_name() {
    return this.table_name;
  }

  public TTableMeta setTable_name(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public long getDb_id() {
    return this.db_id;
  }

  public TTableMeta setDb_id(long db_id) {
    this.db_id = db_id;
    setDb_idIsSet(true);
    return this;
  }

  public void unsetDb_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  /** Returns true if field db_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  public void setDb_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DB_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb_name() {
    return this.db_name;
  }

  public TTableMeta setDb_name(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  public int getCluster_id() {
    return this.cluster_id;
  }

  public TTableMeta setCluster_id(int cluster_id) {
    this.cluster_id = cluster_id;
    setCluster_idIsSet(true);
    return this;
  }

  public void unsetCluster_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLUSTER_ID_ISSET_ID);
  }

  /** Returns true if field cluster_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLUSTER_ID_ISSET_ID);
  }

  public void setCluster_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLUSTER_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getState() {
    return this.state;
  }

  public TTableMeta setState(@org.apache.thrift.annotation.Nullable java.lang.String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public double getBloomfilter_fpp() {
    return this.bloomfilter_fpp;
  }

  public TTableMeta setBloomfilter_fpp(double bloomfilter_fpp) {
    this.bloomfilter_fpp = bloomfilter_fpp;
    setBloomfilter_fppIsSet(true);
    return this;
  }

  public void unsetBloomfilter_fpp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOOMFILTER_FPP_ISSET_ID);
  }

  /** Returns true if field bloomfilter_fpp is set (has been assigned a value) and false otherwise */
  public boolean isSetBloomfilter_fpp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOOMFILTER_FPP_ISSET_ID);
  }

  public void setBloomfilter_fppIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOOMFILTER_FPP_ISSET_ID, value);
  }

  public long getBase_index_id() {
    return this.base_index_id;
  }

  public TTableMeta setBase_index_id(long base_index_id) {
    this.base_index_id = base_index_id;
    setBase_index_idIsSet(true);
    return this;
  }

  public void unsetBase_index_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BASE_INDEX_ID_ISSET_ID);
  }

  /** Returns true if field base_index_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBase_index_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BASE_INDEX_ID_ISSET_ID);
  }

  public void setBase_index_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BASE_INDEX_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getKey_type() {
    return this.key_type;
  }

  public TTableMeta setKey_type(@org.apache.thrift.annotation.Nullable java.lang.String key_type) {
    this.key_type = key_type;
    return this;
  }

  public void unsetKey_type() {
    this.key_type = null;
  }

  /** Returns true if field key_type is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_type() {
    return this.key_type != null;
  }

  public void setKey_typeIsSet(boolean value) {
    if (!value) {
      this.key_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDistributionDesc getDistribution_desc() {
    return this.distribution_desc;
  }

  public TTableMeta setDistribution_desc(@org.apache.thrift.annotation.Nullable TDistributionDesc distribution_desc) {
    this.distribution_desc = distribution_desc;
    return this;
  }

  public void unsetDistribution_desc() {
    this.distribution_desc = null;
  }

  /** Returns true if field distribution_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDistribution_desc() {
    return this.distribution_desc != null;
  }

  public void setDistribution_descIsSet(boolean value) {
    if (!value) {
      this.distribution_desc = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(java.lang.String key, java.lang.String val) {
    if (this.properties == null) {
      this.properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return this.properties;
  }

  public TTableMeta setProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public int getIndexesSize() {
    return (this.indexes == null) ? 0 : this.indexes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TIndexMeta> getIndexesIterator() {
    return (this.indexes == null) ? null : this.indexes.iterator();
  }

  public void addToIndexes(TIndexMeta elem) {
    if (this.indexes == null) {
      this.indexes = new java.util.ArrayList<TIndexMeta>();
    }
    this.indexes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TIndexMeta> getIndexes() {
    return this.indexes;
  }

  public TTableMeta setIndexes(@org.apache.thrift.annotation.Nullable java.util.List<TIndexMeta> indexes) {
    this.indexes = indexes;
    return this;
  }

  public void unsetIndexes() {
    this.indexes = null;
  }

  /** Returns true if field indexes is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexes() {
    return this.indexes != null;
  }

  public void setIndexesIsSet(boolean value) {
    if (!value) {
      this.indexes = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TPartitionInfo getPartition_info() {
    return this.partition_info;
  }

  public TTableMeta setPartition_info(@org.apache.thrift.annotation.Nullable TPartitionInfo partition_info) {
    this.partition_info = partition_info;
    return this;
  }

  public void unsetPartition_info() {
    this.partition_info = null;
  }

  /** Returns true if field partition_info is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_info() {
    return this.partition_info != null;
  }

  public void setPartition_infoIsSet(boolean value) {
    if (!value) {
      this.partition_info = null;
    }
  }

  public int getPartitionsSize() {
    return (this.partitions == null) ? 0 : this.partitions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TPartitionMeta> getPartitionsIterator() {
    return (this.partitions == null) ? null : this.partitions.iterator();
  }

  public void addToPartitions(TPartitionMeta elem) {
    if (this.partitions == null) {
      this.partitions = new java.util.ArrayList<TPartitionMeta>();
    }
    this.partitions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TPartitionMeta> getPartitions() {
    return this.partitions;
  }

  public TTableMeta setPartitions(@org.apache.thrift.annotation.Nullable java.util.List<TPartitionMeta> partitions) {
    this.partitions = partitions;
    return this;
  }

  public void unsetPartitions() {
    this.partitions = null;
  }

  /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitions() {
    return this.partitions != null;
  }

  public void setPartitionsIsSet(boolean value) {
    if (!value) {
      this.partitions = null;
    }
  }

  public int getIndex_infosSize() {
    return (this.index_infos == null) ? 0 : this.index_infos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TIndexInfo> getIndex_infosIterator() {
    return (this.index_infos == null) ? null : this.index_infos.iterator();
  }

  public void addToIndex_infos(TIndexInfo elem) {
    if (this.index_infos == null) {
      this.index_infos = new java.util.ArrayList<TIndexInfo>();
    }
    this.index_infos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TIndexInfo> getIndex_infos() {
    return this.index_infos;
  }

  public TTableMeta setIndex_infos(@org.apache.thrift.annotation.Nullable java.util.List<TIndexInfo> index_infos) {
    this.index_infos = index_infos;
    return this;
  }

  public void unsetIndex_infos() {
    this.index_infos = null;
  }

  /** Returns true if field index_infos is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_infos() {
    return this.index_infos != null;
  }

  public void setIndex_infosIsSet(boolean value) {
    if (!value) {
      this.index_infos = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColocate_group() {
    return this.colocate_group;
  }

  public TTableMeta setColocate_group(@org.apache.thrift.annotation.Nullable java.lang.String colocate_group) {
    this.colocate_group = colocate_group;
    return this;
  }

  public void unsetColocate_group() {
    this.colocate_group = null;
  }

  /** Returns true if field colocate_group is set (has been assigned a value) and false otherwise */
  public boolean isSetColocate_group() {
    return this.colocate_group != null;
  }

  public void setColocate_groupIsSet(boolean value) {
    if (!value) {
      this.colocate_group = null;
    }
  }

  public int getBloomfilter_columnsSize() {
    return (this.bloomfilter_columns == null) ? 0 : this.bloomfilter_columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getBloomfilter_columnsIterator() {
    return (this.bloomfilter_columns == null) ? null : this.bloomfilter_columns.iterator();
  }

  public void addToBloomfilter_columns(java.lang.String elem) {
    if (this.bloomfilter_columns == null) {
      this.bloomfilter_columns = new java.util.ArrayList<java.lang.String>();
    }
    this.bloomfilter_columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getBloomfilter_columns() {
    return this.bloomfilter_columns;
  }

  public TTableMeta setBloomfilter_columns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> bloomfilter_columns) {
    this.bloomfilter_columns = bloomfilter_columns;
    return this;
  }

  public void unsetBloomfilter_columns() {
    this.bloomfilter_columns = null;
  }

  /** Returns true if field bloomfilter_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetBloomfilter_columns() {
    return this.bloomfilter_columns != null;
  }

  public void setBloomfilter_columnsIsSet(boolean value) {
    if (!value) {
      this.bloomfilter_columns = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_type() {
    return this.table_type;
  }

  public TTableMeta setTable_type(@org.apache.thrift.annotation.Nullable java.lang.String table_type) {
    this.table_type = table_type;
    return this;
  }

  public void unsetTable_type() {
    this.table_type = null;
  }

  /** Returns true if field table_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_type() {
    return this.table_type != null;
  }

  public void setTable_typeIsSet(boolean value) {
    if (!value) {
      this.table_type = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((java.lang.Long)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((java.lang.String)value);
      }
      break;

    case DB_ID:
      if (value == null) {
        unsetDb_id();
      } else {
        setDb_id((java.lang.Long)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((java.lang.String)value);
      }
      break;

    case CLUSTER_ID:
      if (value == null) {
        unsetCluster_id();
      } else {
        setCluster_id((java.lang.Integer)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.String)value);
      }
      break;

    case BLOOMFILTER_FPP:
      if (value == null) {
        unsetBloomfilter_fpp();
      } else {
        setBloomfilter_fpp((java.lang.Double)value);
      }
      break;

    case BASE_INDEX_ID:
      if (value == null) {
        unsetBase_index_id();
      } else {
        setBase_index_id((java.lang.Long)value);
      }
      break;

    case KEY_TYPE:
      if (value == null) {
        unsetKey_type();
      } else {
        setKey_type((java.lang.String)value);
      }
      break;

    case DISTRIBUTION_DESC:
      if (value == null) {
        unsetDistribution_desc();
      } else {
        setDistribution_desc((TDistributionDesc)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case INDEXES:
      if (value == null) {
        unsetIndexes();
      } else {
        setIndexes((java.util.List<TIndexMeta>)value);
      }
      break;

    case PARTITION_INFO:
      if (value == null) {
        unsetPartition_info();
      } else {
        setPartition_info((TPartitionInfo)value);
      }
      break;

    case PARTITIONS:
      if (value == null) {
        unsetPartitions();
      } else {
        setPartitions((java.util.List<TPartitionMeta>)value);
      }
      break;

    case INDEX_INFOS:
      if (value == null) {
        unsetIndex_infos();
      } else {
        setIndex_infos((java.util.List<TIndexInfo>)value);
      }
      break;

    case COLOCATE_GROUP:
      if (value == null) {
        unsetColocate_group();
      } else {
        setColocate_group((java.lang.String)value);
      }
      break;

    case BLOOMFILTER_COLUMNS:
      if (value == null) {
        unsetBloomfilter_columns();
      } else {
        setBloomfilter_columns((java.util.List<java.lang.String>)value);
      }
      break;

    case TABLE_TYPE:
      if (value == null) {
        unsetTable_type();
      } else {
        setTable_type((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_ID:
      return getTable_id();

    case TABLE_NAME:
      return getTable_name();

    case DB_ID:
      return getDb_id();

    case DB_NAME:
      return getDb_name();

    case CLUSTER_ID:
      return getCluster_id();

    case STATE:
      return getState();

    case BLOOMFILTER_FPP:
      return getBloomfilter_fpp();

    case BASE_INDEX_ID:
      return getBase_index_id();

    case KEY_TYPE:
      return getKey_type();

    case DISTRIBUTION_DESC:
      return getDistribution_desc();

    case PROPERTIES:
      return getProperties();

    case INDEXES:
      return getIndexes();

    case PARTITION_INFO:
      return getPartition_info();

    case PARTITIONS:
      return getPartitions();

    case INDEX_INFOS:
      return getIndex_infos();

    case COLOCATE_GROUP:
      return getColocate_group();

    case BLOOMFILTER_COLUMNS:
      return getBloomfilter_columns();

    case TABLE_TYPE:
      return getTable_type();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLE_ID:
      return isSetTable_id();
    case TABLE_NAME:
      return isSetTable_name();
    case DB_ID:
      return isSetDb_id();
    case DB_NAME:
      return isSetDb_name();
    case CLUSTER_ID:
      return isSetCluster_id();
    case STATE:
      return isSetState();
    case BLOOMFILTER_FPP:
      return isSetBloomfilter_fpp();
    case BASE_INDEX_ID:
      return isSetBase_index_id();
    case KEY_TYPE:
      return isSetKey_type();
    case DISTRIBUTION_DESC:
      return isSetDistribution_desc();
    case PROPERTIES:
      return isSetProperties();
    case INDEXES:
      return isSetIndexes();
    case PARTITION_INFO:
      return isSetPartition_info();
    case PARTITIONS:
      return isSetPartitions();
    case INDEX_INFOS:
      return isSetIndex_infos();
    case COLOCATE_GROUP:
      return isSetColocate_group();
    case BLOOMFILTER_COLUMNS:
      return isSetBloomfilter_columns();
    case TABLE_TYPE:
      return isSetTable_type();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTableMeta)
      return this.equals((TTableMeta)that);
    return false;
  }

  public boolean equals(TTableMeta that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_table_id = true && this.isSetTable_id();
    boolean that_present_table_id = true && that.isSetTable_id();
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_db_id = true && this.isSetDb_id();
    boolean that_present_db_id = true && that.isSetDb_id();
    if (this_present_db_id || that_present_db_id) {
      if (!(this_present_db_id && that_present_db_id))
        return false;
      if (this.db_id != that.db_id)
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_cluster_id = true && this.isSetCluster_id();
    boolean that_present_cluster_id = true && that.isSetCluster_id();
    if (this_present_cluster_id || that_present_cluster_id) {
      if (!(this_present_cluster_id && that_present_cluster_id))
        return false;
      if (this.cluster_id != that.cluster_id)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_bloomfilter_fpp = true && this.isSetBloomfilter_fpp();
    boolean that_present_bloomfilter_fpp = true && that.isSetBloomfilter_fpp();
    if (this_present_bloomfilter_fpp || that_present_bloomfilter_fpp) {
      if (!(this_present_bloomfilter_fpp && that_present_bloomfilter_fpp))
        return false;
      if (this.bloomfilter_fpp != that.bloomfilter_fpp)
        return false;
    }

    boolean this_present_base_index_id = true && this.isSetBase_index_id();
    boolean that_present_base_index_id = true && that.isSetBase_index_id();
    if (this_present_base_index_id || that_present_base_index_id) {
      if (!(this_present_base_index_id && that_present_base_index_id))
        return false;
      if (this.base_index_id != that.base_index_id)
        return false;
    }

    boolean this_present_key_type = true && this.isSetKey_type();
    boolean that_present_key_type = true && that.isSetKey_type();
    if (this_present_key_type || that_present_key_type) {
      if (!(this_present_key_type && that_present_key_type))
        return false;
      if (!this.key_type.equals(that.key_type))
        return false;
    }

    boolean this_present_distribution_desc = true && this.isSetDistribution_desc();
    boolean that_present_distribution_desc = true && that.isSetDistribution_desc();
    if (this_present_distribution_desc || that_present_distribution_desc) {
      if (!(this_present_distribution_desc && that_present_distribution_desc))
        return false;
      if (!this.distribution_desc.equals(that.distribution_desc))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_indexes = true && this.isSetIndexes();
    boolean that_present_indexes = true && that.isSetIndexes();
    if (this_present_indexes || that_present_indexes) {
      if (!(this_present_indexes && that_present_indexes))
        return false;
      if (!this.indexes.equals(that.indexes))
        return false;
    }

    boolean this_present_partition_info = true && this.isSetPartition_info();
    boolean that_present_partition_info = true && that.isSetPartition_info();
    if (this_present_partition_info || that_present_partition_info) {
      if (!(this_present_partition_info && that_present_partition_info))
        return false;
      if (!this.partition_info.equals(that.partition_info))
        return false;
    }

    boolean this_present_partitions = true && this.isSetPartitions();
    boolean that_present_partitions = true && that.isSetPartitions();
    if (this_present_partitions || that_present_partitions) {
      if (!(this_present_partitions && that_present_partitions))
        return false;
      if (!this.partitions.equals(that.partitions))
        return false;
    }

    boolean this_present_index_infos = true && this.isSetIndex_infos();
    boolean that_present_index_infos = true && that.isSetIndex_infos();
    if (this_present_index_infos || that_present_index_infos) {
      if (!(this_present_index_infos && that_present_index_infos))
        return false;
      if (!this.index_infos.equals(that.index_infos))
        return false;
    }

    boolean this_present_colocate_group = true && this.isSetColocate_group();
    boolean that_present_colocate_group = true && that.isSetColocate_group();
    if (this_present_colocate_group || that_present_colocate_group) {
      if (!(this_present_colocate_group && that_present_colocate_group))
        return false;
      if (!this.colocate_group.equals(that.colocate_group))
        return false;
    }

    boolean this_present_bloomfilter_columns = true && this.isSetBloomfilter_columns();
    boolean that_present_bloomfilter_columns = true && that.isSetBloomfilter_columns();
    if (this_present_bloomfilter_columns || that_present_bloomfilter_columns) {
      if (!(this_present_bloomfilter_columns && that_present_bloomfilter_columns))
        return false;
      if (!this.bloomfilter_columns.equals(that.bloomfilter_columns))
        return false;
    }

    boolean this_present_table_type = true && this.isSetTable_type();
    boolean that_present_table_type = true && that.isSetTable_type();
    if (this_present_table_type || that_present_table_type) {
      if (!(this_present_table_type && that_present_table_type))
        return false;
      if (!this.table_type.equals(that.table_type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTable_id()) ? 131071 : 524287);
    if (isSetTable_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_id);

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb_id()) ? 131071 : 524287);
    if (isSetDb_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(db_id);

    hashCode = hashCode * 8191 + ((isSetDb_name()) ? 131071 : 524287);
    if (isSetDb_name())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetCluster_id()) ? 131071 : 524287);
    if (isSetCluster_id())
      hashCode = hashCode * 8191 + cluster_id;

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.hashCode();

    hashCode = hashCode * 8191 + ((isSetBloomfilter_fpp()) ? 131071 : 524287);
    if (isSetBloomfilter_fpp())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bloomfilter_fpp);

    hashCode = hashCode * 8191 + ((isSetBase_index_id()) ? 131071 : 524287);
    if (isSetBase_index_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(base_index_id);

    hashCode = hashCode * 8191 + ((isSetKey_type()) ? 131071 : 524287);
    if (isSetKey_type())
      hashCode = hashCode * 8191 + key_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetDistribution_desc()) ? 131071 : 524287);
    if (isSetDistribution_desc())
      hashCode = hashCode * 8191 + distribution_desc.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetIndexes()) ? 131071 : 524287);
    if (isSetIndexes())
      hashCode = hashCode * 8191 + indexes.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_info()) ? 131071 : 524287);
    if (isSetPartition_info())
      hashCode = hashCode * 8191 + partition_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartitions()) ? 131071 : 524287);
    if (isSetPartitions())
      hashCode = hashCode * 8191 + partitions.hashCode();

    hashCode = hashCode * 8191 + ((isSetIndex_infos()) ? 131071 : 524287);
    if (isSetIndex_infos())
      hashCode = hashCode * 8191 + index_infos.hashCode();

    hashCode = hashCode * 8191 + ((isSetColocate_group()) ? 131071 : 524287);
    if (isSetColocate_group())
      hashCode = hashCode * 8191 + colocate_group.hashCode();

    hashCode = hashCode * 8191 + ((isSetBloomfilter_columns()) ? 131071 : 524287);
    if (isSetBloomfilter_columns())
      hashCode = hashCode * 8191 + bloomfilter_columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_type()) ? 131071 : 524287);
    if (isSetTable_type())
      hashCode = hashCode * 8191 + table_type.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TTableMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTable_id(), other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_name(), other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb_id(), other.isSetDb_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_id, other.db_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb_name(), other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCluster_id(), other.isSetCluster_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster_id, other.cluster_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBloomfilter_fpp(), other.isSetBloomfilter_fpp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBloomfilter_fpp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloomfilter_fpp, other.bloomfilter_fpp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBase_index_id(), other.isSetBase_index_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase_index_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base_index_id, other.base_index_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKey_type(), other.isSetKey_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_type, other.key_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDistribution_desc(), other.isSetDistribution_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistribution_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distribution_desc, other.distribution_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProperties(), other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIndexes(), other.isSetIndexes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexes, other.indexes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_info(), other.isSetPartition_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_info, other.partition_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitions(), other.isSetPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, other.partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIndex_infos(), other.isSetIndex_infos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_infos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_infos, other.index_infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColocate_group(), other.isSetColocate_group());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColocate_group()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colocate_group, other.colocate_group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBloomfilter_columns(), other.isSetBloomfilter_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBloomfilter_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloomfilter_columns, other.bloomfilter_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_type(), other.isSetTable_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_type, other.table_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTableMeta(");
    boolean first = true;

    if (isSetTable_id()) {
      sb.append("table_id:");
      sb.append(this.table_id);
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetDb_id()) {
      if (!first) sb.append(", ");
      sb.append("db_id:");
      sb.append(this.db_id);
      first = false;
    }
    if (isSetDb_name()) {
      if (!first) sb.append(", ");
      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
    }
    if (isSetCluster_id()) {
      if (!first) sb.append(", ");
      sb.append("cluster_id:");
      sb.append(this.cluster_id);
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetBloomfilter_fpp()) {
      if (!first) sb.append(", ");
      sb.append("bloomfilter_fpp:");
      sb.append(this.bloomfilter_fpp);
      first = false;
    }
    if (isSetBase_index_id()) {
      if (!first) sb.append(", ");
      sb.append("base_index_id:");
      sb.append(this.base_index_id);
      first = false;
    }
    if (isSetKey_type()) {
      if (!first) sb.append(", ");
      sb.append("key_type:");
      if (this.key_type == null) {
        sb.append("null");
      } else {
        sb.append(this.key_type);
      }
      first = false;
    }
    if (isSetDistribution_desc()) {
      if (!first) sb.append(", ");
      sb.append("distribution_desc:");
      if (this.distribution_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.distribution_desc);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    if (isSetIndexes()) {
      if (!first) sb.append(", ");
      sb.append("indexes:");
      if (this.indexes == null) {
        sb.append("null");
      } else {
        sb.append(this.indexes);
      }
      first = false;
    }
    if (isSetPartition_info()) {
      if (!first) sb.append(", ");
      sb.append("partition_info:");
      if (this.partition_info == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_info);
      }
      first = false;
    }
    if (isSetPartitions()) {
      if (!first) sb.append(", ");
      sb.append("partitions:");
      if (this.partitions == null) {
        sb.append("null");
      } else {
        sb.append(this.partitions);
      }
      first = false;
    }
    if (isSetIndex_infos()) {
      if (!first) sb.append(", ");
      sb.append("index_infos:");
      if (this.index_infos == null) {
        sb.append("null");
      } else {
        sb.append(this.index_infos);
      }
      first = false;
    }
    if (isSetColocate_group()) {
      if (!first) sb.append(", ");
      sb.append("colocate_group:");
      if (this.colocate_group == null) {
        sb.append("null");
      } else {
        sb.append(this.colocate_group);
      }
      first = false;
    }
    if (isSetBloomfilter_columns()) {
      if (!first) sb.append(", ");
      sb.append("bloomfilter_columns:");
      if (this.bloomfilter_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.bloomfilter_columns);
      }
      first = false;
    }
    if (isSetTable_type()) {
      if (!first) sb.append(", ");
      sb.append("table_type:");
      if (this.table_type == null) {
        sb.append("null");
      } else {
        sb.append(this.table_type);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (distribution_desc != null) {
      distribution_desc.validate();
    }
    if (partition_info != null) {
      partition_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableMetaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTableMetaStandardScheme getScheme() {
      return new TTableMetaStandardScheme();
    }
  }

  private static class TTableMetaStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTableMeta> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_id = iprot.readI64();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.db_id = iprot.readI64();
              struct.setDb_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLUSTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cluster_id = iprot.readI32();
              struct.setCluster_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BLOOMFILTER_FPP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bloomfilter_fpp = iprot.readDouble();
              struct.setBloomfilter_fppIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BASE_INDEX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.base_index_id = iprot.readI64();
              struct.setBase_index_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // KEY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key_type = iprot.readString();
              struct.setKey_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DISTRIBUTION_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.distribution_desc = new TDistributionDesc();
              struct.distribution_desc.read(iprot);
              struct.setDistribution_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map492 = iprot.readMapBegin();
                struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map492.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key493;
                @org.apache.thrift.annotation.Nullable java.lang.String _val494;
                for (int _i495 = 0; _i495 < _map492.size; ++_i495)
                {
                  _key493 = iprot.readString();
                  _val494 = iprot.readString();
                  struct.properties.put(_key493, _val494);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INDEXES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list496 = iprot.readListBegin();
                struct.indexes = new java.util.ArrayList<TIndexMeta>(_list496.size);
                @org.apache.thrift.annotation.Nullable TIndexMeta _elem497;
                for (int _i498 = 0; _i498 < _list496.size; ++_i498)
                {
                  _elem497 = new TIndexMeta();
                  _elem497.read(iprot);
                  struct.indexes.add(_elem497);
                }
                iprot.readListEnd();
              }
              struct.setIndexesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PARTITION_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.partition_info = new TPartitionInfo();
              struct.partition_info.read(iprot);
              struct.setPartition_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list499 = iprot.readListBegin();
                struct.partitions = new java.util.ArrayList<TPartitionMeta>(_list499.size);
                @org.apache.thrift.annotation.Nullable TPartitionMeta _elem500;
                for (int _i501 = 0; _i501 < _list499.size; ++_i501)
                {
                  _elem500 = new TPartitionMeta();
                  _elem500.read(iprot);
                  struct.partitions.add(_elem500);
                }
                iprot.readListEnd();
              }
              struct.setPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // INDEX_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list502 = iprot.readListBegin();
                struct.index_infos = new java.util.ArrayList<TIndexInfo>(_list502.size);
                @org.apache.thrift.annotation.Nullable TIndexInfo _elem503;
                for (int _i504 = 0; _i504 < _list502.size; ++_i504)
                {
                  _elem503 = new TIndexInfo();
                  _elem503.read(iprot);
                  struct.index_infos.add(_elem503);
                }
                iprot.readListEnd();
              }
              struct.setIndex_infosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // COLOCATE_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.colocate_group = iprot.readString();
              struct.setColocate_groupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BLOOMFILTER_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list505 = iprot.readListBegin();
                struct.bloomfilter_columns = new java.util.ArrayList<java.lang.String>(_list505.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem506;
                for (int _i507 = 0; _i507 < _list505.size; ++_i507)
                {
                  _elem506 = iprot.readString();
                  struct.bloomfilter_columns.add(_elem506);
                }
                iprot.readListEnd();
              }
              struct.setBloomfilter_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TABLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_type = iprot.readString();
              struct.setTable_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTable_id()) {
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeI64(struct.table_id);
        oprot.writeFieldEnd();
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDb_id()) {
        oprot.writeFieldBegin(DB_ID_FIELD_DESC);
        oprot.writeI64(struct.db_id);
        oprot.writeFieldEnd();
      }
      if (struct.db_name != null) {
        if (struct.isSetDb_name()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.db_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCluster_id()) {
        oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
        oprot.writeI32(struct.cluster_id);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBloomfilter_fpp()) {
        oprot.writeFieldBegin(BLOOMFILTER_FPP_FIELD_DESC);
        oprot.writeDouble(struct.bloomfilter_fpp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBase_index_id()) {
        oprot.writeFieldBegin(BASE_INDEX_ID_FIELD_DESC);
        oprot.writeI64(struct.base_index_id);
        oprot.writeFieldEnd();
      }
      if (struct.key_type != null) {
        if (struct.isSetKey_type()) {
          oprot.writeFieldBegin(KEY_TYPE_FIELD_DESC);
          oprot.writeString(struct.key_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.distribution_desc != null) {
        if (struct.isSetDistribution_desc()) {
          oprot.writeFieldBegin(DISTRIBUTION_DESC_FIELD_DESC);
          struct.distribution_desc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter508 : struct.properties.entrySet())
            {
              oprot.writeString(_iter508.getKey());
              oprot.writeString(_iter508.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.indexes != null) {
        if (struct.isSetIndexes()) {
          oprot.writeFieldBegin(INDEXES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.indexes.size()));
            for (TIndexMeta _iter509 : struct.indexes)
            {
              _iter509.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_info != null) {
        if (struct.isSetPartition_info()) {
          oprot.writeFieldBegin(PARTITION_INFO_FIELD_DESC);
          struct.partition_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partitions != null) {
        if (struct.isSetPartitions()) {
          oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partitions.size()));
            for (TPartitionMeta _iter510 : struct.partitions)
            {
              _iter510.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.index_infos != null) {
        if (struct.isSetIndex_infos()) {
          oprot.writeFieldBegin(INDEX_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.index_infos.size()));
            for (TIndexInfo _iter511 : struct.index_infos)
            {
              _iter511.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.colocate_group != null) {
        if (struct.isSetColocate_group()) {
          oprot.writeFieldBegin(COLOCATE_GROUP_FIELD_DESC);
          oprot.writeString(struct.colocate_group);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bloomfilter_columns != null) {
        if (struct.isSetBloomfilter_columns()) {
          oprot.writeFieldBegin(BLOOMFILTER_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.bloomfilter_columns.size()));
            for (java.lang.String _iter512 : struct.bloomfilter_columns)
            {
              oprot.writeString(_iter512);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_type != null) {
        if (struct.isSetTable_type()) {
          oprot.writeFieldBegin(TABLE_TYPE_FIELD_DESC);
          oprot.writeString(struct.table_type);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableMetaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTableMetaTupleScheme getScheme() {
      return new TTableMetaTupleScheme();
    }
  }

  private static class TTableMetaTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTableMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTable_id()) {
        optionals.set(0);
      }
      if (struct.isSetTable_name()) {
        optionals.set(1);
      }
      if (struct.isSetDb_id()) {
        optionals.set(2);
      }
      if (struct.isSetDb_name()) {
        optionals.set(3);
      }
      if (struct.isSetCluster_id()) {
        optionals.set(4);
      }
      if (struct.isSetState()) {
        optionals.set(5);
      }
      if (struct.isSetBloomfilter_fpp()) {
        optionals.set(6);
      }
      if (struct.isSetBase_index_id()) {
        optionals.set(7);
      }
      if (struct.isSetKey_type()) {
        optionals.set(8);
      }
      if (struct.isSetDistribution_desc()) {
        optionals.set(9);
      }
      if (struct.isSetProperties()) {
        optionals.set(10);
      }
      if (struct.isSetIndexes()) {
        optionals.set(11);
      }
      if (struct.isSetPartition_info()) {
        optionals.set(12);
      }
      if (struct.isSetPartitions()) {
        optionals.set(13);
      }
      if (struct.isSetIndex_infos()) {
        optionals.set(14);
      }
      if (struct.isSetColocate_group()) {
        optionals.set(15);
      }
      if (struct.isSetBloomfilter_columns()) {
        optionals.set(16);
      }
      if (struct.isSetTable_type()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetTable_id()) {
        oprot.writeI64(struct.table_id);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetDb_id()) {
        oprot.writeI64(struct.db_id);
      }
      if (struct.isSetDb_name()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetCluster_id()) {
        oprot.writeI32(struct.cluster_id);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetBloomfilter_fpp()) {
        oprot.writeDouble(struct.bloomfilter_fpp);
      }
      if (struct.isSetBase_index_id()) {
        oprot.writeI64(struct.base_index_id);
      }
      if (struct.isSetKey_type()) {
        oprot.writeString(struct.key_type);
      }
      if (struct.isSetDistribution_desc()) {
        struct.distribution_desc.write(oprot);
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter513 : struct.properties.entrySet())
          {
            oprot.writeString(_iter513.getKey());
            oprot.writeString(_iter513.getValue());
          }
        }
      }
      if (struct.isSetIndexes()) {
        {
          oprot.writeI32(struct.indexes.size());
          for (TIndexMeta _iter514 : struct.indexes)
          {
            _iter514.write(oprot);
          }
        }
      }
      if (struct.isSetPartition_info()) {
        struct.partition_info.write(oprot);
      }
      if (struct.isSetPartitions()) {
        {
          oprot.writeI32(struct.partitions.size());
          for (TPartitionMeta _iter515 : struct.partitions)
          {
            _iter515.write(oprot);
          }
        }
      }
      if (struct.isSetIndex_infos()) {
        {
          oprot.writeI32(struct.index_infos.size());
          for (TIndexInfo _iter516 : struct.index_infos)
          {
            _iter516.write(oprot);
          }
        }
      }
      if (struct.isSetColocate_group()) {
        oprot.writeString(struct.colocate_group);
      }
      if (struct.isSetBloomfilter_columns()) {
        {
          oprot.writeI32(struct.bloomfilter_columns.size());
          for (java.lang.String _iter517 : struct.bloomfilter_columns)
          {
            oprot.writeString(_iter517);
          }
        }
      }
      if (struct.isSetTable_type()) {
        oprot.writeString(struct.table_type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.table_id = iprot.readI64();
        struct.setTable_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.db_id = iprot.readI64();
        struct.setDb_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.db_name = iprot.readString();
        struct.setDb_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cluster_id = iprot.readI32();
        struct.setCluster_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bloomfilter_fpp = iprot.readDouble();
        struct.setBloomfilter_fppIsSet(true);
      }
      if (incoming.get(7)) {
        struct.base_index_id = iprot.readI64();
        struct.setBase_index_idIsSet(true);
      }
      if (incoming.get(8)) {
        struct.key_type = iprot.readString();
        struct.setKey_typeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.distribution_desc = new TDistributionDesc();
        struct.distribution_desc.read(iprot);
        struct.setDistribution_descIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map518 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map518.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key519;
          @org.apache.thrift.annotation.Nullable java.lang.String _val520;
          for (int _i521 = 0; _i521 < _map518.size; ++_i521)
          {
            _key519 = iprot.readString();
            _val520 = iprot.readString();
            struct.properties.put(_key519, _val520);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list522 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.indexes = new java.util.ArrayList<TIndexMeta>(_list522.size);
          @org.apache.thrift.annotation.Nullable TIndexMeta _elem523;
          for (int _i524 = 0; _i524 < _list522.size; ++_i524)
          {
            _elem523 = new TIndexMeta();
            _elem523.read(iprot);
            struct.indexes.add(_elem523);
          }
        }
        struct.setIndexesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.partition_info = new TPartitionInfo();
        struct.partition_info.read(iprot);
        struct.setPartition_infoIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list525 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.partitions = new java.util.ArrayList<TPartitionMeta>(_list525.size);
          @org.apache.thrift.annotation.Nullable TPartitionMeta _elem526;
          for (int _i527 = 0; _i527 < _list525.size; ++_i527)
          {
            _elem526 = new TPartitionMeta();
            _elem526.read(iprot);
            struct.partitions.add(_elem526);
          }
        }
        struct.setPartitionsIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list528 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.index_infos = new java.util.ArrayList<TIndexInfo>(_list528.size);
          @org.apache.thrift.annotation.Nullable TIndexInfo _elem529;
          for (int _i530 = 0; _i530 < _list528.size; ++_i530)
          {
            _elem529 = new TIndexInfo();
            _elem529.read(iprot);
            struct.index_infos.add(_elem529);
          }
        }
        struct.setIndex_infosIsSet(true);
      }
      if (incoming.get(15)) {
        struct.colocate_group = iprot.readString();
        struct.setColocate_groupIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list531 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.bloomfilter_columns = new java.util.ArrayList<java.lang.String>(_list531.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem532;
          for (int _i533 = 0; _i533 < _list531.size; ++_i533)
          {
            _elem532 = iprot.readString();
            struct.bloomfilter_columns.add(_elem532);
          }
        }
        struct.setBloomfilter_columnsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.table_type = iprot.readString();
        struct.setTable_typeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

