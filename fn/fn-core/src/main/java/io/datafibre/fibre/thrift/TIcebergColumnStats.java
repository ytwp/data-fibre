/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TIcebergColumnStats implements org.apache.thrift.TBase<TIcebergColumnStats, TIcebergColumnStats._Fields>, java.io.Serializable, Cloneable, Comparable<TIcebergColumnStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIcebergColumnStats");

  private static final org.apache.thrift.protocol.TField COLUMN_SIZES_FIELD_DESC = new org.apache.thrift.protocol.TField("column_sizes", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("value_counts", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField NULL_VALUE_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("null_value_counts", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField NAN_VALUE_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("nan_value_counts", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField LOWER_BOUNDS_FIELD_DESC = new org.apache.thrift.protocol.TField("lower_bounds", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField UPPER_BOUNDS_FIELD_DESC = new org.apache.thrift.protocol.TField("upper_bounds", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TIcebergColumnStatsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TIcebergColumnStatsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Long> column_sizes; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Long> value_counts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Long> null_value_counts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Long> nan_value_counts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.nio.ByteBuffer> lower_bounds; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.nio.ByteBuffer> upper_bounds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_SIZES((short)1, "column_sizes"),
    VALUE_COUNTS((short)2, "value_counts"),
    NULL_VALUE_COUNTS((short)3, "null_value_counts"),
    NAN_VALUE_COUNTS((short)4, "nan_value_counts"),
    LOWER_BOUNDS((short)5, "lower_bounds"),
    UPPER_BOUNDS((short)6, "upper_bounds");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_SIZES
          return COLUMN_SIZES;
        case 2: // VALUE_COUNTS
          return VALUE_COUNTS;
        case 3: // NULL_VALUE_COUNTS
          return NULL_VALUE_COUNTS;
        case 4: // NAN_VALUE_COUNTS
          return NAN_VALUE_COUNTS;
        case 5: // LOWER_BOUNDS
          return LOWER_BOUNDS;
        case 6: // UPPER_BOUNDS
          return UPPER_BOUNDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.COLUMN_SIZES,_Fields.VALUE_COUNTS,_Fields.NULL_VALUE_COUNTS,_Fields.NAN_VALUE_COUNTS,_Fields.LOWER_BOUNDS,_Fields.UPPER_BOUNDS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_SIZES, new org.apache.thrift.meta_data.FieldMetaData("column_sizes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.VALUE_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("value_counts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.NULL_VALUE_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("null_value_counts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.NAN_VALUE_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("nan_value_counts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.LOWER_BOUNDS, new org.apache.thrift.meta_data.FieldMetaData("lower_bounds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.UPPER_BOUNDS, new org.apache.thrift.meta_data.FieldMetaData("upper_bounds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TIcebergColumnStats.class, metaDataMap);
  }

  public TIcebergColumnStats() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TIcebergColumnStats(TIcebergColumnStats other) {
    if (other.isSetColumn_sizes()) {
      java.util.Map<java.lang.Integer,java.lang.Long> __this__column_sizes = new java.util.HashMap<java.lang.Integer,java.lang.Long>(other.column_sizes);
      this.column_sizes = __this__column_sizes;
    }
    if (other.isSetValue_counts()) {
      java.util.Map<java.lang.Integer,java.lang.Long> __this__value_counts = new java.util.HashMap<java.lang.Integer,java.lang.Long>(other.value_counts);
      this.value_counts = __this__value_counts;
    }
    if (other.isSetNull_value_counts()) {
      java.util.Map<java.lang.Integer,java.lang.Long> __this__null_value_counts = new java.util.HashMap<java.lang.Integer,java.lang.Long>(other.null_value_counts);
      this.null_value_counts = __this__null_value_counts;
    }
    if (other.isSetNan_value_counts()) {
      java.util.Map<java.lang.Integer,java.lang.Long> __this__nan_value_counts = new java.util.HashMap<java.lang.Integer,java.lang.Long>(other.nan_value_counts);
      this.nan_value_counts = __this__nan_value_counts;
    }
    if (other.isSetLower_bounds()) {
      java.util.Map<java.lang.Integer,java.nio.ByteBuffer> __this__lower_bounds = new java.util.HashMap<java.lang.Integer,java.nio.ByteBuffer>(other.lower_bounds);
      this.lower_bounds = __this__lower_bounds;
    }
    if (other.isSetUpper_bounds()) {
      java.util.Map<java.lang.Integer,java.nio.ByteBuffer> __this__upper_bounds = new java.util.HashMap<java.lang.Integer,java.nio.ByteBuffer>(other.upper_bounds);
      this.upper_bounds = __this__upper_bounds;
    }
  }

  @Override
  public TIcebergColumnStats deepCopy() {
    return new TIcebergColumnStats(this);
  }

  @Override
  public void clear() {
    this.column_sizes = null;
    this.value_counts = null;
    this.null_value_counts = null;
    this.nan_value_counts = null;
    this.lower_bounds = null;
    this.upper_bounds = null;
  }

  public int getColumn_sizesSize() {
    return (this.column_sizes == null) ? 0 : this.column_sizes.size();
  }

  public void putToColumn_sizes(int key, long val) {
    if (this.column_sizes == null) {
      this.column_sizes = new java.util.HashMap<java.lang.Integer,java.lang.Long>();
    }
    this.column_sizes.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Long> getColumn_sizes() {
    return this.column_sizes;
  }

  public TIcebergColumnStats setColumn_sizes(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Long> column_sizes) {
    this.column_sizes = column_sizes;
    return this;
  }

  public void unsetColumn_sizes() {
    this.column_sizes = null;
  }

  /** Returns true if field column_sizes is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_sizes() {
    return this.column_sizes != null;
  }

  public void setColumn_sizesIsSet(boolean value) {
    if (!value) {
      this.column_sizes = null;
    }
  }

  public int getValue_countsSize() {
    return (this.value_counts == null) ? 0 : this.value_counts.size();
  }

  public void putToValue_counts(int key, long val) {
    if (this.value_counts == null) {
      this.value_counts = new java.util.HashMap<java.lang.Integer,java.lang.Long>();
    }
    this.value_counts.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Long> getValue_counts() {
    return this.value_counts;
  }

  public TIcebergColumnStats setValue_counts(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Long> value_counts) {
    this.value_counts = value_counts;
    return this;
  }

  public void unsetValue_counts() {
    this.value_counts = null;
  }

  /** Returns true if field value_counts is set (has been assigned a value) and false otherwise */
  public boolean isSetValue_counts() {
    return this.value_counts != null;
  }

  public void setValue_countsIsSet(boolean value) {
    if (!value) {
      this.value_counts = null;
    }
  }

  public int getNull_value_countsSize() {
    return (this.null_value_counts == null) ? 0 : this.null_value_counts.size();
  }

  public void putToNull_value_counts(int key, long val) {
    if (this.null_value_counts == null) {
      this.null_value_counts = new java.util.HashMap<java.lang.Integer,java.lang.Long>();
    }
    this.null_value_counts.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Long> getNull_value_counts() {
    return this.null_value_counts;
  }

  public TIcebergColumnStats setNull_value_counts(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Long> null_value_counts) {
    this.null_value_counts = null_value_counts;
    return this;
  }

  public void unsetNull_value_counts() {
    this.null_value_counts = null;
  }

  /** Returns true if field null_value_counts is set (has been assigned a value) and false otherwise */
  public boolean isSetNull_value_counts() {
    return this.null_value_counts != null;
  }

  public void setNull_value_countsIsSet(boolean value) {
    if (!value) {
      this.null_value_counts = null;
    }
  }

  public int getNan_value_countsSize() {
    return (this.nan_value_counts == null) ? 0 : this.nan_value_counts.size();
  }

  public void putToNan_value_counts(int key, long val) {
    if (this.nan_value_counts == null) {
      this.nan_value_counts = new java.util.HashMap<java.lang.Integer,java.lang.Long>();
    }
    this.nan_value_counts.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Long> getNan_value_counts() {
    return this.nan_value_counts;
  }

  public TIcebergColumnStats setNan_value_counts(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Long> nan_value_counts) {
    this.nan_value_counts = nan_value_counts;
    return this;
  }

  public void unsetNan_value_counts() {
    this.nan_value_counts = null;
  }

  /** Returns true if field nan_value_counts is set (has been assigned a value) and false otherwise */
  public boolean isSetNan_value_counts() {
    return this.nan_value_counts != null;
  }

  public void setNan_value_countsIsSet(boolean value) {
    if (!value) {
      this.nan_value_counts = null;
    }
  }

  public int getLower_boundsSize() {
    return (this.lower_bounds == null) ? 0 : this.lower_bounds.size();
  }

  public void putToLower_bounds(int key, java.nio.ByteBuffer val) {
    if (this.lower_bounds == null) {
      this.lower_bounds = new java.util.HashMap<java.lang.Integer,java.nio.ByteBuffer>();
    }
    this.lower_bounds.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.nio.ByteBuffer> getLower_bounds() {
    return this.lower_bounds;
  }

  public TIcebergColumnStats setLower_bounds(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.nio.ByteBuffer> lower_bounds) {
    this.lower_bounds = lower_bounds;
    return this;
  }

  public void unsetLower_bounds() {
    this.lower_bounds = null;
  }

  /** Returns true if field lower_bounds is set (has been assigned a value) and false otherwise */
  public boolean isSetLower_bounds() {
    return this.lower_bounds != null;
  }

  public void setLower_boundsIsSet(boolean value) {
    if (!value) {
      this.lower_bounds = null;
    }
  }

  public int getUpper_boundsSize() {
    return (this.upper_bounds == null) ? 0 : this.upper_bounds.size();
  }

  public void putToUpper_bounds(int key, java.nio.ByteBuffer val) {
    if (this.upper_bounds == null) {
      this.upper_bounds = new java.util.HashMap<java.lang.Integer,java.nio.ByteBuffer>();
    }
    this.upper_bounds.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.nio.ByteBuffer> getUpper_bounds() {
    return this.upper_bounds;
  }

  public TIcebergColumnStats setUpper_bounds(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.nio.ByteBuffer> upper_bounds) {
    this.upper_bounds = upper_bounds;
    return this;
  }

  public void unsetUpper_bounds() {
    this.upper_bounds = null;
  }

  /** Returns true if field upper_bounds is set (has been assigned a value) and false otherwise */
  public boolean isSetUpper_bounds() {
    return this.upper_bounds != null;
  }

  public void setUpper_boundsIsSet(boolean value) {
    if (!value) {
      this.upper_bounds = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COLUMN_SIZES:
      if (value == null) {
        unsetColumn_sizes();
      } else {
        setColumn_sizes((java.util.Map<java.lang.Integer,java.lang.Long>)value);
      }
      break;

    case VALUE_COUNTS:
      if (value == null) {
        unsetValue_counts();
      } else {
        setValue_counts((java.util.Map<java.lang.Integer,java.lang.Long>)value);
      }
      break;

    case NULL_VALUE_COUNTS:
      if (value == null) {
        unsetNull_value_counts();
      } else {
        setNull_value_counts((java.util.Map<java.lang.Integer,java.lang.Long>)value);
      }
      break;

    case NAN_VALUE_COUNTS:
      if (value == null) {
        unsetNan_value_counts();
      } else {
        setNan_value_counts((java.util.Map<java.lang.Integer,java.lang.Long>)value);
      }
      break;

    case LOWER_BOUNDS:
      if (value == null) {
        unsetLower_bounds();
      } else {
        setLower_bounds((java.util.Map<java.lang.Integer,java.nio.ByteBuffer>)value);
      }
      break;

    case UPPER_BOUNDS:
      if (value == null) {
        unsetUpper_bounds();
      } else {
        setUpper_bounds((java.util.Map<java.lang.Integer,java.nio.ByteBuffer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_SIZES:
      return getColumn_sizes();

    case VALUE_COUNTS:
      return getValue_counts();

    case NULL_VALUE_COUNTS:
      return getNull_value_counts();

    case NAN_VALUE_COUNTS:
      return getNan_value_counts();

    case LOWER_BOUNDS:
      return getLower_bounds();

    case UPPER_BOUNDS:
      return getUpper_bounds();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_SIZES:
      return isSetColumn_sizes();
    case VALUE_COUNTS:
      return isSetValue_counts();
    case NULL_VALUE_COUNTS:
      return isSetNull_value_counts();
    case NAN_VALUE_COUNTS:
      return isSetNan_value_counts();
    case LOWER_BOUNDS:
      return isSetLower_bounds();
    case UPPER_BOUNDS:
      return isSetUpper_bounds();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TIcebergColumnStats)
      return this.equals((TIcebergColumnStats)that);
    return false;
  }

  public boolean equals(TIcebergColumnStats that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_column_sizes = true && this.isSetColumn_sizes();
    boolean that_present_column_sizes = true && that.isSetColumn_sizes();
    if (this_present_column_sizes || that_present_column_sizes) {
      if (!(this_present_column_sizes && that_present_column_sizes))
        return false;
      if (!this.column_sizes.equals(that.column_sizes))
        return false;
    }

    boolean this_present_value_counts = true && this.isSetValue_counts();
    boolean that_present_value_counts = true && that.isSetValue_counts();
    if (this_present_value_counts || that_present_value_counts) {
      if (!(this_present_value_counts && that_present_value_counts))
        return false;
      if (!this.value_counts.equals(that.value_counts))
        return false;
    }

    boolean this_present_null_value_counts = true && this.isSetNull_value_counts();
    boolean that_present_null_value_counts = true && that.isSetNull_value_counts();
    if (this_present_null_value_counts || that_present_null_value_counts) {
      if (!(this_present_null_value_counts && that_present_null_value_counts))
        return false;
      if (!this.null_value_counts.equals(that.null_value_counts))
        return false;
    }

    boolean this_present_nan_value_counts = true && this.isSetNan_value_counts();
    boolean that_present_nan_value_counts = true && that.isSetNan_value_counts();
    if (this_present_nan_value_counts || that_present_nan_value_counts) {
      if (!(this_present_nan_value_counts && that_present_nan_value_counts))
        return false;
      if (!this.nan_value_counts.equals(that.nan_value_counts))
        return false;
    }

    boolean this_present_lower_bounds = true && this.isSetLower_bounds();
    boolean that_present_lower_bounds = true && that.isSetLower_bounds();
    if (this_present_lower_bounds || that_present_lower_bounds) {
      if (!(this_present_lower_bounds && that_present_lower_bounds))
        return false;
      if (!this.lower_bounds.equals(that.lower_bounds))
        return false;
    }

    boolean this_present_upper_bounds = true && this.isSetUpper_bounds();
    boolean that_present_upper_bounds = true && that.isSetUpper_bounds();
    if (this_present_upper_bounds || that_present_upper_bounds) {
      if (!(this_present_upper_bounds && that_present_upper_bounds))
        return false;
      if (!this.upper_bounds.equals(that.upper_bounds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetColumn_sizes()) ? 131071 : 524287);
    if (isSetColumn_sizes())
      hashCode = hashCode * 8191 + column_sizes.hashCode();

    hashCode = hashCode * 8191 + ((isSetValue_counts()) ? 131071 : 524287);
    if (isSetValue_counts())
      hashCode = hashCode * 8191 + value_counts.hashCode();

    hashCode = hashCode * 8191 + ((isSetNull_value_counts()) ? 131071 : 524287);
    if (isSetNull_value_counts())
      hashCode = hashCode * 8191 + null_value_counts.hashCode();

    hashCode = hashCode * 8191 + ((isSetNan_value_counts()) ? 131071 : 524287);
    if (isSetNan_value_counts())
      hashCode = hashCode * 8191 + nan_value_counts.hashCode();

    hashCode = hashCode * 8191 + ((isSetLower_bounds()) ? 131071 : 524287);
    if (isSetLower_bounds())
      hashCode = hashCode * 8191 + lower_bounds.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpper_bounds()) ? 131071 : 524287);
    if (isSetUpper_bounds())
      hashCode = hashCode * 8191 + upper_bounds.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TIcebergColumnStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetColumn_sizes(), other.isSetColumn_sizes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_sizes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_sizes, other.column_sizes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValue_counts(), other.isSetValue_counts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue_counts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value_counts, other.value_counts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNull_value_counts(), other.isSetNull_value_counts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNull_value_counts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.null_value_counts, other.null_value_counts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNan_value_counts(), other.isSetNan_value_counts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNan_value_counts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nan_value_counts, other.nan_value_counts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLower_bounds(), other.isSetLower_bounds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLower_bounds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lower_bounds, other.lower_bounds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUpper_bounds(), other.isSetUpper_bounds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpper_bounds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upper_bounds, other.upper_bounds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TIcebergColumnStats(");
    boolean first = true;

    if (isSetColumn_sizes()) {
      sb.append("column_sizes:");
      if (this.column_sizes == null) {
        sb.append("null");
      } else {
        sb.append(this.column_sizes);
      }
      first = false;
    }
    if (isSetValue_counts()) {
      if (!first) sb.append(", ");
      sb.append("value_counts:");
      if (this.value_counts == null) {
        sb.append("null");
      } else {
        sb.append(this.value_counts);
      }
      first = false;
    }
    if (isSetNull_value_counts()) {
      if (!first) sb.append(", ");
      sb.append("null_value_counts:");
      if (this.null_value_counts == null) {
        sb.append("null");
      } else {
        sb.append(this.null_value_counts);
      }
      first = false;
    }
    if (isSetNan_value_counts()) {
      if (!first) sb.append(", ");
      sb.append("nan_value_counts:");
      if (this.nan_value_counts == null) {
        sb.append("null");
      } else {
        sb.append(this.nan_value_counts);
      }
      first = false;
    }
    if (isSetLower_bounds()) {
      if (!first) sb.append(", ");
      sb.append("lower_bounds:");
      if (this.lower_bounds == null) {
        sb.append("null");
      } else {
        sb.append(this.lower_bounds);
      }
      first = false;
    }
    if (isSetUpper_bounds()) {
      if (!first) sb.append(", ");
      sb.append("upper_bounds:");
      if (this.upper_bounds == null) {
        sb.append("null");
      } else {
        sb.append(this.upper_bounds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TIcebergColumnStatsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIcebergColumnStatsStandardScheme getScheme() {
      return new TIcebergColumnStatsStandardScheme();
    }
  }

  private static class TIcebergColumnStatsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TIcebergColumnStats> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TIcebergColumnStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_SIZES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map80 = iprot.readMapBegin();
                struct.column_sizes = new java.util.HashMap<java.lang.Integer,java.lang.Long>(2*_map80.size);
                int _key81;
                long _val82;
                for (int _i83 = 0; _i83 < _map80.size; ++_i83)
                {
                  _key81 = iprot.readI32();
                  _val82 = iprot.readI64();
                  struct.column_sizes.put(_key81, _val82);
                }
                iprot.readMapEnd();
              }
              struct.setColumn_sizesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map84 = iprot.readMapBegin();
                struct.value_counts = new java.util.HashMap<java.lang.Integer,java.lang.Long>(2*_map84.size);
                int _key85;
                long _val86;
                for (int _i87 = 0; _i87 < _map84.size; ++_i87)
                {
                  _key85 = iprot.readI32();
                  _val86 = iprot.readI64();
                  struct.value_counts.put(_key85, _val86);
                }
                iprot.readMapEnd();
              }
              struct.setValue_countsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NULL_VALUE_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map88 = iprot.readMapBegin();
                struct.null_value_counts = new java.util.HashMap<java.lang.Integer,java.lang.Long>(2*_map88.size);
                int _key89;
                long _val90;
                for (int _i91 = 0; _i91 < _map88.size; ++_i91)
                {
                  _key89 = iprot.readI32();
                  _val90 = iprot.readI64();
                  struct.null_value_counts.put(_key89, _val90);
                }
                iprot.readMapEnd();
              }
              struct.setNull_value_countsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAN_VALUE_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map92 = iprot.readMapBegin();
                struct.nan_value_counts = new java.util.HashMap<java.lang.Integer,java.lang.Long>(2*_map92.size);
                int _key93;
                long _val94;
                for (int _i95 = 0; _i95 < _map92.size; ++_i95)
                {
                  _key93 = iprot.readI32();
                  _val94 = iprot.readI64();
                  struct.nan_value_counts.put(_key93, _val94);
                }
                iprot.readMapEnd();
              }
              struct.setNan_value_countsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOWER_BOUNDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map96 = iprot.readMapBegin();
                struct.lower_bounds = new java.util.HashMap<java.lang.Integer,java.nio.ByteBuffer>(2*_map96.size);
                int _key97;
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val98;
                for (int _i99 = 0; _i99 < _map96.size; ++_i99)
                {
                  _key97 = iprot.readI32();
                  _val98 = iprot.readBinary();
                  struct.lower_bounds.put(_key97, _val98);
                }
                iprot.readMapEnd();
              }
              struct.setLower_boundsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPPER_BOUNDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map100 = iprot.readMapBegin();
                struct.upper_bounds = new java.util.HashMap<java.lang.Integer,java.nio.ByteBuffer>(2*_map100.size);
                int _key101;
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val102;
                for (int _i103 = 0; _i103 < _map100.size; ++_i103)
                {
                  _key101 = iprot.readI32();
                  _val102 = iprot.readBinary();
                  struct.upper_bounds.put(_key101, _val102);
                }
                iprot.readMapEnd();
              }
              struct.setUpper_boundsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TIcebergColumnStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.column_sizes != null) {
        if (struct.isSetColumn_sizes()) {
          oprot.writeFieldBegin(COLUMN_SIZES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.column_sizes.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Long> _iter104 : struct.column_sizes.entrySet())
            {
              oprot.writeI32(_iter104.getKey());
              oprot.writeI64(_iter104.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.value_counts != null) {
        if (struct.isSetValue_counts()) {
          oprot.writeFieldBegin(VALUE_COUNTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.value_counts.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Long> _iter105 : struct.value_counts.entrySet())
            {
              oprot.writeI32(_iter105.getKey());
              oprot.writeI64(_iter105.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.null_value_counts != null) {
        if (struct.isSetNull_value_counts()) {
          oprot.writeFieldBegin(NULL_VALUE_COUNTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.null_value_counts.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Long> _iter106 : struct.null_value_counts.entrySet())
            {
              oprot.writeI32(_iter106.getKey());
              oprot.writeI64(_iter106.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nan_value_counts != null) {
        if (struct.isSetNan_value_counts()) {
          oprot.writeFieldBegin(NAN_VALUE_COUNTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.nan_value_counts.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Long> _iter107 : struct.nan_value_counts.entrySet())
            {
              oprot.writeI32(_iter107.getKey());
              oprot.writeI64(_iter107.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.lower_bounds != null) {
        if (struct.isSetLower_bounds()) {
          oprot.writeFieldBegin(LOWER_BOUNDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.lower_bounds.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.nio.ByteBuffer> _iter108 : struct.lower_bounds.entrySet())
            {
              oprot.writeI32(_iter108.getKey());
              oprot.writeBinary(_iter108.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.upper_bounds != null) {
        if (struct.isSetUpper_bounds()) {
          oprot.writeFieldBegin(UPPER_BOUNDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.upper_bounds.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.nio.ByteBuffer> _iter109 : struct.upper_bounds.entrySet())
            {
              oprot.writeI32(_iter109.getKey());
              oprot.writeBinary(_iter109.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TIcebergColumnStatsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIcebergColumnStatsTupleScheme getScheme() {
      return new TIcebergColumnStatsTupleScheme();
    }
  }

  private static class TIcebergColumnStatsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TIcebergColumnStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TIcebergColumnStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetColumn_sizes()) {
        optionals.set(0);
      }
      if (struct.isSetValue_counts()) {
        optionals.set(1);
      }
      if (struct.isSetNull_value_counts()) {
        optionals.set(2);
      }
      if (struct.isSetNan_value_counts()) {
        optionals.set(3);
      }
      if (struct.isSetLower_bounds()) {
        optionals.set(4);
      }
      if (struct.isSetUpper_bounds()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetColumn_sizes()) {
        {
          oprot.writeI32(struct.column_sizes.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Long> _iter110 : struct.column_sizes.entrySet())
          {
            oprot.writeI32(_iter110.getKey());
            oprot.writeI64(_iter110.getValue());
          }
        }
      }
      if (struct.isSetValue_counts()) {
        {
          oprot.writeI32(struct.value_counts.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Long> _iter111 : struct.value_counts.entrySet())
          {
            oprot.writeI32(_iter111.getKey());
            oprot.writeI64(_iter111.getValue());
          }
        }
      }
      if (struct.isSetNull_value_counts()) {
        {
          oprot.writeI32(struct.null_value_counts.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Long> _iter112 : struct.null_value_counts.entrySet())
          {
            oprot.writeI32(_iter112.getKey());
            oprot.writeI64(_iter112.getValue());
          }
        }
      }
      if (struct.isSetNan_value_counts()) {
        {
          oprot.writeI32(struct.nan_value_counts.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Long> _iter113 : struct.nan_value_counts.entrySet())
          {
            oprot.writeI32(_iter113.getKey());
            oprot.writeI64(_iter113.getValue());
          }
        }
      }
      if (struct.isSetLower_bounds()) {
        {
          oprot.writeI32(struct.lower_bounds.size());
          for (java.util.Map.Entry<java.lang.Integer, java.nio.ByteBuffer> _iter114 : struct.lower_bounds.entrySet())
          {
            oprot.writeI32(_iter114.getKey());
            oprot.writeBinary(_iter114.getValue());
          }
        }
      }
      if (struct.isSetUpper_bounds()) {
        {
          oprot.writeI32(struct.upper_bounds.size());
          for (java.util.Map.Entry<java.lang.Integer, java.nio.ByteBuffer> _iter115 : struct.upper_bounds.entrySet())
          {
            oprot.writeI32(_iter115.getKey());
            oprot.writeBinary(_iter115.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TIcebergColumnStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map116 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64); 
          struct.column_sizes = new java.util.HashMap<java.lang.Integer,java.lang.Long>(2*_map116.size);
          int _key117;
          long _val118;
          for (int _i119 = 0; _i119 < _map116.size; ++_i119)
          {
            _key117 = iprot.readI32();
            _val118 = iprot.readI64();
            struct.column_sizes.put(_key117, _val118);
          }
        }
        struct.setColumn_sizesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map120 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64); 
          struct.value_counts = new java.util.HashMap<java.lang.Integer,java.lang.Long>(2*_map120.size);
          int _key121;
          long _val122;
          for (int _i123 = 0; _i123 < _map120.size; ++_i123)
          {
            _key121 = iprot.readI32();
            _val122 = iprot.readI64();
            struct.value_counts.put(_key121, _val122);
          }
        }
        struct.setValue_countsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map124 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64); 
          struct.null_value_counts = new java.util.HashMap<java.lang.Integer,java.lang.Long>(2*_map124.size);
          int _key125;
          long _val126;
          for (int _i127 = 0; _i127 < _map124.size; ++_i127)
          {
            _key125 = iprot.readI32();
            _val126 = iprot.readI64();
            struct.null_value_counts.put(_key125, _val126);
          }
        }
        struct.setNull_value_countsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map128 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64); 
          struct.nan_value_counts = new java.util.HashMap<java.lang.Integer,java.lang.Long>(2*_map128.size);
          int _key129;
          long _val130;
          for (int _i131 = 0; _i131 < _map128.size; ++_i131)
          {
            _key129 = iprot.readI32();
            _val130 = iprot.readI64();
            struct.nan_value_counts.put(_key129, _val130);
          }
        }
        struct.setNan_value_countsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map132 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING); 
          struct.lower_bounds = new java.util.HashMap<java.lang.Integer,java.nio.ByteBuffer>(2*_map132.size);
          int _key133;
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val134;
          for (int _i135 = 0; _i135 < _map132.size; ++_i135)
          {
            _key133 = iprot.readI32();
            _val134 = iprot.readBinary();
            struct.lower_bounds.put(_key133, _val134);
          }
        }
        struct.setLower_boundsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map136 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING); 
          struct.upper_bounds = new java.util.HashMap<java.lang.Integer,java.nio.ByteBuffer>(2*_map136.size);
          int _key137;
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val138;
          for (int _i139 = 0; _i139 < _map136.size; ++_i139)
          {
            _key137 = iprot.readI32();
            _val138 = iprot.readBinary();
            struct.upper_bounds.put(_key137, _val138);
          }
        }
        struct.setUpper_boundsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

