/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TRoutineLoadTask implements org.apache.thrift.TBase<TRoutineLoadTask, TRoutineLoadTask._Fields>, java.io.Serializable, Cloneable, Comparable<TRoutineLoadTask> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRoutineLoadTask");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("job_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField AUTH_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("auth_code", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("tbl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MAX_INTERVAL_S_FIELD_DESC = new org.apache.thrift.protocol.TField("max_interval_s", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField MAX_BATCH_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_batch_rows", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField MAX_BATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("max_batch_size", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField KAFKA_LOAD_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("kafka_load_info", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("format", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField PULSAR_LOAD_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("pulsar_load_info", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField MAX_FILTER_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("max_filter_ratio", org.apache.thrift.protocol.TType.DOUBLE, (short)16);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRoutineLoadTaskStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRoutineLoadTaskTupleSchemeFactory();

  /**
   * 
   * @see io.datafibre.fibre.thrift.TLoadSourceType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TLoadSourceType type; // required
  public long job_id; // required
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUniqueId id; // required
  public long txn_id; // required
  public long auth_code; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String db; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String tbl; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String label; // optional
  public long max_interval_s; // optional
  public long max_batch_rows; // optional
  public long max_batch_size; // optional
  public @org.apache.thrift.annotation.Nullable TKafkaLoadInfo kafka_load_info; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExecPlanFragmentParams params; // optional
  /**
   * 
   * @see io.datafibre.fibre.thrift.TFileFormatType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TFileFormatType format; // optional
  public @org.apache.thrift.annotation.Nullable TPulsarLoadInfo pulsar_load_info; // optional
  public double max_filter_ratio; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see io.datafibre.fibre.thrift.TLoadSourceType
     */
    TYPE((short)1, "type"),
    JOB_ID((short)2, "job_id"),
    ID((short)3, "id"),
    TXN_ID((short)4, "txn_id"),
    AUTH_CODE((short)5, "auth_code"),
    DB((short)6, "db"),
    TBL((short)7, "tbl"),
    LABEL((short)8, "label"),
    MAX_INTERVAL_S((short)9, "max_interval_s"),
    MAX_BATCH_ROWS((short)10, "max_batch_rows"),
    MAX_BATCH_SIZE((short)11, "max_batch_size"),
    KAFKA_LOAD_INFO((short)12, "kafka_load_info"),
    PARAMS((short)13, "params"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TFileFormatType
     */
    FORMAT((short)14, "format"),
    PULSAR_LOAD_INFO((short)15, "pulsar_load_info"),
    MAX_FILTER_RATIO((short)16, "max_filter_ratio");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // JOB_ID
          return JOB_ID;
        case 3: // ID
          return ID;
        case 4: // TXN_ID
          return TXN_ID;
        case 5: // AUTH_CODE
          return AUTH_CODE;
        case 6: // DB
          return DB;
        case 7: // TBL
          return TBL;
        case 8: // LABEL
          return LABEL;
        case 9: // MAX_INTERVAL_S
          return MAX_INTERVAL_S;
        case 10: // MAX_BATCH_ROWS
          return MAX_BATCH_ROWS;
        case 11: // MAX_BATCH_SIZE
          return MAX_BATCH_SIZE;
        case 12: // KAFKA_LOAD_INFO
          return KAFKA_LOAD_INFO;
        case 13: // PARAMS
          return PARAMS;
        case 14: // FORMAT
          return FORMAT;
        case 15: // PULSAR_LOAD_INFO
          return PULSAR_LOAD_INFO;
        case 16: // MAX_FILTER_RATIO
          return MAX_FILTER_RATIO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __JOB_ID_ISSET_ID = 0;
  private static final int __TXN_ID_ISSET_ID = 1;
  private static final int __AUTH_CODE_ISSET_ID = 2;
  private static final int __MAX_INTERVAL_S_ISSET_ID = 3;
  private static final int __MAX_BATCH_ROWS_ISSET_ID = 4;
  private static final int __MAX_BATCH_SIZE_ISSET_ID = 5;
  private static final int __MAX_FILTER_RATIO_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DB,_Fields.TBL,_Fields.LABEL,_Fields.MAX_INTERVAL_S,_Fields.MAX_BATCH_ROWS,_Fields.MAX_BATCH_SIZE,_Fields.KAFKA_LOAD_INFO,_Fields.PARAMS,_Fields.FORMAT,_Fields.PULSAR_LOAD_INFO,_Fields.MAX_FILTER_RATIO};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TLoadSourceType.class)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("job_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txn_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUTH_CODE, new org.apache.thrift.meta_data.FieldMetaData("auth_code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TBL, new org.apache.thrift.meta_data.FieldMetaData("tbl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_INTERVAL_S, new org.apache.thrift.meta_data.FieldMetaData("max_interval_s", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_BATCH_ROWS, new org.apache.thrift.meta_data.FieldMetaData("max_batch_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_BATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("max_batch_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.KAFKA_LOAD_INFO, new org.apache.thrift.meta_data.FieldMetaData("kafka_load_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKafkaLoadInfo.class)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TExecPlanFragmentParams.class)));
    tmpMap.put(_Fields.FORMAT, new org.apache.thrift.meta_data.FieldMetaData("format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TFileFormatType.class)));
    tmpMap.put(_Fields.PULSAR_LOAD_INFO, new org.apache.thrift.meta_data.FieldMetaData("pulsar_load_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPulsarLoadInfo.class)));
    tmpMap.put(_Fields.MAX_FILTER_RATIO, new org.apache.thrift.meta_data.FieldMetaData("max_filter_ratio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRoutineLoadTask.class, metaDataMap);
  }

  public TRoutineLoadTask() {
  }

  public TRoutineLoadTask(
    io.datafibre.fibre.thrift.TLoadSourceType type,
    long job_id,
    io.datafibre.fibre.thrift.TUniqueId id,
    long txn_id,
    long auth_code)
  {
    this();
    this.type = type;
    this.job_id = job_id;
    setJob_idIsSet(true);
    this.id = id;
    this.txn_id = txn_id;
    setTxn_idIsSet(true);
    this.auth_code = auth_code;
    setAuth_codeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRoutineLoadTask(TRoutineLoadTask other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.job_id = other.job_id;
    if (other.isSetId()) {
      this.id = new io.datafibre.fibre.thrift.TUniqueId(other.id);
    }
    this.txn_id = other.txn_id;
    this.auth_code = other.auth_code;
    if (other.isSetDb()) {
      this.db = other.db;
    }
    if (other.isSetTbl()) {
      this.tbl = other.tbl;
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    this.max_interval_s = other.max_interval_s;
    this.max_batch_rows = other.max_batch_rows;
    this.max_batch_size = other.max_batch_size;
    if (other.isSetKafka_load_info()) {
      this.kafka_load_info = new TKafkaLoadInfo(other.kafka_load_info);
    }
    if (other.isSetParams()) {
      this.params = new io.datafibre.fibre.thrift.TExecPlanFragmentParams(other.params);
    }
    if (other.isSetFormat()) {
      this.format = other.format;
    }
    if (other.isSetPulsar_load_info()) {
      this.pulsar_load_info = new TPulsarLoadInfo(other.pulsar_load_info);
    }
    this.max_filter_ratio = other.max_filter_ratio;
  }

  @Override
  public TRoutineLoadTask deepCopy() {
    return new TRoutineLoadTask(this);
  }

  @Override
  public void clear() {
    this.type = null;
    setJob_idIsSet(false);
    this.job_id = 0;
    this.id = null;
    setTxn_idIsSet(false);
    this.txn_id = 0;
    setAuth_codeIsSet(false);
    this.auth_code = 0;
    this.db = null;
    this.tbl = null;
    this.label = null;
    setMax_interval_sIsSet(false);
    this.max_interval_s = 0;
    setMax_batch_rowsIsSet(false);
    this.max_batch_rows = 0;
    setMax_batch_sizeIsSet(false);
    this.max_batch_size = 0;
    this.kafka_load_info = null;
    this.params = null;
    this.format = null;
    this.pulsar_load_info = null;
    setMax_filter_ratioIsSet(false);
    this.max_filter_ratio = 0.0;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TLoadSourceType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TLoadSourceType getType() {
    return this.type;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TLoadSourceType
   */
  public TRoutineLoadTask setType(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TLoadSourceType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getJob_id() {
    return this.job_id;
  }

  public TRoutineLoadTask setJob_id(long job_id) {
    this.job_id = job_id;
    setJob_idIsSet(true);
    return this;
  }

  public void unsetJob_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOB_ID_ISSET_ID);
  }

  /** Returns true if field job_id is set (has been assigned a value) and false otherwise */
  public boolean isSetJob_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOB_ID_ISSET_ID);
  }

  public void setJob_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOB_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TUniqueId getId() {
    return this.id;
  }

  public TRoutineLoadTask setId(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUniqueId id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public long getTxn_id() {
    return this.txn_id;
  }

  public TRoutineLoadTask setTxn_id(long txn_id) {
    this.txn_id = txn_id;
    setTxn_idIsSet(true);
    return this;
  }

  public void unsetTxn_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  /** Returns true if field txn_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  public void setTxn_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXN_ID_ISSET_ID, value);
  }

  public long getAuth_code() {
    return this.auth_code;
  }

  public TRoutineLoadTask setAuth_code(long auth_code) {
    this.auth_code = auth_code;
    setAuth_codeIsSet(true);
    return this;
  }

  public void unsetAuth_code() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTH_CODE_ISSET_ID);
  }

  /** Returns true if field auth_code is set (has been assigned a value) and false otherwise */
  public boolean isSetAuth_code() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTH_CODE_ISSET_ID);
  }

  public void setAuth_codeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTH_CODE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb() {
    return this.db;
  }

  public TRoutineLoadTask setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTbl() {
    return this.tbl;
  }

  public TRoutineLoadTask setTbl(@org.apache.thrift.annotation.Nullable java.lang.String tbl) {
    this.tbl = tbl;
    return this;
  }

  public void unsetTbl() {
    this.tbl = null;
  }

  /** Returns true if field tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetTbl() {
    return this.tbl != null;
  }

  public void setTblIsSet(boolean value) {
    if (!value) {
      this.tbl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLabel() {
    return this.label;
  }

  public TRoutineLoadTask setLabel(@org.apache.thrift.annotation.Nullable java.lang.String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public long getMax_interval_s() {
    return this.max_interval_s;
  }

  public TRoutineLoadTask setMax_interval_s(long max_interval_s) {
    this.max_interval_s = max_interval_s;
    setMax_interval_sIsSet(true);
    return this;
  }

  public void unsetMax_interval_s() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_INTERVAL_S_ISSET_ID);
  }

  /** Returns true if field max_interval_s is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_interval_s() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_INTERVAL_S_ISSET_ID);
  }

  public void setMax_interval_sIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_INTERVAL_S_ISSET_ID, value);
  }

  public long getMax_batch_rows() {
    return this.max_batch_rows;
  }

  public TRoutineLoadTask setMax_batch_rows(long max_batch_rows) {
    this.max_batch_rows = max_batch_rows;
    setMax_batch_rowsIsSet(true);
    return this;
  }

  public void unsetMax_batch_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_BATCH_ROWS_ISSET_ID);
  }

  /** Returns true if field max_batch_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_batch_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_BATCH_ROWS_ISSET_ID);
  }

  public void setMax_batch_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_BATCH_ROWS_ISSET_ID, value);
  }

  public long getMax_batch_size() {
    return this.max_batch_size;
  }

  public TRoutineLoadTask setMax_batch_size(long max_batch_size) {
    this.max_batch_size = max_batch_size;
    setMax_batch_sizeIsSet(true);
    return this;
  }

  public void unsetMax_batch_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_BATCH_SIZE_ISSET_ID);
  }

  /** Returns true if field max_batch_size is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_batch_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_BATCH_SIZE_ISSET_ID);
  }

  public void setMax_batch_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_BATCH_SIZE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TKafkaLoadInfo getKafka_load_info() {
    return this.kafka_load_info;
  }

  public TRoutineLoadTask setKafka_load_info(@org.apache.thrift.annotation.Nullable TKafkaLoadInfo kafka_load_info) {
    this.kafka_load_info = kafka_load_info;
    return this;
  }

  public void unsetKafka_load_info() {
    this.kafka_load_info = null;
  }

  /** Returns true if field kafka_load_info is set (has been assigned a value) and false otherwise */
  public boolean isSetKafka_load_info() {
    return this.kafka_load_info != null;
  }

  public void setKafka_load_infoIsSet(boolean value) {
    if (!value) {
      this.kafka_load_info = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TExecPlanFragmentParams getParams() {
    return this.params;
  }

  public TRoutineLoadTask setParams(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExecPlanFragmentParams params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TFileFormatType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TFileFormatType getFormat() {
    return this.format;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TFileFormatType
   */
  public TRoutineLoadTask setFormat(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TFileFormatType format) {
    this.format = format;
    return this;
  }

  public void unsetFormat() {
    this.format = null;
  }

  /** Returns true if field format is set (has been assigned a value) and false otherwise */
  public boolean isSetFormat() {
    return this.format != null;
  }

  public void setFormatIsSet(boolean value) {
    if (!value) {
      this.format = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TPulsarLoadInfo getPulsar_load_info() {
    return this.pulsar_load_info;
  }

  public TRoutineLoadTask setPulsar_load_info(@org.apache.thrift.annotation.Nullable TPulsarLoadInfo pulsar_load_info) {
    this.pulsar_load_info = pulsar_load_info;
    return this;
  }

  public void unsetPulsar_load_info() {
    this.pulsar_load_info = null;
  }

  /** Returns true if field pulsar_load_info is set (has been assigned a value) and false otherwise */
  public boolean isSetPulsar_load_info() {
    return this.pulsar_load_info != null;
  }

  public void setPulsar_load_infoIsSet(boolean value) {
    if (!value) {
      this.pulsar_load_info = null;
    }
  }

  public double getMax_filter_ratio() {
    return this.max_filter_ratio;
  }

  public TRoutineLoadTask setMax_filter_ratio(double max_filter_ratio) {
    this.max_filter_ratio = max_filter_ratio;
    setMax_filter_ratioIsSet(true);
    return this;
  }

  public void unsetMax_filter_ratio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_FILTER_RATIO_ISSET_ID);
  }

  /** Returns true if field max_filter_ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_filter_ratio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_FILTER_RATIO_ISSET_ID);
  }

  public void setMax_filter_ratioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_FILTER_RATIO_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((io.datafibre.fibre.thrift.TLoadSourceType)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJob_id();
      } else {
        setJob_id((java.lang.Long)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((io.datafibre.fibre.thrift.TUniqueId)value);
      }
      break;

    case TXN_ID:
      if (value == null) {
        unsetTxn_id();
      } else {
        setTxn_id((java.lang.Long)value);
      }
      break;

    case AUTH_CODE:
      if (value == null) {
        unsetAuth_code();
      } else {
        setAuth_code((java.lang.Long)value);
      }
      break;

    case DB:
      if (value == null) {
        unsetDb();
      } else {
        setDb((java.lang.String)value);
      }
      break;

    case TBL:
      if (value == null) {
        unsetTbl();
      } else {
        setTbl((java.lang.String)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((java.lang.String)value);
      }
      break;

    case MAX_INTERVAL_S:
      if (value == null) {
        unsetMax_interval_s();
      } else {
        setMax_interval_s((java.lang.Long)value);
      }
      break;

    case MAX_BATCH_ROWS:
      if (value == null) {
        unsetMax_batch_rows();
      } else {
        setMax_batch_rows((java.lang.Long)value);
      }
      break;

    case MAX_BATCH_SIZE:
      if (value == null) {
        unsetMax_batch_size();
      } else {
        setMax_batch_size((java.lang.Long)value);
      }
      break;

    case KAFKA_LOAD_INFO:
      if (value == null) {
        unsetKafka_load_info();
      } else {
        setKafka_load_info((TKafkaLoadInfo)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((io.datafibre.fibre.thrift.TExecPlanFragmentParams)value);
      }
      break;

    case FORMAT:
      if (value == null) {
        unsetFormat();
      } else {
        setFormat((io.datafibre.fibre.thrift.TFileFormatType)value);
      }
      break;

    case PULSAR_LOAD_INFO:
      if (value == null) {
        unsetPulsar_load_info();
      } else {
        setPulsar_load_info((TPulsarLoadInfo)value);
      }
      break;

    case MAX_FILTER_RATIO:
      if (value == null) {
        unsetMax_filter_ratio();
      } else {
        setMax_filter_ratio((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case JOB_ID:
      return getJob_id();

    case ID:
      return getId();

    case TXN_ID:
      return getTxn_id();

    case AUTH_CODE:
      return getAuth_code();

    case DB:
      return getDb();

    case TBL:
      return getTbl();

    case LABEL:
      return getLabel();

    case MAX_INTERVAL_S:
      return getMax_interval_s();

    case MAX_BATCH_ROWS:
      return getMax_batch_rows();

    case MAX_BATCH_SIZE:
      return getMax_batch_size();

    case KAFKA_LOAD_INFO:
      return getKafka_load_info();

    case PARAMS:
      return getParams();

    case FORMAT:
      return getFormat();

    case PULSAR_LOAD_INFO:
      return getPulsar_load_info();

    case MAX_FILTER_RATIO:
      return getMax_filter_ratio();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case JOB_ID:
      return isSetJob_id();
    case ID:
      return isSetId();
    case TXN_ID:
      return isSetTxn_id();
    case AUTH_CODE:
      return isSetAuth_code();
    case DB:
      return isSetDb();
    case TBL:
      return isSetTbl();
    case LABEL:
      return isSetLabel();
    case MAX_INTERVAL_S:
      return isSetMax_interval_s();
    case MAX_BATCH_ROWS:
      return isSetMax_batch_rows();
    case MAX_BATCH_SIZE:
      return isSetMax_batch_size();
    case KAFKA_LOAD_INFO:
      return isSetKafka_load_info();
    case PARAMS:
      return isSetParams();
    case FORMAT:
      return isSetFormat();
    case PULSAR_LOAD_INFO:
      return isSetPulsar_load_info();
    case MAX_FILTER_RATIO:
      return isSetMax_filter_ratio();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRoutineLoadTask)
      return this.equals((TRoutineLoadTask)that);
    return false;
  }

  public boolean equals(TRoutineLoadTask that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_job_id = true;
    boolean that_present_job_id = true;
    if (this_present_job_id || that_present_job_id) {
      if (!(this_present_job_id && that_present_job_id))
        return false;
      if (this.job_id != that.job_id)
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_txn_id = true;
    boolean that_present_txn_id = true;
    if (this_present_txn_id || that_present_txn_id) {
      if (!(this_present_txn_id && that_present_txn_id))
        return false;
      if (this.txn_id != that.txn_id)
        return false;
    }

    boolean this_present_auth_code = true;
    boolean that_present_auth_code = true;
    if (this_present_auth_code || that_present_auth_code) {
      if (!(this_present_auth_code && that_present_auth_code))
        return false;
      if (this.auth_code != that.auth_code)
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_tbl = true && this.isSetTbl();
    boolean that_present_tbl = true && that.isSetTbl();
    if (this_present_tbl || that_present_tbl) {
      if (!(this_present_tbl && that_present_tbl))
        return false;
      if (!this.tbl.equals(that.tbl))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_max_interval_s = true && this.isSetMax_interval_s();
    boolean that_present_max_interval_s = true && that.isSetMax_interval_s();
    if (this_present_max_interval_s || that_present_max_interval_s) {
      if (!(this_present_max_interval_s && that_present_max_interval_s))
        return false;
      if (this.max_interval_s != that.max_interval_s)
        return false;
    }

    boolean this_present_max_batch_rows = true && this.isSetMax_batch_rows();
    boolean that_present_max_batch_rows = true && that.isSetMax_batch_rows();
    if (this_present_max_batch_rows || that_present_max_batch_rows) {
      if (!(this_present_max_batch_rows && that_present_max_batch_rows))
        return false;
      if (this.max_batch_rows != that.max_batch_rows)
        return false;
    }

    boolean this_present_max_batch_size = true && this.isSetMax_batch_size();
    boolean that_present_max_batch_size = true && that.isSetMax_batch_size();
    if (this_present_max_batch_size || that_present_max_batch_size) {
      if (!(this_present_max_batch_size && that_present_max_batch_size))
        return false;
      if (this.max_batch_size != that.max_batch_size)
        return false;
    }

    boolean this_present_kafka_load_info = true && this.isSetKafka_load_info();
    boolean that_present_kafka_load_info = true && that.isSetKafka_load_info();
    if (this_present_kafka_load_info || that_present_kafka_load_info) {
      if (!(this_present_kafka_load_info && that_present_kafka_load_info))
        return false;
      if (!this.kafka_load_info.equals(that.kafka_load_info))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_format = true && this.isSetFormat();
    boolean that_present_format = true && that.isSetFormat();
    if (this_present_format || that_present_format) {
      if (!(this_present_format && that_present_format))
        return false;
      if (!this.format.equals(that.format))
        return false;
    }

    boolean this_present_pulsar_load_info = true && this.isSetPulsar_load_info();
    boolean that_present_pulsar_load_info = true && that.isSetPulsar_load_info();
    if (this_present_pulsar_load_info || that_present_pulsar_load_info) {
      if (!(this_present_pulsar_load_info && that_present_pulsar_load_info))
        return false;
      if (!this.pulsar_load_info.equals(that.pulsar_load_info))
        return false;
    }

    boolean this_present_max_filter_ratio = true && this.isSetMax_filter_ratio();
    boolean that_present_max_filter_ratio = true && that.isSetMax_filter_ratio();
    if (this_present_max_filter_ratio || that_present_max_filter_ratio) {
      if (!(this_present_max_filter_ratio && that_present_max_filter_ratio))
        return false;
      if (this.max_filter_ratio != that.max_filter_ratio)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(job_id);

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txn_id);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(auth_code);

    hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
    if (isSetDb())
      hashCode = hashCode * 8191 + db.hashCode();

    hashCode = hashCode * 8191 + ((isSetTbl()) ? 131071 : 524287);
    if (isSetTbl())
      hashCode = hashCode * 8191 + tbl.hashCode();

    hashCode = hashCode * 8191 + ((isSetLabel()) ? 131071 : 524287);
    if (isSetLabel())
      hashCode = hashCode * 8191 + label.hashCode();

    hashCode = hashCode * 8191 + ((isSetMax_interval_s()) ? 131071 : 524287);
    if (isSetMax_interval_s())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_interval_s);

    hashCode = hashCode * 8191 + ((isSetMax_batch_rows()) ? 131071 : 524287);
    if (isSetMax_batch_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_batch_rows);

    hashCode = hashCode * 8191 + ((isSetMax_batch_size()) ? 131071 : 524287);
    if (isSetMax_batch_size())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_batch_size);

    hashCode = hashCode * 8191 + ((isSetKafka_load_info()) ? 131071 : 524287);
    if (isSetKafka_load_info())
      hashCode = hashCode * 8191 + kafka_load_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
    if (isSetParams())
      hashCode = hashCode * 8191 + params.hashCode();

    hashCode = hashCode * 8191 + ((isSetFormat()) ? 131071 : 524287);
    if (isSetFormat())
      hashCode = hashCode * 8191 + format.getValue();

    hashCode = hashCode * 8191 + ((isSetPulsar_load_info()) ? 131071 : 524287);
    if (isSetPulsar_load_info())
      hashCode = hashCode * 8191 + pulsar_load_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetMax_filter_ratio()) ? 131071 : 524287);
    if (isSetMax_filter_ratio())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_filter_ratio);

    return hashCode;
  }

  @Override
  public int compareTo(TRoutineLoadTask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJob_id(), other.isSetJob_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job_id, other.job_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxn_id(), other.isSetTxn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_id, other.txn_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAuth_code(), other.isSetAuth_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuth_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth_code, other.auth_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb(), other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTbl(), other.isSetTbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbl, other.tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLabel(), other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_interval_s(), other.isSetMax_interval_s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_interval_s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_interval_s, other.max_interval_s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_batch_rows(), other.isSetMax_batch_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_batch_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_batch_rows, other.max_batch_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_batch_size(), other.isSetMax_batch_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_batch_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_batch_size, other.max_batch_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKafka_load_info(), other.isSetKafka_load_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKafka_load_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kafka_load_info, other.kafka_load_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetParams(), other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFormat(), other.isSetFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format, other.format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPulsar_load_info(), other.isSetPulsar_load_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPulsar_load_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pulsar_load_info, other.pulsar_load_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_filter_ratio(), other.isSetMax_filter_ratio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_filter_ratio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_filter_ratio, other.max_filter_ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRoutineLoadTask(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("job_id:");
    sb.append(this.job_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("txn_id:");
    sb.append(this.txn_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("auth_code:");
    sb.append(this.auth_code);
    first = false;
    if (isSetDb()) {
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
    }
    if (isSetTbl()) {
      if (!first) sb.append(", ");
      sb.append("tbl:");
      if (this.tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl);
      }
      first = false;
    }
    if (isSetLabel()) {
      if (!first) sb.append(", ");
      sb.append("label:");
      if (this.label == null) {
        sb.append("null");
      } else {
        sb.append(this.label);
      }
      first = false;
    }
    if (isSetMax_interval_s()) {
      if (!first) sb.append(", ");
      sb.append("max_interval_s:");
      sb.append(this.max_interval_s);
      first = false;
    }
    if (isSetMax_batch_rows()) {
      if (!first) sb.append(", ");
      sb.append("max_batch_rows:");
      sb.append(this.max_batch_rows);
      first = false;
    }
    if (isSetMax_batch_size()) {
      if (!first) sb.append(", ");
      sb.append("max_batch_size:");
      sb.append(this.max_batch_size);
      first = false;
    }
    if (isSetKafka_load_info()) {
      if (!first) sb.append(", ");
      sb.append("kafka_load_info:");
      if (this.kafka_load_info == null) {
        sb.append("null");
      } else {
        sb.append(this.kafka_load_info);
      }
      first = false;
    }
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    if (isSetFormat()) {
      if (!first) sb.append(", ");
      sb.append("format:");
      if (this.format == null) {
        sb.append("null");
      } else {
        sb.append(this.format);
      }
      first = false;
    }
    if (isSetPulsar_load_info()) {
      if (!first) sb.append(", ");
      sb.append("pulsar_load_info:");
      if (this.pulsar_load_info == null) {
        sb.append("null");
      } else {
        sb.append(this.pulsar_load_info);
      }
      first = false;
    }
    if (isSetMax_filter_ratio()) {
      if (!first) sb.append(", ");
      sb.append("max_filter_ratio:");
      sb.append(this.max_filter_ratio);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'job_id' because it's a primitive and you chose the non-beans generator.
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'txn_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'auth_code' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (id != null) {
      id.validate();
    }
    if (kafka_load_info != null) {
      kafka_load_info.validate();
    }
    if (params != null) {
      params.validate();
    }
    if (pulsar_load_info != null) {
      pulsar_load_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRoutineLoadTaskStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRoutineLoadTaskStandardScheme getScheme() {
      return new TRoutineLoadTaskStandardScheme();
    }
  }

  private static class TRoutineLoadTaskStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRoutineLoadTask> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TRoutineLoadTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = io.datafibre.fibre.thrift.TLoadSourceType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.job_id = iprot.readI64();
              struct.setJob_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new io.datafibre.fibre.thrift.TUniqueId();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txn_id = iprot.readI64();
              struct.setTxn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AUTH_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.auth_code = iprot.readI64();
              struct.setAuth_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tbl = iprot.readString();
              struct.setTblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAX_INTERVAL_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_interval_s = iprot.readI64();
              struct.setMax_interval_sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAX_BATCH_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_batch_rows = iprot.readI64();
              struct.setMax_batch_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAX_BATCH_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_batch_size = iprot.readI64();
              struct.setMax_batch_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // KAFKA_LOAD_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.kafka_load_info = new TKafkaLoadInfo();
              struct.kafka_load_info.read(iprot);
              struct.setKafka_load_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.params = new io.datafibre.fibre.thrift.TExecPlanFragmentParams();
              struct.params.read(iprot);
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.format = io.datafibre.fibre.thrift.TFileFormatType.findByValue(iprot.readI32());
              struct.setFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PULSAR_LOAD_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pulsar_load_info = new TPulsarLoadInfo();
              struct.pulsar_load_info.read(iprot);
              struct.setPulsar_load_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MAX_FILTER_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max_filter_ratio = iprot.readDouble();
              struct.setMax_filter_ratioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetJob_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'job_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTxn_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'txn_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAuth_code()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'auth_code' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TRoutineLoadTask struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
      oprot.writeI64(struct.job_id);
      oprot.writeFieldEnd();
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        struct.id.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
      oprot.writeI64(struct.txn_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUTH_CODE_FIELD_DESC);
      oprot.writeI64(struct.auth_code);
      oprot.writeFieldEnd();
      if (struct.db != null) {
        if (struct.isSetDb()) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tbl != null) {
        if (struct.isSetTbl()) {
          oprot.writeFieldBegin(TBL_FIELD_DESC);
          oprot.writeString(struct.tbl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.label != null) {
        if (struct.isSetLabel()) {
          oprot.writeFieldBegin(LABEL_FIELD_DESC);
          oprot.writeString(struct.label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMax_interval_s()) {
        oprot.writeFieldBegin(MAX_INTERVAL_S_FIELD_DESC);
        oprot.writeI64(struct.max_interval_s);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_batch_rows()) {
        oprot.writeFieldBegin(MAX_BATCH_ROWS_FIELD_DESC);
        oprot.writeI64(struct.max_batch_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_batch_size()) {
        oprot.writeFieldBegin(MAX_BATCH_SIZE_FIELD_DESC);
        oprot.writeI64(struct.max_batch_size);
        oprot.writeFieldEnd();
      }
      if (struct.kafka_load_info != null) {
        if (struct.isSetKafka_load_info()) {
          oprot.writeFieldBegin(KAFKA_LOAD_INFO_FIELD_DESC);
          struct.kafka_load_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.format != null) {
        if (struct.isSetFormat()) {
          oprot.writeFieldBegin(FORMAT_FIELD_DESC);
          oprot.writeI32(struct.format.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.pulsar_load_info != null) {
        if (struct.isSetPulsar_load_info()) {
          oprot.writeFieldBegin(PULSAR_LOAD_INFO_FIELD_DESC);
          struct.pulsar_load_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMax_filter_ratio()) {
        oprot.writeFieldBegin(MAX_FILTER_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.max_filter_ratio);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRoutineLoadTaskTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRoutineLoadTaskTupleScheme getScheme() {
      return new TRoutineLoadTaskTupleScheme();
    }
  }

  private static class TRoutineLoadTaskTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRoutineLoadTask> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRoutineLoadTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      oprot.writeI64(struct.job_id);
      struct.id.write(oprot);
      oprot.writeI64(struct.txn_id);
      oprot.writeI64(struct.auth_code);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDb()) {
        optionals.set(0);
      }
      if (struct.isSetTbl()) {
        optionals.set(1);
      }
      if (struct.isSetLabel()) {
        optionals.set(2);
      }
      if (struct.isSetMax_interval_s()) {
        optionals.set(3);
      }
      if (struct.isSetMax_batch_rows()) {
        optionals.set(4);
      }
      if (struct.isSetMax_batch_size()) {
        optionals.set(5);
      }
      if (struct.isSetKafka_load_info()) {
        optionals.set(6);
      }
      if (struct.isSetParams()) {
        optionals.set(7);
      }
      if (struct.isSetFormat()) {
        optionals.set(8);
      }
      if (struct.isSetPulsar_load_info()) {
        optionals.set(9);
      }
      if (struct.isSetMax_filter_ratio()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetDb()) {
        oprot.writeString(struct.db);
      }
      if (struct.isSetTbl()) {
        oprot.writeString(struct.tbl);
      }
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
      if (struct.isSetMax_interval_s()) {
        oprot.writeI64(struct.max_interval_s);
      }
      if (struct.isSetMax_batch_rows()) {
        oprot.writeI64(struct.max_batch_rows);
      }
      if (struct.isSetMax_batch_size()) {
        oprot.writeI64(struct.max_batch_size);
      }
      if (struct.isSetKafka_load_info()) {
        struct.kafka_load_info.write(oprot);
      }
      if (struct.isSetParams()) {
        struct.params.write(oprot);
      }
      if (struct.isSetFormat()) {
        oprot.writeI32(struct.format.getValue());
      }
      if (struct.isSetPulsar_load_info()) {
        struct.pulsar_load_info.write(oprot);
      }
      if (struct.isSetMax_filter_ratio()) {
        oprot.writeDouble(struct.max_filter_ratio);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRoutineLoadTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.type = io.datafibre.fibre.thrift.TLoadSourceType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.job_id = iprot.readI64();
      struct.setJob_idIsSet(true);
      struct.id = new io.datafibre.fibre.thrift.TUniqueId();
      struct.id.read(iprot);
      struct.setIdIsSet(true);
      struct.txn_id = iprot.readI64();
      struct.setTxn_idIsSet(true);
      struct.auth_code = iprot.readI64();
      struct.setAuth_codeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.db = iprot.readString();
        struct.setDbIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tbl = iprot.readString();
        struct.setTblIsSet(true);
      }
      if (incoming.get(2)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.max_interval_s = iprot.readI64();
        struct.setMax_interval_sIsSet(true);
      }
      if (incoming.get(4)) {
        struct.max_batch_rows = iprot.readI64();
        struct.setMax_batch_rowsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.max_batch_size = iprot.readI64();
        struct.setMax_batch_sizeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.kafka_load_info = new TKafkaLoadInfo();
        struct.kafka_load_info.read(iprot);
        struct.setKafka_load_infoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.params = new io.datafibre.fibre.thrift.TExecPlanFragmentParams();
        struct.params.read(iprot);
        struct.setParamsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.format = io.datafibre.fibre.thrift.TFileFormatType.findByValue(iprot.readI32());
        struct.setFormatIsSet(true);
      }
      if (incoming.get(9)) {
        struct.pulsar_load_info = new TPulsarLoadInfo();
        struct.pulsar_load_info.read(iprot);
        struct.setPulsar_load_infoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.max_filter_ratio = iprot.readDouble();
        struct.setMax_filter_ratioIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

