/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TPlanNode implements org.apache.thrift.TBase<TPlanNode, TPlanNode._Fields>, java.io.Serializable, Cloneable, Comparable<TPlanNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlanNode");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("node_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("node_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("num_children", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ROW_TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("row_tuples", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField NULLABLE_TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("nullable_tuples", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("conjuncts", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField COMPACT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("compact_data", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField HASH_JOIN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("hash_join_node", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField AGG_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("agg_node", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField SORT_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_node", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField MERGE_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("merge_node", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField EXCHANGE_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchange_node", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField MYSQL_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mysql_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField OLAP_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("olap_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField FILE_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("file_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField SCHEMA_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField META_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("meta_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)24);
  private static final org.apache.thrift.protocol.TField ANALYTIC_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("analytic_node", org.apache.thrift.protocol.TType.STRUCT, (short)25);
  private static final org.apache.thrift.protocol.TField UNION_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("union_node", org.apache.thrift.protocol.TType.STRUCT, (short)28);
  private static final org.apache.thrift.protocol.TField RESOURCE_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_profile", org.apache.thrift.protocol.TType.STRUCT, (short)29);
  private static final org.apache.thrift.protocol.TField ES_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("es_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)30);
  private static final org.apache.thrift.protocol.TField REPEAT_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("repeat_node", org.apache.thrift.protocol.TType.STRUCT, (short)31);
  private static final org.apache.thrift.protocol.TField ASSERT_NUM_ROWS_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("assert_num_rows_node", org.apache.thrift.protocol.TType.STRUCT, (short)32);
  private static final org.apache.thrift.protocol.TField INTERSECT_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("intersect_node", org.apache.thrift.protocol.TType.STRUCT, (short)33);
  private static final org.apache.thrift.protocol.TField EXCEPT_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("except_node", org.apache.thrift.protocol.TType.STRUCT, (short)34);
  private static final org.apache.thrift.protocol.TField MERGE_JOIN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("merge_join_node", org.apache.thrift.protocol.TType.STRUCT, (short)35);
  private static final org.apache.thrift.protocol.TField USE_VECTORIZED_FIELD_DESC = new org.apache.thrift.protocol.TField("use_vectorized", org.apache.thrift.protocol.TType.BOOL, (short)51);
  private static final org.apache.thrift.protocol.TField HDFS_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("hdfs_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)52);
  private static final org.apache.thrift.protocol.TField PROJECT_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("project_node", org.apache.thrift.protocol.TType.STRUCT, (short)53);
  private static final org.apache.thrift.protocol.TField TABLE_FUNCTION_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("table_function_node", org.apache.thrift.protocol.TType.STRUCT, (short)54);
  private static final org.apache.thrift.protocol.TField PROBE_RUNTIME_FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("probe_runtime_filters", org.apache.thrift.protocol.TType.LIST, (short)55);
  private static final org.apache.thrift.protocol.TField DECODE_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("decode_node", org.apache.thrift.protocol.TType.STRUCT, (short)56);
  private static final org.apache.thrift.protocol.TField LOCAL_RF_WAITING_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("local_rf_waiting_set", org.apache.thrift.protocol.TType.SET, (short)57);
  private static final org.apache.thrift.protocol.TField FILTER_NULL_VALUE_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_null_value_columns", org.apache.thrift.protocol.TType.LIST, (short)58);
  private static final org.apache.thrift.protocol.TField NEED_CREATE_TUPLE_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("need_create_tuple_columns", org.apache.thrift.protocol.TType.BOOL, (short)59);
  private static final org.apache.thrift.protocol.TField JDBC_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("jdbc_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)60);
  private static final org.apache.thrift.protocol.TField CONNECTOR_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("connector_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)61);
  private static final org.apache.thrift.protocol.TField CROSS_JOIN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cross_join_node", org.apache.thrift.protocol.TType.STRUCT, (short)62);
  private static final org.apache.thrift.protocol.TField LAKE_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("lake_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)63);
  private static final org.apache.thrift.protocol.TField NESTLOOP_JOIN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("nestloop_join_node", org.apache.thrift.protocol.TType.STRUCT, (short)64);
  private static final org.apache.thrift.protocol.TField STREAM_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stream_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)70);
  private static final org.apache.thrift.protocol.TField STREAM_JOIN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stream_join_node", org.apache.thrift.protocol.TType.STRUCT, (short)71);
  private static final org.apache.thrift.protocol.TField STREAM_AGG_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stream_agg_node", org.apache.thrift.protocol.TType.STRUCT, (short)72);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPlanNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPlanNodeTupleSchemeFactory();

  public int node_id; // required
  /**
   * 
   * @see TPlanNodeType
   */
  public @org.apache.thrift.annotation.Nullable TPlanNodeType node_type; // required
  public int num_children; // required
  public long limit; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> row_tuples; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> nullable_tuples; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> conjuncts; // optional
  public boolean compact_data; // required
  public @org.apache.thrift.annotation.Nullable THashJoinNode hash_join_node; // optional
  public @org.apache.thrift.annotation.Nullable TAggregationNode agg_node; // optional
  public @org.apache.thrift.annotation.Nullable TSortNode sort_node; // optional
  public @org.apache.thrift.annotation.Nullable TMergeNode merge_node; // optional
  public @org.apache.thrift.annotation.Nullable TExchangeNode exchange_node; // optional
  public @org.apache.thrift.annotation.Nullable TMySQLScanNode mysql_scan_node; // optional
  public @org.apache.thrift.annotation.Nullable TOlapScanNode olap_scan_node; // optional
  public @org.apache.thrift.annotation.Nullable TFileScanNode file_scan_node; // optional
  public @org.apache.thrift.annotation.Nullable TSchemaScanNode schema_scan_node; // optional
  public @org.apache.thrift.annotation.Nullable TMetaScanNode meta_scan_node; // optional
  public @org.apache.thrift.annotation.Nullable TAnalyticNode analytic_node; // optional
  public @org.apache.thrift.annotation.Nullable TUnionNode union_node; // optional
  public @org.apache.thrift.annotation.Nullable TBackendResourceProfile resource_profile; // optional
  public @org.apache.thrift.annotation.Nullable TEsScanNode es_scan_node; // optional
  public @org.apache.thrift.annotation.Nullable TRepeatNode repeat_node; // optional
  public @org.apache.thrift.annotation.Nullable TAssertNumRowsNode assert_num_rows_node; // optional
  public @org.apache.thrift.annotation.Nullable TIntersectNode intersect_node; // optional
  public @org.apache.thrift.annotation.Nullable TExceptNode except_node; // optional
  public @org.apache.thrift.annotation.Nullable TMergeJoinNode merge_join_node; // optional
  public boolean use_vectorized; // optional
  public @org.apache.thrift.annotation.Nullable THdfsScanNode hdfs_scan_node; // optional
  public @org.apache.thrift.annotation.Nullable TProjectNode project_node; // optional
  public @org.apache.thrift.annotation.Nullable TTableFunctionNode table_function_node; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TRuntimeFilterDescription> probe_runtime_filters; // optional
  public @org.apache.thrift.annotation.Nullable TDecodeNode decode_node; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> local_rf_waiting_set; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> filter_null_value_columns; // optional
  public boolean need_create_tuple_columns; // optional
  public @org.apache.thrift.annotation.Nullable TJDBCScanNode jdbc_scan_node; // optional
  public @org.apache.thrift.annotation.Nullable TConnectorScanNode connector_scan_node; // optional
  public @org.apache.thrift.annotation.Nullable TCrossJoinNode cross_join_node; // optional
  public @org.apache.thrift.annotation.Nullable TLakeScanNode lake_scan_node; // optional
  public @org.apache.thrift.annotation.Nullable TNestLoopJoinNode nestloop_join_node; // optional
  public @org.apache.thrift.annotation.Nullable TStreamScanNode stream_scan_node; // optional
  public @org.apache.thrift.annotation.Nullable TStreamJoinNode stream_join_node; // optional
  public @org.apache.thrift.annotation.Nullable TStreamAggregationNode stream_agg_node; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "node_id"),
    /**
     * 
     * @see TPlanNodeType
     */
    NODE_TYPE((short)2, "node_type"),
    NUM_CHILDREN((short)3, "num_children"),
    LIMIT((short)4, "limit"),
    ROW_TUPLES((short)5, "row_tuples"),
    NULLABLE_TUPLES((short)6, "nullable_tuples"),
    CONJUNCTS((short)7, "conjuncts"),
    COMPACT_DATA((short)8, "compact_data"),
    HASH_JOIN_NODE((short)11, "hash_join_node"),
    AGG_NODE((short)12, "agg_node"),
    SORT_NODE((short)13, "sort_node"),
    MERGE_NODE((short)14, "merge_node"),
    EXCHANGE_NODE((short)15, "exchange_node"),
    MYSQL_SCAN_NODE((short)17, "mysql_scan_node"),
    OLAP_SCAN_NODE((short)18, "olap_scan_node"),
    FILE_SCAN_NODE((short)20, "file_scan_node"),
    SCHEMA_SCAN_NODE((short)22, "schema_scan_node"),
    META_SCAN_NODE((short)24, "meta_scan_node"),
    ANALYTIC_NODE((short)25, "analytic_node"),
    UNION_NODE((short)28, "union_node"),
    RESOURCE_PROFILE((short)29, "resource_profile"),
    ES_SCAN_NODE((short)30, "es_scan_node"),
    REPEAT_NODE((short)31, "repeat_node"),
    ASSERT_NUM_ROWS_NODE((short)32, "assert_num_rows_node"),
    INTERSECT_NODE((short)33, "intersect_node"),
    EXCEPT_NODE((short)34, "except_node"),
    MERGE_JOIN_NODE((short)35, "merge_join_node"),
    USE_VECTORIZED((short)51, "use_vectorized"),
    HDFS_SCAN_NODE((short)52, "hdfs_scan_node"),
    PROJECT_NODE((short)53, "project_node"),
    TABLE_FUNCTION_NODE((short)54, "table_function_node"),
    PROBE_RUNTIME_FILTERS((short)55, "probe_runtime_filters"),
    DECODE_NODE((short)56, "decode_node"),
    LOCAL_RF_WAITING_SET((short)57, "local_rf_waiting_set"),
    FILTER_NULL_VALUE_COLUMNS((short)58, "filter_null_value_columns"),
    NEED_CREATE_TUPLE_COLUMNS((short)59, "need_create_tuple_columns"),
    JDBC_SCAN_NODE((short)60, "jdbc_scan_node"),
    CONNECTOR_SCAN_NODE((short)61, "connector_scan_node"),
    CROSS_JOIN_NODE((short)62, "cross_join_node"),
    LAKE_SCAN_NODE((short)63, "lake_scan_node"),
    NESTLOOP_JOIN_NODE((short)64, "nestloop_join_node"),
    STREAM_SCAN_NODE((short)70, "stream_scan_node"),
    STREAM_JOIN_NODE((short)71, "stream_join_node"),
    STREAM_AGG_NODE((short)72, "stream_agg_node");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // NODE_TYPE
          return NODE_TYPE;
        case 3: // NUM_CHILDREN
          return NUM_CHILDREN;
        case 4: // LIMIT
          return LIMIT;
        case 5: // ROW_TUPLES
          return ROW_TUPLES;
        case 6: // NULLABLE_TUPLES
          return NULLABLE_TUPLES;
        case 7: // CONJUNCTS
          return CONJUNCTS;
        case 8: // COMPACT_DATA
          return COMPACT_DATA;
        case 11: // HASH_JOIN_NODE
          return HASH_JOIN_NODE;
        case 12: // AGG_NODE
          return AGG_NODE;
        case 13: // SORT_NODE
          return SORT_NODE;
        case 14: // MERGE_NODE
          return MERGE_NODE;
        case 15: // EXCHANGE_NODE
          return EXCHANGE_NODE;
        case 17: // MYSQL_SCAN_NODE
          return MYSQL_SCAN_NODE;
        case 18: // OLAP_SCAN_NODE
          return OLAP_SCAN_NODE;
        case 20: // FILE_SCAN_NODE
          return FILE_SCAN_NODE;
        case 22: // SCHEMA_SCAN_NODE
          return SCHEMA_SCAN_NODE;
        case 24: // META_SCAN_NODE
          return META_SCAN_NODE;
        case 25: // ANALYTIC_NODE
          return ANALYTIC_NODE;
        case 28: // UNION_NODE
          return UNION_NODE;
        case 29: // RESOURCE_PROFILE
          return RESOURCE_PROFILE;
        case 30: // ES_SCAN_NODE
          return ES_SCAN_NODE;
        case 31: // REPEAT_NODE
          return REPEAT_NODE;
        case 32: // ASSERT_NUM_ROWS_NODE
          return ASSERT_NUM_ROWS_NODE;
        case 33: // INTERSECT_NODE
          return INTERSECT_NODE;
        case 34: // EXCEPT_NODE
          return EXCEPT_NODE;
        case 35: // MERGE_JOIN_NODE
          return MERGE_JOIN_NODE;
        case 51: // USE_VECTORIZED
          return USE_VECTORIZED;
        case 52: // HDFS_SCAN_NODE
          return HDFS_SCAN_NODE;
        case 53: // PROJECT_NODE
          return PROJECT_NODE;
        case 54: // TABLE_FUNCTION_NODE
          return TABLE_FUNCTION_NODE;
        case 55: // PROBE_RUNTIME_FILTERS
          return PROBE_RUNTIME_FILTERS;
        case 56: // DECODE_NODE
          return DECODE_NODE;
        case 57: // LOCAL_RF_WAITING_SET
          return LOCAL_RF_WAITING_SET;
        case 58: // FILTER_NULL_VALUE_COLUMNS
          return FILTER_NULL_VALUE_COLUMNS;
        case 59: // NEED_CREATE_TUPLE_COLUMNS
          return NEED_CREATE_TUPLE_COLUMNS;
        case 60: // JDBC_SCAN_NODE
          return JDBC_SCAN_NODE;
        case 61: // CONNECTOR_SCAN_NODE
          return CONNECTOR_SCAN_NODE;
        case 62: // CROSS_JOIN_NODE
          return CROSS_JOIN_NODE;
        case 63: // LAKE_SCAN_NODE
          return LAKE_SCAN_NODE;
        case 64: // NESTLOOP_JOIN_NODE
          return NESTLOOP_JOIN_NODE;
        case 70: // STREAM_SCAN_NODE
          return STREAM_SCAN_NODE;
        case 71: // STREAM_JOIN_NODE
          return STREAM_JOIN_NODE;
        case 72: // STREAM_AGG_NODE
          return STREAM_AGG_NODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NODE_ID_ISSET_ID = 0;
  private static final int __NUM_CHILDREN_ISSET_ID = 1;
  private static final int __LIMIT_ISSET_ID = 2;
  private static final int __COMPACT_DATA_ISSET_ID = 3;
  private static final int __USE_VECTORIZED_ISSET_ID = 4;
  private static final int __NEED_CREATE_TUPLE_COLUMNS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CONJUNCTS,_Fields.HASH_JOIN_NODE,_Fields.AGG_NODE,_Fields.SORT_NODE,_Fields.MERGE_NODE,_Fields.EXCHANGE_NODE,_Fields.MYSQL_SCAN_NODE,_Fields.OLAP_SCAN_NODE,_Fields.FILE_SCAN_NODE,_Fields.SCHEMA_SCAN_NODE,_Fields.META_SCAN_NODE,_Fields.ANALYTIC_NODE,_Fields.UNION_NODE,_Fields.RESOURCE_PROFILE,_Fields.ES_SCAN_NODE,_Fields.REPEAT_NODE,_Fields.ASSERT_NUM_ROWS_NODE,_Fields.INTERSECT_NODE,_Fields.EXCEPT_NODE,_Fields.MERGE_JOIN_NODE,_Fields.USE_VECTORIZED,_Fields.HDFS_SCAN_NODE,_Fields.PROJECT_NODE,_Fields.TABLE_FUNCTION_NODE,_Fields.PROBE_RUNTIME_FILTERS,_Fields.DECODE_NODE,_Fields.LOCAL_RF_WAITING_SET,_Fields.FILTER_NULL_VALUE_COLUMNS,_Fields.NEED_CREATE_TUPLE_COLUMNS,_Fields.JDBC_SCAN_NODE,_Fields.CONNECTOR_SCAN_NODE,_Fields.CROSS_JOIN_NODE,_Fields.LAKE_SCAN_NODE,_Fields.NESTLOOP_JOIN_NODE,_Fields.STREAM_SCAN_NODE,_Fields.STREAM_JOIN_NODE,_Fields.STREAM_AGG_NODE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("node_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TPlanNodeId")));
    tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("node_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPlanNodeType.class)));
    tmpMap.put(_Fields.NUM_CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("num_children", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROW_TUPLES, new org.apache.thrift.meta_data.FieldMetaData("row_tuples", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TTupleId"))));
    tmpMap.put(_Fields.NULLABLE_TUPLES, new org.apache.thrift.meta_data.FieldMetaData("nullable_tuples", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class))));
    tmpMap.put(_Fields.COMPACT_DATA, new org.apache.thrift.meta_data.FieldMetaData("compact_data", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HASH_JOIN_NODE, new org.apache.thrift.meta_data.FieldMetaData("hash_join_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THashJoinNode.class)));
    tmpMap.put(_Fields.AGG_NODE, new org.apache.thrift.meta_data.FieldMetaData("agg_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAggregationNode.class)));
    tmpMap.put(_Fields.SORT_NODE, new org.apache.thrift.meta_data.FieldMetaData("sort_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSortNode.class)));
    tmpMap.put(_Fields.MERGE_NODE, new org.apache.thrift.meta_data.FieldMetaData("merge_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMergeNode.class)));
    tmpMap.put(_Fields.EXCHANGE_NODE, new org.apache.thrift.meta_data.FieldMetaData("exchange_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExchangeNode.class)));
    tmpMap.put(_Fields.MYSQL_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("mysql_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMySQLScanNode.class)));
    tmpMap.put(_Fields.OLAP_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("olap_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlapScanNode.class)));
    tmpMap.put(_Fields.FILE_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("file_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFileScanNode.class)));
    tmpMap.put(_Fields.SCHEMA_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("schema_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSchemaScanNode.class)));
    tmpMap.put(_Fields.META_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("meta_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMetaScanNode.class)));
    tmpMap.put(_Fields.ANALYTIC_NODE, new org.apache.thrift.meta_data.FieldMetaData("analytic_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAnalyticNode.class)));
    tmpMap.put(_Fields.UNION_NODE, new org.apache.thrift.meta_data.FieldMetaData("union_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUnionNode.class)));
    tmpMap.put(_Fields.RESOURCE_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("resource_profile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBackendResourceProfile.class)));
    tmpMap.put(_Fields.ES_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("es_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEsScanNode.class)));
    tmpMap.put(_Fields.REPEAT_NODE, new org.apache.thrift.meta_data.FieldMetaData("repeat_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRepeatNode.class)));
    tmpMap.put(_Fields.ASSERT_NUM_ROWS_NODE, new org.apache.thrift.meta_data.FieldMetaData("assert_num_rows_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAssertNumRowsNode.class)));
    tmpMap.put(_Fields.INTERSECT_NODE, new org.apache.thrift.meta_data.FieldMetaData("intersect_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIntersectNode.class)));
    tmpMap.put(_Fields.EXCEPT_NODE, new org.apache.thrift.meta_data.FieldMetaData("except_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExceptNode.class)));
    tmpMap.put(_Fields.MERGE_JOIN_NODE, new org.apache.thrift.meta_data.FieldMetaData("merge_join_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMergeJoinNode.class)));
    tmpMap.put(_Fields.USE_VECTORIZED, new org.apache.thrift.meta_data.FieldMetaData("use_vectorized", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HDFS_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("hdfs_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsScanNode.class)));
    tmpMap.put(_Fields.PROJECT_NODE, new org.apache.thrift.meta_data.FieldMetaData("project_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProjectNode.class)));
    tmpMap.put(_Fields.TABLE_FUNCTION_NODE, new org.apache.thrift.meta_data.FieldMetaData("table_function_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableFunctionNode.class)));
    tmpMap.put(_Fields.PROBE_RUNTIME_FILTERS, new org.apache.thrift.meta_data.FieldMetaData("probe_runtime_filters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TRuntimeFilterDescription.class))));
    tmpMap.put(_Fields.DECODE_NODE, new org.apache.thrift.meta_data.FieldMetaData("decode_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDecodeNode.class)));
    tmpMap.put(_Fields.LOCAL_RF_WAITING_SET, new org.apache.thrift.meta_data.FieldMetaData("local_rf_waiting_set", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"))));
    tmpMap.put(_Fields.FILTER_NULL_VALUE_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("filter_null_value_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    tmpMap.put(_Fields.NEED_CREATE_TUPLE_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("need_create_tuple_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JDBC_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("jdbc_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TJDBCScanNode.class)));
    tmpMap.put(_Fields.CONNECTOR_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("connector_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TConnectorScanNode.class)));
    tmpMap.put(_Fields.CROSS_JOIN_NODE, new org.apache.thrift.meta_data.FieldMetaData("cross_join_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCrossJoinNode.class)));
    tmpMap.put(_Fields.LAKE_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("lake_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLakeScanNode.class)));
    tmpMap.put(_Fields.NESTLOOP_JOIN_NODE, new org.apache.thrift.meta_data.FieldMetaData("nestloop_join_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNestLoopJoinNode.class)));
    tmpMap.put(_Fields.STREAM_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("stream_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStreamScanNode.class)));
    tmpMap.put(_Fields.STREAM_JOIN_NODE, new org.apache.thrift.meta_data.FieldMetaData("stream_join_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStreamJoinNode.class)));
    tmpMap.put(_Fields.STREAM_AGG_NODE, new org.apache.thrift.meta_data.FieldMetaData("stream_agg_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStreamAggregationNode.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlanNode.class, metaDataMap);
  }

  public TPlanNode() {
  }

  public TPlanNode(
    int node_id,
    TPlanNodeType node_type,
    int num_children,
    long limit,
    java.util.List<java.lang.Integer> row_tuples,
    java.util.List<java.lang.Boolean> nullable_tuples,
    boolean compact_data)
  {
    this();
    this.node_id = node_id;
    setNode_idIsSet(true);
    this.node_type = node_type;
    this.num_children = num_children;
    setNum_childrenIsSet(true);
    this.limit = limit;
    setLimitIsSet(true);
    this.row_tuples = row_tuples;
    this.nullable_tuples = nullable_tuples;
    this.compact_data = compact_data;
    setCompact_dataIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlanNode(TPlanNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.node_id = other.node_id;
    if (other.isSetNode_type()) {
      this.node_type = other.node_type;
    }
    this.num_children = other.num_children;
    this.limit = other.limit;
    if (other.isSetRow_tuples()) {
      java.util.List<java.lang.Integer> __this__row_tuples = new java.util.ArrayList<java.lang.Integer>(other.row_tuples.size());
      for (java.lang.Integer other_element : other.row_tuples) {
        __this__row_tuples.add(other_element);
      }
      this.row_tuples = __this__row_tuples;
    }
    if (other.isSetNullable_tuples()) {
      java.util.List<java.lang.Boolean> __this__nullable_tuples = new java.util.ArrayList<java.lang.Boolean>(other.nullable_tuples);
      this.nullable_tuples = __this__nullable_tuples;
    }
    if (other.isSetConjuncts()) {
      java.util.List<com.starrocks.thrift.TExpr> __this__conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>(other.conjuncts.size());
      for (com.starrocks.thrift.TExpr other_element : other.conjuncts) {
        __this__conjuncts.add(new com.starrocks.thrift.TExpr(other_element));
      }
      this.conjuncts = __this__conjuncts;
    }
    this.compact_data = other.compact_data;
    if (other.isSetHash_join_node()) {
      this.hash_join_node = new THashJoinNode(other.hash_join_node);
    }
    if (other.isSetAgg_node()) {
      this.agg_node = new TAggregationNode(other.agg_node);
    }
    if (other.isSetSort_node()) {
      this.sort_node = new TSortNode(other.sort_node);
    }
    if (other.isSetMerge_node()) {
      this.merge_node = new TMergeNode(other.merge_node);
    }
    if (other.isSetExchange_node()) {
      this.exchange_node = new TExchangeNode(other.exchange_node);
    }
    if (other.isSetMysql_scan_node()) {
      this.mysql_scan_node = new TMySQLScanNode(other.mysql_scan_node);
    }
    if (other.isSetOlap_scan_node()) {
      this.olap_scan_node = new TOlapScanNode(other.olap_scan_node);
    }
    if (other.isSetFile_scan_node()) {
      this.file_scan_node = new TFileScanNode(other.file_scan_node);
    }
    if (other.isSetSchema_scan_node()) {
      this.schema_scan_node = new TSchemaScanNode(other.schema_scan_node);
    }
    if (other.isSetMeta_scan_node()) {
      this.meta_scan_node = new TMetaScanNode(other.meta_scan_node);
    }
    if (other.isSetAnalytic_node()) {
      this.analytic_node = new TAnalyticNode(other.analytic_node);
    }
    if (other.isSetUnion_node()) {
      this.union_node = new TUnionNode(other.union_node);
    }
    if (other.isSetResource_profile()) {
      this.resource_profile = new TBackendResourceProfile(other.resource_profile);
    }
    if (other.isSetEs_scan_node()) {
      this.es_scan_node = new TEsScanNode(other.es_scan_node);
    }
    if (other.isSetRepeat_node()) {
      this.repeat_node = new TRepeatNode(other.repeat_node);
    }
    if (other.isSetAssert_num_rows_node()) {
      this.assert_num_rows_node = new TAssertNumRowsNode(other.assert_num_rows_node);
    }
    if (other.isSetIntersect_node()) {
      this.intersect_node = new TIntersectNode(other.intersect_node);
    }
    if (other.isSetExcept_node()) {
      this.except_node = new TExceptNode(other.except_node);
    }
    if (other.isSetMerge_join_node()) {
      this.merge_join_node = new TMergeJoinNode(other.merge_join_node);
    }
    this.use_vectorized = other.use_vectorized;
    if (other.isSetHdfs_scan_node()) {
      this.hdfs_scan_node = new THdfsScanNode(other.hdfs_scan_node);
    }
    if (other.isSetProject_node()) {
      this.project_node = new TProjectNode(other.project_node);
    }
    if (other.isSetTable_function_node()) {
      this.table_function_node = new TTableFunctionNode(other.table_function_node);
    }
    if (other.isSetProbe_runtime_filters()) {
      java.util.List<com.starrocks.thrift.TRuntimeFilterDescription> __this__probe_runtime_filters = new java.util.ArrayList<com.starrocks.thrift.TRuntimeFilterDescription>(other.probe_runtime_filters.size());
      for (com.starrocks.thrift.TRuntimeFilterDescription other_element : other.probe_runtime_filters) {
        __this__probe_runtime_filters.add(new com.starrocks.thrift.TRuntimeFilterDescription(other_element));
      }
      this.probe_runtime_filters = __this__probe_runtime_filters;
    }
    if (other.isSetDecode_node()) {
      this.decode_node = new TDecodeNode(other.decode_node);
    }
    if (other.isSetLocal_rf_waiting_set()) {
      java.util.Set<java.lang.Integer> __this__local_rf_waiting_set = new java.util.HashSet<java.lang.Integer>(other.local_rf_waiting_set.size());
      for (java.lang.Integer other_element : other.local_rf_waiting_set) {
        __this__local_rf_waiting_set.add(other_element);
      }
      this.local_rf_waiting_set = __this__local_rf_waiting_set;
    }
    if (other.isSetFilter_null_value_columns()) {
      java.util.List<java.lang.Integer> __this__filter_null_value_columns = new java.util.ArrayList<java.lang.Integer>(other.filter_null_value_columns.size());
      for (java.lang.Integer other_element : other.filter_null_value_columns) {
        __this__filter_null_value_columns.add(other_element);
      }
      this.filter_null_value_columns = __this__filter_null_value_columns;
    }
    this.need_create_tuple_columns = other.need_create_tuple_columns;
    if (other.isSetJdbc_scan_node()) {
      this.jdbc_scan_node = new TJDBCScanNode(other.jdbc_scan_node);
    }
    if (other.isSetConnector_scan_node()) {
      this.connector_scan_node = new TConnectorScanNode(other.connector_scan_node);
    }
    if (other.isSetCross_join_node()) {
      this.cross_join_node = new TCrossJoinNode(other.cross_join_node);
    }
    if (other.isSetLake_scan_node()) {
      this.lake_scan_node = new TLakeScanNode(other.lake_scan_node);
    }
    if (other.isSetNestloop_join_node()) {
      this.nestloop_join_node = new TNestLoopJoinNode(other.nestloop_join_node);
    }
    if (other.isSetStream_scan_node()) {
      this.stream_scan_node = new TStreamScanNode(other.stream_scan_node);
    }
    if (other.isSetStream_join_node()) {
      this.stream_join_node = new TStreamJoinNode(other.stream_join_node);
    }
    if (other.isSetStream_agg_node()) {
      this.stream_agg_node = new TStreamAggregationNode(other.stream_agg_node);
    }
  }

  @Override
  public TPlanNode deepCopy() {
    return new TPlanNode(this);
  }

  @Override
  public void clear() {
    setNode_idIsSet(false);
    this.node_id = 0;
    this.node_type = null;
    setNum_childrenIsSet(false);
    this.num_children = 0;
    setLimitIsSet(false);
    this.limit = 0;
    this.row_tuples = null;
    this.nullable_tuples = null;
    this.conjuncts = null;
    setCompact_dataIsSet(false);
    this.compact_data = false;
    this.hash_join_node = null;
    this.agg_node = null;
    this.sort_node = null;
    this.merge_node = null;
    this.exchange_node = null;
    this.mysql_scan_node = null;
    this.olap_scan_node = null;
    this.file_scan_node = null;
    this.schema_scan_node = null;
    this.meta_scan_node = null;
    this.analytic_node = null;
    this.union_node = null;
    this.resource_profile = null;
    this.es_scan_node = null;
    this.repeat_node = null;
    this.assert_num_rows_node = null;
    this.intersect_node = null;
    this.except_node = null;
    this.merge_join_node = null;
    setUse_vectorizedIsSet(false);
    this.use_vectorized = false;
    this.hdfs_scan_node = null;
    this.project_node = null;
    this.table_function_node = null;
    this.probe_runtime_filters = null;
    this.decode_node = null;
    this.local_rf_waiting_set = null;
    this.filter_null_value_columns = null;
    setNeed_create_tuple_columnsIsSet(false);
    this.need_create_tuple_columns = false;
    this.jdbc_scan_node = null;
    this.connector_scan_node = null;
    this.cross_join_node = null;
    this.lake_scan_node = null;
    this.nestloop_join_node = null;
    this.stream_scan_node = null;
    this.stream_join_node = null;
    this.stream_agg_node = null;
  }

  public int getNode_id() {
    return this.node_id;
  }

  public TPlanNode setNode_id(int node_id) {
    this.node_id = node_id;
    setNode_idIsSet(true);
    return this;
  }

  public void unsetNode_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NODE_ID_ISSET_ID);
  }

  /** Returns true if field node_id is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NODE_ID_ISSET_ID);
  }

  public void setNode_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NODE_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see TPlanNodeType
   */
  @org.apache.thrift.annotation.Nullable
  public TPlanNodeType getNode_type() {
    return this.node_type;
  }

  /**
   * 
   * @see TPlanNodeType
   */
  public TPlanNode setNode_type(@org.apache.thrift.annotation.Nullable TPlanNodeType node_type) {
    this.node_type = node_type;
    return this;
  }

  public void unsetNode_type() {
    this.node_type = null;
  }

  /** Returns true if field node_type is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_type() {
    return this.node_type != null;
  }

  public void setNode_typeIsSet(boolean value) {
    if (!value) {
      this.node_type = null;
    }
  }

  public int getNum_children() {
    return this.num_children;
  }

  public TPlanNode setNum_children(int num_children) {
    this.num_children = num_children;
    setNum_childrenIsSet(true);
    return this;
  }

  public void unsetNum_children() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  /** Returns true if field num_children is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_children() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  public void setNum_childrenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID, value);
  }

  public long getLimit() {
    return this.limit;
  }

  public TPlanNode setLimit(long limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public int getRow_tuplesSize() {
    return (this.row_tuples == null) ? 0 : this.row_tuples.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getRow_tuplesIterator() {
    return (this.row_tuples == null) ? null : this.row_tuples.iterator();
  }

  public void addToRow_tuples(int elem) {
    if (this.row_tuples == null) {
      this.row_tuples = new java.util.ArrayList<java.lang.Integer>();
    }
    this.row_tuples.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getRow_tuples() {
    return this.row_tuples;
  }

  public TPlanNode setRow_tuples(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> row_tuples) {
    this.row_tuples = row_tuples;
    return this;
  }

  public void unsetRow_tuples() {
    this.row_tuples = null;
  }

  /** Returns true if field row_tuples is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_tuples() {
    return this.row_tuples != null;
  }

  public void setRow_tuplesIsSet(boolean value) {
    if (!value) {
      this.row_tuples = null;
    }
  }

  public int getNullable_tuplesSize() {
    return (this.nullable_tuples == null) ? 0 : this.nullable_tuples.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getNullable_tuplesIterator() {
    return (this.nullable_tuples == null) ? null : this.nullable_tuples.iterator();
  }

  public void addToNullable_tuples(boolean elem) {
    if (this.nullable_tuples == null) {
      this.nullable_tuples = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.nullable_tuples.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getNullable_tuples() {
    return this.nullable_tuples;
  }

  public TPlanNode setNullable_tuples(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> nullable_tuples) {
    this.nullable_tuples = nullable_tuples;
    return this;
  }

  public void unsetNullable_tuples() {
    this.nullable_tuples = null;
  }

  /** Returns true if field nullable_tuples is set (has been assigned a value) and false otherwise */
  public boolean isSetNullable_tuples() {
    return this.nullable_tuples != null;
  }

  public void setNullable_tuplesIsSet(boolean value) {
    if (!value) {
      this.nullable_tuples = null;
    }
  }

  public int getConjunctsSize() {
    return (this.conjuncts == null) ? 0 : this.conjuncts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TExpr> getConjunctsIterator() {
    return (this.conjuncts == null) ? null : this.conjuncts.iterator();
  }

  public void addToConjuncts(com.starrocks.thrift.TExpr elem) {
    if (this.conjuncts == null) {
      this.conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>();
    }
    this.conjuncts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TExpr> getConjuncts() {
    return this.conjuncts;
  }

  public TPlanNode setConjuncts(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> conjuncts) {
    this.conjuncts = conjuncts;
    return this;
  }

  public void unsetConjuncts() {
    this.conjuncts = null;
  }

  /** Returns true if field conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetConjuncts() {
    return this.conjuncts != null;
  }

  public void setConjunctsIsSet(boolean value) {
    if (!value) {
      this.conjuncts = null;
    }
  }

  public boolean isCompact_data() {
    return this.compact_data;
  }

  public TPlanNode setCompact_data(boolean compact_data) {
    this.compact_data = compact_data;
    setCompact_dataIsSet(true);
    return this;
  }

  public void unsetCompact_data() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPACT_DATA_ISSET_ID);
  }

  /** Returns true if field compact_data is set (has been assigned a value) and false otherwise */
  public boolean isSetCompact_data() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPACT_DATA_ISSET_ID);
  }

  public void setCompact_dataIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPACT_DATA_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public THashJoinNode getHash_join_node() {
    return this.hash_join_node;
  }

  public TPlanNode setHash_join_node(@org.apache.thrift.annotation.Nullable THashJoinNode hash_join_node) {
    this.hash_join_node = hash_join_node;
    return this;
  }

  public void unsetHash_join_node() {
    this.hash_join_node = null;
  }

  /** Returns true if field hash_join_node is set (has been assigned a value) and false otherwise */
  public boolean isSetHash_join_node() {
    return this.hash_join_node != null;
  }

  public void setHash_join_nodeIsSet(boolean value) {
    if (!value) {
      this.hash_join_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TAggregationNode getAgg_node() {
    return this.agg_node;
  }

  public TPlanNode setAgg_node(@org.apache.thrift.annotation.Nullable TAggregationNode agg_node) {
    this.agg_node = agg_node;
    return this;
  }

  public void unsetAgg_node() {
    this.agg_node = null;
  }

  /** Returns true if field agg_node is set (has been assigned a value) and false otherwise */
  public boolean isSetAgg_node() {
    return this.agg_node != null;
  }

  public void setAgg_nodeIsSet(boolean value) {
    if (!value) {
      this.agg_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TSortNode getSort_node() {
    return this.sort_node;
  }

  public TPlanNode setSort_node(@org.apache.thrift.annotation.Nullable TSortNode sort_node) {
    this.sort_node = sort_node;
    return this;
  }

  public void unsetSort_node() {
    this.sort_node = null;
  }

  /** Returns true if field sort_node is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_node() {
    return this.sort_node != null;
  }

  public void setSort_nodeIsSet(boolean value) {
    if (!value) {
      this.sort_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TMergeNode getMerge_node() {
    return this.merge_node;
  }

  public TPlanNode setMerge_node(@org.apache.thrift.annotation.Nullable TMergeNode merge_node) {
    this.merge_node = merge_node;
    return this;
  }

  public void unsetMerge_node() {
    this.merge_node = null;
  }

  /** Returns true if field merge_node is set (has been assigned a value) and false otherwise */
  public boolean isSetMerge_node() {
    return this.merge_node != null;
  }

  public void setMerge_nodeIsSet(boolean value) {
    if (!value) {
      this.merge_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TExchangeNode getExchange_node() {
    return this.exchange_node;
  }

  public TPlanNode setExchange_node(@org.apache.thrift.annotation.Nullable TExchangeNode exchange_node) {
    this.exchange_node = exchange_node;
    return this;
  }

  public void unsetExchange_node() {
    this.exchange_node = null;
  }

  /** Returns true if field exchange_node is set (has been assigned a value) and false otherwise */
  public boolean isSetExchange_node() {
    return this.exchange_node != null;
  }

  public void setExchange_nodeIsSet(boolean value) {
    if (!value) {
      this.exchange_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TMySQLScanNode getMysql_scan_node() {
    return this.mysql_scan_node;
  }

  public TPlanNode setMysql_scan_node(@org.apache.thrift.annotation.Nullable TMySQLScanNode mysql_scan_node) {
    this.mysql_scan_node = mysql_scan_node;
    return this;
  }

  public void unsetMysql_scan_node() {
    this.mysql_scan_node = null;
  }

  /** Returns true if field mysql_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetMysql_scan_node() {
    return this.mysql_scan_node != null;
  }

  public void setMysql_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.mysql_scan_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TOlapScanNode getOlap_scan_node() {
    return this.olap_scan_node;
  }

  public TPlanNode setOlap_scan_node(@org.apache.thrift.annotation.Nullable TOlapScanNode olap_scan_node) {
    this.olap_scan_node = olap_scan_node;
    return this;
  }

  public void unsetOlap_scan_node() {
    this.olap_scan_node = null;
  }

  /** Returns true if field olap_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetOlap_scan_node() {
    return this.olap_scan_node != null;
  }

  public void setOlap_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.olap_scan_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TFileScanNode getFile_scan_node() {
    return this.file_scan_node;
  }

  public TPlanNode setFile_scan_node(@org.apache.thrift.annotation.Nullable TFileScanNode file_scan_node) {
    this.file_scan_node = file_scan_node;
    return this;
  }

  public void unsetFile_scan_node() {
    this.file_scan_node = null;
  }

  /** Returns true if field file_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_scan_node() {
    return this.file_scan_node != null;
  }

  public void setFile_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.file_scan_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TSchemaScanNode getSchema_scan_node() {
    return this.schema_scan_node;
  }

  public TPlanNode setSchema_scan_node(@org.apache.thrift.annotation.Nullable TSchemaScanNode schema_scan_node) {
    this.schema_scan_node = schema_scan_node;
    return this;
  }

  public void unsetSchema_scan_node() {
    this.schema_scan_node = null;
  }

  /** Returns true if field schema_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_scan_node() {
    return this.schema_scan_node != null;
  }

  public void setSchema_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.schema_scan_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TMetaScanNode getMeta_scan_node() {
    return this.meta_scan_node;
  }

  public TPlanNode setMeta_scan_node(@org.apache.thrift.annotation.Nullable TMetaScanNode meta_scan_node) {
    this.meta_scan_node = meta_scan_node;
    return this;
  }

  public void unsetMeta_scan_node() {
    this.meta_scan_node = null;
  }

  /** Returns true if field meta_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetMeta_scan_node() {
    return this.meta_scan_node != null;
  }

  public void setMeta_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.meta_scan_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TAnalyticNode getAnalytic_node() {
    return this.analytic_node;
  }

  public TPlanNode setAnalytic_node(@org.apache.thrift.annotation.Nullable TAnalyticNode analytic_node) {
    this.analytic_node = analytic_node;
    return this;
  }

  public void unsetAnalytic_node() {
    this.analytic_node = null;
  }

  /** Returns true if field analytic_node is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalytic_node() {
    return this.analytic_node != null;
  }

  public void setAnalytic_nodeIsSet(boolean value) {
    if (!value) {
      this.analytic_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TUnionNode getUnion_node() {
    return this.union_node;
  }

  public TPlanNode setUnion_node(@org.apache.thrift.annotation.Nullable TUnionNode union_node) {
    this.union_node = union_node;
    return this;
  }

  public void unsetUnion_node() {
    this.union_node = null;
  }

  /** Returns true if field union_node is set (has been assigned a value) and false otherwise */
  public boolean isSetUnion_node() {
    return this.union_node != null;
  }

  public void setUnion_nodeIsSet(boolean value) {
    if (!value) {
      this.union_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TBackendResourceProfile getResource_profile() {
    return this.resource_profile;
  }

  public TPlanNode setResource_profile(@org.apache.thrift.annotation.Nullable TBackendResourceProfile resource_profile) {
    this.resource_profile = resource_profile;
    return this;
  }

  public void unsetResource_profile() {
    this.resource_profile = null;
  }

  /** Returns true if field resource_profile is set (has been assigned a value) and false otherwise */
  public boolean isSetResource_profile() {
    return this.resource_profile != null;
  }

  public void setResource_profileIsSet(boolean value) {
    if (!value) {
      this.resource_profile = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TEsScanNode getEs_scan_node() {
    return this.es_scan_node;
  }

  public TPlanNode setEs_scan_node(@org.apache.thrift.annotation.Nullable TEsScanNode es_scan_node) {
    this.es_scan_node = es_scan_node;
    return this;
  }

  public void unsetEs_scan_node() {
    this.es_scan_node = null;
  }

  /** Returns true if field es_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetEs_scan_node() {
    return this.es_scan_node != null;
  }

  public void setEs_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.es_scan_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TRepeatNode getRepeat_node() {
    return this.repeat_node;
  }

  public TPlanNode setRepeat_node(@org.apache.thrift.annotation.Nullable TRepeatNode repeat_node) {
    this.repeat_node = repeat_node;
    return this;
  }

  public void unsetRepeat_node() {
    this.repeat_node = null;
  }

  /** Returns true if field repeat_node is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeat_node() {
    return this.repeat_node != null;
  }

  public void setRepeat_nodeIsSet(boolean value) {
    if (!value) {
      this.repeat_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TAssertNumRowsNode getAssert_num_rows_node() {
    return this.assert_num_rows_node;
  }

  public TPlanNode setAssert_num_rows_node(@org.apache.thrift.annotation.Nullable TAssertNumRowsNode assert_num_rows_node) {
    this.assert_num_rows_node = assert_num_rows_node;
    return this;
  }

  public void unsetAssert_num_rows_node() {
    this.assert_num_rows_node = null;
  }

  /** Returns true if field assert_num_rows_node is set (has been assigned a value) and false otherwise */
  public boolean isSetAssert_num_rows_node() {
    return this.assert_num_rows_node != null;
  }

  public void setAssert_num_rows_nodeIsSet(boolean value) {
    if (!value) {
      this.assert_num_rows_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TIntersectNode getIntersect_node() {
    return this.intersect_node;
  }

  public TPlanNode setIntersect_node(@org.apache.thrift.annotation.Nullable TIntersectNode intersect_node) {
    this.intersect_node = intersect_node;
    return this;
  }

  public void unsetIntersect_node() {
    this.intersect_node = null;
  }

  /** Returns true if field intersect_node is set (has been assigned a value) and false otherwise */
  public boolean isSetIntersect_node() {
    return this.intersect_node != null;
  }

  public void setIntersect_nodeIsSet(boolean value) {
    if (!value) {
      this.intersect_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TExceptNode getExcept_node() {
    return this.except_node;
  }

  public TPlanNode setExcept_node(@org.apache.thrift.annotation.Nullable TExceptNode except_node) {
    this.except_node = except_node;
    return this;
  }

  public void unsetExcept_node() {
    this.except_node = null;
  }

  /** Returns true if field except_node is set (has been assigned a value) and false otherwise */
  public boolean isSetExcept_node() {
    return this.except_node != null;
  }

  public void setExcept_nodeIsSet(boolean value) {
    if (!value) {
      this.except_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TMergeJoinNode getMerge_join_node() {
    return this.merge_join_node;
  }

  public TPlanNode setMerge_join_node(@org.apache.thrift.annotation.Nullable TMergeJoinNode merge_join_node) {
    this.merge_join_node = merge_join_node;
    return this;
  }

  public void unsetMerge_join_node() {
    this.merge_join_node = null;
  }

  /** Returns true if field merge_join_node is set (has been assigned a value) and false otherwise */
  public boolean isSetMerge_join_node() {
    return this.merge_join_node != null;
  }

  public void setMerge_join_nodeIsSet(boolean value) {
    if (!value) {
      this.merge_join_node = null;
    }
  }

  public boolean isUse_vectorized() {
    return this.use_vectorized;
  }

  public TPlanNode setUse_vectorized(boolean use_vectorized) {
    this.use_vectorized = use_vectorized;
    setUse_vectorizedIsSet(true);
    return this;
  }

  public void unsetUse_vectorized() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_VECTORIZED_ISSET_ID);
  }

  /** Returns true if field use_vectorized is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_vectorized() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_VECTORIZED_ISSET_ID);
  }

  public void setUse_vectorizedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_VECTORIZED_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public THdfsScanNode getHdfs_scan_node() {
    return this.hdfs_scan_node;
  }

  public TPlanNode setHdfs_scan_node(@org.apache.thrift.annotation.Nullable THdfsScanNode hdfs_scan_node) {
    this.hdfs_scan_node = hdfs_scan_node;
    return this;
  }

  public void unsetHdfs_scan_node() {
    this.hdfs_scan_node = null;
  }

  /** Returns true if field hdfs_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetHdfs_scan_node() {
    return this.hdfs_scan_node != null;
  }

  public void setHdfs_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.hdfs_scan_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TProjectNode getProject_node() {
    return this.project_node;
  }

  public TPlanNode setProject_node(@org.apache.thrift.annotation.Nullable TProjectNode project_node) {
    this.project_node = project_node;
    return this;
  }

  public void unsetProject_node() {
    this.project_node = null;
  }

  /** Returns true if field project_node is set (has been assigned a value) and false otherwise */
  public boolean isSetProject_node() {
    return this.project_node != null;
  }

  public void setProject_nodeIsSet(boolean value) {
    if (!value) {
      this.project_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TTableFunctionNode getTable_function_node() {
    return this.table_function_node;
  }

  public TPlanNode setTable_function_node(@org.apache.thrift.annotation.Nullable TTableFunctionNode table_function_node) {
    this.table_function_node = table_function_node;
    return this;
  }

  public void unsetTable_function_node() {
    this.table_function_node = null;
  }

  /** Returns true if field table_function_node is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_function_node() {
    return this.table_function_node != null;
  }

  public void setTable_function_nodeIsSet(boolean value) {
    if (!value) {
      this.table_function_node = null;
    }
  }

  public int getProbe_runtime_filtersSize() {
    return (this.probe_runtime_filters == null) ? 0 : this.probe_runtime_filters.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TRuntimeFilterDescription> getProbe_runtime_filtersIterator() {
    return (this.probe_runtime_filters == null) ? null : this.probe_runtime_filters.iterator();
  }

  public void addToProbe_runtime_filters(com.starrocks.thrift.TRuntimeFilterDescription elem) {
    if (this.probe_runtime_filters == null) {
      this.probe_runtime_filters = new java.util.ArrayList<com.starrocks.thrift.TRuntimeFilterDescription>();
    }
    this.probe_runtime_filters.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TRuntimeFilterDescription> getProbe_runtime_filters() {
    return this.probe_runtime_filters;
  }

  public TPlanNode setProbe_runtime_filters(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TRuntimeFilterDescription> probe_runtime_filters) {
    this.probe_runtime_filters = probe_runtime_filters;
    return this;
  }

  public void unsetProbe_runtime_filters() {
    this.probe_runtime_filters = null;
  }

  /** Returns true if field probe_runtime_filters is set (has been assigned a value) and false otherwise */
  public boolean isSetProbe_runtime_filters() {
    return this.probe_runtime_filters != null;
  }

  public void setProbe_runtime_filtersIsSet(boolean value) {
    if (!value) {
      this.probe_runtime_filters = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDecodeNode getDecode_node() {
    return this.decode_node;
  }

  public TPlanNode setDecode_node(@org.apache.thrift.annotation.Nullable TDecodeNode decode_node) {
    this.decode_node = decode_node;
    return this;
  }

  public void unsetDecode_node() {
    this.decode_node = null;
  }

  /** Returns true if field decode_node is set (has been assigned a value) and false otherwise */
  public boolean isSetDecode_node() {
    return this.decode_node != null;
  }

  public void setDecode_nodeIsSet(boolean value) {
    if (!value) {
      this.decode_node = null;
    }
  }

  public int getLocal_rf_waiting_setSize() {
    return (this.local_rf_waiting_set == null) ? 0 : this.local_rf_waiting_set.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getLocal_rf_waiting_setIterator() {
    return (this.local_rf_waiting_set == null) ? null : this.local_rf_waiting_set.iterator();
  }

  public void addToLocal_rf_waiting_set(int elem) {
    if (this.local_rf_waiting_set == null) {
      this.local_rf_waiting_set = new java.util.HashSet<java.lang.Integer>();
    }
    this.local_rf_waiting_set.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.Integer> getLocal_rf_waiting_set() {
    return this.local_rf_waiting_set;
  }

  public TPlanNode setLocal_rf_waiting_set(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> local_rf_waiting_set) {
    this.local_rf_waiting_set = local_rf_waiting_set;
    return this;
  }

  public void unsetLocal_rf_waiting_set() {
    this.local_rf_waiting_set = null;
  }

  /** Returns true if field local_rf_waiting_set is set (has been assigned a value) and false otherwise */
  public boolean isSetLocal_rf_waiting_set() {
    return this.local_rf_waiting_set != null;
  }

  public void setLocal_rf_waiting_setIsSet(boolean value) {
    if (!value) {
      this.local_rf_waiting_set = null;
    }
  }

  public int getFilter_null_value_columnsSize() {
    return (this.filter_null_value_columns == null) ? 0 : this.filter_null_value_columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getFilter_null_value_columnsIterator() {
    return (this.filter_null_value_columns == null) ? null : this.filter_null_value_columns.iterator();
  }

  public void addToFilter_null_value_columns(int elem) {
    if (this.filter_null_value_columns == null) {
      this.filter_null_value_columns = new java.util.ArrayList<java.lang.Integer>();
    }
    this.filter_null_value_columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getFilter_null_value_columns() {
    return this.filter_null_value_columns;
  }

  public TPlanNode setFilter_null_value_columns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> filter_null_value_columns) {
    this.filter_null_value_columns = filter_null_value_columns;
    return this;
  }

  public void unsetFilter_null_value_columns() {
    this.filter_null_value_columns = null;
  }

  /** Returns true if field filter_null_value_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_null_value_columns() {
    return this.filter_null_value_columns != null;
  }

  public void setFilter_null_value_columnsIsSet(boolean value) {
    if (!value) {
      this.filter_null_value_columns = null;
    }
  }

  public boolean isNeed_create_tuple_columns() {
    return this.need_create_tuple_columns;
  }

  public TPlanNode setNeed_create_tuple_columns(boolean need_create_tuple_columns) {
    this.need_create_tuple_columns = need_create_tuple_columns;
    setNeed_create_tuple_columnsIsSet(true);
    return this;
  }

  public void unsetNeed_create_tuple_columns() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEED_CREATE_TUPLE_COLUMNS_ISSET_ID);
  }

  /** Returns true if field need_create_tuple_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetNeed_create_tuple_columns() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEED_CREATE_TUPLE_COLUMNS_ISSET_ID);
  }

  public void setNeed_create_tuple_columnsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEED_CREATE_TUPLE_COLUMNS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TJDBCScanNode getJdbc_scan_node() {
    return this.jdbc_scan_node;
  }

  public TPlanNode setJdbc_scan_node(@org.apache.thrift.annotation.Nullable TJDBCScanNode jdbc_scan_node) {
    this.jdbc_scan_node = jdbc_scan_node;
    return this;
  }

  public void unsetJdbc_scan_node() {
    this.jdbc_scan_node = null;
  }

  /** Returns true if field jdbc_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetJdbc_scan_node() {
    return this.jdbc_scan_node != null;
  }

  public void setJdbc_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.jdbc_scan_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TConnectorScanNode getConnector_scan_node() {
    return this.connector_scan_node;
  }

  public TPlanNode setConnector_scan_node(@org.apache.thrift.annotation.Nullable TConnectorScanNode connector_scan_node) {
    this.connector_scan_node = connector_scan_node;
    return this;
  }

  public void unsetConnector_scan_node() {
    this.connector_scan_node = null;
  }

  /** Returns true if field connector_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetConnector_scan_node() {
    return this.connector_scan_node != null;
  }

  public void setConnector_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.connector_scan_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TCrossJoinNode getCross_join_node() {
    return this.cross_join_node;
  }

  public TPlanNode setCross_join_node(@org.apache.thrift.annotation.Nullable TCrossJoinNode cross_join_node) {
    this.cross_join_node = cross_join_node;
    return this;
  }

  public void unsetCross_join_node() {
    this.cross_join_node = null;
  }

  /** Returns true if field cross_join_node is set (has been assigned a value) and false otherwise */
  public boolean isSetCross_join_node() {
    return this.cross_join_node != null;
  }

  public void setCross_join_nodeIsSet(boolean value) {
    if (!value) {
      this.cross_join_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TLakeScanNode getLake_scan_node() {
    return this.lake_scan_node;
  }

  public TPlanNode setLake_scan_node(@org.apache.thrift.annotation.Nullable TLakeScanNode lake_scan_node) {
    this.lake_scan_node = lake_scan_node;
    return this;
  }

  public void unsetLake_scan_node() {
    this.lake_scan_node = null;
  }

  /** Returns true if field lake_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetLake_scan_node() {
    return this.lake_scan_node != null;
  }

  public void setLake_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.lake_scan_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNestLoopJoinNode getNestloop_join_node() {
    return this.nestloop_join_node;
  }

  public TPlanNode setNestloop_join_node(@org.apache.thrift.annotation.Nullable TNestLoopJoinNode nestloop_join_node) {
    this.nestloop_join_node = nestloop_join_node;
    return this;
  }

  public void unsetNestloop_join_node() {
    this.nestloop_join_node = null;
  }

  /** Returns true if field nestloop_join_node is set (has been assigned a value) and false otherwise */
  public boolean isSetNestloop_join_node() {
    return this.nestloop_join_node != null;
  }

  public void setNestloop_join_nodeIsSet(boolean value) {
    if (!value) {
      this.nestloop_join_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TStreamScanNode getStream_scan_node() {
    return this.stream_scan_node;
  }

  public TPlanNode setStream_scan_node(@org.apache.thrift.annotation.Nullable TStreamScanNode stream_scan_node) {
    this.stream_scan_node = stream_scan_node;
    return this;
  }

  public void unsetStream_scan_node() {
    this.stream_scan_node = null;
  }

  /** Returns true if field stream_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetStream_scan_node() {
    return this.stream_scan_node != null;
  }

  public void setStream_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.stream_scan_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TStreamJoinNode getStream_join_node() {
    return this.stream_join_node;
  }

  public TPlanNode setStream_join_node(@org.apache.thrift.annotation.Nullable TStreamJoinNode stream_join_node) {
    this.stream_join_node = stream_join_node;
    return this;
  }

  public void unsetStream_join_node() {
    this.stream_join_node = null;
  }

  /** Returns true if field stream_join_node is set (has been assigned a value) and false otherwise */
  public boolean isSetStream_join_node() {
    return this.stream_join_node != null;
  }

  public void setStream_join_nodeIsSet(boolean value) {
    if (!value) {
      this.stream_join_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TStreamAggregationNode getStream_agg_node() {
    return this.stream_agg_node;
  }

  public TPlanNode setStream_agg_node(@org.apache.thrift.annotation.Nullable TStreamAggregationNode stream_agg_node) {
    this.stream_agg_node = stream_agg_node;
    return this;
  }

  public void unsetStream_agg_node() {
    this.stream_agg_node = null;
  }

  /** Returns true if field stream_agg_node is set (has been assigned a value) and false otherwise */
  public boolean isSetStream_agg_node() {
    return this.stream_agg_node != null;
  }

  public void setStream_agg_nodeIsSet(boolean value) {
    if (!value) {
      this.stream_agg_node = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNode_id();
      } else {
        setNode_id((java.lang.Integer)value);
      }
      break;

    case NODE_TYPE:
      if (value == null) {
        unsetNode_type();
      } else {
        setNode_type((TPlanNodeType)value);
      }
      break;

    case NUM_CHILDREN:
      if (value == null) {
        unsetNum_children();
      } else {
        setNum_children((java.lang.Integer)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((java.lang.Long)value);
      }
      break;

    case ROW_TUPLES:
      if (value == null) {
        unsetRow_tuples();
      } else {
        setRow_tuples((java.util.List<java.lang.Integer>)value);
      }
      break;

    case NULLABLE_TUPLES:
      if (value == null) {
        unsetNullable_tuples();
      } else {
        setNullable_tuples((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case CONJUNCTS:
      if (value == null) {
        unsetConjuncts();
      } else {
        setConjuncts((java.util.List<com.starrocks.thrift.TExpr>)value);
      }
      break;

    case COMPACT_DATA:
      if (value == null) {
        unsetCompact_data();
      } else {
        setCompact_data((java.lang.Boolean)value);
      }
      break;

    case HASH_JOIN_NODE:
      if (value == null) {
        unsetHash_join_node();
      } else {
        setHash_join_node((THashJoinNode)value);
      }
      break;

    case AGG_NODE:
      if (value == null) {
        unsetAgg_node();
      } else {
        setAgg_node((TAggregationNode)value);
      }
      break;

    case SORT_NODE:
      if (value == null) {
        unsetSort_node();
      } else {
        setSort_node((TSortNode)value);
      }
      break;

    case MERGE_NODE:
      if (value == null) {
        unsetMerge_node();
      } else {
        setMerge_node((TMergeNode)value);
      }
      break;

    case EXCHANGE_NODE:
      if (value == null) {
        unsetExchange_node();
      } else {
        setExchange_node((TExchangeNode)value);
      }
      break;

    case MYSQL_SCAN_NODE:
      if (value == null) {
        unsetMysql_scan_node();
      } else {
        setMysql_scan_node((TMySQLScanNode)value);
      }
      break;

    case OLAP_SCAN_NODE:
      if (value == null) {
        unsetOlap_scan_node();
      } else {
        setOlap_scan_node((TOlapScanNode)value);
      }
      break;

    case FILE_SCAN_NODE:
      if (value == null) {
        unsetFile_scan_node();
      } else {
        setFile_scan_node((TFileScanNode)value);
      }
      break;

    case SCHEMA_SCAN_NODE:
      if (value == null) {
        unsetSchema_scan_node();
      } else {
        setSchema_scan_node((TSchemaScanNode)value);
      }
      break;

    case META_SCAN_NODE:
      if (value == null) {
        unsetMeta_scan_node();
      } else {
        setMeta_scan_node((TMetaScanNode)value);
      }
      break;

    case ANALYTIC_NODE:
      if (value == null) {
        unsetAnalytic_node();
      } else {
        setAnalytic_node((TAnalyticNode)value);
      }
      break;

    case UNION_NODE:
      if (value == null) {
        unsetUnion_node();
      } else {
        setUnion_node((TUnionNode)value);
      }
      break;

    case RESOURCE_PROFILE:
      if (value == null) {
        unsetResource_profile();
      } else {
        setResource_profile((TBackendResourceProfile)value);
      }
      break;

    case ES_SCAN_NODE:
      if (value == null) {
        unsetEs_scan_node();
      } else {
        setEs_scan_node((TEsScanNode)value);
      }
      break;

    case REPEAT_NODE:
      if (value == null) {
        unsetRepeat_node();
      } else {
        setRepeat_node((TRepeatNode)value);
      }
      break;

    case ASSERT_NUM_ROWS_NODE:
      if (value == null) {
        unsetAssert_num_rows_node();
      } else {
        setAssert_num_rows_node((TAssertNumRowsNode)value);
      }
      break;

    case INTERSECT_NODE:
      if (value == null) {
        unsetIntersect_node();
      } else {
        setIntersect_node((TIntersectNode)value);
      }
      break;

    case EXCEPT_NODE:
      if (value == null) {
        unsetExcept_node();
      } else {
        setExcept_node((TExceptNode)value);
      }
      break;

    case MERGE_JOIN_NODE:
      if (value == null) {
        unsetMerge_join_node();
      } else {
        setMerge_join_node((TMergeJoinNode)value);
      }
      break;

    case USE_VECTORIZED:
      if (value == null) {
        unsetUse_vectorized();
      } else {
        setUse_vectorized((java.lang.Boolean)value);
      }
      break;

    case HDFS_SCAN_NODE:
      if (value == null) {
        unsetHdfs_scan_node();
      } else {
        setHdfs_scan_node((THdfsScanNode)value);
      }
      break;

    case PROJECT_NODE:
      if (value == null) {
        unsetProject_node();
      } else {
        setProject_node((TProjectNode)value);
      }
      break;

    case TABLE_FUNCTION_NODE:
      if (value == null) {
        unsetTable_function_node();
      } else {
        setTable_function_node((TTableFunctionNode)value);
      }
      break;

    case PROBE_RUNTIME_FILTERS:
      if (value == null) {
        unsetProbe_runtime_filters();
      } else {
        setProbe_runtime_filters((java.util.List<com.starrocks.thrift.TRuntimeFilterDescription>)value);
      }
      break;

    case DECODE_NODE:
      if (value == null) {
        unsetDecode_node();
      } else {
        setDecode_node((TDecodeNode)value);
      }
      break;

    case LOCAL_RF_WAITING_SET:
      if (value == null) {
        unsetLocal_rf_waiting_set();
      } else {
        setLocal_rf_waiting_set((java.util.Set<java.lang.Integer>)value);
      }
      break;

    case FILTER_NULL_VALUE_COLUMNS:
      if (value == null) {
        unsetFilter_null_value_columns();
      } else {
        setFilter_null_value_columns((java.util.List<java.lang.Integer>)value);
      }
      break;

    case NEED_CREATE_TUPLE_COLUMNS:
      if (value == null) {
        unsetNeed_create_tuple_columns();
      } else {
        setNeed_create_tuple_columns((java.lang.Boolean)value);
      }
      break;

    case JDBC_SCAN_NODE:
      if (value == null) {
        unsetJdbc_scan_node();
      } else {
        setJdbc_scan_node((TJDBCScanNode)value);
      }
      break;

    case CONNECTOR_SCAN_NODE:
      if (value == null) {
        unsetConnector_scan_node();
      } else {
        setConnector_scan_node((TConnectorScanNode)value);
      }
      break;

    case CROSS_JOIN_NODE:
      if (value == null) {
        unsetCross_join_node();
      } else {
        setCross_join_node((TCrossJoinNode)value);
      }
      break;

    case LAKE_SCAN_NODE:
      if (value == null) {
        unsetLake_scan_node();
      } else {
        setLake_scan_node((TLakeScanNode)value);
      }
      break;

    case NESTLOOP_JOIN_NODE:
      if (value == null) {
        unsetNestloop_join_node();
      } else {
        setNestloop_join_node((TNestLoopJoinNode)value);
      }
      break;

    case STREAM_SCAN_NODE:
      if (value == null) {
        unsetStream_scan_node();
      } else {
        setStream_scan_node((TStreamScanNode)value);
      }
      break;

    case STREAM_JOIN_NODE:
      if (value == null) {
        unsetStream_join_node();
      } else {
        setStream_join_node((TStreamJoinNode)value);
      }
      break;

    case STREAM_AGG_NODE:
      if (value == null) {
        unsetStream_agg_node();
      } else {
        setStream_agg_node((TStreamAggregationNode)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return getNode_id();

    case NODE_TYPE:
      return getNode_type();

    case NUM_CHILDREN:
      return getNum_children();

    case LIMIT:
      return getLimit();

    case ROW_TUPLES:
      return getRow_tuples();

    case NULLABLE_TUPLES:
      return getNullable_tuples();

    case CONJUNCTS:
      return getConjuncts();

    case COMPACT_DATA:
      return isCompact_data();

    case HASH_JOIN_NODE:
      return getHash_join_node();

    case AGG_NODE:
      return getAgg_node();

    case SORT_NODE:
      return getSort_node();

    case MERGE_NODE:
      return getMerge_node();

    case EXCHANGE_NODE:
      return getExchange_node();

    case MYSQL_SCAN_NODE:
      return getMysql_scan_node();

    case OLAP_SCAN_NODE:
      return getOlap_scan_node();

    case FILE_SCAN_NODE:
      return getFile_scan_node();

    case SCHEMA_SCAN_NODE:
      return getSchema_scan_node();

    case META_SCAN_NODE:
      return getMeta_scan_node();

    case ANALYTIC_NODE:
      return getAnalytic_node();

    case UNION_NODE:
      return getUnion_node();

    case RESOURCE_PROFILE:
      return getResource_profile();

    case ES_SCAN_NODE:
      return getEs_scan_node();

    case REPEAT_NODE:
      return getRepeat_node();

    case ASSERT_NUM_ROWS_NODE:
      return getAssert_num_rows_node();

    case INTERSECT_NODE:
      return getIntersect_node();

    case EXCEPT_NODE:
      return getExcept_node();

    case MERGE_JOIN_NODE:
      return getMerge_join_node();

    case USE_VECTORIZED:
      return isUse_vectorized();

    case HDFS_SCAN_NODE:
      return getHdfs_scan_node();

    case PROJECT_NODE:
      return getProject_node();

    case TABLE_FUNCTION_NODE:
      return getTable_function_node();

    case PROBE_RUNTIME_FILTERS:
      return getProbe_runtime_filters();

    case DECODE_NODE:
      return getDecode_node();

    case LOCAL_RF_WAITING_SET:
      return getLocal_rf_waiting_set();

    case FILTER_NULL_VALUE_COLUMNS:
      return getFilter_null_value_columns();

    case NEED_CREATE_TUPLE_COLUMNS:
      return isNeed_create_tuple_columns();

    case JDBC_SCAN_NODE:
      return getJdbc_scan_node();

    case CONNECTOR_SCAN_NODE:
      return getConnector_scan_node();

    case CROSS_JOIN_NODE:
      return getCross_join_node();

    case LAKE_SCAN_NODE:
      return getLake_scan_node();

    case NESTLOOP_JOIN_NODE:
      return getNestloop_join_node();

    case STREAM_SCAN_NODE:
      return getStream_scan_node();

    case STREAM_JOIN_NODE:
      return getStream_join_node();

    case STREAM_AGG_NODE:
      return getStream_agg_node();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNode_id();
    case NODE_TYPE:
      return isSetNode_type();
    case NUM_CHILDREN:
      return isSetNum_children();
    case LIMIT:
      return isSetLimit();
    case ROW_TUPLES:
      return isSetRow_tuples();
    case NULLABLE_TUPLES:
      return isSetNullable_tuples();
    case CONJUNCTS:
      return isSetConjuncts();
    case COMPACT_DATA:
      return isSetCompact_data();
    case HASH_JOIN_NODE:
      return isSetHash_join_node();
    case AGG_NODE:
      return isSetAgg_node();
    case SORT_NODE:
      return isSetSort_node();
    case MERGE_NODE:
      return isSetMerge_node();
    case EXCHANGE_NODE:
      return isSetExchange_node();
    case MYSQL_SCAN_NODE:
      return isSetMysql_scan_node();
    case OLAP_SCAN_NODE:
      return isSetOlap_scan_node();
    case FILE_SCAN_NODE:
      return isSetFile_scan_node();
    case SCHEMA_SCAN_NODE:
      return isSetSchema_scan_node();
    case META_SCAN_NODE:
      return isSetMeta_scan_node();
    case ANALYTIC_NODE:
      return isSetAnalytic_node();
    case UNION_NODE:
      return isSetUnion_node();
    case RESOURCE_PROFILE:
      return isSetResource_profile();
    case ES_SCAN_NODE:
      return isSetEs_scan_node();
    case REPEAT_NODE:
      return isSetRepeat_node();
    case ASSERT_NUM_ROWS_NODE:
      return isSetAssert_num_rows_node();
    case INTERSECT_NODE:
      return isSetIntersect_node();
    case EXCEPT_NODE:
      return isSetExcept_node();
    case MERGE_JOIN_NODE:
      return isSetMerge_join_node();
    case USE_VECTORIZED:
      return isSetUse_vectorized();
    case HDFS_SCAN_NODE:
      return isSetHdfs_scan_node();
    case PROJECT_NODE:
      return isSetProject_node();
    case TABLE_FUNCTION_NODE:
      return isSetTable_function_node();
    case PROBE_RUNTIME_FILTERS:
      return isSetProbe_runtime_filters();
    case DECODE_NODE:
      return isSetDecode_node();
    case LOCAL_RF_WAITING_SET:
      return isSetLocal_rf_waiting_set();
    case FILTER_NULL_VALUE_COLUMNS:
      return isSetFilter_null_value_columns();
    case NEED_CREATE_TUPLE_COLUMNS:
      return isSetNeed_create_tuple_columns();
    case JDBC_SCAN_NODE:
      return isSetJdbc_scan_node();
    case CONNECTOR_SCAN_NODE:
      return isSetConnector_scan_node();
    case CROSS_JOIN_NODE:
      return isSetCross_join_node();
    case LAKE_SCAN_NODE:
      return isSetLake_scan_node();
    case NESTLOOP_JOIN_NODE:
      return isSetNestloop_join_node();
    case STREAM_SCAN_NODE:
      return isSetStream_scan_node();
    case STREAM_JOIN_NODE:
      return isSetStream_join_node();
    case STREAM_AGG_NODE:
      return isSetStream_agg_node();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TPlanNode)
      return this.equals((TPlanNode)that);
    return false;
  }

  public boolean equals(TPlanNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_node_id = true;
    boolean that_present_node_id = true;
    if (this_present_node_id || that_present_node_id) {
      if (!(this_present_node_id && that_present_node_id))
        return false;
      if (this.node_id != that.node_id)
        return false;
    }

    boolean this_present_node_type = true && this.isSetNode_type();
    boolean that_present_node_type = true && that.isSetNode_type();
    if (this_present_node_type || that_present_node_type) {
      if (!(this_present_node_type && that_present_node_type))
        return false;
      if (!this.node_type.equals(that.node_type))
        return false;
    }

    boolean this_present_num_children = true;
    boolean that_present_num_children = true;
    if (this_present_num_children || that_present_num_children) {
      if (!(this_present_num_children && that_present_num_children))
        return false;
      if (this.num_children != that.num_children)
        return false;
    }

    boolean this_present_limit = true;
    boolean that_present_limit = true;
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_row_tuples = true && this.isSetRow_tuples();
    boolean that_present_row_tuples = true && that.isSetRow_tuples();
    if (this_present_row_tuples || that_present_row_tuples) {
      if (!(this_present_row_tuples && that_present_row_tuples))
        return false;
      if (!this.row_tuples.equals(that.row_tuples))
        return false;
    }

    boolean this_present_nullable_tuples = true && this.isSetNullable_tuples();
    boolean that_present_nullable_tuples = true && that.isSetNullable_tuples();
    if (this_present_nullable_tuples || that_present_nullable_tuples) {
      if (!(this_present_nullable_tuples && that_present_nullable_tuples))
        return false;
      if (!this.nullable_tuples.equals(that.nullable_tuples))
        return false;
    }

    boolean this_present_conjuncts = true && this.isSetConjuncts();
    boolean that_present_conjuncts = true && that.isSetConjuncts();
    if (this_present_conjuncts || that_present_conjuncts) {
      if (!(this_present_conjuncts && that_present_conjuncts))
        return false;
      if (!this.conjuncts.equals(that.conjuncts))
        return false;
    }

    boolean this_present_compact_data = true;
    boolean that_present_compact_data = true;
    if (this_present_compact_data || that_present_compact_data) {
      if (!(this_present_compact_data && that_present_compact_data))
        return false;
      if (this.compact_data != that.compact_data)
        return false;
    }

    boolean this_present_hash_join_node = true && this.isSetHash_join_node();
    boolean that_present_hash_join_node = true && that.isSetHash_join_node();
    if (this_present_hash_join_node || that_present_hash_join_node) {
      if (!(this_present_hash_join_node && that_present_hash_join_node))
        return false;
      if (!this.hash_join_node.equals(that.hash_join_node))
        return false;
    }

    boolean this_present_agg_node = true && this.isSetAgg_node();
    boolean that_present_agg_node = true && that.isSetAgg_node();
    if (this_present_agg_node || that_present_agg_node) {
      if (!(this_present_agg_node && that_present_agg_node))
        return false;
      if (!this.agg_node.equals(that.agg_node))
        return false;
    }

    boolean this_present_sort_node = true && this.isSetSort_node();
    boolean that_present_sort_node = true && that.isSetSort_node();
    if (this_present_sort_node || that_present_sort_node) {
      if (!(this_present_sort_node && that_present_sort_node))
        return false;
      if (!this.sort_node.equals(that.sort_node))
        return false;
    }

    boolean this_present_merge_node = true && this.isSetMerge_node();
    boolean that_present_merge_node = true && that.isSetMerge_node();
    if (this_present_merge_node || that_present_merge_node) {
      if (!(this_present_merge_node && that_present_merge_node))
        return false;
      if (!this.merge_node.equals(that.merge_node))
        return false;
    }

    boolean this_present_exchange_node = true && this.isSetExchange_node();
    boolean that_present_exchange_node = true && that.isSetExchange_node();
    if (this_present_exchange_node || that_present_exchange_node) {
      if (!(this_present_exchange_node && that_present_exchange_node))
        return false;
      if (!this.exchange_node.equals(that.exchange_node))
        return false;
    }

    boolean this_present_mysql_scan_node = true && this.isSetMysql_scan_node();
    boolean that_present_mysql_scan_node = true && that.isSetMysql_scan_node();
    if (this_present_mysql_scan_node || that_present_mysql_scan_node) {
      if (!(this_present_mysql_scan_node && that_present_mysql_scan_node))
        return false;
      if (!this.mysql_scan_node.equals(that.mysql_scan_node))
        return false;
    }

    boolean this_present_olap_scan_node = true && this.isSetOlap_scan_node();
    boolean that_present_olap_scan_node = true && that.isSetOlap_scan_node();
    if (this_present_olap_scan_node || that_present_olap_scan_node) {
      if (!(this_present_olap_scan_node && that_present_olap_scan_node))
        return false;
      if (!this.olap_scan_node.equals(that.olap_scan_node))
        return false;
    }

    boolean this_present_file_scan_node = true && this.isSetFile_scan_node();
    boolean that_present_file_scan_node = true && that.isSetFile_scan_node();
    if (this_present_file_scan_node || that_present_file_scan_node) {
      if (!(this_present_file_scan_node && that_present_file_scan_node))
        return false;
      if (!this.file_scan_node.equals(that.file_scan_node))
        return false;
    }

    boolean this_present_schema_scan_node = true && this.isSetSchema_scan_node();
    boolean that_present_schema_scan_node = true && that.isSetSchema_scan_node();
    if (this_present_schema_scan_node || that_present_schema_scan_node) {
      if (!(this_present_schema_scan_node && that_present_schema_scan_node))
        return false;
      if (!this.schema_scan_node.equals(that.schema_scan_node))
        return false;
    }

    boolean this_present_meta_scan_node = true && this.isSetMeta_scan_node();
    boolean that_present_meta_scan_node = true && that.isSetMeta_scan_node();
    if (this_present_meta_scan_node || that_present_meta_scan_node) {
      if (!(this_present_meta_scan_node && that_present_meta_scan_node))
        return false;
      if (!this.meta_scan_node.equals(that.meta_scan_node))
        return false;
    }

    boolean this_present_analytic_node = true && this.isSetAnalytic_node();
    boolean that_present_analytic_node = true && that.isSetAnalytic_node();
    if (this_present_analytic_node || that_present_analytic_node) {
      if (!(this_present_analytic_node && that_present_analytic_node))
        return false;
      if (!this.analytic_node.equals(that.analytic_node))
        return false;
    }

    boolean this_present_union_node = true && this.isSetUnion_node();
    boolean that_present_union_node = true && that.isSetUnion_node();
    if (this_present_union_node || that_present_union_node) {
      if (!(this_present_union_node && that_present_union_node))
        return false;
      if (!this.union_node.equals(that.union_node))
        return false;
    }

    boolean this_present_resource_profile = true && this.isSetResource_profile();
    boolean that_present_resource_profile = true && that.isSetResource_profile();
    if (this_present_resource_profile || that_present_resource_profile) {
      if (!(this_present_resource_profile && that_present_resource_profile))
        return false;
      if (!this.resource_profile.equals(that.resource_profile))
        return false;
    }

    boolean this_present_es_scan_node = true && this.isSetEs_scan_node();
    boolean that_present_es_scan_node = true && that.isSetEs_scan_node();
    if (this_present_es_scan_node || that_present_es_scan_node) {
      if (!(this_present_es_scan_node && that_present_es_scan_node))
        return false;
      if (!this.es_scan_node.equals(that.es_scan_node))
        return false;
    }

    boolean this_present_repeat_node = true && this.isSetRepeat_node();
    boolean that_present_repeat_node = true && that.isSetRepeat_node();
    if (this_present_repeat_node || that_present_repeat_node) {
      if (!(this_present_repeat_node && that_present_repeat_node))
        return false;
      if (!this.repeat_node.equals(that.repeat_node))
        return false;
    }

    boolean this_present_assert_num_rows_node = true && this.isSetAssert_num_rows_node();
    boolean that_present_assert_num_rows_node = true && that.isSetAssert_num_rows_node();
    if (this_present_assert_num_rows_node || that_present_assert_num_rows_node) {
      if (!(this_present_assert_num_rows_node && that_present_assert_num_rows_node))
        return false;
      if (!this.assert_num_rows_node.equals(that.assert_num_rows_node))
        return false;
    }

    boolean this_present_intersect_node = true && this.isSetIntersect_node();
    boolean that_present_intersect_node = true && that.isSetIntersect_node();
    if (this_present_intersect_node || that_present_intersect_node) {
      if (!(this_present_intersect_node && that_present_intersect_node))
        return false;
      if (!this.intersect_node.equals(that.intersect_node))
        return false;
    }

    boolean this_present_except_node = true && this.isSetExcept_node();
    boolean that_present_except_node = true && that.isSetExcept_node();
    if (this_present_except_node || that_present_except_node) {
      if (!(this_present_except_node && that_present_except_node))
        return false;
      if (!this.except_node.equals(that.except_node))
        return false;
    }

    boolean this_present_merge_join_node = true && this.isSetMerge_join_node();
    boolean that_present_merge_join_node = true && that.isSetMerge_join_node();
    if (this_present_merge_join_node || that_present_merge_join_node) {
      if (!(this_present_merge_join_node && that_present_merge_join_node))
        return false;
      if (!this.merge_join_node.equals(that.merge_join_node))
        return false;
    }

    boolean this_present_use_vectorized = true && this.isSetUse_vectorized();
    boolean that_present_use_vectorized = true && that.isSetUse_vectorized();
    if (this_present_use_vectorized || that_present_use_vectorized) {
      if (!(this_present_use_vectorized && that_present_use_vectorized))
        return false;
      if (this.use_vectorized != that.use_vectorized)
        return false;
    }

    boolean this_present_hdfs_scan_node = true && this.isSetHdfs_scan_node();
    boolean that_present_hdfs_scan_node = true && that.isSetHdfs_scan_node();
    if (this_present_hdfs_scan_node || that_present_hdfs_scan_node) {
      if (!(this_present_hdfs_scan_node && that_present_hdfs_scan_node))
        return false;
      if (!this.hdfs_scan_node.equals(that.hdfs_scan_node))
        return false;
    }

    boolean this_present_project_node = true && this.isSetProject_node();
    boolean that_present_project_node = true && that.isSetProject_node();
    if (this_present_project_node || that_present_project_node) {
      if (!(this_present_project_node && that_present_project_node))
        return false;
      if (!this.project_node.equals(that.project_node))
        return false;
    }

    boolean this_present_table_function_node = true && this.isSetTable_function_node();
    boolean that_present_table_function_node = true && that.isSetTable_function_node();
    if (this_present_table_function_node || that_present_table_function_node) {
      if (!(this_present_table_function_node && that_present_table_function_node))
        return false;
      if (!this.table_function_node.equals(that.table_function_node))
        return false;
    }

    boolean this_present_probe_runtime_filters = true && this.isSetProbe_runtime_filters();
    boolean that_present_probe_runtime_filters = true && that.isSetProbe_runtime_filters();
    if (this_present_probe_runtime_filters || that_present_probe_runtime_filters) {
      if (!(this_present_probe_runtime_filters && that_present_probe_runtime_filters))
        return false;
      if (!this.probe_runtime_filters.equals(that.probe_runtime_filters))
        return false;
    }

    boolean this_present_decode_node = true && this.isSetDecode_node();
    boolean that_present_decode_node = true && that.isSetDecode_node();
    if (this_present_decode_node || that_present_decode_node) {
      if (!(this_present_decode_node && that_present_decode_node))
        return false;
      if (!this.decode_node.equals(that.decode_node))
        return false;
    }

    boolean this_present_local_rf_waiting_set = true && this.isSetLocal_rf_waiting_set();
    boolean that_present_local_rf_waiting_set = true && that.isSetLocal_rf_waiting_set();
    if (this_present_local_rf_waiting_set || that_present_local_rf_waiting_set) {
      if (!(this_present_local_rf_waiting_set && that_present_local_rf_waiting_set))
        return false;
      if (!this.local_rf_waiting_set.equals(that.local_rf_waiting_set))
        return false;
    }

    boolean this_present_filter_null_value_columns = true && this.isSetFilter_null_value_columns();
    boolean that_present_filter_null_value_columns = true && that.isSetFilter_null_value_columns();
    if (this_present_filter_null_value_columns || that_present_filter_null_value_columns) {
      if (!(this_present_filter_null_value_columns && that_present_filter_null_value_columns))
        return false;
      if (!this.filter_null_value_columns.equals(that.filter_null_value_columns))
        return false;
    }

    boolean this_present_need_create_tuple_columns = true && this.isSetNeed_create_tuple_columns();
    boolean that_present_need_create_tuple_columns = true && that.isSetNeed_create_tuple_columns();
    if (this_present_need_create_tuple_columns || that_present_need_create_tuple_columns) {
      if (!(this_present_need_create_tuple_columns && that_present_need_create_tuple_columns))
        return false;
      if (this.need_create_tuple_columns != that.need_create_tuple_columns)
        return false;
    }

    boolean this_present_jdbc_scan_node = true && this.isSetJdbc_scan_node();
    boolean that_present_jdbc_scan_node = true && that.isSetJdbc_scan_node();
    if (this_present_jdbc_scan_node || that_present_jdbc_scan_node) {
      if (!(this_present_jdbc_scan_node && that_present_jdbc_scan_node))
        return false;
      if (!this.jdbc_scan_node.equals(that.jdbc_scan_node))
        return false;
    }

    boolean this_present_connector_scan_node = true && this.isSetConnector_scan_node();
    boolean that_present_connector_scan_node = true && that.isSetConnector_scan_node();
    if (this_present_connector_scan_node || that_present_connector_scan_node) {
      if (!(this_present_connector_scan_node && that_present_connector_scan_node))
        return false;
      if (!this.connector_scan_node.equals(that.connector_scan_node))
        return false;
    }

    boolean this_present_cross_join_node = true && this.isSetCross_join_node();
    boolean that_present_cross_join_node = true && that.isSetCross_join_node();
    if (this_present_cross_join_node || that_present_cross_join_node) {
      if (!(this_present_cross_join_node && that_present_cross_join_node))
        return false;
      if (!this.cross_join_node.equals(that.cross_join_node))
        return false;
    }

    boolean this_present_lake_scan_node = true && this.isSetLake_scan_node();
    boolean that_present_lake_scan_node = true && that.isSetLake_scan_node();
    if (this_present_lake_scan_node || that_present_lake_scan_node) {
      if (!(this_present_lake_scan_node && that_present_lake_scan_node))
        return false;
      if (!this.lake_scan_node.equals(that.lake_scan_node))
        return false;
    }

    boolean this_present_nestloop_join_node = true && this.isSetNestloop_join_node();
    boolean that_present_nestloop_join_node = true && that.isSetNestloop_join_node();
    if (this_present_nestloop_join_node || that_present_nestloop_join_node) {
      if (!(this_present_nestloop_join_node && that_present_nestloop_join_node))
        return false;
      if (!this.nestloop_join_node.equals(that.nestloop_join_node))
        return false;
    }

    boolean this_present_stream_scan_node = true && this.isSetStream_scan_node();
    boolean that_present_stream_scan_node = true && that.isSetStream_scan_node();
    if (this_present_stream_scan_node || that_present_stream_scan_node) {
      if (!(this_present_stream_scan_node && that_present_stream_scan_node))
        return false;
      if (!this.stream_scan_node.equals(that.stream_scan_node))
        return false;
    }

    boolean this_present_stream_join_node = true && this.isSetStream_join_node();
    boolean that_present_stream_join_node = true && that.isSetStream_join_node();
    if (this_present_stream_join_node || that_present_stream_join_node) {
      if (!(this_present_stream_join_node && that_present_stream_join_node))
        return false;
      if (!this.stream_join_node.equals(that.stream_join_node))
        return false;
    }

    boolean this_present_stream_agg_node = true && this.isSetStream_agg_node();
    boolean that_present_stream_agg_node = true && that.isSetStream_agg_node();
    if (this_present_stream_agg_node || that_present_stream_agg_node) {
      if (!(this_present_stream_agg_node && that_present_stream_agg_node))
        return false;
      if (!this.stream_agg_node.equals(that.stream_agg_node))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + node_id;

    hashCode = hashCode * 8191 + ((isSetNode_type()) ? 131071 : 524287);
    if (isSetNode_type())
      hashCode = hashCode * 8191 + node_type.getValue();

    hashCode = hashCode * 8191 + num_children;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(limit);

    hashCode = hashCode * 8191 + ((isSetRow_tuples()) ? 131071 : 524287);
    if (isSetRow_tuples())
      hashCode = hashCode * 8191 + row_tuples.hashCode();

    hashCode = hashCode * 8191 + ((isSetNullable_tuples()) ? 131071 : 524287);
    if (isSetNullable_tuples())
      hashCode = hashCode * 8191 + nullable_tuples.hashCode();

    hashCode = hashCode * 8191 + ((isSetConjuncts()) ? 131071 : 524287);
    if (isSetConjuncts())
      hashCode = hashCode * 8191 + conjuncts.hashCode();

    hashCode = hashCode * 8191 + ((compact_data) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetHash_join_node()) ? 131071 : 524287);
    if (isSetHash_join_node())
      hashCode = hashCode * 8191 + hash_join_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetAgg_node()) ? 131071 : 524287);
    if (isSetAgg_node())
      hashCode = hashCode * 8191 + agg_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetSort_node()) ? 131071 : 524287);
    if (isSetSort_node())
      hashCode = hashCode * 8191 + sort_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetMerge_node()) ? 131071 : 524287);
    if (isSetMerge_node())
      hashCode = hashCode * 8191 + merge_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetExchange_node()) ? 131071 : 524287);
    if (isSetExchange_node())
      hashCode = hashCode * 8191 + exchange_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetMysql_scan_node()) ? 131071 : 524287);
    if (isSetMysql_scan_node())
      hashCode = hashCode * 8191 + mysql_scan_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetOlap_scan_node()) ? 131071 : 524287);
    if (isSetOlap_scan_node())
      hashCode = hashCode * 8191 + olap_scan_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetFile_scan_node()) ? 131071 : 524287);
    if (isSetFile_scan_node())
      hashCode = hashCode * 8191 + file_scan_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchema_scan_node()) ? 131071 : 524287);
    if (isSetSchema_scan_node())
      hashCode = hashCode * 8191 + schema_scan_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetMeta_scan_node()) ? 131071 : 524287);
    if (isSetMeta_scan_node())
      hashCode = hashCode * 8191 + meta_scan_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetAnalytic_node()) ? 131071 : 524287);
    if (isSetAnalytic_node())
      hashCode = hashCode * 8191 + analytic_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnion_node()) ? 131071 : 524287);
    if (isSetUnion_node())
      hashCode = hashCode * 8191 + union_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetResource_profile()) ? 131071 : 524287);
    if (isSetResource_profile())
      hashCode = hashCode * 8191 + resource_profile.hashCode();

    hashCode = hashCode * 8191 + ((isSetEs_scan_node()) ? 131071 : 524287);
    if (isSetEs_scan_node())
      hashCode = hashCode * 8191 + es_scan_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetRepeat_node()) ? 131071 : 524287);
    if (isSetRepeat_node())
      hashCode = hashCode * 8191 + repeat_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetAssert_num_rows_node()) ? 131071 : 524287);
    if (isSetAssert_num_rows_node())
      hashCode = hashCode * 8191 + assert_num_rows_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntersect_node()) ? 131071 : 524287);
    if (isSetIntersect_node())
      hashCode = hashCode * 8191 + intersect_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetExcept_node()) ? 131071 : 524287);
    if (isSetExcept_node())
      hashCode = hashCode * 8191 + except_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetMerge_join_node()) ? 131071 : 524287);
    if (isSetMerge_join_node())
      hashCode = hashCode * 8191 + merge_join_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetUse_vectorized()) ? 131071 : 524287);
    if (isSetUse_vectorized())
      hashCode = hashCode * 8191 + ((use_vectorized) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetHdfs_scan_node()) ? 131071 : 524287);
    if (isSetHdfs_scan_node())
      hashCode = hashCode * 8191 + hdfs_scan_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetProject_node()) ? 131071 : 524287);
    if (isSetProject_node())
      hashCode = hashCode * 8191 + project_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_function_node()) ? 131071 : 524287);
    if (isSetTable_function_node())
      hashCode = hashCode * 8191 + table_function_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetProbe_runtime_filters()) ? 131071 : 524287);
    if (isSetProbe_runtime_filters())
      hashCode = hashCode * 8191 + probe_runtime_filters.hashCode();

    hashCode = hashCode * 8191 + ((isSetDecode_node()) ? 131071 : 524287);
    if (isSetDecode_node())
      hashCode = hashCode * 8191 + decode_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocal_rf_waiting_set()) ? 131071 : 524287);
    if (isSetLocal_rf_waiting_set())
      hashCode = hashCode * 8191 + local_rf_waiting_set.hashCode();

    hashCode = hashCode * 8191 + ((isSetFilter_null_value_columns()) ? 131071 : 524287);
    if (isSetFilter_null_value_columns())
      hashCode = hashCode * 8191 + filter_null_value_columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetNeed_create_tuple_columns()) ? 131071 : 524287);
    if (isSetNeed_create_tuple_columns())
      hashCode = hashCode * 8191 + ((need_create_tuple_columns) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetJdbc_scan_node()) ? 131071 : 524287);
    if (isSetJdbc_scan_node())
      hashCode = hashCode * 8191 + jdbc_scan_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetConnector_scan_node()) ? 131071 : 524287);
    if (isSetConnector_scan_node())
      hashCode = hashCode * 8191 + connector_scan_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetCross_join_node()) ? 131071 : 524287);
    if (isSetCross_join_node())
      hashCode = hashCode * 8191 + cross_join_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetLake_scan_node()) ? 131071 : 524287);
    if (isSetLake_scan_node())
      hashCode = hashCode * 8191 + lake_scan_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetNestloop_join_node()) ? 131071 : 524287);
    if (isSetNestloop_join_node())
      hashCode = hashCode * 8191 + nestloop_join_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetStream_scan_node()) ? 131071 : 524287);
    if (isSetStream_scan_node())
      hashCode = hashCode * 8191 + stream_scan_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetStream_join_node()) ? 131071 : 524287);
    if (isSetStream_join_node())
      hashCode = hashCode * 8191 + stream_join_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetStream_agg_node()) ? 131071 : 524287);
    if (isSetStream_agg_node())
      hashCode = hashCode * 8191 + stream_agg_node.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TPlanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNode_id(), other.isSetNode_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_id, other.node_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNode_type(), other.isSetNode_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_type, other.node_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_children(), other.isSetNum_children());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_children()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_children, other.num_children);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLimit(), other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRow_tuples(), other.isSetRow_tuples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_tuples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_tuples, other.row_tuples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNullable_tuples(), other.isSetNullable_tuples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNullable_tuples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nullable_tuples, other.nullable_tuples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConjuncts(), other.isSetConjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conjuncts, other.conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCompact_data(), other.isSetCompact_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompact_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compact_data, other.compact_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHash_join_node(), other.isSetHash_join_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHash_join_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash_join_node, other.hash_join_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAgg_node(), other.isSetAgg_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgg_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agg_node, other.agg_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSort_node(), other.isSetSort_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_node, other.sort_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMerge_node(), other.isSetMerge_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerge_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merge_node, other.merge_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExchange_node(), other.isSetExchange_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchange_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchange_node, other.exchange_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMysql_scan_node(), other.isSetMysql_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMysql_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mysql_scan_node, other.mysql_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOlap_scan_node(), other.isSetOlap_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOlap_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.olap_scan_node, other.olap_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_scan_node(), other.isSetFile_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_scan_node, other.file_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchema_scan_node(), other.isSetSchema_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_scan_node, other.schema_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMeta_scan_node(), other.isSetMeta_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeta_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meta_scan_node, other.meta_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAnalytic_node(), other.isSetAnalytic_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalytic_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analytic_node, other.analytic_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUnion_node(), other.isSetUnion_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnion_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.union_node, other.union_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResource_profile(), other.isSetResource_profile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource_profile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_profile, other.resource_profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEs_scan_node(), other.isSetEs_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEs_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.es_scan_node, other.es_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRepeat_node(), other.isSetRepeat_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeat_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeat_node, other.repeat_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAssert_num_rows_node(), other.isSetAssert_num_rows_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssert_num_rows_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assert_num_rows_node, other.assert_num_rows_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIntersect_node(), other.isSetIntersect_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntersect_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intersect_node, other.intersect_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExcept_node(), other.isSetExcept_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExcept_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.except_node, other.except_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMerge_join_node(), other.isSetMerge_join_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerge_join_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merge_join_node, other.merge_join_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_vectorized(), other.isSetUse_vectorized());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_vectorized()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_vectorized, other.use_vectorized);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHdfs_scan_node(), other.isSetHdfs_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHdfs_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hdfs_scan_node, other.hdfs_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProject_node(), other.isSetProject_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProject_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project_node, other.project_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_function_node(), other.isSetTable_function_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_function_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_function_node, other.table_function_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProbe_runtime_filters(), other.isSetProbe_runtime_filters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProbe_runtime_filters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.probe_runtime_filters, other.probe_runtime_filters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDecode_node(), other.isSetDecode_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecode_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decode_node, other.decode_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLocal_rf_waiting_set(), other.isSetLocal_rf_waiting_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocal_rf_waiting_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local_rf_waiting_set, other.local_rf_waiting_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFilter_null_value_columns(), other.isSetFilter_null_value_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_null_value_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_null_value_columns, other.filter_null_value_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNeed_create_tuple_columns(), other.isSetNeed_create_tuple_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeed_create_tuple_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.need_create_tuple_columns, other.need_create_tuple_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJdbc_scan_node(), other.isSetJdbc_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJdbc_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jdbc_scan_node, other.jdbc_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConnector_scan_node(), other.isSetConnector_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnector_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connector_scan_node, other.connector_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCross_join_node(), other.isSetCross_join_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCross_join_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cross_join_node, other.cross_join_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLake_scan_node(), other.isSetLake_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLake_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lake_scan_node, other.lake_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNestloop_join_node(), other.isSetNestloop_join_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNestloop_join_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nestloop_join_node, other.nestloop_join_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStream_scan_node(), other.isSetStream_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStream_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream_scan_node, other.stream_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStream_join_node(), other.isSetStream_join_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStream_join_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream_join_node, other.stream_join_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStream_agg_node(), other.isSetStream_agg_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStream_agg_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream_agg_node, other.stream_agg_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPlanNode(");
    boolean first = true;

    sb.append("node_id:");
    sb.append(this.node_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("node_type:");
    if (this.node_type == null) {
      sb.append("null");
    } else {
      sb.append(this.node_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_children:");
    sb.append(this.num_children);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limit:");
    sb.append(this.limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("row_tuples:");
    if (this.row_tuples == null) {
      sb.append("null");
    } else {
      sb.append(this.row_tuples);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nullable_tuples:");
    if (this.nullable_tuples == null) {
      sb.append("null");
    } else {
      sb.append(this.nullable_tuples);
    }
    first = false;
    if (isSetConjuncts()) {
      if (!first) sb.append(", ");
      sb.append("conjuncts:");
      if (this.conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.conjuncts);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("compact_data:");
    sb.append(this.compact_data);
    first = false;
    if (isSetHash_join_node()) {
      if (!first) sb.append(", ");
      sb.append("hash_join_node:");
      if (this.hash_join_node == null) {
        sb.append("null");
      } else {
        sb.append(this.hash_join_node);
      }
      first = false;
    }
    if (isSetAgg_node()) {
      if (!first) sb.append(", ");
      sb.append("agg_node:");
      if (this.agg_node == null) {
        sb.append("null");
      } else {
        sb.append(this.agg_node);
      }
      first = false;
    }
    if (isSetSort_node()) {
      if (!first) sb.append(", ");
      sb.append("sort_node:");
      if (this.sort_node == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_node);
      }
      first = false;
    }
    if (isSetMerge_node()) {
      if (!first) sb.append(", ");
      sb.append("merge_node:");
      if (this.merge_node == null) {
        sb.append("null");
      } else {
        sb.append(this.merge_node);
      }
      first = false;
    }
    if (isSetExchange_node()) {
      if (!first) sb.append(", ");
      sb.append("exchange_node:");
      if (this.exchange_node == null) {
        sb.append("null");
      } else {
        sb.append(this.exchange_node);
      }
      first = false;
    }
    if (isSetMysql_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("mysql_scan_node:");
      if (this.mysql_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.mysql_scan_node);
      }
      first = false;
    }
    if (isSetOlap_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("olap_scan_node:");
      if (this.olap_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.olap_scan_node);
      }
      first = false;
    }
    if (isSetFile_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("file_scan_node:");
      if (this.file_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.file_scan_node);
      }
      first = false;
    }
    if (isSetSchema_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("schema_scan_node:");
      if (this.schema_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.schema_scan_node);
      }
      first = false;
    }
    if (isSetMeta_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("meta_scan_node:");
      if (this.meta_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.meta_scan_node);
      }
      first = false;
    }
    if (isSetAnalytic_node()) {
      if (!first) sb.append(", ");
      sb.append("analytic_node:");
      if (this.analytic_node == null) {
        sb.append("null");
      } else {
        sb.append(this.analytic_node);
      }
      first = false;
    }
    if (isSetUnion_node()) {
      if (!first) sb.append(", ");
      sb.append("union_node:");
      if (this.union_node == null) {
        sb.append("null");
      } else {
        sb.append(this.union_node);
      }
      first = false;
    }
    if (isSetResource_profile()) {
      if (!first) sb.append(", ");
      sb.append("resource_profile:");
      if (this.resource_profile == null) {
        sb.append("null");
      } else {
        sb.append(this.resource_profile);
      }
      first = false;
    }
    if (isSetEs_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("es_scan_node:");
      if (this.es_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.es_scan_node);
      }
      first = false;
    }
    if (isSetRepeat_node()) {
      if (!first) sb.append(", ");
      sb.append("repeat_node:");
      if (this.repeat_node == null) {
        sb.append("null");
      } else {
        sb.append(this.repeat_node);
      }
      first = false;
    }
    if (isSetAssert_num_rows_node()) {
      if (!first) sb.append(", ");
      sb.append("assert_num_rows_node:");
      if (this.assert_num_rows_node == null) {
        sb.append("null");
      } else {
        sb.append(this.assert_num_rows_node);
      }
      first = false;
    }
    if (isSetIntersect_node()) {
      if (!first) sb.append(", ");
      sb.append("intersect_node:");
      if (this.intersect_node == null) {
        sb.append("null");
      } else {
        sb.append(this.intersect_node);
      }
      first = false;
    }
    if (isSetExcept_node()) {
      if (!first) sb.append(", ");
      sb.append("except_node:");
      if (this.except_node == null) {
        sb.append("null");
      } else {
        sb.append(this.except_node);
      }
      first = false;
    }
    if (isSetMerge_join_node()) {
      if (!first) sb.append(", ");
      sb.append("merge_join_node:");
      if (this.merge_join_node == null) {
        sb.append("null");
      } else {
        sb.append(this.merge_join_node);
      }
      first = false;
    }
    if (isSetUse_vectorized()) {
      if (!first) sb.append(", ");
      sb.append("use_vectorized:");
      sb.append(this.use_vectorized);
      first = false;
    }
    if (isSetHdfs_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("hdfs_scan_node:");
      if (this.hdfs_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.hdfs_scan_node);
      }
      first = false;
    }
    if (isSetProject_node()) {
      if (!first) sb.append(", ");
      sb.append("project_node:");
      if (this.project_node == null) {
        sb.append("null");
      } else {
        sb.append(this.project_node);
      }
      first = false;
    }
    if (isSetTable_function_node()) {
      if (!first) sb.append(", ");
      sb.append("table_function_node:");
      if (this.table_function_node == null) {
        sb.append("null");
      } else {
        sb.append(this.table_function_node);
      }
      first = false;
    }
    if (isSetProbe_runtime_filters()) {
      if (!first) sb.append(", ");
      sb.append("probe_runtime_filters:");
      if (this.probe_runtime_filters == null) {
        sb.append("null");
      } else {
        sb.append(this.probe_runtime_filters);
      }
      first = false;
    }
    if (isSetDecode_node()) {
      if (!first) sb.append(", ");
      sb.append("decode_node:");
      if (this.decode_node == null) {
        sb.append("null");
      } else {
        sb.append(this.decode_node);
      }
      first = false;
    }
    if (isSetLocal_rf_waiting_set()) {
      if (!first) sb.append(", ");
      sb.append("local_rf_waiting_set:");
      if (this.local_rf_waiting_set == null) {
        sb.append("null");
      } else {
        sb.append(this.local_rf_waiting_set);
      }
      first = false;
    }
    if (isSetFilter_null_value_columns()) {
      if (!first) sb.append(", ");
      sb.append("filter_null_value_columns:");
      if (this.filter_null_value_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.filter_null_value_columns);
      }
      first = false;
    }
    if (isSetNeed_create_tuple_columns()) {
      if (!first) sb.append(", ");
      sb.append("need_create_tuple_columns:");
      sb.append(this.need_create_tuple_columns);
      first = false;
    }
    if (isSetJdbc_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("jdbc_scan_node:");
      if (this.jdbc_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.jdbc_scan_node);
      }
      first = false;
    }
    if (isSetConnector_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("connector_scan_node:");
      if (this.connector_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.connector_scan_node);
      }
      first = false;
    }
    if (isSetCross_join_node()) {
      if (!first) sb.append(", ");
      sb.append("cross_join_node:");
      if (this.cross_join_node == null) {
        sb.append("null");
      } else {
        sb.append(this.cross_join_node);
      }
      first = false;
    }
    if (isSetLake_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("lake_scan_node:");
      if (this.lake_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.lake_scan_node);
      }
      first = false;
    }
    if (isSetNestloop_join_node()) {
      if (!first) sb.append(", ");
      sb.append("nestloop_join_node:");
      if (this.nestloop_join_node == null) {
        sb.append("null");
      } else {
        sb.append(this.nestloop_join_node);
      }
      first = false;
    }
    if (isSetStream_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("stream_scan_node:");
      if (this.stream_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.stream_scan_node);
      }
      first = false;
    }
    if (isSetStream_join_node()) {
      if (!first) sb.append(", ");
      sb.append("stream_join_node:");
      if (this.stream_join_node == null) {
        sb.append("null");
      } else {
        sb.append(this.stream_join_node);
      }
      first = false;
    }
    if (isSetStream_agg_node()) {
      if (!first) sb.append(", ");
      sb.append("stream_agg_node:");
      if (this.stream_agg_node == null) {
        sb.append("null");
      } else {
        sb.append(this.stream_agg_node);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'node_id' because it's a primitive and you chose the non-beans generator.
    if (node_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'node_type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'num_children' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'limit' because it's a primitive and you chose the non-beans generator.
    if (row_tuples == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'row_tuples' was not present! Struct: " + toString());
    }
    if (nullable_tuples == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nullable_tuples' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'compact_data' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (hash_join_node != null) {
      hash_join_node.validate();
    }
    if (agg_node != null) {
      agg_node.validate();
    }
    if (sort_node != null) {
      sort_node.validate();
    }
    if (merge_node != null) {
      merge_node.validate();
    }
    if (exchange_node != null) {
      exchange_node.validate();
    }
    if (mysql_scan_node != null) {
      mysql_scan_node.validate();
    }
    if (olap_scan_node != null) {
      olap_scan_node.validate();
    }
    if (file_scan_node != null) {
      file_scan_node.validate();
    }
    if (schema_scan_node != null) {
      schema_scan_node.validate();
    }
    if (meta_scan_node != null) {
      meta_scan_node.validate();
    }
    if (analytic_node != null) {
      analytic_node.validate();
    }
    if (union_node != null) {
      union_node.validate();
    }
    if (resource_profile != null) {
      resource_profile.validate();
    }
    if (es_scan_node != null) {
      es_scan_node.validate();
    }
    if (repeat_node != null) {
      repeat_node.validate();
    }
    if (assert_num_rows_node != null) {
      assert_num_rows_node.validate();
    }
    if (intersect_node != null) {
      intersect_node.validate();
    }
    if (except_node != null) {
      except_node.validate();
    }
    if (merge_join_node != null) {
      merge_join_node.validate();
    }
    if (hdfs_scan_node != null) {
      hdfs_scan_node.validate();
    }
    if (project_node != null) {
      project_node.validate();
    }
    if (table_function_node != null) {
      table_function_node.validate();
    }
    if (decode_node != null) {
      decode_node.validate();
    }
    if (jdbc_scan_node != null) {
      jdbc_scan_node.validate();
    }
    if (connector_scan_node != null) {
      connector_scan_node.validate();
    }
    if (cross_join_node != null) {
      cross_join_node.validate();
    }
    if (lake_scan_node != null) {
      lake_scan_node.validate();
    }
    if (nestloop_join_node != null) {
      nestloop_join_node.validate();
    }
    if (stream_scan_node != null) {
      stream_scan_node.validate();
    }
    if (stream_join_node != null) {
      stream_join_node.validate();
    }
    if (stream_agg_node != null) {
      stream_agg_node.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlanNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPlanNodeStandardScheme getScheme() {
      return new TPlanNodeStandardScheme();
    }
  }

  private static class TPlanNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPlanNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.node_id = iprot.readI32();
              struct.setNode_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.node_type = com.starrocks.thrift.TPlanNodeType.findByValue(iprot.readI32());
              struct.setNode_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_CHILDREN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_children = iprot.readI32();
              struct.setNum_childrenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.limit = iprot.readI64();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROW_TUPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list994 = iprot.readListBegin();
                struct.row_tuples = new java.util.ArrayList<java.lang.Integer>(_list994.size);
                int _elem995;
                for (int _i996 = 0; _i996 < _list994.size; ++_i996)
                {
                  _elem995 = iprot.readI32();
                  struct.row_tuples.add(_elem995);
                }
                iprot.readListEnd();
              }
              struct.setRow_tuplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NULLABLE_TUPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list997 = iprot.readListBegin();
                struct.nullable_tuples = new java.util.ArrayList<java.lang.Boolean>(_list997.size);
                boolean _elem998;
                for (int _i999 = 0; _i999 < _list997.size; ++_i999)
                {
                  _elem998 = iprot.readBool();
                  struct.nullable_tuples.add(_elem998);
                }
                iprot.readListEnd();
              }
              struct.setNullable_tuplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1000 = iprot.readListBegin();
                struct.conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list1000.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem1001;
                for (int _i1002 = 0; _i1002 < _list1000.size; ++_i1002)
                {
                  _elem1001 = new com.starrocks.thrift.TExpr();
                  _elem1001.read(iprot);
                  struct.conjuncts.add(_elem1001);
                }
                iprot.readListEnd();
              }
              struct.setConjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMPACT_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.compact_data = iprot.readBool();
              struct.setCompact_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HASH_JOIN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hash_join_node = new THashJoinNode();
              struct.hash_join_node.read(iprot);
              struct.setHash_join_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AGG_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.agg_node = new TAggregationNode();
              struct.agg_node.read(iprot);
              struct.setAgg_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SORT_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sort_node = new TSortNode();
              struct.sort_node.read(iprot);
              struct.setSort_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MERGE_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.merge_node = new TMergeNode();
              struct.merge_node.read(iprot);
              struct.setMerge_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // EXCHANGE_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.exchange_node = new TExchangeNode();
              struct.exchange_node.read(iprot);
              struct.setExchange_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MYSQL_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mysql_scan_node = new TMySQLScanNode();
              struct.mysql_scan_node.read(iprot);
              struct.setMysql_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // OLAP_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.olap_scan_node = new TOlapScanNode();
              struct.olap_scan_node.read(iprot);
              struct.setOlap_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // FILE_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.file_scan_node = new TFileScanNode();
              struct.file_scan_node.read(iprot);
              struct.setFile_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SCHEMA_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schema_scan_node = new TSchemaScanNode();
              struct.schema_scan_node.read(iprot);
              struct.setSchema_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // META_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.meta_scan_node = new TMetaScanNode();
              struct.meta_scan_node.read(iprot);
              struct.setMeta_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ANALYTIC_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.analytic_node = new TAnalyticNode();
              struct.analytic_node.read(iprot);
              struct.setAnalytic_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // UNION_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.union_node = new TUnionNode();
              struct.union_node.read(iprot);
              struct.setUnion_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // RESOURCE_PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resource_profile = new TBackendResourceProfile();
              struct.resource_profile.read(iprot);
              struct.setResource_profileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ES_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.es_scan_node = new TEsScanNode();
              struct.es_scan_node.read(iprot);
              struct.setEs_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // REPEAT_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.repeat_node = new TRepeatNode();
              struct.repeat_node.read(iprot);
              struct.setRepeat_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ASSERT_NUM_ROWS_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.assert_num_rows_node = new TAssertNumRowsNode();
              struct.assert_num_rows_node.read(iprot);
              struct.setAssert_num_rows_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // INTERSECT_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.intersect_node = new TIntersectNode();
              struct.intersect_node.read(iprot);
              struct.setIntersect_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // EXCEPT_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.except_node = new TExceptNode();
              struct.except_node.read(iprot);
              struct.setExcept_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // MERGE_JOIN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.merge_join_node = new TMergeJoinNode();
              struct.merge_join_node.read(iprot);
              struct.setMerge_join_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // USE_VECTORIZED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_vectorized = iprot.readBool();
              struct.setUse_vectorizedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // HDFS_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hdfs_scan_node = new THdfsScanNode();
              struct.hdfs_scan_node.read(iprot);
              struct.setHdfs_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // PROJECT_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.project_node = new TProjectNode();
              struct.project_node.read(iprot);
              struct.setProject_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // TABLE_FUNCTION_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_function_node = new TTableFunctionNode();
              struct.table_function_node.read(iprot);
              struct.setTable_function_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // PROBE_RUNTIME_FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1003 = iprot.readListBegin();
                struct.probe_runtime_filters = new java.util.ArrayList<com.starrocks.thrift.TRuntimeFilterDescription>(_list1003.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TRuntimeFilterDescription _elem1004;
                for (int _i1005 = 0; _i1005 < _list1003.size; ++_i1005)
                {
                  _elem1004 = new com.starrocks.thrift.TRuntimeFilterDescription();
                  _elem1004.read(iprot);
                  struct.probe_runtime_filters.add(_elem1004);
                }
                iprot.readListEnd();
              }
              struct.setProbe_runtime_filtersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // DECODE_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.decode_node = new TDecodeNode();
              struct.decode_node.read(iprot);
              struct.setDecode_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // LOCAL_RF_WAITING_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set1006 = iprot.readSetBegin();
                struct.local_rf_waiting_set = new java.util.HashSet<java.lang.Integer>(2*_set1006.size);
                int _elem1007;
                for (int _i1008 = 0; _i1008 < _set1006.size; ++_i1008)
                {
                  _elem1007 = iprot.readI32();
                  struct.local_rf_waiting_set.add(_elem1007);
                }
                iprot.readSetEnd();
              }
              struct.setLocal_rf_waiting_setIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // FILTER_NULL_VALUE_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1009 = iprot.readListBegin();
                struct.filter_null_value_columns = new java.util.ArrayList<java.lang.Integer>(_list1009.size);
                int _elem1010;
                for (int _i1011 = 0; _i1011 < _list1009.size; ++_i1011)
                {
                  _elem1010 = iprot.readI32();
                  struct.filter_null_value_columns.add(_elem1010);
                }
                iprot.readListEnd();
              }
              struct.setFilter_null_value_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // NEED_CREATE_TUPLE_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.need_create_tuple_columns = iprot.readBool();
              struct.setNeed_create_tuple_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // JDBC_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.jdbc_scan_node = new TJDBCScanNode();
              struct.jdbc_scan_node.read(iprot);
              struct.setJdbc_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // CONNECTOR_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.connector_scan_node = new TConnectorScanNode();
              struct.connector_scan_node.read(iprot);
              struct.setConnector_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // CROSS_JOIN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cross_join_node = new TCrossJoinNode();
              struct.cross_join_node.read(iprot);
              struct.setCross_join_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // LAKE_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lake_scan_node = new TLakeScanNode();
              struct.lake_scan_node.read(iprot);
              struct.setLake_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // NESTLOOP_JOIN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nestloop_join_node = new TNestLoopJoinNode();
              struct.nestloop_join_node.read(iprot);
              struct.setNestloop_join_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // STREAM_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stream_scan_node = new TStreamScanNode();
              struct.stream_scan_node.read(iprot);
              struct.setStream_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // STREAM_JOIN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stream_join_node = new TStreamJoinNode();
              struct.stream_join_node.read(iprot);
              struct.setStream_join_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 72: // STREAM_AGG_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stream_agg_node = new TStreamAggregationNode();
              struct.stream_agg_node.read(iprot);
              struct.setStream_agg_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNode_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'node_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum_children()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_children' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLimit()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'limit' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCompact_data()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'compact_data' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.node_id);
      oprot.writeFieldEnd();
      if (struct.node_type != null) {
        oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.node_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_CHILDREN_FIELD_DESC);
      oprot.writeI32(struct.num_children);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI64(struct.limit);
      oprot.writeFieldEnd();
      if (struct.row_tuples != null) {
        oprot.writeFieldBegin(ROW_TUPLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.row_tuples.size()));
          for (int _iter1012 : struct.row_tuples)
          {
            oprot.writeI32(_iter1012);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.nullable_tuples != null) {
        oprot.writeFieldBegin(NULLABLE_TUPLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.nullable_tuples.size()));
          for (boolean _iter1013 : struct.nullable_tuples)
          {
            oprot.writeBool(_iter1013);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.conjuncts != null) {
        if (struct.isSetConjuncts()) {
          oprot.writeFieldBegin(CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.conjuncts.size()));
            for (com.starrocks.thrift.TExpr _iter1014 : struct.conjuncts)
            {
              _iter1014.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(COMPACT_DATA_FIELD_DESC);
      oprot.writeBool(struct.compact_data);
      oprot.writeFieldEnd();
      if (struct.hash_join_node != null) {
        if (struct.isSetHash_join_node()) {
          oprot.writeFieldBegin(HASH_JOIN_NODE_FIELD_DESC);
          struct.hash_join_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.agg_node != null) {
        if (struct.isSetAgg_node()) {
          oprot.writeFieldBegin(AGG_NODE_FIELD_DESC);
          struct.agg_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sort_node != null) {
        if (struct.isSetSort_node()) {
          oprot.writeFieldBegin(SORT_NODE_FIELD_DESC);
          struct.sort_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.merge_node != null) {
        if (struct.isSetMerge_node()) {
          oprot.writeFieldBegin(MERGE_NODE_FIELD_DESC);
          struct.merge_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchange_node != null) {
        if (struct.isSetExchange_node()) {
          oprot.writeFieldBegin(EXCHANGE_NODE_FIELD_DESC);
          struct.exchange_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mysql_scan_node != null) {
        if (struct.isSetMysql_scan_node()) {
          oprot.writeFieldBegin(MYSQL_SCAN_NODE_FIELD_DESC);
          struct.mysql_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.olap_scan_node != null) {
        if (struct.isSetOlap_scan_node()) {
          oprot.writeFieldBegin(OLAP_SCAN_NODE_FIELD_DESC);
          struct.olap_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.file_scan_node != null) {
        if (struct.isSetFile_scan_node()) {
          oprot.writeFieldBegin(FILE_SCAN_NODE_FIELD_DESC);
          struct.file_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.schema_scan_node != null) {
        if (struct.isSetSchema_scan_node()) {
          oprot.writeFieldBegin(SCHEMA_SCAN_NODE_FIELD_DESC);
          struct.schema_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.meta_scan_node != null) {
        if (struct.isSetMeta_scan_node()) {
          oprot.writeFieldBegin(META_SCAN_NODE_FIELD_DESC);
          struct.meta_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.analytic_node != null) {
        if (struct.isSetAnalytic_node()) {
          oprot.writeFieldBegin(ANALYTIC_NODE_FIELD_DESC);
          struct.analytic_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.union_node != null) {
        if (struct.isSetUnion_node()) {
          oprot.writeFieldBegin(UNION_NODE_FIELD_DESC);
          struct.union_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resource_profile != null) {
        if (struct.isSetResource_profile()) {
          oprot.writeFieldBegin(RESOURCE_PROFILE_FIELD_DESC);
          struct.resource_profile.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.es_scan_node != null) {
        if (struct.isSetEs_scan_node()) {
          oprot.writeFieldBegin(ES_SCAN_NODE_FIELD_DESC);
          struct.es_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.repeat_node != null) {
        if (struct.isSetRepeat_node()) {
          oprot.writeFieldBegin(REPEAT_NODE_FIELD_DESC);
          struct.repeat_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.assert_num_rows_node != null) {
        if (struct.isSetAssert_num_rows_node()) {
          oprot.writeFieldBegin(ASSERT_NUM_ROWS_NODE_FIELD_DESC);
          struct.assert_num_rows_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.intersect_node != null) {
        if (struct.isSetIntersect_node()) {
          oprot.writeFieldBegin(INTERSECT_NODE_FIELD_DESC);
          struct.intersect_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.except_node != null) {
        if (struct.isSetExcept_node()) {
          oprot.writeFieldBegin(EXCEPT_NODE_FIELD_DESC);
          struct.except_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.merge_join_node != null) {
        if (struct.isSetMerge_join_node()) {
          oprot.writeFieldBegin(MERGE_JOIN_NODE_FIELD_DESC);
          struct.merge_join_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUse_vectorized()) {
        oprot.writeFieldBegin(USE_VECTORIZED_FIELD_DESC);
        oprot.writeBool(struct.use_vectorized);
        oprot.writeFieldEnd();
      }
      if (struct.hdfs_scan_node != null) {
        if (struct.isSetHdfs_scan_node()) {
          oprot.writeFieldBegin(HDFS_SCAN_NODE_FIELD_DESC);
          struct.hdfs_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.project_node != null) {
        if (struct.isSetProject_node()) {
          oprot.writeFieldBegin(PROJECT_NODE_FIELD_DESC);
          struct.project_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_function_node != null) {
        if (struct.isSetTable_function_node()) {
          oprot.writeFieldBegin(TABLE_FUNCTION_NODE_FIELD_DESC);
          struct.table_function_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.probe_runtime_filters != null) {
        if (struct.isSetProbe_runtime_filters()) {
          oprot.writeFieldBegin(PROBE_RUNTIME_FILTERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.probe_runtime_filters.size()));
            for (com.starrocks.thrift.TRuntimeFilterDescription _iter1015 : struct.probe_runtime_filters)
            {
              _iter1015.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.decode_node != null) {
        if (struct.isSetDecode_node()) {
          oprot.writeFieldBegin(DECODE_NODE_FIELD_DESC);
          struct.decode_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.local_rf_waiting_set != null) {
        if (struct.isSetLocal_rf_waiting_set()) {
          oprot.writeFieldBegin(LOCAL_RF_WAITING_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.local_rf_waiting_set.size()));
            for (int _iter1016 : struct.local_rf_waiting_set)
            {
              oprot.writeI32(_iter1016);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.filter_null_value_columns != null) {
        if (struct.isSetFilter_null_value_columns()) {
          oprot.writeFieldBegin(FILTER_NULL_VALUE_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.filter_null_value_columns.size()));
            for (int _iter1017 : struct.filter_null_value_columns)
            {
              oprot.writeI32(_iter1017);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNeed_create_tuple_columns()) {
        oprot.writeFieldBegin(NEED_CREATE_TUPLE_COLUMNS_FIELD_DESC);
        oprot.writeBool(struct.need_create_tuple_columns);
        oprot.writeFieldEnd();
      }
      if (struct.jdbc_scan_node != null) {
        if (struct.isSetJdbc_scan_node()) {
          oprot.writeFieldBegin(JDBC_SCAN_NODE_FIELD_DESC);
          struct.jdbc_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.connector_scan_node != null) {
        if (struct.isSetConnector_scan_node()) {
          oprot.writeFieldBegin(CONNECTOR_SCAN_NODE_FIELD_DESC);
          struct.connector_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cross_join_node != null) {
        if (struct.isSetCross_join_node()) {
          oprot.writeFieldBegin(CROSS_JOIN_NODE_FIELD_DESC);
          struct.cross_join_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lake_scan_node != null) {
        if (struct.isSetLake_scan_node()) {
          oprot.writeFieldBegin(LAKE_SCAN_NODE_FIELD_DESC);
          struct.lake_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nestloop_join_node != null) {
        if (struct.isSetNestloop_join_node()) {
          oprot.writeFieldBegin(NESTLOOP_JOIN_NODE_FIELD_DESC);
          struct.nestloop_join_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stream_scan_node != null) {
        if (struct.isSetStream_scan_node()) {
          oprot.writeFieldBegin(STREAM_SCAN_NODE_FIELD_DESC);
          struct.stream_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stream_join_node != null) {
        if (struct.isSetStream_join_node()) {
          oprot.writeFieldBegin(STREAM_JOIN_NODE_FIELD_DESC);
          struct.stream_join_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stream_agg_node != null) {
        if (struct.isSetStream_agg_node()) {
          oprot.writeFieldBegin(STREAM_AGG_NODE_FIELD_DESC);
          struct.stream_agg_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlanNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPlanNodeTupleScheme getScheme() {
      return new TPlanNodeTupleScheme();
    }
  }

  private static class TPlanNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPlanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.node_id);
      oprot.writeI32(struct.node_type.getValue());
      oprot.writeI32(struct.num_children);
      oprot.writeI64(struct.limit);
      {
        oprot.writeI32(struct.row_tuples.size());
        for (int _iter1018 : struct.row_tuples)
        {
          oprot.writeI32(_iter1018);
        }
      }
      {
        oprot.writeI32(struct.nullable_tuples.size());
        for (boolean _iter1019 : struct.nullable_tuples)
        {
          oprot.writeBool(_iter1019);
        }
      }
      oprot.writeBool(struct.compact_data);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConjuncts()) {
        optionals.set(0);
      }
      if (struct.isSetHash_join_node()) {
        optionals.set(1);
      }
      if (struct.isSetAgg_node()) {
        optionals.set(2);
      }
      if (struct.isSetSort_node()) {
        optionals.set(3);
      }
      if (struct.isSetMerge_node()) {
        optionals.set(4);
      }
      if (struct.isSetExchange_node()) {
        optionals.set(5);
      }
      if (struct.isSetMysql_scan_node()) {
        optionals.set(6);
      }
      if (struct.isSetOlap_scan_node()) {
        optionals.set(7);
      }
      if (struct.isSetFile_scan_node()) {
        optionals.set(8);
      }
      if (struct.isSetSchema_scan_node()) {
        optionals.set(9);
      }
      if (struct.isSetMeta_scan_node()) {
        optionals.set(10);
      }
      if (struct.isSetAnalytic_node()) {
        optionals.set(11);
      }
      if (struct.isSetUnion_node()) {
        optionals.set(12);
      }
      if (struct.isSetResource_profile()) {
        optionals.set(13);
      }
      if (struct.isSetEs_scan_node()) {
        optionals.set(14);
      }
      if (struct.isSetRepeat_node()) {
        optionals.set(15);
      }
      if (struct.isSetAssert_num_rows_node()) {
        optionals.set(16);
      }
      if (struct.isSetIntersect_node()) {
        optionals.set(17);
      }
      if (struct.isSetExcept_node()) {
        optionals.set(18);
      }
      if (struct.isSetMerge_join_node()) {
        optionals.set(19);
      }
      if (struct.isSetUse_vectorized()) {
        optionals.set(20);
      }
      if (struct.isSetHdfs_scan_node()) {
        optionals.set(21);
      }
      if (struct.isSetProject_node()) {
        optionals.set(22);
      }
      if (struct.isSetTable_function_node()) {
        optionals.set(23);
      }
      if (struct.isSetProbe_runtime_filters()) {
        optionals.set(24);
      }
      if (struct.isSetDecode_node()) {
        optionals.set(25);
      }
      if (struct.isSetLocal_rf_waiting_set()) {
        optionals.set(26);
      }
      if (struct.isSetFilter_null_value_columns()) {
        optionals.set(27);
      }
      if (struct.isSetNeed_create_tuple_columns()) {
        optionals.set(28);
      }
      if (struct.isSetJdbc_scan_node()) {
        optionals.set(29);
      }
      if (struct.isSetConnector_scan_node()) {
        optionals.set(30);
      }
      if (struct.isSetCross_join_node()) {
        optionals.set(31);
      }
      if (struct.isSetLake_scan_node()) {
        optionals.set(32);
      }
      if (struct.isSetNestloop_join_node()) {
        optionals.set(33);
      }
      if (struct.isSetStream_scan_node()) {
        optionals.set(34);
      }
      if (struct.isSetStream_join_node()) {
        optionals.set(35);
      }
      if (struct.isSetStream_agg_node()) {
        optionals.set(36);
      }
      oprot.writeBitSet(optionals, 37);
      if (struct.isSetConjuncts()) {
        {
          oprot.writeI32(struct.conjuncts.size());
          for (com.starrocks.thrift.TExpr _iter1020 : struct.conjuncts)
          {
            _iter1020.write(oprot);
          }
        }
      }
      if (struct.isSetHash_join_node()) {
        struct.hash_join_node.write(oprot);
      }
      if (struct.isSetAgg_node()) {
        struct.agg_node.write(oprot);
      }
      if (struct.isSetSort_node()) {
        struct.sort_node.write(oprot);
      }
      if (struct.isSetMerge_node()) {
        struct.merge_node.write(oprot);
      }
      if (struct.isSetExchange_node()) {
        struct.exchange_node.write(oprot);
      }
      if (struct.isSetMysql_scan_node()) {
        struct.mysql_scan_node.write(oprot);
      }
      if (struct.isSetOlap_scan_node()) {
        struct.olap_scan_node.write(oprot);
      }
      if (struct.isSetFile_scan_node()) {
        struct.file_scan_node.write(oprot);
      }
      if (struct.isSetSchema_scan_node()) {
        struct.schema_scan_node.write(oprot);
      }
      if (struct.isSetMeta_scan_node()) {
        struct.meta_scan_node.write(oprot);
      }
      if (struct.isSetAnalytic_node()) {
        struct.analytic_node.write(oprot);
      }
      if (struct.isSetUnion_node()) {
        struct.union_node.write(oprot);
      }
      if (struct.isSetResource_profile()) {
        struct.resource_profile.write(oprot);
      }
      if (struct.isSetEs_scan_node()) {
        struct.es_scan_node.write(oprot);
      }
      if (struct.isSetRepeat_node()) {
        struct.repeat_node.write(oprot);
      }
      if (struct.isSetAssert_num_rows_node()) {
        struct.assert_num_rows_node.write(oprot);
      }
      if (struct.isSetIntersect_node()) {
        struct.intersect_node.write(oprot);
      }
      if (struct.isSetExcept_node()) {
        struct.except_node.write(oprot);
      }
      if (struct.isSetMerge_join_node()) {
        struct.merge_join_node.write(oprot);
      }
      if (struct.isSetUse_vectorized()) {
        oprot.writeBool(struct.use_vectorized);
      }
      if (struct.isSetHdfs_scan_node()) {
        struct.hdfs_scan_node.write(oprot);
      }
      if (struct.isSetProject_node()) {
        struct.project_node.write(oprot);
      }
      if (struct.isSetTable_function_node()) {
        struct.table_function_node.write(oprot);
      }
      if (struct.isSetProbe_runtime_filters()) {
        {
          oprot.writeI32(struct.probe_runtime_filters.size());
          for (com.starrocks.thrift.TRuntimeFilterDescription _iter1021 : struct.probe_runtime_filters)
          {
            _iter1021.write(oprot);
          }
        }
      }
      if (struct.isSetDecode_node()) {
        struct.decode_node.write(oprot);
      }
      if (struct.isSetLocal_rf_waiting_set()) {
        {
          oprot.writeI32(struct.local_rf_waiting_set.size());
          for (int _iter1022 : struct.local_rf_waiting_set)
          {
            oprot.writeI32(_iter1022);
          }
        }
      }
      if (struct.isSetFilter_null_value_columns()) {
        {
          oprot.writeI32(struct.filter_null_value_columns.size());
          for (int _iter1023 : struct.filter_null_value_columns)
          {
            oprot.writeI32(_iter1023);
          }
        }
      }
      if (struct.isSetNeed_create_tuple_columns()) {
        oprot.writeBool(struct.need_create_tuple_columns);
      }
      if (struct.isSetJdbc_scan_node()) {
        struct.jdbc_scan_node.write(oprot);
      }
      if (struct.isSetConnector_scan_node()) {
        struct.connector_scan_node.write(oprot);
      }
      if (struct.isSetCross_join_node()) {
        struct.cross_join_node.write(oprot);
      }
      if (struct.isSetLake_scan_node()) {
        struct.lake_scan_node.write(oprot);
      }
      if (struct.isSetNestloop_join_node()) {
        struct.nestloop_join_node.write(oprot);
      }
      if (struct.isSetStream_scan_node()) {
        struct.stream_scan_node.write(oprot);
      }
      if (struct.isSetStream_join_node()) {
        struct.stream_join_node.write(oprot);
      }
      if (struct.isSetStream_agg_node()) {
        struct.stream_agg_node.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.node_id = iprot.readI32();
      struct.setNode_idIsSet(true);
      struct.node_type = com.starrocks.thrift.TPlanNodeType.findByValue(iprot.readI32());
      struct.setNode_typeIsSet(true);
      struct.num_children = iprot.readI32();
      struct.setNum_childrenIsSet(true);
      struct.limit = iprot.readI64();
      struct.setLimitIsSet(true);
      {
        org.apache.thrift.protocol.TList _list1024 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
        struct.row_tuples = new java.util.ArrayList<java.lang.Integer>(_list1024.size);
        int _elem1025;
        for (int _i1026 = 0; _i1026 < _list1024.size; ++_i1026)
        {
          _elem1025 = iprot.readI32();
          struct.row_tuples.add(_elem1025);
        }
      }
      struct.setRow_tuplesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list1027 = iprot.readListBegin(org.apache.thrift.protocol.TType.BOOL);
        struct.nullable_tuples = new java.util.ArrayList<java.lang.Boolean>(_list1027.size);
        boolean _elem1028;
        for (int _i1029 = 0; _i1029 < _list1027.size; ++_i1029)
        {
          _elem1028 = iprot.readBool();
          struct.nullable_tuples.add(_elem1028);
        }
      }
      struct.setNullable_tuplesIsSet(true);
      struct.compact_data = iprot.readBool();
      struct.setCompact_dataIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(37);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list1030 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list1030.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem1031;
          for (int _i1032 = 0; _i1032 < _list1030.size; ++_i1032)
          {
            _elem1031 = new com.starrocks.thrift.TExpr();
            _elem1031.read(iprot);
            struct.conjuncts.add(_elem1031);
          }
        }
        struct.setConjunctsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hash_join_node = new THashJoinNode();
        struct.hash_join_node.read(iprot);
        struct.setHash_join_nodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.agg_node = new TAggregationNode();
        struct.agg_node.read(iprot);
        struct.setAgg_nodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sort_node = new TSortNode();
        struct.sort_node.read(iprot);
        struct.setSort_nodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.merge_node = new TMergeNode();
        struct.merge_node.read(iprot);
        struct.setMerge_nodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.exchange_node = new TExchangeNode();
        struct.exchange_node.read(iprot);
        struct.setExchange_nodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mysql_scan_node = new TMySQLScanNode();
        struct.mysql_scan_node.read(iprot);
        struct.setMysql_scan_nodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.olap_scan_node = new TOlapScanNode();
        struct.olap_scan_node.read(iprot);
        struct.setOlap_scan_nodeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.file_scan_node = new TFileScanNode();
        struct.file_scan_node.read(iprot);
        struct.setFile_scan_nodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.schema_scan_node = new TSchemaScanNode();
        struct.schema_scan_node.read(iprot);
        struct.setSchema_scan_nodeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.meta_scan_node = new TMetaScanNode();
        struct.meta_scan_node.read(iprot);
        struct.setMeta_scan_nodeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.analytic_node = new TAnalyticNode();
        struct.analytic_node.read(iprot);
        struct.setAnalytic_nodeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.union_node = new TUnionNode();
        struct.union_node.read(iprot);
        struct.setUnion_nodeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.resource_profile = new TBackendResourceProfile();
        struct.resource_profile.read(iprot);
        struct.setResource_profileIsSet(true);
      }
      if (incoming.get(14)) {
        struct.es_scan_node = new TEsScanNode();
        struct.es_scan_node.read(iprot);
        struct.setEs_scan_nodeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.repeat_node = new TRepeatNode();
        struct.repeat_node.read(iprot);
        struct.setRepeat_nodeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.assert_num_rows_node = new TAssertNumRowsNode();
        struct.assert_num_rows_node.read(iprot);
        struct.setAssert_num_rows_nodeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.intersect_node = new TIntersectNode();
        struct.intersect_node.read(iprot);
        struct.setIntersect_nodeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.except_node = new TExceptNode();
        struct.except_node.read(iprot);
        struct.setExcept_nodeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.merge_join_node = new TMergeJoinNode();
        struct.merge_join_node.read(iprot);
        struct.setMerge_join_nodeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.use_vectorized = iprot.readBool();
        struct.setUse_vectorizedIsSet(true);
      }
      if (incoming.get(21)) {
        struct.hdfs_scan_node = new THdfsScanNode();
        struct.hdfs_scan_node.read(iprot);
        struct.setHdfs_scan_nodeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.project_node = new TProjectNode();
        struct.project_node.read(iprot);
        struct.setProject_nodeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.table_function_node = new TTableFunctionNode();
        struct.table_function_node.read(iprot);
        struct.setTable_function_nodeIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TList _list1033 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.probe_runtime_filters = new java.util.ArrayList<com.starrocks.thrift.TRuntimeFilterDescription>(_list1033.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TRuntimeFilterDescription _elem1034;
          for (int _i1035 = 0; _i1035 < _list1033.size; ++_i1035)
          {
            _elem1034 = new com.starrocks.thrift.TRuntimeFilterDescription();
            _elem1034.read(iprot);
            struct.probe_runtime_filters.add(_elem1034);
          }
        }
        struct.setProbe_runtime_filtersIsSet(true);
      }
      if (incoming.get(25)) {
        struct.decode_node = new TDecodeNode();
        struct.decode_node.read(iprot);
        struct.setDecode_nodeIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TSet _set1036 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I32);
          struct.local_rf_waiting_set = new java.util.HashSet<java.lang.Integer>(2*_set1036.size);
          int _elem1037;
          for (int _i1038 = 0; _i1038 < _set1036.size; ++_i1038)
          {
            _elem1037 = iprot.readI32();
            struct.local_rf_waiting_set.add(_elem1037);
          }
        }
        struct.setLocal_rf_waiting_setIsSet(true);
      }
      if (incoming.get(27)) {
        {
          org.apache.thrift.protocol.TList _list1039 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.filter_null_value_columns = new java.util.ArrayList<java.lang.Integer>(_list1039.size);
          int _elem1040;
          for (int _i1041 = 0; _i1041 < _list1039.size; ++_i1041)
          {
            _elem1040 = iprot.readI32();
            struct.filter_null_value_columns.add(_elem1040);
          }
        }
        struct.setFilter_null_value_columnsIsSet(true);
      }
      if (incoming.get(28)) {
        struct.need_create_tuple_columns = iprot.readBool();
        struct.setNeed_create_tuple_columnsIsSet(true);
      }
      if (incoming.get(29)) {
        struct.jdbc_scan_node = new TJDBCScanNode();
        struct.jdbc_scan_node.read(iprot);
        struct.setJdbc_scan_nodeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.connector_scan_node = new TConnectorScanNode();
        struct.connector_scan_node.read(iprot);
        struct.setConnector_scan_nodeIsSet(true);
      }
      if (incoming.get(31)) {
        struct.cross_join_node = new TCrossJoinNode();
        struct.cross_join_node.read(iprot);
        struct.setCross_join_nodeIsSet(true);
      }
      if (incoming.get(32)) {
        struct.lake_scan_node = new TLakeScanNode();
        struct.lake_scan_node.read(iprot);
        struct.setLake_scan_nodeIsSet(true);
      }
      if (incoming.get(33)) {
        struct.nestloop_join_node = new TNestLoopJoinNode();
        struct.nestloop_join_node.read(iprot);
        struct.setNestloop_join_nodeIsSet(true);
      }
      if (incoming.get(34)) {
        struct.stream_scan_node = new TStreamScanNode();
        struct.stream_scan_node.read(iprot);
        struct.setStream_scan_nodeIsSet(true);
      }
      if (incoming.get(35)) {
        struct.stream_join_node = new TStreamJoinNode();
        struct.stream_join_node.read(iprot);
        struct.setStream_join_nodeIsSet(true);
      }
      if (incoming.get(36)) {
        struct.stream_agg_node = new TStreamAggregationNode();
        struct.stream_agg_node.read(iprot);
        struct.setStream_agg_nodeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

