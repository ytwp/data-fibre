/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TNormalAnalyticNode implements org.apache.thrift.TBase<TNormalAnalyticNode, TNormalAnalyticNode._Fields>, java.io.Serializable, Cloneable, Comparable<TNormalAnalyticNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNormalAnalyticNode");

  private static final org.apache.thrift.protocol.TField PARTITION_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_exprs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_BY_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("order_by_exprs", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ANALYTIC_FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("analytic_functions", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField INTERMEDIATE_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediate_tuple_id", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField OUTPUT_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("output_tuple_id", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField BUFFERED_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("buffered_tuple_id", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PARTITION_BY_EQ_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_by_eq", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ORDER_BY_EQ_FIELD_DESC = new org.apache.thrift.protocol.TField("order_by_eq", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField HAS_OUTER_JOIN_CHILD_FIELD_DESC = new org.apache.thrift.protocol.TField("has_outer_join_child", org.apache.thrift.protocol.TType.BOOL, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TNormalAnalyticNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TNormalAnalyticNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> partition_exprs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> order_by_exprs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> analytic_functions; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TAnalyticWindow window; // optional
  public int intermediate_tuple_id; // optional
  public int output_tuple_id; // optional
  public int buffered_tuple_id; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer partition_by_eq; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer order_by_eq; // optional
  public boolean has_outer_join_child; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTITION_EXPRS((short)1, "partition_exprs"),
    ORDER_BY_EXPRS((short)2, "order_by_exprs"),
    ANALYTIC_FUNCTIONS((short)3, "analytic_functions"),
    WINDOW((short)4, "window"),
    INTERMEDIATE_TUPLE_ID((short)5, "intermediate_tuple_id"),
    OUTPUT_TUPLE_ID((short)6, "output_tuple_id"),
    BUFFERED_TUPLE_ID((short)7, "buffered_tuple_id"),
    PARTITION_BY_EQ((short)8, "partition_by_eq"),
    ORDER_BY_EQ((short)9, "order_by_eq"),
    HAS_OUTER_JOIN_CHILD((short)10, "has_outer_join_child");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTITION_EXPRS
          return PARTITION_EXPRS;
        case 2: // ORDER_BY_EXPRS
          return ORDER_BY_EXPRS;
        case 3: // ANALYTIC_FUNCTIONS
          return ANALYTIC_FUNCTIONS;
        case 4: // WINDOW
          return WINDOW;
        case 5: // INTERMEDIATE_TUPLE_ID
          return INTERMEDIATE_TUPLE_ID;
        case 6: // OUTPUT_TUPLE_ID
          return OUTPUT_TUPLE_ID;
        case 7: // BUFFERED_TUPLE_ID
          return BUFFERED_TUPLE_ID;
        case 8: // PARTITION_BY_EQ
          return PARTITION_BY_EQ;
        case 9: // ORDER_BY_EQ
          return ORDER_BY_EQ;
        case 10: // HAS_OUTER_JOIN_CHILD
          return HAS_OUTER_JOIN_CHILD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTERMEDIATE_TUPLE_ID_ISSET_ID = 0;
  private static final int __OUTPUT_TUPLE_ID_ISSET_ID = 1;
  private static final int __BUFFERED_TUPLE_ID_ISSET_ID = 2;
  private static final int __HAS_OUTER_JOIN_CHILD_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARTITION_EXPRS,_Fields.ORDER_BY_EXPRS,_Fields.ANALYTIC_FUNCTIONS,_Fields.WINDOW,_Fields.INTERMEDIATE_TUPLE_ID,_Fields.OUTPUT_TUPLE_ID,_Fields.BUFFERED_TUPLE_ID,_Fields.PARTITION_BY_EQ,_Fields.ORDER_BY_EQ,_Fields.HAS_OUTER_JOIN_CHILD};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITION_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("partition_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.ORDER_BY_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("order_by_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.ANALYTIC_FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("analytic_functions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TAnalyticWindow.class)));
    tmpMap.put(_Fields.INTERMEDIATE_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("intermediate_tuple_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.OUTPUT_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("output_tuple_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.BUFFERED_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("buffered_tuple_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.PARTITION_BY_EQ, new org.apache.thrift.meta_data.FieldMetaData("partition_by_eq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ORDER_BY_EQ, new org.apache.thrift.meta_data.FieldMetaData("order_by_eq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.HAS_OUTER_JOIN_CHILD, new org.apache.thrift.meta_data.FieldMetaData("has_outer_join_child", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNormalAnalyticNode.class, metaDataMap);
  }

  public TNormalAnalyticNode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNormalAnalyticNode(TNormalAnalyticNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartition_exprs()) {
      java.util.List<java.nio.ByteBuffer> __this__partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(other.partition_exprs);
      this.partition_exprs = __this__partition_exprs;
    }
    if (other.isSetOrder_by_exprs()) {
      java.util.List<java.nio.ByteBuffer> __this__order_by_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(other.order_by_exprs);
      this.order_by_exprs = __this__order_by_exprs;
    }
    if (other.isSetAnalytic_functions()) {
      java.util.List<java.nio.ByteBuffer> __this__analytic_functions = new java.util.ArrayList<java.nio.ByteBuffer>(other.analytic_functions);
      this.analytic_functions = __this__analytic_functions;
    }
    if (other.isSetWindow()) {
      this.window = new io.datafibre.fibre.thrift.TAnalyticWindow(other.window);
    }
    this.intermediate_tuple_id = other.intermediate_tuple_id;
    this.output_tuple_id = other.output_tuple_id;
    this.buffered_tuple_id = other.buffered_tuple_id;
    if (other.isSetPartition_by_eq()) {
      this.partition_by_eq = org.apache.thrift.TBaseHelper.copyBinary(other.partition_by_eq);
    }
    if (other.isSetOrder_by_eq()) {
      this.order_by_eq = org.apache.thrift.TBaseHelper.copyBinary(other.order_by_eq);
    }
    this.has_outer_join_child = other.has_outer_join_child;
  }

  @Override
  public TNormalAnalyticNode deepCopy() {
    return new TNormalAnalyticNode(this);
  }

  @Override
  public void clear() {
    this.partition_exprs = null;
    this.order_by_exprs = null;
    this.analytic_functions = null;
    this.window = null;
    setIntermediate_tuple_idIsSet(false);
    this.intermediate_tuple_id = 0;
    setOutput_tuple_idIsSet(false);
    this.output_tuple_id = 0;
    setBuffered_tuple_idIsSet(false);
    this.buffered_tuple_id = 0;
    this.partition_by_eq = null;
    this.order_by_eq = null;
    setHas_outer_join_childIsSet(false);
    this.has_outer_join_child = false;
  }

  public int getPartition_exprsSize() {
    return (this.partition_exprs == null) ? 0 : this.partition_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getPartition_exprsIterator() {
    return (this.partition_exprs == null) ? null : this.partition_exprs.iterator();
  }

  public void addToPartition_exprs(java.nio.ByteBuffer elem) {
    if (this.partition_exprs == null) {
      this.partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.partition_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getPartition_exprs() {
    return this.partition_exprs;
  }

  public TNormalAnalyticNode setPartition_exprs(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> partition_exprs) {
    this.partition_exprs = partition_exprs;
    return this;
  }

  public void unsetPartition_exprs() {
    this.partition_exprs = null;
  }

  /** Returns true if field partition_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_exprs() {
    return this.partition_exprs != null;
  }

  public void setPartition_exprsIsSet(boolean value) {
    if (!value) {
      this.partition_exprs = null;
    }
  }

  public int getOrder_by_exprsSize() {
    return (this.order_by_exprs == null) ? 0 : this.order_by_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getOrder_by_exprsIterator() {
    return (this.order_by_exprs == null) ? null : this.order_by_exprs.iterator();
  }

  public void addToOrder_by_exprs(java.nio.ByteBuffer elem) {
    if (this.order_by_exprs == null) {
      this.order_by_exprs = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.order_by_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getOrder_by_exprs() {
    return this.order_by_exprs;
  }

  public TNormalAnalyticNode setOrder_by_exprs(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> order_by_exprs) {
    this.order_by_exprs = order_by_exprs;
    return this;
  }

  public void unsetOrder_by_exprs() {
    this.order_by_exprs = null;
  }

  /** Returns true if field order_by_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder_by_exprs() {
    return this.order_by_exprs != null;
  }

  public void setOrder_by_exprsIsSet(boolean value) {
    if (!value) {
      this.order_by_exprs = null;
    }
  }

  public int getAnalytic_functionsSize() {
    return (this.analytic_functions == null) ? 0 : this.analytic_functions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getAnalytic_functionsIterator() {
    return (this.analytic_functions == null) ? null : this.analytic_functions.iterator();
  }

  public void addToAnalytic_functions(java.nio.ByteBuffer elem) {
    if (this.analytic_functions == null) {
      this.analytic_functions = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.analytic_functions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getAnalytic_functions() {
    return this.analytic_functions;
  }

  public TNormalAnalyticNode setAnalytic_functions(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> analytic_functions) {
    this.analytic_functions = analytic_functions;
    return this;
  }

  public void unsetAnalytic_functions() {
    this.analytic_functions = null;
  }

  /** Returns true if field analytic_functions is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalytic_functions() {
    return this.analytic_functions != null;
  }

  public void setAnalytic_functionsIsSet(boolean value) {
    if (!value) {
      this.analytic_functions = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TAnalyticWindow getWindow() {
    return this.window;
  }

  public TNormalAnalyticNode setWindow(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TAnalyticWindow window) {
    this.window = window;
    return this;
  }

  public void unsetWindow() {
    this.window = null;
  }

  /** Returns true if field window is set (has been assigned a value) and false otherwise */
  public boolean isSetWindow() {
    return this.window != null;
  }

  public void setWindowIsSet(boolean value) {
    if (!value) {
      this.window = null;
    }
  }

  public int getIntermediate_tuple_id() {
    return this.intermediate_tuple_id;
  }

  public TNormalAnalyticNode setIntermediate_tuple_id(int intermediate_tuple_id) {
    this.intermediate_tuple_id = intermediate_tuple_id;
    setIntermediate_tuple_idIsSet(true);
    return this;
  }

  public void unsetIntermediate_tuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERMEDIATE_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field intermediate_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetIntermediate_tuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERMEDIATE_TUPLE_ID_ISSET_ID);
  }

  public void setIntermediate_tuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERMEDIATE_TUPLE_ID_ISSET_ID, value);
  }

  public int getOutput_tuple_id() {
    return this.output_tuple_id;
  }

  public TNormalAnalyticNode setOutput_tuple_id(int output_tuple_id) {
    this.output_tuple_id = output_tuple_id;
    setOutput_tuple_idIsSet(true);
    return this;
  }

  public void unsetOutput_tuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field output_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_tuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID);
  }

  public void setOutput_tuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID, value);
  }

  public int getBuffered_tuple_id() {
    return this.buffered_tuple_id;
  }

  public TNormalAnalyticNode setBuffered_tuple_id(int buffered_tuple_id) {
    this.buffered_tuple_id = buffered_tuple_id;
    setBuffered_tuple_idIsSet(true);
    return this;
  }

  public void unsetBuffered_tuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUFFERED_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field buffered_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBuffered_tuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUFFERED_TUPLE_ID_ISSET_ID);
  }

  public void setBuffered_tuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUFFERED_TUPLE_ID_ISSET_ID, value);
  }

  public byte[] getPartition_by_eq() {
    setPartition_by_eq(org.apache.thrift.TBaseHelper.rightSize(partition_by_eq));
    return partition_by_eq == null ? null : partition_by_eq.array();
  }

  public java.nio.ByteBuffer bufferForPartition_by_eq() {
    return org.apache.thrift.TBaseHelper.copyBinary(partition_by_eq);
  }

  public TNormalAnalyticNode setPartition_by_eq(byte[] partition_by_eq) {
    this.partition_by_eq = partition_by_eq == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(partition_by_eq.clone());
    return this;
  }

  public TNormalAnalyticNode setPartition_by_eq(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer partition_by_eq) {
    this.partition_by_eq = org.apache.thrift.TBaseHelper.copyBinary(partition_by_eq);
    return this;
  }

  public void unsetPartition_by_eq() {
    this.partition_by_eq = null;
  }

  /** Returns true if field partition_by_eq is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_by_eq() {
    return this.partition_by_eq != null;
  }

  public void setPartition_by_eqIsSet(boolean value) {
    if (!value) {
      this.partition_by_eq = null;
    }
  }

  public byte[] getOrder_by_eq() {
    setOrder_by_eq(org.apache.thrift.TBaseHelper.rightSize(order_by_eq));
    return order_by_eq == null ? null : order_by_eq.array();
  }

  public java.nio.ByteBuffer bufferForOrder_by_eq() {
    return org.apache.thrift.TBaseHelper.copyBinary(order_by_eq);
  }

  public TNormalAnalyticNode setOrder_by_eq(byte[] order_by_eq) {
    this.order_by_eq = order_by_eq == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(order_by_eq.clone());
    return this;
  }

  public TNormalAnalyticNode setOrder_by_eq(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer order_by_eq) {
    this.order_by_eq = org.apache.thrift.TBaseHelper.copyBinary(order_by_eq);
    return this;
  }

  public void unsetOrder_by_eq() {
    this.order_by_eq = null;
  }

  /** Returns true if field order_by_eq is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder_by_eq() {
    return this.order_by_eq != null;
  }

  public void setOrder_by_eqIsSet(boolean value) {
    if (!value) {
      this.order_by_eq = null;
    }
  }

  public boolean isHas_outer_join_child() {
    return this.has_outer_join_child;
  }

  public TNormalAnalyticNode setHas_outer_join_child(boolean has_outer_join_child) {
    this.has_outer_join_child = has_outer_join_child;
    setHas_outer_join_childIsSet(true);
    return this;
  }

  public void unsetHas_outer_join_child() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HAS_OUTER_JOIN_CHILD_ISSET_ID);
  }

  /** Returns true if field has_outer_join_child is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_outer_join_child() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HAS_OUTER_JOIN_CHILD_ISSET_ID);
  }

  public void setHas_outer_join_childIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HAS_OUTER_JOIN_CHILD_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PARTITION_EXPRS:
      if (value == null) {
        unsetPartition_exprs();
      } else {
        setPartition_exprs((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case ORDER_BY_EXPRS:
      if (value == null) {
        unsetOrder_by_exprs();
      } else {
        setOrder_by_exprs((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case ANALYTIC_FUNCTIONS:
      if (value == null) {
        unsetAnalytic_functions();
      } else {
        setAnalytic_functions((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case WINDOW:
      if (value == null) {
        unsetWindow();
      } else {
        setWindow((io.datafibre.fibre.thrift.TAnalyticWindow)value);
      }
      break;

    case INTERMEDIATE_TUPLE_ID:
      if (value == null) {
        unsetIntermediate_tuple_id();
      } else {
        setIntermediate_tuple_id((java.lang.Integer)value);
      }
      break;

    case OUTPUT_TUPLE_ID:
      if (value == null) {
        unsetOutput_tuple_id();
      } else {
        setOutput_tuple_id((java.lang.Integer)value);
      }
      break;

    case BUFFERED_TUPLE_ID:
      if (value == null) {
        unsetBuffered_tuple_id();
      } else {
        setBuffered_tuple_id((java.lang.Integer)value);
      }
      break;

    case PARTITION_BY_EQ:
      if (value == null) {
        unsetPartition_by_eq();
      } else {
        if (value instanceof byte[]) {
          setPartition_by_eq((byte[])value);
        } else {
          setPartition_by_eq((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ORDER_BY_EQ:
      if (value == null) {
        unsetOrder_by_eq();
      } else {
        if (value instanceof byte[]) {
          setOrder_by_eq((byte[])value);
        } else {
          setOrder_by_eq((java.nio.ByteBuffer)value);
        }
      }
      break;

    case HAS_OUTER_JOIN_CHILD:
      if (value == null) {
        unsetHas_outer_join_child();
      } else {
        setHas_outer_join_child((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTITION_EXPRS:
      return getPartition_exprs();

    case ORDER_BY_EXPRS:
      return getOrder_by_exprs();

    case ANALYTIC_FUNCTIONS:
      return getAnalytic_functions();

    case WINDOW:
      return getWindow();

    case INTERMEDIATE_TUPLE_ID:
      return getIntermediate_tuple_id();

    case OUTPUT_TUPLE_ID:
      return getOutput_tuple_id();

    case BUFFERED_TUPLE_ID:
      return getBuffered_tuple_id();

    case PARTITION_BY_EQ:
      return getPartition_by_eq();

    case ORDER_BY_EQ:
      return getOrder_by_eq();

    case HAS_OUTER_JOIN_CHILD:
      return isHas_outer_join_child();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PARTITION_EXPRS:
      return isSetPartition_exprs();
    case ORDER_BY_EXPRS:
      return isSetOrder_by_exprs();
    case ANALYTIC_FUNCTIONS:
      return isSetAnalytic_functions();
    case WINDOW:
      return isSetWindow();
    case INTERMEDIATE_TUPLE_ID:
      return isSetIntermediate_tuple_id();
    case OUTPUT_TUPLE_ID:
      return isSetOutput_tuple_id();
    case BUFFERED_TUPLE_ID:
      return isSetBuffered_tuple_id();
    case PARTITION_BY_EQ:
      return isSetPartition_by_eq();
    case ORDER_BY_EQ:
      return isSetOrder_by_eq();
    case HAS_OUTER_JOIN_CHILD:
      return isSetHas_outer_join_child();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TNormalAnalyticNode)
      return this.equals((TNormalAnalyticNode)that);
    return false;
  }

  public boolean equals(TNormalAnalyticNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_partition_exprs = true && this.isSetPartition_exprs();
    boolean that_present_partition_exprs = true && that.isSetPartition_exprs();
    if (this_present_partition_exprs || that_present_partition_exprs) {
      if (!(this_present_partition_exprs && that_present_partition_exprs))
        return false;
      if (!this.partition_exprs.equals(that.partition_exprs))
        return false;
    }

    boolean this_present_order_by_exprs = true && this.isSetOrder_by_exprs();
    boolean that_present_order_by_exprs = true && that.isSetOrder_by_exprs();
    if (this_present_order_by_exprs || that_present_order_by_exprs) {
      if (!(this_present_order_by_exprs && that_present_order_by_exprs))
        return false;
      if (!this.order_by_exprs.equals(that.order_by_exprs))
        return false;
    }

    boolean this_present_analytic_functions = true && this.isSetAnalytic_functions();
    boolean that_present_analytic_functions = true && that.isSetAnalytic_functions();
    if (this_present_analytic_functions || that_present_analytic_functions) {
      if (!(this_present_analytic_functions && that_present_analytic_functions))
        return false;
      if (!this.analytic_functions.equals(that.analytic_functions))
        return false;
    }

    boolean this_present_window = true && this.isSetWindow();
    boolean that_present_window = true && that.isSetWindow();
    if (this_present_window || that_present_window) {
      if (!(this_present_window && that_present_window))
        return false;
      if (!this.window.equals(that.window))
        return false;
    }

    boolean this_present_intermediate_tuple_id = true && this.isSetIntermediate_tuple_id();
    boolean that_present_intermediate_tuple_id = true && that.isSetIntermediate_tuple_id();
    if (this_present_intermediate_tuple_id || that_present_intermediate_tuple_id) {
      if (!(this_present_intermediate_tuple_id && that_present_intermediate_tuple_id))
        return false;
      if (this.intermediate_tuple_id != that.intermediate_tuple_id)
        return false;
    }

    boolean this_present_output_tuple_id = true && this.isSetOutput_tuple_id();
    boolean that_present_output_tuple_id = true && that.isSetOutput_tuple_id();
    if (this_present_output_tuple_id || that_present_output_tuple_id) {
      if (!(this_present_output_tuple_id && that_present_output_tuple_id))
        return false;
      if (this.output_tuple_id != that.output_tuple_id)
        return false;
    }

    boolean this_present_buffered_tuple_id = true && this.isSetBuffered_tuple_id();
    boolean that_present_buffered_tuple_id = true && that.isSetBuffered_tuple_id();
    if (this_present_buffered_tuple_id || that_present_buffered_tuple_id) {
      if (!(this_present_buffered_tuple_id && that_present_buffered_tuple_id))
        return false;
      if (this.buffered_tuple_id != that.buffered_tuple_id)
        return false;
    }

    boolean this_present_partition_by_eq = true && this.isSetPartition_by_eq();
    boolean that_present_partition_by_eq = true && that.isSetPartition_by_eq();
    if (this_present_partition_by_eq || that_present_partition_by_eq) {
      if (!(this_present_partition_by_eq && that_present_partition_by_eq))
        return false;
      if (!this.partition_by_eq.equals(that.partition_by_eq))
        return false;
    }

    boolean this_present_order_by_eq = true && this.isSetOrder_by_eq();
    boolean that_present_order_by_eq = true && that.isSetOrder_by_eq();
    if (this_present_order_by_eq || that_present_order_by_eq) {
      if (!(this_present_order_by_eq && that_present_order_by_eq))
        return false;
      if (!this.order_by_eq.equals(that.order_by_eq))
        return false;
    }

    boolean this_present_has_outer_join_child = true && this.isSetHas_outer_join_child();
    boolean that_present_has_outer_join_child = true && that.isSetHas_outer_join_child();
    if (this_present_has_outer_join_child || that_present_has_outer_join_child) {
      if (!(this_present_has_outer_join_child && that_present_has_outer_join_child))
        return false;
      if (this.has_outer_join_child != that.has_outer_join_child)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPartition_exprs()) ? 131071 : 524287);
    if (isSetPartition_exprs())
      hashCode = hashCode * 8191 + partition_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrder_by_exprs()) ? 131071 : 524287);
    if (isSetOrder_by_exprs())
      hashCode = hashCode * 8191 + order_by_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetAnalytic_functions()) ? 131071 : 524287);
    if (isSetAnalytic_functions())
      hashCode = hashCode * 8191 + analytic_functions.hashCode();

    hashCode = hashCode * 8191 + ((isSetWindow()) ? 131071 : 524287);
    if (isSetWindow())
      hashCode = hashCode * 8191 + window.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntermediate_tuple_id()) ? 131071 : 524287);
    if (isSetIntermediate_tuple_id())
      hashCode = hashCode * 8191 + intermediate_tuple_id;

    hashCode = hashCode * 8191 + ((isSetOutput_tuple_id()) ? 131071 : 524287);
    if (isSetOutput_tuple_id())
      hashCode = hashCode * 8191 + output_tuple_id;

    hashCode = hashCode * 8191 + ((isSetBuffered_tuple_id()) ? 131071 : 524287);
    if (isSetBuffered_tuple_id())
      hashCode = hashCode * 8191 + buffered_tuple_id;

    hashCode = hashCode * 8191 + ((isSetPartition_by_eq()) ? 131071 : 524287);
    if (isSetPartition_by_eq())
      hashCode = hashCode * 8191 + partition_by_eq.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrder_by_eq()) ? 131071 : 524287);
    if (isSetOrder_by_eq())
      hashCode = hashCode * 8191 + order_by_eq.hashCode();

    hashCode = hashCode * 8191 + ((isSetHas_outer_join_child()) ? 131071 : 524287);
    if (isSetHas_outer_join_child())
      hashCode = hashCode * 8191 + ((has_outer_join_child) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TNormalAnalyticNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPartition_exprs(), other.isSetPartition_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_exprs, other.partition_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOrder_by_exprs(), other.isSetOrder_by_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder_by_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order_by_exprs, other.order_by_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAnalytic_functions(), other.isSetAnalytic_functions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalytic_functions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analytic_functions, other.analytic_functions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWindow(), other.isSetWindow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWindow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIntermediate_tuple_id(), other.isSetIntermediate_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntermediate_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediate_tuple_id, other.intermediate_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutput_tuple_id(), other.isSetOutput_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_tuple_id, other.output_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBuffered_tuple_id(), other.isSetBuffered_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuffered_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buffered_tuple_id, other.buffered_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_by_eq(), other.isSetPartition_by_eq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_by_eq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_by_eq, other.partition_by_eq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOrder_by_eq(), other.isSetOrder_by_eq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder_by_eq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order_by_eq, other.order_by_eq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHas_outer_join_child(), other.isSetHas_outer_join_child());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_outer_join_child()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_outer_join_child, other.has_outer_join_child);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TNormalAnalyticNode(");
    boolean first = true;

    if (isSetPartition_exprs()) {
      sb.append("partition_exprs:");
      if (this.partition_exprs == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.partition_exprs, sb);
      }
      first = false;
    }
    if (isSetOrder_by_exprs()) {
      if (!first) sb.append(", ");
      sb.append("order_by_exprs:");
      if (this.order_by_exprs == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.order_by_exprs, sb);
      }
      first = false;
    }
    if (isSetAnalytic_functions()) {
      if (!first) sb.append(", ");
      sb.append("analytic_functions:");
      if (this.analytic_functions == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.analytic_functions, sb);
      }
      first = false;
    }
    if (isSetWindow()) {
      if (!first) sb.append(", ");
      sb.append("window:");
      if (this.window == null) {
        sb.append("null");
      } else {
        sb.append(this.window);
      }
      first = false;
    }
    if (isSetIntermediate_tuple_id()) {
      if (!first) sb.append(", ");
      sb.append("intermediate_tuple_id:");
      sb.append(this.intermediate_tuple_id);
      first = false;
    }
    if (isSetOutput_tuple_id()) {
      if (!first) sb.append(", ");
      sb.append("output_tuple_id:");
      sb.append(this.output_tuple_id);
      first = false;
    }
    if (isSetBuffered_tuple_id()) {
      if (!first) sb.append(", ");
      sb.append("buffered_tuple_id:");
      sb.append(this.buffered_tuple_id);
      first = false;
    }
    if (isSetPartition_by_eq()) {
      if (!first) sb.append(", ");
      sb.append("partition_by_eq:");
      if (this.partition_by_eq == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.partition_by_eq, sb);
      }
      first = false;
    }
    if (isSetOrder_by_eq()) {
      if (!first) sb.append(", ");
      sb.append("order_by_eq:");
      if (this.order_by_eq == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.order_by_eq, sb);
      }
      first = false;
    }
    if (isSetHas_outer_join_child()) {
      if (!first) sb.append(", ");
      sb.append("has_outer_join_child:");
      sb.append(this.has_outer_join_child);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (window != null) {
      window.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNormalAnalyticNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalAnalyticNodeStandardScheme getScheme() {
      return new TNormalAnalyticNodeStandardScheme();
    }
  }

  private static class TNormalAnalyticNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TNormalAnalyticNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TNormalAnalyticNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITION_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                struct.partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list264.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem265;
                for (int _i266 = 0; _i266 < _list264.size; ++_i266)
                {
                  _elem265 = iprot.readBinary();
                  struct.partition_exprs.add(_elem265);
                }
                iprot.readListEnd();
              }
              struct.setPartition_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_BY_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list267 = iprot.readListBegin();
                struct.order_by_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list267.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem268;
                for (int _i269 = 0; _i269 < _list267.size; ++_i269)
                {
                  _elem268 = iprot.readBinary();
                  struct.order_by_exprs.add(_elem268);
                }
                iprot.readListEnd();
              }
              struct.setOrder_by_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ANALYTIC_FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list270 = iprot.readListBegin();
                struct.analytic_functions = new java.util.ArrayList<java.nio.ByteBuffer>(_list270.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem271;
                for (int _i272 = 0; _i272 < _list270.size; ++_i272)
                {
                  _elem271 = iprot.readBinary();
                  struct.analytic_functions.add(_elem271);
                }
                iprot.readListEnd();
              }
              struct.setAnalytic_functionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WINDOW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.window = new io.datafibre.fibre.thrift.TAnalyticWindow();
              struct.window.read(iprot);
              struct.setWindowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INTERMEDIATE_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.intermediate_tuple_id = iprot.readI32();
              struct.setIntermediate_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OUTPUT_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.output_tuple_id = iprot.readI32();
              struct.setOutput_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BUFFERED_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.buffered_tuple_id = iprot.readI32();
              struct.setBuffered_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARTITION_BY_EQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partition_by_eq = iprot.readBinary();
              struct.setPartition_by_eqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORDER_BY_EQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.order_by_eq = iprot.readBinary();
              struct.setOrder_by_eqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HAS_OUTER_JOIN_CHILD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_outer_join_child = iprot.readBool();
              struct.setHas_outer_join_childIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TNormalAnalyticNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partition_exprs != null) {
        if (struct.isSetPartition_exprs()) {
          oprot.writeFieldBegin(PARTITION_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.partition_exprs.size()));
            for (java.nio.ByteBuffer _iter273 : struct.partition_exprs)
            {
              oprot.writeBinary(_iter273);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.order_by_exprs != null) {
        if (struct.isSetOrder_by_exprs()) {
          oprot.writeFieldBegin(ORDER_BY_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.order_by_exprs.size()));
            for (java.nio.ByteBuffer _iter274 : struct.order_by_exprs)
            {
              oprot.writeBinary(_iter274);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.analytic_functions != null) {
        if (struct.isSetAnalytic_functions()) {
          oprot.writeFieldBegin(ANALYTIC_FUNCTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.analytic_functions.size()));
            for (java.nio.ByteBuffer _iter275 : struct.analytic_functions)
            {
              oprot.writeBinary(_iter275);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.window != null) {
        if (struct.isSetWindow()) {
          oprot.writeFieldBegin(WINDOW_FIELD_DESC);
          struct.window.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIntermediate_tuple_id()) {
        oprot.writeFieldBegin(INTERMEDIATE_TUPLE_ID_FIELD_DESC);
        oprot.writeI32(struct.intermediate_tuple_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOutput_tuple_id()) {
        oprot.writeFieldBegin(OUTPUT_TUPLE_ID_FIELD_DESC);
        oprot.writeI32(struct.output_tuple_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBuffered_tuple_id()) {
        oprot.writeFieldBegin(BUFFERED_TUPLE_ID_FIELD_DESC);
        oprot.writeI32(struct.buffered_tuple_id);
        oprot.writeFieldEnd();
      }
      if (struct.partition_by_eq != null) {
        if (struct.isSetPartition_by_eq()) {
          oprot.writeFieldBegin(PARTITION_BY_EQ_FIELD_DESC);
          oprot.writeBinary(struct.partition_by_eq);
          oprot.writeFieldEnd();
        }
      }
      if (struct.order_by_eq != null) {
        if (struct.isSetOrder_by_eq()) {
          oprot.writeFieldBegin(ORDER_BY_EQ_FIELD_DESC);
          oprot.writeBinary(struct.order_by_eq);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHas_outer_join_child()) {
        oprot.writeFieldBegin(HAS_OUTER_JOIN_CHILD_FIELD_DESC);
        oprot.writeBool(struct.has_outer_join_child);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNormalAnalyticNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalAnalyticNodeTupleScheme getScheme() {
      return new TNormalAnalyticNodeTupleScheme();
    }
  }

  private static class TNormalAnalyticNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TNormalAnalyticNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNormalAnalyticNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPartition_exprs()) {
        optionals.set(0);
      }
      if (struct.isSetOrder_by_exprs()) {
        optionals.set(1);
      }
      if (struct.isSetAnalytic_functions()) {
        optionals.set(2);
      }
      if (struct.isSetWindow()) {
        optionals.set(3);
      }
      if (struct.isSetIntermediate_tuple_id()) {
        optionals.set(4);
      }
      if (struct.isSetOutput_tuple_id()) {
        optionals.set(5);
      }
      if (struct.isSetBuffered_tuple_id()) {
        optionals.set(6);
      }
      if (struct.isSetPartition_by_eq()) {
        optionals.set(7);
      }
      if (struct.isSetOrder_by_eq()) {
        optionals.set(8);
      }
      if (struct.isSetHas_outer_join_child()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPartition_exprs()) {
        {
          oprot.writeI32(struct.partition_exprs.size());
          for (java.nio.ByteBuffer _iter276 : struct.partition_exprs)
          {
            oprot.writeBinary(_iter276);
          }
        }
      }
      if (struct.isSetOrder_by_exprs()) {
        {
          oprot.writeI32(struct.order_by_exprs.size());
          for (java.nio.ByteBuffer _iter277 : struct.order_by_exprs)
          {
            oprot.writeBinary(_iter277);
          }
        }
      }
      if (struct.isSetAnalytic_functions()) {
        {
          oprot.writeI32(struct.analytic_functions.size());
          for (java.nio.ByteBuffer _iter278 : struct.analytic_functions)
          {
            oprot.writeBinary(_iter278);
          }
        }
      }
      if (struct.isSetWindow()) {
        struct.window.write(oprot);
      }
      if (struct.isSetIntermediate_tuple_id()) {
        oprot.writeI32(struct.intermediate_tuple_id);
      }
      if (struct.isSetOutput_tuple_id()) {
        oprot.writeI32(struct.output_tuple_id);
      }
      if (struct.isSetBuffered_tuple_id()) {
        oprot.writeI32(struct.buffered_tuple_id);
      }
      if (struct.isSetPartition_by_eq()) {
        oprot.writeBinary(struct.partition_by_eq);
      }
      if (struct.isSetOrder_by_eq()) {
        oprot.writeBinary(struct.order_by_eq);
      }
      if (struct.isSetHas_outer_join_child()) {
        oprot.writeBool(struct.has_outer_join_child);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNormalAnalyticNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list279 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list279.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem280;
          for (int _i281 = 0; _i281 < _list279.size; ++_i281)
          {
            _elem280 = iprot.readBinary();
            struct.partition_exprs.add(_elem280);
          }
        }
        struct.setPartition_exprsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list282 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.order_by_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list282.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem283;
          for (int _i284 = 0; _i284 < _list282.size; ++_i284)
          {
            _elem283 = iprot.readBinary();
            struct.order_by_exprs.add(_elem283);
          }
        }
        struct.setOrder_by_exprsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list285 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.analytic_functions = new java.util.ArrayList<java.nio.ByteBuffer>(_list285.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem286;
          for (int _i287 = 0; _i287 < _list285.size; ++_i287)
          {
            _elem286 = iprot.readBinary();
            struct.analytic_functions.add(_elem286);
          }
        }
        struct.setAnalytic_functionsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.window = new io.datafibre.fibre.thrift.TAnalyticWindow();
        struct.window.read(iprot);
        struct.setWindowIsSet(true);
      }
      if (incoming.get(4)) {
        struct.intermediate_tuple_id = iprot.readI32();
        struct.setIntermediate_tuple_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.output_tuple_id = iprot.readI32();
        struct.setOutput_tuple_idIsSet(true);
      }
      if (incoming.get(6)) {
        struct.buffered_tuple_id = iprot.readI32();
        struct.setBuffered_tuple_idIsSet(true);
      }
      if (incoming.get(7)) {
        struct.partition_by_eq = iprot.readBinary();
        struct.setPartition_by_eqIsSet(true);
      }
      if (incoming.get(8)) {
        struct.order_by_eq = iprot.readBinary();
        struct.setOrder_by_eqIsSet(true);
      }
      if (incoming.get(9)) {
        struct.has_outer_join_child = iprot.readBool();
        struct.setHas_outer_join_childIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

