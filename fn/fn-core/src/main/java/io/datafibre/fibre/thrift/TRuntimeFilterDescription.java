/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TRuntimeFilterDescription implements org.apache.thrift.TBase<TRuntimeFilterDescription, TRuntimeFilterDescription._Fields>, java.io.Serializable, Cloneable, Comparable<TRuntimeFilterDescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRuntimeFilterDescription");

  private static final org.apache.thrift.protocol.TField FILTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BUILD_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("build_expr", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField EXPR_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("expr_order", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PLAN_NODE_ID_TO_TARGET_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("plan_node_id_to_target_expr", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField HAS_REMOTE_TARGETS_FIELD_DESC = new org.apache.thrift.protocol.TField("has_remote_targets", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField BLOOM_FILTER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("bloom_filter_size", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_MERGE_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_merge_nodes", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField BUILD_JOIN_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("build_join_mode", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SENDER_FINST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sender_finst_id", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField BUILD_PLAN_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("build_plan_node_id", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField BROADCAST_GRF_SENDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("broadcast_grf_senders", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField BROADCAST_GRF_DESTINATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("broadcast_grf_destinations", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField BUCKETSEQ_TO_INSTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketseq_to_instance", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField PLAN_NODE_ID_TO_PARTITION_BY_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("plan_node_id_to_partition_by_exprs", org.apache.thrift.protocol.TType.MAP, (short)15);
  private static final org.apache.thrift.protocol.TField FILTER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_type", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField LAYOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("layout", org.apache.thrift.protocol.TType.STRUCT, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRuntimeFilterDescriptionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRuntimeFilterDescriptionTupleSchemeFactory();

  public int filter_id; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr build_expr; // optional
  public int expr_order; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> plan_node_id_to_target_expr; // optional
  public boolean has_remote_targets; // optional
  public long bloom_filter_size; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TNetworkAddress> runtime_filter_merge_nodes; // optional
  /**
   * 
   * @see TRuntimeFilterBuildJoinMode
   */
  public @org.apache.thrift.annotation.Nullable TRuntimeFilterBuildJoinMode build_join_mode; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId sender_finst_id; // optional
  public int build_plan_node_id; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TUniqueId> broadcast_grf_senders; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TRuntimeFilterDestination> broadcast_grf_destinations; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> bucketseq_to_instance; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>> plan_node_id_to_partition_by_exprs; // optional
  /**
   * 
   * @see TRuntimeFilterBuildType
   */
  public @org.apache.thrift.annotation.Nullable TRuntimeFilterBuildType filter_type; // optional
  public @org.apache.thrift.annotation.Nullable TRuntimeFilterLayout layout; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILTER_ID((short)1, "filter_id"),
    BUILD_EXPR((short)2, "build_expr"),
    EXPR_ORDER((short)3, "expr_order"),
    PLAN_NODE_ID_TO_TARGET_EXPR((short)4, "plan_node_id_to_target_expr"),
    HAS_REMOTE_TARGETS((short)6, "has_remote_targets"),
    BLOOM_FILTER_SIZE((short)7, "bloom_filter_size"),
    RUNTIME_FILTER_MERGE_NODES((short)8, "runtime_filter_merge_nodes"),
    /**
     * 
     * @see TRuntimeFilterBuildJoinMode
     */
    BUILD_JOIN_MODE((short)9, "build_join_mode"),
    SENDER_FINST_ID((short)10, "sender_finst_id"),
    BUILD_PLAN_NODE_ID((short)11, "build_plan_node_id"),
    BROADCAST_GRF_SENDERS((short)12, "broadcast_grf_senders"),
    BROADCAST_GRF_DESTINATIONS((short)13, "broadcast_grf_destinations"),
    BUCKETSEQ_TO_INSTANCE((short)14, "bucketseq_to_instance"),
    PLAN_NODE_ID_TO_PARTITION_BY_EXPRS((short)15, "plan_node_id_to_partition_by_exprs"),
    /**
     * 
     * @see TRuntimeFilterBuildType
     */
    FILTER_TYPE((short)16, "filter_type"),
    LAYOUT((short)17, "layout");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILTER_ID
          return FILTER_ID;
        case 2: // BUILD_EXPR
          return BUILD_EXPR;
        case 3: // EXPR_ORDER
          return EXPR_ORDER;
        case 4: // PLAN_NODE_ID_TO_TARGET_EXPR
          return PLAN_NODE_ID_TO_TARGET_EXPR;
        case 6: // HAS_REMOTE_TARGETS
          return HAS_REMOTE_TARGETS;
        case 7: // BLOOM_FILTER_SIZE
          return BLOOM_FILTER_SIZE;
        case 8: // RUNTIME_FILTER_MERGE_NODES
          return RUNTIME_FILTER_MERGE_NODES;
        case 9: // BUILD_JOIN_MODE
          return BUILD_JOIN_MODE;
        case 10: // SENDER_FINST_ID
          return SENDER_FINST_ID;
        case 11: // BUILD_PLAN_NODE_ID
          return BUILD_PLAN_NODE_ID;
        case 12: // BROADCAST_GRF_SENDERS
          return BROADCAST_GRF_SENDERS;
        case 13: // BROADCAST_GRF_DESTINATIONS
          return BROADCAST_GRF_DESTINATIONS;
        case 14: // BUCKETSEQ_TO_INSTANCE
          return BUCKETSEQ_TO_INSTANCE;
        case 15: // PLAN_NODE_ID_TO_PARTITION_BY_EXPRS
          return PLAN_NODE_ID_TO_PARTITION_BY_EXPRS;
        case 16: // FILTER_TYPE
          return FILTER_TYPE;
        case 17: // LAYOUT
          return LAYOUT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FILTER_ID_ISSET_ID = 0;
  private static final int __EXPR_ORDER_ISSET_ID = 1;
  private static final int __HAS_REMOTE_TARGETS_ISSET_ID = 2;
  private static final int __BLOOM_FILTER_SIZE_ISSET_ID = 3;
  private static final int __BUILD_PLAN_NODE_ID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FILTER_ID,_Fields.BUILD_EXPR,_Fields.EXPR_ORDER,_Fields.PLAN_NODE_ID_TO_TARGET_EXPR,_Fields.HAS_REMOTE_TARGETS,_Fields.BLOOM_FILTER_SIZE,_Fields.RUNTIME_FILTER_MERGE_NODES,_Fields.BUILD_JOIN_MODE,_Fields.SENDER_FINST_ID,_Fields.BUILD_PLAN_NODE_ID,_Fields.BROADCAST_GRF_SENDERS,_Fields.BROADCAST_GRF_DESTINATIONS,_Fields.BUCKETSEQ_TO_INSTANCE,_Fields.PLAN_NODE_ID_TO_PARTITION_BY_EXPRS,_Fields.FILTER_TYPE,_Fields.LAYOUT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILTER_ID, new org.apache.thrift.meta_data.FieldMetaData("filter_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUILD_EXPR, new org.apache.thrift.meta_data.FieldMetaData("build_expr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class)));
    tmpMap.put(_Fields.EXPR_ORDER, new org.apache.thrift.meta_data.FieldMetaData("expr_order", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_NODE_ID_TO_TARGET_EXPR, new org.apache.thrift.meta_data.FieldMetaData("plan_node_id_to_target_expr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class))));
    tmpMap.put(_Fields.HAS_REMOTE_TARGETS, new org.apache.thrift.meta_data.FieldMetaData("has_remote_targets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BLOOM_FILTER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("bloom_filter_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUNTIME_FILTER_MERGE_NODES, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_merge_nodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TNetworkAddress.class))));
    tmpMap.put(_Fields.BUILD_JOIN_MODE, new org.apache.thrift.meta_data.FieldMetaData("build_join_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TRuntimeFilterBuildJoinMode.class)));
    tmpMap.put(_Fields.SENDER_FINST_ID, new org.apache.thrift.meta_data.FieldMetaData("sender_finst_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.BUILD_PLAN_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("build_plan_node_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TPlanNodeId")));
    tmpMap.put(_Fields.BROADCAST_GRF_SENDERS, new org.apache.thrift.meta_data.FieldMetaData("broadcast_grf_senders", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TUniqueId.class))));
    tmpMap.put(_Fields.BROADCAST_GRF_DESTINATIONS, new org.apache.thrift.meta_data.FieldMetaData("broadcast_grf_destinations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRuntimeFilterDestination.class))));
    tmpMap.put(_Fields.BUCKETSEQ_TO_INSTANCE, new org.apache.thrift.meta_data.FieldMetaData("bucketseq_to_instance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PLAN_NODE_ID_TO_PARTITION_BY_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("plan_node_id_to_partition_by_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class)))));
    tmpMap.put(_Fields.FILTER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("filter_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TRuntimeFilterBuildType.class)));
    tmpMap.put(_Fields.LAYOUT, new org.apache.thrift.meta_data.FieldMetaData("layout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRuntimeFilterLayout.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRuntimeFilterDescription.class, metaDataMap);
  }

  public TRuntimeFilterDescription() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRuntimeFilterDescription(TRuntimeFilterDescription other) {
    __isset_bitfield = other.__isset_bitfield;
    this.filter_id = other.filter_id;
    if (other.isSetBuild_expr()) {
      this.build_expr = new com.starrocks.thrift.TExpr(other.build_expr);
    }
    this.expr_order = other.expr_order;
    if (other.isSetPlan_node_id_to_target_expr()) {
      java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> __this__plan_node_id_to_target_expr = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>(other.plan_node_id_to_target_expr.size());
      for (java.util.Map.Entry<java.lang.Integer, com.starrocks.thrift.TExpr> other_element : other.plan_node_id_to_target_expr.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        com.starrocks.thrift.TExpr other_element_value = other_element.getValue();

        java.lang.Integer __this__plan_node_id_to_target_expr_copy_key = other_element_key;

        com.starrocks.thrift.TExpr __this__plan_node_id_to_target_expr_copy_value = new com.starrocks.thrift.TExpr(other_element_value);

        __this__plan_node_id_to_target_expr.put(__this__plan_node_id_to_target_expr_copy_key, __this__plan_node_id_to_target_expr_copy_value);
      }
      this.plan_node_id_to_target_expr = __this__plan_node_id_to_target_expr;
    }
    this.has_remote_targets = other.has_remote_targets;
    this.bloom_filter_size = other.bloom_filter_size;
    if (other.isSetRuntime_filter_merge_nodes()) {
      java.util.List<com.starrocks.thrift.TNetworkAddress> __this__runtime_filter_merge_nodes = new java.util.ArrayList<com.starrocks.thrift.TNetworkAddress>(other.runtime_filter_merge_nodes.size());
      for (com.starrocks.thrift.TNetworkAddress other_element : other.runtime_filter_merge_nodes) {
        __this__runtime_filter_merge_nodes.add(new com.starrocks.thrift.TNetworkAddress(other_element));
      }
      this.runtime_filter_merge_nodes = __this__runtime_filter_merge_nodes;
    }
    if (other.isSetBuild_join_mode()) {
      this.build_join_mode = other.build_join_mode;
    }
    if (other.isSetSender_finst_id()) {
      this.sender_finst_id = new com.starrocks.thrift.TUniqueId(other.sender_finst_id);
    }
    this.build_plan_node_id = other.build_plan_node_id;
    if (other.isSetBroadcast_grf_senders()) {
      java.util.List<com.starrocks.thrift.TUniqueId> __this__broadcast_grf_senders = new java.util.ArrayList<com.starrocks.thrift.TUniqueId>(other.broadcast_grf_senders.size());
      for (com.starrocks.thrift.TUniqueId other_element : other.broadcast_grf_senders) {
        __this__broadcast_grf_senders.add(new com.starrocks.thrift.TUniqueId(other_element));
      }
      this.broadcast_grf_senders = __this__broadcast_grf_senders;
    }
    if (other.isSetBroadcast_grf_destinations()) {
      java.util.List<TRuntimeFilterDestination> __this__broadcast_grf_destinations = new java.util.ArrayList<TRuntimeFilterDestination>(other.broadcast_grf_destinations.size());
      for (TRuntimeFilterDestination other_element : other.broadcast_grf_destinations) {
        __this__broadcast_grf_destinations.add(new TRuntimeFilterDestination(other_element));
      }
      this.broadcast_grf_destinations = __this__broadcast_grf_destinations;
    }
    if (other.isSetBucketseq_to_instance()) {
      java.util.List<java.lang.Integer> __this__bucketseq_to_instance = new java.util.ArrayList<java.lang.Integer>(other.bucketseq_to_instance);
      this.bucketseq_to_instance = __this__bucketseq_to_instance;
    }
    if (other.isSetPlan_node_id_to_partition_by_exprs()) {
      java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>> __this__plan_node_id_to_partition_by_exprs = new java.util.HashMap<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>>(other.plan_node_id_to_partition_by_exprs.size());
      for (java.util.Map.Entry<java.lang.Integer, java.util.List<com.starrocks.thrift.TExpr>> other_element : other.plan_node_id_to_partition_by_exprs.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.util.List<com.starrocks.thrift.TExpr> other_element_value = other_element.getValue();

        java.lang.Integer __this__plan_node_id_to_partition_by_exprs_copy_key = other_element_key;

        java.util.List<com.starrocks.thrift.TExpr> __this__plan_node_id_to_partition_by_exprs_copy_value = new java.util.ArrayList<com.starrocks.thrift.TExpr>(other_element_value.size());
        for (com.starrocks.thrift.TExpr other_element_value_element : other_element_value) {
          __this__plan_node_id_to_partition_by_exprs_copy_value.add(new com.starrocks.thrift.TExpr(other_element_value_element));
        }

        __this__plan_node_id_to_partition_by_exprs.put(__this__plan_node_id_to_partition_by_exprs_copy_key, __this__plan_node_id_to_partition_by_exprs_copy_value);
      }
      this.plan_node_id_to_partition_by_exprs = __this__plan_node_id_to_partition_by_exprs;
    }
    if (other.isSetFilter_type()) {
      this.filter_type = other.filter_type;
    }
    if (other.isSetLayout()) {
      this.layout = new TRuntimeFilterLayout(other.layout);
    }
  }

  @Override
  public TRuntimeFilterDescription deepCopy() {
    return new TRuntimeFilterDescription(this);
  }

  @Override
  public void clear() {
    setFilter_idIsSet(false);
    this.filter_id = 0;
    this.build_expr = null;
    setExpr_orderIsSet(false);
    this.expr_order = 0;
    this.plan_node_id_to_target_expr = null;
    setHas_remote_targetsIsSet(false);
    this.has_remote_targets = false;
    setBloom_filter_sizeIsSet(false);
    this.bloom_filter_size = 0;
    this.runtime_filter_merge_nodes = null;
    this.build_join_mode = null;
    this.sender_finst_id = null;
    setBuild_plan_node_idIsSet(false);
    this.build_plan_node_id = 0;
    this.broadcast_grf_senders = null;
    this.broadcast_grf_destinations = null;
    this.bucketseq_to_instance = null;
    this.plan_node_id_to_partition_by_exprs = null;
    this.filter_type = null;
    this.layout = null;
  }

  public int getFilter_id() {
    return this.filter_id;
  }

  public TRuntimeFilterDescription setFilter_id(int filter_id) {
    this.filter_id = filter_id;
    setFilter_idIsSet(true);
    return this;
  }

  public void unsetFilter_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILTER_ID_ISSET_ID);
  }

  /** Returns true if field filter_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILTER_ID_ISSET_ID);
  }

  public void setFilter_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILTER_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TExpr getBuild_expr() {
    return this.build_expr;
  }

  public TRuntimeFilterDescription setBuild_expr(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr build_expr) {
    this.build_expr = build_expr;
    return this;
  }

  public void unsetBuild_expr() {
    this.build_expr = null;
  }

  /** Returns true if field build_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetBuild_expr() {
    return this.build_expr != null;
  }

  public void setBuild_exprIsSet(boolean value) {
    if (!value) {
      this.build_expr = null;
    }
  }

  public int getExpr_order() {
    return this.expr_order;
  }

  public TRuntimeFilterDescription setExpr_order(int expr_order) {
    this.expr_order = expr_order;
    setExpr_orderIsSet(true);
    return this;
  }

  public void unsetExpr_order() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPR_ORDER_ISSET_ID);
  }

  /** Returns true if field expr_order is set (has been assigned a value) and false otherwise */
  public boolean isSetExpr_order() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPR_ORDER_ISSET_ID);
  }

  public void setExpr_orderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPR_ORDER_ISSET_ID, value);
  }

  public int getPlan_node_id_to_target_exprSize() {
    return (this.plan_node_id_to_target_expr == null) ? 0 : this.plan_node_id_to_target_expr.size();
  }

  public void putToPlan_node_id_to_target_expr(int key, com.starrocks.thrift.TExpr val) {
    if (this.plan_node_id_to_target_expr == null) {
      this.plan_node_id_to_target_expr = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>();
    }
    this.plan_node_id_to_target_expr.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> getPlan_node_id_to_target_expr() {
    return this.plan_node_id_to_target_expr;
  }

  public TRuntimeFilterDescription setPlan_node_id_to_target_expr(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> plan_node_id_to_target_expr) {
    this.plan_node_id_to_target_expr = plan_node_id_to_target_expr;
    return this;
  }

  public void unsetPlan_node_id_to_target_expr() {
    this.plan_node_id_to_target_expr = null;
  }

  /** Returns true if field plan_node_id_to_target_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetPlan_node_id_to_target_expr() {
    return this.plan_node_id_to_target_expr != null;
  }

  public void setPlan_node_id_to_target_exprIsSet(boolean value) {
    if (!value) {
      this.plan_node_id_to_target_expr = null;
    }
  }

  public boolean isHas_remote_targets() {
    return this.has_remote_targets;
  }

  public TRuntimeFilterDescription setHas_remote_targets(boolean has_remote_targets) {
    this.has_remote_targets = has_remote_targets;
    setHas_remote_targetsIsSet(true);
    return this;
  }

  public void unsetHas_remote_targets() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HAS_REMOTE_TARGETS_ISSET_ID);
  }

  /** Returns true if field has_remote_targets is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_remote_targets() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HAS_REMOTE_TARGETS_ISSET_ID);
  }

  public void setHas_remote_targetsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HAS_REMOTE_TARGETS_ISSET_ID, value);
  }

  public long getBloom_filter_size() {
    return this.bloom_filter_size;
  }

  public TRuntimeFilterDescription setBloom_filter_size(long bloom_filter_size) {
    this.bloom_filter_size = bloom_filter_size;
    setBloom_filter_sizeIsSet(true);
    return this;
  }

  public void unsetBloom_filter_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOOM_FILTER_SIZE_ISSET_ID);
  }

  /** Returns true if field bloom_filter_size is set (has been assigned a value) and false otherwise */
  public boolean isSetBloom_filter_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOOM_FILTER_SIZE_ISSET_ID);
  }

  public void setBloom_filter_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOOM_FILTER_SIZE_ISSET_ID, value);
  }

  public int getRuntime_filter_merge_nodesSize() {
    return (this.runtime_filter_merge_nodes == null) ? 0 : this.runtime_filter_merge_nodes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TNetworkAddress> getRuntime_filter_merge_nodesIterator() {
    return (this.runtime_filter_merge_nodes == null) ? null : this.runtime_filter_merge_nodes.iterator();
  }

  public void addToRuntime_filter_merge_nodes(com.starrocks.thrift.TNetworkAddress elem) {
    if (this.runtime_filter_merge_nodes == null) {
      this.runtime_filter_merge_nodes = new java.util.ArrayList<com.starrocks.thrift.TNetworkAddress>();
    }
    this.runtime_filter_merge_nodes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TNetworkAddress> getRuntime_filter_merge_nodes() {
    return this.runtime_filter_merge_nodes;
  }

  public TRuntimeFilterDescription setRuntime_filter_merge_nodes(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TNetworkAddress> runtime_filter_merge_nodes) {
    this.runtime_filter_merge_nodes = runtime_filter_merge_nodes;
    return this;
  }

  public void unsetRuntime_filter_merge_nodes() {
    this.runtime_filter_merge_nodes = null;
  }

  /** Returns true if field runtime_filter_merge_nodes is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_filter_merge_nodes() {
    return this.runtime_filter_merge_nodes != null;
  }

  public void setRuntime_filter_merge_nodesIsSet(boolean value) {
    if (!value) {
      this.runtime_filter_merge_nodes = null;
    }
  }

  /**
   * 
   * @see TRuntimeFilterBuildJoinMode
   */
  @org.apache.thrift.annotation.Nullable
  public TRuntimeFilterBuildJoinMode getBuild_join_mode() {
    return this.build_join_mode;
  }

  /**
   * 
   * @see TRuntimeFilterBuildJoinMode
   */
  public TRuntimeFilterDescription setBuild_join_mode(@org.apache.thrift.annotation.Nullable TRuntimeFilterBuildJoinMode build_join_mode) {
    this.build_join_mode = build_join_mode;
    return this;
  }

  public void unsetBuild_join_mode() {
    this.build_join_mode = null;
  }

  /** Returns true if field build_join_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetBuild_join_mode() {
    return this.build_join_mode != null;
  }

  public void setBuild_join_modeIsSet(boolean value) {
    if (!value) {
      this.build_join_mode = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TUniqueId getSender_finst_id() {
    return this.sender_finst_id;
  }

  public TRuntimeFilterDescription setSender_finst_id(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId sender_finst_id) {
    this.sender_finst_id = sender_finst_id;
    return this;
  }

  public void unsetSender_finst_id() {
    this.sender_finst_id = null;
  }

  /** Returns true if field sender_finst_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSender_finst_id() {
    return this.sender_finst_id != null;
  }

  public void setSender_finst_idIsSet(boolean value) {
    if (!value) {
      this.sender_finst_id = null;
    }
  }

  public int getBuild_plan_node_id() {
    return this.build_plan_node_id;
  }

  public TRuntimeFilterDescription setBuild_plan_node_id(int build_plan_node_id) {
    this.build_plan_node_id = build_plan_node_id;
    setBuild_plan_node_idIsSet(true);
    return this;
  }

  public void unsetBuild_plan_node_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUILD_PLAN_NODE_ID_ISSET_ID);
  }

  /** Returns true if field build_plan_node_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBuild_plan_node_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUILD_PLAN_NODE_ID_ISSET_ID);
  }

  public void setBuild_plan_node_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUILD_PLAN_NODE_ID_ISSET_ID, value);
  }

  public int getBroadcast_grf_sendersSize() {
    return (this.broadcast_grf_senders == null) ? 0 : this.broadcast_grf_senders.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TUniqueId> getBroadcast_grf_sendersIterator() {
    return (this.broadcast_grf_senders == null) ? null : this.broadcast_grf_senders.iterator();
  }

  public void addToBroadcast_grf_senders(com.starrocks.thrift.TUniqueId elem) {
    if (this.broadcast_grf_senders == null) {
      this.broadcast_grf_senders = new java.util.ArrayList<com.starrocks.thrift.TUniqueId>();
    }
    this.broadcast_grf_senders.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TUniqueId> getBroadcast_grf_senders() {
    return this.broadcast_grf_senders;
  }

  public TRuntimeFilterDescription setBroadcast_grf_senders(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TUniqueId> broadcast_grf_senders) {
    this.broadcast_grf_senders = broadcast_grf_senders;
    return this;
  }

  public void unsetBroadcast_grf_senders() {
    this.broadcast_grf_senders = null;
  }

  /** Returns true if field broadcast_grf_senders is set (has been assigned a value) and false otherwise */
  public boolean isSetBroadcast_grf_senders() {
    return this.broadcast_grf_senders != null;
  }

  public void setBroadcast_grf_sendersIsSet(boolean value) {
    if (!value) {
      this.broadcast_grf_senders = null;
    }
  }

  public int getBroadcast_grf_destinationsSize() {
    return (this.broadcast_grf_destinations == null) ? 0 : this.broadcast_grf_destinations.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TRuntimeFilterDestination> getBroadcast_grf_destinationsIterator() {
    return (this.broadcast_grf_destinations == null) ? null : this.broadcast_grf_destinations.iterator();
  }

  public void addToBroadcast_grf_destinations(TRuntimeFilterDestination elem) {
    if (this.broadcast_grf_destinations == null) {
      this.broadcast_grf_destinations = new java.util.ArrayList<TRuntimeFilterDestination>();
    }
    this.broadcast_grf_destinations.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TRuntimeFilterDestination> getBroadcast_grf_destinations() {
    return this.broadcast_grf_destinations;
  }

  public TRuntimeFilterDescription setBroadcast_grf_destinations(@org.apache.thrift.annotation.Nullable java.util.List<TRuntimeFilterDestination> broadcast_grf_destinations) {
    this.broadcast_grf_destinations = broadcast_grf_destinations;
    return this;
  }

  public void unsetBroadcast_grf_destinations() {
    this.broadcast_grf_destinations = null;
  }

  /** Returns true if field broadcast_grf_destinations is set (has been assigned a value) and false otherwise */
  public boolean isSetBroadcast_grf_destinations() {
    return this.broadcast_grf_destinations != null;
  }

  public void setBroadcast_grf_destinationsIsSet(boolean value) {
    if (!value) {
      this.broadcast_grf_destinations = null;
    }
  }

  public int getBucketseq_to_instanceSize() {
    return (this.bucketseq_to_instance == null) ? 0 : this.bucketseq_to_instance.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getBucketseq_to_instanceIterator() {
    return (this.bucketseq_to_instance == null) ? null : this.bucketseq_to_instance.iterator();
  }

  public void addToBucketseq_to_instance(int elem) {
    if (this.bucketseq_to_instance == null) {
      this.bucketseq_to_instance = new java.util.ArrayList<java.lang.Integer>();
    }
    this.bucketseq_to_instance.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getBucketseq_to_instance() {
    return this.bucketseq_to_instance;
  }

  public TRuntimeFilterDescription setBucketseq_to_instance(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> bucketseq_to_instance) {
    this.bucketseq_to_instance = bucketseq_to_instance;
    return this;
  }

  public void unsetBucketseq_to_instance() {
    this.bucketseq_to_instance = null;
  }

  /** Returns true if field bucketseq_to_instance is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketseq_to_instance() {
    return this.bucketseq_to_instance != null;
  }

  public void setBucketseq_to_instanceIsSet(boolean value) {
    if (!value) {
      this.bucketseq_to_instance = null;
    }
  }

  public int getPlan_node_id_to_partition_by_exprsSize() {
    return (this.plan_node_id_to_partition_by_exprs == null) ? 0 : this.plan_node_id_to_partition_by_exprs.size();
  }

  public void putToPlan_node_id_to_partition_by_exprs(int key, java.util.List<com.starrocks.thrift.TExpr> val) {
    if (this.plan_node_id_to_partition_by_exprs == null) {
      this.plan_node_id_to_partition_by_exprs = new java.util.HashMap<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>>();
    }
    this.plan_node_id_to_partition_by_exprs.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>> getPlan_node_id_to_partition_by_exprs() {
    return this.plan_node_id_to_partition_by_exprs;
  }

  public TRuntimeFilterDescription setPlan_node_id_to_partition_by_exprs(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>> plan_node_id_to_partition_by_exprs) {
    this.plan_node_id_to_partition_by_exprs = plan_node_id_to_partition_by_exprs;
    return this;
  }

  public void unsetPlan_node_id_to_partition_by_exprs() {
    this.plan_node_id_to_partition_by_exprs = null;
  }

  /** Returns true if field plan_node_id_to_partition_by_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetPlan_node_id_to_partition_by_exprs() {
    return this.plan_node_id_to_partition_by_exprs != null;
  }

  public void setPlan_node_id_to_partition_by_exprsIsSet(boolean value) {
    if (!value) {
      this.plan_node_id_to_partition_by_exprs = null;
    }
  }

  /**
   * 
   * @see TRuntimeFilterBuildType
   */
  @org.apache.thrift.annotation.Nullable
  public TRuntimeFilterBuildType getFilter_type() {
    return this.filter_type;
  }

  /**
   * 
   * @see TRuntimeFilterBuildType
   */
  public TRuntimeFilterDescription setFilter_type(@org.apache.thrift.annotation.Nullable TRuntimeFilterBuildType filter_type) {
    this.filter_type = filter_type;
    return this;
  }

  public void unsetFilter_type() {
    this.filter_type = null;
  }

  /** Returns true if field filter_type is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_type() {
    return this.filter_type != null;
  }

  public void setFilter_typeIsSet(boolean value) {
    if (!value) {
      this.filter_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TRuntimeFilterLayout getLayout() {
    return this.layout;
  }

  public TRuntimeFilterDescription setLayout(@org.apache.thrift.annotation.Nullable TRuntimeFilterLayout layout) {
    this.layout = layout;
    return this;
  }

  public void unsetLayout() {
    this.layout = null;
  }

  /** Returns true if field layout is set (has been assigned a value) and false otherwise */
  public boolean isSetLayout() {
    return this.layout != null;
  }

  public void setLayoutIsSet(boolean value) {
    if (!value) {
      this.layout = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FILTER_ID:
      if (value == null) {
        unsetFilter_id();
      } else {
        setFilter_id((java.lang.Integer)value);
      }
      break;

    case BUILD_EXPR:
      if (value == null) {
        unsetBuild_expr();
      } else {
        setBuild_expr((com.starrocks.thrift.TExpr)value);
      }
      break;

    case EXPR_ORDER:
      if (value == null) {
        unsetExpr_order();
      } else {
        setExpr_order((java.lang.Integer)value);
      }
      break;

    case PLAN_NODE_ID_TO_TARGET_EXPR:
      if (value == null) {
        unsetPlan_node_id_to_target_expr();
      } else {
        setPlan_node_id_to_target_expr((java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr>)value);
      }
      break;

    case HAS_REMOTE_TARGETS:
      if (value == null) {
        unsetHas_remote_targets();
      } else {
        setHas_remote_targets((java.lang.Boolean)value);
      }
      break;

    case BLOOM_FILTER_SIZE:
      if (value == null) {
        unsetBloom_filter_size();
      } else {
        setBloom_filter_size((java.lang.Long)value);
      }
      break;

    case RUNTIME_FILTER_MERGE_NODES:
      if (value == null) {
        unsetRuntime_filter_merge_nodes();
      } else {
        setRuntime_filter_merge_nodes((java.util.List<com.starrocks.thrift.TNetworkAddress>)value);
      }
      break;

    case BUILD_JOIN_MODE:
      if (value == null) {
        unsetBuild_join_mode();
      } else {
        setBuild_join_mode((TRuntimeFilterBuildJoinMode)value);
      }
      break;

    case SENDER_FINST_ID:
      if (value == null) {
        unsetSender_finst_id();
      } else {
        setSender_finst_id((com.starrocks.thrift.TUniqueId)value);
      }
      break;

    case BUILD_PLAN_NODE_ID:
      if (value == null) {
        unsetBuild_plan_node_id();
      } else {
        setBuild_plan_node_id((java.lang.Integer)value);
      }
      break;

    case BROADCAST_GRF_SENDERS:
      if (value == null) {
        unsetBroadcast_grf_senders();
      } else {
        setBroadcast_grf_senders((java.util.List<com.starrocks.thrift.TUniqueId>)value);
      }
      break;

    case BROADCAST_GRF_DESTINATIONS:
      if (value == null) {
        unsetBroadcast_grf_destinations();
      } else {
        setBroadcast_grf_destinations((java.util.List<TRuntimeFilterDestination>)value);
      }
      break;

    case BUCKETSEQ_TO_INSTANCE:
      if (value == null) {
        unsetBucketseq_to_instance();
      } else {
        setBucketseq_to_instance((java.util.List<java.lang.Integer>)value);
      }
      break;

    case PLAN_NODE_ID_TO_PARTITION_BY_EXPRS:
      if (value == null) {
        unsetPlan_node_id_to_partition_by_exprs();
      } else {
        setPlan_node_id_to_partition_by_exprs((java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>>)value);
      }
      break;

    case FILTER_TYPE:
      if (value == null) {
        unsetFilter_type();
      } else {
        setFilter_type((TRuntimeFilterBuildType)value);
      }
      break;

    case LAYOUT:
      if (value == null) {
        unsetLayout();
      } else {
        setLayout((TRuntimeFilterLayout)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FILTER_ID:
      return getFilter_id();

    case BUILD_EXPR:
      return getBuild_expr();

    case EXPR_ORDER:
      return getExpr_order();

    case PLAN_NODE_ID_TO_TARGET_EXPR:
      return getPlan_node_id_to_target_expr();

    case HAS_REMOTE_TARGETS:
      return isHas_remote_targets();

    case BLOOM_FILTER_SIZE:
      return getBloom_filter_size();

    case RUNTIME_FILTER_MERGE_NODES:
      return getRuntime_filter_merge_nodes();

    case BUILD_JOIN_MODE:
      return getBuild_join_mode();

    case SENDER_FINST_ID:
      return getSender_finst_id();

    case BUILD_PLAN_NODE_ID:
      return getBuild_plan_node_id();

    case BROADCAST_GRF_SENDERS:
      return getBroadcast_grf_senders();

    case BROADCAST_GRF_DESTINATIONS:
      return getBroadcast_grf_destinations();

    case BUCKETSEQ_TO_INSTANCE:
      return getBucketseq_to_instance();

    case PLAN_NODE_ID_TO_PARTITION_BY_EXPRS:
      return getPlan_node_id_to_partition_by_exprs();

    case FILTER_TYPE:
      return getFilter_type();

    case LAYOUT:
      return getLayout();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FILTER_ID:
      return isSetFilter_id();
    case BUILD_EXPR:
      return isSetBuild_expr();
    case EXPR_ORDER:
      return isSetExpr_order();
    case PLAN_NODE_ID_TO_TARGET_EXPR:
      return isSetPlan_node_id_to_target_expr();
    case HAS_REMOTE_TARGETS:
      return isSetHas_remote_targets();
    case BLOOM_FILTER_SIZE:
      return isSetBloom_filter_size();
    case RUNTIME_FILTER_MERGE_NODES:
      return isSetRuntime_filter_merge_nodes();
    case BUILD_JOIN_MODE:
      return isSetBuild_join_mode();
    case SENDER_FINST_ID:
      return isSetSender_finst_id();
    case BUILD_PLAN_NODE_ID:
      return isSetBuild_plan_node_id();
    case BROADCAST_GRF_SENDERS:
      return isSetBroadcast_grf_senders();
    case BROADCAST_GRF_DESTINATIONS:
      return isSetBroadcast_grf_destinations();
    case BUCKETSEQ_TO_INSTANCE:
      return isSetBucketseq_to_instance();
    case PLAN_NODE_ID_TO_PARTITION_BY_EXPRS:
      return isSetPlan_node_id_to_partition_by_exprs();
    case FILTER_TYPE:
      return isSetFilter_type();
    case LAYOUT:
      return isSetLayout();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRuntimeFilterDescription)
      return this.equals((TRuntimeFilterDescription)that);
    return false;
  }

  public boolean equals(TRuntimeFilterDescription that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_filter_id = true && this.isSetFilter_id();
    boolean that_present_filter_id = true && that.isSetFilter_id();
    if (this_present_filter_id || that_present_filter_id) {
      if (!(this_present_filter_id && that_present_filter_id))
        return false;
      if (this.filter_id != that.filter_id)
        return false;
    }

    boolean this_present_build_expr = true && this.isSetBuild_expr();
    boolean that_present_build_expr = true && that.isSetBuild_expr();
    if (this_present_build_expr || that_present_build_expr) {
      if (!(this_present_build_expr && that_present_build_expr))
        return false;
      if (!this.build_expr.equals(that.build_expr))
        return false;
    }

    boolean this_present_expr_order = true && this.isSetExpr_order();
    boolean that_present_expr_order = true && that.isSetExpr_order();
    if (this_present_expr_order || that_present_expr_order) {
      if (!(this_present_expr_order && that_present_expr_order))
        return false;
      if (this.expr_order != that.expr_order)
        return false;
    }

    boolean this_present_plan_node_id_to_target_expr = true && this.isSetPlan_node_id_to_target_expr();
    boolean that_present_plan_node_id_to_target_expr = true && that.isSetPlan_node_id_to_target_expr();
    if (this_present_plan_node_id_to_target_expr || that_present_plan_node_id_to_target_expr) {
      if (!(this_present_plan_node_id_to_target_expr && that_present_plan_node_id_to_target_expr))
        return false;
      if (!this.plan_node_id_to_target_expr.equals(that.plan_node_id_to_target_expr))
        return false;
    }

    boolean this_present_has_remote_targets = true && this.isSetHas_remote_targets();
    boolean that_present_has_remote_targets = true && that.isSetHas_remote_targets();
    if (this_present_has_remote_targets || that_present_has_remote_targets) {
      if (!(this_present_has_remote_targets && that_present_has_remote_targets))
        return false;
      if (this.has_remote_targets != that.has_remote_targets)
        return false;
    }

    boolean this_present_bloom_filter_size = true && this.isSetBloom_filter_size();
    boolean that_present_bloom_filter_size = true && that.isSetBloom_filter_size();
    if (this_present_bloom_filter_size || that_present_bloom_filter_size) {
      if (!(this_present_bloom_filter_size && that_present_bloom_filter_size))
        return false;
      if (this.bloom_filter_size != that.bloom_filter_size)
        return false;
    }

    boolean this_present_runtime_filter_merge_nodes = true && this.isSetRuntime_filter_merge_nodes();
    boolean that_present_runtime_filter_merge_nodes = true && that.isSetRuntime_filter_merge_nodes();
    if (this_present_runtime_filter_merge_nodes || that_present_runtime_filter_merge_nodes) {
      if (!(this_present_runtime_filter_merge_nodes && that_present_runtime_filter_merge_nodes))
        return false;
      if (!this.runtime_filter_merge_nodes.equals(that.runtime_filter_merge_nodes))
        return false;
    }

    boolean this_present_build_join_mode = true && this.isSetBuild_join_mode();
    boolean that_present_build_join_mode = true && that.isSetBuild_join_mode();
    if (this_present_build_join_mode || that_present_build_join_mode) {
      if (!(this_present_build_join_mode && that_present_build_join_mode))
        return false;
      if (!this.build_join_mode.equals(that.build_join_mode))
        return false;
    }

    boolean this_present_sender_finst_id = true && this.isSetSender_finst_id();
    boolean that_present_sender_finst_id = true && that.isSetSender_finst_id();
    if (this_present_sender_finst_id || that_present_sender_finst_id) {
      if (!(this_present_sender_finst_id && that_present_sender_finst_id))
        return false;
      if (!this.sender_finst_id.equals(that.sender_finst_id))
        return false;
    }

    boolean this_present_build_plan_node_id = true && this.isSetBuild_plan_node_id();
    boolean that_present_build_plan_node_id = true && that.isSetBuild_plan_node_id();
    if (this_present_build_plan_node_id || that_present_build_plan_node_id) {
      if (!(this_present_build_plan_node_id && that_present_build_plan_node_id))
        return false;
      if (this.build_plan_node_id != that.build_plan_node_id)
        return false;
    }

    boolean this_present_broadcast_grf_senders = true && this.isSetBroadcast_grf_senders();
    boolean that_present_broadcast_grf_senders = true && that.isSetBroadcast_grf_senders();
    if (this_present_broadcast_grf_senders || that_present_broadcast_grf_senders) {
      if (!(this_present_broadcast_grf_senders && that_present_broadcast_grf_senders))
        return false;
      if (!this.broadcast_grf_senders.equals(that.broadcast_grf_senders))
        return false;
    }

    boolean this_present_broadcast_grf_destinations = true && this.isSetBroadcast_grf_destinations();
    boolean that_present_broadcast_grf_destinations = true && that.isSetBroadcast_grf_destinations();
    if (this_present_broadcast_grf_destinations || that_present_broadcast_grf_destinations) {
      if (!(this_present_broadcast_grf_destinations && that_present_broadcast_grf_destinations))
        return false;
      if (!this.broadcast_grf_destinations.equals(that.broadcast_grf_destinations))
        return false;
    }

    boolean this_present_bucketseq_to_instance = true && this.isSetBucketseq_to_instance();
    boolean that_present_bucketseq_to_instance = true && that.isSetBucketseq_to_instance();
    if (this_present_bucketseq_to_instance || that_present_bucketseq_to_instance) {
      if (!(this_present_bucketseq_to_instance && that_present_bucketseq_to_instance))
        return false;
      if (!this.bucketseq_to_instance.equals(that.bucketseq_to_instance))
        return false;
    }

    boolean this_present_plan_node_id_to_partition_by_exprs = true && this.isSetPlan_node_id_to_partition_by_exprs();
    boolean that_present_plan_node_id_to_partition_by_exprs = true && that.isSetPlan_node_id_to_partition_by_exprs();
    if (this_present_plan_node_id_to_partition_by_exprs || that_present_plan_node_id_to_partition_by_exprs) {
      if (!(this_present_plan_node_id_to_partition_by_exprs && that_present_plan_node_id_to_partition_by_exprs))
        return false;
      if (!this.plan_node_id_to_partition_by_exprs.equals(that.plan_node_id_to_partition_by_exprs))
        return false;
    }

    boolean this_present_filter_type = true && this.isSetFilter_type();
    boolean that_present_filter_type = true && that.isSetFilter_type();
    if (this_present_filter_type || that_present_filter_type) {
      if (!(this_present_filter_type && that_present_filter_type))
        return false;
      if (!this.filter_type.equals(that.filter_type))
        return false;
    }

    boolean this_present_layout = true && this.isSetLayout();
    boolean that_present_layout = true && that.isSetLayout();
    if (this_present_layout || that_present_layout) {
      if (!(this_present_layout && that_present_layout))
        return false;
      if (!this.layout.equals(that.layout))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFilter_id()) ? 131071 : 524287);
    if (isSetFilter_id())
      hashCode = hashCode * 8191 + filter_id;

    hashCode = hashCode * 8191 + ((isSetBuild_expr()) ? 131071 : 524287);
    if (isSetBuild_expr())
      hashCode = hashCode * 8191 + build_expr.hashCode();

    hashCode = hashCode * 8191 + ((isSetExpr_order()) ? 131071 : 524287);
    if (isSetExpr_order())
      hashCode = hashCode * 8191 + expr_order;

    hashCode = hashCode * 8191 + ((isSetPlan_node_id_to_target_expr()) ? 131071 : 524287);
    if (isSetPlan_node_id_to_target_expr())
      hashCode = hashCode * 8191 + plan_node_id_to_target_expr.hashCode();

    hashCode = hashCode * 8191 + ((isSetHas_remote_targets()) ? 131071 : 524287);
    if (isSetHas_remote_targets())
      hashCode = hashCode * 8191 + ((has_remote_targets) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBloom_filter_size()) ? 131071 : 524287);
    if (isSetBloom_filter_size())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bloom_filter_size);

    hashCode = hashCode * 8191 + ((isSetRuntime_filter_merge_nodes()) ? 131071 : 524287);
    if (isSetRuntime_filter_merge_nodes())
      hashCode = hashCode * 8191 + runtime_filter_merge_nodes.hashCode();

    hashCode = hashCode * 8191 + ((isSetBuild_join_mode()) ? 131071 : 524287);
    if (isSetBuild_join_mode())
      hashCode = hashCode * 8191 + build_join_mode.getValue();

    hashCode = hashCode * 8191 + ((isSetSender_finst_id()) ? 131071 : 524287);
    if (isSetSender_finst_id())
      hashCode = hashCode * 8191 + sender_finst_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetBuild_plan_node_id()) ? 131071 : 524287);
    if (isSetBuild_plan_node_id())
      hashCode = hashCode * 8191 + build_plan_node_id;

    hashCode = hashCode * 8191 + ((isSetBroadcast_grf_senders()) ? 131071 : 524287);
    if (isSetBroadcast_grf_senders())
      hashCode = hashCode * 8191 + broadcast_grf_senders.hashCode();

    hashCode = hashCode * 8191 + ((isSetBroadcast_grf_destinations()) ? 131071 : 524287);
    if (isSetBroadcast_grf_destinations())
      hashCode = hashCode * 8191 + broadcast_grf_destinations.hashCode();

    hashCode = hashCode * 8191 + ((isSetBucketseq_to_instance()) ? 131071 : 524287);
    if (isSetBucketseq_to_instance())
      hashCode = hashCode * 8191 + bucketseq_to_instance.hashCode();

    hashCode = hashCode * 8191 + ((isSetPlan_node_id_to_partition_by_exprs()) ? 131071 : 524287);
    if (isSetPlan_node_id_to_partition_by_exprs())
      hashCode = hashCode * 8191 + plan_node_id_to_partition_by_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetFilter_type()) ? 131071 : 524287);
    if (isSetFilter_type())
      hashCode = hashCode * 8191 + filter_type.getValue();

    hashCode = hashCode * 8191 + ((isSetLayout()) ? 131071 : 524287);
    if (isSetLayout())
      hashCode = hashCode * 8191 + layout.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TRuntimeFilterDescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFilter_id(), other.isSetFilter_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_id, other.filter_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBuild_expr(), other.isSetBuild_expr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuild_expr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.build_expr, other.build_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExpr_order(), other.isSetExpr_order());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpr_order()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expr_order, other.expr_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPlan_node_id_to_target_expr(), other.isSetPlan_node_id_to_target_expr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlan_node_id_to_target_expr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan_node_id_to_target_expr, other.plan_node_id_to_target_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHas_remote_targets(), other.isSetHas_remote_targets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_remote_targets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_remote_targets, other.has_remote_targets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBloom_filter_size(), other.isSetBloom_filter_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBloom_filter_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloom_filter_size, other.bloom_filter_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntime_filter_merge_nodes(), other.isSetRuntime_filter_merge_nodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_filter_merge_nodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_merge_nodes, other.runtime_filter_merge_nodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBuild_join_mode(), other.isSetBuild_join_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuild_join_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.build_join_mode, other.build_join_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSender_finst_id(), other.isSetSender_finst_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSender_finst_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sender_finst_id, other.sender_finst_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBuild_plan_node_id(), other.isSetBuild_plan_node_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuild_plan_node_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.build_plan_node_id, other.build_plan_node_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBroadcast_grf_senders(), other.isSetBroadcast_grf_senders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBroadcast_grf_senders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.broadcast_grf_senders, other.broadcast_grf_senders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBroadcast_grf_destinations(), other.isSetBroadcast_grf_destinations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBroadcast_grf_destinations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.broadcast_grf_destinations, other.broadcast_grf_destinations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBucketseq_to_instance(), other.isSetBucketseq_to_instance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketseq_to_instance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketseq_to_instance, other.bucketseq_to_instance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPlan_node_id_to_partition_by_exprs(), other.isSetPlan_node_id_to_partition_by_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlan_node_id_to_partition_by_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan_node_id_to_partition_by_exprs, other.plan_node_id_to_partition_by_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFilter_type(), other.isSetFilter_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_type, other.filter_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLayout(), other.isSetLayout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLayout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.layout, other.layout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRuntimeFilterDescription(");
    boolean first = true;

    if (isSetFilter_id()) {
      sb.append("filter_id:");
      sb.append(this.filter_id);
      first = false;
    }
    if (isSetBuild_expr()) {
      if (!first) sb.append(", ");
      sb.append("build_expr:");
      if (this.build_expr == null) {
        sb.append("null");
      } else {
        sb.append(this.build_expr);
      }
      first = false;
    }
    if (isSetExpr_order()) {
      if (!first) sb.append(", ");
      sb.append("expr_order:");
      sb.append(this.expr_order);
      first = false;
    }
    if (isSetPlan_node_id_to_target_expr()) {
      if (!first) sb.append(", ");
      sb.append("plan_node_id_to_target_expr:");
      if (this.plan_node_id_to_target_expr == null) {
        sb.append("null");
      } else {
        sb.append(this.plan_node_id_to_target_expr);
      }
      first = false;
    }
    if (isSetHas_remote_targets()) {
      if (!first) sb.append(", ");
      sb.append("has_remote_targets:");
      sb.append(this.has_remote_targets);
      first = false;
    }
    if (isSetBloom_filter_size()) {
      if (!first) sb.append(", ");
      sb.append("bloom_filter_size:");
      sb.append(this.bloom_filter_size);
      first = false;
    }
    if (isSetRuntime_filter_merge_nodes()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_merge_nodes:");
      if (this.runtime_filter_merge_nodes == null) {
        sb.append("null");
      } else {
        sb.append(this.runtime_filter_merge_nodes);
      }
      first = false;
    }
    if (isSetBuild_join_mode()) {
      if (!first) sb.append(", ");
      sb.append("build_join_mode:");
      if (this.build_join_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.build_join_mode);
      }
      first = false;
    }
    if (isSetSender_finst_id()) {
      if (!first) sb.append(", ");
      sb.append("sender_finst_id:");
      if (this.sender_finst_id == null) {
        sb.append("null");
      } else {
        sb.append(this.sender_finst_id);
      }
      first = false;
    }
    if (isSetBuild_plan_node_id()) {
      if (!first) sb.append(", ");
      sb.append("build_plan_node_id:");
      sb.append(this.build_plan_node_id);
      first = false;
    }
    if (isSetBroadcast_grf_senders()) {
      if (!first) sb.append(", ");
      sb.append("broadcast_grf_senders:");
      if (this.broadcast_grf_senders == null) {
        sb.append("null");
      } else {
        sb.append(this.broadcast_grf_senders);
      }
      first = false;
    }
    if (isSetBroadcast_grf_destinations()) {
      if (!first) sb.append(", ");
      sb.append("broadcast_grf_destinations:");
      if (this.broadcast_grf_destinations == null) {
        sb.append("null");
      } else {
        sb.append(this.broadcast_grf_destinations);
      }
      first = false;
    }
    if (isSetBucketseq_to_instance()) {
      if (!first) sb.append(", ");
      sb.append("bucketseq_to_instance:");
      if (this.bucketseq_to_instance == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketseq_to_instance);
      }
      first = false;
    }
    if (isSetPlan_node_id_to_partition_by_exprs()) {
      if (!first) sb.append(", ");
      sb.append("plan_node_id_to_partition_by_exprs:");
      if (this.plan_node_id_to_partition_by_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.plan_node_id_to_partition_by_exprs);
      }
      first = false;
    }
    if (isSetFilter_type()) {
      if (!first) sb.append(", ");
      sb.append("filter_type:");
      if (this.filter_type == null) {
        sb.append("null");
      } else {
        sb.append(this.filter_type);
      }
      first = false;
    }
    if (isSetLayout()) {
      if (!first) sb.append(", ");
      sb.append("layout:");
      if (this.layout == null) {
        sb.append("null");
      } else {
        sb.append(this.layout);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (build_expr != null) {
      build_expr.validate();
    }
    if (sender_finst_id != null) {
      sender_finst_id.validate();
    }
    if (layout != null) {
      layout.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRuntimeFilterDescriptionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRuntimeFilterDescriptionStandardScheme getScheme() {
      return new TRuntimeFilterDescriptionStandardScheme();
    }
  }

  private static class TRuntimeFilterDescriptionStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRuntimeFilterDescription> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TRuntimeFilterDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.filter_id = iprot.readI32();
              struct.setFilter_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUILD_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.build_expr = new com.starrocks.thrift.TExpr();
              struct.build_expr.read(iprot);
              struct.setBuild_exprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXPR_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expr_order = iprot.readI32();
              struct.setExpr_orderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLAN_NODE_ID_TO_TARGET_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
                struct.plan_node_id_to_target_expr = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>(2*_map32.size);
                int _key33;
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _val34;
                for (int _i35 = 0; _i35 < _map32.size; ++_i35)
                {
                  _key33 = iprot.readI32();
                  _val34 = new com.starrocks.thrift.TExpr();
                  _val34.read(iprot);
                  struct.plan_node_id_to_target_expr.put(_key33, _val34);
                }
                iprot.readMapEnd();
              }
              struct.setPlan_node_id_to_target_exprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HAS_REMOTE_TARGETS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_remote_targets = iprot.readBool();
              struct.setHas_remote_targetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BLOOM_FILTER_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bloom_filter_size = iprot.readI64();
              struct.setBloom_filter_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RUNTIME_FILTER_MERGE_NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.runtime_filter_merge_nodes = new java.util.ArrayList<com.starrocks.thrift.TNetworkAddress>(_list36.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TNetworkAddress _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = new com.starrocks.thrift.TNetworkAddress();
                  _elem37.read(iprot);
                  struct.runtime_filter_merge_nodes.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setRuntime_filter_merge_nodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BUILD_JOIN_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.build_join_mode = com.starrocks.thrift.TRuntimeFilterBuildJoinMode.findByValue(iprot.readI32());
              struct.setBuild_join_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SENDER_FINST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sender_finst_id = new com.starrocks.thrift.TUniqueId();
              struct.sender_finst_id.read(iprot);
              struct.setSender_finst_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BUILD_PLAN_NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.build_plan_node_id = iprot.readI32();
              struct.setBuild_plan_node_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BROADCAST_GRF_SENDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.broadcast_grf_senders = new java.util.ArrayList<com.starrocks.thrift.TUniqueId>(_list39.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId _elem40;
                for (int _i41 = 0; _i41 < _list39.size; ++_i41)
                {
                  _elem40 = new com.starrocks.thrift.TUniqueId();
                  _elem40.read(iprot);
                  struct.broadcast_grf_senders.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setBroadcast_grf_sendersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BROADCAST_GRF_DESTINATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.broadcast_grf_destinations = new java.util.ArrayList<TRuntimeFilterDestination>(_list42.size);
                @org.apache.thrift.annotation.Nullable TRuntimeFilterDestination _elem43;
                for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                {
                  _elem43 = new TRuntimeFilterDestination();
                  _elem43.read(iprot);
                  struct.broadcast_grf_destinations.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setBroadcast_grf_destinationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BUCKETSEQ_TO_INSTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list45 = iprot.readListBegin();
                struct.bucketseq_to_instance = new java.util.ArrayList<java.lang.Integer>(_list45.size);
                int _elem46;
                for (int _i47 = 0; _i47 < _list45.size; ++_i47)
                {
                  _elem46 = iprot.readI32();
                  struct.bucketseq_to_instance.add(_elem46);
                }
                iprot.readListEnd();
              }
              struct.setBucketseq_to_instanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PLAN_NODE_ID_TO_PARTITION_BY_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                struct.plan_node_id_to_partition_by_exprs = new java.util.HashMap<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>>(2*_map48.size);
                int _key49;
                @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> _val50;
                for (int _i51 = 0; _i51 < _map48.size; ++_i51)
                {
                  _key49 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                    _val50 = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list52.size);
                    @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem53;
                    for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                    {
                      _elem53 = new com.starrocks.thrift.TExpr();
                      _elem53.read(iprot);
                      _val50.add(_elem53);
                    }
                    iprot.readListEnd();
                  }
                  struct.plan_node_id_to_partition_by_exprs.put(_key49, _val50);
                }
                iprot.readMapEnd();
              }
              struct.setPlan_node_id_to_partition_by_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FILTER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.filter_type = com.starrocks.thrift.TRuntimeFilterBuildType.findByValue(iprot.readI32());
              struct.setFilter_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LAYOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.layout = new TRuntimeFilterLayout();
              struct.layout.read(iprot);
              struct.setLayoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TRuntimeFilterDescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetFilter_id()) {
        oprot.writeFieldBegin(FILTER_ID_FIELD_DESC);
        oprot.writeI32(struct.filter_id);
        oprot.writeFieldEnd();
      }
      if (struct.build_expr != null) {
        if (struct.isSetBuild_expr()) {
          oprot.writeFieldBegin(BUILD_EXPR_FIELD_DESC);
          struct.build_expr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExpr_order()) {
        oprot.writeFieldBegin(EXPR_ORDER_FIELD_DESC);
        oprot.writeI32(struct.expr_order);
        oprot.writeFieldEnd();
      }
      if (struct.plan_node_id_to_target_expr != null) {
        if (struct.isSetPlan_node_id_to_target_expr()) {
          oprot.writeFieldBegin(PLAN_NODE_ID_TO_TARGET_EXPR_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.plan_node_id_to_target_expr.size()));
            for (java.util.Map.Entry<java.lang.Integer, com.starrocks.thrift.TExpr> _iter55 : struct.plan_node_id_to_target_expr.entrySet())
            {
              oprot.writeI32(_iter55.getKey());
              _iter55.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHas_remote_targets()) {
        oprot.writeFieldBegin(HAS_REMOTE_TARGETS_FIELD_DESC);
        oprot.writeBool(struct.has_remote_targets);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBloom_filter_size()) {
        oprot.writeFieldBegin(BLOOM_FILTER_SIZE_FIELD_DESC);
        oprot.writeI64(struct.bloom_filter_size);
        oprot.writeFieldEnd();
      }
      if (struct.runtime_filter_merge_nodes != null) {
        if (struct.isSetRuntime_filter_merge_nodes()) {
          oprot.writeFieldBegin(RUNTIME_FILTER_MERGE_NODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.runtime_filter_merge_nodes.size()));
            for (com.starrocks.thrift.TNetworkAddress _iter56 : struct.runtime_filter_merge_nodes)
            {
              _iter56.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.build_join_mode != null) {
        if (struct.isSetBuild_join_mode()) {
          oprot.writeFieldBegin(BUILD_JOIN_MODE_FIELD_DESC);
          oprot.writeI32(struct.build_join_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.sender_finst_id != null) {
        if (struct.isSetSender_finst_id()) {
          oprot.writeFieldBegin(SENDER_FINST_ID_FIELD_DESC);
          struct.sender_finst_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBuild_plan_node_id()) {
        oprot.writeFieldBegin(BUILD_PLAN_NODE_ID_FIELD_DESC);
        oprot.writeI32(struct.build_plan_node_id);
        oprot.writeFieldEnd();
      }
      if (struct.broadcast_grf_senders != null) {
        if (struct.isSetBroadcast_grf_senders()) {
          oprot.writeFieldBegin(BROADCAST_GRF_SENDERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.broadcast_grf_senders.size()));
            for (com.starrocks.thrift.TUniqueId _iter57 : struct.broadcast_grf_senders)
            {
              _iter57.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.broadcast_grf_destinations != null) {
        if (struct.isSetBroadcast_grf_destinations()) {
          oprot.writeFieldBegin(BROADCAST_GRF_DESTINATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.broadcast_grf_destinations.size()));
            for (TRuntimeFilterDestination _iter58 : struct.broadcast_grf_destinations)
            {
              _iter58.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.bucketseq_to_instance != null) {
        if (struct.isSetBucketseq_to_instance()) {
          oprot.writeFieldBegin(BUCKETSEQ_TO_INSTANCE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.bucketseq_to_instance.size()));
            for (int _iter59 : struct.bucketseq_to_instance)
            {
              oprot.writeI32(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.plan_node_id_to_partition_by_exprs != null) {
        if (struct.isSetPlan_node_id_to_partition_by_exprs()) {
          oprot.writeFieldBegin(PLAN_NODE_ID_TO_PARTITION_BY_EXPRS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.plan_node_id_to_partition_by_exprs.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.util.List<com.starrocks.thrift.TExpr>> _iter60 : struct.plan_node_id_to_partition_by_exprs.entrySet())
            {
              oprot.writeI32(_iter60.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter60.getValue().size()));
                for (com.starrocks.thrift.TExpr _iter61 : _iter60.getValue())
                {
                  _iter61.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.filter_type != null) {
        if (struct.isSetFilter_type()) {
          oprot.writeFieldBegin(FILTER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.filter_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.layout != null) {
        if (struct.isSetLayout()) {
          oprot.writeFieldBegin(LAYOUT_FIELD_DESC);
          struct.layout.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRuntimeFilterDescriptionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRuntimeFilterDescriptionTupleScheme getScheme() {
      return new TRuntimeFilterDescriptionTupleScheme();
    }
  }

  private static class TRuntimeFilterDescriptionTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRuntimeFilterDescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFilter_id()) {
        optionals.set(0);
      }
      if (struct.isSetBuild_expr()) {
        optionals.set(1);
      }
      if (struct.isSetExpr_order()) {
        optionals.set(2);
      }
      if (struct.isSetPlan_node_id_to_target_expr()) {
        optionals.set(3);
      }
      if (struct.isSetHas_remote_targets()) {
        optionals.set(4);
      }
      if (struct.isSetBloom_filter_size()) {
        optionals.set(5);
      }
      if (struct.isSetRuntime_filter_merge_nodes()) {
        optionals.set(6);
      }
      if (struct.isSetBuild_join_mode()) {
        optionals.set(7);
      }
      if (struct.isSetSender_finst_id()) {
        optionals.set(8);
      }
      if (struct.isSetBuild_plan_node_id()) {
        optionals.set(9);
      }
      if (struct.isSetBroadcast_grf_senders()) {
        optionals.set(10);
      }
      if (struct.isSetBroadcast_grf_destinations()) {
        optionals.set(11);
      }
      if (struct.isSetBucketseq_to_instance()) {
        optionals.set(12);
      }
      if (struct.isSetPlan_node_id_to_partition_by_exprs()) {
        optionals.set(13);
      }
      if (struct.isSetFilter_type()) {
        optionals.set(14);
      }
      if (struct.isSetLayout()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetFilter_id()) {
        oprot.writeI32(struct.filter_id);
      }
      if (struct.isSetBuild_expr()) {
        struct.build_expr.write(oprot);
      }
      if (struct.isSetExpr_order()) {
        oprot.writeI32(struct.expr_order);
      }
      if (struct.isSetPlan_node_id_to_target_expr()) {
        {
          oprot.writeI32(struct.plan_node_id_to_target_expr.size());
          for (java.util.Map.Entry<java.lang.Integer, com.starrocks.thrift.TExpr> _iter62 : struct.plan_node_id_to_target_expr.entrySet())
          {
            oprot.writeI32(_iter62.getKey());
            _iter62.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetHas_remote_targets()) {
        oprot.writeBool(struct.has_remote_targets);
      }
      if (struct.isSetBloom_filter_size()) {
        oprot.writeI64(struct.bloom_filter_size);
      }
      if (struct.isSetRuntime_filter_merge_nodes()) {
        {
          oprot.writeI32(struct.runtime_filter_merge_nodes.size());
          for (com.starrocks.thrift.TNetworkAddress _iter63 : struct.runtime_filter_merge_nodes)
          {
            _iter63.write(oprot);
          }
        }
      }
      if (struct.isSetBuild_join_mode()) {
        oprot.writeI32(struct.build_join_mode.getValue());
      }
      if (struct.isSetSender_finst_id()) {
        struct.sender_finst_id.write(oprot);
      }
      if (struct.isSetBuild_plan_node_id()) {
        oprot.writeI32(struct.build_plan_node_id);
      }
      if (struct.isSetBroadcast_grf_senders()) {
        {
          oprot.writeI32(struct.broadcast_grf_senders.size());
          for (com.starrocks.thrift.TUniqueId _iter64 : struct.broadcast_grf_senders)
          {
            _iter64.write(oprot);
          }
        }
      }
      if (struct.isSetBroadcast_grf_destinations()) {
        {
          oprot.writeI32(struct.broadcast_grf_destinations.size());
          for (TRuntimeFilterDestination _iter65 : struct.broadcast_grf_destinations)
          {
            _iter65.write(oprot);
          }
        }
      }
      if (struct.isSetBucketseq_to_instance()) {
        {
          oprot.writeI32(struct.bucketseq_to_instance.size());
          for (int _iter66 : struct.bucketseq_to_instance)
          {
            oprot.writeI32(_iter66);
          }
        }
      }
      if (struct.isSetPlan_node_id_to_partition_by_exprs()) {
        {
          oprot.writeI32(struct.plan_node_id_to_partition_by_exprs.size());
          for (java.util.Map.Entry<java.lang.Integer, java.util.List<com.starrocks.thrift.TExpr>> _iter67 : struct.plan_node_id_to_partition_by_exprs.entrySet())
          {
            oprot.writeI32(_iter67.getKey());
            {
              oprot.writeI32(_iter67.getValue().size());
              for (com.starrocks.thrift.TExpr _iter68 : _iter67.getValue())
              {
                _iter68.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetFilter_type()) {
        oprot.writeI32(struct.filter_type.getValue());
      }
      if (struct.isSetLayout()) {
        struct.layout.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.filter_id = iprot.readI32();
        struct.setFilter_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.build_expr = new com.starrocks.thrift.TExpr();
        struct.build_expr.read(iprot);
        struct.setBuild_exprIsSet(true);
      }
      if (incoming.get(2)) {
        struct.expr_order = iprot.readI32();
        struct.setExpr_orderIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map69 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT); 
          struct.plan_node_id_to_target_expr = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>(2*_map69.size);
          int _key70;
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _val71;
          for (int _i72 = 0; _i72 < _map69.size; ++_i72)
          {
            _key70 = iprot.readI32();
            _val71 = new com.starrocks.thrift.TExpr();
            _val71.read(iprot);
            struct.plan_node_id_to_target_expr.put(_key70, _val71);
          }
        }
        struct.setPlan_node_id_to_target_exprIsSet(true);
      }
      if (incoming.get(4)) {
        struct.has_remote_targets = iprot.readBool();
        struct.setHas_remote_targetsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.bloom_filter_size = iprot.readI64();
        struct.setBloom_filter_sizeIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list73 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.runtime_filter_merge_nodes = new java.util.ArrayList<com.starrocks.thrift.TNetworkAddress>(_list73.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TNetworkAddress _elem74;
          for (int _i75 = 0; _i75 < _list73.size; ++_i75)
          {
            _elem74 = new com.starrocks.thrift.TNetworkAddress();
            _elem74.read(iprot);
            struct.runtime_filter_merge_nodes.add(_elem74);
          }
        }
        struct.setRuntime_filter_merge_nodesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.build_join_mode = com.starrocks.thrift.TRuntimeFilterBuildJoinMode.findByValue(iprot.readI32());
        struct.setBuild_join_modeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sender_finst_id = new com.starrocks.thrift.TUniqueId();
        struct.sender_finst_id.read(iprot);
        struct.setSender_finst_idIsSet(true);
      }
      if (incoming.get(9)) {
        struct.build_plan_node_id = iprot.readI32();
        struct.setBuild_plan_node_idIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list76 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.broadcast_grf_senders = new java.util.ArrayList<com.starrocks.thrift.TUniqueId>(_list76.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId _elem77;
          for (int _i78 = 0; _i78 < _list76.size; ++_i78)
          {
            _elem77 = new com.starrocks.thrift.TUniqueId();
            _elem77.read(iprot);
            struct.broadcast_grf_senders.add(_elem77);
          }
        }
        struct.setBroadcast_grf_sendersIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list79 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.broadcast_grf_destinations = new java.util.ArrayList<TRuntimeFilterDestination>(_list79.size);
          @org.apache.thrift.annotation.Nullable TRuntimeFilterDestination _elem80;
          for (int _i81 = 0; _i81 < _list79.size; ++_i81)
          {
            _elem80 = new TRuntimeFilterDestination();
            _elem80.read(iprot);
            struct.broadcast_grf_destinations.add(_elem80);
          }
        }
        struct.setBroadcast_grf_destinationsIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list82 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.bucketseq_to_instance = new java.util.ArrayList<java.lang.Integer>(_list82.size);
          int _elem83;
          for (int _i84 = 0; _i84 < _list82.size; ++_i84)
          {
            _elem83 = iprot.readI32();
            struct.bucketseq_to_instance.add(_elem83);
          }
        }
        struct.setBucketseq_to_instanceIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TMap _map85 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST); 
          struct.plan_node_id_to_partition_by_exprs = new java.util.HashMap<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>>(2*_map85.size);
          int _key86;
          @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> _val87;
          for (int _i88 = 0; _i88 < _map85.size; ++_i88)
          {
            _key86 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list89 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
              _val87 = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list89.size);
              @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem90;
              for (int _i91 = 0; _i91 < _list89.size; ++_i91)
              {
                _elem90 = new com.starrocks.thrift.TExpr();
                _elem90.read(iprot);
                _val87.add(_elem90);
              }
            }
            struct.plan_node_id_to_partition_by_exprs.put(_key86, _val87);
          }
        }
        struct.setPlan_node_id_to_partition_by_exprsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.filter_type = com.starrocks.thrift.TRuntimeFilterBuildType.findByValue(iprot.readI32());
        struct.setFilter_typeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.layout = new TRuntimeFilterLayout();
        struct.layout.read(iprot);
        struct.setLayoutIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

