/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TSchemaScanNode implements org.apache.thrift.TBase<TSchemaScanNode, TSchemaScanNode._Fields>, java.io.Serializable, Cloneable, Comparable<TSchemaScanNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSchemaScanNode");

  private static final org.apache.thrift.protocol.TField TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField WILD_FIELD_DESC = new org.apache.thrift.protocol.TField("wild", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField THREAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("thread_id", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField USER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ip", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CURRENT_USER_IDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("current_user_ident", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_id", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("job_id", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField LOG_START_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("log_start_ts", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField LOG_END_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("log_end_ts", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField LOG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("log_level", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField LOG_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("log_pattern", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField LOG_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("log_limit", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField FRONTENDS_FIELD_DESC = new org.apache.thrift.protocol.TField("frontends", org.apache.thrift.protocol.TType.LIST, (short)26);
  private static final org.apache.thrift.protocol.TField CATALOG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog_name", org.apache.thrift.protocol.TType.STRING, (short)101);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSchemaScanNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSchemaScanNodeTupleSchemeFactory();

  public int tuple_id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String db; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String wild; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String user; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String ip; // optional
  public int port; // optional
  public long thread_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String user_ip; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUserIdentity current_user_ident; // optional
  public long table_id; // optional
  public long partition_id; // optional
  public long tablet_id; // optional
  public long txn_id; // optional
  public long job_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String label; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String type; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String state; // optional
  public long limit; // optional
  public long log_start_ts; // optional
  public long log_end_ts; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String log_level; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String log_pattern; // optional
  public long log_limit; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TFrontend> frontends; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String catalog_name; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TUPLE_ID((short)1, "tuple_id"),
    TABLE_NAME((short)2, "table_name"),
    DB((short)3, "db"),
    TABLE((short)4, "table"),
    WILD((short)5, "wild"),
    USER((short)6, "user"),
    IP((short)7, "ip"),
    PORT((short)8, "port"),
    THREAD_ID((short)9, "thread_id"),
    USER_IP((short)10, "user_ip"),
    CURRENT_USER_IDENT((short)11, "current_user_ident"),
    TABLE_ID((short)12, "table_id"),
    PARTITION_ID((short)13, "partition_id"),
    TABLET_ID((short)14, "tablet_id"),
    TXN_ID((short)15, "txn_id"),
    JOB_ID((short)16, "job_id"),
    LABEL((short)17, "label"),
    TYPE((short)18, "type"),
    STATE((short)19, "state"),
    LIMIT((short)20, "limit"),
    LOG_START_TS((short)21, "log_start_ts"),
    LOG_END_TS((short)22, "log_end_ts"),
    LOG_LEVEL((short)23, "log_level"),
    LOG_PATTERN((short)24, "log_pattern"),
    LOG_LIMIT((short)25, "log_limit"),
    FRONTENDS((short)26, "frontends"),
    CATALOG_NAME((short)101, "catalog_name");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TUPLE_ID
          return TUPLE_ID;
        case 2: // TABLE_NAME
          return TABLE_NAME;
        case 3: // DB
          return DB;
        case 4: // TABLE
          return TABLE;
        case 5: // WILD
          return WILD;
        case 6: // USER
          return USER;
        case 7: // IP
          return IP;
        case 8: // PORT
          return PORT;
        case 9: // THREAD_ID
          return THREAD_ID;
        case 10: // USER_IP
          return USER_IP;
        case 11: // CURRENT_USER_IDENT
          return CURRENT_USER_IDENT;
        case 12: // TABLE_ID
          return TABLE_ID;
        case 13: // PARTITION_ID
          return PARTITION_ID;
        case 14: // TABLET_ID
          return TABLET_ID;
        case 15: // TXN_ID
          return TXN_ID;
        case 16: // JOB_ID
          return JOB_ID;
        case 17: // LABEL
          return LABEL;
        case 18: // TYPE
          return TYPE;
        case 19: // STATE
          return STATE;
        case 20: // LIMIT
          return LIMIT;
        case 21: // LOG_START_TS
          return LOG_START_TS;
        case 22: // LOG_END_TS
          return LOG_END_TS;
        case 23: // LOG_LEVEL
          return LOG_LEVEL;
        case 24: // LOG_PATTERN
          return LOG_PATTERN;
        case 25: // LOG_LIMIT
          return LOG_LIMIT;
        case 26: // FRONTENDS
          return FRONTENDS;
        case 101: // CATALOG_NAME
          return CATALOG_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TUPLE_ID_ISSET_ID = 0;
  private static final int __PORT_ISSET_ID = 1;
  private static final int __THREAD_ID_ISSET_ID = 2;
  private static final int __TABLE_ID_ISSET_ID = 3;
  private static final int __PARTITION_ID_ISSET_ID = 4;
  private static final int __TABLET_ID_ISSET_ID = 5;
  private static final int __TXN_ID_ISSET_ID = 6;
  private static final int __JOB_ID_ISSET_ID = 7;
  private static final int __LIMIT_ISSET_ID = 8;
  private static final int __LOG_START_TS_ISSET_ID = 9;
  private static final int __LOG_END_TS_ISSET_ID = 10;
  private static final int __LOG_LIMIT_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DB,_Fields.TABLE,_Fields.WILD,_Fields.USER,_Fields.IP,_Fields.PORT,_Fields.THREAD_ID,_Fields.USER_IP,_Fields.CURRENT_USER_IDENT,_Fields.TABLE_ID,_Fields.PARTITION_ID,_Fields.TABLET_ID,_Fields.TXN_ID,_Fields.JOB_ID,_Fields.LABEL,_Fields.TYPE,_Fields.STATE,_Fields.LIMIT,_Fields.LOG_START_TS,_Fields.LOG_END_TS,_Fields.LOG_LEVEL,_Fields.LOG_PATTERN,_Fields.LOG_LIMIT,_Fields.FRONTENDS,_Fields.CATALOG_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WILD, new org.apache.thrift.meta_data.FieldMetaData("wild", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THREAD_ID, new org.apache.thrift.meta_data.FieldMetaData("thread_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_IP, new org.apache.thrift.meta_data.FieldMetaData("user_ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_USER_IDENT, new org.apache.thrift.meta_data.FieldMetaData("current_user_ident", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TUserIdentity.class)));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txn_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("job_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOG_START_TS, new org.apache.thrift.meta_data.FieldMetaData("log_start_ts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOG_END_TS, new org.apache.thrift.meta_data.FieldMetaData("log_end_ts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("log_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("log_pattern", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("log_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FRONTENDS, new org.apache.thrift.meta_data.FieldMetaData("frontends", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFrontend.class))));
    tmpMap.put(_Fields.CATALOG_NAME, new org.apache.thrift.meta_data.FieldMetaData("catalog_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSchemaScanNode.class, metaDataMap);
  }

  public TSchemaScanNode() {
  }

  public TSchemaScanNode(
    int tuple_id,
    java.lang.String table_name)
  {
    this();
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    this.table_name = table_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSchemaScanNode(TSchemaScanNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tuple_id = other.tuple_id;
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    if (other.isSetDb()) {
      this.db = other.db;
    }
    if (other.isSetTable()) {
      this.table = other.table;
    }
    if (other.isSetWild()) {
      this.wild = other.wild;
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    this.port = other.port;
    this.thread_id = other.thread_id;
    if (other.isSetUser_ip()) {
      this.user_ip = other.user_ip;
    }
    if (other.isSetCurrent_user_ident()) {
      this.current_user_ident = new io.datafibre.fibre.thrift.TUserIdentity(other.current_user_ident);
    }
    this.table_id = other.table_id;
    this.partition_id = other.partition_id;
    this.tablet_id = other.tablet_id;
    this.txn_id = other.txn_id;
    this.job_id = other.job_id;
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.limit = other.limit;
    this.log_start_ts = other.log_start_ts;
    this.log_end_ts = other.log_end_ts;
    if (other.isSetLog_level()) {
      this.log_level = other.log_level;
    }
    if (other.isSetLog_pattern()) {
      this.log_pattern = other.log_pattern;
    }
    this.log_limit = other.log_limit;
    if (other.isSetFrontends()) {
      java.util.List<TFrontend> __this__frontends = new java.util.ArrayList<TFrontend>(other.frontends.size());
      for (TFrontend other_element : other.frontends) {
        __this__frontends.add(new TFrontend(other_element));
      }
      this.frontends = __this__frontends;
    }
    if (other.isSetCatalog_name()) {
      this.catalog_name = other.catalog_name;
    }
  }

  @Override
  public TSchemaScanNode deepCopy() {
    return new TSchemaScanNode(this);
  }

  @Override
  public void clear() {
    setTuple_idIsSet(false);
    this.tuple_id = 0;
    this.table_name = null;
    this.db = null;
    this.table = null;
    this.wild = null;
    this.user = null;
    this.ip = null;
    setPortIsSet(false);
    this.port = 0;
    setThread_idIsSet(false);
    this.thread_id = 0;
    this.user_ip = null;
    this.current_user_ident = null;
    setTable_idIsSet(false);
    this.table_id = 0;
    setPartition_idIsSet(false);
    this.partition_id = 0;
    setTablet_idIsSet(false);
    this.tablet_id = 0;
    setTxn_idIsSet(false);
    this.txn_id = 0;
    setJob_idIsSet(false);
    this.job_id = 0;
    this.label = null;
    this.type = null;
    this.state = null;
    setLimitIsSet(false);
    this.limit = 0;
    setLog_start_tsIsSet(false);
    this.log_start_ts = 0;
    setLog_end_tsIsSet(false);
    this.log_end_ts = 0;
    this.log_level = null;
    this.log_pattern = null;
    setLog_limitIsSet(false);
    this.log_limit = 0;
    this.frontends = null;
    this.catalog_name = null;
  }

  public int getTuple_id() {
    return this.tuple_id;
  }

  public TSchemaScanNode setTuple_id(int tuple_id) {
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    return this;
  }

  public void unsetTuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  public void setTuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TUPLE_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_name() {
    return this.table_name;
  }

  public TSchemaScanNode setTable_name(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb() {
    return this.db;
  }

  public TSchemaScanNode setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable() {
    return this.table;
  }

  public TSchemaScanNode setTable(@org.apache.thrift.annotation.Nullable java.lang.String table) {
    this.table = table;
    return this;
  }

  public void unsetTable() {
    this.table = null;
  }

  /** Returns true if field table is set (has been assigned a value) and false otherwise */
  public boolean isSetTable() {
    return this.table != null;
  }

  public void setTableIsSet(boolean value) {
    if (!value) {
      this.table = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getWild() {
    return this.wild;
  }

  public TSchemaScanNode setWild(@org.apache.thrift.annotation.Nullable java.lang.String wild) {
    this.wild = wild;
    return this;
  }

  public void unsetWild() {
    this.wild = null;
  }

  /** Returns true if field wild is set (has been assigned a value) and false otherwise */
  public boolean isSetWild() {
    return this.wild != null;
  }

  public void setWildIsSet(boolean value) {
    if (!value) {
      this.wild = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser() {
    return this.user;
  }

  public TSchemaScanNode setUser(@org.apache.thrift.annotation.Nullable java.lang.String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIp() {
    return this.ip;
  }

  public TSchemaScanNode setIp(@org.apache.thrift.annotation.Nullable java.lang.String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public TSchemaScanNode setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public long getThread_id() {
    return this.thread_id;
  }

  public TSchemaScanNode setThread_id(long thread_id) {
    this.thread_id = thread_id;
    setThread_idIsSet(true);
    return this;
  }

  public void unsetThread_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THREAD_ID_ISSET_ID);
  }

  /** Returns true if field thread_id is set (has been assigned a value) and false otherwise */
  public boolean isSetThread_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THREAD_ID_ISSET_ID);
  }

  public void setThread_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THREAD_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser_ip() {
    return this.user_ip;
  }

  public TSchemaScanNode setUser_ip(@org.apache.thrift.annotation.Nullable java.lang.String user_ip) {
    this.user_ip = user_ip;
    return this;
  }

  public void unsetUser_ip() {
    this.user_ip = null;
  }

  /** Returns true if field user_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_ip() {
    return this.user_ip != null;
  }

  public void setUser_ipIsSet(boolean value) {
    if (!value) {
      this.user_ip = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TUserIdentity getCurrent_user_ident() {
    return this.current_user_ident;
  }

  public TSchemaScanNode setCurrent_user_ident(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUserIdentity current_user_ident) {
    this.current_user_ident = current_user_ident;
    return this;
  }

  public void unsetCurrent_user_ident() {
    this.current_user_ident = null;
  }

  /** Returns true if field current_user_ident is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_user_ident() {
    return this.current_user_ident != null;
  }

  public void setCurrent_user_identIsSet(boolean value) {
    if (!value) {
      this.current_user_ident = null;
    }
  }

  public long getTable_id() {
    return this.table_id;
  }

  public TSchemaScanNode setTable_id(long table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public TSchemaScanNode setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    return this;
  }

  public void unsetPartition_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  public long getTablet_id() {
    return this.tablet_id;
  }

  public TSchemaScanNode setTablet_id(long tablet_id) {
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    return this;
  }

  public void unsetTablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  public long getTxn_id() {
    return this.txn_id;
  }

  public TSchemaScanNode setTxn_id(long txn_id) {
    this.txn_id = txn_id;
    setTxn_idIsSet(true);
    return this;
  }

  public void unsetTxn_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  /** Returns true if field txn_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  public void setTxn_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXN_ID_ISSET_ID, value);
  }

  public long getJob_id() {
    return this.job_id;
  }

  public TSchemaScanNode setJob_id(long job_id) {
    this.job_id = job_id;
    setJob_idIsSet(true);
    return this;
  }

  public void unsetJob_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOB_ID_ISSET_ID);
  }

  /** Returns true if field job_id is set (has been assigned a value) and false otherwise */
  public boolean isSetJob_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOB_ID_ISSET_ID);
  }

  public void setJob_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOB_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLabel() {
    return this.label;
  }

  public TSchemaScanNode setLabel(@org.apache.thrift.annotation.Nullable java.lang.String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getType() {
    return this.type;
  }

  public TSchemaScanNode setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getState() {
    return this.state;
  }

  public TSchemaScanNode setState(@org.apache.thrift.annotation.Nullable java.lang.String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public long getLimit() {
    return this.limit;
  }

  public TSchemaScanNode setLimit(long limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public long getLog_start_ts() {
    return this.log_start_ts;
  }

  public TSchemaScanNode setLog_start_ts(long log_start_ts) {
    this.log_start_ts = log_start_ts;
    setLog_start_tsIsSet(true);
    return this;
  }

  public void unsetLog_start_ts() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOG_START_TS_ISSET_ID);
  }

  /** Returns true if field log_start_ts is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_start_ts() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOG_START_TS_ISSET_ID);
  }

  public void setLog_start_tsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOG_START_TS_ISSET_ID, value);
  }

  public long getLog_end_ts() {
    return this.log_end_ts;
  }

  public TSchemaScanNode setLog_end_ts(long log_end_ts) {
    this.log_end_ts = log_end_ts;
    setLog_end_tsIsSet(true);
    return this;
  }

  public void unsetLog_end_ts() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOG_END_TS_ISSET_ID);
  }

  /** Returns true if field log_end_ts is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_end_ts() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOG_END_TS_ISSET_ID);
  }

  public void setLog_end_tsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOG_END_TS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLog_level() {
    return this.log_level;
  }

  public TSchemaScanNode setLog_level(@org.apache.thrift.annotation.Nullable java.lang.String log_level) {
    this.log_level = log_level;
    return this;
  }

  public void unsetLog_level() {
    this.log_level = null;
  }

  /** Returns true if field log_level is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_level() {
    return this.log_level != null;
  }

  public void setLog_levelIsSet(boolean value) {
    if (!value) {
      this.log_level = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLog_pattern() {
    return this.log_pattern;
  }

  public TSchemaScanNode setLog_pattern(@org.apache.thrift.annotation.Nullable java.lang.String log_pattern) {
    this.log_pattern = log_pattern;
    return this;
  }

  public void unsetLog_pattern() {
    this.log_pattern = null;
  }

  /** Returns true if field log_pattern is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_pattern() {
    return this.log_pattern != null;
  }

  public void setLog_patternIsSet(boolean value) {
    if (!value) {
      this.log_pattern = null;
    }
  }

  public long getLog_limit() {
    return this.log_limit;
  }

  public TSchemaScanNode setLog_limit(long log_limit) {
    this.log_limit = log_limit;
    setLog_limitIsSet(true);
    return this;
  }

  public void unsetLog_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOG_LIMIT_ISSET_ID);
  }

  /** Returns true if field log_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOG_LIMIT_ISSET_ID);
  }

  public void setLog_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOG_LIMIT_ISSET_ID, value);
  }

  public int getFrontendsSize() {
    return (this.frontends == null) ? 0 : this.frontends.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TFrontend> getFrontendsIterator() {
    return (this.frontends == null) ? null : this.frontends.iterator();
  }

  public void addToFrontends(TFrontend elem) {
    if (this.frontends == null) {
      this.frontends = new java.util.ArrayList<TFrontend>();
    }
    this.frontends.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TFrontend> getFrontends() {
    return this.frontends;
  }

  public TSchemaScanNode setFrontends(@org.apache.thrift.annotation.Nullable java.util.List<TFrontend> frontends) {
    this.frontends = frontends;
    return this;
  }

  public void unsetFrontends() {
    this.frontends = null;
  }

  /** Returns true if field frontends is set (has been assigned a value) and false otherwise */
  public boolean isSetFrontends() {
    return this.frontends != null;
  }

  public void setFrontendsIsSet(boolean value) {
    if (!value) {
      this.frontends = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCatalog_name() {
    return this.catalog_name;
  }

  public TSchemaScanNode setCatalog_name(@org.apache.thrift.annotation.Nullable java.lang.String catalog_name) {
    this.catalog_name = catalog_name;
    return this;
  }

  public void unsetCatalog_name() {
    this.catalog_name = null;
  }

  /** Returns true if field catalog_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog_name() {
    return this.catalog_name != null;
  }

  public void setCatalog_nameIsSet(boolean value) {
    if (!value) {
      this.catalog_name = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TUPLE_ID:
      if (value == null) {
        unsetTuple_id();
      } else {
        setTuple_id((java.lang.Integer)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((java.lang.String)value);
      }
      break;

    case DB:
      if (value == null) {
        unsetDb();
      } else {
        setDb((java.lang.String)value);
      }
      break;

    case TABLE:
      if (value == null) {
        unsetTable();
      } else {
        setTable((java.lang.String)value);
      }
      break;

    case WILD:
      if (value == null) {
        unsetWild();
      } else {
        setWild((java.lang.String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((java.lang.String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((java.lang.String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((java.lang.Integer)value);
      }
      break;

    case THREAD_ID:
      if (value == null) {
        unsetThread_id();
      } else {
        setThread_id((java.lang.Long)value);
      }
      break;

    case USER_IP:
      if (value == null) {
        unsetUser_ip();
      } else {
        setUser_ip((java.lang.String)value);
      }
      break;

    case CURRENT_USER_IDENT:
      if (value == null) {
        unsetCurrent_user_ident();
      } else {
        setCurrent_user_ident((io.datafibre.fibre.thrift.TUserIdentity)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((java.lang.Long)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((java.lang.Long)value);
      }
      break;

    case TABLET_ID:
      if (value == null) {
        unsetTablet_id();
      } else {
        setTablet_id((java.lang.Long)value);
      }
      break;

    case TXN_ID:
      if (value == null) {
        unsetTxn_id();
      } else {
        setTxn_id((java.lang.Long)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJob_id();
      } else {
        setJob_id((java.lang.Long)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.String)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((java.lang.Long)value);
      }
      break;

    case LOG_START_TS:
      if (value == null) {
        unsetLog_start_ts();
      } else {
        setLog_start_ts((java.lang.Long)value);
      }
      break;

    case LOG_END_TS:
      if (value == null) {
        unsetLog_end_ts();
      } else {
        setLog_end_ts((java.lang.Long)value);
      }
      break;

    case LOG_LEVEL:
      if (value == null) {
        unsetLog_level();
      } else {
        setLog_level((java.lang.String)value);
      }
      break;

    case LOG_PATTERN:
      if (value == null) {
        unsetLog_pattern();
      } else {
        setLog_pattern((java.lang.String)value);
      }
      break;

    case LOG_LIMIT:
      if (value == null) {
        unsetLog_limit();
      } else {
        setLog_limit((java.lang.Long)value);
      }
      break;

    case FRONTENDS:
      if (value == null) {
        unsetFrontends();
      } else {
        setFrontends((java.util.List<TFrontend>)value);
      }
      break;

    case CATALOG_NAME:
      if (value == null) {
        unsetCatalog_name();
      } else {
        setCatalog_name((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TUPLE_ID:
      return getTuple_id();

    case TABLE_NAME:
      return getTable_name();

    case DB:
      return getDb();

    case TABLE:
      return getTable();

    case WILD:
      return getWild();

    case USER:
      return getUser();

    case IP:
      return getIp();

    case PORT:
      return getPort();

    case THREAD_ID:
      return getThread_id();

    case USER_IP:
      return getUser_ip();

    case CURRENT_USER_IDENT:
      return getCurrent_user_ident();

    case TABLE_ID:
      return getTable_id();

    case PARTITION_ID:
      return getPartition_id();

    case TABLET_ID:
      return getTablet_id();

    case TXN_ID:
      return getTxn_id();

    case JOB_ID:
      return getJob_id();

    case LABEL:
      return getLabel();

    case TYPE:
      return getType();

    case STATE:
      return getState();

    case LIMIT:
      return getLimit();

    case LOG_START_TS:
      return getLog_start_ts();

    case LOG_END_TS:
      return getLog_end_ts();

    case LOG_LEVEL:
      return getLog_level();

    case LOG_PATTERN:
      return getLog_pattern();

    case LOG_LIMIT:
      return getLog_limit();

    case FRONTENDS:
      return getFrontends();

    case CATALOG_NAME:
      return getCatalog_name();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TUPLE_ID:
      return isSetTuple_id();
    case TABLE_NAME:
      return isSetTable_name();
    case DB:
      return isSetDb();
    case TABLE:
      return isSetTable();
    case WILD:
      return isSetWild();
    case USER:
      return isSetUser();
    case IP:
      return isSetIp();
    case PORT:
      return isSetPort();
    case THREAD_ID:
      return isSetThread_id();
    case USER_IP:
      return isSetUser_ip();
    case CURRENT_USER_IDENT:
      return isSetCurrent_user_ident();
    case TABLE_ID:
      return isSetTable_id();
    case PARTITION_ID:
      return isSetPartition_id();
    case TABLET_ID:
      return isSetTablet_id();
    case TXN_ID:
      return isSetTxn_id();
    case JOB_ID:
      return isSetJob_id();
    case LABEL:
      return isSetLabel();
    case TYPE:
      return isSetType();
    case STATE:
      return isSetState();
    case LIMIT:
      return isSetLimit();
    case LOG_START_TS:
      return isSetLog_start_ts();
    case LOG_END_TS:
      return isSetLog_end_ts();
    case LOG_LEVEL:
      return isSetLog_level();
    case LOG_PATTERN:
      return isSetLog_pattern();
    case LOG_LIMIT:
      return isSetLog_limit();
    case FRONTENDS:
      return isSetFrontends();
    case CATALOG_NAME:
      return isSetCatalog_name();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSchemaScanNode)
      return this.equals((TSchemaScanNode)that);
    return false;
  }

  public boolean equals(TSchemaScanNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tuple_id = true;
    boolean that_present_tuple_id = true;
    if (this_present_tuple_id || that_present_tuple_id) {
      if (!(this_present_tuple_id && that_present_tuple_id))
        return false;
      if (this.tuple_id != that.tuple_id)
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_table = true && this.isSetTable();
    boolean that_present_table = true && that.isSetTable();
    if (this_present_table || that_present_table) {
      if (!(this_present_table && that_present_table))
        return false;
      if (!this.table.equals(that.table))
        return false;
    }

    boolean this_present_wild = true && this.isSetWild();
    boolean that_present_wild = true && that.isSetWild();
    if (this_present_wild || that_present_wild) {
      if (!(this_present_wild && that_present_wild))
        return false;
      if (!this.wild.equals(that.wild))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_port = true && this.isSetPort();
    boolean that_present_port = true && that.isSetPort();
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_thread_id = true && this.isSetThread_id();
    boolean that_present_thread_id = true && that.isSetThread_id();
    if (this_present_thread_id || that_present_thread_id) {
      if (!(this_present_thread_id && that_present_thread_id))
        return false;
      if (this.thread_id != that.thread_id)
        return false;
    }

    boolean this_present_user_ip = true && this.isSetUser_ip();
    boolean that_present_user_ip = true && that.isSetUser_ip();
    if (this_present_user_ip || that_present_user_ip) {
      if (!(this_present_user_ip && that_present_user_ip))
        return false;
      if (!this.user_ip.equals(that.user_ip))
        return false;
    }

    boolean this_present_current_user_ident = true && this.isSetCurrent_user_ident();
    boolean that_present_current_user_ident = true && that.isSetCurrent_user_ident();
    if (this_present_current_user_ident || that_present_current_user_ident) {
      if (!(this_present_current_user_ident && that_present_current_user_ident))
        return false;
      if (!this.current_user_ident.equals(that.current_user_ident))
        return false;
    }

    boolean this_present_table_id = true && this.isSetTable_id();
    boolean that_present_table_id = true && that.isSetTable_id();
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    boolean this_present_partition_id = true && this.isSetPartition_id();
    boolean that_present_partition_id = true && that.isSetPartition_id();
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_tablet_id = true && this.isSetTablet_id();
    boolean that_present_tablet_id = true && that.isSetTablet_id();
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_txn_id = true && this.isSetTxn_id();
    boolean that_present_txn_id = true && that.isSetTxn_id();
    if (this_present_txn_id || that_present_txn_id) {
      if (!(this_present_txn_id && that_present_txn_id))
        return false;
      if (this.txn_id != that.txn_id)
        return false;
    }

    boolean this_present_job_id = true && this.isSetJob_id();
    boolean that_present_job_id = true && that.isSetJob_id();
    if (this_present_job_id || that_present_job_id) {
      if (!(this_present_job_id && that_present_job_id))
        return false;
      if (this.job_id != that.job_id)
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_limit = true && this.isSetLimit();
    boolean that_present_limit = true && that.isSetLimit();
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_log_start_ts = true && this.isSetLog_start_ts();
    boolean that_present_log_start_ts = true && that.isSetLog_start_ts();
    if (this_present_log_start_ts || that_present_log_start_ts) {
      if (!(this_present_log_start_ts && that_present_log_start_ts))
        return false;
      if (this.log_start_ts != that.log_start_ts)
        return false;
    }

    boolean this_present_log_end_ts = true && this.isSetLog_end_ts();
    boolean that_present_log_end_ts = true && that.isSetLog_end_ts();
    if (this_present_log_end_ts || that_present_log_end_ts) {
      if (!(this_present_log_end_ts && that_present_log_end_ts))
        return false;
      if (this.log_end_ts != that.log_end_ts)
        return false;
    }

    boolean this_present_log_level = true && this.isSetLog_level();
    boolean that_present_log_level = true && that.isSetLog_level();
    if (this_present_log_level || that_present_log_level) {
      if (!(this_present_log_level && that_present_log_level))
        return false;
      if (!this.log_level.equals(that.log_level))
        return false;
    }

    boolean this_present_log_pattern = true && this.isSetLog_pattern();
    boolean that_present_log_pattern = true && that.isSetLog_pattern();
    if (this_present_log_pattern || that_present_log_pattern) {
      if (!(this_present_log_pattern && that_present_log_pattern))
        return false;
      if (!this.log_pattern.equals(that.log_pattern))
        return false;
    }

    boolean this_present_log_limit = true && this.isSetLog_limit();
    boolean that_present_log_limit = true && that.isSetLog_limit();
    if (this_present_log_limit || that_present_log_limit) {
      if (!(this_present_log_limit && that_present_log_limit))
        return false;
      if (this.log_limit != that.log_limit)
        return false;
    }

    boolean this_present_frontends = true && this.isSetFrontends();
    boolean that_present_frontends = true && that.isSetFrontends();
    if (this_present_frontends || that_present_frontends) {
      if (!(this_present_frontends && that_present_frontends))
        return false;
      if (!this.frontends.equals(that.frontends))
        return false;
    }

    boolean this_present_catalog_name = true && this.isSetCatalog_name();
    boolean that_present_catalog_name = true && that.isSetCatalog_name();
    if (this_present_catalog_name || that_present_catalog_name) {
      if (!(this_present_catalog_name && that_present_catalog_name))
        return false;
      if (!this.catalog_name.equals(that.catalog_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + tuple_id;

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
    if (isSetDb())
      hashCode = hashCode * 8191 + db.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
    if (isSetTable())
      hashCode = hashCode * 8191 + table.hashCode();

    hashCode = hashCode * 8191 + ((isSetWild()) ? 131071 : 524287);
    if (isSetWild())
      hashCode = hashCode * 8191 + wild.hashCode();

    hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
    if (isSetUser())
      hashCode = hashCode * 8191 + user.hashCode();

    hashCode = hashCode * 8191 + ((isSetIp()) ? 131071 : 524287);
    if (isSetIp())
      hashCode = hashCode * 8191 + ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetPort()) ? 131071 : 524287);
    if (isSetPort())
      hashCode = hashCode * 8191 + port;

    hashCode = hashCode * 8191 + ((isSetThread_id()) ? 131071 : 524287);
    if (isSetThread_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(thread_id);

    hashCode = hashCode * 8191 + ((isSetUser_ip()) ? 131071 : 524287);
    if (isSetUser_ip())
      hashCode = hashCode * 8191 + user_ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrent_user_ident()) ? 131071 : 524287);
    if (isSetCurrent_user_ident())
      hashCode = hashCode * 8191 + current_user_ident.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_id()) ? 131071 : 524287);
    if (isSetTable_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_id);

    hashCode = hashCode * 8191 + ((isSetPartition_id()) ? 131071 : 524287);
    if (isSetPartition_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_id);

    hashCode = hashCode * 8191 + ((isSetTablet_id()) ? 131071 : 524287);
    if (isSetTablet_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tablet_id);

    hashCode = hashCode * 8191 + ((isSetTxn_id()) ? 131071 : 524287);
    if (isSetTxn_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txn_id);

    hashCode = hashCode * 8191 + ((isSetJob_id()) ? 131071 : 524287);
    if (isSetJob_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(job_id);

    hashCode = hashCode * 8191 + ((isSetLabel()) ? 131071 : 524287);
    if (isSetLabel())
      hashCode = hashCode * 8191 + label.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.hashCode();

    hashCode = hashCode * 8191 + ((isSetLimit()) ? 131071 : 524287);
    if (isSetLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(limit);

    hashCode = hashCode * 8191 + ((isSetLog_start_ts()) ? 131071 : 524287);
    if (isSetLog_start_ts())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(log_start_ts);

    hashCode = hashCode * 8191 + ((isSetLog_end_ts()) ? 131071 : 524287);
    if (isSetLog_end_ts())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(log_end_ts);

    hashCode = hashCode * 8191 + ((isSetLog_level()) ? 131071 : 524287);
    if (isSetLog_level())
      hashCode = hashCode * 8191 + log_level.hashCode();

    hashCode = hashCode * 8191 + ((isSetLog_pattern()) ? 131071 : 524287);
    if (isSetLog_pattern())
      hashCode = hashCode * 8191 + log_pattern.hashCode();

    hashCode = hashCode * 8191 + ((isSetLog_limit()) ? 131071 : 524287);
    if (isSetLog_limit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(log_limit);

    hashCode = hashCode * 8191 + ((isSetFrontends()) ? 131071 : 524287);
    if (isSetFrontends())
      hashCode = hashCode * 8191 + frontends.hashCode();

    hashCode = hashCode * 8191 + ((isSetCatalog_name()) ? 131071 : 524287);
    if (isSetCatalog_name())
      hashCode = hashCode * 8191 + catalog_name.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TSchemaScanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTuple_id(), other.isSetTuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_id, other.tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_name(), other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb(), other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable(), other.isSetTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWild(), other.isSetWild());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWild()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wild, other.wild);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUser(), other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIp(), other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPort(), other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetThread_id(), other.isSetThread_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThread_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thread_id, other.thread_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUser_ip(), other.isSetUser_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ip, other.user_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCurrent_user_ident(), other.isSetCurrent_user_ident());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_user_ident()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_user_ident, other.current_user_ident);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_id(), other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_id(), other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_id(), other.isSetTablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxn_id(), other.isSetTxn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_id, other.txn_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJob_id(), other.isSetJob_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job_id, other.job_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLabel(), other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLimit(), other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLog_start_ts(), other.isSetLog_start_ts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_start_ts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_start_ts, other.log_start_ts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLog_end_ts(), other.isSetLog_end_ts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_end_ts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_end_ts, other.log_end_ts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLog_level(), other.isSetLog_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_level, other.log_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLog_pattern(), other.isSetLog_pattern());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_pattern()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_pattern, other.log_pattern);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLog_limit(), other.isSetLog_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_limit, other.log_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFrontends(), other.isSetFrontends());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrontends()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frontends, other.frontends);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCatalog_name(), other.isSetCatalog_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog_name, other.catalog_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSchemaScanNode(");
    boolean first = true;

    sb.append("tuple_id:");
    sb.append(this.tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("table_name:");
    if (this.table_name == null) {
      sb.append("null");
    } else {
      sb.append(this.table_name);
    }
    first = false;
    if (isSetDb()) {
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
    }
    if (isSetTable()) {
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
    }
    if (isSetWild()) {
      if (!first) sb.append(", ");
      sb.append("wild:");
      if (this.wild == null) {
        sb.append("null");
      } else {
        sb.append(this.wild);
      }
      first = false;
    }
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
    }
    if (isSetIp()) {
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
    }
    if (isSetPort()) {
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
    }
    if (isSetThread_id()) {
      if (!first) sb.append(", ");
      sb.append("thread_id:");
      sb.append(this.thread_id);
      first = false;
    }
    if (isSetUser_ip()) {
      if (!first) sb.append(", ");
      sb.append("user_ip:");
      if (this.user_ip == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ip);
      }
      first = false;
    }
    if (isSetCurrent_user_ident()) {
      if (!first) sb.append(", ");
      sb.append("current_user_ident:");
      if (this.current_user_ident == null) {
        sb.append("null");
      } else {
        sb.append(this.current_user_ident);
      }
      first = false;
    }
    if (isSetTable_id()) {
      if (!first) sb.append(", ");
      sb.append("table_id:");
      sb.append(this.table_id);
      first = false;
    }
    if (isSetPartition_id()) {
      if (!first) sb.append(", ");
      sb.append("partition_id:");
      sb.append(this.partition_id);
      first = false;
    }
    if (isSetTablet_id()) {
      if (!first) sb.append(", ");
      sb.append("tablet_id:");
      sb.append(this.tablet_id);
      first = false;
    }
    if (isSetTxn_id()) {
      if (!first) sb.append(", ");
      sb.append("txn_id:");
      sb.append(this.txn_id);
      first = false;
    }
    if (isSetJob_id()) {
      if (!first) sb.append(", ");
      sb.append("job_id:");
      sb.append(this.job_id);
      first = false;
    }
    if (isSetLabel()) {
      if (!first) sb.append(", ");
      sb.append("label:");
      if (this.label == null) {
        sb.append("null");
      } else {
        sb.append(this.label);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetLimit()) {
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
    }
    if (isSetLog_start_ts()) {
      if (!first) sb.append(", ");
      sb.append("log_start_ts:");
      sb.append(this.log_start_ts);
      first = false;
    }
    if (isSetLog_end_ts()) {
      if (!first) sb.append(", ");
      sb.append("log_end_ts:");
      sb.append(this.log_end_ts);
      first = false;
    }
    if (isSetLog_level()) {
      if (!first) sb.append(", ");
      sb.append("log_level:");
      if (this.log_level == null) {
        sb.append("null");
      } else {
        sb.append(this.log_level);
      }
      first = false;
    }
    if (isSetLog_pattern()) {
      if (!first) sb.append(", ");
      sb.append("log_pattern:");
      if (this.log_pattern == null) {
        sb.append("null");
      } else {
        sb.append(this.log_pattern);
      }
      first = false;
    }
    if (isSetLog_limit()) {
      if (!first) sb.append(", ");
      sb.append("log_limit:");
      sb.append(this.log_limit);
      first = false;
    }
    if (isSetFrontends()) {
      if (!first) sb.append(", ");
      sb.append("frontends:");
      if (this.frontends == null) {
        sb.append("null");
      } else {
        sb.append(this.frontends);
      }
      first = false;
    }
    if (isSetCatalog_name()) {
      if (!first) sb.append(", ");
      sb.append("catalog_name:");
      if (this.catalog_name == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog_name);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tuple_id' because it's a primitive and you chose the non-beans generator.
    if (table_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (current_user_ident != null) {
      current_user_ident.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSchemaScanNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSchemaScanNodeStandardScheme getScheme() {
      return new TSchemaScanNodeStandardScheme();
    }
  }

  private static class TSchemaScanNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSchemaScanNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSchemaScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tuple_id = iprot.readI32();
              struct.setTuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table = iprot.readString();
              struct.setTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WILD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wild = iprot.readString();
              struct.setWildIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // THREAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.thread_id = iprot.readI64();
              struct.setThread_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_ip = iprot.readString();
              struct.setUser_ipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CURRENT_USER_IDENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.current_user_ident = new io.datafibre.fibre.thrift.TUserIdentity();
              struct.current_user_ident.read(iprot);
              struct.setCurrent_user_identIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_id = iprot.readI64();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txn_id = iprot.readI64();
              struct.setTxn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.job_id = iprot.readI64();
              struct.setJob_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.limit = iprot.readI64();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LOG_START_TS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.log_start_ts = iprot.readI64();
              struct.setLog_start_tsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LOG_END_TS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.log_end_ts = iprot.readI64();
              struct.setLog_end_tsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // LOG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.log_level = iprot.readString();
              struct.setLog_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // LOG_PATTERN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.log_pattern = iprot.readString();
              struct.setLog_patternIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // LOG_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.log_limit = iprot.readI64();
              struct.setLog_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // FRONTENDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list206 = iprot.readListBegin();
                struct.frontends = new java.util.ArrayList<TFrontend>(_list206.size);
                @org.apache.thrift.annotation.Nullable TFrontend _elem207;
                for (int _i208 = 0; _i208 < _list206.size; ++_i208)
                {
                  _elem207 = new TFrontend();
                  _elem207.read(iprot);
                  struct.frontends.add(_elem207);
                }
                iprot.readListEnd();
              }
              struct.setFrontendsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // CATALOG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catalog_name = iprot.readString();
              struct.setCatalog_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tuple_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSchemaScanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.tuple_id);
      oprot.writeFieldEnd();
      if (struct.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.table_name);
        oprot.writeFieldEnd();
      }
      if (struct.db != null) {
        if (struct.isSetDb()) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table != null) {
        if (struct.isSetTable()) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wild != null) {
        if (struct.isSetWild()) {
          oprot.writeFieldBegin(WILD_FIELD_DESC);
          oprot.writeString(struct.wild);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user != null) {
        if (struct.isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ip != null) {
        if (struct.isSetIp()) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPort()) {
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
      }
      if (struct.isSetThread_id()) {
        oprot.writeFieldBegin(THREAD_ID_FIELD_DESC);
        oprot.writeI64(struct.thread_id);
        oprot.writeFieldEnd();
      }
      if (struct.user_ip != null) {
        if (struct.isSetUser_ip()) {
          oprot.writeFieldBegin(USER_IP_FIELD_DESC);
          oprot.writeString(struct.user_ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.current_user_ident != null) {
        if (struct.isSetCurrent_user_ident()) {
          oprot.writeFieldBegin(CURRENT_USER_IDENT_FIELD_DESC);
          struct.current_user_ident.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTable_id()) {
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeI64(struct.table_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartition_id()) {
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI64(struct.partition_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTablet_id()) {
        oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
        oprot.writeI64(struct.tablet_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTxn_id()) {
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txn_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetJob_id()) {
        oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
        oprot.writeI64(struct.job_id);
        oprot.writeFieldEnd();
      }
      if (struct.label != null) {
        if (struct.isSetLabel()) {
          oprot.writeFieldBegin(LABEL_FIELD_DESC);
          oprot.writeString(struct.label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLimit()) {
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI64(struct.limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLog_start_ts()) {
        oprot.writeFieldBegin(LOG_START_TS_FIELD_DESC);
        oprot.writeI64(struct.log_start_ts);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLog_end_ts()) {
        oprot.writeFieldBegin(LOG_END_TS_FIELD_DESC);
        oprot.writeI64(struct.log_end_ts);
        oprot.writeFieldEnd();
      }
      if (struct.log_level != null) {
        if (struct.isSetLog_level()) {
          oprot.writeFieldBegin(LOG_LEVEL_FIELD_DESC);
          oprot.writeString(struct.log_level);
          oprot.writeFieldEnd();
        }
      }
      if (struct.log_pattern != null) {
        if (struct.isSetLog_pattern()) {
          oprot.writeFieldBegin(LOG_PATTERN_FIELD_DESC);
          oprot.writeString(struct.log_pattern);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLog_limit()) {
        oprot.writeFieldBegin(LOG_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.log_limit);
        oprot.writeFieldEnd();
      }
      if (struct.frontends != null) {
        if (struct.isSetFrontends()) {
          oprot.writeFieldBegin(FRONTENDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.frontends.size()));
            for (TFrontend _iter209 : struct.frontends)
            {
              _iter209.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.catalog_name != null) {
        if (struct.isSetCatalog_name()) {
          oprot.writeFieldBegin(CATALOG_NAME_FIELD_DESC);
          oprot.writeString(struct.catalog_name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSchemaScanNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSchemaScanNodeTupleScheme getScheme() {
      return new TSchemaScanNodeTupleScheme();
    }
  }

  private static class TSchemaScanNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSchemaScanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSchemaScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.tuple_id);
      oprot.writeString(struct.table_name);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDb()) {
        optionals.set(0);
      }
      if (struct.isSetTable()) {
        optionals.set(1);
      }
      if (struct.isSetWild()) {
        optionals.set(2);
      }
      if (struct.isSetUser()) {
        optionals.set(3);
      }
      if (struct.isSetIp()) {
        optionals.set(4);
      }
      if (struct.isSetPort()) {
        optionals.set(5);
      }
      if (struct.isSetThread_id()) {
        optionals.set(6);
      }
      if (struct.isSetUser_ip()) {
        optionals.set(7);
      }
      if (struct.isSetCurrent_user_ident()) {
        optionals.set(8);
      }
      if (struct.isSetTable_id()) {
        optionals.set(9);
      }
      if (struct.isSetPartition_id()) {
        optionals.set(10);
      }
      if (struct.isSetTablet_id()) {
        optionals.set(11);
      }
      if (struct.isSetTxn_id()) {
        optionals.set(12);
      }
      if (struct.isSetJob_id()) {
        optionals.set(13);
      }
      if (struct.isSetLabel()) {
        optionals.set(14);
      }
      if (struct.isSetType()) {
        optionals.set(15);
      }
      if (struct.isSetState()) {
        optionals.set(16);
      }
      if (struct.isSetLimit()) {
        optionals.set(17);
      }
      if (struct.isSetLog_start_ts()) {
        optionals.set(18);
      }
      if (struct.isSetLog_end_ts()) {
        optionals.set(19);
      }
      if (struct.isSetLog_level()) {
        optionals.set(20);
      }
      if (struct.isSetLog_pattern()) {
        optionals.set(21);
      }
      if (struct.isSetLog_limit()) {
        optionals.set(22);
      }
      if (struct.isSetFrontends()) {
        optionals.set(23);
      }
      if (struct.isSetCatalog_name()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetDb()) {
        oprot.writeString(struct.db);
      }
      if (struct.isSetTable()) {
        oprot.writeString(struct.table);
      }
      if (struct.isSetWild()) {
        oprot.writeString(struct.wild);
      }
      if (struct.isSetUser()) {
        oprot.writeString(struct.user);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetThread_id()) {
        oprot.writeI64(struct.thread_id);
      }
      if (struct.isSetUser_ip()) {
        oprot.writeString(struct.user_ip);
      }
      if (struct.isSetCurrent_user_ident()) {
        struct.current_user_ident.write(oprot);
      }
      if (struct.isSetTable_id()) {
        oprot.writeI64(struct.table_id);
      }
      if (struct.isSetPartition_id()) {
        oprot.writeI64(struct.partition_id);
      }
      if (struct.isSetTablet_id()) {
        oprot.writeI64(struct.tablet_id);
      }
      if (struct.isSetTxn_id()) {
        oprot.writeI64(struct.txn_id);
      }
      if (struct.isSetJob_id()) {
        oprot.writeI64(struct.job_id);
      }
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetLimit()) {
        oprot.writeI64(struct.limit);
      }
      if (struct.isSetLog_start_ts()) {
        oprot.writeI64(struct.log_start_ts);
      }
      if (struct.isSetLog_end_ts()) {
        oprot.writeI64(struct.log_end_ts);
      }
      if (struct.isSetLog_level()) {
        oprot.writeString(struct.log_level);
      }
      if (struct.isSetLog_pattern()) {
        oprot.writeString(struct.log_pattern);
      }
      if (struct.isSetLog_limit()) {
        oprot.writeI64(struct.log_limit);
      }
      if (struct.isSetFrontends()) {
        {
          oprot.writeI32(struct.frontends.size());
          for (TFrontend _iter210 : struct.frontends)
          {
            _iter210.write(oprot);
          }
        }
      }
      if (struct.isSetCatalog_name()) {
        oprot.writeString(struct.catalog_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSchemaScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tuple_id = iprot.readI32();
      struct.setTuple_idIsSet(true);
      struct.table_name = iprot.readString();
      struct.setTable_nameIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.db = iprot.readString();
        struct.setDbIsSet(true);
      }
      if (incoming.get(1)) {
        struct.table = iprot.readString();
        struct.setTableIsSet(true);
      }
      if (incoming.get(2)) {
        struct.wild = iprot.readString();
        struct.setWildIsSet(true);
      }
      if (incoming.get(3)) {
        struct.user = iprot.readString();
        struct.setUserIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(5)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(6)) {
        struct.thread_id = iprot.readI64();
        struct.setThread_idIsSet(true);
      }
      if (incoming.get(7)) {
        struct.user_ip = iprot.readString();
        struct.setUser_ipIsSet(true);
      }
      if (incoming.get(8)) {
        struct.current_user_ident = new io.datafibre.fibre.thrift.TUserIdentity();
        struct.current_user_ident.read(iprot);
        struct.setCurrent_user_identIsSet(true);
      }
      if (incoming.get(9)) {
        struct.table_id = iprot.readI64();
        struct.setTable_idIsSet(true);
      }
      if (incoming.get(10)) {
        struct.partition_id = iprot.readI64();
        struct.setPartition_idIsSet(true);
      }
      if (incoming.get(11)) {
        struct.tablet_id = iprot.readI64();
        struct.setTablet_idIsSet(true);
      }
      if (incoming.get(12)) {
        struct.txn_id = iprot.readI64();
        struct.setTxn_idIsSet(true);
      }
      if (incoming.get(13)) {
        struct.job_id = iprot.readI64();
        struct.setJob_idIsSet(true);
      }
      if (incoming.get(14)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(15)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.limit = iprot.readI64();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(18)) {
        struct.log_start_ts = iprot.readI64();
        struct.setLog_start_tsIsSet(true);
      }
      if (incoming.get(19)) {
        struct.log_end_ts = iprot.readI64();
        struct.setLog_end_tsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.log_level = iprot.readString();
        struct.setLog_levelIsSet(true);
      }
      if (incoming.get(21)) {
        struct.log_pattern = iprot.readString();
        struct.setLog_patternIsSet(true);
      }
      if (incoming.get(22)) {
        struct.log_limit = iprot.readI64();
        struct.setLog_limitIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list211 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.frontends = new java.util.ArrayList<TFrontend>(_list211.size);
          @org.apache.thrift.annotation.Nullable TFrontend _elem212;
          for (int _i213 = 0; _i213 < _list211.size; ++_i213)
          {
            _elem212 = new TFrontend();
            _elem212.read(iprot);
            struct.frontends.add(_elem212);
          }
        }
        struct.setFrontendsIsSet(true);
      }
      if (incoming.get(24)) {
        struct.catalog_name = iprot.readString();
        struct.setCatalog_nameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

