/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TTabletReplicationInfo implements org.apache.thrift.TBase<TTabletReplicationInfo, TTabletReplicationInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TTabletReplicationInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTabletReplicationInfo");

  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SRC_TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("src_tablet_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REPLICA_REPLICATION_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("replica_replication_infos", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTabletReplicationInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTabletReplicationInfoTupleSchemeFactory();

  public long tablet_id; // optional
  public long src_tablet_id; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TReplicaReplicationInfo> replica_replication_infos; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLET_ID((short)1, "tablet_id"),
    SRC_TABLET_ID((short)2, "src_tablet_id"),
    REPLICA_REPLICATION_INFOS((short)3, "replica_replication_infos");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLET_ID
          return TABLET_ID;
        case 2: // SRC_TABLET_ID
          return SRC_TABLET_ID;
        case 3: // REPLICA_REPLICATION_INFOS
          return REPLICA_REPLICATION_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLET_ID_ISSET_ID = 0;
  private static final int __SRC_TABLET_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TABLET_ID,_Fields.SRC_TABLET_ID,_Fields.REPLICA_REPLICATION_INFOS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SRC_TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("src_tablet_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REPLICA_REPLICATION_INFOS, new org.apache.thrift.meta_data.FieldMetaData("replica_replication_infos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TReplicaReplicationInfo.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTabletReplicationInfo.class, metaDataMap);
  }

  public TTabletReplicationInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTabletReplicationInfo(TTabletReplicationInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tablet_id = other.tablet_id;
    this.src_tablet_id = other.src_tablet_id;
    if (other.isSetReplica_replication_infos()) {
      java.util.List<TReplicaReplicationInfo> __this__replica_replication_infos = new java.util.ArrayList<TReplicaReplicationInfo>(other.replica_replication_infos.size());
      for (TReplicaReplicationInfo other_element : other.replica_replication_infos) {
        __this__replica_replication_infos.add(new TReplicaReplicationInfo(other_element));
      }
      this.replica_replication_infos = __this__replica_replication_infos;
    }
  }

  @Override
  public TTabletReplicationInfo deepCopy() {
    return new TTabletReplicationInfo(this);
  }

  @Override
  public void clear() {
    setTablet_idIsSet(false);
    this.tablet_id = 0;
    setSrc_tablet_idIsSet(false);
    this.src_tablet_id = 0;
    this.replica_replication_infos = null;
  }

  public long getTablet_id() {
    return this.tablet_id;
  }

  public TTabletReplicationInfo setTablet_id(long tablet_id) {
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    return this;
  }

  public void unsetTablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  public long getSrc_tablet_id() {
    return this.src_tablet_id;
  }

  public TTabletReplicationInfo setSrc_tablet_id(long src_tablet_id) {
    this.src_tablet_id = src_tablet_id;
    setSrc_tablet_idIsSet(true);
    return this;
  }

  public void unsetSrc_tablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRC_TABLET_ID_ISSET_ID);
  }

  /** Returns true if field src_tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_tablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRC_TABLET_ID_ISSET_ID);
  }

  public void setSrc_tablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRC_TABLET_ID_ISSET_ID, value);
  }

  public int getReplica_replication_infosSize() {
    return (this.replica_replication_infos == null) ? 0 : this.replica_replication_infos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TReplicaReplicationInfo> getReplica_replication_infosIterator() {
    return (this.replica_replication_infos == null) ? null : this.replica_replication_infos.iterator();
  }

  public void addToReplica_replication_infos(TReplicaReplicationInfo elem) {
    if (this.replica_replication_infos == null) {
      this.replica_replication_infos = new java.util.ArrayList<TReplicaReplicationInfo>();
    }
    this.replica_replication_infos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TReplicaReplicationInfo> getReplica_replication_infos() {
    return this.replica_replication_infos;
  }

  public TTabletReplicationInfo setReplica_replication_infos(@org.apache.thrift.annotation.Nullable java.util.List<TReplicaReplicationInfo> replica_replication_infos) {
    this.replica_replication_infos = replica_replication_infos;
    return this;
  }

  public void unsetReplica_replication_infos() {
    this.replica_replication_infos = null;
  }

  /** Returns true if field replica_replication_infos is set (has been assigned a value) and false otherwise */
  public boolean isSetReplica_replication_infos() {
    return this.replica_replication_infos != null;
  }

  public void setReplica_replication_infosIsSet(boolean value) {
    if (!value) {
      this.replica_replication_infos = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLET_ID:
      if (value == null) {
        unsetTablet_id();
      } else {
        setTablet_id((java.lang.Long)value);
      }
      break;

    case SRC_TABLET_ID:
      if (value == null) {
        unsetSrc_tablet_id();
      } else {
        setSrc_tablet_id((java.lang.Long)value);
      }
      break;

    case REPLICA_REPLICATION_INFOS:
      if (value == null) {
        unsetReplica_replication_infos();
      } else {
        setReplica_replication_infos((java.util.List<TReplicaReplicationInfo>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLET_ID:
      return getTablet_id();

    case SRC_TABLET_ID:
      return getSrc_tablet_id();

    case REPLICA_REPLICATION_INFOS:
      return getReplica_replication_infos();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLET_ID:
      return isSetTablet_id();
    case SRC_TABLET_ID:
      return isSetSrc_tablet_id();
    case REPLICA_REPLICATION_INFOS:
      return isSetReplica_replication_infos();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTabletReplicationInfo)
      return this.equals((TTabletReplicationInfo)that);
    return false;
  }

  public boolean equals(TTabletReplicationInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tablet_id = true && this.isSetTablet_id();
    boolean that_present_tablet_id = true && that.isSetTablet_id();
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_src_tablet_id = true && this.isSetSrc_tablet_id();
    boolean that_present_src_tablet_id = true && that.isSetSrc_tablet_id();
    if (this_present_src_tablet_id || that_present_src_tablet_id) {
      if (!(this_present_src_tablet_id && that_present_src_tablet_id))
        return false;
      if (this.src_tablet_id != that.src_tablet_id)
        return false;
    }

    boolean this_present_replica_replication_infos = true && this.isSetReplica_replication_infos();
    boolean that_present_replica_replication_infos = true && that.isSetReplica_replication_infos();
    if (this_present_replica_replication_infos || that_present_replica_replication_infos) {
      if (!(this_present_replica_replication_infos && that_present_replica_replication_infos))
        return false;
      if (!this.replica_replication_infos.equals(that.replica_replication_infos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTablet_id()) ? 131071 : 524287);
    if (isSetTablet_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tablet_id);

    hashCode = hashCode * 8191 + ((isSetSrc_tablet_id()) ? 131071 : 524287);
    if (isSetSrc_tablet_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(src_tablet_id);

    hashCode = hashCode * 8191 + ((isSetReplica_replication_infos()) ? 131071 : 524287);
    if (isSetReplica_replication_infos())
      hashCode = hashCode * 8191 + replica_replication_infos.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TTabletReplicationInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTablet_id(), other.isSetTablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrc_tablet_id(), other.isSetSrc_tablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_tablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_tablet_id, other.src_tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReplica_replication_infos(), other.isSetReplica_replication_infos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplica_replication_infos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replica_replication_infos, other.replica_replication_infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTabletReplicationInfo(");
    boolean first = true;

    if (isSetTablet_id()) {
      sb.append("tablet_id:");
      sb.append(this.tablet_id);
      first = false;
    }
    if (isSetSrc_tablet_id()) {
      if (!first) sb.append(", ");
      sb.append("src_tablet_id:");
      sb.append(this.src_tablet_id);
      first = false;
    }
    if (isSetReplica_replication_infos()) {
      if (!first) sb.append(", ");
      sb.append("replica_replication_infos:");
      if (this.replica_replication_infos == null) {
        sb.append("null");
      } else {
        sb.append(this.replica_replication_infos);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTabletReplicationInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTabletReplicationInfoStandardScheme getScheme() {
      return new TTabletReplicationInfoStandardScheme();
    }
  }

  private static class TTabletReplicationInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTabletReplicationInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTabletReplicationInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SRC_TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.src_tablet_id = iprot.readI64();
              struct.setSrc_tablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPLICA_REPLICATION_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list766 = iprot.readListBegin();
                struct.replica_replication_infos = new java.util.ArrayList<TReplicaReplicationInfo>(_list766.size);
                @org.apache.thrift.annotation.Nullable TReplicaReplicationInfo _elem767;
                for (int _i768 = 0; _i768 < _list766.size; ++_i768)
                {
                  _elem767 = new TReplicaReplicationInfo();
                  _elem767.read(iprot);
                  struct.replica_replication_infos.add(_elem767);
                }
                iprot.readListEnd();
              }
              struct.setReplica_replication_infosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTabletReplicationInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTablet_id()) {
        oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
        oprot.writeI64(struct.tablet_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSrc_tablet_id()) {
        oprot.writeFieldBegin(SRC_TABLET_ID_FIELD_DESC);
        oprot.writeI64(struct.src_tablet_id);
        oprot.writeFieldEnd();
      }
      if (struct.replica_replication_infos != null) {
        if (struct.isSetReplica_replication_infos()) {
          oprot.writeFieldBegin(REPLICA_REPLICATION_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.replica_replication_infos.size()));
            for (TReplicaReplicationInfo _iter769 : struct.replica_replication_infos)
            {
              _iter769.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTabletReplicationInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTabletReplicationInfoTupleScheme getScheme() {
      return new TTabletReplicationInfoTupleScheme();
    }
  }

  private static class TTabletReplicationInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTabletReplicationInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTabletReplicationInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTablet_id()) {
        optionals.set(0);
      }
      if (struct.isSetSrc_tablet_id()) {
        optionals.set(1);
      }
      if (struct.isSetReplica_replication_infos()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTablet_id()) {
        oprot.writeI64(struct.tablet_id);
      }
      if (struct.isSetSrc_tablet_id()) {
        oprot.writeI64(struct.src_tablet_id);
      }
      if (struct.isSetReplica_replication_infos()) {
        {
          oprot.writeI32(struct.replica_replication_infos.size());
          for (TReplicaReplicationInfo _iter770 : struct.replica_replication_infos)
          {
            _iter770.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTabletReplicationInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.tablet_id = iprot.readI64();
        struct.setTablet_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.src_tablet_id = iprot.readI64();
        struct.setSrc_tablet_idIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list771 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.replica_replication_infos = new java.util.ArrayList<TReplicaReplicationInfo>(_list771.size);
          @org.apache.thrift.annotation.Nullable TReplicaReplicationInfo _elem772;
          for (int _i773 = 0; _i773 < _list771.size; ++_i773)
          {
            _elem772 = new TReplicaReplicationInfo();
            _elem772.read(iprot);
            struct.replica_replication_infos.add(_elem772);
          }
        }
        struct.setReplica_replication_infosIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

