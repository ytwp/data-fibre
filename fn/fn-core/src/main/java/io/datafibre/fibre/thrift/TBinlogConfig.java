/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TBinlogConfig implements org.apache.thrift.TBase<TBinlogConfig, TBinlogConfig._Fields>, java.io.Serializable, Cloneable, Comparable<TBinlogConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBinlogConfig");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField BINLOG_ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("binlog_enable", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField BINLOG_TTL_SECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("binlog_ttl_second", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField BINLOG_MAX_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("binlog_max_size", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TBinlogConfigStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TBinlogConfigTupleSchemeFactory();

  public long version; // optional
  public boolean binlog_enable; // optional
  public long binlog_ttl_second; // optional
  public long binlog_max_size; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    BINLOG_ENABLE((short)2, "binlog_enable"),
    BINLOG_TTL_SECOND((short)3, "binlog_ttl_second"),
    BINLOG_MAX_SIZE((short)4, "binlog_max_size");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // BINLOG_ENABLE
          return BINLOG_ENABLE;
        case 3: // BINLOG_TTL_SECOND
          return BINLOG_TTL_SECOND;
        case 4: // BINLOG_MAX_SIZE
          return BINLOG_MAX_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __BINLOG_ENABLE_ISSET_ID = 1;
  private static final int __BINLOG_TTL_SECOND_ISSET_ID = 2;
  private static final int __BINLOG_MAX_SIZE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.VERSION,_Fields.BINLOG_ENABLE,_Fields.BINLOG_TTL_SECOND,_Fields.BINLOG_MAX_SIZE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BINLOG_ENABLE, new org.apache.thrift.meta_data.FieldMetaData("binlog_enable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BINLOG_TTL_SECOND, new org.apache.thrift.meta_data.FieldMetaData("binlog_ttl_second", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BINLOG_MAX_SIZE, new org.apache.thrift.meta_data.FieldMetaData("binlog_max_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBinlogConfig.class, metaDataMap);
  }

  public TBinlogConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBinlogConfig(TBinlogConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    this.binlog_enable = other.binlog_enable;
    this.binlog_ttl_second = other.binlog_ttl_second;
    this.binlog_max_size = other.binlog_max_size;
  }

  @Override
  public TBinlogConfig deepCopy() {
    return new TBinlogConfig(this);
  }

  @Override
  public void clear() {
    setVersionIsSet(false);
    this.version = 0;
    setBinlog_enableIsSet(false);
    this.binlog_enable = false;
    setBinlog_ttl_secondIsSet(false);
    this.binlog_ttl_second = 0;
    setBinlog_max_sizeIsSet(false);
    this.binlog_max_size = 0;
  }

  public long getVersion() {
    return this.version;
  }

  public TBinlogConfig setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public boolean isBinlog_enable() {
    return this.binlog_enable;
  }

  public TBinlogConfig setBinlog_enable(boolean binlog_enable) {
    this.binlog_enable = binlog_enable;
    setBinlog_enableIsSet(true);
    return this;
  }

  public void unsetBinlog_enable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BINLOG_ENABLE_ISSET_ID);
  }

  /** Returns true if field binlog_enable is set (has been assigned a value) and false otherwise */
  public boolean isSetBinlog_enable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BINLOG_ENABLE_ISSET_ID);
  }

  public void setBinlog_enableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BINLOG_ENABLE_ISSET_ID, value);
  }

  public long getBinlog_ttl_second() {
    return this.binlog_ttl_second;
  }

  public TBinlogConfig setBinlog_ttl_second(long binlog_ttl_second) {
    this.binlog_ttl_second = binlog_ttl_second;
    setBinlog_ttl_secondIsSet(true);
    return this;
  }

  public void unsetBinlog_ttl_second() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BINLOG_TTL_SECOND_ISSET_ID);
  }

  /** Returns true if field binlog_ttl_second is set (has been assigned a value) and false otherwise */
  public boolean isSetBinlog_ttl_second() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BINLOG_TTL_SECOND_ISSET_ID);
  }

  public void setBinlog_ttl_secondIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BINLOG_TTL_SECOND_ISSET_ID, value);
  }

  public long getBinlog_max_size() {
    return this.binlog_max_size;
  }

  public TBinlogConfig setBinlog_max_size(long binlog_max_size) {
    this.binlog_max_size = binlog_max_size;
    setBinlog_max_sizeIsSet(true);
    return this;
  }

  public void unsetBinlog_max_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BINLOG_MAX_SIZE_ISSET_ID);
  }

  /** Returns true if field binlog_max_size is set (has been assigned a value) and false otherwise */
  public boolean isSetBinlog_max_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BINLOG_MAX_SIZE_ISSET_ID);
  }

  public void setBinlog_max_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BINLOG_MAX_SIZE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Long)value);
      }
      break;

    case BINLOG_ENABLE:
      if (value == null) {
        unsetBinlog_enable();
      } else {
        setBinlog_enable((java.lang.Boolean)value);
      }
      break;

    case BINLOG_TTL_SECOND:
      if (value == null) {
        unsetBinlog_ttl_second();
      } else {
        setBinlog_ttl_second((java.lang.Long)value);
      }
      break;

    case BINLOG_MAX_SIZE:
      if (value == null) {
        unsetBinlog_max_size();
      } else {
        setBinlog_max_size((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case BINLOG_ENABLE:
      return isBinlog_enable();

    case BINLOG_TTL_SECOND:
      return getBinlog_ttl_second();

    case BINLOG_MAX_SIZE:
      return getBinlog_max_size();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case BINLOG_ENABLE:
      return isSetBinlog_enable();
    case BINLOG_TTL_SECOND:
      return isSetBinlog_ttl_second();
    case BINLOG_MAX_SIZE:
      return isSetBinlog_max_size();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TBinlogConfig)
      return this.equals((TBinlogConfig)that);
    return false;
  }

  public boolean equals(TBinlogConfig that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_binlog_enable = true && this.isSetBinlog_enable();
    boolean that_present_binlog_enable = true && that.isSetBinlog_enable();
    if (this_present_binlog_enable || that_present_binlog_enable) {
      if (!(this_present_binlog_enable && that_present_binlog_enable))
        return false;
      if (this.binlog_enable != that.binlog_enable)
        return false;
    }

    boolean this_present_binlog_ttl_second = true && this.isSetBinlog_ttl_second();
    boolean that_present_binlog_ttl_second = true && that.isSetBinlog_ttl_second();
    if (this_present_binlog_ttl_second || that_present_binlog_ttl_second) {
      if (!(this_present_binlog_ttl_second && that_present_binlog_ttl_second))
        return false;
      if (this.binlog_ttl_second != that.binlog_ttl_second)
        return false;
    }

    boolean this_present_binlog_max_size = true && this.isSetBinlog_max_size();
    boolean that_present_binlog_max_size = true && that.isSetBinlog_max_size();
    if (this_present_binlog_max_size || that_present_binlog_max_size) {
      if (!(this_present_binlog_max_size && that_present_binlog_max_size))
        return false;
      if (this.binlog_max_size != that.binlog_max_size)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

    hashCode = hashCode * 8191 + ((isSetBinlog_enable()) ? 131071 : 524287);
    if (isSetBinlog_enable())
      hashCode = hashCode * 8191 + ((binlog_enable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBinlog_ttl_second()) ? 131071 : 524287);
    if (isSetBinlog_ttl_second())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(binlog_ttl_second);

    hashCode = hashCode * 8191 + ((isSetBinlog_max_size()) ? 131071 : 524287);
    if (isSetBinlog_max_size())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(binlog_max_size);

    return hashCode;
  }

  @Override
  public int compareTo(TBinlogConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBinlog_enable(), other.isSetBinlog_enable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinlog_enable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binlog_enable, other.binlog_enable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBinlog_ttl_second(), other.isSetBinlog_ttl_second());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinlog_ttl_second()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binlog_ttl_second, other.binlog_ttl_second);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBinlog_max_size(), other.isSetBinlog_max_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinlog_max_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binlog_max_size, other.binlog_max_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TBinlogConfig(");
    boolean first = true;

    if (isSetVersion()) {
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetBinlog_enable()) {
      if (!first) sb.append(", ");
      sb.append("binlog_enable:");
      sb.append(this.binlog_enable);
      first = false;
    }
    if (isSetBinlog_ttl_second()) {
      if (!first) sb.append(", ");
      sb.append("binlog_ttl_second:");
      sb.append(this.binlog_ttl_second);
      first = false;
    }
    if (isSetBinlog_max_size()) {
      if (!first) sb.append(", ");
      sb.append("binlog_max_size:");
      sb.append(this.binlog_max_size);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBinlogConfigStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TBinlogConfigStandardScheme getScheme() {
      return new TBinlogConfigStandardScheme();
    }
  }

  private static class TBinlogConfigStandardScheme extends org.apache.thrift.scheme.StandardScheme<TBinlogConfig> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TBinlogConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BINLOG_ENABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.binlog_enable = iprot.readBool();
              struct.setBinlog_enableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BINLOG_TTL_SECOND
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.binlog_ttl_second = iprot.readI64();
              struct.setBinlog_ttl_secondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BINLOG_MAX_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.binlog_max_size = iprot.readI64();
              struct.setBinlog_max_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TBinlogConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI64(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBinlog_enable()) {
        oprot.writeFieldBegin(BINLOG_ENABLE_FIELD_DESC);
        oprot.writeBool(struct.binlog_enable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBinlog_ttl_second()) {
        oprot.writeFieldBegin(BINLOG_TTL_SECOND_FIELD_DESC);
        oprot.writeI64(struct.binlog_ttl_second);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBinlog_max_size()) {
        oprot.writeFieldBegin(BINLOG_MAX_SIZE_FIELD_DESC);
        oprot.writeI64(struct.binlog_max_size);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBinlogConfigTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TBinlogConfigTupleScheme getScheme() {
      return new TBinlogConfigTupleScheme();
    }
  }

  private static class TBinlogConfigTupleScheme extends org.apache.thrift.scheme.TupleScheme<TBinlogConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBinlogConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetBinlog_enable()) {
        optionals.set(1);
      }
      if (struct.isSetBinlog_ttl_second()) {
        optionals.set(2);
      }
      if (struct.isSetBinlog_max_size()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetVersion()) {
        oprot.writeI64(struct.version);
      }
      if (struct.isSetBinlog_enable()) {
        oprot.writeBool(struct.binlog_enable);
      }
      if (struct.isSetBinlog_ttl_second()) {
        oprot.writeI64(struct.binlog_ttl_second);
      }
      if (struct.isSetBinlog_max_size()) {
        oprot.writeI64(struct.binlog_max_size);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBinlogConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.version = iprot.readI64();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.binlog_enable = iprot.readBool();
        struct.setBinlog_enableIsSet(true);
      }
      if (incoming.get(2)) {
        struct.binlog_ttl_second = iprot.readI64();
        struct.setBinlog_ttl_secondIsSet(true);
      }
      if (incoming.get(3)) {
        struct.binlog_max_size = iprot.readI64();
        struct.setBinlog_max_sizeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

