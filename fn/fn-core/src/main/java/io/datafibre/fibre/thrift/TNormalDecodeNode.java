/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TNormalDecodeNode implements org.apache.thrift.TBase<TNormalDecodeNode, TNormalDecodeNode._Fields>, java.io.Serializable, Cloneable, Comparable<TNormalDecodeNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNormalDecodeNode");

  private static final org.apache.thrift.protocol.TField FROM_DICT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("from_dict_ids", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TO_STRING_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("to_string_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SLOT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("slot_ids", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField STRING_FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("string_functions", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TNormalDecodeNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TNormalDecodeNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> from_dict_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> to_string_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> slot_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> string_functions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FROM_DICT_IDS((short)1, "from_dict_ids"),
    TO_STRING_IDS((short)2, "to_string_ids"),
    SLOT_IDS((short)3, "slot_ids"),
    STRING_FUNCTIONS((short)4, "string_functions");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FROM_DICT_IDS
          return FROM_DICT_IDS;
        case 2: // TO_STRING_IDS
          return TO_STRING_IDS;
        case 3: // SLOT_IDS
          return SLOT_IDS;
        case 4: // STRING_FUNCTIONS
          return STRING_FUNCTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.FROM_DICT_IDS,_Fields.TO_STRING_IDS,_Fields.SLOT_IDS,_Fields.STRING_FUNCTIONS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FROM_DICT_IDS, new org.apache.thrift.meta_data.FieldMetaData("from_dict_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TO_STRING_IDS, new org.apache.thrift.meta_data.FieldMetaData("to_string_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SLOT_IDS, new org.apache.thrift.meta_data.FieldMetaData("slot_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    tmpMap.put(_Fields.STRING_FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("string_functions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNormalDecodeNode.class, metaDataMap);
  }

  public TNormalDecodeNode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNormalDecodeNode(TNormalDecodeNode other) {
    if (other.isSetFrom_dict_ids()) {
      java.util.List<java.lang.Integer> __this__from_dict_ids = new java.util.ArrayList<java.lang.Integer>(other.from_dict_ids);
      this.from_dict_ids = __this__from_dict_ids;
    }
    if (other.isSetTo_string_ids()) {
      java.util.List<java.lang.Integer> __this__to_string_ids = new java.util.ArrayList<java.lang.Integer>(other.to_string_ids);
      this.to_string_ids = __this__to_string_ids;
    }
    if (other.isSetSlot_ids()) {
      java.util.List<java.lang.Integer> __this__slot_ids = new java.util.ArrayList<java.lang.Integer>(other.slot_ids.size());
      for (java.lang.Integer other_element : other.slot_ids) {
        __this__slot_ids.add(other_element);
      }
      this.slot_ids = __this__slot_ids;
    }
    if (other.isSetString_functions()) {
      java.util.List<java.nio.ByteBuffer> __this__string_functions = new java.util.ArrayList<java.nio.ByteBuffer>(other.string_functions);
      this.string_functions = __this__string_functions;
    }
  }

  @Override
  public TNormalDecodeNode deepCopy() {
    return new TNormalDecodeNode(this);
  }

  @Override
  public void clear() {
    this.from_dict_ids = null;
    this.to_string_ids = null;
    this.slot_ids = null;
    this.string_functions = null;
  }

  public int getFrom_dict_idsSize() {
    return (this.from_dict_ids == null) ? 0 : this.from_dict_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getFrom_dict_idsIterator() {
    return (this.from_dict_ids == null) ? null : this.from_dict_ids.iterator();
  }

  public void addToFrom_dict_ids(int elem) {
    if (this.from_dict_ids == null) {
      this.from_dict_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.from_dict_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getFrom_dict_ids() {
    return this.from_dict_ids;
  }

  public TNormalDecodeNode setFrom_dict_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> from_dict_ids) {
    this.from_dict_ids = from_dict_ids;
    return this;
  }

  public void unsetFrom_dict_ids() {
    this.from_dict_ids = null;
  }

  /** Returns true if field from_dict_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetFrom_dict_ids() {
    return this.from_dict_ids != null;
  }

  public void setFrom_dict_idsIsSet(boolean value) {
    if (!value) {
      this.from_dict_ids = null;
    }
  }

  public int getTo_string_idsSize() {
    return (this.to_string_ids == null) ? 0 : this.to_string_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getTo_string_idsIterator() {
    return (this.to_string_ids == null) ? null : this.to_string_ids.iterator();
  }

  public void addToTo_string_ids(int elem) {
    if (this.to_string_ids == null) {
      this.to_string_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.to_string_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getTo_string_ids() {
    return this.to_string_ids;
  }

  public TNormalDecodeNode setTo_string_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> to_string_ids) {
    this.to_string_ids = to_string_ids;
    return this;
  }

  public void unsetTo_string_ids() {
    this.to_string_ids = null;
  }

  /** Returns true if field to_string_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetTo_string_ids() {
    return this.to_string_ids != null;
  }

  public void setTo_string_idsIsSet(boolean value) {
    if (!value) {
      this.to_string_ids = null;
    }
  }

  public int getSlot_idsSize() {
    return (this.slot_ids == null) ? 0 : this.slot_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getSlot_idsIterator() {
    return (this.slot_ids == null) ? null : this.slot_ids.iterator();
  }

  public void addToSlot_ids(int elem) {
    if (this.slot_ids == null) {
      this.slot_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.slot_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getSlot_ids() {
    return this.slot_ids;
  }

  public TNormalDecodeNode setSlot_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> slot_ids) {
    this.slot_ids = slot_ids;
    return this;
  }

  public void unsetSlot_ids() {
    this.slot_ids = null;
  }

  /** Returns true if field slot_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetSlot_ids() {
    return this.slot_ids != null;
  }

  public void setSlot_idsIsSet(boolean value) {
    if (!value) {
      this.slot_ids = null;
    }
  }

  public int getString_functionsSize() {
    return (this.string_functions == null) ? 0 : this.string_functions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getString_functionsIterator() {
    return (this.string_functions == null) ? null : this.string_functions.iterator();
  }

  public void addToString_functions(java.nio.ByteBuffer elem) {
    if (this.string_functions == null) {
      this.string_functions = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.string_functions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getString_functions() {
    return this.string_functions;
  }

  public TNormalDecodeNode setString_functions(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> string_functions) {
    this.string_functions = string_functions;
    return this;
  }

  public void unsetString_functions() {
    this.string_functions = null;
  }

  /** Returns true if field string_functions is set (has been assigned a value) and false otherwise */
  public boolean isSetString_functions() {
    return this.string_functions != null;
  }

  public void setString_functionsIsSet(boolean value) {
    if (!value) {
      this.string_functions = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FROM_DICT_IDS:
      if (value == null) {
        unsetFrom_dict_ids();
      } else {
        setFrom_dict_ids((java.util.List<java.lang.Integer>)value);
      }
      break;

    case TO_STRING_IDS:
      if (value == null) {
        unsetTo_string_ids();
      } else {
        setTo_string_ids((java.util.List<java.lang.Integer>)value);
      }
      break;

    case SLOT_IDS:
      if (value == null) {
        unsetSlot_ids();
      } else {
        setSlot_ids((java.util.List<java.lang.Integer>)value);
      }
      break;

    case STRING_FUNCTIONS:
      if (value == null) {
        unsetString_functions();
      } else {
        setString_functions((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FROM_DICT_IDS:
      return getFrom_dict_ids();

    case TO_STRING_IDS:
      return getTo_string_ids();

    case SLOT_IDS:
      return getSlot_ids();

    case STRING_FUNCTIONS:
      return getString_functions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FROM_DICT_IDS:
      return isSetFrom_dict_ids();
    case TO_STRING_IDS:
      return isSetTo_string_ids();
    case SLOT_IDS:
      return isSetSlot_ids();
    case STRING_FUNCTIONS:
      return isSetString_functions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TNormalDecodeNode)
      return this.equals((TNormalDecodeNode)that);
    return false;
  }

  public boolean equals(TNormalDecodeNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_from_dict_ids = true && this.isSetFrom_dict_ids();
    boolean that_present_from_dict_ids = true && that.isSetFrom_dict_ids();
    if (this_present_from_dict_ids || that_present_from_dict_ids) {
      if (!(this_present_from_dict_ids && that_present_from_dict_ids))
        return false;
      if (!this.from_dict_ids.equals(that.from_dict_ids))
        return false;
    }

    boolean this_present_to_string_ids = true && this.isSetTo_string_ids();
    boolean that_present_to_string_ids = true && that.isSetTo_string_ids();
    if (this_present_to_string_ids || that_present_to_string_ids) {
      if (!(this_present_to_string_ids && that_present_to_string_ids))
        return false;
      if (!this.to_string_ids.equals(that.to_string_ids))
        return false;
    }

    boolean this_present_slot_ids = true && this.isSetSlot_ids();
    boolean that_present_slot_ids = true && that.isSetSlot_ids();
    if (this_present_slot_ids || that_present_slot_ids) {
      if (!(this_present_slot_ids && that_present_slot_ids))
        return false;
      if (!this.slot_ids.equals(that.slot_ids))
        return false;
    }

    boolean this_present_string_functions = true && this.isSetString_functions();
    boolean that_present_string_functions = true && that.isSetString_functions();
    if (this_present_string_functions || that_present_string_functions) {
      if (!(this_present_string_functions && that_present_string_functions))
        return false;
      if (!this.string_functions.equals(that.string_functions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFrom_dict_ids()) ? 131071 : 524287);
    if (isSetFrom_dict_ids())
      hashCode = hashCode * 8191 + from_dict_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetTo_string_ids()) ? 131071 : 524287);
    if (isSetTo_string_ids())
      hashCode = hashCode * 8191 + to_string_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetSlot_ids()) ? 131071 : 524287);
    if (isSetSlot_ids())
      hashCode = hashCode * 8191 + slot_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetString_functions()) ? 131071 : 524287);
    if (isSetString_functions())
      hashCode = hashCode * 8191 + string_functions.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TNormalDecodeNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFrom_dict_ids(), other.isSetFrom_dict_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrom_dict_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from_dict_ids, other.from_dict_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTo_string_ids(), other.isSetTo_string_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo_string_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to_string_ids, other.to_string_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSlot_ids(), other.isSetSlot_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlot_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slot_ids, other.slot_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetString_functions(), other.isSetString_functions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_functions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_functions, other.string_functions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TNormalDecodeNode(");
    boolean first = true;

    if (isSetFrom_dict_ids()) {
      sb.append("from_dict_ids:");
      if (this.from_dict_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.from_dict_ids);
      }
      first = false;
    }
    if (isSetTo_string_ids()) {
      if (!first) sb.append(", ");
      sb.append("to_string_ids:");
      if (this.to_string_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.to_string_ids);
      }
      first = false;
    }
    if (isSetSlot_ids()) {
      if (!first) sb.append(", ");
      sb.append("slot_ids:");
      if (this.slot_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.slot_ids);
      }
      first = false;
    }
    if (isSetString_functions()) {
      if (!first) sb.append(", ");
      sb.append("string_functions:");
      if (this.string_functions == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.string_functions, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNormalDecodeNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalDecodeNodeStandardScheme getScheme() {
      return new TNormalDecodeNodeStandardScheme();
    }
  }

  private static class TNormalDecodeNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TNormalDecodeNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TNormalDecodeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FROM_DICT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                struct.from_dict_ids = new java.util.ArrayList<java.lang.Integer>(_list120.size);
                int _elem121;
                for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                {
                  _elem121 = iprot.readI32();
                  struct.from_dict_ids.add(_elem121);
                }
                iprot.readListEnd();
              }
              struct.setFrom_dict_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TO_STRING_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list123 = iprot.readListBegin();
                struct.to_string_ids = new java.util.ArrayList<java.lang.Integer>(_list123.size);
                int _elem124;
                for (int _i125 = 0; _i125 < _list123.size; ++_i125)
                {
                  _elem124 = iprot.readI32();
                  struct.to_string_ids.add(_elem124);
                }
                iprot.readListEnd();
              }
              struct.setTo_string_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLOT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list126 = iprot.readListBegin();
                struct.slot_ids = new java.util.ArrayList<java.lang.Integer>(_list126.size);
                int _elem127;
                for (int _i128 = 0; _i128 < _list126.size; ++_i128)
                {
                  _elem127 = iprot.readI32();
                  struct.slot_ids.add(_elem127);
                }
                iprot.readListEnd();
              }
              struct.setSlot_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STRING_FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list129 = iprot.readListBegin();
                struct.string_functions = new java.util.ArrayList<java.nio.ByteBuffer>(_list129.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem130;
                for (int _i131 = 0; _i131 < _list129.size; ++_i131)
                {
                  _elem130 = iprot.readBinary();
                  struct.string_functions.add(_elem130);
                }
                iprot.readListEnd();
              }
              struct.setString_functionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TNormalDecodeNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.from_dict_ids != null) {
        if (struct.isSetFrom_dict_ids()) {
          oprot.writeFieldBegin(FROM_DICT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.from_dict_ids.size()));
            for (int _iter132 : struct.from_dict_ids)
            {
              oprot.writeI32(_iter132);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.to_string_ids != null) {
        if (struct.isSetTo_string_ids()) {
          oprot.writeFieldBegin(TO_STRING_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.to_string_ids.size()));
            for (int _iter133 : struct.to_string_ids)
            {
              oprot.writeI32(_iter133);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.slot_ids != null) {
        if (struct.isSetSlot_ids()) {
          oprot.writeFieldBegin(SLOT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.slot_ids.size()));
            for (int _iter134 : struct.slot_ids)
            {
              oprot.writeI32(_iter134);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.string_functions != null) {
        if (struct.isSetString_functions()) {
          oprot.writeFieldBegin(STRING_FUNCTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.string_functions.size()));
            for (java.nio.ByteBuffer _iter135 : struct.string_functions)
            {
              oprot.writeBinary(_iter135);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNormalDecodeNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalDecodeNodeTupleScheme getScheme() {
      return new TNormalDecodeNodeTupleScheme();
    }
  }

  private static class TNormalDecodeNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TNormalDecodeNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNormalDecodeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFrom_dict_ids()) {
        optionals.set(0);
      }
      if (struct.isSetTo_string_ids()) {
        optionals.set(1);
      }
      if (struct.isSetSlot_ids()) {
        optionals.set(2);
      }
      if (struct.isSetString_functions()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFrom_dict_ids()) {
        {
          oprot.writeI32(struct.from_dict_ids.size());
          for (int _iter136 : struct.from_dict_ids)
          {
            oprot.writeI32(_iter136);
          }
        }
      }
      if (struct.isSetTo_string_ids()) {
        {
          oprot.writeI32(struct.to_string_ids.size());
          for (int _iter137 : struct.to_string_ids)
          {
            oprot.writeI32(_iter137);
          }
        }
      }
      if (struct.isSetSlot_ids()) {
        {
          oprot.writeI32(struct.slot_ids.size());
          for (int _iter138 : struct.slot_ids)
          {
            oprot.writeI32(_iter138);
          }
        }
      }
      if (struct.isSetString_functions()) {
        {
          oprot.writeI32(struct.string_functions.size());
          for (java.nio.ByteBuffer _iter139 : struct.string_functions)
          {
            oprot.writeBinary(_iter139);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNormalDecodeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list140 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.from_dict_ids = new java.util.ArrayList<java.lang.Integer>(_list140.size);
          int _elem141;
          for (int _i142 = 0; _i142 < _list140.size; ++_i142)
          {
            _elem141 = iprot.readI32();
            struct.from_dict_ids.add(_elem141);
          }
        }
        struct.setFrom_dict_idsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list143 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.to_string_ids = new java.util.ArrayList<java.lang.Integer>(_list143.size);
          int _elem144;
          for (int _i145 = 0; _i145 < _list143.size; ++_i145)
          {
            _elem144 = iprot.readI32();
            struct.to_string_ids.add(_elem144);
          }
        }
        struct.setTo_string_idsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list146 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.slot_ids = new java.util.ArrayList<java.lang.Integer>(_list146.size);
          int _elem147;
          for (int _i148 = 0; _i148 < _list146.size; ++_i148)
          {
            _elem147 = iprot.readI32();
            struct.slot_ids.add(_elem147);
          }
        }
        struct.setSlot_idsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list149 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.string_functions = new java.util.ArrayList<java.nio.ByteBuffer>(_list149.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem150;
          for (int _i151 = 0; _i151 < _list149.size; ++_i151)
          {
            _elem150 = iprot.readBinary();
            struct.string_functions.add(_elem150);
          }
        }
        struct.setString_functionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

