/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TNormalHashJoinNode implements org.apache.thrift.TBase<TNormalHashJoinNode, TNormalHashJoinNode._Fields>, java.io.Serializable, Cloneable, Comparable<TNormalHashJoinNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNormalHashJoinNode");

  private static final org.apache.thrift.protocol.TField JOIN_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("join_op", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EQ_JOIN_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("eq_join_conjuncts", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField OTHER_JOIN_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("other_join_conjuncts", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField IS_REWRITTEN_FROM_NOT_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("is_rewritten_from_not_in", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField DISTRIBUTION_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("distribution_mode", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PARTITION_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_exprs", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField OUTPUT_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("output_columns", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TNormalHashJoinNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TNormalHashJoinNodeTupleSchemeFactory();

  /**
   * 
   * @see com.starrocks.thrift.TJoinOp
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TJoinOp join_op; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> eq_join_conjuncts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> other_join_conjuncts; // optional
  public boolean is_rewritten_from_not_in; // optional
  /**
   * 
   * @see com.starrocks.thrift.TJoinDistributionMode
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TJoinDistributionMode distribution_mode; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> partition_exprs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> output_columns; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.starrocks.thrift.TJoinOp
     */
    JOIN_OP((short)1, "join_op"),
    EQ_JOIN_CONJUNCTS((short)2, "eq_join_conjuncts"),
    OTHER_JOIN_CONJUNCTS((short)3, "other_join_conjuncts"),
    IS_REWRITTEN_FROM_NOT_IN((short)4, "is_rewritten_from_not_in"),
    /**
     * 
     * @see com.starrocks.thrift.TJoinDistributionMode
     */
    DISTRIBUTION_MODE((short)5, "distribution_mode"),
    PARTITION_EXPRS((short)6, "partition_exprs"),
    OUTPUT_COLUMNS((short)7, "output_columns");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOIN_OP
          return JOIN_OP;
        case 2: // EQ_JOIN_CONJUNCTS
          return EQ_JOIN_CONJUNCTS;
        case 3: // OTHER_JOIN_CONJUNCTS
          return OTHER_JOIN_CONJUNCTS;
        case 4: // IS_REWRITTEN_FROM_NOT_IN
          return IS_REWRITTEN_FROM_NOT_IN;
        case 5: // DISTRIBUTION_MODE
          return DISTRIBUTION_MODE;
        case 6: // PARTITION_EXPRS
          return PARTITION_EXPRS;
        case 7: // OUTPUT_COLUMNS
          return OUTPUT_COLUMNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_REWRITTEN_FROM_NOT_IN_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.JOIN_OP,_Fields.EQ_JOIN_CONJUNCTS,_Fields.OTHER_JOIN_CONJUNCTS,_Fields.IS_REWRITTEN_FROM_NOT_IN,_Fields.DISTRIBUTION_MODE,_Fields.PARTITION_EXPRS,_Fields.OUTPUT_COLUMNS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOIN_OP, new org.apache.thrift.meta_data.FieldMetaData("join_op", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TJoinOp.class)));
    tmpMap.put(_Fields.EQ_JOIN_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("eq_join_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.OTHER_JOIN_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("other_join_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.IS_REWRITTEN_FROM_NOT_IN, new org.apache.thrift.meta_data.FieldMetaData("is_rewritten_from_not_in", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISTRIBUTION_MODE, new org.apache.thrift.meta_data.FieldMetaData("distribution_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TJoinDistributionMode.class)));
    tmpMap.put(_Fields.PARTITION_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("partition_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.OUTPUT_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("output_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNormalHashJoinNode.class, metaDataMap);
  }

  public TNormalHashJoinNode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNormalHashJoinNode(TNormalHashJoinNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJoin_op()) {
      this.join_op = other.join_op;
    }
    if (other.isSetEq_join_conjuncts()) {
      java.util.List<java.nio.ByteBuffer> __this__eq_join_conjuncts = new java.util.ArrayList<java.nio.ByteBuffer>(other.eq_join_conjuncts);
      this.eq_join_conjuncts = __this__eq_join_conjuncts;
    }
    if (other.isSetOther_join_conjuncts()) {
      java.util.List<java.nio.ByteBuffer> __this__other_join_conjuncts = new java.util.ArrayList<java.nio.ByteBuffer>(other.other_join_conjuncts);
      this.other_join_conjuncts = __this__other_join_conjuncts;
    }
    this.is_rewritten_from_not_in = other.is_rewritten_from_not_in;
    if (other.isSetDistribution_mode()) {
      this.distribution_mode = other.distribution_mode;
    }
    if (other.isSetPartition_exprs()) {
      java.util.List<java.nio.ByteBuffer> __this__partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(other.partition_exprs);
      this.partition_exprs = __this__partition_exprs;
    }
    if (other.isSetOutput_columns()) {
      java.util.List<java.lang.Integer> __this__output_columns = new java.util.ArrayList<java.lang.Integer>(other.output_columns.size());
      for (java.lang.Integer other_element : other.output_columns) {
        __this__output_columns.add(other_element);
      }
      this.output_columns = __this__output_columns;
    }
  }

  @Override
  public TNormalHashJoinNode deepCopy() {
    return new TNormalHashJoinNode(this);
  }

  @Override
  public void clear() {
    this.join_op = null;
    this.eq_join_conjuncts = null;
    this.other_join_conjuncts = null;
    setIs_rewritten_from_not_inIsSet(false);
    this.is_rewritten_from_not_in = false;
    this.distribution_mode = null;
    this.partition_exprs = null;
    this.output_columns = null;
  }

  /**
   * 
   * @see com.starrocks.thrift.TJoinOp
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TJoinOp getJoin_op() {
    return this.join_op;
  }

  /**
   * 
   * @see com.starrocks.thrift.TJoinOp
   */
  public TNormalHashJoinNode setJoin_op(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TJoinOp join_op) {
    this.join_op = join_op;
    return this;
  }

  public void unsetJoin_op() {
    this.join_op = null;
  }

  /** Returns true if field join_op is set (has been assigned a value) and false otherwise */
  public boolean isSetJoin_op() {
    return this.join_op != null;
  }

  public void setJoin_opIsSet(boolean value) {
    if (!value) {
      this.join_op = null;
    }
  }

  public int getEq_join_conjunctsSize() {
    return (this.eq_join_conjuncts == null) ? 0 : this.eq_join_conjuncts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getEq_join_conjunctsIterator() {
    return (this.eq_join_conjuncts == null) ? null : this.eq_join_conjuncts.iterator();
  }

  public void addToEq_join_conjuncts(java.nio.ByteBuffer elem) {
    if (this.eq_join_conjuncts == null) {
      this.eq_join_conjuncts = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.eq_join_conjuncts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getEq_join_conjuncts() {
    return this.eq_join_conjuncts;
  }

  public TNormalHashJoinNode setEq_join_conjuncts(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> eq_join_conjuncts) {
    this.eq_join_conjuncts = eq_join_conjuncts;
    return this;
  }

  public void unsetEq_join_conjuncts() {
    this.eq_join_conjuncts = null;
  }

  /** Returns true if field eq_join_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetEq_join_conjuncts() {
    return this.eq_join_conjuncts != null;
  }

  public void setEq_join_conjunctsIsSet(boolean value) {
    if (!value) {
      this.eq_join_conjuncts = null;
    }
  }

  public int getOther_join_conjunctsSize() {
    return (this.other_join_conjuncts == null) ? 0 : this.other_join_conjuncts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getOther_join_conjunctsIterator() {
    return (this.other_join_conjuncts == null) ? null : this.other_join_conjuncts.iterator();
  }

  public void addToOther_join_conjuncts(java.nio.ByteBuffer elem) {
    if (this.other_join_conjuncts == null) {
      this.other_join_conjuncts = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.other_join_conjuncts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getOther_join_conjuncts() {
    return this.other_join_conjuncts;
  }

  public TNormalHashJoinNode setOther_join_conjuncts(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> other_join_conjuncts) {
    this.other_join_conjuncts = other_join_conjuncts;
    return this;
  }

  public void unsetOther_join_conjuncts() {
    this.other_join_conjuncts = null;
  }

  /** Returns true if field other_join_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetOther_join_conjuncts() {
    return this.other_join_conjuncts != null;
  }

  public void setOther_join_conjunctsIsSet(boolean value) {
    if (!value) {
      this.other_join_conjuncts = null;
    }
  }

  public boolean isIs_rewritten_from_not_in() {
    return this.is_rewritten_from_not_in;
  }

  public TNormalHashJoinNode setIs_rewritten_from_not_in(boolean is_rewritten_from_not_in) {
    this.is_rewritten_from_not_in = is_rewritten_from_not_in;
    setIs_rewritten_from_not_inIsSet(true);
    return this;
  }

  public void unsetIs_rewritten_from_not_in() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_REWRITTEN_FROM_NOT_IN_ISSET_ID);
  }

  /** Returns true if field is_rewritten_from_not_in is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_rewritten_from_not_in() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_REWRITTEN_FROM_NOT_IN_ISSET_ID);
  }

  public void setIs_rewritten_from_not_inIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_REWRITTEN_FROM_NOT_IN_ISSET_ID, value);
  }

  /**
   * 
   * @see com.starrocks.thrift.TJoinDistributionMode
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TJoinDistributionMode getDistribution_mode() {
    return this.distribution_mode;
  }

  /**
   * 
   * @see com.starrocks.thrift.TJoinDistributionMode
   */
  public TNormalHashJoinNode setDistribution_mode(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TJoinDistributionMode distribution_mode) {
    this.distribution_mode = distribution_mode;
    return this;
  }

  public void unsetDistribution_mode() {
    this.distribution_mode = null;
  }

  /** Returns true if field distribution_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetDistribution_mode() {
    return this.distribution_mode != null;
  }

  public void setDistribution_modeIsSet(boolean value) {
    if (!value) {
      this.distribution_mode = null;
    }
  }

  public int getPartition_exprsSize() {
    return (this.partition_exprs == null) ? 0 : this.partition_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getPartition_exprsIterator() {
    return (this.partition_exprs == null) ? null : this.partition_exprs.iterator();
  }

  public void addToPartition_exprs(java.nio.ByteBuffer elem) {
    if (this.partition_exprs == null) {
      this.partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.partition_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getPartition_exprs() {
    return this.partition_exprs;
  }

  public TNormalHashJoinNode setPartition_exprs(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> partition_exprs) {
    this.partition_exprs = partition_exprs;
    return this;
  }

  public void unsetPartition_exprs() {
    this.partition_exprs = null;
  }

  /** Returns true if field partition_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_exprs() {
    return this.partition_exprs != null;
  }

  public void setPartition_exprsIsSet(boolean value) {
    if (!value) {
      this.partition_exprs = null;
    }
  }

  public int getOutput_columnsSize() {
    return (this.output_columns == null) ? 0 : this.output_columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getOutput_columnsIterator() {
    return (this.output_columns == null) ? null : this.output_columns.iterator();
  }

  public void addToOutput_columns(int elem) {
    if (this.output_columns == null) {
      this.output_columns = new java.util.ArrayList<java.lang.Integer>();
    }
    this.output_columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getOutput_columns() {
    return this.output_columns;
  }

  public TNormalHashJoinNode setOutput_columns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> output_columns) {
    this.output_columns = output_columns;
    return this;
  }

  public void unsetOutput_columns() {
    this.output_columns = null;
  }

  /** Returns true if field output_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_columns() {
    return this.output_columns != null;
  }

  public void setOutput_columnsIsSet(boolean value) {
    if (!value) {
      this.output_columns = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case JOIN_OP:
      if (value == null) {
        unsetJoin_op();
      } else {
        setJoin_op((com.starrocks.thrift.TJoinOp)value);
      }
      break;

    case EQ_JOIN_CONJUNCTS:
      if (value == null) {
        unsetEq_join_conjuncts();
      } else {
        setEq_join_conjuncts((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case OTHER_JOIN_CONJUNCTS:
      if (value == null) {
        unsetOther_join_conjuncts();
      } else {
        setOther_join_conjuncts((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case IS_REWRITTEN_FROM_NOT_IN:
      if (value == null) {
        unsetIs_rewritten_from_not_in();
      } else {
        setIs_rewritten_from_not_in((java.lang.Boolean)value);
      }
      break;

    case DISTRIBUTION_MODE:
      if (value == null) {
        unsetDistribution_mode();
      } else {
        setDistribution_mode((com.starrocks.thrift.TJoinDistributionMode)value);
      }
      break;

    case PARTITION_EXPRS:
      if (value == null) {
        unsetPartition_exprs();
      } else {
        setPartition_exprs((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case OUTPUT_COLUMNS:
      if (value == null) {
        unsetOutput_columns();
      } else {
        setOutput_columns((java.util.List<java.lang.Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case JOIN_OP:
      return getJoin_op();

    case EQ_JOIN_CONJUNCTS:
      return getEq_join_conjuncts();

    case OTHER_JOIN_CONJUNCTS:
      return getOther_join_conjuncts();

    case IS_REWRITTEN_FROM_NOT_IN:
      return isIs_rewritten_from_not_in();

    case DISTRIBUTION_MODE:
      return getDistribution_mode();

    case PARTITION_EXPRS:
      return getPartition_exprs();

    case OUTPUT_COLUMNS:
      return getOutput_columns();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case JOIN_OP:
      return isSetJoin_op();
    case EQ_JOIN_CONJUNCTS:
      return isSetEq_join_conjuncts();
    case OTHER_JOIN_CONJUNCTS:
      return isSetOther_join_conjuncts();
    case IS_REWRITTEN_FROM_NOT_IN:
      return isSetIs_rewritten_from_not_in();
    case DISTRIBUTION_MODE:
      return isSetDistribution_mode();
    case PARTITION_EXPRS:
      return isSetPartition_exprs();
    case OUTPUT_COLUMNS:
      return isSetOutput_columns();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TNormalHashJoinNode)
      return this.equals((TNormalHashJoinNode)that);
    return false;
  }

  public boolean equals(TNormalHashJoinNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_join_op = true && this.isSetJoin_op();
    boolean that_present_join_op = true && that.isSetJoin_op();
    if (this_present_join_op || that_present_join_op) {
      if (!(this_present_join_op && that_present_join_op))
        return false;
      if (!this.join_op.equals(that.join_op))
        return false;
    }

    boolean this_present_eq_join_conjuncts = true && this.isSetEq_join_conjuncts();
    boolean that_present_eq_join_conjuncts = true && that.isSetEq_join_conjuncts();
    if (this_present_eq_join_conjuncts || that_present_eq_join_conjuncts) {
      if (!(this_present_eq_join_conjuncts && that_present_eq_join_conjuncts))
        return false;
      if (!this.eq_join_conjuncts.equals(that.eq_join_conjuncts))
        return false;
    }

    boolean this_present_other_join_conjuncts = true && this.isSetOther_join_conjuncts();
    boolean that_present_other_join_conjuncts = true && that.isSetOther_join_conjuncts();
    if (this_present_other_join_conjuncts || that_present_other_join_conjuncts) {
      if (!(this_present_other_join_conjuncts && that_present_other_join_conjuncts))
        return false;
      if (!this.other_join_conjuncts.equals(that.other_join_conjuncts))
        return false;
    }

    boolean this_present_is_rewritten_from_not_in = true && this.isSetIs_rewritten_from_not_in();
    boolean that_present_is_rewritten_from_not_in = true && that.isSetIs_rewritten_from_not_in();
    if (this_present_is_rewritten_from_not_in || that_present_is_rewritten_from_not_in) {
      if (!(this_present_is_rewritten_from_not_in && that_present_is_rewritten_from_not_in))
        return false;
      if (this.is_rewritten_from_not_in != that.is_rewritten_from_not_in)
        return false;
    }

    boolean this_present_distribution_mode = true && this.isSetDistribution_mode();
    boolean that_present_distribution_mode = true && that.isSetDistribution_mode();
    if (this_present_distribution_mode || that_present_distribution_mode) {
      if (!(this_present_distribution_mode && that_present_distribution_mode))
        return false;
      if (!this.distribution_mode.equals(that.distribution_mode))
        return false;
    }

    boolean this_present_partition_exprs = true && this.isSetPartition_exprs();
    boolean that_present_partition_exprs = true && that.isSetPartition_exprs();
    if (this_present_partition_exprs || that_present_partition_exprs) {
      if (!(this_present_partition_exprs && that_present_partition_exprs))
        return false;
      if (!this.partition_exprs.equals(that.partition_exprs))
        return false;
    }

    boolean this_present_output_columns = true && this.isSetOutput_columns();
    boolean that_present_output_columns = true && that.isSetOutput_columns();
    if (this_present_output_columns || that_present_output_columns) {
      if (!(this_present_output_columns && that_present_output_columns))
        return false;
      if (!this.output_columns.equals(that.output_columns))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetJoin_op()) ? 131071 : 524287);
    if (isSetJoin_op())
      hashCode = hashCode * 8191 + join_op.getValue();

    hashCode = hashCode * 8191 + ((isSetEq_join_conjuncts()) ? 131071 : 524287);
    if (isSetEq_join_conjuncts())
      hashCode = hashCode * 8191 + eq_join_conjuncts.hashCode();

    hashCode = hashCode * 8191 + ((isSetOther_join_conjuncts()) ? 131071 : 524287);
    if (isSetOther_join_conjuncts())
      hashCode = hashCode * 8191 + other_join_conjuncts.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_rewritten_from_not_in()) ? 131071 : 524287);
    if (isSetIs_rewritten_from_not_in())
      hashCode = hashCode * 8191 + ((is_rewritten_from_not_in) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDistribution_mode()) ? 131071 : 524287);
    if (isSetDistribution_mode())
      hashCode = hashCode * 8191 + distribution_mode.getValue();

    hashCode = hashCode * 8191 + ((isSetPartition_exprs()) ? 131071 : 524287);
    if (isSetPartition_exprs())
      hashCode = hashCode * 8191 + partition_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutput_columns()) ? 131071 : 524287);
    if (isSetOutput_columns())
      hashCode = hashCode * 8191 + output_columns.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TNormalHashJoinNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetJoin_op(), other.isSetJoin_op());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoin_op()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.join_op, other.join_op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEq_join_conjuncts(), other.isSetEq_join_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEq_join_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eq_join_conjuncts, other.eq_join_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOther_join_conjuncts(), other.isSetOther_join_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOther_join_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.other_join_conjuncts, other.other_join_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_rewritten_from_not_in(), other.isSetIs_rewritten_from_not_in());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_rewritten_from_not_in()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_rewritten_from_not_in, other.is_rewritten_from_not_in);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDistribution_mode(), other.isSetDistribution_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistribution_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distribution_mode, other.distribution_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_exprs(), other.isSetPartition_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_exprs, other.partition_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutput_columns(), other.isSetOutput_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_columns, other.output_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TNormalHashJoinNode(");
    boolean first = true;

    if (isSetJoin_op()) {
      sb.append("join_op:");
      if (this.join_op == null) {
        sb.append("null");
      } else {
        sb.append(this.join_op);
      }
      first = false;
    }
    if (isSetEq_join_conjuncts()) {
      if (!first) sb.append(", ");
      sb.append("eq_join_conjuncts:");
      if (this.eq_join_conjuncts == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.eq_join_conjuncts, sb);
      }
      first = false;
    }
    if (isSetOther_join_conjuncts()) {
      if (!first) sb.append(", ");
      sb.append("other_join_conjuncts:");
      if (this.other_join_conjuncts == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.other_join_conjuncts, sb);
      }
      first = false;
    }
    if (isSetIs_rewritten_from_not_in()) {
      if (!first) sb.append(", ");
      sb.append("is_rewritten_from_not_in:");
      sb.append(this.is_rewritten_from_not_in);
      first = false;
    }
    if (isSetDistribution_mode()) {
      if (!first) sb.append(", ");
      sb.append("distribution_mode:");
      if (this.distribution_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.distribution_mode);
      }
      first = false;
    }
    if (isSetPartition_exprs()) {
      if (!first) sb.append(", ");
      sb.append("partition_exprs:");
      if (this.partition_exprs == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.partition_exprs, sb);
      }
      first = false;
    }
    if (isSetOutput_columns()) {
      if (!first) sb.append(", ");
      sb.append("output_columns:");
      if (this.output_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.output_columns);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNormalHashJoinNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalHashJoinNodeStandardScheme getScheme() {
      return new TNormalHashJoinNodeStandardScheme();
    }
  }

  private static class TNormalHashJoinNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TNormalHashJoinNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TNormalHashJoinNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOIN_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.join_op = com.starrocks.thrift.TJoinOp.findByValue(iprot.readI32());
              struct.setJoin_opIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EQ_JOIN_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                struct.eq_join_conjuncts = new java.util.ArrayList<java.nio.ByteBuffer>(_list152.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem153;
                for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                {
                  _elem153 = iprot.readBinary();
                  struct.eq_join_conjuncts.add(_elem153);
                }
                iprot.readListEnd();
              }
              struct.setEq_join_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OTHER_JOIN_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list155 = iprot.readListBegin();
                struct.other_join_conjuncts = new java.util.ArrayList<java.nio.ByteBuffer>(_list155.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem156;
                for (int _i157 = 0; _i157 < _list155.size; ++_i157)
                {
                  _elem156 = iprot.readBinary();
                  struct.other_join_conjuncts.add(_elem156);
                }
                iprot.readListEnd();
              }
              struct.setOther_join_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_REWRITTEN_FROM_NOT_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_rewritten_from_not_in = iprot.readBool();
              struct.setIs_rewritten_from_not_inIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISTRIBUTION_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.distribution_mode = com.starrocks.thrift.TJoinDistributionMode.findByValue(iprot.readI32());
              struct.setDistribution_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARTITION_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list158 = iprot.readListBegin();
                struct.partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list158.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem159;
                for (int _i160 = 0; _i160 < _list158.size; ++_i160)
                {
                  _elem159 = iprot.readBinary();
                  struct.partition_exprs.add(_elem159);
                }
                iprot.readListEnd();
              }
              struct.setPartition_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OUTPUT_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list161 = iprot.readListBegin();
                struct.output_columns = new java.util.ArrayList<java.lang.Integer>(_list161.size);
                int _elem162;
                for (int _i163 = 0; _i163 < _list161.size; ++_i163)
                {
                  _elem162 = iprot.readI32();
                  struct.output_columns.add(_elem162);
                }
                iprot.readListEnd();
              }
              struct.setOutput_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TNormalHashJoinNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.join_op != null) {
        if (struct.isSetJoin_op()) {
          oprot.writeFieldBegin(JOIN_OP_FIELD_DESC);
          oprot.writeI32(struct.join_op.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.eq_join_conjuncts != null) {
        if (struct.isSetEq_join_conjuncts()) {
          oprot.writeFieldBegin(EQ_JOIN_CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.eq_join_conjuncts.size()));
            for (java.nio.ByteBuffer _iter164 : struct.eq_join_conjuncts)
            {
              oprot.writeBinary(_iter164);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.other_join_conjuncts != null) {
        if (struct.isSetOther_join_conjuncts()) {
          oprot.writeFieldBegin(OTHER_JOIN_CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.other_join_conjuncts.size()));
            for (java.nio.ByteBuffer _iter165 : struct.other_join_conjuncts)
            {
              oprot.writeBinary(_iter165);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_rewritten_from_not_in()) {
        oprot.writeFieldBegin(IS_REWRITTEN_FROM_NOT_IN_FIELD_DESC);
        oprot.writeBool(struct.is_rewritten_from_not_in);
        oprot.writeFieldEnd();
      }
      if (struct.distribution_mode != null) {
        if (struct.isSetDistribution_mode()) {
          oprot.writeFieldBegin(DISTRIBUTION_MODE_FIELD_DESC);
          oprot.writeI32(struct.distribution_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_exprs != null) {
        if (struct.isSetPartition_exprs()) {
          oprot.writeFieldBegin(PARTITION_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.partition_exprs.size()));
            for (java.nio.ByteBuffer _iter166 : struct.partition_exprs)
            {
              oprot.writeBinary(_iter166);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.output_columns != null) {
        if (struct.isSetOutput_columns()) {
          oprot.writeFieldBegin(OUTPUT_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.output_columns.size()));
            for (int _iter167 : struct.output_columns)
            {
              oprot.writeI32(_iter167);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNormalHashJoinNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalHashJoinNodeTupleScheme getScheme() {
      return new TNormalHashJoinNodeTupleScheme();
    }
  }

  private static class TNormalHashJoinNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TNormalHashJoinNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNormalHashJoinNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetJoin_op()) {
        optionals.set(0);
      }
      if (struct.isSetEq_join_conjuncts()) {
        optionals.set(1);
      }
      if (struct.isSetOther_join_conjuncts()) {
        optionals.set(2);
      }
      if (struct.isSetIs_rewritten_from_not_in()) {
        optionals.set(3);
      }
      if (struct.isSetDistribution_mode()) {
        optionals.set(4);
      }
      if (struct.isSetPartition_exprs()) {
        optionals.set(5);
      }
      if (struct.isSetOutput_columns()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetJoin_op()) {
        oprot.writeI32(struct.join_op.getValue());
      }
      if (struct.isSetEq_join_conjuncts()) {
        {
          oprot.writeI32(struct.eq_join_conjuncts.size());
          for (java.nio.ByteBuffer _iter168 : struct.eq_join_conjuncts)
          {
            oprot.writeBinary(_iter168);
          }
        }
      }
      if (struct.isSetOther_join_conjuncts()) {
        {
          oprot.writeI32(struct.other_join_conjuncts.size());
          for (java.nio.ByteBuffer _iter169 : struct.other_join_conjuncts)
          {
            oprot.writeBinary(_iter169);
          }
        }
      }
      if (struct.isSetIs_rewritten_from_not_in()) {
        oprot.writeBool(struct.is_rewritten_from_not_in);
      }
      if (struct.isSetDistribution_mode()) {
        oprot.writeI32(struct.distribution_mode.getValue());
      }
      if (struct.isSetPartition_exprs()) {
        {
          oprot.writeI32(struct.partition_exprs.size());
          for (java.nio.ByteBuffer _iter170 : struct.partition_exprs)
          {
            oprot.writeBinary(_iter170);
          }
        }
      }
      if (struct.isSetOutput_columns()) {
        {
          oprot.writeI32(struct.output_columns.size());
          for (int _iter171 : struct.output_columns)
          {
            oprot.writeI32(_iter171);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNormalHashJoinNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.join_op = com.starrocks.thrift.TJoinOp.findByValue(iprot.readI32());
        struct.setJoin_opIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list172 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.eq_join_conjuncts = new java.util.ArrayList<java.nio.ByteBuffer>(_list172.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem173;
          for (int _i174 = 0; _i174 < _list172.size; ++_i174)
          {
            _elem173 = iprot.readBinary();
            struct.eq_join_conjuncts.add(_elem173);
          }
        }
        struct.setEq_join_conjunctsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list175 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.other_join_conjuncts = new java.util.ArrayList<java.nio.ByteBuffer>(_list175.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem176;
          for (int _i177 = 0; _i177 < _list175.size; ++_i177)
          {
            _elem176 = iprot.readBinary();
            struct.other_join_conjuncts.add(_elem176);
          }
        }
        struct.setOther_join_conjunctsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_rewritten_from_not_in = iprot.readBool();
        struct.setIs_rewritten_from_not_inIsSet(true);
      }
      if (incoming.get(4)) {
        struct.distribution_mode = com.starrocks.thrift.TJoinDistributionMode.findByValue(iprot.readI32());
        struct.setDistribution_modeIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list178 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list178.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem179;
          for (int _i180 = 0; _i180 < _list178.size; ++_i180)
          {
            _elem179 = iprot.readBinary();
            struct.partition_exprs.add(_elem179);
          }
        }
        struct.setPartition_exprsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list181 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.output_columns = new java.util.ArrayList<java.lang.Integer>(_list181.size);
          int _elem182;
          for (int _i183 = 0; _i183 < _list181.size; ++_i183)
          {
            _elem182 = iprot.readI32();
            struct.output_columns.add(_elem182);
          }
        }
        struct.setOutput_columnsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

