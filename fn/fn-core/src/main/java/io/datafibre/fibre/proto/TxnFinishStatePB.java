// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

package io.datafibre.fibre.proto;

/**
 * <pre>
 * Used to store additional information about a txn when it is finished/visible
 * It will be serialized with TransactionState
 * </pre>
 *
 * Protobuf type {@code starrocks.TxnFinishStatePB}
 */
public final class TxnFinishStatePB extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:starrocks.TxnFinishStatePB)
    TxnFinishStatePBOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TxnFinishStatePB.newBuilder() to construct.
  private TxnFinishStatePB(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TxnFinishStatePB() {
    normalReplicas_ = emptyLongList();
    abnormalReplicasWithVersion_ = emptyLongList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TxnFinishStatePB();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.datafibre.fibre.proto.Types.internal_static_starrocks_TxnFinishStatePB_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.datafibre.fibre.proto.Types.internal_static_starrocks_TxnFinishStatePB_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.datafibre.fibre.proto.TxnFinishStatePB.class, io.datafibre.fibre.proto.TxnFinishStatePB.Builder.class);
  }

  public static final int NORMAL_REPLICAS_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.LongList normalReplicas_;
  /**
   * <pre>
   * Currently, only involved replica's versions are stored, to save space, replica are stored in 2 lists
   * a list of int64 to store `normal` replicas, in the following form:
   *   replica1Id, replica2Id, ...
   * a list of int64 to store `abnormal` replica's versions, in the following form:
   *   replica1Id, replica1Version, replica2Id, replica2Version, ...
   * For all the replicas involved in a txn, if the replica's version != partition's txn commit version
   * it is considered abnormal, and put into abnormal list.
   * </pre>
   *
   * <code>repeated int64 normal_replicas = 1;</code>
   * @return A list containing the normalReplicas.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long>
      getNormalReplicasList() {
    return normalReplicas_;
  }
  /**
   * <pre>
   * Currently, only involved replica's versions are stored, to save space, replica are stored in 2 lists
   * a list of int64 to store `normal` replicas, in the following form:
   *   replica1Id, replica2Id, ...
   * a list of int64 to store `abnormal` replica's versions, in the following form:
   *   replica1Id, replica1Version, replica2Id, replica2Version, ...
   * For all the replicas involved in a txn, if the replica's version != partition's txn commit version
   * it is considered abnormal, and put into abnormal list.
   * </pre>
   *
   * <code>repeated int64 normal_replicas = 1;</code>
   * @return The count of normalReplicas.
   */
  public int getNormalReplicasCount() {
    return normalReplicas_.size();
  }
  /**
   * <pre>
   * Currently, only involved replica's versions are stored, to save space, replica are stored in 2 lists
   * a list of int64 to store `normal` replicas, in the following form:
   *   replica1Id, replica2Id, ...
   * a list of int64 to store `abnormal` replica's versions, in the following form:
   *   replica1Id, replica1Version, replica2Id, replica2Version, ...
   * For all the replicas involved in a txn, if the replica's version != partition's txn commit version
   * it is considered abnormal, and put into abnormal list.
   * </pre>
   *
   * <code>repeated int64 normal_replicas = 1;</code>
   * @param index The index of the element to return.
   * @return The normalReplicas at the given index.
   */
  public long getNormalReplicas(int index) {
    return normalReplicas_.getLong(index);
  }

  public static final int ABNORMAL_REPLICAS_WITH_VERSION_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.LongList abnormalReplicasWithVersion_;
  /**
   * <code>repeated int64 abnormal_replicas_with_version = 2;</code>
   * @return A list containing the abnormalReplicasWithVersion.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long>
      getAbnormalReplicasWithVersionList() {
    return abnormalReplicasWithVersion_;
  }
  /**
   * <code>repeated int64 abnormal_replicas_with_version = 2;</code>
   * @return The count of abnormalReplicasWithVersion.
   */
  public int getAbnormalReplicasWithVersionCount() {
    return abnormalReplicasWithVersion_.size();
  }
  /**
   * <code>repeated int64 abnormal_replicas_with_version = 2;</code>
   * @param index The index of the element to return.
   * @return The abnormalReplicasWithVersion at the given index.
   */
  public long getAbnormalReplicasWithVersion(int index) {
    return abnormalReplicasWithVersion_.getLong(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < normalReplicas_.size(); i++) {
      output.writeInt64(1, normalReplicas_.getLong(i));
    }
    for (int i = 0; i < abnormalReplicasWithVersion_.size(); i++) {
      output.writeInt64(2, abnormalReplicasWithVersion_.getLong(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < normalReplicas_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt64SizeNoTag(normalReplicas_.getLong(i));
      }
      size += dataSize;
      size += 1 * getNormalReplicasList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < abnormalReplicasWithVersion_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt64SizeNoTag(abnormalReplicasWithVersion_.getLong(i));
      }
      size += dataSize;
      size += 1 * getAbnormalReplicasWithVersionList().size();
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.datafibre.fibre.proto.TxnFinishStatePB)) {
      return super.equals(obj);
    }
    io.datafibre.fibre.proto.TxnFinishStatePB other = (io.datafibre.fibre.proto.TxnFinishStatePB) obj;

    if (!getNormalReplicasList()
        .equals(other.getNormalReplicasList())) return false;
    if (!getAbnormalReplicasWithVersionList()
        .equals(other.getAbnormalReplicasWithVersionList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getNormalReplicasCount() > 0) {
      hash = (37 * hash) + NORMAL_REPLICAS_FIELD_NUMBER;
      hash = (53 * hash) + getNormalReplicasList().hashCode();
    }
    if (getAbnormalReplicasWithVersionCount() > 0) {
      hash = (37 * hash) + ABNORMAL_REPLICAS_WITH_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getAbnormalReplicasWithVersionList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.datafibre.fibre.proto.TxnFinishStatePB parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.datafibre.fibre.proto.TxnFinishStatePB parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.datafibre.fibre.proto.TxnFinishStatePB parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.datafibre.fibre.proto.TxnFinishStatePB parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.datafibre.fibre.proto.TxnFinishStatePB parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.datafibre.fibre.proto.TxnFinishStatePB parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.datafibre.fibre.proto.TxnFinishStatePB parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.datafibre.fibre.proto.TxnFinishStatePB parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.datafibre.fibre.proto.TxnFinishStatePB parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.datafibre.fibre.proto.TxnFinishStatePB parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.datafibre.fibre.proto.TxnFinishStatePB parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.datafibre.fibre.proto.TxnFinishStatePB parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.datafibre.fibre.proto.TxnFinishStatePB prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Used to store additional information about a txn when it is finished/visible
   * It will be serialized with TransactionState
   * </pre>
   *
   * Protobuf type {@code starrocks.TxnFinishStatePB}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:starrocks.TxnFinishStatePB)
      io.datafibre.fibre.proto.TxnFinishStatePBOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.datafibre.fibre.proto.Types.internal_static_starrocks_TxnFinishStatePB_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.datafibre.fibre.proto.Types.internal_static_starrocks_TxnFinishStatePB_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.datafibre.fibre.proto.TxnFinishStatePB.class, io.datafibre.fibre.proto.TxnFinishStatePB.Builder.class);
    }

    // Construct using io.datafibre.fibre.proto.TxnFinishStatePB.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      normalReplicas_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000001);
      abnormalReplicasWithVersion_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.datafibre.fibre.proto.Types.internal_static_starrocks_TxnFinishStatePB_descriptor;
    }

    @java.lang.Override
    public io.datafibre.fibre.proto.TxnFinishStatePB getDefaultInstanceForType() {
      return io.datafibre.fibre.proto.TxnFinishStatePB.getDefaultInstance();
    }

    @java.lang.Override
    public io.datafibre.fibre.proto.TxnFinishStatePB build() {
      io.datafibre.fibre.proto.TxnFinishStatePB result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.datafibre.fibre.proto.TxnFinishStatePB buildPartial() {
      io.datafibre.fibre.proto.TxnFinishStatePB result = new io.datafibre.fibre.proto.TxnFinishStatePB(this);
      int from_bitField0_ = bitField0_;
      if (((bitField0_ & 0x00000001) != 0)) {
        normalReplicas_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.normalReplicas_ = normalReplicas_;
      if (((bitField0_ & 0x00000002) != 0)) {
        abnormalReplicasWithVersion_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.abnormalReplicasWithVersion_ = abnormalReplicasWithVersion_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.datafibre.fibre.proto.TxnFinishStatePB) {
        return mergeFrom((io.datafibre.fibre.proto.TxnFinishStatePB)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.datafibre.fibre.proto.TxnFinishStatePB other) {
      if (other == io.datafibre.fibre.proto.TxnFinishStatePB.getDefaultInstance()) return this;
      if (!other.normalReplicas_.isEmpty()) {
        if (normalReplicas_.isEmpty()) {
          normalReplicas_ = other.normalReplicas_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureNormalReplicasIsMutable();
          normalReplicas_.addAll(other.normalReplicas_);
        }
        onChanged();
      }
      if (!other.abnormalReplicasWithVersion_.isEmpty()) {
        if (abnormalReplicasWithVersion_.isEmpty()) {
          abnormalReplicasWithVersion_ = other.abnormalReplicasWithVersion_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureAbnormalReplicasWithVersionIsMutable();
          abnormalReplicasWithVersion_.addAll(other.abnormalReplicasWithVersion_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              long v = input.readInt64();
              ensureNormalReplicasIsMutable();
              normalReplicas_.addLong(v);
              break;
            } // case 8
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureNormalReplicasIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                normalReplicas_.addLong(input.readInt64());
              }
              input.popLimit(limit);
              break;
            } // case 10
            case 16: {
              long v = input.readInt64();
              ensureAbnormalReplicasWithVersionIsMutable();
              abnormalReplicasWithVersion_.addLong(v);
              break;
            } // case 16
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureAbnormalReplicasWithVersionIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                abnormalReplicasWithVersion_.addLong(input.readInt64());
              }
              input.popLimit(limit);
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Internal.LongList normalReplicas_ = emptyLongList();
    private void ensureNormalReplicasIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        normalReplicas_ = mutableCopy(normalReplicas_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * Currently, only involved replica's versions are stored, to save space, replica are stored in 2 lists
     * a list of int64 to store `normal` replicas, in the following form:
     *   replica1Id, replica2Id, ...
     * a list of int64 to store `abnormal` replica's versions, in the following form:
     *   replica1Id, replica1Version, replica2Id, replica2Version, ...
     * For all the replicas involved in a txn, if the replica's version != partition's txn commit version
     * it is considered abnormal, and put into abnormal list.
     * </pre>
     *
     * <code>repeated int64 normal_replicas = 1;</code>
     * @return A list containing the normalReplicas.
     */
    public java.util.List<java.lang.Long>
        getNormalReplicasList() {
      return ((bitField0_ & 0x00000001) != 0) ?
               java.util.Collections.unmodifiableList(normalReplicas_) : normalReplicas_;
    }
    /**
     * <pre>
     * Currently, only involved replica's versions are stored, to save space, replica are stored in 2 lists
     * a list of int64 to store `normal` replicas, in the following form:
     *   replica1Id, replica2Id, ...
     * a list of int64 to store `abnormal` replica's versions, in the following form:
     *   replica1Id, replica1Version, replica2Id, replica2Version, ...
     * For all the replicas involved in a txn, if the replica's version != partition's txn commit version
     * it is considered abnormal, and put into abnormal list.
     * </pre>
     *
     * <code>repeated int64 normal_replicas = 1;</code>
     * @return The count of normalReplicas.
     */
    public int getNormalReplicasCount() {
      return normalReplicas_.size();
    }
    /**
     * <pre>
     * Currently, only involved replica's versions are stored, to save space, replica are stored in 2 lists
     * a list of int64 to store `normal` replicas, in the following form:
     *   replica1Id, replica2Id, ...
     * a list of int64 to store `abnormal` replica's versions, in the following form:
     *   replica1Id, replica1Version, replica2Id, replica2Version, ...
     * For all the replicas involved in a txn, if the replica's version != partition's txn commit version
     * it is considered abnormal, and put into abnormal list.
     * </pre>
     *
     * <code>repeated int64 normal_replicas = 1;</code>
     * @param index The index of the element to return.
     * @return The normalReplicas at the given index.
     */
    public long getNormalReplicas(int index) {
      return normalReplicas_.getLong(index);
    }
    /**
     * <pre>
     * Currently, only involved replica's versions are stored, to save space, replica are stored in 2 lists
     * a list of int64 to store `normal` replicas, in the following form:
     *   replica1Id, replica2Id, ...
     * a list of int64 to store `abnormal` replica's versions, in the following form:
     *   replica1Id, replica1Version, replica2Id, replica2Version, ...
     * For all the replicas involved in a txn, if the replica's version != partition's txn commit version
     * it is considered abnormal, and put into abnormal list.
     * </pre>
     *
     * <code>repeated int64 normal_replicas = 1;</code>
     * @param index The index to set the value at.
     * @param value The normalReplicas to set.
     * @return This builder for chaining.
     */
    public Builder setNormalReplicas(
        int index, long value) {
      ensureNormalReplicasIsMutable();
      normalReplicas_.setLong(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Currently, only involved replica's versions are stored, to save space, replica are stored in 2 lists
     * a list of int64 to store `normal` replicas, in the following form:
     *   replica1Id, replica2Id, ...
     * a list of int64 to store `abnormal` replica's versions, in the following form:
     *   replica1Id, replica1Version, replica2Id, replica2Version, ...
     * For all the replicas involved in a txn, if the replica's version != partition's txn commit version
     * it is considered abnormal, and put into abnormal list.
     * </pre>
     *
     * <code>repeated int64 normal_replicas = 1;</code>
     * @param value The normalReplicas to add.
     * @return This builder for chaining.
     */
    public Builder addNormalReplicas(long value) {
      ensureNormalReplicasIsMutable();
      normalReplicas_.addLong(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Currently, only involved replica's versions are stored, to save space, replica are stored in 2 lists
     * a list of int64 to store `normal` replicas, in the following form:
     *   replica1Id, replica2Id, ...
     * a list of int64 to store `abnormal` replica's versions, in the following form:
     *   replica1Id, replica1Version, replica2Id, replica2Version, ...
     * For all the replicas involved in a txn, if the replica's version != partition's txn commit version
     * it is considered abnormal, and put into abnormal list.
     * </pre>
     *
     * <code>repeated int64 normal_replicas = 1;</code>
     * @param values The normalReplicas to add.
     * @return This builder for chaining.
     */
    public Builder addAllNormalReplicas(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureNormalReplicasIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, normalReplicas_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Currently, only involved replica's versions are stored, to save space, replica are stored in 2 lists
     * a list of int64 to store `normal` replicas, in the following form:
     *   replica1Id, replica2Id, ...
     * a list of int64 to store `abnormal` replica's versions, in the following form:
     *   replica1Id, replica1Version, replica2Id, replica2Version, ...
     * For all the replicas involved in a txn, if the replica's version != partition's txn commit version
     * it is considered abnormal, and put into abnormal list.
     * </pre>
     *
     * <code>repeated int64 normal_replicas = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearNormalReplicas() {
      normalReplicas_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.LongList abnormalReplicasWithVersion_ = emptyLongList();
    private void ensureAbnormalReplicasWithVersionIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        abnormalReplicasWithVersion_ = mutableCopy(abnormalReplicasWithVersion_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <code>repeated int64 abnormal_replicas_with_version = 2;</code>
     * @return A list containing the abnormalReplicasWithVersion.
     */
    public java.util.List<java.lang.Long>
        getAbnormalReplicasWithVersionList() {
      return ((bitField0_ & 0x00000002) != 0) ?
               java.util.Collections.unmodifiableList(abnormalReplicasWithVersion_) : abnormalReplicasWithVersion_;
    }
    /**
     * <code>repeated int64 abnormal_replicas_with_version = 2;</code>
     * @return The count of abnormalReplicasWithVersion.
     */
    public int getAbnormalReplicasWithVersionCount() {
      return abnormalReplicasWithVersion_.size();
    }
    /**
     * <code>repeated int64 abnormal_replicas_with_version = 2;</code>
     * @param index The index of the element to return.
     * @return The abnormalReplicasWithVersion at the given index.
     */
    public long getAbnormalReplicasWithVersion(int index) {
      return abnormalReplicasWithVersion_.getLong(index);
    }
    /**
     * <code>repeated int64 abnormal_replicas_with_version = 2;</code>
     * @param index The index to set the value at.
     * @param value The abnormalReplicasWithVersion to set.
     * @return This builder for chaining.
     */
    public Builder setAbnormalReplicasWithVersion(
        int index, long value) {
      ensureAbnormalReplicasWithVersionIsMutable();
      abnormalReplicasWithVersion_.setLong(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int64 abnormal_replicas_with_version = 2;</code>
     * @param value The abnormalReplicasWithVersion to add.
     * @return This builder for chaining.
     */
    public Builder addAbnormalReplicasWithVersion(long value) {
      ensureAbnormalReplicasWithVersionIsMutable();
      abnormalReplicasWithVersion_.addLong(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int64 abnormal_replicas_with_version = 2;</code>
     * @param values The abnormalReplicasWithVersion to add.
     * @return This builder for chaining.
     */
    public Builder addAllAbnormalReplicasWithVersion(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureAbnormalReplicasWithVersionIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, abnormalReplicasWithVersion_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int64 abnormal_replicas_with_version = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearAbnormalReplicasWithVersion() {
      abnormalReplicasWithVersion_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:starrocks.TxnFinishStatePB)
  }

  // @@protoc_insertion_point(class_scope:starrocks.TxnFinishStatePB)
  private static final io.datafibre.fibre.proto.TxnFinishStatePB DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.datafibre.fibre.proto.TxnFinishStatePB();
  }

  public static io.datafibre.fibre.proto.TxnFinishStatePB getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<TxnFinishStatePB>
      PARSER = new com.google.protobuf.AbstractParser<TxnFinishStatePB>() {
    @java.lang.Override
    public TxnFinishStatePB parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<TxnFinishStatePB> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TxnFinishStatePB> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.datafibre.fibre.proto.TxnFinishStatePB getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

