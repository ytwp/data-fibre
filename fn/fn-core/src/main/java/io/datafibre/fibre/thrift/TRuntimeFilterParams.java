/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TRuntimeFilterParams implements org.apache.thrift.TBase<TRuntimeFilterParams, TRuntimeFilterParams._Fields>, java.io.Serializable, Cloneable, Comparable<TRuntimeFilterParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRuntimeFilterParams");

  private static final org.apache.thrift.protocol.TField ID_TO_PROBER_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("id_to_prober_params", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_BUILDER_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_builder_number", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_MAX_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_max_size", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRuntimeFilterParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRuntimeFilterParamsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<TRuntimeFilterProberParams>> id_to_prober_params; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> runtime_filter_builder_number; // optional
  public long runtime_filter_max_size; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID_TO_PROBER_PARAMS((short)2, "id_to_prober_params"),
    RUNTIME_FILTER_BUILDER_NUMBER((short)3, "runtime_filter_builder_number"),
    RUNTIME_FILTER_MAX_SIZE((short)4, "runtime_filter_max_size");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // ID_TO_PROBER_PARAMS
          return ID_TO_PROBER_PARAMS;
        case 3: // RUNTIME_FILTER_BUILDER_NUMBER
          return RUNTIME_FILTER_BUILDER_NUMBER;
        case 4: // RUNTIME_FILTER_MAX_SIZE
          return RUNTIME_FILTER_MAX_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RUNTIME_FILTER_MAX_SIZE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID_TO_PROBER_PARAMS,_Fields.RUNTIME_FILTER_BUILDER_NUMBER,_Fields.RUNTIME_FILTER_MAX_SIZE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID_TO_PROBER_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("id_to_prober_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRuntimeFilterProberParams.class)))));
    tmpMap.put(_Fields.RUNTIME_FILTER_BUILDER_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_builder_number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.RUNTIME_FILTER_MAX_SIZE, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_max_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRuntimeFilterParams.class, metaDataMap);
  }

  public TRuntimeFilterParams() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRuntimeFilterParams(TRuntimeFilterParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId_to_prober_params()) {
      java.util.Map<java.lang.Integer,java.util.List<TRuntimeFilterProberParams>> __this__id_to_prober_params = new java.util.HashMap<java.lang.Integer,java.util.List<TRuntimeFilterProberParams>>(other.id_to_prober_params.size());
      for (java.util.Map.Entry<java.lang.Integer, java.util.List<TRuntimeFilterProberParams>> other_element : other.id_to_prober_params.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.util.List<TRuntimeFilterProberParams> other_element_value = other_element.getValue();

        java.lang.Integer __this__id_to_prober_params_copy_key = other_element_key;

        java.util.List<TRuntimeFilterProberParams> __this__id_to_prober_params_copy_value = new java.util.ArrayList<TRuntimeFilterProberParams>(other_element_value.size());
        for (TRuntimeFilterProberParams other_element_value_element : other_element_value) {
          __this__id_to_prober_params_copy_value.add(new TRuntimeFilterProberParams(other_element_value_element));
        }

        __this__id_to_prober_params.put(__this__id_to_prober_params_copy_key, __this__id_to_prober_params_copy_value);
      }
      this.id_to_prober_params = __this__id_to_prober_params;
    }
    if (other.isSetRuntime_filter_builder_number()) {
      java.util.Map<java.lang.Integer,java.lang.Integer> __this__runtime_filter_builder_number = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.runtime_filter_builder_number);
      this.runtime_filter_builder_number = __this__runtime_filter_builder_number;
    }
    this.runtime_filter_max_size = other.runtime_filter_max_size;
  }

  @Override
  public TRuntimeFilterParams deepCopy() {
    return new TRuntimeFilterParams(this);
  }

  @Override
  public void clear() {
    this.id_to_prober_params = null;
    this.runtime_filter_builder_number = null;
    setRuntime_filter_max_sizeIsSet(false);
    this.runtime_filter_max_size = 0;
  }

  public int getId_to_prober_paramsSize() {
    return (this.id_to_prober_params == null) ? 0 : this.id_to_prober_params.size();
  }

  public void putToId_to_prober_params(int key, java.util.List<TRuntimeFilterProberParams> val) {
    if (this.id_to_prober_params == null) {
      this.id_to_prober_params = new java.util.HashMap<java.lang.Integer,java.util.List<TRuntimeFilterProberParams>>();
    }
    this.id_to_prober_params.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.util.List<TRuntimeFilterProberParams>> getId_to_prober_params() {
    return this.id_to_prober_params;
  }

  public TRuntimeFilterParams setId_to_prober_params(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<TRuntimeFilterProberParams>> id_to_prober_params) {
    this.id_to_prober_params = id_to_prober_params;
    return this;
  }

  public void unsetId_to_prober_params() {
    this.id_to_prober_params = null;
  }

  /** Returns true if field id_to_prober_params is set (has been assigned a value) and false otherwise */
  public boolean isSetId_to_prober_params() {
    return this.id_to_prober_params != null;
  }

  public void setId_to_prober_paramsIsSet(boolean value) {
    if (!value) {
      this.id_to_prober_params = null;
    }
  }

  public int getRuntime_filter_builder_numberSize() {
    return (this.runtime_filter_builder_number == null) ? 0 : this.runtime_filter_builder_number.size();
  }

  public void putToRuntime_filter_builder_number(int key, int val) {
    if (this.runtime_filter_builder_number == null) {
      this.runtime_filter_builder_number = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
    }
    this.runtime_filter_builder_number.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Integer> getRuntime_filter_builder_number() {
    return this.runtime_filter_builder_number;
  }

  public TRuntimeFilterParams setRuntime_filter_builder_number(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> runtime_filter_builder_number) {
    this.runtime_filter_builder_number = runtime_filter_builder_number;
    return this;
  }

  public void unsetRuntime_filter_builder_number() {
    this.runtime_filter_builder_number = null;
  }

  /** Returns true if field runtime_filter_builder_number is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_filter_builder_number() {
    return this.runtime_filter_builder_number != null;
  }

  public void setRuntime_filter_builder_numberIsSet(boolean value) {
    if (!value) {
      this.runtime_filter_builder_number = null;
    }
  }

  public long getRuntime_filter_max_size() {
    return this.runtime_filter_max_size;
  }

  public TRuntimeFilterParams setRuntime_filter_max_size(long runtime_filter_max_size) {
    this.runtime_filter_max_size = runtime_filter_max_size;
    setRuntime_filter_max_sizeIsSet(true);
    return this;
  }

  public void unsetRuntime_filter_max_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNTIME_FILTER_MAX_SIZE_ISSET_ID);
  }

  /** Returns true if field runtime_filter_max_size is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_filter_max_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNTIME_FILTER_MAX_SIZE_ISSET_ID);
  }

  public void setRuntime_filter_max_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNTIME_FILTER_MAX_SIZE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID_TO_PROBER_PARAMS:
      if (value == null) {
        unsetId_to_prober_params();
      } else {
        setId_to_prober_params((java.util.Map<java.lang.Integer,java.util.List<TRuntimeFilterProberParams>>)value);
      }
      break;

    case RUNTIME_FILTER_BUILDER_NUMBER:
      if (value == null) {
        unsetRuntime_filter_builder_number();
      } else {
        setRuntime_filter_builder_number((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
      }
      break;

    case RUNTIME_FILTER_MAX_SIZE:
      if (value == null) {
        unsetRuntime_filter_max_size();
      } else {
        setRuntime_filter_max_size((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID_TO_PROBER_PARAMS:
      return getId_to_prober_params();

    case RUNTIME_FILTER_BUILDER_NUMBER:
      return getRuntime_filter_builder_number();

    case RUNTIME_FILTER_MAX_SIZE:
      return getRuntime_filter_max_size();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID_TO_PROBER_PARAMS:
      return isSetId_to_prober_params();
    case RUNTIME_FILTER_BUILDER_NUMBER:
      return isSetRuntime_filter_builder_number();
    case RUNTIME_FILTER_MAX_SIZE:
      return isSetRuntime_filter_max_size();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRuntimeFilterParams)
      return this.equals((TRuntimeFilterParams)that);
    return false;
  }

  public boolean equals(TRuntimeFilterParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id_to_prober_params = true && this.isSetId_to_prober_params();
    boolean that_present_id_to_prober_params = true && that.isSetId_to_prober_params();
    if (this_present_id_to_prober_params || that_present_id_to_prober_params) {
      if (!(this_present_id_to_prober_params && that_present_id_to_prober_params))
        return false;
      if (!this.id_to_prober_params.equals(that.id_to_prober_params))
        return false;
    }

    boolean this_present_runtime_filter_builder_number = true && this.isSetRuntime_filter_builder_number();
    boolean that_present_runtime_filter_builder_number = true && that.isSetRuntime_filter_builder_number();
    if (this_present_runtime_filter_builder_number || that_present_runtime_filter_builder_number) {
      if (!(this_present_runtime_filter_builder_number && that_present_runtime_filter_builder_number))
        return false;
      if (!this.runtime_filter_builder_number.equals(that.runtime_filter_builder_number))
        return false;
    }

    boolean this_present_runtime_filter_max_size = true && this.isSetRuntime_filter_max_size();
    boolean that_present_runtime_filter_max_size = true && that.isSetRuntime_filter_max_size();
    if (this_present_runtime_filter_max_size || that_present_runtime_filter_max_size) {
      if (!(this_present_runtime_filter_max_size && that_present_runtime_filter_max_size))
        return false;
      if (this.runtime_filter_max_size != that.runtime_filter_max_size)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId_to_prober_params()) ? 131071 : 524287);
    if (isSetId_to_prober_params())
      hashCode = hashCode * 8191 + id_to_prober_params.hashCode();

    hashCode = hashCode * 8191 + ((isSetRuntime_filter_builder_number()) ? 131071 : 524287);
    if (isSetRuntime_filter_builder_number())
      hashCode = hashCode * 8191 + runtime_filter_builder_number.hashCode();

    hashCode = hashCode * 8191 + ((isSetRuntime_filter_max_size()) ? 131071 : 524287);
    if (isSetRuntime_filter_max_size())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(runtime_filter_max_size);

    return hashCode;
  }

  @Override
  public int compareTo(TRuntimeFilterParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId_to_prober_params(), other.isSetId_to_prober_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId_to_prober_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_to_prober_params, other.id_to_prober_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntime_filter_builder_number(), other.isSetRuntime_filter_builder_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_filter_builder_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_builder_number, other.runtime_filter_builder_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntime_filter_max_size(), other.isSetRuntime_filter_max_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_filter_max_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_max_size, other.runtime_filter_max_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRuntimeFilterParams(");
    boolean first = true;

    if (isSetId_to_prober_params()) {
      sb.append("id_to_prober_params:");
      if (this.id_to_prober_params == null) {
        sb.append("null");
      } else {
        sb.append(this.id_to_prober_params);
      }
      first = false;
    }
    if (isSetRuntime_filter_builder_number()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_builder_number:");
      if (this.runtime_filter_builder_number == null) {
        sb.append("null");
      } else {
        sb.append(this.runtime_filter_builder_number);
      }
      first = false;
    }
    if (isSetRuntime_filter_max_size()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_max_size:");
      sb.append(this.runtime_filter_max_size);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRuntimeFilterParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRuntimeFilterParamsStandardScheme getScheme() {
      return new TRuntimeFilterParamsStandardScheme();
    }
  }

  private static class TRuntimeFilterParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRuntimeFilterParams> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TRuntimeFilterParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // ID_TO_PROBER_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map92 = iprot.readMapBegin();
                struct.id_to_prober_params = new java.util.HashMap<java.lang.Integer,java.util.List<TRuntimeFilterProberParams>>(2*_map92.size);
                int _key93;
                @org.apache.thrift.annotation.Nullable java.util.List<TRuntimeFilterProberParams> _val94;
                for (int _i95 = 0; _i95 < _map92.size; ++_i95)
                {
                  _key93 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                    _val94 = new java.util.ArrayList<TRuntimeFilterProberParams>(_list96.size);
                    @org.apache.thrift.annotation.Nullable TRuntimeFilterProberParams _elem97;
                    for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                    {
                      _elem97 = new TRuntimeFilterProberParams();
                      _elem97.read(iprot);
                      _val94.add(_elem97);
                    }
                    iprot.readListEnd();
                  }
                  struct.id_to_prober_params.put(_key93, _val94);
                }
                iprot.readMapEnd();
              }
              struct.setId_to_prober_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RUNTIME_FILTER_BUILDER_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map99 = iprot.readMapBegin();
                struct.runtime_filter_builder_number = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map99.size);
                int _key100;
                int _val101;
                for (int _i102 = 0; _i102 < _map99.size; ++_i102)
                {
                  _key100 = iprot.readI32();
                  _val101 = iprot.readI32();
                  struct.runtime_filter_builder_number.put(_key100, _val101);
                }
                iprot.readMapEnd();
              }
              struct.setRuntime_filter_builder_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RUNTIME_FILTER_MAX_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.runtime_filter_max_size = iprot.readI64();
              struct.setRuntime_filter_max_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TRuntimeFilterParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id_to_prober_params != null) {
        if (struct.isSetId_to_prober_params()) {
          oprot.writeFieldBegin(ID_TO_PROBER_PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.id_to_prober_params.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.util.List<TRuntimeFilterProberParams>> _iter103 : struct.id_to_prober_params.entrySet())
            {
              oprot.writeI32(_iter103.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter103.getValue().size()));
                for (TRuntimeFilterProberParams _iter104 : _iter103.getValue())
                {
                  _iter104.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.runtime_filter_builder_number != null) {
        if (struct.isSetRuntime_filter_builder_number()) {
          oprot.writeFieldBegin(RUNTIME_FILTER_BUILDER_NUMBER_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.runtime_filter_builder_number.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter105 : struct.runtime_filter_builder_number.entrySet())
            {
              oprot.writeI32(_iter105.getKey());
              oprot.writeI32(_iter105.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRuntime_filter_max_size()) {
        oprot.writeFieldBegin(RUNTIME_FILTER_MAX_SIZE_FIELD_DESC);
        oprot.writeI64(struct.runtime_filter_max_size);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRuntimeFilterParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRuntimeFilterParamsTupleScheme getScheme() {
      return new TRuntimeFilterParamsTupleScheme();
    }
  }

  private static class TRuntimeFilterParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRuntimeFilterParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId_to_prober_params()) {
        optionals.set(0);
      }
      if (struct.isSetRuntime_filter_builder_number()) {
        optionals.set(1);
      }
      if (struct.isSetRuntime_filter_max_size()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetId_to_prober_params()) {
        {
          oprot.writeI32(struct.id_to_prober_params.size());
          for (java.util.Map.Entry<java.lang.Integer, java.util.List<TRuntimeFilterProberParams>> _iter106 : struct.id_to_prober_params.entrySet())
          {
            oprot.writeI32(_iter106.getKey());
            {
              oprot.writeI32(_iter106.getValue().size());
              for (TRuntimeFilterProberParams _iter107 : _iter106.getValue())
              {
                _iter107.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetRuntime_filter_builder_number()) {
        {
          oprot.writeI32(struct.runtime_filter_builder_number.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter108 : struct.runtime_filter_builder_number.entrySet())
          {
            oprot.writeI32(_iter108.getKey());
            oprot.writeI32(_iter108.getValue());
          }
        }
      }
      if (struct.isSetRuntime_filter_max_size()) {
        oprot.writeI64(struct.runtime_filter_max_size);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map109 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST); 
          struct.id_to_prober_params = new java.util.HashMap<java.lang.Integer,java.util.List<TRuntimeFilterProberParams>>(2*_map109.size);
          int _key110;
          @org.apache.thrift.annotation.Nullable java.util.List<TRuntimeFilterProberParams> _val111;
          for (int _i112 = 0; _i112 < _map109.size; ++_i112)
          {
            _key110 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list113 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
              _val111 = new java.util.ArrayList<TRuntimeFilterProberParams>(_list113.size);
              @org.apache.thrift.annotation.Nullable TRuntimeFilterProberParams _elem114;
              for (int _i115 = 0; _i115 < _list113.size; ++_i115)
              {
                _elem114 = new TRuntimeFilterProberParams();
                _elem114.read(iprot);
                _val111.add(_elem114);
              }
            }
            struct.id_to_prober_params.put(_key110, _val111);
          }
        }
        struct.setId_to_prober_paramsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map116 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32); 
          struct.runtime_filter_builder_number = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map116.size);
          int _key117;
          int _val118;
          for (int _i119 = 0; _i119 < _map116.size; ++_i119)
          {
            _key117 = iprot.readI32();
            _val118 = iprot.readI32();
            struct.runtime_filter_builder_number.put(_key117, _val118);
          }
        }
        struct.setRuntime_filter_builder_numberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.runtime_filter_max_size = iprot.readI64();
        struct.setRuntime_filter_max_sizeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

