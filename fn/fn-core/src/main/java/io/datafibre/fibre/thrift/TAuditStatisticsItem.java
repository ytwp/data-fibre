/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TAuditStatisticsItem implements org.apache.thrift.TBase<TAuditStatisticsItem, TAuditStatisticsItem._Fields>, java.io.Serializable, Cloneable, Comparable<TAuditStatisticsItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAuditStatisticsItem");

  private static final org.apache.thrift.protocol.TField SCAN_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_rows", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SCAN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_bytes", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAuditStatisticsItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAuditStatisticsItemTupleSchemeFactory();

  public long scan_rows; // optional
  public long scan_bytes; // optional
  public long table_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCAN_ROWS((short)1, "scan_rows"),
    SCAN_BYTES((short)2, "scan_bytes"),
    TABLE_ID((short)3, "table_id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCAN_ROWS
          return SCAN_ROWS;
        case 2: // SCAN_BYTES
          return SCAN_BYTES;
        case 3: // TABLE_ID
          return TABLE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCAN_ROWS_ISSET_ID = 0;
  private static final int __SCAN_BYTES_ISSET_ID = 1;
  private static final int __TABLE_ID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SCAN_ROWS,_Fields.SCAN_BYTES,_Fields.TABLE_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCAN_ROWS, new org.apache.thrift.meta_data.FieldMetaData("scan_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCAN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("scan_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAuditStatisticsItem.class, metaDataMap);
  }

  public TAuditStatisticsItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAuditStatisticsItem(TAuditStatisticsItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.scan_rows = other.scan_rows;
    this.scan_bytes = other.scan_bytes;
    this.table_id = other.table_id;
  }

  @Override
  public TAuditStatisticsItem deepCopy() {
    return new TAuditStatisticsItem(this);
  }

  @Override
  public void clear() {
    setScan_rowsIsSet(false);
    this.scan_rows = 0;
    setScan_bytesIsSet(false);
    this.scan_bytes = 0;
    setTable_idIsSet(false);
    this.table_id = 0;
  }

  public long getScan_rows() {
    return this.scan_rows;
  }

  public TAuditStatisticsItem setScan_rows(long scan_rows) {
    this.scan_rows = scan_rows;
    setScan_rowsIsSet(true);
    return this;
  }

  public void unsetScan_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCAN_ROWS_ISSET_ID);
  }

  /** Returns true if field scan_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetScan_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCAN_ROWS_ISSET_ID);
  }

  public void setScan_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCAN_ROWS_ISSET_ID, value);
  }

  public long getScan_bytes() {
    return this.scan_bytes;
  }

  public TAuditStatisticsItem setScan_bytes(long scan_bytes) {
    this.scan_bytes = scan_bytes;
    setScan_bytesIsSet(true);
    return this;
  }

  public void unsetScan_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCAN_BYTES_ISSET_ID);
  }

  /** Returns true if field scan_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetScan_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCAN_BYTES_ISSET_ID);
  }

  public void setScan_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCAN_BYTES_ISSET_ID, value);
  }

  public long getTable_id() {
    return this.table_id;
  }

  public TAuditStatisticsItem setTable_id(long table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SCAN_ROWS:
      if (value == null) {
        unsetScan_rows();
      } else {
        setScan_rows((java.lang.Long)value);
      }
      break;

    case SCAN_BYTES:
      if (value == null) {
        unsetScan_bytes();
      } else {
        setScan_bytes((java.lang.Long)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SCAN_ROWS:
      return getScan_rows();

    case SCAN_BYTES:
      return getScan_bytes();

    case TABLE_ID:
      return getTable_id();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SCAN_ROWS:
      return isSetScan_rows();
    case SCAN_BYTES:
      return isSetScan_bytes();
    case TABLE_ID:
      return isSetTable_id();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TAuditStatisticsItem)
      return this.equals((TAuditStatisticsItem)that);
    return false;
  }

  public boolean equals(TAuditStatisticsItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_scan_rows = true && this.isSetScan_rows();
    boolean that_present_scan_rows = true && that.isSetScan_rows();
    if (this_present_scan_rows || that_present_scan_rows) {
      if (!(this_present_scan_rows && that_present_scan_rows))
        return false;
      if (this.scan_rows != that.scan_rows)
        return false;
    }

    boolean this_present_scan_bytes = true && this.isSetScan_bytes();
    boolean that_present_scan_bytes = true && that.isSetScan_bytes();
    if (this_present_scan_bytes || that_present_scan_bytes) {
      if (!(this_present_scan_bytes && that_present_scan_bytes))
        return false;
      if (this.scan_bytes != that.scan_bytes)
        return false;
    }

    boolean this_present_table_id = true && this.isSetTable_id();
    boolean that_present_table_id = true && that.isSetTable_id();
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetScan_rows()) ? 131071 : 524287);
    if (isSetScan_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(scan_rows);

    hashCode = hashCode * 8191 + ((isSetScan_bytes()) ? 131071 : 524287);
    if (isSetScan_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(scan_bytes);

    hashCode = hashCode * 8191 + ((isSetTable_id()) ? 131071 : 524287);
    if (isSetTable_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_id);

    return hashCode;
  }

  @Override
  public int compareTo(TAuditStatisticsItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetScan_rows(), other.isSetScan_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScan_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_rows, other.scan_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetScan_bytes(), other.isSetScan_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScan_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_bytes, other.scan_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_id(), other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAuditStatisticsItem(");
    boolean first = true;

    if (isSetScan_rows()) {
      sb.append("scan_rows:");
      sb.append(this.scan_rows);
      first = false;
    }
    if (isSetScan_bytes()) {
      if (!first) sb.append(", ");
      sb.append("scan_bytes:");
      sb.append(this.scan_bytes);
      first = false;
    }
    if (isSetTable_id()) {
      if (!first) sb.append(", ");
      sb.append("table_id:");
      sb.append(this.table_id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAuditStatisticsItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAuditStatisticsItemStandardScheme getScheme() {
      return new TAuditStatisticsItemStandardScheme();
    }
  }

  private static class TAuditStatisticsItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAuditStatisticsItem> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TAuditStatisticsItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCAN_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scan_rows = iprot.readI64();
              struct.setScan_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCAN_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scan_bytes = iprot.readI64();
              struct.setScan_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_id = iprot.readI64();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TAuditStatisticsItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetScan_rows()) {
        oprot.writeFieldBegin(SCAN_ROWS_FIELD_DESC);
        oprot.writeI64(struct.scan_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetScan_bytes()) {
        oprot.writeFieldBegin(SCAN_BYTES_FIELD_DESC);
        oprot.writeI64(struct.scan_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTable_id()) {
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeI64(struct.table_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAuditStatisticsItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAuditStatisticsItemTupleScheme getScheme() {
      return new TAuditStatisticsItemTupleScheme();
    }
  }

  private static class TAuditStatisticsItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAuditStatisticsItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAuditStatisticsItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetScan_rows()) {
        optionals.set(0);
      }
      if (struct.isSetScan_bytes()) {
        optionals.set(1);
      }
      if (struct.isSetTable_id()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetScan_rows()) {
        oprot.writeI64(struct.scan_rows);
      }
      if (struct.isSetScan_bytes()) {
        oprot.writeI64(struct.scan_bytes);
      }
      if (struct.isSetTable_id()) {
        oprot.writeI64(struct.table_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAuditStatisticsItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.scan_rows = iprot.readI64();
        struct.setScan_rowsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.scan_bytes = iprot.readI64();
        struct.setScan_bytesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.table_id = iprot.readI64();
        struct.setTable_idIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

