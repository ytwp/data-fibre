/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TFileTable implements org.apache.thrift.TBase<TFileTable, TFileTable._Fields>, java.io.Serializable, Cloneable, Comparable<TFileTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFileTable");

  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField HIVE_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("hive_column_names", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HIVE_COLUMN_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("hive_column_types", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INPUT_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("input_format", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SERDE_LIB_FIELD_DESC = new org.apache.thrift.protocol.TField("serde_lib", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TIME_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("time_zone", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TFileTableStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TFileTableTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String location; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TColumn> columns; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String hive_column_names; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String hive_column_types; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String input_format; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String serde_lib; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String time_zone; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCATION((short)1, "location"),
    COLUMNS((short)2, "columns"),
    HIVE_COLUMN_NAMES((short)3, "hive_column_names"),
    HIVE_COLUMN_TYPES((short)4, "hive_column_types"),
    INPUT_FORMAT((short)5, "input_format"),
    SERDE_LIB((short)6, "serde_lib"),
    TIME_ZONE((short)7, "time_zone");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCATION
          return LOCATION;
        case 2: // COLUMNS
          return COLUMNS;
        case 3: // HIVE_COLUMN_NAMES
          return HIVE_COLUMN_NAMES;
        case 4: // HIVE_COLUMN_TYPES
          return HIVE_COLUMN_TYPES;
        case 5: // INPUT_FORMAT
          return INPUT_FORMAT;
        case 6: // SERDE_LIB
          return SERDE_LIB;
        case 7: // TIME_ZONE
          return TIME_ZONE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LOCATION,_Fields.COLUMNS,_Fields.HIVE_COLUMN_NAMES,_Fields.HIVE_COLUMN_TYPES,_Fields.INPUT_FORMAT,_Fields.SERDE_LIB,_Fields.TIME_ZONE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumn.class))));
    tmpMap.put(_Fields.HIVE_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("hive_column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIVE_COLUMN_TYPES, new org.apache.thrift.meta_data.FieldMetaData("hive_column_types", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INPUT_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("input_format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERDE_LIB, new org.apache.thrift.meta_data.FieldMetaData("serde_lib", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_ZONE, new org.apache.thrift.meta_data.FieldMetaData("time_zone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFileTable.class, metaDataMap);
  }

  public TFileTable() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFileTable(TFileTable other) {
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetColumns()) {
      java.util.List<TColumn> __this__columns = new java.util.ArrayList<TColumn>(other.columns.size());
      for (TColumn other_element : other.columns) {
        __this__columns.add(new TColumn(other_element));
      }
      this.columns = __this__columns;
    }
    if (other.isSetHive_column_names()) {
      this.hive_column_names = other.hive_column_names;
    }
    if (other.isSetHive_column_types()) {
      this.hive_column_types = other.hive_column_types;
    }
    if (other.isSetInput_format()) {
      this.input_format = other.input_format;
    }
    if (other.isSetSerde_lib()) {
      this.serde_lib = other.serde_lib;
    }
    if (other.isSetTime_zone()) {
      this.time_zone = other.time_zone;
    }
  }

  @Override
  public TFileTable deepCopy() {
    return new TFileTable(this);
  }

  @Override
  public void clear() {
    this.location = null;
    this.columns = null;
    this.hive_column_names = null;
    this.hive_column_types = null;
    this.input_format = null;
    this.serde_lib = null;
    this.time_zone = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLocation() {
    return this.location;
  }

  public TFileTable setLocation(@org.apache.thrift.annotation.Nullable java.lang.String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(TColumn elem) {
    if (this.columns == null) {
      this.columns = new java.util.ArrayList<TColumn>();
    }
    this.columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TColumn> getColumns() {
    return this.columns;
  }

  public TFileTable setColumns(@org.apache.thrift.annotation.Nullable java.util.List<TColumn> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHive_column_names() {
    return this.hive_column_names;
  }

  public TFileTable setHive_column_names(@org.apache.thrift.annotation.Nullable java.lang.String hive_column_names) {
    this.hive_column_names = hive_column_names;
    return this;
  }

  public void unsetHive_column_names() {
    this.hive_column_names = null;
  }

  /** Returns true if field hive_column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetHive_column_names() {
    return this.hive_column_names != null;
  }

  public void setHive_column_namesIsSet(boolean value) {
    if (!value) {
      this.hive_column_names = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHive_column_types() {
    return this.hive_column_types;
  }

  public TFileTable setHive_column_types(@org.apache.thrift.annotation.Nullable java.lang.String hive_column_types) {
    this.hive_column_types = hive_column_types;
    return this;
  }

  public void unsetHive_column_types() {
    this.hive_column_types = null;
  }

  /** Returns true if field hive_column_types is set (has been assigned a value) and false otherwise */
  public boolean isSetHive_column_types() {
    return this.hive_column_types != null;
  }

  public void setHive_column_typesIsSet(boolean value) {
    if (!value) {
      this.hive_column_types = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getInput_format() {
    return this.input_format;
  }

  public TFileTable setInput_format(@org.apache.thrift.annotation.Nullable java.lang.String input_format) {
    this.input_format = input_format;
    return this;
  }

  public void unsetInput_format() {
    this.input_format = null;
  }

  /** Returns true if field input_format is set (has been assigned a value) and false otherwise */
  public boolean isSetInput_format() {
    return this.input_format != null;
  }

  public void setInput_formatIsSet(boolean value) {
    if (!value) {
      this.input_format = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSerde_lib() {
    return this.serde_lib;
  }

  public TFileTable setSerde_lib(@org.apache.thrift.annotation.Nullable java.lang.String serde_lib) {
    this.serde_lib = serde_lib;
    return this;
  }

  public void unsetSerde_lib() {
    this.serde_lib = null;
  }

  /** Returns true if field serde_lib is set (has been assigned a value) and false otherwise */
  public boolean isSetSerde_lib() {
    return this.serde_lib != null;
  }

  public void setSerde_libIsSet(boolean value) {
    if (!value) {
      this.serde_lib = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTime_zone() {
    return this.time_zone;
  }

  public TFileTable setTime_zone(@org.apache.thrift.annotation.Nullable java.lang.String time_zone) {
    this.time_zone = time_zone;
    return this;
  }

  public void unsetTime_zone() {
    this.time_zone = null;
  }

  /** Returns true if field time_zone is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_zone() {
    return this.time_zone != null;
  }

  public void setTime_zoneIsSet(boolean value) {
    if (!value) {
      this.time_zone = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((java.lang.String)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((java.util.List<TColumn>)value);
      }
      break;

    case HIVE_COLUMN_NAMES:
      if (value == null) {
        unsetHive_column_names();
      } else {
        setHive_column_names((java.lang.String)value);
      }
      break;

    case HIVE_COLUMN_TYPES:
      if (value == null) {
        unsetHive_column_types();
      } else {
        setHive_column_types((java.lang.String)value);
      }
      break;

    case INPUT_FORMAT:
      if (value == null) {
        unsetInput_format();
      } else {
        setInput_format((java.lang.String)value);
      }
      break;

    case SERDE_LIB:
      if (value == null) {
        unsetSerde_lib();
      } else {
        setSerde_lib((java.lang.String)value);
      }
      break;

    case TIME_ZONE:
      if (value == null) {
        unsetTime_zone();
      } else {
        setTime_zone((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCATION:
      return getLocation();

    case COLUMNS:
      return getColumns();

    case HIVE_COLUMN_NAMES:
      return getHive_column_names();

    case HIVE_COLUMN_TYPES:
      return getHive_column_types();

    case INPUT_FORMAT:
      return getInput_format();

    case SERDE_LIB:
      return getSerde_lib();

    case TIME_ZONE:
      return getTime_zone();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LOCATION:
      return isSetLocation();
    case COLUMNS:
      return isSetColumns();
    case HIVE_COLUMN_NAMES:
      return isSetHive_column_names();
    case HIVE_COLUMN_TYPES:
      return isSetHive_column_types();
    case INPUT_FORMAT:
      return isSetInput_format();
    case SERDE_LIB:
      return isSetSerde_lib();
    case TIME_ZONE:
      return isSetTime_zone();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TFileTable)
      return this.equals((TFileTable)that);
    return false;
  }

  public boolean equals(TFileTable that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_hive_column_names = true && this.isSetHive_column_names();
    boolean that_present_hive_column_names = true && that.isSetHive_column_names();
    if (this_present_hive_column_names || that_present_hive_column_names) {
      if (!(this_present_hive_column_names && that_present_hive_column_names))
        return false;
      if (!this.hive_column_names.equals(that.hive_column_names))
        return false;
    }

    boolean this_present_hive_column_types = true && this.isSetHive_column_types();
    boolean that_present_hive_column_types = true && that.isSetHive_column_types();
    if (this_present_hive_column_types || that_present_hive_column_types) {
      if (!(this_present_hive_column_types && that_present_hive_column_types))
        return false;
      if (!this.hive_column_types.equals(that.hive_column_types))
        return false;
    }

    boolean this_present_input_format = true && this.isSetInput_format();
    boolean that_present_input_format = true && that.isSetInput_format();
    if (this_present_input_format || that_present_input_format) {
      if (!(this_present_input_format && that_present_input_format))
        return false;
      if (!this.input_format.equals(that.input_format))
        return false;
    }

    boolean this_present_serde_lib = true && this.isSetSerde_lib();
    boolean that_present_serde_lib = true && that.isSetSerde_lib();
    if (this_present_serde_lib || that_present_serde_lib) {
      if (!(this_present_serde_lib && that_present_serde_lib))
        return false;
      if (!this.serde_lib.equals(that.serde_lib))
        return false;
    }

    boolean this_present_time_zone = true && this.isSetTime_zone();
    boolean that_present_time_zone = true && that.isSetTime_zone();
    if (this_present_time_zone || that_present_time_zone) {
      if (!(this_present_time_zone && that_present_time_zone))
        return false;
      if (!this.time_zone.equals(that.time_zone))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
    if (isSetLocation())
      hashCode = hashCode * 8191 + location.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
    if (isSetColumns())
      hashCode = hashCode * 8191 + columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetHive_column_names()) ? 131071 : 524287);
    if (isSetHive_column_names())
      hashCode = hashCode * 8191 + hive_column_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetHive_column_types()) ? 131071 : 524287);
    if (isSetHive_column_types())
      hashCode = hashCode * 8191 + hive_column_types.hashCode();

    hashCode = hashCode * 8191 + ((isSetInput_format()) ? 131071 : 524287);
    if (isSetInput_format())
      hashCode = hashCode * 8191 + input_format.hashCode();

    hashCode = hashCode * 8191 + ((isSetSerde_lib()) ? 131071 : 524287);
    if (isSetSerde_lib())
      hashCode = hashCode * 8191 + serde_lib.hashCode();

    hashCode = hashCode * 8191 + ((isSetTime_zone()) ? 131071 : 524287);
    if (isSetTime_zone())
      hashCode = hashCode * 8191 + time_zone.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TFileTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLocation(), other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHive_column_names(), other.isSetHive_column_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHive_column_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hive_column_names, other.hive_column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHive_column_types(), other.isSetHive_column_types());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHive_column_types()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hive_column_types, other.hive_column_types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInput_format(), other.isSetInput_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInput_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input_format, other.input_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSerde_lib(), other.isSetSerde_lib());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerde_lib()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serde_lib, other.serde_lib);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTime_zone(), other.isSetTime_zone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_zone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_zone, other.time_zone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TFileTable(");
    boolean first = true;

    if (isSetLocation()) {
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetColumns()) {
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
    }
    if (isSetHive_column_names()) {
      if (!first) sb.append(", ");
      sb.append("hive_column_names:");
      if (this.hive_column_names == null) {
        sb.append("null");
      } else {
        sb.append(this.hive_column_names);
      }
      first = false;
    }
    if (isSetHive_column_types()) {
      if (!first) sb.append(", ");
      sb.append("hive_column_types:");
      if (this.hive_column_types == null) {
        sb.append("null");
      } else {
        sb.append(this.hive_column_types);
      }
      first = false;
    }
    if (isSetInput_format()) {
      if (!first) sb.append(", ");
      sb.append("input_format:");
      if (this.input_format == null) {
        sb.append("null");
      } else {
        sb.append(this.input_format);
      }
      first = false;
    }
    if (isSetSerde_lib()) {
      if (!first) sb.append(", ");
      sb.append("serde_lib:");
      if (this.serde_lib == null) {
        sb.append("null");
      } else {
        sb.append(this.serde_lib);
      }
      first = false;
    }
    if (isSetTime_zone()) {
      if (!first) sb.append(", ");
      sb.append("time_zone:");
      if (this.time_zone == null) {
        sb.append("null");
      } else {
        sb.append(this.time_zone);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFileTableStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TFileTableStandardScheme getScheme() {
      return new TFileTableStandardScheme();
    }
  }

  private static class TFileTableStandardScheme extends org.apache.thrift.scheme.StandardScheme<TFileTable> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TFileTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list244 = iprot.readListBegin();
                struct.columns = new java.util.ArrayList<TColumn>(_list244.size);
                @org.apache.thrift.annotation.Nullable TColumn _elem245;
                for (int _i246 = 0; _i246 < _list244.size; ++_i246)
                {
                  _elem245 = new TColumn();
                  _elem245.read(iprot);
                  struct.columns.add(_elem245);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HIVE_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hive_column_names = iprot.readString();
              struct.setHive_column_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HIVE_COLUMN_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hive_column_types = iprot.readString();
              struct.setHive_column_typesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INPUT_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.input_format = iprot.readString();
              struct.setInput_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SERDE_LIB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serde_lib = iprot.readString();
              struct.setSerde_libIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIME_ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time_zone = iprot.readString();
              struct.setTime_zoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TFileTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columns != null) {
        if (struct.isSetColumns()) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
            for (TColumn _iter247 : struct.columns)
            {
              _iter247.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.hive_column_names != null) {
        if (struct.isSetHive_column_names()) {
          oprot.writeFieldBegin(HIVE_COLUMN_NAMES_FIELD_DESC);
          oprot.writeString(struct.hive_column_names);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hive_column_types != null) {
        if (struct.isSetHive_column_types()) {
          oprot.writeFieldBegin(HIVE_COLUMN_TYPES_FIELD_DESC);
          oprot.writeString(struct.hive_column_types);
          oprot.writeFieldEnd();
        }
      }
      if (struct.input_format != null) {
        if (struct.isSetInput_format()) {
          oprot.writeFieldBegin(INPUT_FORMAT_FIELD_DESC);
          oprot.writeString(struct.input_format);
          oprot.writeFieldEnd();
        }
      }
      if (struct.serde_lib != null) {
        if (struct.isSetSerde_lib()) {
          oprot.writeFieldBegin(SERDE_LIB_FIELD_DESC);
          oprot.writeString(struct.serde_lib);
          oprot.writeFieldEnd();
        }
      }
      if (struct.time_zone != null) {
        if (struct.isSetTime_zone()) {
          oprot.writeFieldBegin(TIME_ZONE_FIELD_DESC);
          oprot.writeString(struct.time_zone);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFileTableTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TFileTableTupleScheme getScheme() {
      return new TFileTableTupleScheme();
    }
  }

  private static class TFileTableTupleScheme extends org.apache.thrift.scheme.TupleScheme<TFileTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFileTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLocation()) {
        optionals.set(0);
      }
      if (struct.isSetColumns()) {
        optionals.set(1);
      }
      if (struct.isSetHive_column_names()) {
        optionals.set(2);
      }
      if (struct.isSetHive_column_types()) {
        optionals.set(3);
      }
      if (struct.isSetInput_format()) {
        optionals.set(4);
      }
      if (struct.isSetSerde_lib()) {
        optionals.set(5);
      }
      if (struct.isSetTime_zone()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetColumns()) {
        {
          oprot.writeI32(struct.columns.size());
          for (TColumn _iter248 : struct.columns)
          {
            _iter248.write(oprot);
          }
        }
      }
      if (struct.isSetHive_column_names()) {
        oprot.writeString(struct.hive_column_names);
      }
      if (struct.isSetHive_column_types()) {
        oprot.writeString(struct.hive_column_types);
      }
      if (struct.isSetInput_format()) {
        oprot.writeString(struct.input_format);
      }
      if (struct.isSetSerde_lib()) {
        oprot.writeString(struct.serde_lib);
      }
      if (struct.isSetTime_zone()) {
        oprot.writeString(struct.time_zone);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFileTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list249 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.columns = new java.util.ArrayList<TColumn>(_list249.size);
          @org.apache.thrift.annotation.Nullable TColumn _elem250;
          for (int _i251 = 0; _i251 < _list249.size; ++_i251)
          {
            _elem250 = new TColumn();
            _elem250.read(iprot);
            struct.columns.add(_elem250);
          }
        }
        struct.setColumnsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hive_column_names = iprot.readString();
        struct.setHive_column_namesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hive_column_types = iprot.readString();
        struct.setHive_column_typesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.input_format = iprot.readString();
        struct.setInput_formatIsSet(true);
      }
      if (incoming.get(5)) {
        struct.serde_lib = iprot.readString();
        struct.setSerde_libIsSet(true);
      }
      if (incoming.get(6)) {
        struct.time_zone = iprot.readString();
        struct.setTime_zoneIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

