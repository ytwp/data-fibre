/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TStreamScanNode implements org.apache.thrift.TBase<TStreamScanNode, TStreamScanNode._Fields>, java.io.Serializable, Cloneable, Comparable<TStreamScanNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStreamScanNode");

  private static final org.apache.thrift.protocol.TField SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("source_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BINLOG_SCAN_FIELD_DESC = new org.apache.thrift.protocol.TField("binlog_scan", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TStreamScanNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TStreamScanNodeTupleSchemeFactory();

  /**
   * 
   * @see io.datafibre.fibre.thrift.StreamSourceType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.StreamSourceType source_type; // optional
  public @org.apache.thrift.annotation.Nullable TBinlogScanNode binlog_scan; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see io.datafibre.fibre.thrift.StreamSourceType
     */
    SOURCE_TYPE((short)1, "source_type"),
    BINLOG_SCAN((short)11, "binlog_scan");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SOURCE_TYPE
          return SOURCE_TYPE;
        case 11: // BINLOG_SCAN
          return BINLOG_SCAN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SOURCE_TYPE,_Fields.BINLOG_SCAN};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("source_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.StreamSourceType.class)));
    tmpMap.put(_Fields.BINLOG_SCAN, new org.apache.thrift.meta_data.FieldMetaData("binlog_scan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBinlogScanNode.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStreamScanNode.class, metaDataMap);
  }

  public TStreamScanNode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStreamScanNode(TStreamScanNode other) {
    if (other.isSetSource_type()) {
      this.source_type = other.source_type;
    }
    if (other.isSetBinlog_scan()) {
      this.binlog_scan = new TBinlogScanNode(other.binlog_scan);
    }
  }

  @Override
  public TStreamScanNode deepCopy() {
    return new TStreamScanNode(this);
  }

  @Override
  public void clear() {
    this.source_type = null;
    this.binlog_scan = null;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.StreamSourceType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.StreamSourceType getSource_type() {
    return this.source_type;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.StreamSourceType
   */
  public TStreamScanNode setSource_type(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.StreamSourceType source_type) {
    this.source_type = source_type;
    return this;
  }

  public void unsetSource_type() {
    this.source_type = null;
  }

  /** Returns true if field source_type is set (has been assigned a value) and false otherwise */
  public boolean isSetSource_type() {
    return this.source_type != null;
  }

  public void setSource_typeIsSet(boolean value) {
    if (!value) {
      this.source_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TBinlogScanNode getBinlog_scan() {
    return this.binlog_scan;
  }

  public TStreamScanNode setBinlog_scan(@org.apache.thrift.annotation.Nullable TBinlogScanNode binlog_scan) {
    this.binlog_scan = binlog_scan;
    return this;
  }

  public void unsetBinlog_scan() {
    this.binlog_scan = null;
  }

  /** Returns true if field binlog_scan is set (has been assigned a value) and false otherwise */
  public boolean isSetBinlog_scan() {
    return this.binlog_scan != null;
  }

  public void setBinlog_scanIsSet(boolean value) {
    if (!value) {
      this.binlog_scan = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SOURCE_TYPE:
      if (value == null) {
        unsetSource_type();
      } else {
        setSource_type((io.datafibre.fibre.thrift.StreamSourceType)value);
      }
      break;

    case BINLOG_SCAN:
      if (value == null) {
        unsetBinlog_scan();
      } else {
        setBinlog_scan((TBinlogScanNode)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SOURCE_TYPE:
      return getSource_type();

    case BINLOG_SCAN:
      return getBinlog_scan();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SOURCE_TYPE:
      return isSetSource_type();
    case BINLOG_SCAN:
      return isSetBinlog_scan();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TStreamScanNode)
      return this.equals((TStreamScanNode)that);
    return false;
  }

  public boolean equals(TStreamScanNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_source_type = true && this.isSetSource_type();
    boolean that_present_source_type = true && that.isSetSource_type();
    if (this_present_source_type || that_present_source_type) {
      if (!(this_present_source_type && that_present_source_type))
        return false;
      if (!this.source_type.equals(that.source_type))
        return false;
    }

    boolean this_present_binlog_scan = true && this.isSetBinlog_scan();
    boolean that_present_binlog_scan = true && that.isSetBinlog_scan();
    if (this_present_binlog_scan || that_present_binlog_scan) {
      if (!(this_present_binlog_scan && that_present_binlog_scan))
        return false;
      if (!this.binlog_scan.equals(that.binlog_scan))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSource_type()) ? 131071 : 524287);
    if (isSetSource_type())
      hashCode = hashCode * 8191 + source_type.getValue();

    hashCode = hashCode * 8191 + ((isSetBinlog_scan()) ? 131071 : 524287);
    if (isSetBinlog_scan())
      hashCode = hashCode * 8191 + binlog_scan.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TStreamScanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSource_type(), other.isSetSource_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source_type, other.source_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBinlog_scan(), other.isSetBinlog_scan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinlog_scan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binlog_scan, other.binlog_scan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TStreamScanNode(");
    boolean first = true;

    if (isSetSource_type()) {
      sb.append("source_type:");
      if (this.source_type == null) {
        sb.append("null");
      } else {
        sb.append(this.source_type);
      }
      first = false;
    }
    if (isSetBinlog_scan()) {
      if (!first) sb.append(", ");
      sb.append("binlog_scan:");
      if (this.binlog_scan == null) {
        sb.append("null");
      } else {
        sb.append(this.binlog_scan);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (binlog_scan != null) {
      binlog_scan.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStreamScanNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamScanNodeStandardScheme getScheme() {
      return new TStreamScanNodeStandardScheme();
    }
  }

  private static class TStreamScanNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TStreamScanNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TStreamScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source_type = io.datafibre.fibre.thrift.StreamSourceType.findByValue(iprot.readI32());
              struct.setSource_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BINLOG_SCAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.binlog_scan = new TBinlogScanNode();
              struct.binlog_scan.read(iprot);
              struct.setBinlog_scanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TStreamScanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.source_type != null) {
        if (struct.isSetSource_type()) {
          oprot.writeFieldBegin(SOURCE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.source_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.binlog_scan != null) {
        if (struct.isSetBinlog_scan()) {
          oprot.writeFieldBegin(BINLOG_SCAN_FIELD_DESC);
          struct.binlog_scan.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStreamScanNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamScanNodeTupleScheme getScheme() {
      return new TStreamScanNodeTupleScheme();
    }
  }

  private static class TStreamScanNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TStreamScanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStreamScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSource_type()) {
        optionals.set(0);
      }
      if (struct.isSetBinlog_scan()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSource_type()) {
        oprot.writeI32(struct.source_type.getValue());
      }
      if (struct.isSetBinlog_scan()) {
        struct.binlog_scan.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStreamScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.source_type = io.datafibre.fibre.thrift.StreamSourceType.findByValue(iprot.readI32());
        struct.setSource_typeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.binlog_scan = new TBinlogScanNode();
        struct.binlog_scan.read(iprot);
        struct.setBinlog_scanIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

