/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TNormalPlanNode implements org.apache.thrift.TBase<TNormalPlanNode, TNormalPlanNode._Fields>, java.io.Serializable, Cloneable, Comparable<TNormalPlanNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNormalPlanNode");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("node_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("node_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("num_children", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ROW_TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("row_tuples", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField NULLABLE_TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("nullable_tuples", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("conjuncts", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField AGG_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("agg_node", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField OLAP_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("olap_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField PROJECT_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("project_node", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField DECODE_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("decode_node", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField HASH_JOIN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("hash_join_node", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField NESTLOOP_JOIN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("nestloop_join_node", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField TABLE_FUNCTION_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("table_function_node", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField REPEAT_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("repeat_node", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField ANALYTIC_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("analytic_node", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField ASSERT_NUM_ROWS_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("assert_num_rows_node", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField EXCHANGE_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchange_node", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField SORT_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_node", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField SORT_AGGREGATION_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_aggregation_node", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField SET_OPERATION_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("set_operation_node", org.apache.thrift.protocol.TType.STRUCT, (short)22);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TNormalPlanNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TNormalPlanNodeTupleSchemeFactory();

  public int node_id; // optional
  /**
   * 
   * @see io.datafibre.fibre.thrift.TPlanNodeType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPlanNodeType node_type; // optional
  public int num_children; // optional
  public long limit; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> row_tuples; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> nullable_tuples; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> conjuncts; // optional
  public @org.apache.thrift.annotation.Nullable TNormalAggregationNode agg_node; // optional
  public @org.apache.thrift.annotation.Nullable TNormalOlapScanNode olap_scan_node; // optional
  public @org.apache.thrift.annotation.Nullable TNormalProjectNode project_node; // optional
  public @org.apache.thrift.annotation.Nullable TNormalDecodeNode decode_node; // optional
  public @org.apache.thrift.annotation.Nullable TNormalHashJoinNode hash_join_node; // optional
  public @org.apache.thrift.annotation.Nullable TNormalNestLoopJoinNode nestloop_join_node; // optional
  public @org.apache.thrift.annotation.Nullable TNormalTableFunctionNode table_function_node; // optional
  public @org.apache.thrift.annotation.Nullable TNormalRepeatNode repeat_node; // optional
  public @org.apache.thrift.annotation.Nullable TNormalAnalyticNode analytic_node; // optional
  public @org.apache.thrift.annotation.Nullable TNormalAssertNumRowsNode assert_num_rows_node; // optional
  public @org.apache.thrift.annotation.Nullable TNormalExchangeNode exchange_node; // optional
  public @org.apache.thrift.annotation.Nullable TNormalSortNode sort_node; // optional
  public @org.apache.thrift.annotation.Nullable TNormalSortAggregationNode sort_aggregation_node; // optional
  public @org.apache.thrift.annotation.Nullable TNormalSetOperationNode set_operation_node; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "node_id"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TPlanNodeType
     */
    NODE_TYPE((short)2, "node_type"),
    NUM_CHILDREN((short)3, "num_children"),
    LIMIT((short)4, "limit"),
    ROW_TUPLES((short)5, "row_tuples"),
    NULLABLE_TUPLES((short)6, "nullable_tuples"),
    CONJUNCTS((short)7, "conjuncts"),
    AGG_NODE((short)8, "agg_node"),
    OLAP_SCAN_NODE((short)9, "olap_scan_node"),
    PROJECT_NODE((short)10, "project_node"),
    DECODE_NODE((short)11, "decode_node"),
    HASH_JOIN_NODE((short)12, "hash_join_node"),
    NESTLOOP_JOIN_NODE((short)13, "nestloop_join_node"),
    TABLE_FUNCTION_NODE((short)14, "table_function_node"),
    REPEAT_NODE((short)15, "repeat_node"),
    ANALYTIC_NODE((short)16, "analytic_node"),
    ASSERT_NUM_ROWS_NODE((short)17, "assert_num_rows_node"),
    EXCHANGE_NODE((short)18, "exchange_node"),
    SORT_NODE((short)19, "sort_node"),
    SORT_AGGREGATION_NODE((short)20, "sort_aggregation_node"),
    SET_OPERATION_NODE((short)22, "set_operation_node");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // NODE_TYPE
          return NODE_TYPE;
        case 3: // NUM_CHILDREN
          return NUM_CHILDREN;
        case 4: // LIMIT
          return LIMIT;
        case 5: // ROW_TUPLES
          return ROW_TUPLES;
        case 6: // NULLABLE_TUPLES
          return NULLABLE_TUPLES;
        case 7: // CONJUNCTS
          return CONJUNCTS;
        case 8: // AGG_NODE
          return AGG_NODE;
        case 9: // OLAP_SCAN_NODE
          return OLAP_SCAN_NODE;
        case 10: // PROJECT_NODE
          return PROJECT_NODE;
        case 11: // DECODE_NODE
          return DECODE_NODE;
        case 12: // HASH_JOIN_NODE
          return HASH_JOIN_NODE;
        case 13: // NESTLOOP_JOIN_NODE
          return NESTLOOP_JOIN_NODE;
        case 14: // TABLE_FUNCTION_NODE
          return TABLE_FUNCTION_NODE;
        case 15: // REPEAT_NODE
          return REPEAT_NODE;
        case 16: // ANALYTIC_NODE
          return ANALYTIC_NODE;
        case 17: // ASSERT_NUM_ROWS_NODE
          return ASSERT_NUM_ROWS_NODE;
        case 18: // EXCHANGE_NODE
          return EXCHANGE_NODE;
        case 19: // SORT_NODE
          return SORT_NODE;
        case 20: // SORT_AGGREGATION_NODE
          return SORT_AGGREGATION_NODE;
        case 22: // SET_OPERATION_NODE
          return SET_OPERATION_NODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NODE_ID_ISSET_ID = 0;
  private static final int __NUM_CHILDREN_ISSET_ID = 1;
  private static final int __LIMIT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NODE_ID,_Fields.NODE_TYPE,_Fields.NUM_CHILDREN,_Fields.LIMIT,_Fields.ROW_TUPLES,_Fields.NULLABLE_TUPLES,_Fields.CONJUNCTS,_Fields.AGG_NODE,_Fields.OLAP_SCAN_NODE,_Fields.PROJECT_NODE,_Fields.DECODE_NODE,_Fields.HASH_JOIN_NODE,_Fields.NESTLOOP_JOIN_NODE,_Fields.TABLE_FUNCTION_NODE,_Fields.REPEAT_NODE,_Fields.ANALYTIC_NODE,_Fields.ASSERT_NUM_ROWS_NODE,_Fields.EXCHANGE_NODE,_Fields.SORT_NODE,_Fields.SORT_AGGREGATION_NODE,_Fields.SET_OPERATION_NODE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("node_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TPlanNodeId")));
    tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("node_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TPlanNodeType.class)));
    tmpMap.put(_Fields.NUM_CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("num_children", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROW_TUPLES, new org.apache.thrift.meta_data.FieldMetaData("row_tuples", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TTupleId"))));
    tmpMap.put(_Fields.NULLABLE_TUPLES, new org.apache.thrift.meta_data.FieldMetaData("nullable_tuples", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.AGG_NODE, new org.apache.thrift.meta_data.FieldMetaData("agg_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNormalAggregationNode.class)));
    tmpMap.put(_Fields.OLAP_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("olap_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNormalOlapScanNode.class)));
    tmpMap.put(_Fields.PROJECT_NODE, new org.apache.thrift.meta_data.FieldMetaData("project_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNormalProjectNode.class)));
    tmpMap.put(_Fields.DECODE_NODE, new org.apache.thrift.meta_data.FieldMetaData("decode_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNormalDecodeNode.class)));
    tmpMap.put(_Fields.HASH_JOIN_NODE, new org.apache.thrift.meta_data.FieldMetaData("hash_join_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNormalHashJoinNode.class)));
    tmpMap.put(_Fields.NESTLOOP_JOIN_NODE, new org.apache.thrift.meta_data.FieldMetaData("nestloop_join_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNormalNestLoopJoinNode.class)));
    tmpMap.put(_Fields.TABLE_FUNCTION_NODE, new org.apache.thrift.meta_data.FieldMetaData("table_function_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNormalTableFunctionNode.class)));
    tmpMap.put(_Fields.REPEAT_NODE, new org.apache.thrift.meta_data.FieldMetaData("repeat_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNormalRepeatNode.class)));
    tmpMap.put(_Fields.ANALYTIC_NODE, new org.apache.thrift.meta_data.FieldMetaData("analytic_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNormalAnalyticNode.class)));
    tmpMap.put(_Fields.ASSERT_NUM_ROWS_NODE, new org.apache.thrift.meta_data.FieldMetaData("assert_num_rows_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNormalAssertNumRowsNode.class)));
    tmpMap.put(_Fields.EXCHANGE_NODE, new org.apache.thrift.meta_data.FieldMetaData("exchange_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNormalExchangeNode.class)));
    tmpMap.put(_Fields.SORT_NODE, new org.apache.thrift.meta_data.FieldMetaData("sort_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNormalSortNode.class)));
    tmpMap.put(_Fields.SORT_AGGREGATION_NODE, new org.apache.thrift.meta_data.FieldMetaData("sort_aggregation_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNormalSortAggregationNode.class)));
    tmpMap.put(_Fields.SET_OPERATION_NODE, new org.apache.thrift.meta_data.FieldMetaData("set_operation_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNormalSetOperationNode.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNormalPlanNode.class, metaDataMap);
  }

  public TNormalPlanNode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNormalPlanNode(TNormalPlanNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.node_id = other.node_id;
    if (other.isSetNode_type()) {
      this.node_type = other.node_type;
    }
    this.num_children = other.num_children;
    this.limit = other.limit;
    if (other.isSetRow_tuples()) {
      java.util.List<java.lang.Integer> __this__row_tuples = new java.util.ArrayList<java.lang.Integer>(other.row_tuples.size());
      for (java.lang.Integer other_element : other.row_tuples) {
        __this__row_tuples.add(other_element);
      }
      this.row_tuples = __this__row_tuples;
    }
    if (other.isSetNullable_tuples()) {
      java.util.List<java.lang.Boolean> __this__nullable_tuples = new java.util.ArrayList<java.lang.Boolean>(other.nullable_tuples);
      this.nullable_tuples = __this__nullable_tuples;
    }
    if (other.isSetConjuncts()) {
      java.util.List<java.nio.ByteBuffer> __this__conjuncts = new java.util.ArrayList<java.nio.ByteBuffer>(other.conjuncts);
      this.conjuncts = __this__conjuncts;
    }
    if (other.isSetAgg_node()) {
      this.agg_node = new TNormalAggregationNode(other.agg_node);
    }
    if (other.isSetOlap_scan_node()) {
      this.olap_scan_node = new TNormalOlapScanNode(other.olap_scan_node);
    }
    if (other.isSetProject_node()) {
      this.project_node = new TNormalProjectNode(other.project_node);
    }
    if (other.isSetDecode_node()) {
      this.decode_node = new TNormalDecodeNode(other.decode_node);
    }
    if (other.isSetHash_join_node()) {
      this.hash_join_node = new TNormalHashJoinNode(other.hash_join_node);
    }
    if (other.isSetNestloop_join_node()) {
      this.nestloop_join_node = new TNormalNestLoopJoinNode(other.nestloop_join_node);
    }
    if (other.isSetTable_function_node()) {
      this.table_function_node = new TNormalTableFunctionNode(other.table_function_node);
    }
    if (other.isSetRepeat_node()) {
      this.repeat_node = new TNormalRepeatNode(other.repeat_node);
    }
    if (other.isSetAnalytic_node()) {
      this.analytic_node = new TNormalAnalyticNode(other.analytic_node);
    }
    if (other.isSetAssert_num_rows_node()) {
      this.assert_num_rows_node = new TNormalAssertNumRowsNode(other.assert_num_rows_node);
    }
    if (other.isSetExchange_node()) {
      this.exchange_node = new TNormalExchangeNode(other.exchange_node);
    }
    if (other.isSetSort_node()) {
      this.sort_node = new TNormalSortNode(other.sort_node);
    }
    if (other.isSetSort_aggregation_node()) {
      this.sort_aggregation_node = new TNormalSortAggregationNode(other.sort_aggregation_node);
    }
    if (other.isSetSet_operation_node()) {
      this.set_operation_node = new TNormalSetOperationNode(other.set_operation_node);
    }
  }

  @Override
  public TNormalPlanNode deepCopy() {
    return new TNormalPlanNode(this);
  }

  @Override
  public void clear() {
    setNode_idIsSet(false);
    this.node_id = 0;
    this.node_type = null;
    setNum_childrenIsSet(false);
    this.num_children = 0;
    setLimitIsSet(false);
    this.limit = 0;
    this.row_tuples = null;
    this.nullable_tuples = null;
    this.conjuncts = null;
    this.agg_node = null;
    this.olap_scan_node = null;
    this.project_node = null;
    this.decode_node = null;
    this.hash_join_node = null;
    this.nestloop_join_node = null;
    this.table_function_node = null;
    this.repeat_node = null;
    this.analytic_node = null;
    this.assert_num_rows_node = null;
    this.exchange_node = null;
    this.sort_node = null;
    this.sort_aggregation_node = null;
    this.set_operation_node = null;
  }

  public int getNode_id() {
    return this.node_id;
  }

  public TNormalPlanNode setNode_id(int node_id) {
    this.node_id = node_id;
    setNode_idIsSet(true);
    return this;
  }

  public void unsetNode_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NODE_ID_ISSET_ID);
  }

  /** Returns true if field node_id is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NODE_ID_ISSET_ID);
  }

  public void setNode_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NODE_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TPlanNodeType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TPlanNodeType getNode_type() {
    return this.node_type;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TPlanNodeType
   */
  public TNormalPlanNode setNode_type(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPlanNodeType node_type) {
    this.node_type = node_type;
    return this;
  }

  public void unsetNode_type() {
    this.node_type = null;
  }

  /** Returns true if field node_type is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_type() {
    return this.node_type != null;
  }

  public void setNode_typeIsSet(boolean value) {
    if (!value) {
      this.node_type = null;
    }
  }

  public int getNum_children() {
    return this.num_children;
  }

  public TNormalPlanNode setNum_children(int num_children) {
    this.num_children = num_children;
    setNum_childrenIsSet(true);
    return this;
  }

  public void unsetNum_children() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  /** Returns true if field num_children is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_children() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  public void setNum_childrenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID, value);
  }

  public long getLimit() {
    return this.limit;
  }

  public TNormalPlanNode setLimit(long limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public int getRow_tuplesSize() {
    return (this.row_tuples == null) ? 0 : this.row_tuples.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getRow_tuplesIterator() {
    return (this.row_tuples == null) ? null : this.row_tuples.iterator();
  }

  public void addToRow_tuples(int elem) {
    if (this.row_tuples == null) {
      this.row_tuples = new java.util.ArrayList<java.lang.Integer>();
    }
    this.row_tuples.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getRow_tuples() {
    return this.row_tuples;
  }

  public TNormalPlanNode setRow_tuples(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> row_tuples) {
    this.row_tuples = row_tuples;
    return this;
  }

  public void unsetRow_tuples() {
    this.row_tuples = null;
  }

  /** Returns true if field row_tuples is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_tuples() {
    return this.row_tuples != null;
  }

  public void setRow_tuplesIsSet(boolean value) {
    if (!value) {
      this.row_tuples = null;
    }
  }

  public int getNullable_tuplesSize() {
    return (this.nullable_tuples == null) ? 0 : this.nullable_tuples.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getNullable_tuplesIterator() {
    return (this.nullable_tuples == null) ? null : this.nullable_tuples.iterator();
  }

  public void addToNullable_tuples(boolean elem) {
    if (this.nullable_tuples == null) {
      this.nullable_tuples = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.nullable_tuples.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getNullable_tuples() {
    return this.nullable_tuples;
  }

  public TNormalPlanNode setNullable_tuples(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> nullable_tuples) {
    this.nullable_tuples = nullable_tuples;
    return this;
  }

  public void unsetNullable_tuples() {
    this.nullable_tuples = null;
  }

  /** Returns true if field nullable_tuples is set (has been assigned a value) and false otherwise */
  public boolean isSetNullable_tuples() {
    return this.nullable_tuples != null;
  }

  public void setNullable_tuplesIsSet(boolean value) {
    if (!value) {
      this.nullable_tuples = null;
    }
  }

  public int getConjunctsSize() {
    return (this.conjuncts == null) ? 0 : this.conjuncts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getConjunctsIterator() {
    return (this.conjuncts == null) ? null : this.conjuncts.iterator();
  }

  public void addToConjuncts(java.nio.ByteBuffer elem) {
    if (this.conjuncts == null) {
      this.conjuncts = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.conjuncts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getConjuncts() {
    return this.conjuncts;
  }

  public TNormalPlanNode setConjuncts(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> conjuncts) {
    this.conjuncts = conjuncts;
    return this;
  }

  public void unsetConjuncts() {
    this.conjuncts = null;
  }

  /** Returns true if field conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetConjuncts() {
    return this.conjuncts != null;
  }

  public void setConjunctsIsSet(boolean value) {
    if (!value) {
      this.conjuncts = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNormalAggregationNode getAgg_node() {
    return this.agg_node;
  }

  public TNormalPlanNode setAgg_node(@org.apache.thrift.annotation.Nullable TNormalAggregationNode agg_node) {
    this.agg_node = agg_node;
    return this;
  }

  public void unsetAgg_node() {
    this.agg_node = null;
  }

  /** Returns true if field agg_node is set (has been assigned a value) and false otherwise */
  public boolean isSetAgg_node() {
    return this.agg_node != null;
  }

  public void setAgg_nodeIsSet(boolean value) {
    if (!value) {
      this.agg_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNormalOlapScanNode getOlap_scan_node() {
    return this.olap_scan_node;
  }

  public TNormalPlanNode setOlap_scan_node(@org.apache.thrift.annotation.Nullable TNormalOlapScanNode olap_scan_node) {
    this.olap_scan_node = olap_scan_node;
    return this;
  }

  public void unsetOlap_scan_node() {
    this.olap_scan_node = null;
  }

  /** Returns true if field olap_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetOlap_scan_node() {
    return this.olap_scan_node != null;
  }

  public void setOlap_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.olap_scan_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNormalProjectNode getProject_node() {
    return this.project_node;
  }

  public TNormalPlanNode setProject_node(@org.apache.thrift.annotation.Nullable TNormalProjectNode project_node) {
    this.project_node = project_node;
    return this;
  }

  public void unsetProject_node() {
    this.project_node = null;
  }

  /** Returns true if field project_node is set (has been assigned a value) and false otherwise */
  public boolean isSetProject_node() {
    return this.project_node != null;
  }

  public void setProject_nodeIsSet(boolean value) {
    if (!value) {
      this.project_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNormalDecodeNode getDecode_node() {
    return this.decode_node;
  }

  public TNormalPlanNode setDecode_node(@org.apache.thrift.annotation.Nullable TNormalDecodeNode decode_node) {
    this.decode_node = decode_node;
    return this;
  }

  public void unsetDecode_node() {
    this.decode_node = null;
  }

  /** Returns true if field decode_node is set (has been assigned a value) and false otherwise */
  public boolean isSetDecode_node() {
    return this.decode_node != null;
  }

  public void setDecode_nodeIsSet(boolean value) {
    if (!value) {
      this.decode_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNormalHashJoinNode getHash_join_node() {
    return this.hash_join_node;
  }

  public TNormalPlanNode setHash_join_node(@org.apache.thrift.annotation.Nullable TNormalHashJoinNode hash_join_node) {
    this.hash_join_node = hash_join_node;
    return this;
  }

  public void unsetHash_join_node() {
    this.hash_join_node = null;
  }

  /** Returns true if field hash_join_node is set (has been assigned a value) and false otherwise */
  public boolean isSetHash_join_node() {
    return this.hash_join_node != null;
  }

  public void setHash_join_nodeIsSet(boolean value) {
    if (!value) {
      this.hash_join_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNormalNestLoopJoinNode getNestloop_join_node() {
    return this.nestloop_join_node;
  }

  public TNormalPlanNode setNestloop_join_node(@org.apache.thrift.annotation.Nullable TNormalNestLoopJoinNode nestloop_join_node) {
    this.nestloop_join_node = nestloop_join_node;
    return this;
  }

  public void unsetNestloop_join_node() {
    this.nestloop_join_node = null;
  }

  /** Returns true if field nestloop_join_node is set (has been assigned a value) and false otherwise */
  public boolean isSetNestloop_join_node() {
    return this.nestloop_join_node != null;
  }

  public void setNestloop_join_nodeIsSet(boolean value) {
    if (!value) {
      this.nestloop_join_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNormalTableFunctionNode getTable_function_node() {
    return this.table_function_node;
  }

  public TNormalPlanNode setTable_function_node(@org.apache.thrift.annotation.Nullable TNormalTableFunctionNode table_function_node) {
    this.table_function_node = table_function_node;
    return this;
  }

  public void unsetTable_function_node() {
    this.table_function_node = null;
  }

  /** Returns true if field table_function_node is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_function_node() {
    return this.table_function_node != null;
  }

  public void setTable_function_nodeIsSet(boolean value) {
    if (!value) {
      this.table_function_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNormalRepeatNode getRepeat_node() {
    return this.repeat_node;
  }

  public TNormalPlanNode setRepeat_node(@org.apache.thrift.annotation.Nullable TNormalRepeatNode repeat_node) {
    this.repeat_node = repeat_node;
    return this;
  }

  public void unsetRepeat_node() {
    this.repeat_node = null;
  }

  /** Returns true if field repeat_node is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeat_node() {
    return this.repeat_node != null;
  }

  public void setRepeat_nodeIsSet(boolean value) {
    if (!value) {
      this.repeat_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNormalAnalyticNode getAnalytic_node() {
    return this.analytic_node;
  }

  public TNormalPlanNode setAnalytic_node(@org.apache.thrift.annotation.Nullable TNormalAnalyticNode analytic_node) {
    this.analytic_node = analytic_node;
    return this;
  }

  public void unsetAnalytic_node() {
    this.analytic_node = null;
  }

  /** Returns true if field analytic_node is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalytic_node() {
    return this.analytic_node != null;
  }

  public void setAnalytic_nodeIsSet(boolean value) {
    if (!value) {
      this.analytic_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNormalAssertNumRowsNode getAssert_num_rows_node() {
    return this.assert_num_rows_node;
  }

  public TNormalPlanNode setAssert_num_rows_node(@org.apache.thrift.annotation.Nullable TNormalAssertNumRowsNode assert_num_rows_node) {
    this.assert_num_rows_node = assert_num_rows_node;
    return this;
  }

  public void unsetAssert_num_rows_node() {
    this.assert_num_rows_node = null;
  }

  /** Returns true if field assert_num_rows_node is set (has been assigned a value) and false otherwise */
  public boolean isSetAssert_num_rows_node() {
    return this.assert_num_rows_node != null;
  }

  public void setAssert_num_rows_nodeIsSet(boolean value) {
    if (!value) {
      this.assert_num_rows_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNormalExchangeNode getExchange_node() {
    return this.exchange_node;
  }

  public TNormalPlanNode setExchange_node(@org.apache.thrift.annotation.Nullable TNormalExchangeNode exchange_node) {
    this.exchange_node = exchange_node;
    return this;
  }

  public void unsetExchange_node() {
    this.exchange_node = null;
  }

  /** Returns true if field exchange_node is set (has been assigned a value) and false otherwise */
  public boolean isSetExchange_node() {
    return this.exchange_node != null;
  }

  public void setExchange_nodeIsSet(boolean value) {
    if (!value) {
      this.exchange_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNormalSortNode getSort_node() {
    return this.sort_node;
  }

  public TNormalPlanNode setSort_node(@org.apache.thrift.annotation.Nullable TNormalSortNode sort_node) {
    this.sort_node = sort_node;
    return this;
  }

  public void unsetSort_node() {
    this.sort_node = null;
  }

  /** Returns true if field sort_node is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_node() {
    return this.sort_node != null;
  }

  public void setSort_nodeIsSet(boolean value) {
    if (!value) {
      this.sort_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNormalSortAggregationNode getSort_aggregation_node() {
    return this.sort_aggregation_node;
  }

  public TNormalPlanNode setSort_aggregation_node(@org.apache.thrift.annotation.Nullable TNormalSortAggregationNode sort_aggregation_node) {
    this.sort_aggregation_node = sort_aggregation_node;
    return this;
  }

  public void unsetSort_aggregation_node() {
    this.sort_aggregation_node = null;
  }

  /** Returns true if field sort_aggregation_node is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_aggregation_node() {
    return this.sort_aggregation_node != null;
  }

  public void setSort_aggregation_nodeIsSet(boolean value) {
    if (!value) {
      this.sort_aggregation_node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNormalSetOperationNode getSet_operation_node() {
    return this.set_operation_node;
  }

  public TNormalPlanNode setSet_operation_node(@org.apache.thrift.annotation.Nullable TNormalSetOperationNode set_operation_node) {
    this.set_operation_node = set_operation_node;
    return this;
  }

  public void unsetSet_operation_node() {
    this.set_operation_node = null;
  }

  /** Returns true if field set_operation_node is set (has been assigned a value) and false otherwise */
  public boolean isSetSet_operation_node() {
    return this.set_operation_node != null;
  }

  public void setSet_operation_nodeIsSet(boolean value) {
    if (!value) {
      this.set_operation_node = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNode_id();
      } else {
        setNode_id((java.lang.Integer)value);
      }
      break;

    case NODE_TYPE:
      if (value == null) {
        unsetNode_type();
      } else {
        setNode_type((io.datafibre.fibre.thrift.TPlanNodeType)value);
      }
      break;

    case NUM_CHILDREN:
      if (value == null) {
        unsetNum_children();
      } else {
        setNum_children((java.lang.Integer)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((java.lang.Long)value);
      }
      break;

    case ROW_TUPLES:
      if (value == null) {
        unsetRow_tuples();
      } else {
        setRow_tuples((java.util.List<java.lang.Integer>)value);
      }
      break;

    case NULLABLE_TUPLES:
      if (value == null) {
        unsetNullable_tuples();
      } else {
        setNullable_tuples((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case CONJUNCTS:
      if (value == null) {
        unsetConjuncts();
      } else {
        setConjuncts((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case AGG_NODE:
      if (value == null) {
        unsetAgg_node();
      } else {
        setAgg_node((TNormalAggregationNode)value);
      }
      break;

    case OLAP_SCAN_NODE:
      if (value == null) {
        unsetOlap_scan_node();
      } else {
        setOlap_scan_node((TNormalOlapScanNode)value);
      }
      break;

    case PROJECT_NODE:
      if (value == null) {
        unsetProject_node();
      } else {
        setProject_node((TNormalProjectNode)value);
      }
      break;

    case DECODE_NODE:
      if (value == null) {
        unsetDecode_node();
      } else {
        setDecode_node((TNormalDecodeNode)value);
      }
      break;

    case HASH_JOIN_NODE:
      if (value == null) {
        unsetHash_join_node();
      } else {
        setHash_join_node((TNormalHashJoinNode)value);
      }
      break;

    case NESTLOOP_JOIN_NODE:
      if (value == null) {
        unsetNestloop_join_node();
      } else {
        setNestloop_join_node((TNormalNestLoopJoinNode)value);
      }
      break;

    case TABLE_FUNCTION_NODE:
      if (value == null) {
        unsetTable_function_node();
      } else {
        setTable_function_node((TNormalTableFunctionNode)value);
      }
      break;

    case REPEAT_NODE:
      if (value == null) {
        unsetRepeat_node();
      } else {
        setRepeat_node((TNormalRepeatNode)value);
      }
      break;

    case ANALYTIC_NODE:
      if (value == null) {
        unsetAnalytic_node();
      } else {
        setAnalytic_node((TNormalAnalyticNode)value);
      }
      break;

    case ASSERT_NUM_ROWS_NODE:
      if (value == null) {
        unsetAssert_num_rows_node();
      } else {
        setAssert_num_rows_node((TNormalAssertNumRowsNode)value);
      }
      break;

    case EXCHANGE_NODE:
      if (value == null) {
        unsetExchange_node();
      } else {
        setExchange_node((TNormalExchangeNode)value);
      }
      break;

    case SORT_NODE:
      if (value == null) {
        unsetSort_node();
      } else {
        setSort_node((TNormalSortNode)value);
      }
      break;

    case SORT_AGGREGATION_NODE:
      if (value == null) {
        unsetSort_aggregation_node();
      } else {
        setSort_aggregation_node((TNormalSortAggregationNode)value);
      }
      break;

    case SET_OPERATION_NODE:
      if (value == null) {
        unsetSet_operation_node();
      } else {
        setSet_operation_node((TNormalSetOperationNode)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return getNode_id();

    case NODE_TYPE:
      return getNode_type();

    case NUM_CHILDREN:
      return getNum_children();

    case LIMIT:
      return getLimit();

    case ROW_TUPLES:
      return getRow_tuples();

    case NULLABLE_TUPLES:
      return getNullable_tuples();

    case CONJUNCTS:
      return getConjuncts();

    case AGG_NODE:
      return getAgg_node();

    case OLAP_SCAN_NODE:
      return getOlap_scan_node();

    case PROJECT_NODE:
      return getProject_node();

    case DECODE_NODE:
      return getDecode_node();

    case HASH_JOIN_NODE:
      return getHash_join_node();

    case NESTLOOP_JOIN_NODE:
      return getNestloop_join_node();

    case TABLE_FUNCTION_NODE:
      return getTable_function_node();

    case REPEAT_NODE:
      return getRepeat_node();

    case ANALYTIC_NODE:
      return getAnalytic_node();

    case ASSERT_NUM_ROWS_NODE:
      return getAssert_num_rows_node();

    case EXCHANGE_NODE:
      return getExchange_node();

    case SORT_NODE:
      return getSort_node();

    case SORT_AGGREGATION_NODE:
      return getSort_aggregation_node();

    case SET_OPERATION_NODE:
      return getSet_operation_node();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNode_id();
    case NODE_TYPE:
      return isSetNode_type();
    case NUM_CHILDREN:
      return isSetNum_children();
    case LIMIT:
      return isSetLimit();
    case ROW_TUPLES:
      return isSetRow_tuples();
    case NULLABLE_TUPLES:
      return isSetNullable_tuples();
    case CONJUNCTS:
      return isSetConjuncts();
    case AGG_NODE:
      return isSetAgg_node();
    case OLAP_SCAN_NODE:
      return isSetOlap_scan_node();
    case PROJECT_NODE:
      return isSetProject_node();
    case DECODE_NODE:
      return isSetDecode_node();
    case HASH_JOIN_NODE:
      return isSetHash_join_node();
    case NESTLOOP_JOIN_NODE:
      return isSetNestloop_join_node();
    case TABLE_FUNCTION_NODE:
      return isSetTable_function_node();
    case REPEAT_NODE:
      return isSetRepeat_node();
    case ANALYTIC_NODE:
      return isSetAnalytic_node();
    case ASSERT_NUM_ROWS_NODE:
      return isSetAssert_num_rows_node();
    case EXCHANGE_NODE:
      return isSetExchange_node();
    case SORT_NODE:
      return isSetSort_node();
    case SORT_AGGREGATION_NODE:
      return isSetSort_aggregation_node();
    case SET_OPERATION_NODE:
      return isSetSet_operation_node();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TNormalPlanNode)
      return this.equals((TNormalPlanNode)that);
    return false;
  }

  public boolean equals(TNormalPlanNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_node_id = true && this.isSetNode_id();
    boolean that_present_node_id = true && that.isSetNode_id();
    if (this_present_node_id || that_present_node_id) {
      if (!(this_present_node_id && that_present_node_id))
        return false;
      if (this.node_id != that.node_id)
        return false;
    }

    boolean this_present_node_type = true && this.isSetNode_type();
    boolean that_present_node_type = true && that.isSetNode_type();
    if (this_present_node_type || that_present_node_type) {
      if (!(this_present_node_type && that_present_node_type))
        return false;
      if (!this.node_type.equals(that.node_type))
        return false;
    }

    boolean this_present_num_children = true && this.isSetNum_children();
    boolean that_present_num_children = true && that.isSetNum_children();
    if (this_present_num_children || that_present_num_children) {
      if (!(this_present_num_children && that_present_num_children))
        return false;
      if (this.num_children != that.num_children)
        return false;
    }

    boolean this_present_limit = true && this.isSetLimit();
    boolean that_present_limit = true && that.isSetLimit();
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_row_tuples = true && this.isSetRow_tuples();
    boolean that_present_row_tuples = true && that.isSetRow_tuples();
    if (this_present_row_tuples || that_present_row_tuples) {
      if (!(this_present_row_tuples && that_present_row_tuples))
        return false;
      if (!this.row_tuples.equals(that.row_tuples))
        return false;
    }

    boolean this_present_nullable_tuples = true && this.isSetNullable_tuples();
    boolean that_present_nullable_tuples = true && that.isSetNullable_tuples();
    if (this_present_nullable_tuples || that_present_nullable_tuples) {
      if (!(this_present_nullable_tuples && that_present_nullable_tuples))
        return false;
      if (!this.nullable_tuples.equals(that.nullable_tuples))
        return false;
    }

    boolean this_present_conjuncts = true && this.isSetConjuncts();
    boolean that_present_conjuncts = true && that.isSetConjuncts();
    if (this_present_conjuncts || that_present_conjuncts) {
      if (!(this_present_conjuncts && that_present_conjuncts))
        return false;
      if (!this.conjuncts.equals(that.conjuncts))
        return false;
    }

    boolean this_present_agg_node = true && this.isSetAgg_node();
    boolean that_present_agg_node = true && that.isSetAgg_node();
    if (this_present_agg_node || that_present_agg_node) {
      if (!(this_present_agg_node && that_present_agg_node))
        return false;
      if (!this.agg_node.equals(that.agg_node))
        return false;
    }

    boolean this_present_olap_scan_node = true && this.isSetOlap_scan_node();
    boolean that_present_olap_scan_node = true && that.isSetOlap_scan_node();
    if (this_present_olap_scan_node || that_present_olap_scan_node) {
      if (!(this_present_olap_scan_node && that_present_olap_scan_node))
        return false;
      if (!this.olap_scan_node.equals(that.olap_scan_node))
        return false;
    }

    boolean this_present_project_node = true && this.isSetProject_node();
    boolean that_present_project_node = true && that.isSetProject_node();
    if (this_present_project_node || that_present_project_node) {
      if (!(this_present_project_node && that_present_project_node))
        return false;
      if (!this.project_node.equals(that.project_node))
        return false;
    }

    boolean this_present_decode_node = true && this.isSetDecode_node();
    boolean that_present_decode_node = true && that.isSetDecode_node();
    if (this_present_decode_node || that_present_decode_node) {
      if (!(this_present_decode_node && that_present_decode_node))
        return false;
      if (!this.decode_node.equals(that.decode_node))
        return false;
    }

    boolean this_present_hash_join_node = true && this.isSetHash_join_node();
    boolean that_present_hash_join_node = true && that.isSetHash_join_node();
    if (this_present_hash_join_node || that_present_hash_join_node) {
      if (!(this_present_hash_join_node && that_present_hash_join_node))
        return false;
      if (!this.hash_join_node.equals(that.hash_join_node))
        return false;
    }

    boolean this_present_nestloop_join_node = true && this.isSetNestloop_join_node();
    boolean that_present_nestloop_join_node = true && that.isSetNestloop_join_node();
    if (this_present_nestloop_join_node || that_present_nestloop_join_node) {
      if (!(this_present_nestloop_join_node && that_present_nestloop_join_node))
        return false;
      if (!this.nestloop_join_node.equals(that.nestloop_join_node))
        return false;
    }

    boolean this_present_table_function_node = true && this.isSetTable_function_node();
    boolean that_present_table_function_node = true && that.isSetTable_function_node();
    if (this_present_table_function_node || that_present_table_function_node) {
      if (!(this_present_table_function_node && that_present_table_function_node))
        return false;
      if (!this.table_function_node.equals(that.table_function_node))
        return false;
    }

    boolean this_present_repeat_node = true && this.isSetRepeat_node();
    boolean that_present_repeat_node = true && that.isSetRepeat_node();
    if (this_present_repeat_node || that_present_repeat_node) {
      if (!(this_present_repeat_node && that_present_repeat_node))
        return false;
      if (!this.repeat_node.equals(that.repeat_node))
        return false;
    }

    boolean this_present_analytic_node = true && this.isSetAnalytic_node();
    boolean that_present_analytic_node = true && that.isSetAnalytic_node();
    if (this_present_analytic_node || that_present_analytic_node) {
      if (!(this_present_analytic_node && that_present_analytic_node))
        return false;
      if (!this.analytic_node.equals(that.analytic_node))
        return false;
    }

    boolean this_present_assert_num_rows_node = true && this.isSetAssert_num_rows_node();
    boolean that_present_assert_num_rows_node = true && that.isSetAssert_num_rows_node();
    if (this_present_assert_num_rows_node || that_present_assert_num_rows_node) {
      if (!(this_present_assert_num_rows_node && that_present_assert_num_rows_node))
        return false;
      if (!this.assert_num_rows_node.equals(that.assert_num_rows_node))
        return false;
    }

    boolean this_present_exchange_node = true && this.isSetExchange_node();
    boolean that_present_exchange_node = true && that.isSetExchange_node();
    if (this_present_exchange_node || that_present_exchange_node) {
      if (!(this_present_exchange_node && that_present_exchange_node))
        return false;
      if (!this.exchange_node.equals(that.exchange_node))
        return false;
    }

    boolean this_present_sort_node = true && this.isSetSort_node();
    boolean that_present_sort_node = true && that.isSetSort_node();
    if (this_present_sort_node || that_present_sort_node) {
      if (!(this_present_sort_node && that_present_sort_node))
        return false;
      if (!this.sort_node.equals(that.sort_node))
        return false;
    }

    boolean this_present_sort_aggregation_node = true && this.isSetSort_aggregation_node();
    boolean that_present_sort_aggregation_node = true && that.isSetSort_aggregation_node();
    if (this_present_sort_aggregation_node || that_present_sort_aggregation_node) {
      if (!(this_present_sort_aggregation_node && that_present_sort_aggregation_node))
        return false;
      if (!this.sort_aggregation_node.equals(that.sort_aggregation_node))
        return false;
    }

    boolean this_present_set_operation_node = true && this.isSetSet_operation_node();
    boolean that_present_set_operation_node = true && that.isSetSet_operation_node();
    if (this_present_set_operation_node || that_present_set_operation_node) {
      if (!(this_present_set_operation_node && that_present_set_operation_node))
        return false;
      if (!this.set_operation_node.equals(that.set_operation_node))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNode_id()) ? 131071 : 524287);
    if (isSetNode_id())
      hashCode = hashCode * 8191 + node_id;

    hashCode = hashCode * 8191 + ((isSetNode_type()) ? 131071 : 524287);
    if (isSetNode_type())
      hashCode = hashCode * 8191 + node_type.getValue();

    hashCode = hashCode * 8191 + ((isSetNum_children()) ? 131071 : 524287);
    if (isSetNum_children())
      hashCode = hashCode * 8191 + num_children;

    hashCode = hashCode * 8191 + ((isSetLimit()) ? 131071 : 524287);
    if (isSetLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(limit);

    hashCode = hashCode * 8191 + ((isSetRow_tuples()) ? 131071 : 524287);
    if (isSetRow_tuples())
      hashCode = hashCode * 8191 + row_tuples.hashCode();

    hashCode = hashCode * 8191 + ((isSetNullable_tuples()) ? 131071 : 524287);
    if (isSetNullable_tuples())
      hashCode = hashCode * 8191 + nullable_tuples.hashCode();

    hashCode = hashCode * 8191 + ((isSetConjuncts()) ? 131071 : 524287);
    if (isSetConjuncts())
      hashCode = hashCode * 8191 + conjuncts.hashCode();

    hashCode = hashCode * 8191 + ((isSetAgg_node()) ? 131071 : 524287);
    if (isSetAgg_node())
      hashCode = hashCode * 8191 + agg_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetOlap_scan_node()) ? 131071 : 524287);
    if (isSetOlap_scan_node())
      hashCode = hashCode * 8191 + olap_scan_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetProject_node()) ? 131071 : 524287);
    if (isSetProject_node())
      hashCode = hashCode * 8191 + project_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetDecode_node()) ? 131071 : 524287);
    if (isSetDecode_node())
      hashCode = hashCode * 8191 + decode_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetHash_join_node()) ? 131071 : 524287);
    if (isSetHash_join_node())
      hashCode = hashCode * 8191 + hash_join_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetNestloop_join_node()) ? 131071 : 524287);
    if (isSetNestloop_join_node())
      hashCode = hashCode * 8191 + nestloop_join_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_function_node()) ? 131071 : 524287);
    if (isSetTable_function_node())
      hashCode = hashCode * 8191 + table_function_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetRepeat_node()) ? 131071 : 524287);
    if (isSetRepeat_node())
      hashCode = hashCode * 8191 + repeat_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetAnalytic_node()) ? 131071 : 524287);
    if (isSetAnalytic_node())
      hashCode = hashCode * 8191 + analytic_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetAssert_num_rows_node()) ? 131071 : 524287);
    if (isSetAssert_num_rows_node())
      hashCode = hashCode * 8191 + assert_num_rows_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetExchange_node()) ? 131071 : 524287);
    if (isSetExchange_node())
      hashCode = hashCode * 8191 + exchange_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetSort_node()) ? 131071 : 524287);
    if (isSetSort_node())
      hashCode = hashCode * 8191 + sort_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetSort_aggregation_node()) ? 131071 : 524287);
    if (isSetSort_aggregation_node())
      hashCode = hashCode * 8191 + sort_aggregation_node.hashCode();

    hashCode = hashCode * 8191 + ((isSetSet_operation_node()) ? 131071 : 524287);
    if (isSetSet_operation_node())
      hashCode = hashCode * 8191 + set_operation_node.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TNormalPlanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNode_id(), other.isSetNode_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_id, other.node_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNode_type(), other.isSetNode_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_type, other.node_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_children(), other.isSetNum_children());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_children()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_children, other.num_children);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLimit(), other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRow_tuples(), other.isSetRow_tuples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_tuples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_tuples, other.row_tuples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNullable_tuples(), other.isSetNullable_tuples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNullable_tuples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nullable_tuples, other.nullable_tuples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConjuncts(), other.isSetConjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conjuncts, other.conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAgg_node(), other.isSetAgg_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgg_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agg_node, other.agg_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOlap_scan_node(), other.isSetOlap_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOlap_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.olap_scan_node, other.olap_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProject_node(), other.isSetProject_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProject_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project_node, other.project_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDecode_node(), other.isSetDecode_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecode_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decode_node, other.decode_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHash_join_node(), other.isSetHash_join_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHash_join_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash_join_node, other.hash_join_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNestloop_join_node(), other.isSetNestloop_join_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNestloop_join_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nestloop_join_node, other.nestloop_join_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_function_node(), other.isSetTable_function_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_function_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_function_node, other.table_function_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRepeat_node(), other.isSetRepeat_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeat_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeat_node, other.repeat_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAnalytic_node(), other.isSetAnalytic_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalytic_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analytic_node, other.analytic_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAssert_num_rows_node(), other.isSetAssert_num_rows_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssert_num_rows_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assert_num_rows_node, other.assert_num_rows_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExchange_node(), other.isSetExchange_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchange_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchange_node, other.exchange_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSort_node(), other.isSetSort_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_node, other.sort_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSort_aggregation_node(), other.isSetSort_aggregation_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_aggregation_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_aggregation_node, other.sort_aggregation_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSet_operation_node(), other.isSetSet_operation_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSet_operation_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.set_operation_node, other.set_operation_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TNormalPlanNode(");
    boolean first = true;

    if (isSetNode_id()) {
      sb.append("node_id:");
      sb.append(this.node_id);
      first = false;
    }
    if (isSetNode_type()) {
      if (!first) sb.append(", ");
      sb.append("node_type:");
      if (this.node_type == null) {
        sb.append("null");
      } else {
        sb.append(this.node_type);
      }
      first = false;
    }
    if (isSetNum_children()) {
      if (!first) sb.append(", ");
      sb.append("num_children:");
      sb.append(this.num_children);
      first = false;
    }
    if (isSetLimit()) {
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
    }
    if (isSetRow_tuples()) {
      if (!first) sb.append(", ");
      sb.append("row_tuples:");
      if (this.row_tuples == null) {
        sb.append("null");
      } else {
        sb.append(this.row_tuples);
      }
      first = false;
    }
    if (isSetNullable_tuples()) {
      if (!first) sb.append(", ");
      sb.append("nullable_tuples:");
      if (this.nullable_tuples == null) {
        sb.append("null");
      } else {
        sb.append(this.nullable_tuples);
      }
      first = false;
    }
    if (isSetConjuncts()) {
      if (!first) sb.append(", ");
      sb.append("conjuncts:");
      if (this.conjuncts == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.conjuncts, sb);
      }
      first = false;
    }
    if (isSetAgg_node()) {
      if (!first) sb.append(", ");
      sb.append("agg_node:");
      if (this.agg_node == null) {
        sb.append("null");
      } else {
        sb.append(this.agg_node);
      }
      first = false;
    }
    if (isSetOlap_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("olap_scan_node:");
      if (this.olap_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.olap_scan_node);
      }
      first = false;
    }
    if (isSetProject_node()) {
      if (!first) sb.append(", ");
      sb.append("project_node:");
      if (this.project_node == null) {
        sb.append("null");
      } else {
        sb.append(this.project_node);
      }
      first = false;
    }
    if (isSetDecode_node()) {
      if (!first) sb.append(", ");
      sb.append("decode_node:");
      if (this.decode_node == null) {
        sb.append("null");
      } else {
        sb.append(this.decode_node);
      }
      first = false;
    }
    if (isSetHash_join_node()) {
      if (!first) sb.append(", ");
      sb.append("hash_join_node:");
      if (this.hash_join_node == null) {
        sb.append("null");
      } else {
        sb.append(this.hash_join_node);
      }
      first = false;
    }
    if (isSetNestloop_join_node()) {
      if (!first) sb.append(", ");
      sb.append("nestloop_join_node:");
      if (this.nestloop_join_node == null) {
        sb.append("null");
      } else {
        sb.append(this.nestloop_join_node);
      }
      first = false;
    }
    if (isSetTable_function_node()) {
      if (!first) sb.append(", ");
      sb.append("table_function_node:");
      if (this.table_function_node == null) {
        sb.append("null");
      } else {
        sb.append(this.table_function_node);
      }
      first = false;
    }
    if (isSetRepeat_node()) {
      if (!first) sb.append(", ");
      sb.append("repeat_node:");
      if (this.repeat_node == null) {
        sb.append("null");
      } else {
        sb.append(this.repeat_node);
      }
      first = false;
    }
    if (isSetAnalytic_node()) {
      if (!first) sb.append(", ");
      sb.append("analytic_node:");
      if (this.analytic_node == null) {
        sb.append("null");
      } else {
        sb.append(this.analytic_node);
      }
      first = false;
    }
    if (isSetAssert_num_rows_node()) {
      if (!first) sb.append(", ");
      sb.append("assert_num_rows_node:");
      if (this.assert_num_rows_node == null) {
        sb.append("null");
      } else {
        sb.append(this.assert_num_rows_node);
      }
      first = false;
    }
    if (isSetExchange_node()) {
      if (!first) sb.append(", ");
      sb.append("exchange_node:");
      if (this.exchange_node == null) {
        sb.append("null");
      } else {
        sb.append(this.exchange_node);
      }
      first = false;
    }
    if (isSetSort_node()) {
      if (!first) sb.append(", ");
      sb.append("sort_node:");
      if (this.sort_node == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_node);
      }
      first = false;
    }
    if (isSetSort_aggregation_node()) {
      if (!first) sb.append(", ");
      sb.append("sort_aggregation_node:");
      if (this.sort_aggregation_node == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_aggregation_node);
      }
      first = false;
    }
    if (isSetSet_operation_node()) {
      if (!first) sb.append(", ");
      sb.append("set_operation_node:");
      if (this.set_operation_node == null) {
        sb.append("null");
      } else {
        sb.append(this.set_operation_node);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (agg_node != null) {
      agg_node.validate();
    }
    if (olap_scan_node != null) {
      olap_scan_node.validate();
    }
    if (project_node != null) {
      project_node.validate();
    }
    if (decode_node != null) {
      decode_node.validate();
    }
    if (hash_join_node != null) {
      hash_join_node.validate();
    }
    if (nestloop_join_node != null) {
      nestloop_join_node.validate();
    }
    if (table_function_node != null) {
      table_function_node.validate();
    }
    if (repeat_node != null) {
      repeat_node.validate();
    }
    if (analytic_node != null) {
      analytic_node.validate();
    }
    if (assert_num_rows_node != null) {
      assert_num_rows_node.validate();
    }
    if (exchange_node != null) {
      exchange_node.validate();
    }
    if (sort_node != null) {
      sort_node.validate();
    }
    if (sort_aggregation_node != null) {
      sort_aggregation_node.validate();
    }
    if (set_operation_node != null) {
      set_operation_node.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNormalPlanNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalPlanNodeStandardScheme getScheme() {
      return new TNormalPlanNodeStandardScheme();
    }
  }

  private static class TNormalPlanNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TNormalPlanNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TNormalPlanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.node_id = iprot.readI32();
              struct.setNode_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.node_type = io.datafibre.fibre.thrift.TPlanNodeType.findByValue(iprot.readI32());
              struct.setNode_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_CHILDREN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_children = iprot.readI32();
              struct.setNum_childrenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.limit = iprot.readI64();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROW_TUPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list392 = iprot.readListBegin();
                struct.row_tuples = new java.util.ArrayList<java.lang.Integer>(_list392.size);
                int _elem393;
                for (int _i394 = 0; _i394 < _list392.size; ++_i394)
                {
                  _elem393 = iprot.readI32();
                  struct.row_tuples.add(_elem393);
                }
                iprot.readListEnd();
              }
              struct.setRow_tuplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NULLABLE_TUPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list395 = iprot.readListBegin();
                struct.nullable_tuples = new java.util.ArrayList<java.lang.Boolean>(_list395.size);
                boolean _elem396;
                for (int _i397 = 0; _i397 < _list395.size; ++_i397)
                {
                  _elem396 = iprot.readBool();
                  struct.nullable_tuples.add(_elem396);
                }
                iprot.readListEnd();
              }
              struct.setNullable_tuplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list398 = iprot.readListBegin();
                struct.conjuncts = new java.util.ArrayList<java.nio.ByteBuffer>(_list398.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem399;
                for (int _i400 = 0; _i400 < _list398.size; ++_i400)
                {
                  _elem399 = iprot.readBinary();
                  struct.conjuncts.add(_elem399);
                }
                iprot.readListEnd();
              }
              struct.setConjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AGG_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.agg_node = new TNormalAggregationNode();
              struct.agg_node.read(iprot);
              struct.setAgg_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OLAP_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.olap_scan_node = new TNormalOlapScanNode();
              struct.olap_scan_node.read(iprot);
              struct.setOlap_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROJECT_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.project_node = new TNormalProjectNode();
              struct.project_node.read(iprot);
              struct.setProject_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DECODE_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.decode_node = new TNormalDecodeNode();
              struct.decode_node.read(iprot);
              struct.setDecode_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HASH_JOIN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hash_join_node = new TNormalHashJoinNode();
              struct.hash_join_node.read(iprot);
              struct.setHash_join_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NESTLOOP_JOIN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nestloop_join_node = new TNormalNestLoopJoinNode();
              struct.nestloop_join_node.read(iprot);
              struct.setNestloop_join_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TABLE_FUNCTION_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_function_node = new TNormalTableFunctionNode();
              struct.table_function_node.read(iprot);
              struct.setTable_function_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // REPEAT_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.repeat_node = new TNormalRepeatNode();
              struct.repeat_node.read(iprot);
              struct.setRepeat_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ANALYTIC_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.analytic_node = new TNormalAnalyticNode();
              struct.analytic_node.read(iprot);
              struct.setAnalytic_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ASSERT_NUM_ROWS_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.assert_num_rows_node = new TNormalAssertNumRowsNode();
              struct.assert_num_rows_node.read(iprot);
              struct.setAssert_num_rows_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // EXCHANGE_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.exchange_node = new TNormalExchangeNode();
              struct.exchange_node.read(iprot);
              struct.setExchange_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SORT_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sort_node = new TNormalSortNode();
              struct.sort_node.read(iprot);
              struct.setSort_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SORT_AGGREGATION_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sort_aggregation_node = new TNormalSortAggregationNode();
              struct.sort_aggregation_node.read(iprot);
              struct.setSort_aggregation_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SET_OPERATION_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.set_operation_node = new TNormalSetOperationNode();
              struct.set_operation_node.read(iprot);
              struct.setSet_operation_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TNormalPlanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetNode_id()) {
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeI32(struct.node_id);
        oprot.writeFieldEnd();
      }
      if (struct.node_type != null) {
        if (struct.isSetNode_type()) {
          oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.node_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNum_children()) {
        oprot.writeFieldBegin(NUM_CHILDREN_FIELD_DESC);
        oprot.writeI32(struct.num_children);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLimit()) {
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI64(struct.limit);
        oprot.writeFieldEnd();
      }
      if (struct.row_tuples != null) {
        if (struct.isSetRow_tuples()) {
          oprot.writeFieldBegin(ROW_TUPLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.row_tuples.size()));
            for (int _iter401 : struct.row_tuples)
            {
              oprot.writeI32(_iter401);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nullable_tuples != null) {
        if (struct.isSetNullable_tuples()) {
          oprot.writeFieldBegin(NULLABLE_TUPLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.nullable_tuples.size()));
            for (boolean _iter402 : struct.nullable_tuples)
            {
              oprot.writeBool(_iter402);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.conjuncts != null) {
        if (struct.isSetConjuncts()) {
          oprot.writeFieldBegin(CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.conjuncts.size()));
            for (java.nio.ByteBuffer _iter403 : struct.conjuncts)
            {
              oprot.writeBinary(_iter403);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.agg_node != null) {
        if (struct.isSetAgg_node()) {
          oprot.writeFieldBegin(AGG_NODE_FIELD_DESC);
          struct.agg_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.olap_scan_node != null) {
        if (struct.isSetOlap_scan_node()) {
          oprot.writeFieldBegin(OLAP_SCAN_NODE_FIELD_DESC);
          struct.olap_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.project_node != null) {
        if (struct.isSetProject_node()) {
          oprot.writeFieldBegin(PROJECT_NODE_FIELD_DESC);
          struct.project_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.decode_node != null) {
        if (struct.isSetDecode_node()) {
          oprot.writeFieldBegin(DECODE_NODE_FIELD_DESC);
          struct.decode_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hash_join_node != null) {
        if (struct.isSetHash_join_node()) {
          oprot.writeFieldBegin(HASH_JOIN_NODE_FIELD_DESC);
          struct.hash_join_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nestloop_join_node != null) {
        if (struct.isSetNestloop_join_node()) {
          oprot.writeFieldBegin(NESTLOOP_JOIN_NODE_FIELD_DESC);
          struct.nestloop_join_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_function_node != null) {
        if (struct.isSetTable_function_node()) {
          oprot.writeFieldBegin(TABLE_FUNCTION_NODE_FIELD_DESC);
          struct.table_function_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.repeat_node != null) {
        if (struct.isSetRepeat_node()) {
          oprot.writeFieldBegin(REPEAT_NODE_FIELD_DESC);
          struct.repeat_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.analytic_node != null) {
        if (struct.isSetAnalytic_node()) {
          oprot.writeFieldBegin(ANALYTIC_NODE_FIELD_DESC);
          struct.analytic_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.assert_num_rows_node != null) {
        if (struct.isSetAssert_num_rows_node()) {
          oprot.writeFieldBegin(ASSERT_NUM_ROWS_NODE_FIELD_DESC);
          struct.assert_num_rows_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchange_node != null) {
        if (struct.isSetExchange_node()) {
          oprot.writeFieldBegin(EXCHANGE_NODE_FIELD_DESC);
          struct.exchange_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sort_node != null) {
        if (struct.isSetSort_node()) {
          oprot.writeFieldBegin(SORT_NODE_FIELD_DESC);
          struct.sort_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sort_aggregation_node != null) {
        if (struct.isSetSort_aggregation_node()) {
          oprot.writeFieldBegin(SORT_AGGREGATION_NODE_FIELD_DESC);
          struct.sort_aggregation_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.set_operation_node != null) {
        if (struct.isSetSet_operation_node()) {
          oprot.writeFieldBegin(SET_OPERATION_NODE_FIELD_DESC);
          struct.set_operation_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNormalPlanNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalPlanNodeTupleScheme getScheme() {
      return new TNormalPlanNodeTupleScheme();
    }
  }

  private static class TNormalPlanNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TNormalPlanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNormalPlanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNode_id()) {
        optionals.set(0);
      }
      if (struct.isSetNode_type()) {
        optionals.set(1);
      }
      if (struct.isSetNum_children()) {
        optionals.set(2);
      }
      if (struct.isSetLimit()) {
        optionals.set(3);
      }
      if (struct.isSetRow_tuples()) {
        optionals.set(4);
      }
      if (struct.isSetNullable_tuples()) {
        optionals.set(5);
      }
      if (struct.isSetConjuncts()) {
        optionals.set(6);
      }
      if (struct.isSetAgg_node()) {
        optionals.set(7);
      }
      if (struct.isSetOlap_scan_node()) {
        optionals.set(8);
      }
      if (struct.isSetProject_node()) {
        optionals.set(9);
      }
      if (struct.isSetDecode_node()) {
        optionals.set(10);
      }
      if (struct.isSetHash_join_node()) {
        optionals.set(11);
      }
      if (struct.isSetNestloop_join_node()) {
        optionals.set(12);
      }
      if (struct.isSetTable_function_node()) {
        optionals.set(13);
      }
      if (struct.isSetRepeat_node()) {
        optionals.set(14);
      }
      if (struct.isSetAnalytic_node()) {
        optionals.set(15);
      }
      if (struct.isSetAssert_num_rows_node()) {
        optionals.set(16);
      }
      if (struct.isSetExchange_node()) {
        optionals.set(17);
      }
      if (struct.isSetSort_node()) {
        optionals.set(18);
      }
      if (struct.isSetSort_aggregation_node()) {
        optionals.set(19);
      }
      if (struct.isSetSet_operation_node()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetNode_id()) {
        oprot.writeI32(struct.node_id);
      }
      if (struct.isSetNode_type()) {
        oprot.writeI32(struct.node_type.getValue());
      }
      if (struct.isSetNum_children()) {
        oprot.writeI32(struct.num_children);
      }
      if (struct.isSetLimit()) {
        oprot.writeI64(struct.limit);
      }
      if (struct.isSetRow_tuples()) {
        {
          oprot.writeI32(struct.row_tuples.size());
          for (int _iter404 : struct.row_tuples)
          {
            oprot.writeI32(_iter404);
          }
        }
      }
      if (struct.isSetNullable_tuples()) {
        {
          oprot.writeI32(struct.nullable_tuples.size());
          for (boolean _iter405 : struct.nullable_tuples)
          {
            oprot.writeBool(_iter405);
          }
        }
      }
      if (struct.isSetConjuncts()) {
        {
          oprot.writeI32(struct.conjuncts.size());
          for (java.nio.ByteBuffer _iter406 : struct.conjuncts)
          {
            oprot.writeBinary(_iter406);
          }
        }
      }
      if (struct.isSetAgg_node()) {
        struct.agg_node.write(oprot);
      }
      if (struct.isSetOlap_scan_node()) {
        struct.olap_scan_node.write(oprot);
      }
      if (struct.isSetProject_node()) {
        struct.project_node.write(oprot);
      }
      if (struct.isSetDecode_node()) {
        struct.decode_node.write(oprot);
      }
      if (struct.isSetHash_join_node()) {
        struct.hash_join_node.write(oprot);
      }
      if (struct.isSetNestloop_join_node()) {
        struct.nestloop_join_node.write(oprot);
      }
      if (struct.isSetTable_function_node()) {
        struct.table_function_node.write(oprot);
      }
      if (struct.isSetRepeat_node()) {
        struct.repeat_node.write(oprot);
      }
      if (struct.isSetAnalytic_node()) {
        struct.analytic_node.write(oprot);
      }
      if (struct.isSetAssert_num_rows_node()) {
        struct.assert_num_rows_node.write(oprot);
      }
      if (struct.isSetExchange_node()) {
        struct.exchange_node.write(oprot);
      }
      if (struct.isSetSort_node()) {
        struct.sort_node.write(oprot);
      }
      if (struct.isSetSort_aggregation_node()) {
        struct.sort_aggregation_node.write(oprot);
      }
      if (struct.isSetSet_operation_node()) {
        struct.set_operation_node.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNormalPlanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.node_id = iprot.readI32();
        struct.setNode_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.node_type = io.datafibre.fibre.thrift.TPlanNodeType.findByValue(iprot.readI32());
        struct.setNode_typeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.num_children = iprot.readI32();
        struct.setNum_childrenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.limit = iprot.readI64();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list407 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.row_tuples = new java.util.ArrayList<java.lang.Integer>(_list407.size);
          int _elem408;
          for (int _i409 = 0; _i409 < _list407.size; ++_i409)
          {
            _elem408 = iprot.readI32();
            struct.row_tuples.add(_elem408);
          }
        }
        struct.setRow_tuplesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list410 = iprot.readListBegin(org.apache.thrift.protocol.TType.BOOL);
          struct.nullable_tuples = new java.util.ArrayList<java.lang.Boolean>(_list410.size);
          boolean _elem411;
          for (int _i412 = 0; _i412 < _list410.size; ++_i412)
          {
            _elem411 = iprot.readBool();
            struct.nullable_tuples.add(_elem411);
          }
        }
        struct.setNullable_tuplesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list413 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.conjuncts = new java.util.ArrayList<java.nio.ByteBuffer>(_list413.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem414;
          for (int _i415 = 0; _i415 < _list413.size; ++_i415)
          {
            _elem414 = iprot.readBinary();
            struct.conjuncts.add(_elem414);
          }
        }
        struct.setConjunctsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.agg_node = new TNormalAggregationNode();
        struct.agg_node.read(iprot);
        struct.setAgg_nodeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.olap_scan_node = new TNormalOlapScanNode();
        struct.olap_scan_node.read(iprot);
        struct.setOlap_scan_nodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.project_node = new TNormalProjectNode();
        struct.project_node.read(iprot);
        struct.setProject_nodeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.decode_node = new TNormalDecodeNode();
        struct.decode_node.read(iprot);
        struct.setDecode_nodeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.hash_join_node = new TNormalHashJoinNode();
        struct.hash_join_node.read(iprot);
        struct.setHash_join_nodeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.nestloop_join_node = new TNormalNestLoopJoinNode();
        struct.nestloop_join_node.read(iprot);
        struct.setNestloop_join_nodeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.table_function_node = new TNormalTableFunctionNode();
        struct.table_function_node.read(iprot);
        struct.setTable_function_nodeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.repeat_node = new TNormalRepeatNode();
        struct.repeat_node.read(iprot);
        struct.setRepeat_nodeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.analytic_node = new TNormalAnalyticNode();
        struct.analytic_node.read(iprot);
        struct.setAnalytic_nodeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.assert_num_rows_node = new TNormalAssertNumRowsNode();
        struct.assert_num_rows_node.read(iprot);
        struct.setAssert_num_rows_nodeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.exchange_node = new TNormalExchangeNode();
        struct.exchange_node.read(iprot);
        struct.setExchange_nodeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.sort_node = new TNormalSortNode();
        struct.sort_node.read(iprot);
        struct.setSort_nodeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.sort_aggregation_node = new TNormalSortAggregationNode();
        struct.sort_aggregation_node.read(iprot);
        struct.setSort_aggregation_nodeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.set_operation_node = new TNormalSetOperationNode();
        struct.set_operation_node.read(iprot);
        struct.setSet_operation_nodeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

