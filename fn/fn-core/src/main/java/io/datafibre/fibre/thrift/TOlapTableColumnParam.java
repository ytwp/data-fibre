/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TOlapTableColumnParam implements org.apache.thrift.TBase<TOlapTableColumnParam, TOlapTableColumnParam._Fields>, java.io.Serializable, Cloneable, Comparable<TOlapTableColumnParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOlapTableColumnParam");

  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SORT_KEY_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_key_uid", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SHORT_KEY_COLUMN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("short_key_column_count", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TOlapTableColumnParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TOlapTableColumnParamTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<TColumn> columns; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> sort_key_uid; // required
  public int short_key_column_count; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMNS((short)1, "columns"),
    SORT_KEY_UID((short)2, "sort_key_uid"),
    SHORT_KEY_COLUMN_COUNT((short)3, "short_key_column_count");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMNS
          return COLUMNS;
        case 2: // SORT_KEY_UID
          return SORT_KEY_UID;
        case 3: // SHORT_KEY_COLUMN_COUNT
          return SHORT_KEY_COLUMN_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHORT_KEY_COLUMN_COUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumn.class))));
    tmpMap.put(_Fields.SORT_KEY_UID, new org.apache.thrift.meta_data.FieldMetaData("sort_key_uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SHORT_KEY_COLUMN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("short_key_column_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOlapTableColumnParam.class, metaDataMap);
  }

  public TOlapTableColumnParam() {
  }

  public TOlapTableColumnParam(
    java.util.List<TColumn> columns,
    java.util.List<java.lang.Integer> sort_key_uid,
    int short_key_column_count)
  {
    this();
    this.columns = columns;
    this.sort_key_uid = sort_key_uid;
    this.short_key_column_count = short_key_column_count;
    setShort_key_column_countIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOlapTableColumnParam(TOlapTableColumnParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetColumns()) {
      java.util.List<TColumn> __this__columns = new java.util.ArrayList<TColumn>(other.columns.size());
      for (TColumn other_element : other.columns) {
        __this__columns.add(new TColumn(other_element));
      }
      this.columns = __this__columns;
    }
    if (other.isSetSort_key_uid()) {
      java.util.List<java.lang.Integer> __this__sort_key_uid = new java.util.ArrayList<java.lang.Integer>(other.sort_key_uid);
      this.sort_key_uid = __this__sort_key_uid;
    }
    this.short_key_column_count = other.short_key_column_count;
  }

  @Override
  public TOlapTableColumnParam deepCopy() {
    return new TOlapTableColumnParam(this);
  }

  @Override
  public void clear() {
    this.columns = null;
    this.sort_key_uid = null;
    setShort_key_column_countIsSet(false);
    this.short_key_column_count = 0;
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(TColumn elem) {
    if (this.columns == null) {
      this.columns = new java.util.ArrayList<TColumn>();
    }
    this.columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TColumn> getColumns() {
    return this.columns;
  }

  public TOlapTableColumnParam setColumns(@org.apache.thrift.annotation.Nullable java.util.List<TColumn> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public int getSort_key_uidSize() {
    return (this.sort_key_uid == null) ? 0 : this.sort_key_uid.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getSort_key_uidIterator() {
    return (this.sort_key_uid == null) ? null : this.sort_key_uid.iterator();
  }

  public void addToSort_key_uid(int elem) {
    if (this.sort_key_uid == null) {
      this.sort_key_uid = new java.util.ArrayList<java.lang.Integer>();
    }
    this.sort_key_uid.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getSort_key_uid() {
    return this.sort_key_uid;
  }

  public TOlapTableColumnParam setSort_key_uid(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> sort_key_uid) {
    this.sort_key_uid = sort_key_uid;
    return this;
  }

  public void unsetSort_key_uid() {
    this.sort_key_uid = null;
  }

  /** Returns true if field sort_key_uid is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_key_uid() {
    return this.sort_key_uid != null;
  }

  public void setSort_key_uidIsSet(boolean value) {
    if (!value) {
      this.sort_key_uid = null;
    }
  }

  public int getShort_key_column_count() {
    return this.short_key_column_count;
  }

  public TOlapTableColumnParam setShort_key_column_count(int short_key_column_count) {
    this.short_key_column_count = short_key_column_count;
    setShort_key_column_countIsSet(true);
    return this;
  }

  public void unsetShort_key_column_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHORT_KEY_COLUMN_COUNT_ISSET_ID);
  }

  /** Returns true if field short_key_column_count is set (has been assigned a value) and false otherwise */
  public boolean isSetShort_key_column_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHORT_KEY_COLUMN_COUNT_ISSET_ID);
  }

  public void setShort_key_column_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHORT_KEY_COLUMN_COUNT_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((java.util.List<TColumn>)value);
      }
      break;

    case SORT_KEY_UID:
      if (value == null) {
        unsetSort_key_uid();
      } else {
        setSort_key_uid((java.util.List<java.lang.Integer>)value);
      }
      break;

    case SHORT_KEY_COLUMN_COUNT:
      if (value == null) {
        unsetShort_key_column_count();
      } else {
        setShort_key_column_count((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMNS:
      return getColumns();

    case SORT_KEY_UID:
      return getSort_key_uid();

    case SHORT_KEY_COLUMN_COUNT:
      return getShort_key_column_count();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COLUMNS:
      return isSetColumns();
    case SORT_KEY_UID:
      return isSetSort_key_uid();
    case SHORT_KEY_COLUMN_COUNT:
      return isSetShort_key_column_count();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TOlapTableColumnParam)
      return this.equals((TOlapTableColumnParam)that);
    return false;
  }

  public boolean equals(TOlapTableColumnParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_sort_key_uid = true && this.isSetSort_key_uid();
    boolean that_present_sort_key_uid = true && that.isSetSort_key_uid();
    if (this_present_sort_key_uid || that_present_sort_key_uid) {
      if (!(this_present_sort_key_uid && that_present_sort_key_uid))
        return false;
      if (!this.sort_key_uid.equals(that.sort_key_uid))
        return false;
    }

    boolean this_present_short_key_column_count = true;
    boolean that_present_short_key_column_count = true;
    if (this_present_short_key_column_count || that_present_short_key_column_count) {
      if (!(this_present_short_key_column_count && that_present_short_key_column_count))
        return false;
      if (this.short_key_column_count != that.short_key_column_count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
    if (isSetColumns())
      hashCode = hashCode * 8191 + columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetSort_key_uid()) ? 131071 : 524287);
    if (isSetSort_key_uid())
      hashCode = hashCode * 8191 + sort_key_uid.hashCode();

    hashCode = hashCode * 8191 + short_key_column_count;

    return hashCode;
  }

  @Override
  public int compareTo(TOlapTableColumnParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSort_key_uid(), other.isSetSort_key_uid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_key_uid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_key_uid, other.sort_key_uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetShort_key_column_count(), other.isSetShort_key_column_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShort_key_column_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.short_key_column_count, other.short_key_column_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TOlapTableColumnParam(");
    boolean first = true;

    sb.append("columns:");
    if (this.columns == null) {
      sb.append("null");
    } else {
      sb.append(this.columns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sort_key_uid:");
    if (this.sort_key_uid == null) {
      sb.append("null");
    } else {
      sb.append(this.sort_key_uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("short_key_column_count:");
    sb.append(this.short_key_column_count);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (columns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' was not present! Struct: " + toString());
    }
    if (sort_key_uid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sort_key_uid' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'short_key_column_count' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOlapTableColumnParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapTableColumnParamStandardScheme getScheme() {
      return new TOlapTableColumnParamStandardScheme();
    }
  }

  private static class TOlapTableColumnParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<TOlapTableColumnParam> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TOlapTableColumnParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.columns = new java.util.ArrayList<TColumn>(_list80.size);
                @org.apache.thrift.annotation.Nullable TColumn _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = new TColumn();
                  _elem81.read(iprot);
                  struct.columns.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SORT_KEY_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                struct.sort_key_uid = new java.util.ArrayList<java.lang.Integer>(_list83.size);
                int _elem84;
                for (int _i85 = 0; _i85 < _list83.size; ++_i85)
                {
                  _elem84 = iprot.readI32();
                  struct.sort_key_uid.add(_elem84);
                }
                iprot.readListEnd();
              }
              struct.setSort_key_uidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHORT_KEY_COLUMN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.short_key_column_count = iprot.readI32();
              struct.setShort_key_column_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetShort_key_column_count()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'short_key_column_count' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TOlapTableColumnParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.columns != null) {
        oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
          for (TColumn _iter86 : struct.columns)
          {
            _iter86.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sort_key_uid != null) {
        oprot.writeFieldBegin(SORT_KEY_UID_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sort_key_uid.size()));
          for (int _iter87 : struct.sort_key_uid)
          {
            oprot.writeI32(_iter87);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHORT_KEY_COLUMN_COUNT_FIELD_DESC);
      oprot.writeI32(struct.short_key_column_count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOlapTableColumnParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapTableColumnParamTupleScheme getScheme() {
      return new TOlapTableColumnParamTupleScheme();
    }
  }

  private static class TOlapTableColumnParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<TOlapTableColumnParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOlapTableColumnParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.columns.size());
        for (TColumn _iter88 : struct.columns)
        {
          _iter88.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.sort_key_uid.size());
        for (int _iter89 : struct.sort_key_uid)
        {
          oprot.writeI32(_iter89);
        }
      }
      oprot.writeI32(struct.short_key_column_count);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOlapTableColumnParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list90 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.columns = new java.util.ArrayList<TColumn>(_list90.size);
        @org.apache.thrift.annotation.Nullable TColumn _elem91;
        for (int _i92 = 0; _i92 < _list90.size; ++_i92)
        {
          _elem91 = new TColumn();
          _elem91.read(iprot);
          struct.columns.add(_elem91);
        }
      }
      struct.setColumnsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list93 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
        struct.sort_key_uid = new java.util.ArrayList<java.lang.Integer>(_list93.size);
        int _elem94;
        for (int _i95 = 0; _i95 < _list93.size; ++_i95)
        {
          _elem94 = iprot.readI32();
          struct.sort_key_uid.add(_elem94);
        }
      }
      struct.setSort_key_uidIsSet(true);
      struct.short_key_column_count = iprot.readI32();
      struct.setShort_key_column_countIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

