/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TSinkCommitInfo implements org.apache.thrift.TBase<TSinkCommitInfo, TSinkCommitInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TSinkCommitInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSinkCommitInfo");

  private static final org.apache.thrift.protocol.TField ICEBERG_DATA_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("iceberg_data_file", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField HIVE_FILE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("hive_file_info", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField IS_OVERWRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_overwrite", org.apache.thrift.protocol.TType.BOOL, (short)100);
  private static final org.apache.thrift.protocol.TField STAGING_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("staging_dir", org.apache.thrift.protocol.TType.STRING, (short)101);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSinkCommitInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSinkCommitInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TIcebergDataFile iceberg_data_file; // optional
  public @org.apache.thrift.annotation.Nullable THiveFileInfo hive_file_info; // optional
  public boolean is_overwrite; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String staging_dir; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ICEBERG_DATA_FILE((short)1, "iceberg_data_file"),
    HIVE_FILE_INFO((short)2, "hive_file_info"),
    IS_OVERWRITE((short)100, "is_overwrite"),
    STAGING_DIR((short)101, "staging_dir");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ICEBERG_DATA_FILE
          return ICEBERG_DATA_FILE;
        case 2: // HIVE_FILE_INFO
          return HIVE_FILE_INFO;
        case 100: // IS_OVERWRITE
          return IS_OVERWRITE;
        case 101: // STAGING_DIR
          return STAGING_DIR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_OVERWRITE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ICEBERG_DATA_FILE,_Fields.HIVE_FILE_INFO,_Fields.IS_OVERWRITE,_Fields.STAGING_DIR};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ICEBERG_DATA_FILE, new org.apache.thrift.meta_data.FieldMetaData("iceberg_data_file", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIcebergDataFile.class)));
    tmpMap.put(_Fields.HIVE_FILE_INFO, new org.apache.thrift.meta_data.FieldMetaData("hive_file_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THiveFileInfo.class)));
    tmpMap.put(_Fields.IS_OVERWRITE, new org.apache.thrift.meta_data.FieldMetaData("is_overwrite", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STAGING_DIR, new org.apache.thrift.meta_data.FieldMetaData("staging_dir", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSinkCommitInfo.class, metaDataMap);
  }

  public TSinkCommitInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSinkCommitInfo(TSinkCommitInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIceberg_data_file()) {
      this.iceberg_data_file = new TIcebergDataFile(other.iceberg_data_file);
    }
    if (other.isSetHive_file_info()) {
      this.hive_file_info = new THiveFileInfo(other.hive_file_info);
    }
    this.is_overwrite = other.is_overwrite;
    if (other.isSetStaging_dir()) {
      this.staging_dir = other.staging_dir;
    }
  }

  @Override
  public TSinkCommitInfo deepCopy() {
    return new TSinkCommitInfo(this);
  }

  @Override
  public void clear() {
    this.iceberg_data_file = null;
    this.hive_file_info = null;
    setIs_overwriteIsSet(false);
    this.is_overwrite = false;
    this.staging_dir = null;
  }

  @org.apache.thrift.annotation.Nullable
  public TIcebergDataFile getIceberg_data_file() {
    return this.iceberg_data_file;
  }

  public TSinkCommitInfo setIceberg_data_file(@org.apache.thrift.annotation.Nullable TIcebergDataFile iceberg_data_file) {
    this.iceberg_data_file = iceberg_data_file;
    return this;
  }

  public void unsetIceberg_data_file() {
    this.iceberg_data_file = null;
  }

  /** Returns true if field iceberg_data_file is set (has been assigned a value) and false otherwise */
  public boolean isSetIceberg_data_file() {
    return this.iceberg_data_file != null;
  }

  public void setIceberg_data_fileIsSet(boolean value) {
    if (!value) {
      this.iceberg_data_file = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public THiveFileInfo getHive_file_info() {
    return this.hive_file_info;
  }

  public TSinkCommitInfo setHive_file_info(@org.apache.thrift.annotation.Nullable THiveFileInfo hive_file_info) {
    this.hive_file_info = hive_file_info;
    return this;
  }

  public void unsetHive_file_info() {
    this.hive_file_info = null;
  }

  /** Returns true if field hive_file_info is set (has been assigned a value) and false otherwise */
  public boolean isSetHive_file_info() {
    return this.hive_file_info != null;
  }

  public void setHive_file_infoIsSet(boolean value) {
    if (!value) {
      this.hive_file_info = null;
    }
  }

  public boolean isIs_overwrite() {
    return this.is_overwrite;
  }

  public TSinkCommitInfo setIs_overwrite(boolean is_overwrite) {
    this.is_overwrite = is_overwrite;
    setIs_overwriteIsSet(true);
    return this;
  }

  public void unsetIs_overwrite() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_OVERWRITE_ISSET_ID);
  }

  /** Returns true if field is_overwrite is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_overwrite() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_OVERWRITE_ISSET_ID);
  }

  public void setIs_overwriteIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_OVERWRITE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStaging_dir() {
    return this.staging_dir;
  }

  public TSinkCommitInfo setStaging_dir(@org.apache.thrift.annotation.Nullable java.lang.String staging_dir) {
    this.staging_dir = staging_dir;
    return this;
  }

  public void unsetStaging_dir() {
    this.staging_dir = null;
  }

  /** Returns true if field staging_dir is set (has been assigned a value) and false otherwise */
  public boolean isSetStaging_dir() {
    return this.staging_dir != null;
  }

  public void setStaging_dirIsSet(boolean value) {
    if (!value) {
      this.staging_dir = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ICEBERG_DATA_FILE:
      if (value == null) {
        unsetIceberg_data_file();
      } else {
        setIceberg_data_file((TIcebergDataFile)value);
      }
      break;

    case HIVE_FILE_INFO:
      if (value == null) {
        unsetHive_file_info();
      } else {
        setHive_file_info((THiveFileInfo)value);
      }
      break;

    case IS_OVERWRITE:
      if (value == null) {
        unsetIs_overwrite();
      } else {
        setIs_overwrite((java.lang.Boolean)value);
      }
      break;

    case STAGING_DIR:
      if (value == null) {
        unsetStaging_dir();
      } else {
        setStaging_dir((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ICEBERG_DATA_FILE:
      return getIceberg_data_file();

    case HIVE_FILE_INFO:
      return getHive_file_info();

    case IS_OVERWRITE:
      return isIs_overwrite();

    case STAGING_DIR:
      return getStaging_dir();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ICEBERG_DATA_FILE:
      return isSetIceberg_data_file();
    case HIVE_FILE_INFO:
      return isSetHive_file_info();
    case IS_OVERWRITE:
      return isSetIs_overwrite();
    case STAGING_DIR:
      return isSetStaging_dir();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSinkCommitInfo)
      return this.equals((TSinkCommitInfo)that);
    return false;
  }

  public boolean equals(TSinkCommitInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_iceberg_data_file = true && this.isSetIceberg_data_file();
    boolean that_present_iceberg_data_file = true && that.isSetIceberg_data_file();
    if (this_present_iceberg_data_file || that_present_iceberg_data_file) {
      if (!(this_present_iceberg_data_file && that_present_iceberg_data_file))
        return false;
      if (!this.iceberg_data_file.equals(that.iceberg_data_file))
        return false;
    }

    boolean this_present_hive_file_info = true && this.isSetHive_file_info();
    boolean that_present_hive_file_info = true && that.isSetHive_file_info();
    if (this_present_hive_file_info || that_present_hive_file_info) {
      if (!(this_present_hive_file_info && that_present_hive_file_info))
        return false;
      if (!this.hive_file_info.equals(that.hive_file_info))
        return false;
    }

    boolean this_present_is_overwrite = true && this.isSetIs_overwrite();
    boolean that_present_is_overwrite = true && that.isSetIs_overwrite();
    if (this_present_is_overwrite || that_present_is_overwrite) {
      if (!(this_present_is_overwrite && that_present_is_overwrite))
        return false;
      if (this.is_overwrite != that.is_overwrite)
        return false;
    }

    boolean this_present_staging_dir = true && this.isSetStaging_dir();
    boolean that_present_staging_dir = true && that.isSetStaging_dir();
    if (this_present_staging_dir || that_present_staging_dir) {
      if (!(this_present_staging_dir && that_present_staging_dir))
        return false;
      if (!this.staging_dir.equals(that.staging_dir))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIceberg_data_file()) ? 131071 : 524287);
    if (isSetIceberg_data_file())
      hashCode = hashCode * 8191 + iceberg_data_file.hashCode();

    hashCode = hashCode * 8191 + ((isSetHive_file_info()) ? 131071 : 524287);
    if (isSetHive_file_info())
      hashCode = hashCode * 8191 + hive_file_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_overwrite()) ? 131071 : 524287);
    if (isSetIs_overwrite())
      hashCode = hashCode * 8191 + ((is_overwrite) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetStaging_dir()) ? 131071 : 524287);
    if (isSetStaging_dir())
      hashCode = hashCode * 8191 + staging_dir.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TSinkCommitInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetIceberg_data_file(), other.isSetIceberg_data_file());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIceberg_data_file()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iceberg_data_file, other.iceberg_data_file);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHive_file_info(), other.isSetHive_file_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHive_file_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hive_file_info, other.hive_file_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_overwrite(), other.isSetIs_overwrite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_overwrite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_overwrite, other.is_overwrite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStaging_dir(), other.isSetStaging_dir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStaging_dir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.staging_dir, other.staging_dir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSinkCommitInfo(");
    boolean first = true;

    if (isSetIceberg_data_file()) {
      sb.append("iceberg_data_file:");
      if (this.iceberg_data_file == null) {
        sb.append("null");
      } else {
        sb.append(this.iceberg_data_file);
      }
      first = false;
    }
    if (isSetHive_file_info()) {
      if (!first) sb.append(", ");
      sb.append("hive_file_info:");
      if (this.hive_file_info == null) {
        sb.append("null");
      } else {
        sb.append(this.hive_file_info);
      }
      first = false;
    }
    if (isSetIs_overwrite()) {
      if (!first) sb.append(", ");
      sb.append("is_overwrite:");
      sb.append(this.is_overwrite);
      first = false;
    }
    if (isSetStaging_dir()) {
      if (!first) sb.append(", ");
      sb.append("staging_dir:");
      if (this.staging_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.staging_dir);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (iceberg_data_file != null) {
      iceberg_data_file.validate();
    }
    if (hive_file_info != null) {
      hive_file_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSinkCommitInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSinkCommitInfoStandardScheme getScheme() {
      return new TSinkCommitInfoStandardScheme();
    }
  }

  private static class TSinkCommitInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSinkCommitInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSinkCommitInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ICEBERG_DATA_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.iceberg_data_file = new TIcebergDataFile();
              struct.iceberg_data_file.read(iprot);
              struct.setIceberg_data_fileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HIVE_FILE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hive_file_info = new THiveFileInfo();
              struct.hive_file_info.read(iprot);
              struct.setHive_file_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // IS_OVERWRITE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_overwrite = iprot.readBool();
              struct.setIs_overwriteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // STAGING_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.staging_dir = iprot.readString();
              struct.setStaging_dirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSinkCommitInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.iceberg_data_file != null) {
        if (struct.isSetIceberg_data_file()) {
          oprot.writeFieldBegin(ICEBERG_DATA_FILE_FIELD_DESC);
          struct.iceberg_data_file.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hive_file_info != null) {
        if (struct.isSetHive_file_info()) {
          oprot.writeFieldBegin(HIVE_FILE_INFO_FIELD_DESC);
          struct.hive_file_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_overwrite()) {
        oprot.writeFieldBegin(IS_OVERWRITE_FIELD_DESC);
        oprot.writeBool(struct.is_overwrite);
        oprot.writeFieldEnd();
      }
      if (struct.staging_dir != null) {
        if (struct.isSetStaging_dir()) {
          oprot.writeFieldBegin(STAGING_DIR_FIELD_DESC);
          oprot.writeString(struct.staging_dir);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSinkCommitInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSinkCommitInfoTupleScheme getScheme() {
      return new TSinkCommitInfoTupleScheme();
    }
  }

  private static class TSinkCommitInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSinkCommitInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSinkCommitInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIceberg_data_file()) {
        optionals.set(0);
      }
      if (struct.isSetHive_file_info()) {
        optionals.set(1);
      }
      if (struct.isSetIs_overwrite()) {
        optionals.set(2);
      }
      if (struct.isSetStaging_dir()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetIceberg_data_file()) {
        struct.iceberg_data_file.write(oprot);
      }
      if (struct.isSetHive_file_info()) {
        struct.hive_file_info.write(oprot);
      }
      if (struct.isSetIs_overwrite()) {
        oprot.writeBool(struct.is_overwrite);
      }
      if (struct.isSetStaging_dir()) {
        oprot.writeString(struct.staging_dir);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSinkCommitInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.iceberg_data_file = new TIcebergDataFile();
        struct.iceberg_data_file.read(iprot);
        struct.setIceberg_data_fileIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hive_file_info = new THiveFileInfo();
        struct.hive_file_info.read(iprot);
        struct.setHive_file_infoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.is_overwrite = iprot.readBool();
        struct.setIs_overwriteIsSet(true);
      }
      if (incoming.get(3)) {
        struct.staging_dir = iprot.readString();
        struct.setStaging_dirIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

