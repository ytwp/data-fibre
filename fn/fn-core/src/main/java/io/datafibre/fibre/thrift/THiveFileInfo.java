/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class THiveFileInfo implements org.apache.thrift.TBase<THiveFileInfo, THiveFileInfo._Fields>, java.io.Serializable, Cloneable, Comparable<THiveFileInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THiveFileInfo");

  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("file_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARTITION_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_path", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RECORD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("record_count", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_IN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("file_size_in_bytes", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new THiveFileInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new THiveFileInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String file_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String partition_path; // optional
  public long record_count; // optional
  public long file_size_in_bytes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_NAME((short)1, "file_name"),
    PARTITION_PATH((short)2, "partition_path"),
    RECORD_COUNT((short)4, "record_count"),
    FILE_SIZE_IN_BYTES((short)5, "file_size_in_bytes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_NAME
          return FILE_NAME;
        case 2: // PARTITION_PATH
          return PARTITION_PATH;
        case 4: // RECORD_COUNT
          return RECORD_COUNT;
        case 5: // FILE_SIZE_IN_BYTES
          return FILE_SIZE_IN_BYTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECORD_COUNT_ISSET_ID = 0;
  private static final int __FILE_SIZE_IN_BYTES_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FILE_NAME,_Fields.PARTITION_PATH,_Fields.RECORD_COUNT,_Fields.FILE_SIZE_IN_BYTES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("file_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION_PATH, new org.apache.thrift.meta_data.FieldMetaData("partition_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("record_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_SIZE_IN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("file_size_in_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THiveFileInfo.class, metaDataMap);
  }

  public THiveFileInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THiveFileInfo(THiveFileInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFile_name()) {
      this.file_name = other.file_name;
    }
    if (other.isSetPartition_path()) {
      this.partition_path = other.partition_path;
    }
    this.record_count = other.record_count;
    this.file_size_in_bytes = other.file_size_in_bytes;
  }

  @Override
  public THiveFileInfo deepCopy() {
    return new THiveFileInfo(this);
  }

  @Override
  public void clear() {
    this.file_name = null;
    this.partition_path = null;
    setRecord_countIsSet(false);
    this.record_count = 0;
    setFile_size_in_bytesIsSet(false);
    this.file_size_in_bytes = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFile_name() {
    return this.file_name;
  }

  public THiveFileInfo setFile_name(@org.apache.thrift.annotation.Nullable java.lang.String file_name) {
    this.file_name = file_name;
    return this;
  }

  public void unsetFile_name() {
    this.file_name = null;
  }

  /** Returns true if field file_name is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_name() {
    return this.file_name != null;
  }

  public void setFile_nameIsSet(boolean value) {
    if (!value) {
      this.file_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartition_path() {
    return this.partition_path;
  }

  public THiveFileInfo setPartition_path(@org.apache.thrift.annotation.Nullable java.lang.String partition_path) {
    this.partition_path = partition_path;
    return this;
  }

  public void unsetPartition_path() {
    this.partition_path = null;
  }

  /** Returns true if field partition_path is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_path() {
    return this.partition_path != null;
  }

  public void setPartition_pathIsSet(boolean value) {
    if (!value) {
      this.partition_path = null;
    }
  }

  public long getRecord_count() {
    return this.record_count;
  }

  public THiveFileInfo setRecord_count(long record_count) {
    this.record_count = record_count;
    setRecord_countIsSet(true);
    return this;
  }

  public void unsetRecord_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORD_COUNT_ISSET_ID);
  }

  /** Returns true if field record_count is set (has been assigned a value) and false otherwise */
  public boolean isSetRecord_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORD_COUNT_ISSET_ID);
  }

  public void setRecord_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORD_COUNT_ISSET_ID, value);
  }

  public long getFile_size_in_bytes() {
    return this.file_size_in_bytes;
  }

  public THiveFileInfo setFile_size_in_bytes(long file_size_in_bytes) {
    this.file_size_in_bytes = file_size_in_bytes;
    setFile_size_in_bytesIsSet(true);
    return this;
  }

  public void unsetFile_size_in_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILE_SIZE_IN_BYTES_ISSET_ID);
  }

  /** Returns true if field file_size_in_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_size_in_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILE_SIZE_IN_BYTES_ISSET_ID);
  }

  public void setFile_size_in_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILE_SIZE_IN_BYTES_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FILE_NAME:
      if (value == null) {
        unsetFile_name();
      } else {
        setFile_name((java.lang.String)value);
      }
      break;

    case PARTITION_PATH:
      if (value == null) {
        unsetPartition_path();
      } else {
        setPartition_path((java.lang.String)value);
      }
      break;

    case RECORD_COUNT:
      if (value == null) {
        unsetRecord_count();
      } else {
        setRecord_count((java.lang.Long)value);
      }
      break;

    case FILE_SIZE_IN_BYTES:
      if (value == null) {
        unsetFile_size_in_bytes();
      } else {
        setFile_size_in_bytes((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_NAME:
      return getFile_name();

    case PARTITION_PATH:
      return getPartition_path();

    case RECORD_COUNT:
      return getRecord_count();

    case FILE_SIZE_IN_BYTES:
      return getFile_size_in_bytes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FILE_NAME:
      return isSetFile_name();
    case PARTITION_PATH:
      return isSetPartition_path();
    case RECORD_COUNT:
      return isSetRecord_count();
    case FILE_SIZE_IN_BYTES:
      return isSetFile_size_in_bytes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof THiveFileInfo)
      return this.equals((THiveFileInfo)that);
    return false;
  }

  public boolean equals(THiveFileInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_file_name = true && this.isSetFile_name();
    boolean that_present_file_name = true && that.isSetFile_name();
    if (this_present_file_name || that_present_file_name) {
      if (!(this_present_file_name && that_present_file_name))
        return false;
      if (!this.file_name.equals(that.file_name))
        return false;
    }

    boolean this_present_partition_path = true && this.isSetPartition_path();
    boolean that_present_partition_path = true && that.isSetPartition_path();
    if (this_present_partition_path || that_present_partition_path) {
      if (!(this_present_partition_path && that_present_partition_path))
        return false;
      if (!this.partition_path.equals(that.partition_path))
        return false;
    }

    boolean this_present_record_count = true && this.isSetRecord_count();
    boolean that_present_record_count = true && that.isSetRecord_count();
    if (this_present_record_count || that_present_record_count) {
      if (!(this_present_record_count && that_present_record_count))
        return false;
      if (this.record_count != that.record_count)
        return false;
    }

    boolean this_present_file_size_in_bytes = true && this.isSetFile_size_in_bytes();
    boolean that_present_file_size_in_bytes = true && that.isSetFile_size_in_bytes();
    if (this_present_file_size_in_bytes || that_present_file_size_in_bytes) {
      if (!(this_present_file_size_in_bytes && that_present_file_size_in_bytes))
        return false;
      if (this.file_size_in_bytes != that.file_size_in_bytes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFile_name()) ? 131071 : 524287);
    if (isSetFile_name())
      hashCode = hashCode * 8191 + file_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_path()) ? 131071 : 524287);
    if (isSetPartition_path())
      hashCode = hashCode * 8191 + partition_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetRecord_count()) ? 131071 : 524287);
    if (isSetRecord_count())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(record_count);

    hashCode = hashCode * 8191 + ((isSetFile_size_in_bytes()) ? 131071 : 524287);
    if (isSetFile_size_in_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(file_size_in_bytes);

    return hashCode;
  }

  @Override
  public int compareTo(THiveFileInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFile_name(), other.isSetFile_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_name, other.file_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_path(), other.isSetPartition_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_path, other.partition_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRecord_count(), other.isSetRecord_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecord_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record_count, other.record_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_size_in_bytes(), other.isSetFile_size_in_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_size_in_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_size_in_bytes, other.file_size_in_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("THiveFileInfo(");
    boolean first = true;

    if (isSetFile_name()) {
      sb.append("file_name:");
      if (this.file_name == null) {
        sb.append("null");
      } else {
        sb.append(this.file_name);
      }
      first = false;
    }
    if (isSetPartition_path()) {
      if (!first) sb.append(", ");
      sb.append("partition_path:");
      if (this.partition_path == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_path);
      }
      first = false;
    }
    if (isSetRecord_count()) {
      if (!first) sb.append(", ");
      sb.append("record_count:");
      sb.append(this.record_count);
      first = false;
    }
    if (isSetFile_size_in_bytes()) {
      if (!first) sb.append(", ");
      sb.append("file_size_in_bytes:");
      sb.append(this.file_size_in_bytes);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THiveFileInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THiveFileInfoStandardScheme getScheme() {
      return new THiveFileInfoStandardScheme();
    }
  }

  private static class THiveFileInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<THiveFileInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, THiveFileInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_name = iprot.readString();
              struct.setFile_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTITION_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partition_path = iprot.readString();
              struct.setPartition_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECORD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.record_count = iprot.readI64();
              struct.setRecord_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILE_SIZE_IN_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.file_size_in_bytes = iprot.readI64();
              struct.setFile_size_in_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, THiveFileInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.file_name != null) {
        if (struct.isSetFile_name()) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.file_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_path != null) {
        if (struct.isSetPartition_path()) {
          oprot.writeFieldBegin(PARTITION_PATH_FIELD_DESC);
          oprot.writeString(struct.partition_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRecord_count()) {
        oprot.writeFieldBegin(RECORD_COUNT_FIELD_DESC);
        oprot.writeI64(struct.record_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFile_size_in_bytes()) {
        oprot.writeFieldBegin(FILE_SIZE_IN_BYTES_FIELD_DESC);
        oprot.writeI64(struct.file_size_in_bytes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THiveFileInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THiveFileInfoTupleScheme getScheme() {
      return new THiveFileInfoTupleScheme();
    }
  }

  private static class THiveFileInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<THiveFileInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THiveFileInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFile_name()) {
        optionals.set(0);
      }
      if (struct.isSetPartition_path()) {
        optionals.set(1);
      }
      if (struct.isSetRecord_count()) {
        optionals.set(2);
      }
      if (struct.isSetFile_size_in_bytes()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFile_name()) {
        oprot.writeString(struct.file_name);
      }
      if (struct.isSetPartition_path()) {
        oprot.writeString(struct.partition_path);
      }
      if (struct.isSetRecord_count()) {
        oprot.writeI64(struct.record_count);
      }
      if (struct.isSetFile_size_in_bytes()) {
        oprot.writeI64(struct.file_size_in_bytes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THiveFileInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.file_name = iprot.readString();
        struct.setFile_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partition_path = iprot.readString();
        struct.setPartition_pathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.record_count = iprot.readI64();
        struct.setRecord_countIsSet(true);
      }
      if (incoming.get(3)) {
        struct.file_size_in_bytes = iprot.readI64();
        struct.setFile_size_in_bytesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

