/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TIcebergTable implements org.apache.thrift.TBase<TIcebergTable, TIcebergTable._Fields>, java.io.Serializable, Cloneable, Comparable<TIcebergTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIcebergTable");

  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ICEBERG_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("iceberg_schema", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PARTITION_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_column_names", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField COMPRESSED_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("compressed_partitions", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TIcebergTableStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TIcebergTableTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String location; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TColumn> columns; // optional
  public @org.apache.thrift.annotation.Nullable TIcebergSchema iceberg_schema; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> partition_column_names; // optional
  public @org.apache.thrift.annotation.Nullable TCompressedPartitionMap compressed_partitions; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,THdfsPartition> partitions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCATION((short)1, "location"),
    COLUMNS((short)2, "columns"),
    ICEBERG_SCHEMA((short)3, "iceberg_schema"),
    PARTITION_COLUMN_NAMES((short)4, "partition_column_names"),
    COMPRESSED_PARTITIONS((short)5, "compressed_partitions"),
    PARTITIONS((short)6, "partitions");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCATION
          return LOCATION;
        case 2: // COLUMNS
          return COLUMNS;
        case 3: // ICEBERG_SCHEMA
          return ICEBERG_SCHEMA;
        case 4: // PARTITION_COLUMN_NAMES
          return PARTITION_COLUMN_NAMES;
        case 5: // COMPRESSED_PARTITIONS
          return COMPRESSED_PARTITIONS;
        case 6: // PARTITIONS
          return PARTITIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LOCATION,_Fields.COLUMNS,_Fields.ICEBERG_SCHEMA,_Fields.PARTITION_COLUMN_NAMES,_Fields.COMPRESSED_PARTITIONS,_Fields.PARTITIONS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumn.class))));
    tmpMap.put(_Fields.ICEBERG_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("iceberg_schema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIcebergSchema.class)));
    tmpMap.put(_Fields.PARTITION_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("partition_column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMPRESSED_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("compressed_partitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCompressedPartitionMap.class)));
    tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsPartition.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TIcebergTable.class, metaDataMap);
  }

  public TIcebergTable() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TIcebergTable(TIcebergTable other) {
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetColumns()) {
      java.util.List<TColumn> __this__columns = new java.util.ArrayList<TColumn>(other.columns.size());
      for (TColumn other_element : other.columns) {
        __this__columns.add(new TColumn(other_element));
      }
      this.columns = __this__columns;
    }
    if (other.isSetIceberg_schema()) {
      this.iceberg_schema = new TIcebergSchema(other.iceberg_schema);
    }
    if (other.isSetPartition_column_names()) {
      java.util.List<java.lang.String> __this__partition_column_names = new java.util.ArrayList<java.lang.String>(other.partition_column_names);
      this.partition_column_names = __this__partition_column_names;
    }
    if (other.isSetCompressed_partitions()) {
      this.compressed_partitions = new TCompressedPartitionMap(other.compressed_partitions);
    }
    if (other.isSetPartitions()) {
      java.util.Map<java.lang.Long,THdfsPartition> __this__partitions = new java.util.HashMap<java.lang.Long,THdfsPartition>(other.partitions.size());
      for (java.util.Map.Entry<java.lang.Long, THdfsPartition> other_element : other.partitions.entrySet()) {

        java.lang.Long other_element_key = other_element.getKey();
        THdfsPartition other_element_value = other_element.getValue();

        java.lang.Long __this__partitions_copy_key = other_element_key;

        THdfsPartition __this__partitions_copy_value = new THdfsPartition(other_element_value);

        __this__partitions.put(__this__partitions_copy_key, __this__partitions_copy_value);
      }
      this.partitions = __this__partitions;
    }
  }

  @Override
  public TIcebergTable deepCopy() {
    return new TIcebergTable(this);
  }

  @Override
  public void clear() {
    this.location = null;
    this.columns = null;
    this.iceberg_schema = null;
    this.partition_column_names = null;
    this.compressed_partitions = null;
    this.partitions = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLocation() {
    return this.location;
  }

  public TIcebergTable setLocation(@org.apache.thrift.annotation.Nullable java.lang.String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(TColumn elem) {
    if (this.columns == null) {
      this.columns = new java.util.ArrayList<TColumn>();
    }
    this.columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TColumn> getColumns() {
    return this.columns;
  }

  public TIcebergTable setColumns(@org.apache.thrift.annotation.Nullable java.util.List<TColumn> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TIcebergSchema getIceberg_schema() {
    return this.iceberg_schema;
  }

  public TIcebergTable setIceberg_schema(@org.apache.thrift.annotation.Nullable TIcebergSchema iceberg_schema) {
    this.iceberg_schema = iceberg_schema;
    return this;
  }

  public void unsetIceberg_schema() {
    this.iceberg_schema = null;
  }

  /** Returns true if field iceberg_schema is set (has been assigned a value) and false otherwise */
  public boolean isSetIceberg_schema() {
    return this.iceberg_schema != null;
  }

  public void setIceberg_schemaIsSet(boolean value) {
    if (!value) {
      this.iceberg_schema = null;
    }
  }

  public int getPartition_column_namesSize() {
    return (this.partition_column_names == null) ? 0 : this.partition_column_names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getPartition_column_namesIterator() {
    return (this.partition_column_names == null) ? null : this.partition_column_names.iterator();
  }

  public void addToPartition_column_names(java.lang.String elem) {
    if (this.partition_column_names == null) {
      this.partition_column_names = new java.util.ArrayList<java.lang.String>();
    }
    this.partition_column_names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getPartition_column_names() {
    return this.partition_column_names;
  }

  public TIcebergTable setPartition_column_names(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> partition_column_names) {
    this.partition_column_names = partition_column_names;
    return this;
  }

  public void unsetPartition_column_names() {
    this.partition_column_names = null;
  }

  /** Returns true if field partition_column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_column_names() {
    return this.partition_column_names != null;
  }

  public void setPartition_column_namesIsSet(boolean value) {
    if (!value) {
      this.partition_column_names = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TCompressedPartitionMap getCompressed_partitions() {
    return this.compressed_partitions;
  }

  public TIcebergTable setCompressed_partitions(@org.apache.thrift.annotation.Nullable TCompressedPartitionMap compressed_partitions) {
    this.compressed_partitions = compressed_partitions;
    return this;
  }

  public void unsetCompressed_partitions() {
    this.compressed_partitions = null;
  }

  /** Returns true if field compressed_partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetCompressed_partitions() {
    return this.compressed_partitions != null;
  }

  public void setCompressed_partitionsIsSet(boolean value) {
    if (!value) {
      this.compressed_partitions = null;
    }
  }

  public int getPartitionsSize() {
    return (this.partitions == null) ? 0 : this.partitions.size();
  }

  public void putToPartitions(long key, THdfsPartition val) {
    if (this.partitions == null) {
      this.partitions = new java.util.HashMap<java.lang.Long,THdfsPartition>();
    }
    this.partitions.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Long,THdfsPartition> getPartitions() {
    return this.partitions;
  }

  public TIcebergTable setPartitions(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,THdfsPartition> partitions) {
    this.partitions = partitions;
    return this;
  }

  public void unsetPartitions() {
    this.partitions = null;
  }

  /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitions() {
    return this.partitions != null;
  }

  public void setPartitionsIsSet(boolean value) {
    if (!value) {
      this.partitions = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((java.lang.String)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((java.util.List<TColumn>)value);
      }
      break;

    case ICEBERG_SCHEMA:
      if (value == null) {
        unsetIceberg_schema();
      } else {
        setIceberg_schema((TIcebergSchema)value);
      }
      break;

    case PARTITION_COLUMN_NAMES:
      if (value == null) {
        unsetPartition_column_names();
      } else {
        setPartition_column_names((java.util.List<java.lang.String>)value);
      }
      break;

    case COMPRESSED_PARTITIONS:
      if (value == null) {
        unsetCompressed_partitions();
      } else {
        setCompressed_partitions((TCompressedPartitionMap)value);
      }
      break;

    case PARTITIONS:
      if (value == null) {
        unsetPartitions();
      } else {
        setPartitions((java.util.Map<java.lang.Long,THdfsPartition>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCATION:
      return getLocation();

    case COLUMNS:
      return getColumns();

    case ICEBERG_SCHEMA:
      return getIceberg_schema();

    case PARTITION_COLUMN_NAMES:
      return getPartition_column_names();

    case COMPRESSED_PARTITIONS:
      return getCompressed_partitions();

    case PARTITIONS:
      return getPartitions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LOCATION:
      return isSetLocation();
    case COLUMNS:
      return isSetColumns();
    case ICEBERG_SCHEMA:
      return isSetIceberg_schema();
    case PARTITION_COLUMN_NAMES:
      return isSetPartition_column_names();
    case COMPRESSED_PARTITIONS:
      return isSetCompressed_partitions();
    case PARTITIONS:
      return isSetPartitions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TIcebergTable)
      return this.equals((TIcebergTable)that);
    return false;
  }

  public boolean equals(TIcebergTable that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_iceberg_schema = true && this.isSetIceberg_schema();
    boolean that_present_iceberg_schema = true && that.isSetIceberg_schema();
    if (this_present_iceberg_schema || that_present_iceberg_schema) {
      if (!(this_present_iceberg_schema && that_present_iceberg_schema))
        return false;
      if (!this.iceberg_schema.equals(that.iceberg_schema))
        return false;
    }

    boolean this_present_partition_column_names = true && this.isSetPartition_column_names();
    boolean that_present_partition_column_names = true && that.isSetPartition_column_names();
    if (this_present_partition_column_names || that_present_partition_column_names) {
      if (!(this_present_partition_column_names && that_present_partition_column_names))
        return false;
      if (!this.partition_column_names.equals(that.partition_column_names))
        return false;
    }

    boolean this_present_compressed_partitions = true && this.isSetCompressed_partitions();
    boolean that_present_compressed_partitions = true && that.isSetCompressed_partitions();
    if (this_present_compressed_partitions || that_present_compressed_partitions) {
      if (!(this_present_compressed_partitions && that_present_compressed_partitions))
        return false;
      if (!this.compressed_partitions.equals(that.compressed_partitions))
        return false;
    }

    boolean this_present_partitions = true && this.isSetPartitions();
    boolean that_present_partitions = true && that.isSetPartitions();
    if (this_present_partitions || that_present_partitions) {
      if (!(this_present_partitions && that_present_partitions))
        return false;
      if (!this.partitions.equals(that.partitions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
    if (isSetLocation())
      hashCode = hashCode * 8191 + location.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
    if (isSetColumns())
      hashCode = hashCode * 8191 + columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetIceberg_schema()) ? 131071 : 524287);
    if (isSetIceberg_schema())
      hashCode = hashCode * 8191 + iceberg_schema.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_column_names()) ? 131071 : 524287);
    if (isSetPartition_column_names())
      hashCode = hashCode * 8191 + partition_column_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompressed_partitions()) ? 131071 : 524287);
    if (isSetCompressed_partitions())
      hashCode = hashCode * 8191 + compressed_partitions.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartitions()) ? 131071 : 524287);
    if (isSetPartitions())
      hashCode = hashCode * 8191 + partitions.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TIcebergTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLocation(), other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIceberg_schema(), other.isSetIceberg_schema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIceberg_schema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iceberg_schema, other.iceberg_schema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_column_names(), other.isSetPartition_column_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_column_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_column_names, other.partition_column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCompressed_partitions(), other.isSetCompressed_partitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressed_partitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compressed_partitions, other.compressed_partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitions(), other.isSetPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, other.partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TIcebergTable(");
    boolean first = true;

    if (isSetLocation()) {
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetColumns()) {
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
    }
    if (isSetIceberg_schema()) {
      if (!first) sb.append(", ");
      sb.append("iceberg_schema:");
      if (this.iceberg_schema == null) {
        sb.append("null");
      } else {
        sb.append(this.iceberg_schema);
      }
      first = false;
    }
    if (isSetPartition_column_names()) {
      if (!first) sb.append(", ");
      sb.append("partition_column_names:");
      if (this.partition_column_names == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_column_names);
      }
      first = false;
    }
    if (isSetCompressed_partitions()) {
      if (!first) sb.append(", ");
      sb.append("compressed_partitions:");
      if (this.compressed_partitions == null) {
        sb.append("null");
      } else {
        sb.append(this.compressed_partitions);
      }
      first = false;
    }
    if (isSetPartitions()) {
      if (!first) sb.append(", ");
      sb.append("partitions:");
      if (this.partitions == null) {
        sb.append("null");
      } else {
        sb.append(this.partitions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (iceberg_schema != null) {
      iceberg_schema.validate();
    }
    if (compressed_partitions != null) {
      compressed_partitions.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TIcebergTableStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIcebergTableStandardScheme getScheme() {
      return new TIcebergTableStandardScheme();
    }
  }

  private static class TIcebergTableStandardScheme extends org.apache.thrift.scheme.StandardScheme<TIcebergTable> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TIcebergTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list294 = iprot.readListBegin();
                struct.columns = new java.util.ArrayList<TColumn>(_list294.size);
                @org.apache.thrift.annotation.Nullable TColumn _elem295;
                for (int _i296 = 0; _i296 < _list294.size; ++_i296)
                {
                  _elem295 = new TColumn();
                  _elem295.read(iprot);
                  struct.columns.add(_elem295);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ICEBERG_SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.iceberg_schema = new TIcebergSchema();
              struct.iceberg_schema.read(iprot);
              struct.setIceberg_schemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITION_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list297 = iprot.readListBegin();
                struct.partition_column_names = new java.util.ArrayList<java.lang.String>(_list297.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem298;
                for (int _i299 = 0; _i299 < _list297.size; ++_i299)
                {
                  _elem298 = iprot.readString();
                  struct.partition_column_names.add(_elem298);
                }
                iprot.readListEnd();
              }
              struct.setPartition_column_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPRESSED_PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.compressed_partitions = new TCompressedPartitionMap();
              struct.compressed_partitions.read(iprot);
              struct.setCompressed_partitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map300 = iprot.readMapBegin();
                struct.partitions = new java.util.HashMap<java.lang.Long,THdfsPartition>(2*_map300.size);
                long _key301;
                @org.apache.thrift.annotation.Nullable THdfsPartition _val302;
                for (int _i303 = 0; _i303 < _map300.size; ++_i303)
                {
                  _key301 = iprot.readI64();
                  _val302 = new THdfsPartition();
                  _val302.read(iprot);
                  struct.partitions.put(_key301, _val302);
                }
                iprot.readMapEnd();
              }
              struct.setPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TIcebergTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columns != null) {
        if (struct.isSetColumns()) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
            for (TColumn _iter304 : struct.columns)
            {
              _iter304.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.iceberg_schema != null) {
        if (struct.isSetIceberg_schema()) {
          oprot.writeFieldBegin(ICEBERG_SCHEMA_FIELD_DESC);
          struct.iceberg_schema.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_column_names != null) {
        if (struct.isSetPartition_column_names()) {
          oprot.writeFieldBegin(PARTITION_COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.partition_column_names.size()));
            for (java.lang.String _iter305 : struct.partition_column_names)
            {
              oprot.writeString(_iter305);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.compressed_partitions != null) {
        if (struct.isSetCompressed_partitions()) {
          oprot.writeFieldBegin(COMPRESSED_PARTITIONS_FIELD_DESC);
          struct.compressed_partitions.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partitions != null) {
        if (struct.isSetPartitions()) {
          oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.partitions.size()));
            for (java.util.Map.Entry<java.lang.Long, THdfsPartition> _iter306 : struct.partitions.entrySet())
            {
              oprot.writeI64(_iter306.getKey());
              _iter306.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TIcebergTableTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIcebergTableTupleScheme getScheme() {
      return new TIcebergTableTupleScheme();
    }
  }

  private static class TIcebergTableTupleScheme extends org.apache.thrift.scheme.TupleScheme<TIcebergTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TIcebergTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLocation()) {
        optionals.set(0);
      }
      if (struct.isSetColumns()) {
        optionals.set(1);
      }
      if (struct.isSetIceberg_schema()) {
        optionals.set(2);
      }
      if (struct.isSetPartition_column_names()) {
        optionals.set(3);
      }
      if (struct.isSetCompressed_partitions()) {
        optionals.set(4);
      }
      if (struct.isSetPartitions()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetColumns()) {
        {
          oprot.writeI32(struct.columns.size());
          for (TColumn _iter307 : struct.columns)
          {
            _iter307.write(oprot);
          }
        }
      }
      if (struct.isSetIceberg_schema()) {
        struct.iceberg_schema.write(oprot);
      }
      if (struct.isSetPartition_column_names()) {
        {
          oprot.writeI32(struct.partition_column_names.size());
          for (java.lang.String _iter308 : struct.partition_column_names)
          {
            oprot.writeString(_iter308);
          }
        }
      }
      if (struct.isSetCompressed_partitions()) {
        struct.compressed_partitions.write(oprot);
      }
      if (struct.isSetPartitions()) {
        {
          oprot.writeI32(struct.partitions.size());
          for (java.util.Map.Entry<java.lang.Long, THdfsPartition> _iter309 : struct.partitions.entrySet())
          {
            oprot.writeI64(_iter309.getKey());
            _iter309.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TIcebergTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list310 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.columns = new java.util.ArrayList<TColumn>(_list310.size);
          @org.apache.thrift.annotation.Nullable TColumn _elem311;
          for (int _i312 = 0; _i312 < _list310.size; ++_i312)
          {
            _elem311 = new TColumn();
            _elem311.read(iprot);
            struct.columns.add(_elem311);
          }
        }
        struct.setColumnsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.iceberg_schema = new TIcebergSchema();
        struct.iceberg_schema.read(iprot);
        struct.setIceberg_schemaIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list313 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.partition_column_names = new java.util.ArrayList<java.lang.String>(_list313.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem314;
          for (int _i315 = 0; _i315 < _list313.size; ++_i315)
          {
            _elem314 = iprot.readString();
            struct.partition_column_names.add(_elem314);
          }
        }
        struct.setPartition_column_namesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.compressed_partitions = new TCompressedPartitionMap();
        struct.compressed_partitions.read(iprot);
        struct.setCompressed_partitionsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map316 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT); 
          struct.partitions = new java.util.HashMap<java.lang.Long,THdfsPartition>(2*_map316.size);
          long _key317;
          @org.apache.thrift.annotation.Nullable THdfsPartition _val318;
          for (int _i319 = 0; _i319 < _map316.size; ++_i319)
          {
            _key317 = iprot.readI64();
            _val318 = new THdfsPartition();
            _val318.read(iprot);
            struct.partitions.put(_key317, _val318);
          }
        }
        struct.setPartitionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

