/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TStreamAggregationNode implements org.apache.thrift.TBase<TStreamAggregationNode, TStreamAggregationNode._Fields>, java.io.Serializable, Cloneable, Comparable<TStreamAggregationNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStreamAggregationNode");

  private static final org.apache.thrift.protocol.TField GROUPING_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("grouping_exprs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField AGGREGATE_FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregate_functions", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField AGG_RESULT_IMT_FIELD_DESC = new org.apache.thrift.protocol.TField("agg_result_imt", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField AGG_INTERMEDIATE_IMT_FIELD_DESC = new org.apache.thrift.protocol.TField("agg_intermediate_imt", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField AGG_DETAIL_IMT_FIELD_DESC = new org.apache.thrift.protocol.TField("agg_detail_imt", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField SQL_GROUPING_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_grouping_keys", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField SQL_AGGREGATE_FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_aggregate_functions", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField AGG_FUNC_SET_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("agg_func_set_version", org.apache.thrift.protocol.TType.I32, (short)24);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TStreamAggregationNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TStreamAggregationNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> grouping_exprs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> aggregate_functions; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TIMTDescriptor agg_result_imt; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TIMTDescriptor agg_intermediate_imt; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TIMTDescriptor agg_detail_imt; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sql_grouping_keys; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sql_aggregate_functions; // optional
  public int agg_func_set_version; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUPING_EXPRS((short)1, "grouping_exprs"),
    AGGREGATE_FUNCTIONS((short)2, "aggregate_functions"),
    AGG_RESULT_IMT((short)10, "agg_result_imt"),
    AGG_INTERMEDIATE_IMT((short)11, "agg_intermediate_imt"),
    AGG_DETAIL_IMT((short)12, "agg_detail_imt"),
    SQL_GROUPING_KEYS((short)22, "sql_grouping_keys"),
    SQL_AGGREGATE_FUNCTIONS((short)23, "sql_aggregate_functions"),
    AGG_FUNC_SET_VERSION((short)24, "agg_func_set_version");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUPING_EXPRS
          return GROUPING_EXPRS;
        case 2: // AGGREGATE_FUNCTIONS
          return AGGREGATE_FUNCTIONS;
        case 10: // AGG_RESULT_IMT
          return AGG_RESULT_IMT;
        case 11: // AGG_INTERMEDIATE_IMT
          return AGG_INTERMEDIATE_IMT;
        case 12: // AGG_DETAIL_IMT
          return AGG_DETAIL_IMT;
        case 22: // SQL_GROUPING_KEYS
          return SQL_GROUPING_KEYS;
        case 23: // SQL_AGGREGATE_FUNCTIONS
          return SQL_AGGREGATE_FUNCTIONS;
        case 24: // AGG_FUNC_SET_VERSION
          return AGG_FUNC_SET_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AGG_FUNC_SET_VERSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GROUPING_EXPRS,_Fields.AGGREGATE_FUNCTIONS,_Fields.AGG_RESULT_IMT,_Fields.AGG_INTERMEDIATE_IMT,_Fields.AGG_DETAIL_IMT,_Fields.SQL_GROUPING_KEYS,_Fields.SQL_AGGREGATE_FUNCTIONS,_Fields.AGG_FUNC_SET_VERSION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUPING_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("grouping_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class))));
    tmpMap.put(_Fields.AGGREGATE_FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("aggregate_functions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class))));
    tmpMap.put(_Fields.AGG_RESULT_IMT, new org.apache.thrift.meta_data.FieldMetaData("agg_result_imt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TIMTDescriptor.class)));
    tmpMap.put(_Fields.AGG_INTERMEDIATE_IMT, new org.apache.thrift.meta_data.FieldMetaData("agg_intermediate_imt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TIMTDescriptor.class)));
    tmpMap.put(_Fields.AGG_DETAIL_IMT, new org.apache.thrift.meta_data.FieldMetaData("agg_detail_imt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TIMTDescriptor.class)));
    tmpMap.put(_Fields.SQL_GROUPING_KEYS, new org.apache.thrift.meta_data.FieldMetaData("sql_grouping_keys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SQL_AGGREGATE_FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("sql_aggregate_functions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGG_FUNC_SET_VERSION, new org.apache.thrift.meta_data.FieldMetaData("agg_func_set_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStreamAggregationNode.class, metaDataMap);
  }

  public TStreamAggregationNode() {
    this.agg_func_set_version = 1;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStreamAggregationNode(TStreamAggregationNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGrouping_exprs()) {
      java.util.List<com.starrocks.thrift.TExpr> __this__grouping_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>(other.grouping_exprs.size());
      for (com.starrocks.thrift.TExpr other_element : other.grouping_exprs) {
        __this__grouping_exprs.add(new com.starrocks.thrift.TExpr(other_element));
      }
      this.grouping_exprs = __this__grouping_exprs;
    }
    if (other.isSetAggregate_functions()) {
      java.util.List<com.starrocks.thrift.TExpr> __this__aggregate_functions = new java.util.ArrayList<com.starrocks.thrift.TExpr>(other.aggregate_functions.size());
      for (com.starrocks.thrift.TExpr other_element : other.aggregate_functions) {
        __this__aggregate_functions.add(new com.starrocks.thrift.TExpr(other_element));
      }
      this.aggregate_functions = __this__aggregate_functions;
    }
    if (other.isSetAgg_result_imt()) {
      this.agg_result_imt = new com.starrocks.thrift.TIMTDescriptor(other.agg_result_imt);
    }
    if (other.isSetAgg_intermediate_imt()) {
      this.agg_intermediate_imt = new com.starrocks.thrift.TIMTDescriptor(other.agg_intermediate_imt);
    }
    if (other.isSetAgg_detail_imt()) {
      this.agg_detail_imt = new com.starrocks.thrift.TIMTDescriptor(other.agg_detail_imt);
    }
    if (other.isSetSql_grouping_keys()) {
      this.sql_grouping_keys = other.sql_grouping_keys;
    }
    if (other.isSetSql_aggregate_functions()) {
      this.sql_aggregate_functions = other.sql_aggregate_functions;
    }
    this.agg_func_set_version = other.agg_func_set_version;
  }

  @Override
  public TStreamAggregationNode deepCopy() {
    return new TStreamAggregationNode(this);
  }

  @Override
  public void clear() {
    this.grouping_exprs = null;
    this.aggregate_functions = null;
    this.agg_result_imt = null;
    this.agg_intermediate_imt = null;
    this.agg_detail_imt = null;
    this.sql_grouping_keys = null;
    this.sql_aggregate_functions = null;
    this.agg_func_set_version = 1;

  }

  public int getGrouping_exprsSize() {
    return (this.grouping_exprs == null) ? 0 : this.grouping_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TExpr> getGrouping_exprsIterator() {
    return (this.grouping_exprs == null) ? null : this.grouping_exprs.iterator();
  }

  public void addToGrouping_exprs(com.starrocks.thrift.TExpr elem) {
    if (this.grouping_exprs == null) {
      this.grouping_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>();
    }
    this.grouping_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TExpr> getGrouping_exprs() {
    return this.grouping_exprs;
  }

  public TStreamAggregationNode setGrouping_exprs(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> grouping_exprs) {
    this.grouping_exprs = grouping_exprs;
    return this;
  }

  public void unsetGrouping_exprs() {
    this.grouping_exprs = null;
  }

  /** Returns true if field grouping_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetGrouping_exprs() {
    return this.grouping_exprs != null;
  }

  public void setGrouping_exprsIsSet(boolean value) {
    if (!value) {
      this.grouping_exprs = null;
    }
  }

  public int getAggregate_functionsSize() {
    return (this.aggregate_functions == null) ? 0 : this.aggregate_functions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TExpr> getAggregate_functionsIterator() {
    return (this.aggregate_functions == null) ? null : this.aggregate_functions.iterator();
  }

  public void addToAggregate_functions(com.starrocks.thrift.TExpr elem) {
    if (this.aggregate_functions == null) {
      this.aggregate_functions = new java.util.ArrayList<com.starrocks.thrift.TExpr>();
    }
    this.aggregate_functions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TExpr> getAggregate_functions() {
    return this.aggregate_functions;
  }

  public TStreamAggregationNode setAggregate_functions(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> aggregate_functions) {
    this.aggregate_functions = aggregate_functions;
    return this;
  }

  public void unsetAggregate_functions() {
    this.aggregate_functions = null;
  }

  /** Returns true if field aggregate_functions is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregate_functions() {
    return this.aggregate_functions != null;
  }

  public void setAggregate_functionsIsSet(boolean value) {
    if (!value) {
      this.aggregate_functions = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TIMTDescriptor getAgg_result_imt() {
    return this.agg_result_imt;
  }

  public TStreamAggregationNode setAgg_result_imt(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TIMTDescriptor agg_result_imt) {
    this.agg_result_imt = agg_result_imt;
    return this;
  }

  public void unsetAgg_result_imt() {
    this.agg_result_imt = null;
  }

  /** Returns true if field agg_result_imt is set (has been assigned a value) and false otherwise */
  public boolean isSetAgg_result_imt() {
    return this.agg_result_imt != null;
  }

  public void setAgg_result_imtIsSet(boolean value) {
    if (!value) {
      this.agg_result_imt = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TIMTDescriptor getAgg_intermediate_imt() {
    return this.agg_intermediate_imt;
  }

  public TStreamAggregationNode setAgg_intermediate_imt(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TIMTDescriptor agg_intermediate_imt) {
    this.agg_intermediate_imt = agg_intermediate_imt;
    return this;
  }

  public void unsetAgg_intermediate_imt() {
    this.agg_intermediate_imt = null;
  }

  /** Returns true if field agg_intermediate_imt is set (has been assigned a value) and false otherwise */
  public boolean isSetAgg_intermediate_imt() {
    return this.agg_intermediate_imt != null;
  }

  public void setAgg_intermediate_imtIsSet(boolean value) {
    if (!value) {
      this.agg_intermediate_imt = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TIMTDescriptor getAgg_detail_imt() {
    return this.agg_detail_imt;
  }

  public TStreamAggregationNode setAgg_detail_imt(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TIMTDescriptor agg_detail_imt) {
    this.agg_detail_imt = agg_detail_imt;
    return this;
  }

  public void unsetAgg_detail_imt() {
    this.agg_detail_imt = null;
  }

  /** Returns true if field agg_detail_imt is set (has been assigned a value) and false otherwise */
  public boolean isSetAgg_detail_imt() {
    return this.agg_detail_imt != null;
  }

  public void setAgg_detail_imtIsSet(boolean value) {
    if (!value) {
      this.agg_detail_imt = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSql_grouping_keys() {
    return this.sql_grouping_keys;
  }

  public TStreamAggregationNode setSql_grouping_keys(@org.apache.thrift.annotation.Nullable java.lang.String sql_grouping_keys) {
    this.sql_grouping_keys = sql_grouping_keys;
    return this;
  }

  public void unsetSql_grouping_keys() {
    this.sql_grouping_keys = null;
  }

  /** Returns true if field sql_grouping_keys is set (has been assigned a value) and false otherwise */
  public boolean isSetSql_grouping_keys() {
    return this.sql_grouping_keys != null;
  }

  public void setSql_grouping_keysIsSet(boolean value) {
    if (!value) {
      this.sql_grouping_keys = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSql_aggregate_functions() {
    return this.sql_aggregate_functions;
  }

  public TStreamAggregationNode setSql_aggregate_functions(@org.apache.thrift.annotation.Nullable java.lang.String sql_aggregate_functions) {
    this.sql_aggregate_functions = sql_aggregate_functions;
    return this;
  }

  public void unsetSql_aggregate_functions() {
    this.sql_aggregate_functions = null;
  }

  /** Returns true if field sql_aggregate_functions is set (has been assigned a value) and false otherwise */
  public boolean isSetSql_aggregate_functions() {
    return this.sql_aggregate_functions != null;
  }

  public void setSql_aggregate_functionsIsSet(boolean value) {
    if (!value) {
      this.sql_aggregate_functions = null;
    }
  }

  public int getAgg_func_set_version() {
    return this.agg_func_set_version;
  }

  public TStreamAggregationNode setAgg_func_set_version(int agg_func_set_version) {
    this.agg_func_set_version = agg_func_set_version;
    setAgg_func_set_versionIsSet(true);
    return this;
  }

  public void unsetAgg_func_set_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGG_FUNC_SET_VERSION_ISSET_ID);
  }

  /** Returns true if field agg_func_set_version is set (has been assigned a value) and false otherwise */
  public boolean isSetAgg_func_set_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGG_FUNC_SET_VERSION_ISSET_ID);
  }

  public void setAgg_func_set_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGG_FUNC_SET_VERSION_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case GROUPING_EXPRS:
      if (value == null) {
        unsetGrouping_exprs();
      } else {
        setGrouping_exprs((java.util.List<com.starrocks.thrift.TExpr>)value);
      }
      break;

    case AGGREGATE_FUNCTIONS:
      if (value == null) {
        unsetAggregate_functions();
      } else {
        setAggregate_functions((java.util.List<com.starrocks.thrift.TExpr>)value);
      }
      break;

    case AGG_RESULT_IMT:
      if (value == null) {
        unsetAgg_result_imt();
      } else {
        setAgg_result_imt((com.starrocks.thrift.TIMTDescriptor)value);
      }
      break;

    case AGG_INTERMEDIATE_IMT:
      if (value == null) {
        unsetAgg_intermediate_imt();
      } else {
        setAgg_intermediate_imt((com.starrocks.thrift.TIMTDescriptor)value);
      }
      break;

    case AGG_DETAIL_IMT:
      if (value == null) {
        unsetAgg_detail_imt();
      } else {
        setAgg_detail_imt((com.starrocks.thrift.TIMTDescriptor)value);
      }
      break;

    case SQL_GROUPING_KEYS:
      if (value == null) {
        unsetSql_grouping_keys();
      } else {
        setSql_grouping_keys((java.lang.String)value);
      }
      break;

    case SQL_AGGREGATE_FUNCTIONS:
      if (value == null) {
        unsetSql_aggregate_functions();
      } else {
        setSql_aggregate_functions((java.lang.String)value);
      }
      break;

    case AGG_FUNC_SET_VERSION:
      if (value == null) {
        unsetAgg_func_set_version();
      } else {
        setAgg_func_set_version((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUPING_EXPRS:
      return getGrouping_exprs();

    case AGGREGATE_FUNCTIONS:
      return getAggregate_functions();

    case AGG_RESULT_IMT:
      return getAgg_result_imt();

    case AGG_INTERMEDIATE_IMT:
      return getAgg_intermediate_imt();

    case AGG_DETAIL_IMT:
      return getAgg_detail_imt();

    case SQL_GROUPING_KEYS:
      return getSql_grouping_keys();

    case SQL_AGGREGATE_FUNCTIONS:
      return getSql_aggregate_functions();

    case AGG_FUNC_SET_VERSION:
      return getAgg_func_set_version();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case GROUPING_EXPRS:
      return isSetGrouping_exprs();
    case AGGREGATE_FUNCTIONS:
      return isSetAggregate_functions();
    case AGG_RESULT_IMT:
      return isSetAgg_result_imt();
    case AGG_INTERMEDIATE_IMT:
      return isSetAgg_intermediate_imt();
    case AGG_DETAIL_IMT:
      return isSetAgg_detail_imt();
    case SQL_GROUPING_KEYS:
      return isSetSql_grouping_keys();
    case SQL_AGGREGATE_FUNCTIONS:
      return isSetSql_aggregate_functions();
    case AGG_FUNC_SET_VERSION:
      return isSetAgg_func_set_version();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TStreamAggregationNode)
      return this.equals((TStreamAggregationNode)that);
    return false;
  }

  public boolean equals(TStreamAggregationNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_grouping_exprs = true && this.isSetGrouping_exprs();
    boolean that_present_grouping_exprs = true && that.isSetGrouping_exprs();
    if (this_present_grouping_exprs || that_present_grouping_exprs) {
      if (!(this_present_grouping_exprs && that_present_grouping_exprs))
        return false;
      if (!this.grouping_exprs.equals(that.grouping_exprs))
        return false;
    }

    boolean this_present_aggregate_functions = true && this.isSetAggregate_functions();
    boolean that_present_aggregate_functions = true && that.isSetAggregate_functions();
    if (this_present_aggregate_functions || that_present_aggregate_functions) {
      if (!(this_present_aggregate_functions && that_present_aggregate_functions))
        return false;
      if (!this.aggregate_functions.equals(that.aggregate_functions))
        return false;
    }

    boolean this_present_agg_result_imt = true && this.isSetAgg_result_imt();
    boolean that_present_agg_result_imt = true && that.isSetAgg_result_imt();
    if (this_present_agg_result_imt || that_present_agg_result_imt) {
      if (!(this_present_agg_result_imt && that_present_agg_result_imt))
        return false;
      if (!this.agg_result_imt.equals(that.agg_result_imt))
        return false;
    }

    boolean this_present_agg_intermediate_imt = true && this.isSetAgg_intermediate_imt();
    boolean that_present_agg_intermediate_imt = true && that.isSetAgg_intermediate_imt();
    if (this_present_agg_intermediate_imt || that_present_agg_intermediate_imt) {
      if (!(this_present_agg_intermediate_imt && that_present_agg_intermediate_imt))
        return false;
      if (!this.agg_intermediate_imt.equals(that.agg_intermediate_imt))
        return false;
    }

    boolean this_present_agg_detail_imt = true && this.isSetAgg_detail_imt();
    boolean that_present_agg_detail_imt = true && that.isSetAgg_detail_imt();
    if (this_present_agg_detail_imt || that_present_agg_detail_imt) {
      if (!(this_present_agg_detail_imt && that_present_agg_detail_imt))
        return false;
      if (!this.agg_detail_imt.equals(that.agg_detail_imt))
        return false;
    }

    boolean this_present_sql_grouping_keys = true && this.isSetSql_grouping_keys();
    boolean that_present_sql_grouping_keys = true && that.isSetSql_grouping_keys();
    if (this_present_sql_grouping_keys || that_present_sql_grouping_keys) {
      if (!(this_present_sql_grouping_keys && that_present_sql_grouping_keys))
        return false;
      if (!this.sql_grouping_keys.equals(that.sql_grouping_keys))
        return false;
    }

    boolean this_present_sql_aggregate_functions = true && this.isSetSql_aggregate_functions();
    boolean that_present_sql_aggregate_functions = true && that.isSetSql_aggregate_functions();
    if (this_present_sql_aggregate_functions || that_present_sql_aggregate_functions) {
      if (!(this_present_sql_aggregate_functions && that_present_sql_aggregate_functions))
        return false;
      if (!this.sql_aggregate_functions.equals(that.sql_aggregate_functions))
        return false;
    }

    boolean this_present_agg_func_set_version = true && this.isSetAgg_func_set_version();
    boolean that_present_agg_func_set_version = true && that.isSetAgg_func_set_version();
    if (this_present_agg_func_set_version || that_present_agg_func_set_version) {
      if (!(this_present_agg_func_set_version && that_present_agg_func_set_version))
        return false;
      if (this.agg_func_set_version != that.agg_func_set_version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGrouping_exprs()) ? 131071 : 524287);
    if (isSetGrouping_exprs())
      hashCode = hashCode * 8191 + grouping_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetAggregate_functions()) ? 131071 : 524287);
    if (isSetAggregate_functions())
      hashCode = hashCode * 8191 + aggregate_functions.hashCode();

    hashCode = hashCode * 8191 + ((isSetAgg_result_imt()) ? 131071 : 524287);
    if (isSetAgg_result_imt())
      hashCode = hashCode * 8191 + agg_result_imt.hashCode();

    hashCode = hashCode * 8191 + ((isSetAgg_intermediate_imt()) ? 131071 : 524287);
    if (isSetAgg_intermediate_imt())
      hashCode = hashCode * 8191 + agg_intermediate_imt.hashCode();

    hashCode = hashCode * 8191 + ((isSetAgg_detail_imt()) ? 131071 : 524287);
    if (isSetAgg_detail_imt())
      hashCode = hashCode * 8191 + agg_detail_imt.hashCode();

    hashCode = hashCode * 8191 + ((isSetSql_grouping_keys()) ? 131071 : 524287);
    if (isSetSql_grouping_keys())
      hashCode = hashCode * 8191 + sql_grouping_keys.hashCode();

    hashCode = hashCode * 8191 + ((isSetSql_aggregate_functions()) ? 131071 : 524287);
    if (isSetSql_aggregate_functions())
      hashCode = hashCode * 8191 + sql_aggregate_functions.hashCode();

    hashCode = hashCode * 8191 + ((isSetAgg_func_set_version()) ? 131071 : 524287);
    if (isSetAgg_func_set_version())
      hashCode = hashCode * 8191 + agg_func_set_version;

    return hashCode;
  }

  @Override
  public int compareTo(TStreamAggregationNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetGrouping_exprs(), other.isSetGrouping_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrouping_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grouping_exprs, other.grouping_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAggregate_functions(), other.isSetAggregate_functions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregate_functions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregate_functions, other.aggregate_functions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAgg_result_imt(), other.isSetAgg_result_imt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgg_result_imt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agg_result_imt, other.agg_result_imt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAgg_intermediate_imt(), other.isSetAgg_intermediate_imt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgg_intermediate_imt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agg_intermediate_imt, other.agg_intermediate_imt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAgg_detail_imt(), other.isSetAgg_detail_imt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgg_detail_imt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agg_detail_imt, other.agg_detail_imt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSql_grouping_keys(), other.isSetSql_grouping_keys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql_grouping_keys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_grouping_keys, other.sql_grouping_keys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSql_aggregate_functions(), other.isSetSql_aggregate_functions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql_aggregate_functions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_aggregate_functions, other.sql_aggregate_functions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAgg_func_set_version(), other.isSetAgg_func_set_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgg_func_set_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agg_func_set_version, other.agg_func_set_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TStreamAggregationNode(");
    boolean first = true;

    if (isSetGrouping_exprs()) {
      sb.append("grouping_exprs:");
      if (this.grouping_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.grouping_exprs);
      }
      first = false;
    }
    if (isSetAggregate_functions()) {
      if (!first) sb.append(", ");
      sb.append("aggregate_functions:");
      if (this.aggregate_functions == null) {
        sb.append("null");
      } else {
        sb.append(this.aggregate_functions);
      }
      first = false;
    }
    if (isSetAgg_result_imt()) {
      if (!first) sb.append(", ");
      sb.append("agg_result_imt:");
      if (this.agg_result_imt == null) {
        sb.append("null");
      } else {
        sb.append(this.agg_result_imt);
      }
      first = false;
    }
    if (isSetAgg_intermediate_imt()) {
      if (!first) sb.append(", ");
      sb.append("agg_intermediate_imt:");
      if (this.agg_intermediate_imt == null) {
        sb.append("null");
      } else {
        sb.append(this.agg_intermediate_imt);
      }
      first = false;
    }
    if (isSetAgg_detail_imt()) {
      if (!first) sb.append(", ");
      sb.append("agg_detail_imt:");
      if (this.agg_detail_imt == null) {
        sb.append("null");
      } else {
        sb.append(this.agg_detail_imt);
      }
      first = false;
    }
    if (isSetSql_grouping_keys()) {
      if (!first) sb.append(", ");
      sb.append("sql_grouping_keys:");
      if (this.sql_grouping_keys == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_grouping_keys);
      }
      first = false;
    }
    if (isSetSql_aggregate_functions()) {
      if (!first) sb.append(", ");
      sb.append("sql_aggregate_functions:");
      if (this.sql_aggregate_functions == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_aggregate_functions);
      }
      first = false;
    }
    if (isSetAgg_func_set_version()) {
      if (!first) sb.append(", ");
      sb.append("agg_func_set_version:");
      sb.append(this.agg_func_set_version);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (agg_result_imt != null) {
      agg_result_imt.validate();
    }
    if (agg_intermediate_imt != null) {
      agg_intermediate_imt.validate();
    }
    if (agg_detail_imt != null) {
      agg_detail_imt.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStreamAggregationNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamAggregationNodeStandardScheme getScheme() {
      return new TStreamAggregationNodeStandardScheme();
    }
  }

  private static class TStreamAggregationNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TStreamAggregationNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TStreamAggregationNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUPING_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list978 = iprot.readListBegin();
                struct.grouping_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list978.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem979;
                for (int _i980 = 0; _i980 < _list978.size; ++_i980)
                {
                  _elem979 = new com.starrocks.thrift.TExpr();
                  _elem979.read(iprot);
                  struct.grouping_exprs.add(_elem979);
                }
                iprot.readListEnd();
              }
              struct.setGrouping_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGGREGATE_FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list981 = iprot.readListBegin();
                struct.aggregate_functions = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list981.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem982;
                for (int _i983 = 0; _i983 < _list981.size; ++_i983)
                {
                  _elem982 = new com.starrocks.thrift.TExpr();
                  _elem982.read(iprot);
                  struct.aggregate_functions.add(_elem982);
                }
                iprot.readListEnd();
              }
              struct.setAggregate_functionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AGG_RESULT_IMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.agg_result_imt = new com.starrocks.thrift.TIMTDescriptor();
              struct.agg_result_imt.read(iprot);
              struct.setAgg_result_imtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AGG_INTERMEDIATE_IMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.agg_intermediate_imt = new com.starrocks.thrift.TIMTDescriptor();
              struct.agg_intermediate_imt.read(iprot);
              struct.setAgg_intermediate_imtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AGG_DETAIL_IMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.agg_detail_imt = new com.starrocks.thrift.TIMTDescriptor();
              struct.agg_detail_imt.read(iprot);
              struct.setAgg_detail_imtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SQL_GROUPING_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql_grouping_keys = iprot.readString();
              struct.setSql_grouping_keysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SQL_AGGREGATE_FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql_aggregate_functions = iprot.readString();
              struct.setSql_aggregate_functionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // AGG_FUNC_SET_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.agg_func_set_version = iprot.readI32();
              struct.setAgg_func_set_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TStreamAggregationNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.grouping_exprs != null) {
        if (struct.isSetGrouping_exprs()) {
          oprot.writeFieldBegin(GROUPING_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.grouping_exprs.size()));
            for (com.starrocks.thrift.TExpr _iter984 : struct.grouping_exprs)
            {
              _iter984.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.aggregate_functions != null) {
        if (struct.isSetAggregate_functions()) {
          oprot.writeFieldBegin(AGGREGATE_FUNCTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.aggregate_functions.size()));
            for (com.starrocks.thrift.TExpr _iter985 : struct.aggregate_functions)
            {
              _iter985.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.agg_result_imt != null) {
        if (struct.isSetAgg_result_imt()) {
          oprot.writeFieldBegin(AGG_RESULT_IMT_FIELD_DESC);
          struct.agg_result_imt.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.agg_intermediate_imt != null) {
        if (struct.isSetAgg_intermediate_imt()) {
          oprot.writeFieldBegin(AGG_INTERMEDIATE_IMT_FIELD_DESC);
          struct.agg_intermediate_imt.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.agg_detail_imt != null) {
        if (struct.isSetAgg_detail_imt()) {
          oprot.writeFieldBegin(AGG_DETAIL_IMT_FIELD_DESC);
          struct.agg_detail_imt.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sql_grouping_keys != null) {
        if (struct.isSetSql_grouping_keys()) {
          oprot.writeFieldBegin(SQL_GROUPING_KEYS_FIELD_DESC);
          oprot.writeString(struct.sql_grouping_keys);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sql_aggregate_functions != null) {
        if (struct.isSetSql_aggregate_functions()) {
          oprot.writeFieldBegin(SQL_AGGREGATE_FUNCTIONS_FIELD_DESC);
          oprot.writeString(struct.sql_aggregate_functions);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAgg_func_set_version()) {
        oprot.writeFieldBegin(AGG_FUNC_SET_VERSION_FIELD_DESC);
        oprot.writeI32(struct.agg_func_set_version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStreamAggregationNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamAggregationNodeTupleScheme getScheme() {
      return new TStreamAggregationNodeTupleScheme();
    }
  }

  private static class TStreamAggregationNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TStreamAggregationNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStreamAggregationNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGrouping_exprs()) {
        optionals.set(0);
      }
      if (struct.isSetAggregate_functions()) {
        optionals.set(1);
      }
      if (struct.isSetAgg_result_imt()) {
        optionals.set(2);
      }
      if (struct.isSetAgg_intermediate_imt()) {
        optionals.set(3);
      }
      if (struct.isSetAgg_detail_imt()) {
        optionals.set(4);
      }
      if (struct.isSetSql_grouping_keys()) {
        optionals.set(5);
      }
      if (struct.isSetSql_aggregate_functions()) {
        optionals.set(6);
      }
      if (struct.isSetAgg_func_set_version()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetGrouping_exprs()) {
        {
          oprot.writeI32(struct.grouping_exprs.size());
          for (com.starrocks.thrift.TExpr _iter986 : struct.grouping_exprs)
          {
            _iter986.write(oprot);
          }
        }
      }
      if (struct.isSetAggregate_functions()) {
        {
          oprot.writeI32(struct.aggregate_functions.size());
          for (com.starrocks.thrift.TExpr _iter987 : struct.aggregate_functions)
          {
            _iter987.write(oprot);
          }
        }
      }
      if (struct.isSetAgg_result_imt()) {
        struct.agg_result_imt.write(oprot);
      }
      if (struct.isSetAgg_intermediate_imt()) {
        struct.agg_intermediate_imt.write(oprot);
      }
      if (struct.isSetAgg_detail_imt()) {
        struct.agg_detail_imt.write(oprot);
      }
      if (struct.isSetSql_grouping_keys()) {
        oprot.writeString(struct.sql_grouping_keys);
      }
      if (struct.isSetSql_aggregate_functions()) {
        oprot.writeString(struct.sql_aggregate_functions);
      }
      if (struct.isSetAgg_func_set_version()) {
        oprot.writeI32(struct.agg_func_set_version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStreamAggregationNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list988 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.grouping_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list988.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem989;
          for (int _i990 = 0; _i990 < _list988.size; ++_i990)
          {
            _elem989 = new com.starrocks.thrift.TExpr();
            _elem989.read(iprot);
            struct.grouping_exprs.add(_elem989);
          }
        }
        struct.setGrouping_exprsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list991 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.aggregate_functions = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list991.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem992;
          for (int _i993 = 0; _i993 < _list991.size; ++_i993)
          {
            _elem992 = new com.starrocks.thrift.TExpr();
            _elem992.read(iprot);
            struct.aggregate_functions.add(_elem992);
          }
        }
        struct.setAggregate_functionsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.agg_result_imt = new com.starrocks.thrift.TIMTDescriptor();
        struct.agg_result_imt.read(iprot);
        struct.setAgg_result_imtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.agg_intermediate_imt = new com.starrocks.thrift.TIMTDescriptor();
        struct.agg_intermediate_imt.read(iprot);
        struct.setAgg_intermediate_imtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.agg_detail_imt = new com.starrocks.thrift.TIMTDescriptor();
        struct.agg_detail_imt.read(iprot);
        struct.setAgg_detail_imtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sql_grouping_keys = iprot.readString();
        struct.setSql_grouping_keysIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sql_aggregate_functions = iprot.readString();
        struct.setSql_aggregate_functionsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.agg_func_set_version = iprot.readI32();
        struct.setAgg_func_set_versionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

