/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TParquetOptions implements org.apache.thrift.TBase<TParquetOptions, TParquetOptions._Fields>, java.io.Serializable, Cloneable, Comparable<TParquetOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TParquetOptions");

  private static final org.apache.thrift.protocol.TField PARQUET_MAX_GROUP_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("parquet_max_group_bytes", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COMPRESSION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("compression_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USE_DICT_FIELD_DESC = new org.apache.thrift.protocol.TField("use_dict", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TParquetOptionsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TParquetOptionsTupleSchemeFactory();

  public long parquet_max_group_bytes; // optional
  /**
   * 
   * @see TCompressionType
   */
  public @org.apache.thrift.annotation.Nullable TCompressionType compression_type; // optional
  public boolean use_dict; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARQUET_MAX_GROUP_BYTES((short)1, "parquet_max_group_bytes"),
    /**
     * 
     * @see TCompressionType
     */
    COMPRESSION_TYPE((short)2, "compression_type"),
    USE_DICT((short)3, "use_dict");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARQUET_MAX_GROUP_BYTES
          return PARQUET_MAX_GROUP_BYTES;
        case 2: // COMPRESSION_TYPE
          return COMPRESSION_TYPE;
        case 3: // USE_DICT
          return USE_DICT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARQUET_MAX_GROUP_BYTES_ISSET_ID = 0;
  private static final int __USE_DICT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARQUET_MAX_GROUP_BYTES,_Fields.COMPRESSION_TYPE,_Fields.USE_DICT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARQUET_MAX_GROUP_BYTES, new org.apache.thrift.meta_data.FieldMetaData("parquet_max_group_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPRESSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("compression_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCompressionType.class)));
    tmpMap.put(_Fields.USE_DICT, new org.apache.thrift.meta_data.FieldMetaData("use_dict", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TParquetOptions.class, metaDataMap);
  }

  public TParquetOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TParquetOptions(TParquetOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.parquet_max_group_bytes = other.parquet_max_group_bytes;
    if (other.isSetCompression_type()) {
      this.compression_type = other.compression_type;
    }
    this.use_dict = other.use_dict;
  }

  @Override
  public TParquetOptions deepCopy() {
    return new TParquetOptions(this);
  }

  @Override
  public void clear() {
    setParquet_max_group_bytesIsSet(false);
    this.parquet_max_group_bytes = 0;
    this.compression_type = null;
    setUse_dictIsSet(false);
    this.use_dict = false;
  }

  public long getParquet_max_group_bytes() {
    return this.parquet_max_group_bytes;
  }

  public TParquetOptions setParquet_max_group_bytes(long parquet_max_group_bytes) {
    this.parquet_max_group_bytes = parquet_max_group_bytes;
    setParquet_max_group_bytesIsSet(true);
    return this;
  }

  public void unsetParquet_max_group_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARQUET_MAX_GROUP_BYTES_ISSET_ID);
  }

  /** Returns true if field parquet_max_group_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetParquet_max_group_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARQUET_MAX_GROUP_BYTES_ISSET_ID);
  }

  public void setParquet_max_group_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARQUET_MAX_GROUP_BYTES_ISSET_ID, value);
  }

  /**
   * 
   * @see TCompressionType
   */
  @org.apache.thrift.annotation.Nullable
  public TCompressionType getCompression_type() {
    return this.compression_type;
  }

  /**
   * 
   * @see TCompressionType
   */
  public TParquetOptions setCompression_type(@org.apache.thrift.annotation.Nullable TCompressionType compression_type) {
    this.compression_type = compression_type;
    return this;
  }

  public void unsetCompression_type() {
    this.compression_type = null;
  }

  /** Returns true if field compression_type is set (has been assigned a value) and false otherwise */
  public boolean isSetCompression_type() {
    return this.compression_type != null;
  }

  public void setCompression_typeIsSet(boolean value) {
    if (!value) {
      this.compression_type = null;
    }
  }

  public boolean isUse_dict() {
    return this.use_dict;
  }

  public TParquetOptions setUse_dict(boolean use_dict) {
    this.use_dict = use_dict;
    setUse_dictIsSet(true);
    return this;
  }

  public void unsetUse_dict() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_DICT_ISSET_ID);
  }

  /** Returns true if field use_dict is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_dict() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_DICT_ISSET_ID);
  }

  public void setUse_dictIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_DICT_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case PARQUET_MAX_GROUP_BYTES:
      if (value == null) {
        unsetParquet_max_group_bytes();
      } else {
        setParquet_max_group_bytes((Long)value);
      }
      break;

    case COMPRESSION_TYPE:
      if (value == null) {
        unsetCompression_type();
      } else {
        setCompression_type((TCompressionType)value);
      }
      break;

    case USE_DICT:
      if (value == null) {
        unsetUse_dict();
      } else {
        setUse_dict((Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARQUET_MAX_GROUP_BYTES:
      return getParquet_max_group_bytes();

    case COMPRESSION_TYPE:
      return getCompression_type();

    case USE_DICT:
      return isUse_dict();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARQUET_MAX_GROUP_BYTES:
      return isSetParquet_max_group_bytes();
    case COMPRESSION_TYPE:
      return isSetCompression_type();
    case USE_DICT:
      return isSetUse_dict();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof TParquetOptions)
      return this.equals((TParquetOptions)that);
    return false;
  }

  public boolean equals(TParquetOptions that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_parquet_max_group_bytes = true && this.isSetParquet_max_group_bytes();
    boolean that_present_parquet_max_group_bytes = true && that.isSetParquet_max_group_bytes();
    if (this_present_parquet_max_group_bytes || that_present_parquet_max_group_bytes) {
      if (!(this_present_parquet_max_group_bytes && that_present_parquet_max_group_bytes))
        return false;
      if (this.parquet_max_group_bytes != that.parquet_max_group_bytes)
        return false;
    }

    boolean this_present_compression_type = true && this.isSetCompression_type();
    boolean that_present_compression_type = true && that.isSetCompression_type();
    if (this_present_compression_type || that_present_compression_type) {
      if (!(this_present_compression_type && that_present_compression_type))
        return false;
      if (!this.compression_type.equals(that.compression_type))
        return false;
    }

    boolean this_present_use_dict = true && this.isSetUse_dict();
    boolean that_present_use_dict = true && that.isSetUse_dict();
    if (this_present_use_dict || that_present_use_dict) {
      if (!(this_present_use_dict && that_present_use_dict))
        return false;
      if (this.use_dict != that.use_dict)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetParquet_max_group_bytes()) ? 131071 : 524287);
    if (isSetParquet_max_group_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(parquet_max_group_bytes);

    hashCode = hashCode * 8191 + ((isSetCompression_type()) ? 131071 : 524287);
    if (isSetCompression_type())
      hashCode = hashCode * 8191 + compression_type.getValue();

    hashCode = hashCode * 8191 + ((isSetUse_dict()) ? 131071 : 524287);
    if (isSetUse_dict())
      hashCode = hashCode * 8191 + ((use_dict) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TParquetOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetParquet_max_group_bytes(), other.isSetParquet_max_group_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParquet_max_group_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parquet_max_group_bytes, other.parquet_max_group_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetCompression_type(), other.isSetCompression_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompression_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compression_type, other.compression_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetUse_dict(), other.isSetUse_dict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_dict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_dict, other.use_dict);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TParquetOptions(");
    boolean first = true;

    if (isSetParquet_max_group_bytes()) {
      sb.append("parquet_max_group_bytes:");
      sb.append(this.parquet_max_group_bytes);
      first = false;
    }
    if (isSetCompression_type()) {
      if (!first) sb.append(", ");
      sb.append("compression_type:");
      if (this.compression_type == null) {
        sb.append("null");
      } else {
        sb.append(this.compression_type);
      }
      first = false;
    }
    if (isSetUse_dict()) {
      if (!first) sb.append(", ");
      sb.append("use_dict:");
      sb.append(this.use_dict);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TParquetOptionsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TParquetOptionsStandardScheme getScheme() {
      return new TParquetOptionsStandardScheme();
    }
  }

  private static class TParquetOptionsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TParquetOptions> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TParquetOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARQUET_MAX_GROUP_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parquet_max_group_bytes = iprot.readI64();
              struct.setParquet_max_group_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPRESSION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compression_type = TCompressionType.findByValue(iprot.readI32());
              struct.setCompression_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USE_DICT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_dict = iprot.readBool();
              struct.setUse_dictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TParquetOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetParquet_max_group_bytes()) {
        oprot.writeFieldBegin(PARQUET_MAX_GROUP_BYTES_FIELD_DESC);
        oprot.writeI64(struct.parquet_max_group_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.compression_type != null) {
        if (struct.isSetCompression_type()) {
          oprot.writeFieldBegin(COMPRESSION_TYPE_FIELD_DESC);
          oprot.writeI32(struct.compression_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUse_dict()) {
        oprot.writeFieldBegin(USE_DICT_FIELD_DESC);
        oprot.writeBool(struct.use_dict);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TParquetOptionsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TParquetOptionsTupleScheme getScheme() {
      return new TParquetOptionsTupleScheme();
    }
  }

  private static class TParquetOptionsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TParquetOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TParquetOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetParquet_max_group_bytes()) {
        optionals.set(0);
      }
      if (struct.isSetCompression_type()) {
        optionals.set(1);
      }
      if (struct.isSetUse_dict()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetParquet_max_group_bytes()) {
        oprot.writeI64(struct.parquet_max_group_bytes);
      }
      if (struct.isSetCompression_type()) {
        oprot.writeI32(struct.compression_type.getValue());
      }
      if (struct.isSetUse_dict()) {
        oprot.writeBool(struct.use_dict);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TParquetOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.parquet_max_group_bytes = iprot.readI64();
        struct.setParquet_max_group_bytesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.compression_type = TCompressionType.findByValue(iprot.readI32());
        struct.setCompression_typeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.use_dict = iprot.readBool();
        struct.setUse_dictIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

