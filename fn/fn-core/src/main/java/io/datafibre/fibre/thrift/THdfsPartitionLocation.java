/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class THdfsPartitionLocation implements org.apache.thrift.TBase<THdfsPartitionLocation, THdfsPartitionLocation._Fields>, java.io.Serializable, Cloneable, Comparable<THdfsPartitionLocation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THdfsPartitionLocation");

  private static final org.apache.thrift.protocol.TField PREFIX_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("prefix_index", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SUFFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("suffix", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new THdfsPartitionLocationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new THdfsPartitionLocationTupleSchemeFactory();

  public int prefix_index; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String suffix; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PREFIX_INDEX((short)1, "prefix_index"),
    SUFFIX((short)2, "suffix");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PREFIX_INDEX
          return PREFIX_INDEX;
        case 2: // SUFFIX
          return SUFFIX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PREFIX_INDEX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PREFIX_INDEX,_Fields.SUFFIX};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PREFIX_INDEX, new org.apache.thrift.meta_data.FieldMetaData("prefix_index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUFFIX, new org.apache.thrift.meta_data.FieldMetaData("suffix", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THdfsPartitionLocation.class, metaDataMap);
  }

  public THdfsPartitionLocation() {
    this.prefix_index = -1;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THdfsPartitionLocation(THdfsPartitionLocation other) {
    __isset_bitfield = other.__isset_bitfield;
    this.prefix_index = other.prefix_index;
    if (other.isSetSuffix()) {
      this.suffix = other.suffix;
    }
  }

  @Override
  public THdfsPartitionLocation deepCopy() {
    return new THdfsPartitionLocation(this);
  }

  @Override
  public void clear() {
    this.prefix_index = -1;

    this.suffix = null;
  }

  public int getPrefix_index() {
    return this.prefix_index;
  }

  public THdfsPartitionLocation setPrefix_index(int prefix_index) {
    this.prefix_index = prefix_index;
    setPrefix_indexIsSet(true);
    return this;
  }

  public void unsetPrefix_index() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PREFIX_INDEX_ISSET_ID);
  }

  /** Returns true if field prefix_index is set (has been assigned a value) and false otherwise */
  public boolean isSetPrefix_index() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PREFIX_INDEX_ISSET_ID);
  }

  public void setPrefix_indexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PREFIX_INDEX_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSuffix() {
    return this.suffix;
  }

  public THdfsPartitionLocation setSuffix(@org.apache.thrift.annotation.Nullable java.lang.String suffix) {
    this.suffix = suffix;
    return this;
  }

  public void unsetSuffix() {
    this.suffix = null;
  }

  /** Returns true if field suffix is set (has been assigned a value) and false otherwise */
  public boolean isSetSuffix() {
    return this.suffix != null;
  }

  public void setSuffixIsSet(boolean value) {
    if (!value) {
      this.suffix = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PREFIX_INDEX:
      if (value == null) {
        unsetPrefix_index();
      } else {
        setPrefix_index((java.lang.Integer)value);
      }
      break;

    case SUFFIX:
      if (value == null) {
        unsetSuffix();
      } else {
        setSuffix((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PREFIX_INDEX:
      return getPrefix_index();

    case SUFFIX:
      return getSuffix();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PREFIX_INDEX:
      return isSetPrefix_index();
    case SUFFIX:
      return isSetSuffix();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof THdfsPartitionLocation)
      return this.equals((THdfsPartitionLocation)that);
    return false;
  }

  public boolean equals(THdfsPartitionLocation that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_prefix_index = true && this.isSetPrefix_index();
    boolean that_present_prefix_index = true && that.isSetPrefix_index();
    if (this_present_prefix_index || that_present_prefix_index) {
      if (!(this_present_prefix_index && that_present_prefix_index))
        return false;
      if (this.prefix_index != that.prefix_index)
        return false;
    }

    boolean this_present_suffix = true && this.isSetSuffix();
    boolean that_present_suffix = true && that.isSetSuffix();
    if (this_present_suffix || that_present_suffix) {
      if (!(this_present_suffix && that_present_suffix))
        return false;
      if (!this.suffix.equals(that.suffix))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPrefix_index()) ? 131071 : 524287);
    if (isSetPrefix_index())
      hashCode = hashCode * 8191 + prefix_index;

    hashCode = hashCode * 8191 + ((isSetSuffix()) ? 131071 : 524287);
    if (isSetSuffix())
      hashCode = hashCode * 8191 + suffix.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(THdfsPartitionLocation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPrefix_index(), other.isSetPrefix_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrefix_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefix_index, other.prefix_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSuffix(), other.isSetSuffix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuffix()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suffix, other.suffix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("THdfsPartitionLocation(");
    boolean first = true;

    if (isSetPrefix_index()) {
      sb.append("prefix_index:");
      sb.append(this.prefix_index);
      first = false;
    }
    if (isSetSuffix()) {
      if (!first) sb.append(", ");
      sb.append("suffix:");
      if (this.suffix == null) {
        sb.append("null");
      } else {
        sb.append(this.suffix);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THdfsPartitionLocationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THdfsPartitionLocationStandardScheme getScheme() {
      return new THdfsPartitionLocationStandardScheme();
    }
  }

  private static class THdfsPartitionLocationStandardScheme extends org.apache.thrift.scheme.StandardScheme<THdfsPartitionLocation> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, THdfsPartitionLocation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PREFIX_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.prefix_index = iprot.readI32();
              struct.setPrefix_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUFFIX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.suffix = iprot.readString();
              struct.setSuffixIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, THdfsPartitionLocation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPrefix_index()) {
        oprot.writeFieldBegin(PREFIX_INDEX_FIELD_DESC);
        oprot.writeI32(struct.prefix_index);
        oprot.writeFieldEnd();
      }
      if (struct.suffix != null) {
        if (struct.isSetSuffix()) {
          oprot.writeFieldBegin(SUFFIX_FIELD_DESC);
          oprot.writeString(struct.suffix);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THdfsPartitionLocationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THdfsPartitionLocationTupleScheme getScheme() {
      return new THdfsPartitionLocationTupleScheme();
    }
  }

  private static class THdfsPartitionLocationTupleScheme extends org.apache.thrift.scheme.TupleScheme<THdfsPartitionLocation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THdfsPartitionLocation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPrefix_index()) {
        optionals.set(0);
      }
      if (struct.isSetSuffix()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPrefix_index()) {
        oprot.writeI32(struct.prefix_index);
      }
      if (struct.isSetSuffix()) {
        oprot.writeString(struct.suffix);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THdfsPartitionLocation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.prefix_index = iprot.readI32();
        struct.setPrefix_indexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.suffix = iprot.readString();
        struct.setSuffixIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

