/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TAbortRemoteTxnRequest implements org.apache.thrift.TBase<TAbortRemoteTxnRequest, TAbortRemoteTxnRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TAbortRemoteTxnRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAbortRemoteTxnRequest");

  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("db_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("error_msg", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AUTH_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("auth_info", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField COMMIT_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("commit_infos", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField COMMIT_ATTACHMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("commit_attachment", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField FAIL_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("fail_infos", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAbortRemoteTxnRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAbortRemoteTxnRequestTupleSchemeFactory();

  public long txn_id; // optional
  public long db_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String error_msg; // optional
  public @org.apache.thrift.annotation.Nullable TAuthenticateParams auth_info; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TTabletCommitInfo> commit_infos; // optional
  public @org.apache.thrift.annotation.Nullable TTxnCommitAttachment commit_attachment; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TTabletFailInfo> fail_infos; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TXN_ID((short)1, "txn_id"),
    DB_ID((short)2, "db_id"),
    ERROR_MSG((short)3, "error_msg"),
    AUTH_INFO((short)4, "auth_info"),
    COMMIT_INFOS((short)5, "commit_infos"),
    COMMIT_ATTACHMENT((short)6, "commit_attachment"),
    FAIL_INFOS((short)7, "fail_infos");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TXN_ID
          return TXN_ID;
        case 2: // DB_ID
          return DB_ID;
        case 3: // ERROR_MSG
          return ERROR_MSG;
        case 4: // AUTH_INFO
          return AUTH_INFO;
        case 5: // COMMIT_INFOS
          return COMMIT_INFOS;
        case 6: // COMMIT_ATTACHMENT
          return COMMIT_ATTACHMENT;
        case 7: // FAIL_INFOS
          return FAIL_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TXN_ID_ISSET_ID = 0;
  private static final int __DB_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TXN_ID,_Fields.DB_ID,_Fields.ERROR_MSG,_Fields.AUTH_INFO,_Fields.COMMIT_INFOS,_Fields.COMMIT_ATTACHMENT,_Fields.FAIL_INFOS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txn_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DB_ID, new org.apache.thrift.meta_data.FieldMetaData("db_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("error_msg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTH_INFO, new org.apache.thrift.meta_data.FieldMetaData("auth_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAuthenticateParams.class)));
    tmpMap.put(_Fields.COMMIT_INFOS, new org.apache.thrift.meta_data.FieldMetaData("commit_infos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TTabletCommitInfo.class))));
    tmpMap.put(_Fields.COMMIT_ATTACHMENT, new org.apache.thrift.meta_data.FieldMetaData("commit_attachment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTxnCommitAttachment.class)));
    tmpMap.put(_Fields.FAIL_INFOS, new org.apache.thrift.meta_data.FieldMetaData("fail_infos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TTabletFailInfo.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAbortRemoteTxnRequest.class, metaDataMap);
  }

  public TAbortRemoteTxnRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAbortRemoteTxnRequest(TAbortRemoteTxnRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.txn_id = other.txn_id;
    this.db_id = other.db_id;
    if (other.isSetError_msg()) {
      this.error_msg = other.error_msg;
    }
    if (other.isSetAuth_info()) {
      this.auth_info = new TAuthenticateParams(other.auth_info);
    }
    if (other.isSetCommit_infos()) {
      java.util.List<com.starrocks.thrift.TTabletCommitInfo> __this__commit_infos = new java.util.ArrayList<com.starrocks.thrift.TTabletCommitInfo>(other.commit_infos.size());
      for (com.starrocks.thrift.TTabletCommitInfo other_element : other.commit_infos) {
        __this__commit_infos.add(new com.starrocks.thrift.TTabletCommitInfo(other_element));
      }
      this.commit_infos = __this__commit_infos;
    }
    if (other.isSetCommit_attachment()) {
      this.commit_attachment = new TTxnCommitAttachment(other.commit_attachment);
    }
    if (other.isSetFail_infos()) {
      java.util.List<com.starrocks.thrift.TTabletFailInfo> __this__fail_infos = new java.util.ArrayList<com.starrocks.thrift.TTabletFailInfo>(other.fail_infos.size());
      for (com.starrocks.thrift.TTabletFailInfo other_element : other.fail_infos) {
        __this__fail_infos.add(new com.starrocks.thrift.TTabletFailInfo(other_element));
      }
      this.fail_infos = __this__fail_infos;
    }
  }

  @Override
  public TAbortRemoteTxnRequest deepCopy() {
    return new TAbortRemoteTxnRequest(this);
  }

  @Override
  public void clear() {
    setTxn_idIsSet(false);
    this.txn_id = 0;
    setDb_idIsSet(false);
    this.db_id = 0;
    this.error_msg = null;
    this.auth_info = null;
    this.commit_infos = null;
    this.commit_attachment = null;
    this.fail_infos = null;
  }

  public long getTxn_id() {
    return this.txn_id;
  }

  public TAbortRemoteTxnRequest setTxn_id(long txn_id) {
    this.txn_id = txn_id;
    setTxn_idIsSet(true);
    return this;
  }

  public void unsetTxn_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  /** Returns true if field txn_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  public void setTxn_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXN_ID_ISSET_ID, value);
  }

  public long getDb_id() {
    return this.db_id;
  }

  public TAbortRemoteTxnRequest setDb_id(long db_id) {
    this.db_id = db_id;
    setDb_idIsSet(true);
    return this;
  }

  public void unsetDb_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  /** Returns true if field db_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  public void setDb_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DB_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getError_msg() {
    return this.error_msg;
  }

  public TAbortRemoteTxnRequest setError_msg(@org.apache.thrift.annotation.Nullable java.lang.String error_msg) {
    this.error_msg = error_msg;
    return this;
  }

  public void unsetError_msg() {
    this.error_msg = null;
  }

  /** Returns true if field error_msg is set (has been assigned a value) and false otherwise */
  public boolean isSetError_msg() {
    return this.error_msg != null;
  }

  public void setError_msgIsSet(boolean value) {
    if (!value) {
      this.error_msg = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TAuthenticateParams getAuth_info() {
    return this.auth_info;
  }

  public TAbortRemoteTxnRequest setAuth_info(@org.apache.thrift.annotation.Nullable TAuthenticateParams auth_info) {
    this.auth_info = auth_info;
    return this;
  }

  public void unsetAuth_info() {
    this.auth_info = null;
  }

  /** Returns true if field auth_info is set (has been assigned a value) and false otherwise */
  public boolean isSetAuth_info() {
    return this.auth_info != null;
  }

  public void setAuth_infoIsSet(boolean value) {
    if (!value) {
      this.auth_info = null;
    }
  }

  public int getCommit_infosSize() {
    return (this.commit_infos == null) ? 0 : this.commit_infos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TTabletCommitInfo> getCommit_infosIterator() {
    return (this.commit_infos == null) ? null : this.commit_infos.iterator();
  }

  public void addToCommit_infos(com.starrocks.thrift.TTabletCommitInfo elem) {
    if (this.commit_infos == null) {
      this.commit_infos = new java.util.ArrayList<com.starrocks.thrift.TTabletCommitInfo>();
    }
    this.commit_infos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TTabletCommitInfo> getCommit_infos() {
    return this.commit_infos;
  }

  public TAbortRemoteTxnRequest setCommit_infos(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TTabletCommitInfo> commit_infos) {
    this.commit_infos = commit_infos;
    return this;
  }

  public void unsetCommit_infos() {
    this.commit_infos = null;
  }

  /** Returns true if field commit_infos is set (has been assigned a value) and false otherwise */
  public boolean isSetCommit_infos() {
    return this.commit_infos != null;
  }

  public void setCommit_infosIsSet(boolean value) {
    if (!value) {
      this.commit_infos = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TTxnCommitAttachment getCommit_attachment() {
    return this.commit_attachment;
  }

  public TAbortRemoteTxnRequest setCommit_attachment(@org.apache.thrift.annotation.Nullable TTxnCommitAttachment commit_attachment) {
    this.commit_attachment = commit_attachment;
    return this;
  }

  public void unsetCommit_attachment() {
    this.commit_attachment = null;
  }

  /** Returns true if field commit_attachment is set (has been assigned a value) and false otherwise */
  public boolean isSetCommit_attachment() {
    return this.commit_attachment != null;
  }

  public void setCommit_attachmentIsSet(boolean value) {
    if (!value) {
      this.commit_attachment = null;
    }
  }

  public int getFail_infosSize() {
    return (this.fail_infos == null) ? 0 : this.fail_infos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TTabletFailInfo> getFail_infosIterator() {
    return (this.fail_infos == null) ? null : this.fail_infos.iterator();
  }

  public void addToFail_infos(com.starrocks.thrift.TTabletFailInfo elem) {
    if (this.fail_infos == null) {
      this.fail_infos = new java.util.ArrayList<com.starrocks.thrift.TTabletFailInfo>();
    }
    this.fail_infos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TTabletFailInfo> getFail_infos() {
    return this.fail_infos;
  }

  public TAbortRemoteTxnRequest setFail_infos(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TTabletFailInfo> fail_infos) {
    this.fail_infos = fail_infos;
    return this;
  }

  public void unsetFail_infos() {
    this.fail_infos = null;
  }

  /** Returns true if field fail_infos is set (has been assigned a value) and false otherwise */
  public boolean isSetFail_infos() {
    return this.fail_infos != null;
  }

  public void setFail_infosIsSet(boolean value) {
    if (!value) {
      this.fail_infos = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TXN_ID:
      if (value == null) {
        unsetTxn_id();
      } else {
        setTxn_id((java.lang.Long)value);
      }
      break;

    case DB_ID:
      if (value == null) {
        unsetDb_id();
      } else {
        setDb_id((java.lang.Long)value);
      }
      break;

    case ERROR_MSG:
      if (value == null) {
        unsetError_msg();
      } else {
        setError_msg((java.lang.String)value);
      }
      break;

    case AUTH_INFO:
      if (value == null) {
        unsetAuth_info();
      } else {
        setAuth_info((TAuthenticateParams)value);
      }
      break;

    case COMMIT_INFOS:
      if (value == null) {
        unsetCommit_infos();
      } else {
        setCommit_infos((java.util.List<com.starrocks.thrift.TTabletCommitInfo>)value);
      }
      break;

    case COMMIT_ATTACHMENT:
      if (value == null) {
        unsetCommit_attachment();
      } else {
        setCommit_attachment((TTxnCommitAttachment)value);
      }
      break;

    case FAIL_INFOS:
      if (value == null) {
        unsetFail_infos();
      } else {
        setFail_infos((java.util.List<com.starrocks.thrift.TTabletFailInfo>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TXN_ID:
      return getTxn_id();

    case DB_ID:
      return getDb_id();

    case ERROR_MSG:
      return getError_msg();

    case AUTH_INFO:
      return getAuth_info();

    case COMMIT_INFOS:
      return getCommit_infos();

    case COMMIT_ATTACHMENT:
      return getCommit_attachment();

    case FAIL_INFOS:
      return getFail_infos();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TXN_ID:
      return isSetTxn_id();
    case DB_ID:
      return isSetDb_id();
    case ERROR_MSG:
      return isSetError_msg();
    case AUTH_INFO:
      return isSetAuth_info();
    case COMMIT_INFOS:
      return isSetCommit_infos();
    case COMMIT_ATTACHMENT:
      return isSetCommit_attachment();
    case FAIL_INFOS:
      return isSetFail_infos();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TAbortRemoteTxnRequest)
      return this.equals((TAbortRemoteTxnRequest)that);
    return false;
  }

  public boolean equals(TAbortRemoteTxnRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_txn_id = true && this.isSetTxn_id();
    boolean that_present_txn_id = true && that.isSetTxn_id();
    if (this_present_txn_id || that_present_txn_id) {
      if (!(this_present_txn_id && that_present_txn_id))
        return false;
      if (this.txn_id != that.txn_id)
        return false;
    }

    boolean this_present_db_id = true && this.isSetDb_id();
    boolean that_present_db_id = true && that.isSetDb_id();
    if (this_present_db_id || that_present_db_id) {
      if (!(this_present_db_id && that_present_db_id))
        return false;
      if (this.db_id != that.db_id)
        return false;
    }

    boolean this_present_error_msg = true && this.isSetError_msg();
    boolean that_present_error_msg = true && that.isSetError_msg();
    if (this_present_error_msg || that_present_error_msg) {
      if (!(this_present_error_msg && that_present_error_msg))
        return false;
      if (!this.error_msg.equals(that.error_msg))
        return false;
    }

    boolean this_present_auth_info = true && this.isSetAuth_info();
    boolean that_present_auth_info = true && that.isSetAuth_info();
    if (this_present_auth_info || that_present_auth_info) {
      if (!(this_present_auth_info && that_present_auth_info))
        return false;
      if (!this.auth_info.equals(that.auth_info))
        return false;
    }

    boolean this_present_commit_infos = true && this.isSetCommit_infos();
    boolean that_present_commit_infos = true && that.isSetCommit_infos();
    if (this_present_commit_infos || that_present_commit_infos) {
      if (!(this_present_commit_infos && that_present_commit_infos))
        return false;
      if (!this.commit_infos.equals(that.commit_infos))
        return false;
    }

    boolean this_present_commit_attachment = true && this.isSetCommit_attachment();
    boolean that_present_commit_attachment = true && that.isSetCommit_attachment();
    if (this_present_commit_attachment || that_present_commit_attachment) {
      if (!(this_present_commit_attachment && that_present_commit_attachment))
        return false;
      if (!this.commit_attachment.equals(that.commit_attachment))
        return false;
    }

    boolean this_present_fail_infos = true && this.isSetFail_infos();
    boolean that_present_fail_infos = true && that.isSetFail_infos();
    if (this_present_fail_infos || that_present_fail_infos) {
      if (!(this_present_fail_infos && that_present_fail_infos))
        return false;
      if (!this.fail_infos.equals(that.fail_infos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTxn_id()) ? 131071 : 524287);
    if (isSetTxn_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txn_id);

    hashCode = hashCode * 8191 + ((isSetDb_id()) ? 131071 : 524287);
    if (isSetDb_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(db_id);

    hashCode = hashCode * 8191 + ((isSetError_msg()) ? 131071 : 524287);
    if (isSetError_msg())
      hashCode = hashCode * 8191 + error_msg.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuth_info()) ? 131071 : 524287);
    if (isSetAuth_info())
      hashCode = hashCode * 8191 + auth_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommit_infos()) ? 131071 : 524287);
    if (isSetCommit_infos())
      hashCode = hashCode * 8191 + commit_infos.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommit_attachment()) ? 131071 : 524287);
    if (isSetCommit_attachment())
      hashCode = hashCode * 8191 + commit_attachment.hashCode();

    hashCode = hashCode * 8191 + ((isSetFail_infos()) ? 131071 : 524287);
    if (isSetFail_infos())
      hashCode = hashCode * 8191 + fail_infos.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TAbortRemoteTxnRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTxn_id(), other.isSetTxn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_id, other.txn_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb_id(), other.isSetDb_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_id, other.db_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetError_msg(), other.isSetError_msg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_msg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_msg, other.error_msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAuth_info(), other.isSetAuth_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuth_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth_info, other.auth_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCommit_infos(), other.isSetCommit_infos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommit_infos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commit_infos, other.commit_infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCommit_attachment(), other.isSetCommit_attachment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommit_attachment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commit_attachment, other.commit_attachment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFail_infos(), other.isSetFail_infos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFail_infos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fail_infos, other.fail_infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAbortRemoteTxnRequest(");
    boolean first = true;

    if (isSetTxn_id()) {
      sb.append("txn_id:");
      sb.append(this.txn_id);
      first = false;
    }
    if (isSetDb_id()) {
      if (!first) sb.append(", ");
      sb.append("db_id:");
      sb.append(this.db_id);
      first = false;
    }
    if (isSetError_msg()) {
      if (!first) sb.append(", ");
      sb.append("error_msg:");
      if (this.error_msg == null) {
        sb.append("null");
      } else {
        sb.append(this.error_msg);
      }
      first = false;
    }
    if (isSetAuth_info()) {
      if (!first) sb.append(", ");
      sb.append("auth_info:");
      if (this.auth_info == null) {
        sb.append("null");
      } else {
        sb.append(this.auth_info);
      }
      first = false;
    }
    if (isSetCommit_infos()) {
      if (!first) sb.append(", ");
      sb.append("commit_infos:");
      if (this.commit_infos == null) {
        sb.append("null");
      } else {
        sb.append(this.commit_infos);
      }
      first = false;
    }
    if (isSetCommit_attachment()) {
      if (!first) sb.append(", ");
      sb.append("commit_attachment:");
      if (this.commit_attachment == null) {
        sb.append("null");
      } else {
        sb.append(this.commit_attachment);
      }
      first = false;
    }
    if (isSetFail_infos()) {
      if (!first) sb.append(", ");
      sb.append("fail_infos:");
      if (this.fail_infos == null) {
        sb.append("null");
      } else {
        sb.append(this.fail_infos);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (auth_info != null) {
      auth_info.validate();
    }
    if (commit_attachment != null) {
      commit_attachment.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAbortRemoteTxnRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAbortRemoteTxnRequestStandardScheme getScheme() {
      return new TAbortRemoteTxnRequestStandardScheme();
    }
  }

  private static class TAbortRemoteTxnRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAbortRemoteTxnRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TAbortRemoteTxnRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txn_id = iprot.readI64();
              struct.setTxn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.db_id = iprot.readI64();
              struct.setDb_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERROR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error_msg = iprot.readString();
              struct.setError_msgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AUTH_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.auth_info = new TAuthenticateParams();
              struct.auth_info.read(iprot);
              struct.setAuth_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMIT_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list566 = iprot.readListBegin();
                struct.commit_infos = new java.util.ArrayList<com.starrocks.thrift.TTabletCommitInfo>(_list566.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTabletCommitInfo _elem567;
                for (int _i568 = 0; _i568 < _list566.size; ++_i568)
                {
                  _elem567 = new com.starrocks.thrift.TTabletCommitInfo();
                  _elem567.read(iprot);
                  struct.commit_infos.add(_elem567);
                }
                iprot.readListEnd();
              }
              struct.setCommit_infosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMIT_ATTACHMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commit_attachment = new TTxnCommitAttachment();
              struct.commit_attachment.read(iprot);
              struct.setCommit_attachmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FAIL_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list569 = iprot.readListBegin();
                struct.fail_infos = new java.util.ArrayList<com.starrocks.thrift.TTabletFailInfo>(_list569.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTabletFailInfo _elem570;
                for (int _i571 = 0; _i571 < _list569.size; ++_i571)
                {
                  _elem570 = new com.starrocks.thrift.TTabletFailInfo();
                  _elem570.read(iprot);
                  struct.fail_infos.add(_elem570);
                }
                iprot.readListEnd();
              }
              struct.setFail_infosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TAbortRemoteTxnRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTxn_id()) {
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txn_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDb_id()) {
        oprot.writeFieldBegin(DB_ID_FIELD_DESC);
        oprot.writeI64(struct.db_id);
        oprot.writeFieldEnd();
      }
      if (struct.error_msg != null) {
        if (struct.isSetError_msg()) {
          oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
          oprot.writeString(struct.error_msg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.auth_info != null) {
        if (struct.isSetAuth_info()) {
          oprot.writeFieldBegin(AUTH_INFO_FIELD_DESC);
          struct.auth_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commit_infos != null) {
        if (struct.isSetCommit_infos()) {
          oprot.writeFieldBegin(COMMIT_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.commit_infos.size()));
            for (com.starrocks.thrift.TTabletCommitInfo _iter572 : struct.commit_infos)
            {
              _iter572.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.commit_attachment != null) {
        if (struct.isSetCommit_attachment()) {
          oprot.writeFieldBegin(COMMIT_ATTACHMENT_FIELD_DESC);
          struct.commit_attachment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fail_infos != null) {
        if (struct.isSetFail_infos()) {
          oprot.writeFieldBegin(FAIL_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fail_infos.size()));
            for (com.starrocks.thrift.TTabletFailInfo _iter573 : struct.fail_infos)
            {
              _iter573.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAbortRemoteTxnRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAbortRemoteTxnRequestTupleScheme getScheme() {
      return new TAbortRemoteTxnRequestTupleScheme();
    }
  }

  private static class TAbortRemoteTxnRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAbortRemoteTxnRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAbortRemoteTxnRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTxn_id()) {
        optionals.set(0);
      }
      if (struct.isSetDb_id()) {
        optionals.set(1);
      }
      if (struct.isSetError_msg()) {
        optionals.set(2);
      }
      if (struct.isSetAuth_info()) {
        optionals.set(3);
      }
      if (struct.isSetCommit_infos()) {
        optionals.set(4);
      }
      if (struct.isSetCommit_attachment()) {
        optionals.set(5);
      }
      if (struct.isSetFail_infos()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetTxn_id()) {
        oprot.writeI64(struct.txn_id);
      }
      if (struct.isSetDb_id()) {
        oprot.writeI64(struct.db_id);
      }
      if (struct.isSetError_msg()) {
        oprot.writeString(struct.error_msg);
      }
      if (struct.isSetAuth_info()) {
        struct.auth_info.write(oprot);
      }
      if (struct.isSetCommit_infos()) {
        {
          oprot.writeI32(struct.commit_infos.size());
          for (com.starrocks.thrift.TTabletCommitInfo _iter574 : struct.commit_infos)
          {
            _iter574.write(oprot);
          }
        }
      }
      if (struct.isSetCommit_attachment()) {
        struct.commit_attachment.write(oprot);
      }
      if (struct.isSetFail_infos()) {
        {
          oprot.writeI32(struct.fail_infos.size());
          for (com.starrocks.thrift.TTabletFailInfo _iter575 : struct.fail_infos)
          {
            _iter575.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAbortRemoteTxnRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.txn_id = iprot.readI64();
        struct.setTxn_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.db_id = iprot.readI64();
        struct.setDb_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.error_msg = iprot.readString();
        struct.setError_msgIsSet(true);
      }
      if (incoming.get(3)) {
        struct.auth_info = new TAuthenticateParams();
        struct.auth_info.read(iprot);
        struct.setAuth_infoIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list576 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.commit_infos = new java.util.ArrayList<com.starrocks.thrift.TTabletCommitInfo>(_list576.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTabletCommitInfo _elem577;
          for (int _i578 = 0; _i578 < _list576.size; ++_i578)
          {
            _elem577 = new com.starrocks.thrift.TTabletCommitInfo();
            _elem577.read(iprot);
            struct.commit_infos.add(_elem577);
          }
        }
        struct.setCommit_infosIsSet(true);
      }
      if (incoming.get(5)) {
        struct.commit_attachment = new TTxnCommitAttachment();
        struct.commit_attachment.read(iprot);
        struct.setCommit_attachmentIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list579 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.fail_infos = new java.util.ArrayList<com.starrocks.thrift.TTabletFailInfo>(_list579.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTabletFailInfo _elem580;
          for (int _i581 = 0; _i581 < _list579.size; ++_i581)
          {
            _elem580 = new com.starrocks.thrift.TTabletFailInfo();
            _elem580.read(iprot);
            struct.fail_infos.add(_elem580);
          }
        }
        struct.setFail_infosIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

