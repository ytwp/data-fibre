/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TStreamLoadPutRequest implements org.apache.thrift.TBase<TStreamLoadPutRequest, TStreamLoadPutRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TStreamLoadPutRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStreamLoadPutRequest");

  private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("passwd", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("tbl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ip", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LOAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loadId", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField FORMAT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("formatType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("where", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField COLUMN_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("columnSeparator", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField AUTH_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("auth_code", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField NEGATIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("negative", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField STRICT_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("strictMode", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField TIMEZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("timezone", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField LOAD_MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("loadMemLimit", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField IS_TEMP_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("isTempPartition", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField STRIP_OUTER_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("strip_outer_array", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField JSONPATHS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonpaths", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField THRIFT_RPC_TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("thrift_rpc_timeout_ms", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField JSON_ROOT_FIELD_DESC = new org.apache.thrift.protocol.TField("json_root", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField PARTIAL_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("partial_update", org.apache.thrift.protocol.TType.BOOL, (short)27);
  private static final org.apache.thrift.protocol.TField TRANSMISSION_COMPRESSION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transmission_compression_type", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField LOAD_DOP_FIELD_DESC = new org.apache.thrift.protocol.TField("load_dop", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField ENABLE_REPLICATED_STORAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_replicated_storage", org.apache.thrift.protocol.TType.BOOL, (short)30);
  private static final org.apache.thrift.protocol.TField MERGE_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("merge_condition", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField LOG_REJECTED_RECORD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("log_rejected_record_num", org.apache.thrift.protocol.TType.I64, (short)32);
  private static final org.apache.thrift.protocol.TField ROW_DELIMITER_FIELD_DESC = new org.apache.thrift.protocol.TField("rowDelimiter", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField SKIP_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("skipHeader", org.apache.thrift.protocol.TType.I64, (short)51);
  private static final org.apache.thrift.protocol.TField TRIM_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("trimSpace", org.apache.thrift.protocol.TType.BOOL, (short)52);
  private static final org.apache.thrift.protocol.TField ENCLOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("enclose", org.apache.thrift.protocol.TType.BYTE, (short)53);
  private static final org.apache.thrift.protocol.TField ESCAPE_FIELD_DESC = new org.apache.thrift.protocol.TField("escape", org.apache.thrift.protocol.TType.BYTE, (short)54);
  private static final org.apache.thrift.protocol.TField PARTIAL_UPDATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("partial_update_mode", org.apache.thrift.protocol.TType.I32, (short)55);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TStreamLoadPutRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TStreamLoadPutRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String cluster; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String user; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String passwd; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tbl; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String user_ip; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUniqueId loadId; // required
  public long txnId; // required
  /**
   * 
   * @see io.datafibre.fibre.thrift.TFileType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TFileType fileType; // required
  /**
   * 
   * @see io.datafibre.fibre.thrift.TFileFormatType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TFileFormatType formatType; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String path; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String columns; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String where; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String columnSeparator; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String partitions; // optional
  public long auth_code; // optional
  public boolean negative; // optional
  public int timeout; // optional
  public boolean strictMode; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String timezone; // optional
  public long loadMemLimit; // optional
  public boolean isTempPartition; // optional
  public boolean strip_outer_array; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String jsonpaths; // optional
  public long thrift_rpc_timeout_ms; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String json_root; // optional
  public boolean partial_update; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String transmission_compression_type; // optional
  public int load_dop; // optional
  public boolean enable_replicated_storage; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String merge_condition; // optional
  public long log_rejected_record_num; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String rowDelimiter; // optional
  public long skipHeader; // optional
  public boolean trimSpace; // optional
  public byte enclose; // optional
  public byte escape; // optional
  /**
   * 
   * @see io.datafibre.fibre.thrift.TPartialUpdateMode
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPartialUpdateMode partial_update_mode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLUSTER((short)1, "cluster"),
    USER((short)2, "user"),
    PASSWD((short)3, "passwd"),
    DB((short)4, "db"),
    TBL((short)5, "tbl"),
    USER_IP((short)6, "user_ip"),
    LOAD_ID((short)7, "loadId"),
    TXN_ID((short)8, "txnId"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TFileType
     */
    FILE_TYPE((short)9, "fileType"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TFileFormatType
     */
    FORMAT_TYPE((short)10, "formatType"),
    PATH((short)11, "path"),
    COLUMNS((short)12, "columns"),
    WHERE((short)13, "where"),
    COLUMN_SEPARATOR((short)14, "columnSeparator"),
    PARTITIONS((short)15, "partitions"),
    AUTH_CODE((short)16, "auth_code"),
    NEGATIVE((short)17, "negative"),
    TIMEOUT((short)18, "timeout"),
    STRICT_MODE((short)19, "strictMode"),
    TIMEZONE((short)20, "timezone"),
    LOAD_MEM_LIMIT((short)21, "loadMemLimit"),
    IS_TEMP_PARTITION((short)22, "isTempPartition"),
    STRIP_OUTER_ARRAY((short)23, "strip_outer_array"),
    JSONPATHS((short)24, "jsonpaths"),
    THRIFT_RPC_TIMEOUT_MS((short)25, "thrift_rpc_timeout_ms"),
    JSON_ROOT((short)26, "json_root"),
    PARTIAL_UPDATE((short)27, "partial_update"),
    TRANSMISSION_COMPRESSION_TYPE((short)28, "transmission_compression_type"),
    LOAD_DOP((short)29, "load_dop"),
    ENABLE_REPLICATED_STORAGE((short)30, "enable_replicated_storage"),
    MERGE_CONDITION((short)31, "merge_condition"),
    LOG_REJECTED_RECORD_NUM((short)32, "log_rejected_record_num"),
    ROW_DELIMITER((short)50, "rowDelimiter"),
    SKIP_HEADER((short)51, "skipHeader"),
    TRIM_SPACE((short)52, "trimSpace"),
    ENCLOSE((short)53, "enclose"),
    ESCAPE((short)54, "escape"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TPartialUpdateMode
     */
    PARTIAL_UPDATE_MODE((short)55, "partial_update_mode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLUSTER
          return CLUSTER;
        case 2: // USER
          return USER;
        case 3: // PASSWD
          return PASSWD;
        case 4: // DB
          return DB;
        case 5: // TBL
          return TBL;
        case 6: // USER_IP
          return USER_IP;
        case 7: // LOAD_ID
          return LOAD_ID;
        case 8: // TXN_ID
          return TXN_ID;
        case 9: // FILE_TYPE
          return FILE_TYPE;
        case 10: // FORMAT_TYPE
          return FORMAT_TYPE;
        case 11: // PATH
          return PATH;
        case 12: // COLUMNS
          return COLUMNS;
        case 13: // WHERE
          return WHERE;
        case 14: // COLUMN_SEPARATOR
          return COLUMN_SEPARATOR;
        case 15: // PARTITIONS
          return PARTITIONS;
        case 16: // AUTH_CODE
          return AUTH_CODE;
        case 17: // NEGATIVE
          return NEGATIVE;
        case 18: // TIMEOUT
          return TIMEOUT;
        case 19: // STRICT_MODE
          return STRICT_MODE;
        case 20: // TIMEZONE
          return TIMEZONE;
        case 21: // LOAD_MEM_LIMIT
          return LOAD_MEM_LIMIT;
        case 22: // IS_TEMP_PARTITION
          return IS_TEMP_PARTITION;
        case 23: // STRIP_OUTER_ARRAY
          return STRIP_OUTER_ARRAY;
        case 24: // JSONPATHS
          return JSONPATHS;
        case 25: // THRIFT_RPC_TIMEOUT_MS
          return THRIFT_RPC_TIMEOUT_MS;
        case 26: // JSON_ROOT
          return JSON_ROOT;
        case 27: // PARTIAL_UPDATE
          return PARTIAL_UPDATE;
        case 28: // TRANSMISSION_COMPRESSION_TYPE
          return TRANSMISSION_COMPRESSION_TYPE;
        case 29: // LOAD_DOP
          return LOAD_DOP;
        case 30: // ENABLE_REPLICATED_STORAGE
          return ENABLE_REPLICATED_STORAGE;
        case 31: // MERGE_CONDITION
          return MERGE_CONDITION;
        case 32: // LOG_REJECTED_RECORD_NUM
          return LOG_REJECTED_RECORD_NUM;
        case 50: // ROW_DELIMITER
          return ROW_DELIMITER;
        case 51: // SKIP_HEADER
          return SKIP_HEADER;
        case 52: // TRIM_SPACE
          return TRIM_SPACE;
        case 53: // ENCLOSE
          return ENCLOSE;
        case 54: // ESCAPE
          return ESCAPE;
        case 55: // PARTIAL_UPDATE_MODE
          return PARTIAL_UPDATE_MODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TXNID_ISSET_ID = 0;
  private static final int __AUTH_CODE_ISSET_ID = 1;
  private static final int __NEGATIVE_ISSET_ID = 2;
  private static final int __TIMEOUT_ISSET_ID = 3;
  private static final int __STRICTMODE_ISSET_ID = 4;
  private static final int __LOADMEMLIMIT_ISSET_ID = 5;
  private static final int __ISTEMPPARTITION_ISSET_ID = 6;
  private static final int __STRIP_OUTER_ARRAY_ISSET_ID = 7;
  private static final int __THRIFT_RPC_TIMEOUT_MS_ISSET_ID = 8;
  private static final int __PARTIAL_UPDATE_ISSET_ID = 9;
  private static final int __LOAD_DOP_ISSET_ID = 10;
  private static final int __ENABLE_REPLICATED_STORAGE_ISSET_ID = 11;
  private static final int __LOG_REJECTED_RECORD_NUM_ISSET_ID = 12;
  private static final int __SKIPHEADER_ISSET_ID = 13;
  private static final int __TRIMSPACE_ISSET_ID = 14;
  private static final int __ENCLOSE_ISSET_ID = 15;
  private static final int __ESCAPE_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CLUSTER,_Fields.USER_IP,_Fields.PATH,_Fields.COLUMNS,_Fields.WHERE,_Fields.COLUMN_SEPARATOR,_Fields.PARTITIONS,_Fields.AUTH_CODE,_Fields.NEGATIVE,_Fields.TIMEOUT,_Fields.STRICT_MODE,_Fields.TIMEZONE,_Fields.LOAD_MEM_LIMIT,_Fields.IS_TEMP_PARTITION,_Fields.STRIP_OUTER_ARRAY,_Fields.JSONPATHS,_Fields.THRIFT_RPC_TIMEOUT_MS,_Fields.JSON_ROOT,_Fields.PARTIAL_UPDATE,_Fields.TRANSMISSION_COMPRESSION_TYPE,_Fields.LOAD_DOP,_Fields.ENABLE_REPLICATED_STORAGE,_Fields.MERGE_CONDITION,_Fields.LOG_REJECTED_RECORD_NUM,_Fields.ROW_DELIMITER,_Fields.SKIP_HEADER,_Fields.TRIM_SPACE,_Fields.ENCLOSE,_Fields.ESCAPE,_Fields.PARTIAL_UPDATE_MODE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWD, new org.apache.thrift.meta_data.FieldMetaData("passwd", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TBL, new org.apache.thrift.meta_data.FieldMetaData("tbl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IP, new org.apache.thrift.meta_data.FieldMetaData("user_ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAD_ID, new org.apache.thrift.meta_data.FieldMetaData("loadId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TFileType.class)));
    tmpMap.put(_Fields.FORMAT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("formatType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TFileFormatType.class)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WHERE, new org.apache.thrift.meta_data.FieldMetaData("where", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("columnSeparator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTH_CODE, new org.apache.thrift.meta_data.FieldMetaData("auth_code", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEGATIVE, new org.apache.thrift.meta_data.FieldMetaData("negative", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRICT_MODE, new org.apache.thrift.meta_data.FieldMetaData("strictMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIMEZONE, new org.apache.thrift.meta_data.FieldMetaData("timezone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAD_MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("loadMemLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_TEMP_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("isTempPartition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STRIP_OUTER_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("strip_outer_array", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JSONPATHS, new org.apache.thrift.meta_data.FieldMetaData("jsonpaths", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THRIFT_RPC_TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("thrift_rpc_timeout_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JSON_ROOT, new org.apache.thrift.meta_data.FieldMetaData("json_root", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTIAL_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("partial_update", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TRANSMISSION_COMPRESSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transmission_compression_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAD_DOP, new org.apache.thrift.meta_data.FieldMetaData("load_dop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLE_REPLICATED_STORAGE, new org.apache.thrift.meta_data.FieldMetaData("enable_replicated_storage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MERGE_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("merge_condition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_REJECTED_RECORD_NUM, new org.apache.thrift.meta_data.FieldMetaData("log_rejected_record_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROW_DELIMITER, new org.apache.thrift.meta_data.FieldMetaData("rowDelimiter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SKIP_HEADER, new org.apache.thrift.meta_data.FieldMetaData("skipHeader", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRIM_SPACE, new org.apache.thrift.meta_data.FieldMetaData("trimSpace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENCLOSE, new org.apache.thrift.meta_data.FieldMetaData("enclose", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ESCAPE, new org.apache.thrift.meta_data.FieldMetaData("escape", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PARTIAL_UPDATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("partial_update_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TPartialUpdateMode.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStreamLoadPutRequest.class, metaDataMap);
  }

  public TStreamLoadPutRequest() {
  }

  public TStreamLoadPutRequest(
    java.lang.String user,
    java.lang.String passwd,
    java.lang.String db,
    java.lang.String tbl,
    io.datafibre.fibre.thrift.TUniqueId loadId,
    long txnId,
    io.datafibre.fibre.thrift.TFileType fileType,
    io.datafibre.fibre.thrift.TFileFormatType formatType)
  {
    this();
    this.user = user;
    this.passwd = passwd;
    this.db = db;
    this.tbl = tbl;
    this.loadId = loadId;
    this.txnId = txnId;
    setTxnIdIsSet(true);
    this.fileType = fileType;
    this.formatType = formatType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStreamLoadPutRequest(TStreamLoadPutRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCluster()) {
      this.cluster = other.cluster;
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetPasswd()) {
      this.passwd = other.passwd;
    }
    if (other.isSetDb()) {
      this.db = other.db;
    }
    if (other.isSetTbl()) {
      this.tbl = other.tbl;
    }
    if (other.isSetUser_ip()) {
      this.user_ip = other.user_ip;
    }
    if (other.isSetLoadId()) {
      this.loadId = new io.datafibre.fibre.thrift.TUniqueId(other.loadId);
    }
    this.txnId = other.txnId;
    if (other.isSetFileType()) {
      this.fileType = other.fileType;
    }
    if (other.isSetFormatType()) {
      this.formatType = other.formatType;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetColumns()) {
      this.columns = other.columns;
    }
    if (other.isSetWhere()) {
      this.where = other.where;
    }
    if (other.isSetColumnSeparator()) {
      this.columnSeparator = other.columnSeparator;
    }
    if (other.isSetPartitions()) {
      this.partitions = other.partitions;
    }
    this.auth_code = other.auth_code;
    this.negative = other.negative;
    this.timeout = other.timeout;
    this.strictMode = other.strictMode;
    if (other.isSetTimezone()) {
      this.timezone = other.timezone;
    }
    this.loadMemLimit = other.loadMemLimit;
    this.isTempPartition = other.isTempPartition;
    this.strip_outer_array = other.strip_outer_array;
    if (other.isSetJsonpaths()) {
      this.jsonpaths = other.jsonpaths;
    }
    this.thrift_rpc_timeout_ms = other.thrift_rpc_timeout_ms;
    if (other.isSetJson_root()) {
      this.json_root = other.json_root;
    }
    this.partial_update = other.partial_update;
    if (other.isSetTransmission_compression_type()) {
      this.transmission_compression_type = other.transmission_compression_type;
    }
    this.load_dop = other.load_dop;
    this.enable_replicated_storage = other.enable_replicated_storage;
    if (other.isSetMerge_condition()) {
      this.merge_condition = other.merge_condition;
    }
    this.log_rejected_record_num = other.log_rejected_record_num;
    if (other.isSetRowDelimiter()) {
      this.rowDelimiter = other.rowDelimiter;
    }
    this.skipHeader = other.skipHeader;
    this.trimSpace = other.trimSpace;
    this.enclose = other.enclose;
    this.escape = other.escape;
    if (other.isSetPartial_update_mode()) {
      this.partial_update_mode = other.partial_update_mode;
    }
  }

  @Override
  public TStreamLoadPutRequest deepCopy() {
    return new TStreamLoadPutRequest(this);
  }

  @Override
  public void clear() {
    this.cluster = null;
    this.user = null;
    this.passwd = null;
    this.db = null;
    this.tbl = null;
    this.user_ip = null;
    this.loadId = null;
    setTxnIdIsSet(false);
    this.txnId = 0;
    this.fileType = null;
    this.formatType = null;
    this.path = null;
    this.columns = null;
    this.where = null;
    this.columnSeparator = null;
    this.partitions = null;
    setAuth_codeIsSet(false);
    this.auth_code = 0;
    setNegativeIsSet(false);
    this.negative = false;
    setTimeoutIsSet(false);
    this.timeout = 0;
    setStrictModeIsSet(false);
    this.strictMode = false;
    this.timezone = null;
    setLoadMemLimitIsSet(false);
    this.loadMemLimit = 0;
    setIsTempPartitionIsSet(false);
    this.isTempPartition = false;
    setStrip_outer_arrayIsSet(false);
    this.strip_outer_array = false;
    this.jsonpaths = null;
    setThrift_rpc_timeout_msIsSet(false);
    this.thrift_rpc_timeout_ms = 0;
    this.json_root = null;
    setPartial_updateIsSet(false);
    this.partial_update = false;
    this.transmission_compression_type = null;
    setLoad_dopIsSet(false);
    this.load_dop = 0;
    setEnable_replicated_storageIsSet(false);
    this.enable_replicated_storage = false;
    this.merge_condition = null;
    setLog_rejected_record_numIsSet(false);
    this.log_rejected_record_num = 0;
    this.rowDelimiter = null;
    setSkipHeaderIsSet(false);
    this.skipHeader = 0;
    setTrimSpaceIsSet(false);
    this.trimSpace = false;
    setEncloseIsSet(false);
    this.enclose = 0;
    setEscapeIsSet(false);
    this.escape = 0;
    this.partial_update_mode = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCluster() {
    return this.cluster;
  }

  public TStreamLoadPutRequest setCluster(@org.apache.thrift.annotation.Nullable java.lang.String cluster) {
    this.cluster = cluster;
    return this;
  }

  public void unsetCluster() {
    this.cluster = null;
  }

  /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster() {
    return this.cluster != null;
  }

  public void setClusterIsSet(boolean value) {
    if (!value) {
      this.cluster = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser() {
    return this.user;
  }

  public TStreamLoadPutRequest setUser(@org.apache.thrift.annotation.Nullable java.lang.String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPasswd() {
    return this.passwd;
  }

  public TStreamLoadPutRequest setPasswd(@org.apache.thrift.annotation.Nullable java.lang.String passwd) {
    this.passwd = passwd;
    return this;
  }

  public void unsetPasswd() {
    this.passwd = null;
  }

  /** Returns true if field passwd is set (has been assigned a value) and false otherwise */
  public boolean isSetPasswd() {
    return this.passwd != null;
  }

  public void setPasswdIsSet(boolean value) {
    if (!value) {
      this.passwd = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb() {
    return this.db;
  }

  public TStreamLoadPutRequest setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTbl() {
    return this.tbl;
  }

  public TStreamLoadPutRequest setTbl(@org.apache.thrift.annotation.Nullable java.lang.String tbl) {
    this.tbl = tbl;
    return this;
  }

  public void unsetTbl() {
    this.tbl = null;
  }

  /** Returns true if field tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetTbl() {
    return this.tbl != null;
  }

  public void setTblIsSet(boolean value) {
    if (!value) {
      this.tbl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser_ip() {
    return this.user_ip;
  }

  public TStreamLoadPutRequest setUser_ip(@org.apache.thrift.annotation.Nullable java.lang.String user_ip) {
    this.user_ip = user_ip;
    return this;
  }

  public void unsetUser_ip() {
    this.user_ip = null;
  }

  /** Returns true if field user_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_ip() {
    return this.user_ip != null;
  }

  public void setUser_ipIsSet(boolean value) {
    if (!value) {
      this.user_ip = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TUniqueId getLoadId() {
    return this.loadId;
  }

  public TStreamLoadPutRequest setLoadId(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUniqueId loadId) {
    this.loadId = loadId;
    return this;
  }

  public void unsetLoadId() {
    this.loadId = null;
  }

  /** Returns true if field loadId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadId() {
    return this.loadId != null;
  }

  public void setLoadIdIsSet(boolean value) {
    if (!value) {
      this.loadId = null;
    }
  }

  public long getTxnId() {
    return this.txnId;
  }

  public TStreamLoadPutRequest setTxnId(long txnId) {
    this.txnId = txnId;
    setTxnIdIsSet(true);
    return this;
  }

  public void unsetTxnId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
  }

  /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
  public boolean isSetTxnId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
  }

  public void setTxnIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TFileType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TFileType getFileType() {
    return this.fileType;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TFileType
   */
  public TStreamLoadPutRequest setFileType(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TFileType fileType) {
    this.fileType = fileType;
    return this;
  }

  public void unsetFileType() {
    this.fileType = null;
  }

  /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return this.fileType != null;
  }

  public void setFileTypeIsSet(boolean value) {
    if (!value) {
      this.fileType = null;
    }
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TFileFormatType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TFileFormatType getFormatType() {
    return this.formatType;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TFileFormatType
   */
  public TStreamLoadPutRequest setFormatType(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TFileFormatType formatType) {
    this.formatType = formatType;
    return this;
  }

  public void unsetFormatType() {
    this.formatType = null;
  }

  /** Returns true if field formatType is set (has been assigned a value) and false otherwise */
  public boolean isSetFormatType() {
    return this.formatType != null;
  }

  public void setFormatTypeIsSet(boolean value) {
    if (!value) {
      this.formatType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPath() {
    return this.path;
  }

  public TStreamLoadPutRequest setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumns() {
    return this.columns;
  }

  public TStreamLoadPutRequest setColumns(@org.apache.thrift.annotation.Nullable java.lang.String columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getWhere() {
    return this.where;
  }

  public TStreamLoadPutRequest setWhere(@org.apache.thrift.annotation.Nullable java.lang.String where) {
    this.where = where;
    return this;
  }

  public void unsetWhere() {
    this.where = null;
  }

  /** Returns true if field where is set (has been assigned a value) and false otherwise */
  public boolean isSetWhere() {
    return this.where != null;
  }

  public void setWhereIsSet(boolean value) {
    if (!value) {
      this.where = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumnSeparator() {
    return this.columnSeparator;
  }

  public TStreamLoadPutRequest setColumnSeparator(@org.apache.thrift.annotation.Nullable java.lang.String columnSeparator) {
    this.columnSeparator = columnSeparator;
    return this;
  }

  public void unsetColumnSeparator() {
    this.columnSeparator = null;
  }

  /** Returns true if field columnSeparator is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnSeparator() {
    return this.columnSeparator != null;
  }

  public void setColumnSeparatorIsSet(boolean value) {
    if (!value) {
      this.columnSeparator = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartitions() {
    return this.partitions;
  }

  public TStreamLoadPutRequest setPartitions(@org.apache.thrift.annotation.Nullable java.lang.String partitions) {
    this.partitions = partitions;
    return this;
  }

  public void unsetPartitions() {
    this.partitions = null;
  }

  /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitions() {
    return this.partitions != null;
  }

  public void setPartitionsIsSet(boolean value) {
    if (!value) {
      this.partitions = null;
    }
  }

  public long getAuth_code() {
    return this.auth_code;
  }

  public TStreamLoadPutRequest setAuth_code(long auth_code) {
    this.auth_code = auth_code;
    setAuth_codeIsSet(true);
    return this;
  }

  public void unsetAuth_code() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTH_CODE_ISSET_ID);
  }

  /** Returns true if field auth_code is set (has been assigned a value) and false otherwise */
  public boolean isSetAuth_code() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTH_CODE_ISSET_ID);
  }

  public void setAuth_codeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTH_CODE_ISSET_ID, value);
  }

  public boolean isNegative() {
    return this.negative;
  }

  public TStreamLoadPutRequest setNegative(boolean negative) {
    this.negative = negative;
    setNegativeIsSet(true);
    return this;
  }

  public void unsetNegative() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEGATIVE_ISSET_ID);
  }

  /** Returns true if field negative is set (has been assigned a value) and false otherwise */
  public boolean isSetNegative() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEGATIVE_ISSET_ID);
  }

  public void setNegativeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEGATIVE_ISSET_ID, value);
  }

  public int getTimeout() {
    return this.timeout;
  }

  public TStreamLoadPutRequest setTimeout(int timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public boolean isStrictMode() {
    return this.strictMode;
  }

  public TStreamLoadPutRequest setStrictMode(boolean strictMode) {
    this.strictMode = strictMode;
    setStrictModeIsSet(true);
    return this;
  }

  public void unsetStrictMode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRICTMODE_ISSET_ID);
  }

  /** Returns true if field strictMode is set (has been assigned a value) and false otherwise */
  public boolean isSetStrictMode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRICTMODE_ISSET_ID);
  }

  public void setStrictModeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRICTMODE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTimezone() {
    return this.timezone;
  }

  public TStreamLoadPutRequest setTimezone(@org.apache.thrift.annotation.Nullable java.lang.String timezone) {
    this.timezone = timezone;
    return this;
  }

  public void unsetTimezone() {
    this.timezone = null;
  }

  /** Returns true if field timezone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimezone() {
    return this.timezone != null;
  }

  public void setTimezoneIsSet(boolean value) {
    if (!value) {
      this.timezone = null;
    }
  }

  public long getLoadMemLimit() {
    return this.loadMemLimit;
  }

  public TStreamLoadPutRequest setLoadMemLimit(long loadMemLimit) {
    this.loadMemLimit = loadMemLimit;
    setLoadMemLimitIsSet(true);
    return this;
  }

  public void unsetLoadMemLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADMEMLIMIT_ISSET_ID);
  }

  /** Returns true if field loadMemLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadMemLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADMEMLIMIT_ISSET_ID);
  }

  public void setLoadMemLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADMEMLIMIT_ISSET_ID, value);
  }

  public boolean isIsTempPartition() {
    return this.isTempPartition;
  }

  public TStreamLoadPutRequest setIsTempPartition(boolean isTempPartition) {
    this.isTempPartition = isTempPartition;
    setIsTempPartitionIsSet(true);
    return this;
  }

  public void unsetIsTempPartition() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTEMPPARTITION_ISSET_ID);
  }

  /** Returns true if field isTempPartition is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTempPartition() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTEMPPARTITION_ISSET_ID);
  }

  public void setIsTempPartitionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTEMPPARTITION_ISSET_ID, value);
  }

  public boolean isStrip_outer_array() {
    return this.strip_outer_array;
  }

  public TStreamLoadPutRequest setStrip_outer_array(boolean strip_outer_array) {
    this.strip_outer_array = strip_outer_array;
    setStrip_outer_arrayIsSet(true);
    return this;
  }

  public void unsetStrip_outer_array() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRIP_OUTER_ARRAY_ISSET_ID);
  }

  /** Returns true if field strip_outer_array is set (has been assigned a value) and false otherwise */
  public boolean isSetStrip_outer_array() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRIP_OUTER_ARRAY_ISSET_ID);
  }

  public void setStrip_outer_arrayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRIP_OUTER_ARRAY_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJsonpaths() {
    return this.jsonpaths;
  }

  public TStreamLoadPutRequest setJsonpaths(@org.apache.thrift.annotation.Nullable java.lang.String jsonpaths) {
    this.jsonpaths = jsonpaths;
    return this;
  }

  public void unsetJsonpaths() {
    this.jsonpaths = null;
  }

  /** Returns true if field jsonpaths is set (has been assigned a value) and false otherwise */
  public boolean isSetJsonpaths() {
    return this.jsonpaths != null;
  }

  public void setJsonpathsIsSet(boolean value) {
    if (!value) {
      this.jsonpaths = null;
    }
  }

  public long getThrift_rpc_timeout_ms() {
    return this.thrift_rpc_timeout_ms;
  }

  public TStreamLoadPutRequest setThrift_rpc_timeout_ms(long thrift_rpc_timeout_ms) {
    this.thrift_rpc_timeout_ms = thrift_rpc_timeout_ms;
    setThrift_rpc_timeout_msIsSet(true);
    return this;
  }

  public void unsetThrift_rpc_timeout_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THRIFT_RPC_TIMEOUT_MS_ISSET_ID);
  }

  /** Returns true if field thrift_rpc_timeout_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetThrift_rpc_timeout_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THRIFT_RPC_TIMEOUT_MS_ISSET_ID);
  }

  public void setThrift_rpc_timeout_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THRIFT_RPC_TIMEOUT_MS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJson_root() {
    return this.json_root;
  }

  public TStreamLoadPutRequest setJson_root(@org.apache.thrift.annotation.Nullable java.lang.String json_root) {
    this.json_root = json_root;
    return this;
  }

  public void unsetJson_root() {
    this.json_root = null;
  }

  /** Returns true if field json_root is set (has been assigned a value) and false otherwise */
  public boolean isSetJson_root() {
    return this.json_root != null;
  }

  public void setJson_rootIsSet(boolean value) {
    if (!value) {
      this.json_root = null;
    }
  }

  public boolean isPartial_update() {
    return this.partial_update;
  }

  public TStreamLoadPutRequest setPartial_update(boolean partial_update) {
    this.partial_update = partial_update;
    setPartial_updateIsSet(true);
    return this;
  }

  public void unsetPartial_update() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTIAL_UPDATE_ISSET_ID);
  }

  /** Returns true if field partial_update is set (has been assigned a value) and false otherwise */
  public boolean isSetPartial_update() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTIAL_UPDATE_ISSET_ID);
  }

  public void setPartial_updateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTIAL_UPDATE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTransmission_compression_type() {
    return this.transmission_compression_type;
  }

  public TStreamLoadPutRequest setTransmission_compression_type(@org.apache.thrift.annotation.Nullable java.lang.String transmission_compression_type) {
    this.transmission_compression_type = transmission_compression_type;
    return this;
  }

  public void unsetTransmission_compression_type() {
    this.transmission_compression_type = null;
  }

  /** Returns true if field transmission_compression_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTransmission_compression_type() {
    return this.transmission_compression_type != null;
  }

  public void setTransmission_compression_typeIsSet(boolean value) {
    if (!value) {
      this.transmission_compression_type = null;
    }
  }

  public int getLoad_dop() {
    return this.load_dop;
  }

  public TStreamLoadPutRequest setLoad_dop(int load_dop) {
    this.load_dop = load_dop;
    setLoad_dopIsSet(true);
    return this;
  }

  public void unsetLoad_dop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOAD_DOP_ISSET_ID);
  }

  /** Returns true if field load_dop is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_dop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOAD_DOP_ISSET_ID);
  }

  public void setLoad_dopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOAD_DOP_ISSET_ID, value);
  }

  public boolean isEnable_replicated_storage() {
    return this.enable_replicated_storage;
  }

  public TStreamLoadPutRequest setEnable_replicated_storage(boolean enable_replicated_storage) {
    this.enable_replicated_storage = enable_replicated_storage;
    setEnable_replicated_storageIsSet(true);
    return this;
  }

  public void unsetEnable_replicated_storage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_REPLICATED_STORAGE_ISSET_ID);
  }

  /** Returns true if field enable_replicated_storage is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_replicated_storage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_REPLICATED_STORAGE_ISSET_ID);
  }

  public void setEnable_replicated_storageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_REPLICATED_STORAGE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMerge_condition() {
    return this.merge_condition;
  }

  public TStreamLoadPutRequest setMerge_condition(@org.apache.thrift.annotation.Nullable java.lang.String merge_condition) {
    this.merge_condition = merge_condition;
    return this;
  }

  public void unsetMerge_condition() {
    this.merge_condition = null;
  }

  /** Returns true if field merge_condition is set (has been assigned a value) and false otherwise */
  public boolean isSetMerge_condition() {
    return this.merge_condition != null;
  }

  public void setMerge_conditionIsSet(boolean value) {
    if (!value) {
      this.merge_condition = null;
    }
  }

  public long getLog_rejected_record_num() {
    return this.log_rejected_record_num;
  }

  public TStreamLoadPutRequest setLog_rejected_record_num(long log_rejected_record_num) {
    this.log_rejected_record_num = log_rejected_record_num;
    setLog_rejected_record_numIsSet(true);
    return this;
  }

  public void unsetLog_rejected_record_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOG_REJECTED_RECORD_NUM_ISSET_ID);
  }

  /** Returns true if field log_rejected_record_num is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_rejected_record_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOG_REJECTED_RECORD_NUM_ISSET_ID);
  }

  public void setLog_rejected_record_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOG_REJECTED_RECORD_NUM_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRowDelimiter() {
    return this.rowDelimiter;
  }

  public TStreamLoadPutRequest setRowDelimiter(@org.apache.thrift.annotation.Nullable java.lang.String rowDelimiter) {
    this.rowDelimiter = rowDelimiter;
    return this;
  }

  public void unsetRowDelimiter() {
    this.rowDelimiter = null;
  }

  /** Returns true if field rowDelimiter is set (has been assigned a value) and false otherwise */
  public boolean isSetRowDelimiter() {
    return this.rowDelimiter != null;
  }

  public void setRowDelimiterIsSet(boolean value) {
    if (!value) {
      this.rowDelimiter = null;
    }
  }

  public long getSkipHeader() {
    return this.skipHeader;
  }

  public TStreamLoadPutRequest setSkipHeader(long skipHeader) {
    this.skipHeader = skipHeader;
    setSkipHeaderIsSet(true);
    return this;
  }

  public void unsetSkipHeader() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SKIPHEADER_ISSET_ID);
  }

  /** Returns true if field skipHeader is set (has been assigned a value) and false otherwise */
  public boolean isSetSkipHeader() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SKIPHEADER_ISSET_ID);
  }

  public void setSkipHeaderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SKIPHEADER_ISSET_ID, value);
  }

  public boolean isTrimSpace() {
    return this.trimSpace;
  }

  public TStreamLoadPutRequest setTrimSpace(boolean trimSpace) {
    this.trimSpace = trimSpace;
    setTrimSpaceIsSet(true);
    return this;
  }

  public void unsetTrimSpace() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRIMSPACE_ISSET_ID);
  }

  /** Returns true if field trimSpace is set (has been assigned a value) and false otherwise */
  public boolean isSetTrimSpace() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRIMSPACE_ISSET_ID);
  }

  public void setTrimSpaceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRIMSPACE_ISSET_ID, value);
  }

  public byte getEnclose() {
    return this.enclose;
  }

  public TStreamLoadPutRequest setEnclose(byte enclose) {
    this.enclose = enclose;
    setEncloseIsSet(true);
    return this;
  }

  public void unsetEnclose() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENCLOSE_ISSET_ID);
  }

  /** Returns true if field enclose is set (has been assigned a value) and false otherwise */
  public boolean isSetEnclose() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENCLOSE_ISSET_ID);
  }

  public void setEncloseIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENCLOSE_ISSET_ID, value);
  }

  public byte getEscape() {
    return this.escape;
  }

  public TStreamLoadPutRequest setEscape(byte escape) {
    this.escape = escape;
    setEscapeIsSet(true);
    return this;
  }

  public void unsetEscape() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ESCAPE_ISSET_ID);
  }

  /** Returns true if field escape is set (has been assigned a value) and false otherwise */
  public boolean isSetEscape() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ESCAPE_ISSET_ID);
  }

  public void setEscapeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ESCAPE_ISSET_ID, value);
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TPartialUpdateMode
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TPartialUpdateMode getPartial_update_mode() {
    return this.partial_update_mode;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TPartialUpdateMode
   */
  public TStreamLoadPutRequest setPartial_update_mode(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPartialUpdateMode partial_update_mode) {
    this.partial_update_mode = partial_update_mode;
    return this;
  }

  public void unsetPartial_update_mode() {
    this.partial_update_mode = null;
  }

  /** Returns true if field partial_update_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetPartial_update_mode() {
    return this.partial_update_mode != null;
  }

  public void setPartial_update_modeIsSet(boolean value) {
    if (!value) {
      this.partial_update_mode = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((java.lang.String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((java.lang.String)value);
      }
      break;

    case PASSWD:
      if (value == null) {
        unsetPasswd();
      } else {
        setPasswd((java.lang.String)value);
      }
      break;

    case DB:
      if (value == null) {
        unsetDb();
      } else {
        setDb((java.lang.String)value);
      }
      break;

    case TBL:
      if (value == null) {
        unsetTbl();
      } else {
        setTbl((java.lang.String)value);
      }
      break;

    case USER_IP:
      if (value == null) {
        unsetUser_ip();
      } else {
        setUser_ip((java.lang.String)value);
      }
      break;

    case LOAD_ID:
      if (value == null) {
        unsetLoadId();
      } else {
        setLoadId((io.datafibre.fibre.thrift.TUniqueId)value);
      }
      break;

    case TXN_ID:
      if (value == null) {
        unsetTxnId();
      } else {
        setTxnId((java.lang.Long)value);
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((io.datafibre.fibre.thrift.TFileType)value);
      }
      break;

    case FORMAT_TYPE:
      if (value == null) {
        unsetFormatType();
      } else {
        setFormatType((io.datafibre.fibre.thrift.TFileFormatType)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((java.lang.String)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((java.lang.String)value);
      }
      break;

    case WHERE:
      if (value == null) {
        unsetWhere();
      } else {
        setWhere((java.lang.String)value);
      }
      break;

    case COLUMN_SEPARATOR:
      if (value == null) {
        unsetColumnSeparator();
      } else {
        setColumnSeparator((java.lang.String)value);
      }
      break;

    case PARTITIONS:
      if (value == null) {
        unsetPartitions();
      } else {
        setPartitions((java.lang.String)value);
      }
      break;

    case AUTH_CODE:
      if (value == null) {
        unsetAuth_code();
      } else {
        setAuth_code((java.lang.Long)value);
      }
      break;

    case NEGATIVE:
      if (value == null) {
        unsetNegative();
      } else {
        setNegative((java.lang.Boolean)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((java.lang.Integer)value);
      }
      break;

    case STRICT_MODE:
      if (value == null) {
        unsetStrictMode();
      } else {
        setStrictMode((java.lang.Boolean)value);
      }
      break;

    case TIMEZONE:
      if (value == null) {
        unsetTimezone();
      } else {
        setTimezone((java.lang.String)value);
      }
      break;

    case LOAD_MEM_LIMIT:
      if (value == null) {
        unsetLoadMemLimit();
      } else {
        setLoadMemLimit((java.lang.Long)value);
      }
      break;

    case IS_TEMP_PARTITION:
      if (value == null) {
        unsetIsTempPartition();
      } else {
        setIsTempPartition((java.lang.Boolean)value);
      }
      break;

    case STRIP_OUTER_ARRAY:
      if (value == null) {
        unsetStrip_outer_array();
      } else {
        setStrip_outer_array((java.lang.Boolean)value);
      }
      break;

    case JSONPATHS:
      if (value == null) {
        unsetJsonpaths();
      } else {
        setJsonpaths((java.lang.String)value);
      }
      break;

    case THRIFT_RPC_TIMEOUT_MS:
      if (value == null) {
        unsetThrift_rpc_timeout_ms();
      } else {
        setThrift_rpc_timeout_ms((java.lang.Long)value);
      }
      break;

    case JSON_ROOT:
      if (value == null) {
        unsetJson_root();
      } else {
        setJson_root((java.lang.String)value);
      }
      break;

    case PARTIAL_UPDATE:
      if (value == null) {
        unsetPartial_update();
      } else {
        setPartial_update((java.lang.Boolean)value);
      }
      break;

    case TRANSMISSION_COMPRESSION_TYPE:
      if (value == null) {
        unsetTransmission_compression_type();
      } else {
        setTransmission_compression_type((java.lang.String)value);
      }
      break;

    case LOAD_DOP:
      if (value == null) {
        unsetLoad_dop();
      } else {
        setLoad_dop((java.lang.Integer)value);
      }
      break;

    case ENABLE_REPLICATED_STORAGE:
      if (value == null) {
        unsetEnable_replicated_storage();
      } else {
        setEnable_replicated_storage((java.lang.Boolean)value);
      }
      break;

    case MERGE_CONDITION:
      if (value == null) {
        unsetMerge_condition();
      } else {
        setMerge_condition((java.lang.String)value);
      }
      break;

    case LOG_REJECTED_RECORD_NUM:
      if (value == null) {
        unsetLog_rejected_record_num();
      } else {
        setLog_rejected_record_num((java.lang.Long)value);
      }
      break;

    case ROW_DELIMITER:
      if (value == null) {
        unsetRowDelimiter();
      } else {
        setRowDelimiter((java.lang.String)value);
      }
      break;

    case SKIP_HEADER:
      if (value == null) {
        unsetSkipHeader();
      } else {
        setSkipHeader((java.lang.Long)value);
      }
      break;

    case TRIM_SPACE:
      if (value == null) {
        unsetTrimSpace();
      } else {
        setTrimSpace((java.lang.Boolean)value);
      }
      break;

    case ENCLOSE:
      if (value == null) {
        unsetEnclose();
      } else {
        setEnclose((java.lang.Byte)value);
      }
      break;

    case ESCAPE:
      if (value == null) {
        unsetEscape();
      } else {
        setEscape((java.lang.Byte)value);
      }
      break;

    case PARTIAL_UPDATE_MODE:
      if (value == null) {
        unsetPartial_update_mode();
      } else {
        setPartial_update_mode((io.datafibre.fibre.thrift.TPartialUpdateMode)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CLUSTER:
      return getCluster();

    case USER:
      return getUser();

    case PASSWD:
      return getPasswd();

    case DB:
      return getDb();

    case TBL:
      return getTbl();

    case USER_IP:
      return getUser_ip();

    case LOAD_ID:
      return getLoadId();

    case TXN_ID:
      return getTxnId();

    case FILE_TYPE:
      return getFileType();

    case FORMAT_TYPE:
      return getFormatType();

    case PATH:
      return getPath();

    case COLUMNS:
      return getColumns();

    case WHERE:
      return getWhere();

    case COLUMN_SEPARATOR:
      return getColumnSeparator();

    case PARTITIONS:
      return getPartitions();

    case AUTH_CODE:
      return getAuth_code();

    case NEGATIVE:
      return isNegative();

    case TIMEOUT:
      return getTimeout();

    case STRICT_MODE:
      return isStrictMode();

    case TIMEZONE:
      return getTimezone();

    case LOAD_MEM_LIMIT:
      return getLoadMemLimit();

    case IS_TEMP_PARTITION:
      return isIsTempPartition();

    case STRIP_OUTER_ARRAY:
      return isStrip_outer_array();

    case JSONPATHS:
      return getJsonpaths();

    case THRIFT_RPC_TIMEOUT_MS:
      return getThrift_rpc_timeout_ms();

    case JSON_ROOT:
      return getJson_root();

    case PARTIAL_UPDATE:
      return isPartial_update();

    case TRANSMISSION_COMPRESSION_TYPE:
      return getTransmission_compression_type();

    case LOAD_DOP:
      return getLoad_dop();

    case ENABLE_REPLICATED_STORAGE:
      return isEnable_replicated_storage();

    case MERGE_CONDITION:
      return getMerge_condition();

    case LOG_REJECTED_RECORD_NUM:
      return getLog_rejected_record_num();

    case ROW_DELIMITER:
      return getRowDelimiter();

    case SKIP_HEADER:
      return getSkipHeader();

    case TRIM_SPACE:
      return isTrimSpace();

    case ENCLOSE:
      return getEnclose();

    case ESCAPE:
      return getEscape();

    case PARTIAL_UPDATE_MODE:
      return getPartial_update_mode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CLUSTER:
      return isSetCluster();
    case USER:
      return isSetUser();
    case PASSWD:
      return isSetPasswd();
    case DB:
      return isSetDb();
    case TBL:
      return isSetTbl();
    case USER_IP:
      return isSetUser_ip();
    case LOAD_ID:
      return isSetLoadId();
    case TXN_ID:
      return isSetTxnId();
    case FILE_TYPE:
      return isSetFileType();
    case FORMAT_TYPE:
      return isSetFormatType();
    case PATH:
      return isSetPath();
    case COLUMNS:
      return isSetColumns();
    case WHERE:
      return isSetWhere();
    case COLUMN_SEPARATOR:
      return isSetColumnSeparator();
    case PARTITIONS:
      return isSetPartitions();
    case AUTH_CODE:
      return isSetAuth_code();
    case NEGATIVE:
      return isSetNegative();
    case TIMEOUT:
      return isSetTimeout();
    case STRICT_MODE:
      return isSetStrictMode();
    case TIMEZONE:
      return isSetTimezone();
    case LOAD_MEM_LIMIT:
      return isSetLoadMemLimit();
    case IS_TEMP_PARTITION:
      return isSetIsTempPartition();
    case STRIP_OUTER_ARRAY:
      return isSetStrip_outer_array();
    case JSONPATHS:
      return isSetJsonpaths();
    case THRIFT_RPC_TIMEOUT_MS:
      return isSetThrift_rpc_timeout_ms();
    case JSON_ROOT:
      return isSetJson_root();
    case PARTIAL_UPDATE:
      return isSetPartial_update();
    case TRANSMISSION_COMPRESSION_TYPE:
      return isSetTransmission_compression_type();
    case LOAD_DOP:
      return isSetLoad_dop();
    case ENABLE_REPLICATED_STORAGE:
      return isSetEnable_replicated_storage();
    case MERGE_CONDITION:
      return isSetMerge_condition();
    case LOG_REJECTED_RECORD_NUM:
      return isSetLog_rejected_record_num();
    case ROW_DELIMITER:
      return isSetRowDelimiter();
    case SKIP_HEADER:
      return isSetSkipHeader();
    case TRIM_SPACE:
      return isSetTrimSpace();
    case ENCLOSE:
      return isSetEnclose();
    case ESCAPE:
      return isSetEscape();
    case PARTIAL_UPDATE_MODE:
      return isSetPartial_update_mode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TStreamLoadPutRequest)
      return this.equals((TStreamLoadPutRequest)that);
    return false;
  }

  public boolean equals(TStreamLoadPutRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cluster = true && this.isSetCluster();
    boolean that_present_cluster = true && that.isSetCluster();
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (!this.cluster.equals(that.cluster))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_passwd = true && this.isSetPasswd();
    boolean that_present_passwd = true && that.isSetPasswd();
    if (this_present_passwd || that_present_passwd) {
      if (!(this_present_passwd && that_present_passwd))
        return false;
      if (!this.passwd.equals(that.passwd))
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_tbl = true && this.isSetTbl();
    boolean that_present_tbl = true && that.isSetTbl();
    if (this_present_tbl || that_present_tbl) {
      if (!(this_present_tbl && that_present_tbl))
        return false;
      if (!this.tbl.equals(that.tbl))
        return false;
    }

    boolean this_present_user_ip = true && this.isSetUser_ip();
    boolean that_present_user_ip = true && that.isSetUser_ip();
    if (this_present_user_ip || that_present_user_ip) {
      if (!(this_present_user_ip && that_present_user_ip))
        return false;
      if (!this.user_ip.equals(that.user_ip))
        return false;
    }

    boolean this_present_loadId = true && this.isSetLoadId();
    boolean that_present_loadId = true && that.isSetLoadId();
    if (this_present_loadId || that_present_loadId) {
      if (!(this_present_loadId && that_present_loadId))
        return false;
      if (!this.loadId.equals(that.loadId))
        return false;
    }

    boolean this_present_txnId = true;
    boolean that_present_txnId = true;
    if (this_present_txnId || that_present_txnId) {
      if (!(this_present_txnId && that_present_txnId))
        return false;
      if (this.txnId != that.txnId)
        return false;
    }

    boolean this_present_fileType = true && this.isSetFileType();
    boolean that_present_fileType = true && that.isSetFileType();
    if (this_present_fileType || that_present_fileType) {
      if (!(this_present_fileType && that_present_fileType))
        return false;
      if (!this.fileType.equals(that.fileType))
        return false;
    }

    boolean this_present_formatType = true && this.isSetFormatType();
    boolean that_present_formatType = true && that.isSetFormatType();
    if (this_present_formatType || that_present_formatType) {
      if (!(this_present_formatType && that_present_formatType))
        return false;
      if (!this.formatType.equals(that.formatType))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_where = true && this.isSetWhere();
    boolean that_present_where = true && that.isSetWhere();
    if (this_present_where || that_present_where) {
      if (!(this_present_where && that_present_where))
        return false;
      if (!this.where.equals(that.where))
        return false;
    }

    boolean this_present_columnSeparator = true && this.isSetColumnSeparator();
    boolean that_present_columnSeparator = true && that.isSetColumnSeparator();
    if (this_present_columnSeparator || that_present_columnSeparator) {
      if (!(this_present_columnSeparator && that_present_columnSeparator))
        return false;
      if (!this.columnSeparator.equals(that.columnSeparator))
        return false;
    }

    boolean this_present_partitions = true && this.isSetPartitions();
    boolean that_present_partitions = true && that.isSetPartitions();
    if (this_present_partitions || that_present_partitions) {
      if (!(this_present_partitions && that_present_partitions))
        return false;
      if (!this.partitions.equals(that.partitions))
        return false;
    }

    boolean this_present_auth_code = true && this.isSetAuth_code();
    boolean that_present_auth_code = true && that.isSetAuth_code();
    if (this_present_auth_code || that_present_auth_code) {
      if (!(this_present_auth_code && that_present_auth_code))
        return false;
      if (this.auth_code != that.auth_code)
        return false;
    }

    boolean this_present_negative = true && this.isSetNegative();
    boolean that_present_negative = true && that.isSetNegative();
    if (this_present_negative || that_present_negative) {
      if (!(this_present_negative && that_present_negative))
        return false;
      if (this.negative != that.negative)
        return false;
    }

    boolean this_present_timeout = true && this.isSetTimeout();
    boolean that_present_timeout = true && that.isSetTimeout();
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    boolean this_present_strictMode = true && this.isSetStrictMode();
    boolean that_present_strictMode = true && that.isSetStrictMode();
    if (this_present_strictMode || that_present_strictMode) {
      if (!(this_present_strictMode && that_present_strictMode))
        return false;
      if (this.strictMode != that.strictMode)
        return false;
    }

    boolean this_present_timezone = true && this.isSetTimezone();
    boolean that_present_timezone = true && that.isSetTimezone();
    if (this_present_timezone || that_present_timezone) {
      if (!(this_present_timezone && that_present_timezone))
        return false;
      if (!this.timezone.equals(that.timezone))
        return false;
    }

    boolean this_present_loadMemLimit = true && this.isSetLoadMemLimit();
    boolean that_present_loadMemLimit = true && that.isSetLoadMemLimit();
    if (this_present_loadMemLimit || that_present_loadMemLimit) {
      if (!(this_present_loadMemLimit && that_present_loadMemLimit))
        return false;
      if (this.loadMemLimit != that.loadMemLimit)
        return false;
    }

    boolean this_present_isTempPartition = true && this.isSetIsTempPartition();
    boolean that_present_isTempPartition = true && that.isSetIsTempPartition();
    if (this_present_isTempPartition || that_present_isTempPartition) {
      if (!(this_present_isTempPartition && that_present_isTempPartition))
        return false;
      if (this.isTempPartition != that.isTempPartition)
        return false;
    }

    boolean this_present_strip_outer_array = true && this.isSetStrip_outer_array();
    boolean that_present_strip_outer_array = true && that.isSetStrip_outer_array();
    if (this_present_strip_outer_array || that_present_strip_outer_array) {
      if (!(this_present_strip_outer_array && that_present_strip_outer_array))
        return false;
      if (this.strip_outer_array != that.strip_outer_array)
        return false;
    }

    boolean this_present_jsonpaths = true && this.isSetJsonpaths();
    boolean that_present_jsonpaths = true && that.isSetJsonpaths();
    if (this_present_jsonpaths || that_present_jsonpaths) {
      if (!(this_present_jsonpaths && that_present_jsonpaths))
        return false;
      if (!this.jsonpaths.equals(that.jsonpaths))
        return false;
    }

    boolean this_present_thrift_rpc_timeout_ms = true && this.isSetThrift_rpc_timeout_ms();
    boolean that_present_thrift_rpc_timeout_ms = true && that.isSetThrift_rpc_timeout_ms();
    if (this_present_thrift_rpc_timeout_ms || that_present_thrift_rpc_timeout_ms) {
      if (!(this_present_thrift_rpc_timeout_ms && that_present_thrift_rpc_timeout_ms))
        return false;
      if (this.thrift_rpc_timeout_ms != that.thrift_rpc_timeout_ms)
        return false;
    }

    boolean this_present_json_root = true && this.isSetJson_root();
    boolean that_present_json_root = true && that.isSetJson_root();
    if (this_present_json_root || that_present_json_root) {
      if (!(this_present_json_root && that_present_json_root))
        return false;
      if (!this.json_root.equals(that.json_root))
        return false;
    }

    boolean this_present_partial_update = true && this.isSetPartial_update();
    boolean that_present_partial_update = true && that.isSetPartial_update();
    if (this_present_partial_update || that_present_partial_update) {
      if (!(this_present_partial_update && that_present_partial_update))
        return false;
      if (this.partial_update != that.partial_update)
        return false;
    }

    boolean this_present_transmission_compression_type = true && this.isSetTransmission_compression_type();
    boolean that_present_transmission_compression_type = true && that.isSetTransmission_compression_type();
    if (this_present_transmission_compression_type || that_present_transmission_compression_type) {
      if (!(this_present_transmission_compression_type && that_present_transmission_compression_type))
        return false;
      if (!this.transmission_compression_type.equals(that.transmission_compression_type))
        return false;
    }

    boolean this_present_load_dop = true && this.isSetLoad_dop();
    boolean that_present_load_dop = true && that.isSetLoad_dop();
    if (this_present_load_dop || that_present_load_dop) {
      if (!(this_present_load_dop && that_present_load_dop))
        return false;
      if (this.load_dop != that.load_dop)
        return false;
    }

    boolean this_present_enable_replicated_storage = true && this.isSetEnable_replicated_storage();
    boolean that_present_enable_replicated_storage = true && that.isSetEnable_replicated_storage();
    if (this_present_enable_replicated_storage || that_present_enable_replicated_storage) {
      if (!(this_present_enable_replicated_storage && that_present_enable_replicated_storage))
        return false;
      if (this.enable_replicated_storage != that.enable_replicated_storage)
        return false;
    }

    boolean this_present_merge_condition = true && this.isSetMerge_condition();
    boolean that_present_merge_condition = true && that.isSetMerge_condition();
    if (this_present_merge_condition || that_present_merge_condition) {
      if (!(this_present_merge_condition && that_present_merge_condition))
        return false;
      if (!this.merge_condition.equals(that.merge_condition))
        return false;
    }

    boolean this_present_log_rejected_record_num = true && this.isSetLog_rejected_record_num();
    boolean that_present_log_rejected_record_num = true && that.isSetLog_rejected_record_num();
    if (this_present_log_rejected_record_num || that_present_log_rejected_record_num) {
      if (!(this_present_log_rejected_record_num && that_present_log_rejected_record_num))
        return false;
      if (this.log_rejected_record_num != that.log_rejected_record_num)
        return false;
    }

    boolean this_present_rowDelimiter = true && this.isSetRowDelimiter();
    boolean that_present_rowDelimiter = true && that.isSetRowDelimiter();
    if (this_present_rowDelimiter || that_present_rowDelimiter) {
      if (!(this_present_rowDelimiter && that_present_rowDelimiter))
        return false;
      if (!this.rowDelimiter.equals(that.rowDelimiter))
        return false;
    }

    boolean this_present_skipHeader = true && this.isSetSkipHeader();
    boolean that_present_skipHeader = true && that.isSetSkipHeader();
    if (this_present_skipHeader || that_present_skipHeader) {
      if (!(this_present_skipHeader && that_present_skipHeader))
        return false;
      if (this.skipHeader != that.skipHeader)
        return false;
    }

    boolean this_present_trimSpace = true && this.isSetTrimSpace();
    boolean that_present_trimSpace = true && that.isSetTrimSpace();
    if (this_present_trimSpace || that_present_trimSpace) {
      if (!(this_present_trimSpace && that_present_trimSpace))
        return false;
      if (this.trimSpace != that.trimSpace)
        return false;
    }

    boolean this_present_enclose = true && this.isSetEnclose();
    boolean that_present_enclose = true && that.isSetEnclose();
    if (this_present_enclose || that_present_enclose) {
      if (!(this_present_enclose && that_present_enclose))
        return false;
      if (this.enclose != that.enclose)
        return false;
    }

    boolean this_present_escape = true && this.isSetEscape();
    boolean that_present_escape = true && that.isSetEscape();
    if (this_present_escape || that_present_escape) {
      if (!(this_present_escape && that_present_escape))
        return false;
      if (this.escape != that.escape)
        return false;
    }

    boolean this_present_partial_update_mode = true && this.isSetPartial_update_mode();
    boolean that_present_partial_update_mode = true && that.isSetPartial_update_mode();
    if (this_present_partial_update_mode || that_present_partial_update_mode) {
      if (!(this_present_partial_update_mode && that_present_partial_update_mode))
        return false;
      if (!this.partial_update_mode.equals(that.partial_update_mode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCluster()) ? 131071 : 524287);
    if (isSetCluster())
      hashCode = hashCode * 8191 + cluster.hashCode();

    hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
    if (isSetUser())
      hashCode = hashCode * 8191 + user.hashCode();

    hashCode = hashCode * 8191 + ((isSetPasswd()) ? 131071 : 524287);
    if (isSetPasswd())
      hashCode = hashCode * 8191 + passwd.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
    if (isSetDb())
      hashCode = hashCode * 8191 + db.hashCode();

    hashCode = hashCode * 8191 + ((isSetTbl()) ? 131071 : 524287);
    if (isSetTbl())
      hashCode = hashCode * 8191 + tbl.hashCode();

    hashCode = hashCode * 8191 + ((isSetUser_ip()) ? 131071 : 524287);
    if (isSetUser_ip())
      hashCode = hashCode * 8191 + user_ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoadId()) ? 131071 : 524287);
    if (isSetLoadId())
      hashCode = hashCode * 8191 + loadId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txnId);

    hashCode = hashCode * 8191 + ((isSetFileType()) ? 131071 : 524287);
    if (isSetFileType())
      hashCode = hashCode * 8191 + fileType.getValue();

    hashCode = hashCode * 8191 + ((isSetFormatType()) ? 131071 : 524287);
    if (isSetFormatType())
      hashCode = hashCode * 8191 + formatType.getValue();

    hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
    if (isSetPath())
      hashCode = hashCode * 8191 + path.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
    if (isSetColumns())
      hashCode = hashCode * 8191 + columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetWhere()) ? 131071 : 524287);
    if (isSetWhere())
      hashCode = hashCode * 8191 + where.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnSeparator()) ? 131071 : 524287);
    if (isSetColumnSeparator())
      hashCode = hashCode * 8191 + columnSeparator.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartitions()) ? 131071 : 524287);
    if (isSetPartitions())
      hashCode = hashCode * 8191 + partitions.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuth_code()) ? 131071 : 524287);
    if (isSetAuth_code())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(auth_code);

    hashCode = hashCode * 8191 + ((isSetNegative()) ? 131071 : 524287);
    if (isSetNegative())
      hashCode = hashCode * 8191 + ((negative) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTimeout()) ? 131071 : 524287);
    if (isSetTimeout())
      hashCode = hashCode * 8191 + timeout;

    hashCode = hashCode * 8191 + ((isSetStrictMode()) ? 131071 : 524287);
    if (isSetStrictMode())
      hashCode = hashCode * 8191 + ((strictMode) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTimezone()) ? 131071 : 524287);
    if (isSetTimezone())
      hashCode = hashCode * 8191 + timezone.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoadMemLimit()) ? 131071 : 524287);
    if (isSetLoadMemLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loadMemLimit);

    hashCode = hashCode * 8191 + ((isSetIsTempPartition()) ? 131071 : 524287);
    if (isSetIsTempPartition())
      hashCode = hashCode * 8191 + ((isTempPartition) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetStrip_outer_array()) ? 131071 : 524287);
    if (isSetStrip_outer_array())
      hashCode = hashCode * 8191 + ((strip_outer_array) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetJsonpaths()) ? 131071 : 524287);
    if (isSetJsonpaths())
      hashCode = hashCode * 8191 + jsonpaths.hashCode();

    hashCode = hashCode * 8191 + ((isSetThrift_rpc_timeout_ms()) ? 131071 : 524287);
    if (isSetThrift_rpc_timeout_ms())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(thrift_rpc_timeout_ms);

    hashCode = hashCode * 8191 + ((isSetJson_root()) ? 131071 : 524287);
    if (isSetJson_root())
      hashCode = hashCode * 8191 + json_root.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartial_update()) ? 131071 : 524287);
    if (isSetPartial_update())
      hashCode = hashCode * 8191 + ((partial_update) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTransmission_compression_type()) ? 131071 : 524287);
    if (isSetTransmission_compression_type())
      hashCode = hashCode * 8191 + transmission_compression_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoad_dop()) ? 131071 : 524287);
    if (isSetLoad_dop())
      hashCode = hashCode * 8191 + load_dop;

    hashCode = hashCode * 8191 + ((isSetEnable_replicated_storage()) ? 131071 : 524287);
    if (isSetEnable_replicated_storage())
      hashCode = hashCode * 8191 + ((enable_replicated_storage) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMerge_condition()) ? 131071 : 524287);
    if (isSetMerge_condition())
      hashCode = hashCode * 8191 + merge_condition.hashCode();

    hashCode = hashCode * 8191 + ((isSetLog_rejected_record_num()) ? 131071 : 524287);
    if (isSetLog_rejected_record_num())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(log_rejected_record_num);

    hashCode = hashCode * 8191 + ((isSetRowDelimiter()) ? 131071 : 524287);
    if (isSetRowDelimiter())
      hashCode = hashCode * 8191 + rowDelimiter.hashCode();

    hashCode = hashCode * 8191 + ((isSetSkipHeader()) ? 131071 : 524287);
    if (isSetSkipHeader())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(skipHeader);

    hashCode = hashCode * 8191 + ((isSetTrimSpace()) ? 131071 : 524287);
    if (isSetTrimSpace())
      hashCode = hashCode * 8191 + ((trimSpace) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnclose()) ? 131071 : 524287);
    if (isSetEnclose())
      hashCode = hashCode * 8191 + (int) (enclose);

    hashCode = hashCode * 8191 + ((isSetEscape()) ? 131071 : 524287);
    if (isSetEscape())
      hashCode = hashCode * 8191 + (int) (escape);

    hashCode = hashCode * 8191 + ((isSetPartial_update_mode()) ? 131071 : 524287);
    if (isSetPartial_update_mode())
      hashCode = hashCode * 8191 + partial_update_mode.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TStreamLoadPutRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCluster(), other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUser(), other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPasswd(), other.isSetPasswd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPasswd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwd, other.passwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb(), other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTbl(), other.isSetTbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbl, other.tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUser_ip(), other.isSetUser_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ip, other.user_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadId(), other.isSetLoadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadId, other.loadId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxnId(), other.isSetTxnId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxnId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileType(), other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFormatType(), other.isSetFormatType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormatType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formatType, other.formatType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWhere(), other.isSetWhere());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhere()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where, other.where);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnSeparator(), other.isSetColumnSeparator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnSeparator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnSeparator, other.columnSeparator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitions(), other.isSetPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, other.partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAuth_code(), other.isSetAuth_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuth_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth_code, other.auth_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNegative(), other.isSetNegative());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNegative()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.negative, other.negative);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimeout(), other.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStrictMode(), other.isSetStrictMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrictMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strictMode, other.strictMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimezone(), other.isSetTimezone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimezone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timezone, other.timezone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadMemLimit(), other.isSetLoadMemLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadMemLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadMemLimit, other.loadMemLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsTempPartition(), other.isSetIsTempPartition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTempPartition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTempPartition, other.isTempPartition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStrip_outer_array(), other.isSetStrip_outer_array());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrip_outer_array()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strip_outer_array, other.strip_outer_array);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJsonpaths(), other.isSetJsonpaths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsonpaths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonpaths, other.jsonpaths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetThrift_rpc_timeout_ms(), other.isSetThrift_rpc_timeout_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThrift_rpc_timeout_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thrift_rpc_timeout_ms, other.thrift_rpc_timeout_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJson_root(), other.isSetJson_root());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJson_root()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json_root, other.json_root);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartial_update(), other.isSetPartial_update());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartial_update()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partial_update, other.partial_update);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTransmission_compression_type(), other.isSetTransmission_compression_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransmission_compression_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transmission_compression_type, other.transmission_compression_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_dop(), other.isSetLoad_dop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_dop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_dop, other.load_dop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_replicated_storage(), other.isSetEnable_replicated_storage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_replicated_storage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_replicated_storage, other.enable_replicated_storage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMerge_condition(), other.isSetMerge_condition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerge_condition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merge_condition, other.merge_condition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLog_rejected_record_num(), other.isSetLog_rejected_record_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_rejected_record_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_rejected_record_num, other.log_rejected_record_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRowDelimiter(), other.isSetRowDelimiter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowDelimiter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowDelimiter, other.rowDelimiter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSkipHeader(), other.isSetSkipHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkipHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skipHeader, other.skipHeader);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrimSpace(), other.isSetTrimSpace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrimSpace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trimSpace, other.trimSpace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnclose(), other.isSetEnclose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnclose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enclose, other.enclose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEscape(), other.isSetEscape());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEscape()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.escape, other.escape);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartial_update_mode(), other.isSetPartial_update_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartial_update_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partial_update_mode, other.partial_update_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TStreamLoadPutRequest(");
    boolean first = true;

    if (isSetCluster()) {
      sb.append("cluster:");
      if (this.cluster == null) {
        sb.append("null");
      } else {
        sb.append(this.cluster);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passwd:");
    if (this.passwd == null) {
      sb.append("null");
    } else {
      sb.append(this.passwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("db:");
    if (this.db == null) {
      sb.append("null");
    } else {
      sb.append(this.db);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tbl:");
    if (this.tbl == null) {
      sb.append("null");
    } else {
      sb.append(this.tbl);
    }
    first = false;
    if (isSetUser_ip()) {
      if (!first) sb.append(", ");
      sb.append("user_ip:");
      if (this.user_ip == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ip);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("loadId:");
    if (this.loadId == null) {
      sb.append("null");
    } else {
      sb.append(this.loadId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("txnId:");
    sb.append(this.txnId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileType:");
    if (this.fileType == null) {
      sb.append("null");
    } else {
      sb.append(this.fileType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("formatType:");
    if (this.formatType == null) {
      sb.append("null");
    } else {
      sb.append(this.formatType);
    }
    first = false;
    if (isSetPath()) {
      if (!first) sb.append(", ");
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
    }
    if (isSetColumns()) {
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
    }
    if (isSetWhere()) {
      if (!first) sb.append(", ");
      sb.append("where:");
      if (this.where == null) {
        sb.append("null");
      } else {
        sb.append(this.where);
      }
      first = false;
    }
    if (isSetColumnSeparator()) {
      if (!first) sb.append(", ");
      sb.append("columnSeparator:");
      if (this.columnSeparator == null) {
        sb.append("null");
      } else {
        sb.append(this.columnSeparator);
      }
      first = false;
    }
    if (isSetPartitions()) {
      if (!first) sb.append(", ");
      sb.append("partitions:");
      if (this.partitions == null) {
        sb.append("null");
      } else {
        sb.append(this.partitions);
      }
      first = false;
    }
    if (isSetAuth_code()) {
      if (!first) sb.append(", ");
      sb.append("auth_code:");
      sb.append(this.auth_code);
      first = false;
    }
    if (isSetNegative()) {
      if (!first) sb.append(", ");
      sb.append("negative:");
      sb.append(this.negative);
      first = false;
    }
    if (isSetTimeout()) {
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
    }
    if (isSetStrictMode()) {
      if (!first) sb.append(", ");
      sb.append("strictMode:");
      sb.append(this.strictMode);
      first = false;
    }
    if (isSetTimezone()) {
      if (!first) sb.append(", ");
      sb.append("timezone:");
      if (this.timezone == null) {
        sb.append("null");
      } else {
        sb.append(this.timezone);
      }
      first = false;
    }
    if (isSetLoadMemLimit()) {
      if (!first) sb.append(", ");
      sb.append("loadMemLimit:");
      sb.append(this.loadMemLimit);
      first = false;
    }
    if (isSetIsTempPartition()) {
      if (!first) sb.append(", ");
      sb.append("isTempPartition:");
      sb.append(this.isTempPartition);
      first = false;
    }
    if (isSetStrip_outer_array()) {
      if (!first) sb.append(", ");
      sb.append("strip_outer_array:");
      sb.append(this.strip_outer_array);
      first = false;
    }
    if (isSetJsonpaths()) {
      if (!first) sb.append(", ");
      sb.append("jsonpaths:");
      if (this.jsonpaths == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonpaths);
      }
      first = false;
    }
    if (isSetThrift_rpc_timeout_ms()) {
      if (!first) sb.append(", ");
      sb.append("thrift_rpc_timeout_ms:");
      sb.append(this.thrift_rpc_timeout_ms);
      first = false;
    }
    if (isSetJson_root()) {
      if (!first) sb.append(", ");
      sb.append("json_root:");
      if (this.json_root == null) {
        sb.append("null");
      } else {
        sb.append(this.json_root);
      }
      first = false;
    }
    if (isSetPartial_update()) {
      if (!first) sb.append(", ");
      sb.append("partial_update:");
      sb.append(this.partial_update);
      first = false;
    }
    if (isSetTransmission_compression_type()) {
      if (!first) sb.append(", ");
      sb.append("transmission_compression_type:");
      if (this.transmission_compression_type == null) {
        sb.append("null");
      } else {
        sb.append(this.transmission_compression_type);
      }
      first = false;
    }
    if (isSetLoad_dop()) {
      if (!first) sb.append(", ");
      sb.append("load_dop:");
      sb.append(this.load_dop);
      first = false;
    }
    if (isSetEnable_replicated_storage()) {
      if (!first) sb.append(", ");
      sb.append("enable_replicated_storage:");
      sb.append(this.enable_replicated_storage);
      first = false;
    }
    if (isSetMerge_condition()) {
      if (!first) sb.append(", ");
      sb.append("merge_condition:");
      if (this.merge_condition == null) {
        sb.append("null");
      } else {
        sb.append(this.merge_condition);
      }
      first = false;
    }
    if (isSetLog_rejected_record_num()) {
      if (!first) sb.append(", ");
      sb.append("log_rejected_record_num:");
      sb.append(this.log_rejected_record_num);
      first = false;
    }
    if (isSetRowDelimiter()) {
      if (!first) sb.append(", ");
      sb.append("rowDelimiter:");
      if (this.rowDelimiter == null) {
        sb.append("null");
      } else {
        sb.append(this.rowDelimiter);
      }
      first = false;
    }
    if (isSetSkipHeader()) {
      if (!first) sb.append(", ");
      sb.append("skipHeader:");
      sb.append(this.skipHeader);
      first = false;
    }
    if (isSetTrimSpace()) {
      if (!first) sb.append(", ");
      sb.append("trimSpace:");
      sb.append(this.trimSpace);
      first = false;
    }
    if (isSetEnclose()) {
      if (!first) sb.append(", ");
      sb.append("enclose:");
      sb.append(this.enclose);
      first = false;
    }
    if (isSetEscape()) {
      if (!first) sb.append(", ");
      sb.append("escape:");
      sb.append(this.escape);
      first = false;
    }
    if (isSetPartial_update_mode()) {
      if (!first) sb.append(", ");
      sb.append("partial_update_mode:");
      if (this.partial_update_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.partial_update_mode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (user == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' was not present! Struct: " + toString());
    }
    if (passwd == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'passwd' was not present! Struct: " + toString());
    }
    if (db == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db' was not present! Struct: " + toString());
    }
    if (tbl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tbl' was not present! Struct: " + toString());
    }
    if (loadId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'loadId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'txnId' because it's a primitive and you chose the non-beans generator.
    if (fileType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileType' was not present! Struct: " + toString());
    }
    if (formatType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'formatType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (loadId != null) {
      loadId.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStreamLoadPutRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamLoadPutRequestStandardScheme getScheme() {
      return new TStreamLoadPutRequestStandardScheme();
    }
  }

  private static class TStreamLoadPutRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TStreamLoadPutRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TStreamLoadPutRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cluster = iprot.readString();
              struct.setClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passwd = iprot.readString();
              struct.setPasswdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tbl = iprot.readString();
              struct.setTblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_ip = iprot.readString();
              struct.setUser_ipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.loadId = new io.datafibre.fibre.thrift.TUniqueId();
              struct.loadId.read(iprot);
              struct.setLoadIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txnId = iprot.readI64();
              struct.setTxnIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileType = io.datafibre.fibre.thrift.TFileType.findByValue(iprot.readI32());
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FORMAT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.formatType = io.datafibre.fibre.thrift.TFileFormatType.findByValue(iprot.readI32());
              struct.setFormatTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columns = iprot.readString();
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // WHERE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.where = iprot.readString();
              struct.setWhereIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COLUMN_SEPARATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnSeparator = iprot.readString();
              struct.setColumnSeparatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partitions = iprot.readString();
              struct.setPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // AUTH_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.auth_code = iprot.readI64();
              struct.setAuth_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // NEGATIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.negative = iprot.readBool();
              struct.setNegativeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeout = iprot.readI32();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // STRICT_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.strictMode = iprot.readBool();
              struct.setStrictModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TIMEZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timezone = iprot.readString();
              struct.setTimezoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LOAD_MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loadMemLimit = iprot.readI64();
              struct.setLoadMemLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // IS_TEMP_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTempPartition = iprot.readBool();
              struct.setIsTempPartitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // STRIP_OUTER_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.strip_outer_array = iprot.readBool();
              struct.setStrip_outer_arrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // JSONPATHS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jsonpaths = iprot.readString();
              struct.setJsonpathsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // THRIFT_RPC_TIMEOUT_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.thrift_rpc_timeout_ms = iprot.readI64();
              struct.setThrift_rpc_timeout_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // JSON_ROOT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.json_root = iprot.readString();
              struct.setJson_rootIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PARTIAL_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.partial_update = iprot.readBool();
              struct.setPartial_updateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // TRANSMISSION_COMPRESSION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transmission_compression_type = iprot.readString();
              struct.setTransmission_compression_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // LOAD_DOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.load_dop = iprot.readI32();
              struct.setLoad_dopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ENABLE_REPLICATED_STORAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_replicated_storage = iprot.readBool();
              struct.setEnable_replicated_storageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // MERGE_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merge_condition = iprot.readString();
              struct.setMerge_conditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // LOG_REJECTED_RECORD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.log_rejected_record_num = iprot.readI64();
              struct.setLog_rejected_record_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // ROW_DELIMITER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rowDelimiter = iprot.readString();
              struct.setRowDelimiterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // SKIP_HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.skipHeader = iprot.readI64();
              struct.setSkipHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // TRIM_SPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.trimSpace = iprot.readBool();
              struct.setTrimSpaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // ENCLOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.enclose = iprot.readByte();
              struct.setEncloseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // ESCAPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.escape = iprot.readByte();
              struct.setEscapeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // PARTIAL_UPDATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partial_update_mode = io.datafibre.fibre.thrift.TPartialUpdateMode.findByValue(iprot.readI32());
              struct.setPartial_update_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTxnId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'txnId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TStreamLoadPutRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cluster != null) {
        if (struct.isSetCluster()) {
          oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
          oprot.writeString(struct.cluster);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(struct.user);
        oprot.writeFieldEnd();
      }
      if (struct.passwd != null) {
        oprot.writeFieldBegin(PASSWD_FIELD_DESC);
        oprot.writeString(struct.passwd);
        oprot.writeFieldEnd();
      }
      if (struct.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(struct.db);
        oprot.writeFieldEnd();
      }
      if (struct.tbl != null) {
        oprot.writeFieldBegin(TBL_FIELD_DESC);
        oprot.writeString(struct.tbl);
        oprot.writeFieldEnd();
      }
      if (struct.user_ip != null) {
        if (struct.isSetUser_ip()) {
          oprot.writeFieldBegin(USER_IP_FIELD_DESC);
          oprot.writeString(struct.user_ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.loadId != null) {
        oprot.writeFieldBegin(LOAD_ID_FIELD_DESC);
        struct.loadId.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
      oprot.writeI64(struct.txnId);
      oprot.writeFieldEnd();
      if (struct.fileType != null) {
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.fileType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.formatType != null) {
        oprot.writeFieldBegin(FORMAT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.formatType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.path != null) {
        if (struct.isSetPath()) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columns != null) {
        if (struct.isSetColumns()) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          oprot.writeString(struct.columns);
          oprot.writeFieldEnd();
        }
      }
      if (struct.where != null) {
        if (struct.isSetWhere()) {
          oprot.writeFieldBegin(WHERE_FIELD_DESC);
          oprot.writeString(struct.where);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columnSeparator != null) {
        if (struct.isSetColumnSeparator()) {
          oprot.writeFieldBegin(COLUMN_SEPARATOR_FIELD_DESC);
          oprot.writeString(struct.columnSeparator);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partitions != null) {
        if (struct.isSetPartitions()) {
          oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
          oprot.writeString(struct.partitions);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAuth_code()) {
        oprot.writeFieldBegin(AUTH_CODE_FIELD_DESC);
        oprot.writeI64(struct.auth_code);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNegative()) {
        oprot.writeFieldBegin(NEGATIVE_FIELD_DESC);
        oprot.writeBool(struct.negative);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeout()) {
        oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
        oprot.writeI32(struct.timeout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStrictMode()) {
        oprot.writeFieldBegin(STRICT_MODE_FIELD_DESC);
        oprot.writeBool(struct.strictMode);
        oprot.writeFieldEnd();
      }
      if (struct.timezone != null) {
        if (struct.isSetTimezone()) {
          oprot.writeFieldBegin(TIMEZONE_FIELD_DESC);
          oprot.writeString(struct.timezone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLoadMemLimit()) {
        oprot.writeFieldBegin(LOAD_MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.loadMemLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsTempPartition()) {
        oprot.writeFieldBegin(IS_TEMP_PARTITION_FIELD_DESC);
        oprot.writeBool(struct.isTempPartition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStrip_outer_array()) {
        oprot.writeFieldBegin(STRIP_OUTER_ARRAY_FIELD_DESC);
        oprot.writeBool(struct.strip_outer_array);
        oprot.writeFieldEnd();
      }
      if (struct.jsonpaths != null) {
        if (struct.isSetJsonpaths()) {
          oprot.writeFieldBegin(JSONPATHS_FIELD_DESC);
          oprot.writeString(struct.jsonpaths);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetThrift_rpc_timeout_ms()) {
        oprot.writeFieldBegin(THRIFT_RPC_TIMEOUT_MS_FIELD_DESC);
        oprot.writeI64(struct.thrift_rpc_timeout_ms);
        oprot.writeFieldEnd();
      }
      if (struct.json_root != null) {
        if (struct.isSetJson_root()) {
          oprot.writeFieldBegin(JSON_ROOT_FIELD_DESC);
          oprot.writeString(struct.json_root);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPartial_update()) {
        oprot.writeFieldBegin(PARTIAL_UPDATE_FIELD_DESC);
        oprot.writeBool(struct.partial_update);
        oprot.writeFieldEnd();
      }
      if (struct.transmission_compression_type != null) {
        if (struct.isSetTransmission_compression_type()) {
          oprot.writeFieldBegin(TRANSMISSION_COMPRESSION_TYPE_FIELD_DESC);
          oprot.writeString(struct.transmission_compression_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLoad_dop()) {
        oprot.writeFieldBegin(LOAD_DOP_FIELD_DESC);
        oprot.writeI32(struct.load_dop);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_replicated_storage()) {
        oprot.writeFieldBegin(ENABLE_REPLICATED_STORAGE_FIELD_DESC);
        oprot.writeBool(struct.enable_replicated_storage);
        oprot.writeFieldEnd();
      }
      if (struct.merge_condition != null) {
        if (struct.isSetMerge_condition()) {
          oprot.writeFieldBegin(MERGE_CONDITION_FIELD_DESC);
          oprot.writeString(struct.merge_condition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLog_rejected_record_num()) {
        oprot.writeFieldBegin(LOG_REJECTED_RECORD_NUM_FIELD_DESC);
        oprot.writeI64(struct.log_rejected_record_num);
        oprot.writeFieldEnd();
      }
      if (struct.rowDelimiter != null) {
        if (struct.isSetRowDelimiter()) {
          oprot.writeFieldBegin(ROW_DELIMITER_FIELD_DESC);
          oprot.writeString(struct.rowDelimiter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSkipHeader()) {
        oprot.writeFieldBegin(SKIP_HEADER_FIELD_DESC);
        oprot.writeI64(struct.skipHeader);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTrimSpace()) {
        oprot.writeFieldBegin(TRIM_SPACE_FIELD_DESC);
        oprot.writeBool(struct.trimSpace);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnclose()) {
        oprot.writeFieldBegin(ENCLOSE_FIELD_DESC);
        oprot.writeByte(struct.enclose);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEscape()) {
        oprot.writeFieldBegin(ESCAPE_FIELD_DESC);
        oprot.writeByte(struct.escape);
        oprot.writeFieldEnd();
      }
      if (struct.partial_update_mode != null) {
        if (struct.isSetPartial_update_mode()) {
          oprot.writeFieldBegin(PARTIAL_UPDATE_MODE_FIELD_DESC);
          oprot.writeI32(struct.partial_update_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStreamLoadPutRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamLoadPutRequestTupleScheme getScheme() {
      return new TStreamLoadPutRequestTupleScheme();
    }
  }

  private static class TStreamLoadPutRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TStreamLoadPutRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStreamLoadPutRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.user);
      oprot.writeString(struct.passwd);
      oprot.writeString(struct.db);
      oprot.writeString(struct.tbl);
      struct.loadId.write(oprot);
      oprot.writeI64(struct.txnId);
      oprot.writeI32(struct.fileType.getValue());
      oprot.writeI32(struct.formatType.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCluster()) {
        optionals.set(0);
      }
      if (struct.isSetUser_ip()) {
        optionals.set(1);
      }
      if (struct.isSetPath()) {
        optionals.set(2);
      }
      if (struct.isSetColumns()) {
        optionals.set(3);
      }
      if (struct.isSetWhere()) {
        optionals.set(4);
      }
      if (struct.isSetColumnSeparator()) {
        optionals.set(5);
      }
      if (struct.isSetPartitions()) {
        optionals.set(6);
      }
      if (struct.isSetAuth_code()) {
        optionals.set(7);
      }
      if (struct.isSetNegative()) {
        optionals.set(8);
      }
      if (struct.isSetTimeout()) {
        optionals.set(9);
      }
      if (struct.isSetStrictMode()) {
        optionals.set(10);
      }
      if (struct.isSetTimezone()) {
        optionals.set(11);
      }
      if (struct.isSetLoadMemLimit()) {
        optionals.set(12);
      }
      if (struct.isSetIsTempPartition()) {
        optionals.set(13);
      }
      if (struct.isSetStrip_outer_array()) {
        optionals.set(14);
      }
      if (struct.isSetJsonpaths()) {
        optionals.set(15);
      }
      if (struct.isSetThrift_rpc_timeout_ms()) {
        optionals.set(16);
      }
      if (struct.isSetJson_root()) {
        optionals.set(17);
      }
      if (struct.isSetPartial_update()) {
        optionals.set(18);
      }
      if (struct.isSetTransmission_compression_type()) {
        optionals.set(19);
      }
      if (struct.isSetLoad_dop()) {
        optionals.set(20);
      }
      if (struct.isSetEnable_replicated_storage()) {
        optionals.set(21);
      }
      if (struct.isSetMerge_condition()) {
        optionals.set(22);
      }
      if (struct.isSetLog_rejected_record_num()) {
        optionals.set(23);
      }
      if (struct.isSetRowDelimiter()) {
        optionals.set(24);
      }
      if (struct.isSetSkipHeader()) {
        optionals.set(25);
      }
      if (struct.isSetTrimSpace()) {
        optionals.set(26);
      }
      if (struct.isSetEnclose()) {
        optionals.set(27);
      }
      if (struct.isSetEscape()) {
        optionals.set(28);
      }
      if (struct.isSetPartial_update_mode()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetCluster()) {
        oprot.writeString(struct.cluster);
      }
      if (struct.isSetUser_ip()) {
        oprot.writeString(struct.user_ip);
      }
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetColumns()) {
        oprot.writeString(struct.columns);
      }
      if (struct.isSetWhere()) {
        oprot.writeString(struct.where);
      }
      if (struct.isSetColumnSeparator()) {
        oprot.writeString(struct.columnSeparator);
      }
      if (struct.isSetPartitions()) {
        oprot.writeString(struct.partitions);
      }
      if (struct.isSetAuth_code()) {
        oprot.writeI64(struct.auth_code);
      }
      if (struct.isSetNegative()) {
        oprot.writeBool(struct.negative);
      }
      if (struct.isSetTimeout()) {
        oprot.writeI32(struct.timeout);
      }
      if (struct.isSetStrictMode()) {
        oprot.writeBool(struct.strictMode);
      }
      if (struct.isSetTimezone()) {
        oprot.writeString(struct.timezone);
      }
      if (struct.isSetLoadMemLimit()) {
        oprot.writeI64(struct.loadMemLimit);
      }
      if (struct.isSetIsTempPartition()) {
        oprot.writeBool(struct.isTempPartition);
      }
      if (struct.isSetStrip_outer_array()) {
        oprot.writeBool(struct.strip_outer_array);
      }
      if (struct.isSetJsonpaths()) {
        oprot.writeString(struct.jsonpaths);
      }
      if (struct.isSetThrift_rpc_timeout_ms()) {
        oprot.writeI64(struct.thrift_rpc_timeout_ms);
      }
      if (struct.isSetJson_root()) {
        oprot.writeString(struct.json_root);
      }
      if (struct.isSetPartial_update()) {
        oprot.writeBool(struct.partial_update);
      }
      if (struct.isSetTransmission_compression_type()) {
        oprot.writeString(struct.transmission_compression_type);
      }
      if (struct.isSetLoad_dop()) {
        oprot.writeI32(struct.load_dop);
      }
      if (struct.isSetEnable_replicated_storage()) {
        oprot.writeBool(struct.enable_replicated_storage);
      }
      if (struct.isSetMerge_condition()) {
        oprot.writeString(struct.merge_condition);
      }
      if (struct.isSetLog_rejected_record_num()) {
        oprot.writeI64(struct.log_rejected_record_num);
      }
      if (struct.isSetRowDelimiter()) {
        oprot.writeString(struct.rowDelimiter);
      }
      if (struct.isSetSkipHeader()) {
        oprot.writeI64(struct.skipHeader);
      }
      if (struct.isSetTrimSpace()) {
        oprot.writeBool(struct.trimSpace);
      }
      if (struct.isSetEnclose()) {
        oprot.writeByte(struct.enclose);
      }
      if (struct.isSetEscape()) {
        oprot.writeByte(struct.escape);
      }
      if (struct.isSetPartial_update_mode()) {
        oprot.writeI32(struct.partial_update_mode.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStreamLoadPutRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.user = iprot.readString();
      struct.setUserIsSet(true);
      struct.passwd = iprot.readString();
      struct.setPasswdIsSet(true);
      struct.db = iprot.readString();
      struct.setDbIsSet(true);
      struct.tbl = iprot.readString();
      struct.setTblIsSet(true);
      struct.loadId = new io.datafibre.fibre.thrift.TUniqueId();
      struct.loadId.read(iprot);
      struct.setLoadIdIsSet(true);
      struct.txnId = iprot.readI64();
      struct.setTxnIdIsSet(true);
      struct.fileType = io.datafibre.fibre.thrift.TFileType.findByValue(iprot.readI32());
      struct.setFileTypeIsSet(true);
      struct.formatType = io.datafibre.fibre.thrift.TFileFormatType.findByValue(iprot.readI32());
      struct.setFormatTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.cluster = iprot.readString();
        struct.setClusterIsSet(true);
      }
      if (incoming.get(1)) {
        struct.user_ip = iprot.readString();
        struct.setUser_ipIsSet(true);
      }
      if (incoming.get(2)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(3)) {
        struct.columns = iprot.readString();
        struct.setColumnsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.where = iprot.readString();
        struct.setWhereIsSet(true);
      }
      if (incoming.get(5)) {
        struct.columnSeparator = iprot.readString();
        struct.setColumnSeparatorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.partitions = iprot.readString();
        struct.setPartitionsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.auth_code = iprot.readI64();
        struct.setAuth_codeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.negative = iprot.readBool();
        struct.setNegativeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.timeout = iprot.readI32();
        struct.setTimeoutIsSet(true);
      }
      if (incoming.get(10)) {
        struct.strictMode = iprot.readBool();
        struct.setStrictModeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.timezone = iprot.readString();
        struct.setTimezoneIsSet(true);
      }
      if (incoming.get(12)) {
        struct.loadMemLimit = iprot.readI64();
        struct.setLoadMemLimitIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isTempPartition = iprot.readBool();
        struct.setIsTempPartitionIsSet(true);
      }
      if (incoming.get(14)) {
        struct.strip_outer_array = iprot.readBool();
        struct.setStrip_outer_arrayIsSet(true);
      }
      if (incoming.get(15)) {
        struct.jsonpaths = iprot.readString();
        struct.setJsonpathsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.thrift_rpc_timeout_ms = iprot.readI64();
        struct.setThrift_rpc_timeout_msIsSet(true);
      }
      if (incoming.get(17)) {
        struct.json_root = iprot.readString();
        struct.setJson_rootIsSet(true);
      }
      if (incoming.get(18)) {
        struct.partial_update = iprot.readBool();
        struct.setPartial_updateIsSet(true);
      }
      if (incoming.get(19)) {
        struct.transmission_compression_type = iprot.readString();
        struct.setTransmission_compression_typeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.load_dop = iprot.readI32();
        struct.setLoad_dopIsSet(true);
      }
      if (incoming.get(21)) {
        struct.enable_replicated_storage = iprot.readBool();
        struct.setEnable_replicated_storageIsSet(true);
      }
      if (incoming.get(22)) {
        struct.merge_condition = iprot.readString();
        struct.setMerge_conditionIsSet(true);
      }
      if (incoming.get(23)) {
        struct.log_rejected_record_num = iprot.readI64();
        struct.setLog_rejected_record_numIsSet(true);
      }
      if (incoming.get(24)) {
        struct.rowDelimiter = iprot.readString();
        struct.setRowDelimiterIsSet(true);
      }
      if (incoming.get(25)) {
        struct.skipHeader = iprot.readI64();
        struct.setSkipHeaderIsSet(true);
      }
      if (incoming.get(26)) {
        struct.trimSpace = iprot.readBool();
        struct.setTrimSpaceIsSet(true);
      }
      if (incoming.get(27)) {
        struct.enclose = iprot.readByte();
        struct.setEncloseIsSet(true);
      }
      if (incoming.get(28)) {
        struct.escape = iprot.readByte();
        struct.setEscapeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.partial_update_mode = io.datafibre.fibre.thrift.TPartialUpdateMode.findByValue(iprot.readI32());
        struct.setPartial_update_modeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

