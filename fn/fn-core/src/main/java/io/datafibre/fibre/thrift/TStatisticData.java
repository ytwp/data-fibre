/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TStatisticData implements org.apache.thrift.TBase<TStatisticData, TStatisticData._Fields>, java.io.Serializable, Cloneable, Comparable<TStatisticData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStatisticData");

  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dbId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tableId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("columnName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("rowCount", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DATA_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSize", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField COUNT_DISTINCT_FIELD_DESC = new org.apache.thrift.protocol.TField("countDistinct", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField NULL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("nullCount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("min", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField HISTOGRAM_FIELD_DESC = new org.apache.thrift.protocol.TField("histogram", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DICT_FIELD_DESC = new org.apache.thrift.protocol.TField("dict", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField META_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("meta_version", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionId", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField HLL_FIELD_DESC = new org.apache.thrift.protocol.TField("hll", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PARTITION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionName", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TStatisticDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TStatisticDataTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // optional
  public long dbId; // optional
  public long tableId; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String columnName; // optional
  public long rowCount; // optional
  public double dataSize; // optional
  public long countDistinct; // optional
  public long nullCount; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String max; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String min; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String histogram; // optional
  public @org.apache.thrift.annotation.Nullable TGlobalDict dict; // optional
  public long meta_version; // optional
  public long partitionId; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer hll; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String partitionName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UPDATE_TIME((short)1, "updateTime"),
    DB_ID((short)2, "dbId"),
    TABLE_ID((short)3, "tableId"),
    COLUMN_NAME((short)4, "columnName"),
    ROW_COUNT((short)5, "rowCount"),
    DATA_SIZE((short)6, "dataSize"),
    COUNT_DISTINCT((short)7, "countDistinct"),
    NULL_COUNT((short)8, "nullCount"),
    MAX((short)9, "max"),
    MIN((short)10, "min"),
    HISTOGRAM((short)11, "histogram"),
    DICT((short)12, "dict"),
    META_VERSION((short)13, "meta_version"),
    PARTITION_ID((short)14, "partitionId"),
    HLL((short)15, "hll"),
    PARTITION_NAME((short)16, "partitionName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UPDATE_TIME
          return UPDATE_TIME;
        case 2: // DB_ID
          return DB_ID;
        case 3: // TABLE_ID
          return TABLE_ID;
        case 4: // COLUMN_NAME
          return COLUMN_NAME;
        case 5: // ROW_COUNT
          return ROW_COUNT;
        case 6: // DATA_SIZE
          return DATA_SIZE;
        case 7: // COUNT_DISTINCT
          return COUNT_DISTINCT;
        case 8: // NULL_COUNT
          return NULL_COUNT;
        case 9: // MAX
          return MAX;
        case 10: // MIN
          return MIN;
        case 11: // HISTOGRAM
          return HISTOGRAM;
        case 12: // DICT
          return DICT;
        case 13: // META_VERSION
          return META_VERSION;
        case 14: // PARTITION_ID
          return PARTITION_ID;
        case 15: // HLL
          return HLL;
        case 16: // PARTITION_NAME
          return PARTITION_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DBID_ISSET_ID = 0;
  private static final int __TABLEID_ISSET_ID = 1;
  private static final int __ROWCOUNT_ISSET_ID = 2;
  private static final int __DATASIZE_ISSET_ID = 3;
  private static final int __COUNTDISTINCT_ISSET_ID = 4;
  private static final int __NULLCOUNT_ISSET_ID = 5;
  private static final int __META_VERSION_ISSET_ID = 6;
  private static final int __PARTITIONID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.UPDATE_TIME,_Fields.DB_ID,_Fields.TABLE_ID,_Fields.COLUMN_NAME,_Fields.ROW_COUNT,_Fields.DATA_SIZE,_Fields.COUNT_DISTINCT,_Fields.NULL_COUNT,_Fields.MAX,_Fields.MIN,_Fields.HISTOGRAM,_Fields.DICT,_Fields.META_VERSION,_Fields.PARTITION_ID,_Fields.HLL,_Fields.PARTITION_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_ID, new org.apache.thrift.meta_data.FieldMetaData("dbId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tableId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("columnName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("rowCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_SIZE, new org.apache.thrift.meta_data.FieldMetaData("dataSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COUNT_DISTINCT, new org.apache.thrift.meta_data.FieldMetaData("countDistinct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NULL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("nullCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("min", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HISTOGRAM, new org.apache.thrift.meta_data.FieldMetaData("histogram", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DICT, new org.apache.thrift.meta_data.FieldMetaData("dict", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGlobalDict.class)));
    tmpMap.put(_Fields.META_VERSION, new org.apache.thrift.meta_data.FieldMetaData("meta_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partitionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HLL, new org.apache.thrift.meta_data.FieldMetaData("hll", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PARTITION_NAME, new org.apache.thrift.meta_data.FieldMetaData("partitionName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStatisticData.class, metaDataMap);
  }

  public TStatisticData() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStatisticData(TStatisticData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.dbId = other.dbId;
    this.tableId = other.tableId;
    if (other.isSetColumnName()) {
      this.columnName = other.columnName;
    }
    this.rowCount = other.rowCount;
    this.dataSize = other.dataSize;
    this.countDistinct = other.countDistinct;
    this.nullCount = other.nullCount;
    if (other.isSetMax()) {
      this.max = other.max;
    }
    if (other.isSetMin()) {
      this.min = other.min;
    }
    if (other.isSetHistogram()) {
      this.histogram = other.histogram;
    }
    if (other.isSetDict()) {
      this.dict = new TGlobalDict(other.dict);
    }
    this.meta_version = other.meta_version;
    this.partitionId = other.partitionId;
    if (other.isSetHll()) {
      this.hll = org.apache.thrift.TBaseHelper.copyBinary(other.hll);
    }
    if (other.isSetPartitionName()) {
      this.partitionName = other.partitionName;
    }
  }

  @Override
  public TStatisticData deepCopy() {
    return new TStatisticData(this);
  }

  @Override
  public void clear() {
    this.updateTime = null;
    setDbIdIsSet(false);
    this.dbId = 0;
    setTableIdIsSet(false);
    this.tableId = 0;
    this.columnName = null;
    setRowCountIsSet(false);
    this.rowCount = 0;
    setDataSizeIsSet(false);
    this.dataSize = 0.0;
    setCountDistinctIsSet(false);
    this.countDistinct = 0;
    setNullCountIsSet(false);
    this.nullCount = 0;
    this.max = null;
    this.min = null;
    this.histogram = null;
    this.dict = null;
    setMeta_versionIsSet(false);
    this.meta_version = 0;
    setPartitionIdIsSet(false);
    this.partitionId = 0;
    this.hll = null;
    this.partitionName = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUpdateTime() {
    return this.updateTime;
  }

  public TStatisticData setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public long getDbId() {
    return this.dbId;
  }

  public TStatisticData setDbId(long dbId) {
    this.dbId = dbId;
    setDbIdIsSet(true);
    return this;
  }

  public void unsetDbId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DBID_ISSET_ID);
  }

  /** Returns true if field dbId is set (has been assigned a value) and false otherwise */
  public boolean isSetDbId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DBID_ISSET_ID);
  }

  public void setDbIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DBID_ISSET_ID, value);
  }

  public long getTableId() {
    return this.tableId;
  }

  public TStatisticData setTableId(long tableId) {
    this.tableId = tableId;
    setTableIdIsSet(true);
    return this;
  }

  public void unsetTableId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLEID_ISSET_ID);
  }

  /** Returns true if field tableId is set (has been assigned a value) and false otherwise */
  public boolean isSetTableId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLEID_ISSET_ID);
  }

  public void setTableIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLEID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumnName() {
    return this.columnName;
  }

  public TStatisticData setColumnName(@org.apache.thrift.annotation.Nullable java.lang.String columnName) {
    this.columnName = columnName;
    return this;
  }

  public void unsetColumnName() {
    this.columnName = null;
  }

  /** Returns true if field columnName is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnName() {
    return this.columnName != null;
  }

  public void setColumnNameIsSet(boolean value) {
    if (!value) {
      this.columnName = null;
    }
  }

  public long getRowCount() {
    return this.rowCount;
  }

  public TStatisticData setRowCount(long rowCount) {
    this.rowCount = rowCount;
    setRowCountIsSet(true);
    return this;
  }

  public void unsetRowCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  /** Returns true if field rowCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRowCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  public void setRowCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROWCOUNT_ISSET_ID, value);
  }

  public double getDataSize() {
    return this.dataSize;
  }

  public TStatisticData setDataSize(double dataSize) {
    this.dataSize = dataSize;
    setDataSizeIsSet(true);
    return this;
  }

  public void unsetDataSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATASIZE_ISSET_ID);
  }

  /** Returns true if field dataSize is set (has been assigned a value) and false otherwise */
  public boolean isSetDataSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATASIZE_ISSET_ID);
  }

  public void setDataSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATASIZE_ISSET_ID, value);
  }

  public long getCountDistinct() {
    return this.countDistinct;
  }

  public TStatisticData setCountDistinct(long countDistinct) {
    this.countDistinct = countDistinct;
    setCountDistinctIsSet(true);
    return this;
  }

  public void unsetCountDistinct() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNTDISTINCT_ISSET_ID);
  }

  /** Returns true if field countDistinct is set (has been assigned a value) and false otherwise */
  public boolean isSetCountDistinct() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNTDISTINCT_ISSET_ID);
  }

  public void setCountDistinctIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNTDISTINCT_ISSET_ID, value);
  }

  public long getNullCount() {
    return this.nullCount;
  }

  public TStatisticData setNullCount(long nullCount) {
    this.nullCount = nullCount;
    setNullCountIsSet(true);
    return this;
  }

  public void unsetNullCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NULLCOUNT_ISSET_ID);
  }

  /** Returns true if field nullCount is set (has been assigned a value) and false otherwise */
  public boolean isSetNullCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NULLCOUNT_ISSET_ID);
  }

  public void setNullCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NULLCOUNT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMax() {
    return this.max;
  }

  public TStatisticData setMax(@org.apache.thrift.annotation.Nullable java.lang.String max) {
    this.max = max;
    return this;
  }

  public void unsetMax() {
    this.max = null;
  }

  /** Returns true if field max is set (has been assigned a value) and false otherwise */
  public boolean isSetMax() {
    return this.max != null;
  }

  public void setMaxIsSet(boolean value) {
    if (!value) {
      this.max = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMin() {
    return this.min;
  }

  public TStatisticData setMin(@org.apache.thrift.annotation.Nullable java.lang.String min) {
    this.min = min;
    return this;
  }

  public void unsetMin() {
    this.min = null;
  }

  /** Returns true if field min is set (has been assigned a value) and false otherwise */
  public boolean isSetMin() {
    return this.min != null;
  }

  public void setMinIsSet(boolean value) {
    if (!value) {
      this.min = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHistogram() {
    return this.histogram;
  }

  public TStatisticData setHistogram(@org.apache.thrift.annotation.Nullable java.lang.String histogram) {
    this.histogram = histogram;
    return this;
  }

  public void unsetHistogram() {
    this.histogram = null;
  }

  /** Returns true if field histogram is set (has been assigned a value) and false otherwise */
  public boolean isSetHistogram() {
    return this.histogram != null;
  }

  public void setHistogramIsSet(boolean value) {
    if (!value) {
      this.histogram = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TGlobalDict getDict() {
    return this.dict;
  }

  public TStatisticData setDict(@org.apache.thrift.annotation.Nullable TGlobalDict dict) {
    this.dict = dict;
    return this;
  }

  public void unsetDict() {
    this.dict = null;
  }

  /** Returns true if field dict is set (has been assigned a value) and false otherwise */
  public boolean isSetDict() {
    return this.dict != null;
  }

  public void setDictIsSet(boolean value) {
    if (!value) {
      this.dict = null;
    }
  }

  public long getMeta_version() {
    return this.meta_version;
  }

  public TStatisticData setMeta_version(long meta_version) {
    this.meta_version = meta_version;
    setMeta_versionIsSet(true);
    return this;
  }

  public void unsetMeta_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __META_VERSION_ISSET_ID);
  }

  /** Returns true if field meta_version is set (has been assigned a value) and false otherwise */
  public boolean isSetMeta_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __META_VERSION_ISSET_ID);
  }

  public void setMeta_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __META_VERSION_ISSET_ID, value);
  }

  public long getPartitionId() {
    return this.partitionId;
  }

  public TStatisticData setPartitionId(long partitionId) {
    this.partitionId = partitionId;
    setPartitionIdIsSet(true);
    return this;
  }

  public void unsetPartitionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITIONID_ISSET_ID);
  }

  /** Returns true if field partitionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITIONID_ISSET_ID);
  }

  public void setPartitionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITIONID_ISSET_ID, value);
  }

  public byte[] getHll() {
    setHll(org.apache.thrift.TBaseHelper.rightSize(hll));
    return hll == null ? null : hll.array();
  }

  public java.nio.ByteBuffer bufferForHll() {
    return org.apache.thrift.TBaseHelper.copyBinary(hll);
  }

  public TStatisticData setHll(byte[] hll) {
    this.hll = hll == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(hll.clone());
    return this;
  }

  public TStatisticData setHll(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer hll) {
    this.hll = org.apache.thrift.TBaseHelper.copyBinary(hll);
    return this;
  }

  public void unsetHll() {
    this.hll = null;
  }

  /** Returns true if field hll is set (has been assigned a value) and false otherwise */
  public boolean isSetHll() {
    return this.hll != null;
  }

  public void setHllIsSet(boolean value) {
    if (!value) {
      this.hll = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartitionName() {
    return this.partitionName;
  }

  public TStatisticData setPartitionName(@org.apache.thrift.annotation.Nullable java.lang.String partitionName) {
    this.partitionName = partitionName;
    return this;
  }

  public void unsetPartitionName() {
    this.partitionName = null;
  }

  /** Returns true if field partitionName is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionName() {
    return this.partitionName != null;
  }

  public void setPartitionNameIsSet(boolean value) {
    if (!value) {
      this.partitionName = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((java.lang.String)value);
      }
      break;

    case DB_ID:
      if (value == null) {
        unsetDbId();
      } else {
        setDbId((java.lang.Long)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTableId();
      } else {
        setTableId((java.lang.Long)value);
      }
      break;

    case COLUMN_NAME:
      if (value == null) {
        unsetColumnName();
      } else {
        setColumnName((java.lang.String)value);
      }
      break;

    case ROW_COUNT:
      if (value == null) {
        unsetRowCount();
      } else {
        setRowCount((java.lang.Long)value);
      }
      break;

    case DATA_SIZE:
      if (value == null) {
        unsetDataSize();
      } else {
        setDataSize((java.lang.Double)value);
      }
      break;

    case COUNT_DISTINCT:
      if (value == null) {
        unsetCountDistinct();
      } else {
        setCountDistinct((java.lang.Long)value);
      }
      break;

    case NULL_COUNT:
      if (value == null) {
        unsetNullCount();
      } else {
        setNullCount((java.lang.Long)value);
      }
      break;

    case MAX:
      if (value == null) {
        unsetMax();
      } else {
        setMax((java.lang.String)value);
      }
      break;

    case MIN:
      if (value == null) {
        unsetMin();
      } else {
        setMin((java.lang.String)value);
      }
      break;

    case HISTOGRAM:
      if (value == null) {
        unsetHistogram();
      } else {
        setHistogram((java.lang.String)value);
      }
      break;

    case DICT:
      if (value == null) {
        unsetDict();
      } else {
        setDict((TGlobalDict)value);
      }
      break;

    case META_VERSION:
      if (value == null) {
        unsetMeta_version();
      } else {
        setMeta_version((java.lang.Long)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartitionId();
      } else {
        setPartitionId((java.lang.Long)value);
      }
      break;

    case HLL:
      if (value == null) {
        unsetHll();
      } else {
        if (value instanceof byte[]) {
          setHll((byte[])value);
        } else {
          setHll((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PARTITION_NAME:
      if (value == null) {
        unsetPartitionName();
      } else {
        setPartitionName((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UPDATE_TIME:
      return getUpdateTime();

    case DB_ID:
      return getDbId();

    case TABLE_ID:
      return getTableId();

    case COLUMN_NAME:
      return getColumnName();

    case ROW_COUNT:
      return getRowCount();

    case DATA_SIZE:
      return getDataSize();

    case COUNT_DISTINCT:
      return getCountDistinct();

    case NULL_COUNT:
      return getNullCount();

    case MAX:
      return getMax();

    case MIN:
      return getMin();

    case HISTOGRAM:
      return getHistogram();

    case DICT:
      return getDict();

    case META_VERSION:
      return getMeta_version();

    case PARTITION_ID:
      return getPartitionId();

    case HLL:
      return getHll();

    case PARTITION_NAME:
      return getPartitionName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UPDATE_TIME:
      return isSetUpdateTime();
    case DB_ID:
      return isSetDbId();
    case TABLE_ID:
      return isSetTableId();
    case COLUMN_NAME:
      return isSetColumnName();
    case ROW_COUNT:
      return isSetRowCount();
    case DATA_SIZE:
      return isSetDataSize();
    case COUNT_DISTINCT:
      return isSetCountDistinct();
    case NULL_COUNT:
      return isSetNullCount();
    case MAX:
      return isSetMax();
    case MIN:
      return isSetMin();
    case HISTOGRAM:
      return isSetHistogram();
    case DICT:
      return isSetDict();
    case META_VERSION:
      return isSetMeta_version();
    case PARTITION_ID:
      return isSetPartitionId();
    case HLL:
      return isSetHll();
    case PARTITION_NAME:
      return isSetPartitionName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TStatisticData)
      return this.equals((TStatisticData)that);
    return false;
  }

  public boolean equals(TStatisticData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_dbId = true && this.isSetDbId();
    boolean that_present_dbId = true && that.isSetDbId();
    if (this_present_dbId || that_present_dbId) {
      if (!(this_present_dbId && that_present_dbId))
        return false;
      if (this.dbId != that.dbId)
        return false;
    }

    boolean this_present_tableId = true && this.isSetTableId();
    boolean that_present_tableId = true && that.isSetTableId();
    if (this_present_tableId || that_present_tableId) {
      if (!(this_present_tableId && that_present_tableId))
        return false;
      if (this.tableId != that.tableId)
        return false;
    }

    boolean this_present_columnName = true && this.isSetColumnName();
    boolean that_present_columnName = true && that.isSetColumnName();
    if (this_present_columnName || that_present_columnName) {
      if (!(this_present_columnName && that_present_columnName))
        return false;
      if (!this.columnName.equals(that.columnName))
        return false;
    }

    boolean this_present_rowCount = true && this.isSetRowCount();
    boolean that_present_rowCount = true && that.isSetRowCount();
    if (this_present_rowCount || that_present_rowCount) {
      if (!(this_present_rowCount && that_present_rowCount))
        return false;
      if (this.rowCount != that.rowCount)
        return false;
    }

    boolean this_present_dataSize = true && this.isSetDataSize();
    boolean that_present_dataSize = true && that.isSetDataSize();
    if (this_present_dataSize || that_present_dataSize) {
      if (!(this_present_dataSize && that_present_dataSize))
        return false;
      if (this.dataSize != that.dataSize)
        return false;
    }

    boolean this_present_countDistinct = true && this.isSetCountDistinct();
    boolean that_present_countDistinct = true && that.isSetCountDistinct();
    if (this_present_countDistinct || that_present_countDistinct) {
      if (!(this_present_countDistinct && that_present_countDistinct))
        return false;
      if (this.countDistinct != that.countDistinct)
        return false;
    }

    boolean this_present_nullCount = true && this.isSetNullCount();
    boolean that_present_nullCount = true && that.isSetNullCount();
    if (this_present_nullCount || that_present_nullCount) {
      if (!(this_present_nullCount && that_present_nullCount))
        return false;
      if (this.nullCount != that.nullCount)
        return false;
    }

    boolean this_present_max = true && this.isSetMax();
    boolean that_present_max = true && that.isSetMax();
    if (this_present_max || that_present_max) {
      if (!(this_present_max && that_present_max))
        return false;
      if (!this.max.equals(that.max))
        return false;
    }

    boolean this_present_min = true && this.isSetMin();
    boolean that_present_min = true && that.isSetMin();
    if (this_present_min || that_present_min) {
      if (!(this_present_min && that_present_min))
        return false;
      if (!this.min.equals(that.min))
        return false;
    }

    boolean this_present_histogram = true && this.isSetHistogram();
    boolean that_present_histogram = true && that.isSetHistogram();
    if (this_present_histogram || that_present_histogram) {
      if (!(this_present_histogram && that_present_histogram))
        return false;
      if (!this.histogram.equals(that.histogram))
        return false;
    }

    boolean this_present_dict = true && this.isSetDict();
    boolean that_present_dict = true && that.isSetDict();
    if (this_present_dict || that_present_dict) {
      if (!(this_present_dict && that_present_dict))
        return false;
      if (!this.dict.equals(that.dict))
        return false;
    }

    boolean this_present_meta_version = true && this.isSetMeta_version();
    boolean that_present_meta_version = true && that.isSetMeta_version();
    if (this_present_meta_version || that_present_meta_version) {
      if (!(this_present_meta_version && that_present_meta_version))
        return false;
      if (this.meta_version != that.meta_version)
        return false;
    }

    boolean this_present_partitionId = true && this.isSetPartitionId();
    boolean that_present_partitionId = true && that.isSetPartitionId();
    if (this_present_partitionId || that_present_partitionId) {
      if (!(this_present_partitionId && that_present_partitionId))
        return false;
      if (this.partitionId != that.partitionId)
        return false;
    }

    boolean this_present_hll = true && this.isSetHll();
    boolean that_present_hll = true && that.isSetHll();
    if (this_present_hll || that_present_hll) {
      if (!(this_present_hll && that_present_hll))
        return false;
      if (!this.hll.equals(that.hll))
        return false;
    }

    boolean this_present_partitionName = true && this.isSetPartitionName();
    boolean that_present_partitionName = true && that.isSetPartitionName();
    if (this_present_partitionName || that_present_partitionName) {
      if (!(this_present_partitionName && that_present_partitionName))
        return false;
      if (!this.partitionName.equals(that.partitionName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetDbId()) ? 131071 : 524287);
    if (isSetDbId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dbId);

    hashCode = hashCode * 8191 + ((isSetTableId()) ? 131071 : 524287);
    if (isSetTableId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tableId);

    hashCode = hashCode * 8191 + ((isSetColumnName()) ? 131071 : 524287);
    if (isSetColumnName())
      hashCode = hashCode * 8191 + columnName.hashCode();

    hashCode = hashCode * 8191 + ((isSetRowCount()) ? 131071 : 524287);
    if (isSetRowCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rowCount);

    hashCode = hashCode * 8191 + ((isSetDataSize()) ? 131071 : 524287);
    if (isSetDataSize())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dataSize);

    hashCode = hashCode * 8191 + ((isSetCountDistinct()) ? 131071 : 524287);
    if (isSetCountDistinct())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(countDistinct);

    hashCode = hashCode * 8191 + ((isSetNullCount()) ? 131071 : 524287);
    if (isSetNullCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(nullCount);

    hashCode = hashCode * 8191 + ((isSetMax()) ? 131071 : 524287);
    if (isSetMax())
      hashCode = hashCode * 8191 + max.hashCode();

    hashCode = hashCode * 8191 + ((isSetMin()) ? 131071 : 524287);
    if (isSetMin())
      hashCode = hashCode * 8191 + min.hashCode();

    hashCode = hashCode * 8191 + ((isSetHistogram()) ? 131071 : 524287);
    if (isSetHistogram())
      hashCode = hashCode * 8191 + histogram.hashCode();

    hashCode = hashCode * 8191 + ((isSetDict()) ? 131071 : 524287);
    if (isSetDict())
      hashCode = hashCode * 8191 + dict.hashCode();

    hashCode = hashCode * 8191 + ((isSetMeta_version()) ? 131071 : 524287);
    if (isSetMeta_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(meta_version);

    hashCode = hashCode * 8191 + ((isSetPartitionId()) ? 131071 : 524287);
    if (isSetPartitionId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partitionId);

    hashCode = hashCode * 8191 + ((isSetHll()) ? 131071 : 524287);
    if (isSetHll())
      hashCode = hashCode * 8191 + hll.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartitionName()) ? 131071 : 524287);
    if (isSetPartitionName())
      hashCode = hashCode * 8191 + partitionName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TStatisticData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUpdateTime(), other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDbId(), other.isSetDbId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbId, other.dbId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableId(), other.isSetTableId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableId, other.tableId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnName(), other.isSetColumnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnName, other.columnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRowCount(), other.isSetRowCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowCount, other.rowCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDataSize(), other.isSetDataSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSize, other.dataSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCountDistinct(), other.isSetCountDistinct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountDistinct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countDistinct, other.countDistinct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNullCount(), other.isSetNullCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNullCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nullCount, other.nullCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax(), other.isSetMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, other.max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMin(), other.isSetMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min, other.min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHistogram(), other.isSetHistogram());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHistogram()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.histogram, other.histogram);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDict(), other.isSetDict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dict, other.dict);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMeta_version(), other.isSetMeta_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeta_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meta_version, other.meta_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitionId(), other.isSetPartitionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionId, other.partitionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHll(), other.isSetHll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHll()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hll, other.hll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitionName(), other.isSetPartitionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionName, other.partitionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TStatisticData(");
    boolean first = true;

    if (isSetUpdateTime()) {
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetDbId()) {
      if (!first) sb.append(", ");
      sb.append("dbId:");
      sb.append(this.dbId);
      first = false;
    }
    if (isSetTableId()) {
      if (!first) sb.append(", ");
      sb.append("tableId:");
      sb.append(this.tableId);
      first = false;
    }
    if (isSetColumnName()) {
      if (!first) sb.append(", ");
      sb.append("columnName:");
      if (this.columnName == null) {
        sb.append("null");
      } else {
        sb.append(this.columnName);
      }
      first = false;
    }
    if (isSetRowCount()) {
      if (!first) sb.append(", ");
      sb.append("rowCount:");
      sb.append(this.rowCount);
      first = false;
    }
    if (isSetDataSize()) {
      if (!first) sb.append(", ");
      sb.append("dataSize:");
      sb.append(this.dataSize);
      first = false;
    }
    if (isSetCountDistinct()) {
      if (!first) sb.append(", ");
      sb.append("countDistinct:");
      sb.append(this.countDistinct);
      first = false;
    }
    if (isSetNullCount()) {
      if (!first) sb.append(", ");
      sb.append("nullCount:");
      sb.append(this.nullCount);
      first = false;
    }
    if (isSetMax()) {
      if (!first) sb.append(", ");
      sb.append("max:");
      if (this.max == null) {
        sb.append("null");
      } else {
        sb.append(this.max);
      }
      first = false;
    }
    if (isSetMin()) {
      if (!first) sb.append(", ");
      sb.append("min:");
      if (this.min == null) {
        sb.append("null");
      } else {
        sb.append(this.min);
      }
      first = false;
    }
    if (isSetHistogram()) {
      if (!first) sb.append(", ");
      sb.append("histogram:");
      if (this.histogram == null) {
        sb.append("null");
      } else {
        sb.append(this.histogram);
      }
      first = false;
    }
    if (isSetDict()) {
      if (!first) sb.append(", ");
      sb.append("dict:");
      if (this.dict == null) {
        sb.append("null");
      } else {
        sb.append(this.dict);
      }
      first = false;
    }
    if (isSetMeta_version()) {
      if (!first) sb.append(", ");
      sb.append("meta_version:");
      sb.append(this.meta_version);
      first = false;
    }
    if (isSetPartitionId()) {
      if (!first) sb.append(", ");
      sb.append("partitionId:");
      sb.append(this.partitionId);
      first = false;
    }
    if (isSetHll()) {
      if (!first) sb.append(", ");
      sb.append("hll:");
      if (this.hll == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.hll, sb);
      }
      first = false;
    }
    if (isSetPartitionName()) {
      if (!first) sb.append(", ");
      sb.append("partitionName:");
      if (this.partitionName == null) {
        sb.append("null");
      } else {
        sb.append(this.partitionName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (dict != null) {
      dict.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStatisticDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStatisticDataStandardScheme getScheme() {
      return new TStatisticDataStandardScheme();
    }
  }

  private static class TStatisticDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<TStatisticData> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TStatisticData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dbId = iprot.readI64();
              struct.setDbIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tableId = iprot.readI64();
              struct.setTableIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnName = iprot.readString();
              struct.setColumnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rowCount = iprot.readI64();
              struct.setRowCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATA_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dataSize = iprot.readDouble();
              struct.setDataSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COUNT_DISTINCT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.countDistinct = iprot.readI64();
              struct.setCountDistinctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NULL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.nullCount = iprot.readI64();
              struct.setNullCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.max = iprot.readString();
              struct.setMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.min = iprot.readString();
              struct.setMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HISTOGRAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.histogram = iprot.readString();
              struct.setHistogramIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DICT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dict = new TGlobalDict();
              struct.dict.read(iprot);
              struct.setDictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // META_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.meta_version = iprot.readI64();
              struct.setMeta_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partitionId = iprot.readI64();
              struct.setPartitionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // HLL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hll = iprot.readBinary();
              struct.setHllIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PARTITION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partitionName = iprot.readString();
              struct.setPartitionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TStatisticData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDbId()) {
        oprot.writeFieldBegin(DB_ID_FIELD_DESC);
        oprot.writeI64(struct.dbId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTableId()) {
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeI64(struct.tableId);
        oprot.writeFieldEnd();
      }
      if (struct.columnName != null) {
        if (struct.isSetColumnName()) {
          oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
          oprot.writeString(struct.columnName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRowCount()) {
        oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
        oprot.writeI64(struct.rowCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDataSize()) {
        oprot.writeFieldBegin(DATA_SIZE_FIELD_DESC);
        oprot.writeDouble(struct.dataSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCountDistinct()) {
        oprot.writeFieldBegin(COUNT_DISTINCT_FIELD_DESC);
        oprot.writeI64(struct.countDistinct);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNullCount()) {
        oprot.writeFieldBegin(NULL_COUNT_FIELD_DESC);
        oprot.writeI64(struct.nullCount);
        oprot.writeFieldEnd();
      }
      if (struct.max != null) {
        if (struct.isSetMax()) {
          oprot.writeFieldBegin(MAX_FIELD_DESC);
          oprot.writeString(struct.max);
          oprot.writeFieldEnd();
        }
      }
      if (struct.min != null) {
        if (struct.isSetMin()) {
          oprot.writeFieldBegin(MIN_FIELD_DESC);
          oprot.writeString(struct.min);
          oprot.writeFieldEnd();
        }
      }
      if (struct.histogram != null) {
        if (struct.isSetHistogram()) {
          oprot.writeFieldBegin(HISTOGRAM_FIELD_DESC);
          oprot.writeString(struct.histogram);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dict != null) {
        if (struct.isSetDict()) {
          oprot.writeFieldBegin(DICT_FIELD_DESC);
          struct.dict.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMeta_version()) {
        oprot.writeFieldBegin(META_VERSION_FIELD_DESC);
        oprot.writeI64(struct.meta_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartitionId()) {
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI64(struct.partitionId);
        oprot.writeFieldEnd();
      }
      if (struct.hll != null) {
        if (struct.isSetHll()) {
          oprot.writeFieldBegin(HLL_FIELD_DESC);
          oprot.writeBinary(struct.hll);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partitionName != null) {
        if (struct.isSetPartitionName()) {
          oprot.writeFieldBegin(PARTITION_NAME_FIELD_DESC);
          oprot.writeString(struct.partitionName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStatisticDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStatisticDataTupleScheme getScheme() {
      return new TStatisticDataTupleScheme();
    }
  }

  private static class TStatisticDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<TStatisticData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStatisticData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUpdateTime()) {
        optionals.set(0);
      }
      if (struct.isSetDbId()) {
        optionals.set(1);
      }
      if (struct.isSetTableId()) {
        optionals.set(2);
      }
      if (struct.isSetColumnName()) {
        optionals.set(3);
      }
      if (struct.isSetRowCount()) {
        optionals.set(4);
      }
      if (struct.isSetDataSize()) {
        optionals.set(5);
      }
      if (struct.isSetCountDistinct()) {
        optionals.set(6);
      }
      if (struct.isSetNullCount()) {
        optionals.set(7);
      }
      if (struct.isSetMax()) {
        optionals.set(8);
      }
      if (struct.isSetMin()) {
        optionals.set(9);
      }
      if (struct.isSetHistogram()) {
        optionals.set(10);
      }
      if (struct.isSetDict()) {
        optionals.set(11);
      }
      if (struct.isSetMeta_version()) {
        optionals.set(12);
      }
      if (struct.isSetPartitionId()) {
        optionals.set(13);
      }
      if (struct.isSetHll()) {
        optionals.set(14);
      }
      if (struct.isSetPartitionName()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetDbId()) {
        oprot.writeI64(struct.dbId);
      }
      if (struct.isSetTableId()) {
        oprot.writeI64(struct.tableId);
      }
      if (struct.isSetColumnName()) {
        oprot.writeString(struct.columnName);
      }
      if (struct.isSetRowCount()) {
        oprot.writeI64(struct.rowCount);
      }
      if (struct.isSetDataSize()) {
        oprot.writeDouble(struct.dataSize);
      }
      if (struct.isSetCountDistinct()) {
        oprot.writeI64(struct.countDistinct);
      }
      if (struct.isSetNullCount()) {
        oprot.writeI64(struct.nullCount);
      }
      if (struct.isSetMax()) {
        oprot.writeString(struct.max);
      }
      if (struct.isSetMin()) {
        oprot.writeString(struct.min);
      }
      if (struct.isSetHistogram()) {
        oprot.writeString(struct.histogram);
      }
      if (struct.isSetDict()) {
        struct.dict.write(oprot);
      }
      if (struct.isSetMeta_version()) {
        oprot.writeI64(struct.meta_version);
      }
      if (struct.isSetPartitionId()) {
        oprot.writeI64(struct.partitionId);
      }
      if (struct.isSetHll()) {
        oprot.writeBinary(struct.hll);
      }
      if (struct.isSetPartitionName()) {
        oprot.writeString(struct.partitionName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStatisticData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dbId = iprot.readI64();
        struct.setDbIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tableId = iprot.readI64();
        struct.setTableIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.columnName = iprot.readString();
        struct.setColumnNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rowCount = iprot.readI64();
        struct.setRowCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dataSize = iprot.readDouble();
        struct.setDataSizeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.countDistinct = iprot.readI64();
        struct.setCountDistinctIsSet(true);
      }
      if (incoming.get(7)) {
        struct.nullCount = iprot.readI64();
        struct.setNullCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.max = iprot.readString();
        struct.setMaxIsSet(true);
      }
      if (incoming.get(9)) {
        struct.min = iprot.readString();
        struct.setMinIsSet(true);
      }
      if (incoming.get(10)) {
        struct.histogram = iprot.readString();
        struct.setHistogramIsSet(true);
      }
      if (incoming.get(11)) {
        struct.dict = new TGlobalDict();
        struct.dict.read(iprot);
        struct.setDictIsSet(true);
      }
      if (incoming.get(12)) {
        struct.meta_version = iprot.readI64();
        struct.setMeta_versionIsSet(true);
      }
      if (incoming.get(13)) {
        struct.partitionId = iprot.readI64();
        struct.setPartitionIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.hll = iprot.readBinary();
        struct.setHllIsSet(true);
      }
      if (incoming.get(15)) {
        struct.partitionName = iprot.readString();
        struct.setPartitionNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

