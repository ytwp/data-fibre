/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TTabletInfo implements org.apache.thrift.TBase<TTabletInfo, TTabletInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TTabletInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTabletInfo");

  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_hash", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("version_hash", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("row_count", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DATA_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_size", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField STORAGE_MEDIUM_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_medium", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TRANSACTION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("transaction_ids", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField VERSION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("version_count", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField PATH_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("path_hash", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField VERSION_MISS_FIELD_DESC = new org.apache.thrift.protocol.TField("version_miss", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField USED_FIELD_DESC = new org.apache.thrift.protocol.TField("used", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField IS_IN_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_in_memory", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField ENABLE_PERSISTENT_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_persistent_index", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField MIN_READABLE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("min_readable_version", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField BINLOG_CONFIG_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("binlog_config_version", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField IS_ERROR_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_error_state", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField MAX_READABLE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("max_readable_version", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField MAX_ROWSET_CREATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("max_rowset_creation_time", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField PRIMARY_INDEX_CACHE_EXPIRE_SEC_FIELD_DESC = new org.apache.thrift.protocol.TField("primary_index_cache_expire_sec", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField TABLET_SCHEMA_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_schema_version", org.apache.thrift.protocol.TType.I32, (short)22);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTabletInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTabletInfoTupleSchemeFactory();

  public long tablet_id; // required
  public int schema_hash; // required
  public long version; // required
  public long version_hash; // required
  public long row_count; // required
  public long data_size; // required
  /**
   * 
   * @see com.starrocks.thrift.TStorageMedium
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TStorageMedium storage_medium; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> transaction_ids; // optional
  public long version_count; // optional
  public long path_hash; // optional
  public boolean version_miss; // optional
  public boolean used; // optional
  public long partition_id; // optional
  public boolean is_in_memory; // optional
  public boolean enable_persistent_index; // optional
  public long min_readable_version; // optional
  public long binlog_config_version; // optional
  public boolean is_error_state; // optional
  public long max_readable_version; // optional
  public long max_rowset_creation_time; // optional
  public int primary_index_cache_expire_sec; // optional
  public int tablet_schema_version; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLET_ID((short)1, "tablet_id"),
    SCHEMA_HASH((short)2, "schema_hash"),
    VERSION((short)3, "version"),
    VERSION_HASH((short)4, "version_hash"),
    ROW_COUNT((short)5, "row_count"),
    DATA_SIZE((short)6, "data_size"),
    /**
     * 
     * @see com.starrocks.thrift.TStorageMedium
     */
    STORAGE_MEDIUM((short)7, "storage_medium"),
    TRANSACTION_IDS((short)8, "transaction_ids"),
    VERSION_COUNT((short)9, "version_count"),
    PATH_HASH((short)10, "path_hash"),
    VERSION_MISS((short)11, "version_miss"),
    USED((short)12, "used"),
    PARTITION_ID((short)13, "partition_id"),
    IS_IN_MEMORY((short)14, "is_in_memory"),
    ENABLE_PERSISTENT_INDEX((short)15, "enable_persistent_index"),
    MIN_READABLE_VERSION((short)16, "min_readable_version"),
    BINLOG_CONFIG_VERSION((short)17, "binlog_config_version"),
    IS_ERROR_STATE((short)18, "is_error_state"),
    MAX_READABLE_VERSION((short)19, "max_readable_version"),
    MAX_ROWSET_CREATION_TIME((short)20, "max_rowset_creation_time"),
    PRIMARY_INDEX_CACHE_EXPIRE_SEC((short)21, "primary_index_cache_expire_sec"),
    TABLET_SCHEMA_VERSION((short)22, "tablet_schema_version");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLET_ID
          return TABLET_ID;
        case 2: // SCHEMA_HASH
          return SCHEMA_HASH;
        case 3: // VERSION
          return VERSION;
        case 4: // VERSION_HASH
          return VERSION_HASH;
        case 5: // ROW_COUNT
          return ROW_COUNT;
        case 6: // DATA_SIZE
          return DATA_SIZE;
        case 7: // STORAGE_MEDIUM
          return STORAGE_MEDIUM;
        case 8: // TRANSACTION_IDS
          return TRANSACTION_IDS;
        case 9: // VERSION_COUNT
          return VERSION_COUNT;
        case 10: // PATH_HASH
          return PATH_HASH;
        case 11: // VERSION_MISS
          return VERSION_MISS;
        case 12: // USED
          return USED;
        case 13: // PARTITION_ID
          return PARTITION_ID;
        case 14: // IS_IN_MEMORY
          return IS_IN_MEMORY;
        case 15: // ENABLE_PERSISTENT_INDEX
          return ENABLE_PERSISTENT_INDEX;
        case 16: // MIN_READABLE_VERSION
          return MIN_READABLE_VERSION;
        case 17: // BINLOG_CONFIG_VERSION
          return BINLOG_CONFIG_VERSION;
        case 18: // IS_ERROR_STATE
          return IS_ERROR_STATE;
        case 19: // MAX_READABLE_VERSION
          return MAX_READABLE_VERSION;
        case 20: // MAX_ROWSET_CREATION_TIME
          return MAX_ROWSET_CREATION_TIME;
        case 21: // PRIMARY_INDEX_CACHE_EXPIRE_SEC
          return PRIMARY_INDEX_CACHE_EXPIRE_SEC;
        case 22: // TABLET_SCHEMA_VERSION
          return TABLET_SCHEMA_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLET_ID_ISSET_ID = 0;
  private static final int __SCHEMA_HASH_ISSET_ID = 1;
  private static final int __VERSION_ISSET_ID = 2;
  private static final int __VERSION_HASH_ISSET_ID = 3;
  private static final int __ROW_COUNT_ISSET_ID = 4;
  private static final int __DATA_SIZE_ISSET_ID = 5;
  private static final int __VERSION_COUNT_ISSET_ID = 6;
  private static final int __PATH_HASH_ISSET_ID = 7;
  private static final int __VERSION_MISS_ISSET_ID = 8;
  private static final int __USED_ISSET_ID = 9;
  private static final int __PARTITION_ID_ISSET_ID = 10;
  private static final int __IS_IN_MEMORY_ISSET_ID = 11;
  private static final int __ENABLE_PERSISTENT_INDEX_ISSET_ID = 12;
  private static final int __MIN_READABLE_VERSION_ISSET_ID = 13;
  private static final int __BINLOG_CONFIG_VERSION_ISSET_ID = 14;
  private static final int __IS_ERROR_STATE_ISSET_ID = 15;
  private static final int __MAX_READABLE_VERSION_ISSET_ID = 16;
  private static final int __MAX_ROWSET_CREATION_TIME_ISSET_ID = 17;
  private static final int __PRIMARY_INDEX_CACHE_EXPIRE_SEC_ISSET_ID = 18;
  private static final int __TABLET_SCHEMA_VERSION_ISSET_ID = 19;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STORAGE_MEDIUM,_Fields.TRANSACTION_IDS,_Fields.VERSION_COUNT,_Fields.PATH_HASH,_Fields.VERSION_MISS,_Fields.USED,_Fields.PARTITION_ID,_Fields.IS_IN_MEMORY,_Fields.ENABLE_PERSISTENT_INDEX,_Fields.MIN_READABLE_VERSION,_Fields.BINLOG_CONFIG_VERSION,_Fields.IS_ERROR_STATE,_Fields.MAX_READABLE_VERSION,_Fields.MAX_ROWSET_CREATION_TIME,_Fields.PRIMARY_INDEX_CACHE_EXPIRE_SEC,_Fields.TABLET_SCHEMA_VERSION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("schema_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSchemaHash")));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersion")));
    tmpMap.put(_Fields.VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("version_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersionHash")));
    tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("row_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TCount")));
    tmpMap.put(_Fields.DATA_SIZE, new org.apache.thrift.meta_data.FieldMetaData("data_size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TSize")));
    tmpMap.put(_Fields.STORAGE_MEDIUM, new org.apache.thrift.meta_data.FieldMetaData("storage_medium", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TStorageMedium.class)));
    tmpMap.put(_Fields.TRANSACTION_IDS, new org.apache.thrift.meta_data.FieldMetaData("transaction_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "TTransactionId"))));
    tmpMap.put(_Fields.VERSION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("version_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PATH_HASH, new org.apache.thrift.meta_data.FieldMetaData("path_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION_MISS, new org.apache.thrift.meta_data.FieldMetaData("version_miss", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USED, new org.apache.thrift.meta_data.FieldMetaData("used", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TPartitionId")));
    tmpMap.put(_Fields.IS_IN_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("is_in_memory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_PERSISTENT_INDEX, new org.apache.thrift.meta_data.FieldMetaData("enable_persistent_index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MIN_READABLE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("min_readable_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersion")));
    tmpMap.put(_Fields.BINLOG_CONFIG_VERSION, new org.apache.thrift.meta_data.FieldMetaData("binlog_config_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_ERROR_STATE, new org.apache.thrift.meta_data.FieldMetaData("is_error_state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MAX_READABLE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("max_readable_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersion")));
    tmpMap.put(_Fields.MAX_ROWSET_CREATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("max_rowset_creation_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRIMARY_INDEX_CACHE_EXPIRE_SEC, new org.apache.thrift.meta_data.FieldMetaData("primary_index_cache_expire_sec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TABLET_SCHEMA_VERSION, new org.apache.thrift.meta_data.FieldMetaData("tablet_schema_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTabletInfo.class, metaDataMap);
  }

  public TTabletInfo() {
  }

  public TTabletInfo(
    long tablet_id,
    int schema_hash,
    long version,
    long version_hash,
    long row_count,
    long data_size)
  {
    this();
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    this.version = version;
    setVersionIsSet(true);
    this.version_hash = version_hash;
    setVersion_hashIsSet(true);
    this.row_count = row_count;
    setRow_countIsSet(true);
    this.data_size = data_size;
    setData_sizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTabletInfo(TTabletInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tablet_id = other.tablet_id;
    this.schema_hash = other.schema_hash;
    this.version = other.version;
    this.version_hash = other.version_hash;
    this.row_count = other.row_count;
    this.data_size = other.data_size;
    if (other.isSetStorage_medium()) {
      this.storage_medium = other.storage_medium;
    }
    if (other.isSetTransaction_ids()) {
      java.util.List<java.lang.Long> __this__transaction_ids = new java.util.ArrayList<java.lang.Long>(other.transaction_ids.size());
      for (java.lang.Long other_element : other.transaction_ids) {
        __this__transaction_ids.add(other_element);
      }
      this.transaction_ids = __this__transaction_ids;
    }
    this.version_count = other.version_count;
    this.path_hash = other.path_hash;
    this.version_miss = other.version_miss;
    this.used = other.used;
    this.partition_id = other.partition_id;
    this.is_in_memory = other.is_in_memory;
    this.enable_persistent_index = other.enable_persistent_index;
    this.min_readable_version = other.min_readable_version;
    this.binlog_config_version = other.binlog_config_version;
    this.is_error_state = other.is_error_state;
    this.max_readable_version = other.max_readable_version;
    this.max_rowset_creation_time = other.max_rowset_creation_time;
    this.primary_index_cache_expire_sec = other.primary_index_cache_expire_sec;
    this.tablet_schema_version = other.tablet_schema_version;
  }

  @Override
  public TTabletInfo deepCopy() {
    return new TTabletInfo(this);
  }

  @Override
  public void clear() {
    setTablet_idIsSet(false);
    this.tablet_id = 0;
    setSchema_hashIsSet(false);
    this.schema_hash = 0;
    setVersionIsSet(false);
    this.version = 0;
    setVersion_hashIsSet(false);
    this.version_hash = 0;
    setRow_countIsSet(false);
    this.row_count = 0;
    setData_sizeIsSet(false);
    this.data_size = 0;
    this.storage_medium = null;
    this.transaction_ids = null;
    setVersion_countIsSet(false);
    this.version_count = 0;
    setPath_hashIsSet(false);
    this.path_hash = 0;
    setVersion_missIsSet(false);
    this.version_miss = false;
    setUsedIsSet(false);
    this.used = false;
    setPartition_idIsSet(false);
    this.partition_id = 0;
    setIs_in_memoryIsSet(false);
    this.is_in_memory = false;
    setEnable_persistent_indexIsSet(false);
    this.enable_persistent_index = false;
    setMin_readable_versionIsSet(false);
    this.min_readable_version = 0;
    setBinlog_config_versionIsSet(false);
    this.binlog_config_version = 0;
    setIs_error_stateIsSet(false);
    this.is_error_state = false;
    setMax_readable_versionIsSet(false);
    this.max_readable_version = 0;
    setMax_rowset_creation_timeIsSet(false);
    this.max_rowset_creation_time = 0;
    setPrimary_index_cache_expire_secIsSet(false);
    this.primary_index_cache_expire_sec = 0;
    setTablet_schema_versionIsSet(false);
    this.tablet_schema_version = 0;
  }

  public long getTablet_id() {
    return this.tablet_id;
  }

  public TTabletInfo setTablet_id(long tablet_id) {
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    return this;
  }

  public void unsetTablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  public int getSchema_hash() {
    return this.schema_hash;
  }

  public TTabletInfo setSchema_hash(int schema_hash) {
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    return this;
  }

  public void unsetSchema_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  public void setSchema_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID, value);
  }

  public long getVersion() {
    return this.version;
  }

  public TTabletInfo setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public long getVersion_hash() {
    return this.version_hash;
  }

  public TTabletInfo setVersion_hash(long version_hash) {
    this.version_hash = version_hash;
    setVersion_hashIsSet(true);
    return this;
  }

  public void unsetVersion_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_HASH_ISSET_ID);
  }

  public void setVersion_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_HASH_ISSET_ID, value);
  }

  public long getRow_count() {
    return this.row_count;
  }

  public TTabletInfo setRow_count(long row_count) {
    this.row_count = row_count;
    setRow_countIsSet(true);
    return this;
  }

  public void unsetRow_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROW_COUNT_ISSET_ID);
  }

  /** Returns true if field row_count is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROW_COUNT_ISSET_ID);
  }

  public void setRow_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROW_COUNT_ISSET_ID, value);
  }

  public long getData_size() {
    return this.data_size;
  }

  public TTabletInfo setData_size(long data_size) {
    this.data_size = data_size;
    setData_sizeIsSet(true);
    return this;
  }

  public void unsetData_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATA_SIZE_ISSET_ID);
  }

  /** Returns true if field data_size is set (has been assigned a value) and false otherwise */
  public boolean isSetData_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATA_SIZE_ISSET_ID);
  }

  public void setData_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATA_SIZE_ISSET_ID, value);
  }

  /**
   * 
   * @see com.starrocks.thrift.TStorageMedium
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TStorageMedium getStorage_medium() {
    return this.storage_medium;
  }

  /**
   * 
   * @see com.starrocks.thrift.TStorageMedium
   */
  public TTabletInfo setStorage_medium(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TStorageMedium storage_medium) {
    this.storage_medium = storage_medium;
    return this;
  }

  public void unsetStorage_medium() {
    this.storage_medium = null;
  }

  /** Returns true if field storage_medium is set (has been assigned a value) and false otherwise */
  public boolean isSetStorage_medium() {
    return this.storage_medium != null;
  }

  public void setStorage_mediumIsSet(boolean value) {
    if (!value) {
      this.storage_medium = null;
    }
  }

  public int getTransaction_idsSize() {
    return (this.transaction_ids == null) ? 0 : this.transaction_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getTransaction_idsIterator() {
    return (this.transaction_ids == null) ? null : this.transaction_ids.iterator();
  }

  public void addToTransaction_ids(long elem) {
    if (this.transaction_ids == null) {
      this.transaction_ids = new java.util.ArrayList<java.lang.Long>();
    }
    this.transaction_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getTransaction_ids() {
    return this.transaction_ids;
  }

  public TTabletInfo setTransaction_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> transaction_ids) {
    this.transaction_ids = transaction_ids;
    return this;
  }

  public void unsetTransaction_ids() {
    this.transaction_ids = null;
  }

  /** Returns true if field transaction_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetTransaction_ids() {
    return this.transaction_ids != null;
  }

  public void setTransaction_idsIsSet(boolean value) {
    if (!value) {
      this.transaction_ids = null;
    }
  }

  public long getVersion_count() {
    return this.version_count;
  }

  public TTabletInfo setVersion_count(long version_count) {
    this.version_count = version_count;
    setVersion_countIsSet(true);
    return this;
  }

  public void unsetVersion_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_COUNT_ISSET_ID);
  }

  /** Returns true if field version_count is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_COUNT_ISSET_ID);
  }

  public void setVersion_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_COUNT_ISSET_ID, value);
  }

  public long getPath_hash() {
    return this.path_hash;
  }

  public TTabletInfo setPath_hash(long path_hash) {
    this.path_hash = path_hash;
    setPath_hashIsSet(true);
    return this;
  }

  public void unsetPath_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PATH_HASH_ISSET_ID);
  }

  /** Returns true if field path_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetPath_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PATH_HASH_ISSET_ID);
  }

  public void setPath_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PATH_HASH_ISSET_ID, value);
  }

  public boolean isVersion_miss() {
    return this.version_miss;
  }

  public TTabletInfo setVersion_miss(boolean version_miss) {
    this.version_miss = version_miss;
    setVersion_missIsSet(true);
    return this;
  }

  public void unsetVersion_miss() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_MISS_ISSET_ID);
  }

  /** Returns true if field version_miss is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_miss() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_MISS_ISSET_ID);
  }

  public void setVersion_missIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_MISS_ISSET_ID, value);
  }

  public boolean isUsed() {
    return this.used;
  }

  public TTabletInfo setUsed(boolean used) {
    this.used = used;
    setUsedIsSet(true);
    return this;
  }

  public void unsetUsed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USED_ISSET_ID);
  }

  /** Returns true if field used is set (has been assigned a value) and false otherwise */
  public boolean isSetUsed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USED_ISSET_ID);
  }

  public void setUsedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USED_ISSET_ID, value);
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public TTabletInfo setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    return this;
  }

  public void unsetPartition_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  public boolean isIs_in_memory() {
    return this.is_in_memory;
  }

  public TTabletInfo setIs_in_memory(boolean is_in_memory) {
    this.is_in_memory = is_in_memory;
    setIs_in_memoryIsSet(true);
    return this;
  }

  public void unsetIs_in_memory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_IN_MEMORY_ISSET_ID);
  }

  /** Returns true if field is_in_memory is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_in_memory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_IN_MEMORY_ISSET_ID);
  }

  public void setIs_in_memoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_IN_MEMORY_ISSET_ID, value);
  }

  public boolean isEnable_persistent_index() {
    return this.enable_persistent_index;
  }

  public TTabletInfo setEnable_persistent_index(boolean enable_persistent_index) {
    this.enable_persistent_index = enable_persistent_index;
    setEnable_persistent_indexIsSet(true);
    return this;
  }

  public void unsetEnable_persistent_index() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_PERSISTENT_INDEX_ISSET_ID);
  }

  /** Returns true if field enable_persistent_index is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_persistent_index() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_PERSISTENT_INDEX_ISSET_ID);
  }

  public void setEnable_persistent_indexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_PERSISTENT_INDEX_ISSET_ID, value);
  }

  public long getMin_readable_version() {
    return this.min_readable_version;
  }

  public TTabletInfo setMin_readable_version(long min_readable_version) {
    this.min_readable_version = min_readable_version;
    setMin_readable_versionIsSet(true);
    return this;
  }

  public void unsetMin_readable_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_READABLE_VERSION_ISSET_ID);
  }

  /** Returns true if field min_readable_version is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_readable_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_READABLE_VERSION_ISSET_ID);
  }

  public void setMin_readable_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_READABLE_VERSION_ISSET_ID, value);
  }

  public long getBinlog_config_version() {
    return this.binlog_config_version;
  }

  public TTabletInfo setBinlog_config_version(long binlog_config_version) {
    this.binlog_config_version = binlog_config_version;
    setBinlog_config_versionIsSet(true);
    return this;
  }

  public void unsetBinlog_config_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BINLOG_CONFIG_VERSION_ISSET_ID);
  }

  /** Returns true if field binlog_config_version is set (has been assigned a value) and false otherwise */
  public boolean isSetBinlog_config_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BINLOG_CONFIG_VERSION_ISSET_ID);
  }

  public void setBinlog_config_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BINLOG_CONFIG_VERSION_ISSET_ID, value);
  }

  public boolean isIs_error_state() {
    return this.is_error_state;
  }

  public TTabletInfo setIs_error_state(boolean is_error_state) {
    this.is_error_state = is_error_state;
    setIs_error_stateIsSet(true);
    return this;
  }

  public void unsetIs_error_state() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_ERROR_STATE_ISSET_ID);
  }

  /** Returns true if field is_error_state is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_error_state() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_ERROR_STATE_ISSET_ID);
  }

  public void setIs_error_stateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_ERROR_STATE_ISSET_ID, value);
  }

  public long getMax_readable_version() {
    return this.max_readable_version;
  }

  public TTabletInfo setMax_readable_version(long max_readable_version) {
    this.max_readable_version = max_readable_version;
    setMax_readable_versionIsSet(true);
    return this;
  }

  public void unsetMax_readable_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_READABLE_VERSION_ISSET_ID);
  }

  /** Returns true if field max_readable_version is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_readable_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_READABLE_VERSION_ISSET_ID);
  }

  public void setMax_readable_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_READABLE_VERSION_ISSET_ID, value);
  }

  public long getMax_rowset_creation_time() {
    return this.max_rowset_creation_time;
  }

  public TTabletInfo setMax_rowset_creation_time(long max_rowset_creation_time) {
    this.max_rowset_creation_time = max_rowset_creation_time;
    setMax_rowset_creation_timeIsSet(true);
    return this;
  }

  public void unsetMax_rowset_creation_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_ROWSET_CREATION_TIME_ISSET_ID);
  }

  /** Returns true if field max_rowset_creation_time is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_rowset_creation_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_ROWSET_CREATION_TIME_ISSET_ID);
  }

  public void setMax_rowset_creation_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_ROWSET_CREATION_TIME_ISSET_ID, value);
  }

  public int getPrimary_index_cache_expire_sec() {
    return this.primary_index_cache_expire_sec;
  }

  public TTabletInfo setPrimary_index_cache_expire_sec(int primary_index_cache_expire_sec) {
    this.primary_index_cache_expire_sec = primary_index_cache_expire_sec;
    setPrimary_index_cache_expire_secIsSet(true);
    return this;
  }

  public void unsetPrimary_index_cache_expire_sec() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIMARY_INDEX_CACHE_EXPIRE_SEC_ISSET_ID);
  }

  /** Returns true if field primary_index_cache_expire_sec is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimary_index_cache_expire_sec() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIMARY_INDEX_CACHE_EXPIRE_SEC_ISSET_ID);
  }

  public void setPrimary_index_cache_expire_secIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIMARY_INDEX_CACHE_EXPIRE_SEC_ISSET_ID, value);
  }

  public int getTablet_schema_version() {
    return this.tablet_schema_version;
  }

  public TTabletInfo setTablet_schema_version(int tablet_schema_version) {
    this.tablet_schema_version = tablet_schema_version;
    setTablet_schema_versionIsSet(true);
    return this;
  }

  public void unsetTablet_schema_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_SCHEMA_VERSION_ISSET_ID);
  }

  /** Returns true if field tablet_schema_version is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_schema_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_SCHEMA_VERSION_ISSET_ID);
  }

  public void setTablet_schema_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_SCHEMA_VERSION_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLET_ID:
      if (value == null) {
        unsetTablet_id();
      } else {
        setTablet_id((java.lang.Long)value);
      }
      break;

    case SCHEMA_HASH:
      if (value == null) {
        unsetSchema_hash();
      } else {
        setSchema_hash((java.lang.Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Long)value);
      }
      break;

    case VERSION_HASH:
      if (value == null) {
        unsetVersion_hash();
      } else {
        setVersion_hash((java.lang.Long)value);
      }
      break;

    case ROW_COUNT:
      if (value == null) {
        unsetRow_count();
      } else {
        setRow_count((java.lang.Long)value);
      }
      break;

    case DATA_SIZE:
      if (value == null) {
        unsetData_size();
      } else {
        setData_size((java.lang.Long)value);
      }
      break;

    case STORAGE_MEDIUM:
      if (value == null) {
        unsetStorage_medium();
      } else {
        setStorage_medium((com.starrocks.thrift.TStorageMedium)value);
      }
      break;

    case TRANSACTION_IDS:
      if (value == null) {
        unsetTransaction_ids();
      } else {
        setTransaction_ids((java.util.List<java.lang.Long>)value);
      }
      break;

    case VERSION_COUNT:
      if (value == null) {
        unsetVersion_count();
      } else {
        setVersion_count((java.lang.Long)value);
      }
      break;

    case PATH_HASH:
      if (value == null) {
        unsetPath_hash();
      } else {
        setPath_hash((java.lang.Long)value);
      }
      break;

    case VERSION_MISS:
      if (value == null) {
        unsetVersion_miss();
      } else {
        setVersion_miss((java.lang.Boolean)value);
      }
      break;

    case USED:
      if (value == null) {
        unsetUsed();
      } else {
        setUsed((java.lang.Boolean)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((java.lang.Long)value);
      }
      break;

    case IS_IN_MEMORY:
      if (value == null) {
        unsetIs_in_memory();
      } else {
        setIs_in_memory((java.lang.Boolean)value);
      }
      break;

    case ENABLE_PERSISTENT_INDEX:
      if (value == null) {
        unsetEnable_persistent_index();
      } else {
        setEnable_persistent_index((java.lang.Boolean)value);
      }
      break;

    case MIN_READABLE_VERSION:
      if (value == null) {
        unsetMin_readable_version();
      } else {
        setMin_readable_version((java.lang.Long)value);
      }
      break;

    case BINLOG_CONFIG_VERSION:
      if (value == null) {
        unsetBinlog_config_version();
      } else {
        setBinlog_config_version((java.lang.Long)value);
      }
      break;

    case IS_ERROR_STATE:
      if (value == null) {
        unsetIs_error_state();
      } else {
        setIs_error_state((java.lang.Boolean)value);
      }
      break;

    case MAX_READABLE_VERSION:
      if (value == null) {
        unsetMax_readable_version();
      } else {
        setMax_readable_version((java.lang.Long)value);
      }
      break;

    case MAX_ROWSET_CREATION_TIME:
      if (value == null) {
        unsetMax_rowset_creation_time();
      } else {
        setMax_rowset_creation_time((java.lang.Long)value);
      }
      break;

    case PRIMARY_INDEX_CACHE_EXPIRE_SEC:
      if (value == null) {
        unsetPrimary_index_cache_expire_sec();
      } else {
        setPrimary_index_cache_expire_sec((java.lang.Integer)value);
      }
      break;

    case TABLET_SCHEMA_VERSION:
      if (value == null) {
        unsetTablet_schema_version();
      } else {
        setTablet_schema_version((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLET_ID:
      return getTablet_id();

    case SCHEMA_HASH:
      return getSchema_hash();

    case VERSION:
      return getVersion();

    case VERSION_HASH:
      return getVersion_hash();

    case ROW_COUNT:
      return getRow_count();

    case DATA_SIZE:
      return getData_size();

    case STORAGE_MEDIUM:
      return getStorage_medium();

    case TRANSACTION_IDS:
      return getTransaction_ids();

    case VERSION_COUNT:
      return getVersion_count();

    case PATH_HASH:
      return getPath_hash();

    case VERSION_MISS:
      return isVersion_miss();

    case USED:
      return isUsed();

    case PARTITION_ID:
      return getPartition_id();

    case IS_IN_MEMORY:
      return isIs_in_memory();

    case ENABLE_PERSISTENT_INDEX:
      return isEnable_persistent_index();

    case MIN_READABLE_VERSION:
      return getMin_readable_version();

    case BINLOG_CONFIG_VERSION:
      return getBinlog_config_version();

    case IS_ERROR_STATE:
      return isIs_error_state();

    case MAX_READABLE_VERSION:
      return getMax_readable_version();

    case MAX_ROWSET_CREATION_TIME:
      return getMax_rowset_creation_time();

    case PRIMARY_INDEX_CACHE_EXPIRE_SEC:
      return getPrimary_index_cache_expire_sec();

    case TABLET_SCHEMA_VERSION:
      return getTablet_schema_version();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLET_ID:
      return isSetTablet_id();
    case SCHEMA_HASH:
      return isSetSchema_hash();
    case VERSION:
      return isSetVersion();
    case VERSION_HASH:
      return isSetVersion_hash();
    case ROW_COUNT:
      return isSetRow_count();
    case DATA_SIZE:
      return isSetData_size();
    case STORAGE_MEDIUM:
      return isSetStorage_medium();
    case TRANSACTION_IDS:
      return isSetTransaction_ids();
    case VERSION_COUNT:
      return isSetVersion_count();
    case PATH_HASH:
      return isSetPath_hash();
    case VERSION_MISS:
      return isSetVersion_miss();
    case USED:
      return isSetUsed();
    case PARTITION_ID:
      return isSetPartition_id();
    case IS_IN_MEMORY:
      return isSetIs_in_memory();
    case ENABLE_PERSISTENT_INDEX:
      return isSetEnable_persistent_index();
    case MIN_READABLE_VERSION:
      return isSetMin_readable_version();
    case BINLOG_CONFIG_VERSION:
      return isSetBinlog_config_version();
    case IS_ERROR_STATE:
      return isSetIs_error_state();
    case MAX_READABLE_VERSION:
      return isSetMax_readable_version();
    case MAX_ROWSET_CREATION_TIME:
      return isSetMax_rowset_creation_time();
    case PRIMARY_INDEX_CACHE_EXPIRE_SEC:
      return isSetPrimary_index_cache_expire_sec();
    case TABLET_SCHEMA_VERSION:
      return isSetTablet_schema_version();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTabletInfo)
      return this.equals((TTabletInfo)that);
    return false;
  }

  public boolean equals(TTabletInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tablet_id = true;
    boolean that_present_tablet_id = true;
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_schema_hash = true;
    boolean that_present_schema_hash = true;
    if (this_present_schema_hash || that_present_schema_hash) {
      if (!(this_present_schema_hash && that_present_schema_hash))
        return false;
      if (this.schema_hash != that.schema_hash)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_version_hash = true;
    boolean that_present_version_hash = true;
    if (this_present_version_hash || that_present_version_hash) {
      if (!(this_present_version_hash && that_present_version_hash))
        return false;
      if (this.version_hash != that.version_hash)
        return false;
    }

    boolean this_present_row_count = true;
    boolean that_present_row_count = true;
    if (this_present_row_count || that_present_row_count) {
      if (!(this_present_row_count && that_present_row_count))
        return false;
      if (this.row_count != that.row_count)
        return false;
    }

    boolean this_present_data_size = true;
    boolean that_present_data_size = true;
    if (this_present_data_size || that_present_data_size) {
      if (!(this_present_data_size && that_present_data_size))
        return false;
      if (this.data_size != that.data_size)
        return false;
    }

    boolean this_present_storage_medium = true && this.isSetStorage_medium();
    boolean that_present_storage_medium = true && that.isSetStorage_medium();
    if (this_present_storage_medium || that_present_storage_medium) {
      if (!(this_present_storage_medium && that_present_storage_medium))
        return false;
      if (!this.storage_medium.equals(that.storage_medium))
        return false;
    }

    boolean this_present_transaction_ids = true && this.isSetTransaction_ids();
    boolean that_present_transaction_ids = true && that.isSetTransaction_ids();
    if (this_present_transaction_ids || that_present_transaction_ids) {
      if (!(this_present_transaction_ids && that_present_transaction_ids))
        return false;
      if (!this.transaction_ids.equals(that.transaction_ids))
        return false;
    }

    boolean this_present_version_count = true && this.isSetVersion_count();
    boolean that_present_version_count = true && that.isSetVersion_count();
    if (this_present_version_count || that_present_version_count) {
      if (!(this_present_version_count && that_present_version_count))
        return false;
      if (this.version_count != that.version_count)
        return false;
    }

    boolean this_present_path_hash = true && this.isSetPath_hash();
    boolean that_present_path_hash = true && that.isSetPath_hash();
    if (this_present_path_hash || that_present_path_hash) {
      if (!(this_present_path_hash && that_present_path_hash))
        return false;
      if (this.path_hash != that.path_hash)
        return false;
    }

    boolean this_present_version_miss = true && this.isSetVersion_miss();
    boolean that_present_version_miss = true && that.isSetVersion_miss();
    if (this_present_version_miss || that_present_version_miss) {
      if (!(this_present_version_miss && that_present_version_miss))
        return false;
      if (this.version_miss != that.version_miss)
        return false;
    }

    boolean this_present_used = true && this.isSetUsed();
    boolean that_present_used = true && that.isSetUsed();
    if (this_present_used || that_present_used) {
      if (!(this_present_used && that_present_used))
        return false;
      if (this.used != that.used)
        return false;
    }

    boolean this_present_partition_id = true && this.isSetPartition_id();
    boolean that_present_partition_id = true && that.isSetPartition_id();
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_is_in_memory = true && this.isSetIs_in_memory();
    boolean that_present_is_in_memory = true && that.isSetIs_in_memory();
    if (this_present_is_in_memory || that_present_is_in_memory) {
      if (!(this_present_is_in_memory && that_present_is_in_memory))
        return false;
      if (this.is_in_memory != that.is_in_memory)
        return false;
    }

    boolean this_present_enable_persistent_index = true && this.isSetEnable_persistent_index();
    boolean that_present_enable_persistent_index = true && that.isSetEnable_persistent_index();
    if (this_present_enable_persistent_index || that_present_enable_persistent_index) {
      if (!(this_present_enable_persistent_index && that_present_enable_persistent_index))
        return false;
      if (this.enable_persistent_index != that.enable_persistent_index)
        return false;
    }

    boolean this_present_min_readable_version = true && this.isSetMin_readable_version();
    boolean that_present_min_readable_version = true && that.isSetMin_readable_version();
    if (this_present_min_readable_version || that_present_min_readable_version) {
      if (!(this_present_min_readable_version && that_present_min_readable_version))
        return false;
      if (this.min_readable_version != that.min_readable_version)
        return false;
    }

    boolean this_present_binlog_config_version = true && this.isSetBinlog_config_version();
    boolean that_present_binlog_config_version = true && that.isSetBinlog_config_version();
    if (this_present_binlog_config_version || that_present_binlog_config_version) {
      if (!(this_present_binlog_config_version && that_present_binlog_config_version))
        return false;
      if (this.binlog_config_version != that.binlog_config_version)
        return false;
    }

    boolean this_present_is_error_state = true && this.isSetIs_error_state();
    boolean that_present_is_error_state = true && that.isSetIs_error_state();
    if (this_present_is_error_state || that_present_is_error_state) {
      if (!(this_present_is_error_state && that_present_is_error_state))
        return false;
      if (this.is_error_state != that.is_error_state)
        return false;
    }

    boolean this_present_max_readable_version = true && this.isSetMax_readable_version();
    boolean that_present_max_readable_version = true && that.isSetMax_readable_version();
    if (this_present_max_readable_version || that_present_max_readable_version) {
      if (!(this_present_max_readable_version && that_present_max_readable_version))
        return false;
      if (this.max_readable_version != that.max_readable_version)
        return false;
    }

    boolean this_present_max_rowset_creation_time = true && this.isSetMax_rowset_creation_time();
    boolean that_present_max_rowset_creation_time = true && that.isSetMax_rowset_creation_time();
    if (this_present_max_rowset_creation_time || that_present_max_rowset_creation_time) {
      if (!(this_present_max_rowset_creation_time && that_present_max_rowset_creation_time))
        return false;
      if (this.max_rowset_creation_time != that.max_rowset_creation_time)
        return false;
    }

    boolean this_present_primary_index_cache_expire_sec = true && this.isSetPrimary_index_cache_expire_sec();
    boolean that_present_primary_index_cache_expire_sec = true && that.isSetPrimary_index_cache_expire_sec();
    if (this_present_primary_index_cache_expire_sec || that_present_primary_index_cache_expire_sec) {
      if (!(this_present_primary_index_cache_expire_sec && that_present_primary_index_cache_expire_sec))
        return false;
      if (this.primary_index_cache_expire_sec != that.primary_index_cache_expire_sec)
        return false;
    }

    boolean this_present_tablet_schema_version = true && this.isSetTablet_schema_version();
    boolean that_present_tablet_schema_version = true && that.isSetTablet_schema_version();
    if (this_present_tablet_schema_version || that_present_tablet_schema_version) {
      if (!(this_present_tablet_schema_version && that_present_tablet_schema_version))
        return false;
      if (this.tablet_schema_version != that.tablet_schema_version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tablet_id);

    hashCode = hashCode * 8191 + schema_hash;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version_hash);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(row_count);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(data_size);

    hashCode = hashCode * 8191 + ((isSetStorage_medium()) ? 131071 : 524287);
    if (isSetStorage_medium())
      hashCode = hashCode * 8191 + storage_medium.getValue();

    hashCode = hashCode * 8191 + ((isSetTransaction_ids()) ? 131071 : 524287);
    if (isSetTransaction_ids())
      hashCode = hashCode * 8191 + transaction_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion_count()) ? 131071 : 524287);
    if (isSetVersion_count())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version_count);

    hashCode = hashCode * 8191 + ((isSetPath_hash()) ? 131071 : 524287);
    if (isSetPath_hash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(path_hash);

    hashCode = hashCode * 8191 + ((isSetVersion_miss()) ? 131071 : 524287);
    if (isSetVersion_miss())
      hashCode = hashCode * 8191 + ((version_miss) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetUsed()) ? 131071 : 524287);
    if (isSetUsed())
      hashCode = hashCode * 8191 + ((used) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPartition_id()) ? 131071 : 524287);
    if (isSetPartition_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_id);

    hashCode = hashCode * 8191 + ((isSetIs_in_memory()) ? 131071 : 524287);
    if (isSetIs_in_memory())
      hashCode = hashCode * 8191 + ((is_in_memory) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnable_persistent_index()) ? 131071 : 524287);
    if (isSetEnable_persistent_index())
      hashCode = hashCode * 8191 + ((enable_persistent_index) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMin_readable_version()) ? 131071 : 524287);
    if (isSetMin_readable_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(min_readable_version);

    hashCode = hashCode * 8191 + ((isSetBinlog_config_version()) ? 131071 : 524287);
    if (isSetBinlog_config_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(binlog_config_version);

    hashCode = hashCode * 8191 + ((isSetIs_error_state()) ? 131071 : 524287);
    if (isSetIs_error_state())
      hashCode = hashCode * 8191 + ((is_error_state) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMax_readable_version()) ? 131071 : 524287);
    if (isSetMax_readable_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_readable_version);

    hashCode = hashCode * 8191 + ((isSetMax_rowset_creation_time()) ? 131071 : 524287);
    if (isSetMax_rowset_creation_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_rowset_creation_time);

    hashCode = hashCode * 8191 + ((isSetPrimary_index_cache_expire_sec()) ? 131071 : 524287);
    if (isSetPrimary_index_cache_expire_sec())
      hashCode = hashCode * 8191 + primary_index_cache_expire_sec;

    hashCode = hashCode * 8191 + ((isSetTablet_schema_version()) ? 131071 : 524287);
    if (isSetTablet_schema_version())
      hashCode = hashCode * 8191 + tablet_schema_version;

    return hashCode;
  }

  @Override
  public int compareTo(TTabletInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTablet_id(), other.isSetTablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchema_hash(), other.isSetSchema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_hash, other.schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion_hash(), other.isSetVersion_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_hash, other.version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRow_count(), other.isSetRow_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_count, other.row_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetData_size(), other.isSetData_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_size, other.data_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStorage_medium(), other.isSetStorage_medium());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorage_medium()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_medium, other.storage_medium);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTransaction_ids(), other.isSetTransaction_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransaction_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transaction_ids, other.transaction_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion_count(), other.isSetVersion_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_count, other.version_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPath_hash(), other.isSetPath_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path_hash, other.path_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion_miss(), other.isSetVersion_miss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_miss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_miss, other.version_miss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUsed(), other.isSetUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.used, other.used);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_id(), other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_in_memory(), other.isSetIs_in_memory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_in_memory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_in_memory, other.is_in_memory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_persistent_index(), other.isSetEnable_persistent_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_persistent_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_persistent_index, other.enable_persistent_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMin_readable_version(), other.isSetMin_readable_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_readable_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_readable_version, other.min_readable_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBinlog_config_version(), other.isSetBinlog_config_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinlog_config_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binlog_config_version, other.binlog_config_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_error_state(), other.isSetIs_error_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_error_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_error_state, other.is_error_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_readable_version(), other.isSetMax_readable_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_readable_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_readable_version, other.max_readable_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_rowset_creation_time(), other.isSetMax_rowset_creation_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_rowset_creation_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_rowset_creation_time, other.max_rowset_creation_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPrimary_index_cache_expire_sec(), other.isSetPrimary_index_cache_expire_sec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimary_index_cache_expire_sec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primary_index_cache_expire_sec, other.primary_index_cache_expire_sec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_schema_version(), other.isSetTablet_schema_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_schema_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_schema_version, other.tablet_schema_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTabletInfo(");
    boolean first = true;

    sb.append("tablet_id:");
    sb.append(this.tablet_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("schema_hash:");
    sb.append(this.schema_hash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version_hash:");
    sb.append(this.version_hash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("row_count:");
    sb.append(this.row_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("data_size:");
    sb.append(this.data_size);
    first = false;
    if (isSetStorage_medium()) {
      if (!first) sb.append(", ");
      sb.append("storage_medium:");
      if (this.storage_medium == null) {
        sb.append("null");
      } else {
        sb.append(this.storage_medium);
      }
      first = false;
    }
    if (isSetTransaction_ids()) {
      if (!first) sb.append(", ");
      sb.append("transaction_ids:");
      if (this.transaction_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.transaction_ids);
      }
      first = false;
    }
    if (isSetVersion_count()) {
      if (!first) sb.append(", ");
      sb.append("version_count:");
      sb.append(this.version_count);
      first = false;
    }
    if (isSetPath_hash()) {
      if (!first) sb.append(", ");
      sb.append("path_hash:");
      sb.append(this.path_hash);
      first = false;
    }
    if (isSetVersion_miss()) {
      if (!first) sb.append(", ");
      sb.append("version_miss:");
      sb.append(this.version_miss);
      first = false;
    }
    if (isSetUsed()) {
      if (!first) sb.append(", ");
      sb.append("used:");
      sb.append(this.used);
      first = false;
    }
    if (isSetPartition_id()) {
      if (!first) sb.append(", ");
      sb.append("partition_id:");
      sb.append(this.partition_id);
      first = false;
    }
    if (isSetIs_in_memory()) {
      if (!first) sb.append(", ");
      sb.append("is_in_memory:");
      sb.append(this.is_in_memory);
      first = false;
    }
    if (isSetEnable_persistent_index()) {
      if (!first) sb.append(", ");
      sb.append("enable_persistent_index:");
      sb.append(this.enable_persistent_index);
      first = false;
    }
    if (isSetMin_readable_version()) {
      if (!first) sb.append(", ");
      sb.append("min_readable_version:");
      sb.append(this.min_readable_version);
      first = false;
    }
    if (isSetBinlog_config_version()) {
      if (!first) sb.append(", ");
      sb.append("binlog_config_version:");
      sb.append(this.binlog_config_version);
      first = false;
    }
    if (isSetIs_error_state()) {
      if (!first) sb.append(", ");
      sb.append("is_error_state:");
      sb.append(this.is_error_state);
      first = false;
    }
    if (isSetMax_readable_version()) {
      if (!first) sb.append(", ");
      sb.append("max_readable_version:");
      sb.append(this.max_readable_version);
      first = false;
    }
    if (isSetMax_rowset_creation_time()) {
      if (!first) sb.append(", ");
      sb.append("max_rowset_creation_time:");
      sb.append(this.max_rowset_creation_time);
      first = false;
    }
    if (isSetPrimary_index_cache_expire_sec()) {
      if (!first) sb.append(", ");
      sb.append("primary_index_cache_expire_sec:");
      sb.append(this.primary_index_cache_expire_sec);
      first = false;
    }
    if (isSetTablet_schema_version()) {
      if (!first) sb.append(", ");
      sb.append("tablet_schema_version:");
      sb.append(this.tablet_schema_version);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tablet_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'schema_hash' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'version_hash' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'row_count' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'data_size' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTabletInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTabletInfoStandardScheme getScheme() {
      return new TTabletInfoStandardScheme();
    }
  }

  private static class TTabletInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTabletInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTabletInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schema_hash = iprot.readI32();
              struct.setSchema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version_hash = iprot.readI64();
              struct.setVersion_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.row_count = iprot.readI64();
              struct.setRow_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATA_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.data_size = iprot.readI64();
              struct.setData_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STORAGE_MEDIUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.storage_medium = com.starrocks.thrift.TStorageMedium.findByValue(iprot.readI32());
              struct.setStorage_mediumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TRANSACTION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.transaction_ids = new java.util.ArrayList<java.lang.Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.transaction_ids.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTransaction_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VERSION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version_count = iprot.readI64();
              struct.setVersion_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PATH_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.path_hash = iprot.readI64();
              struct.setPath_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VERSION_MISS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.version_miss = iprot.readBool();
              struct.setVersion_missIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // USED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.used = iprot.readBool();
              struct.setUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_IN_MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_in_memory = iprot.readBool();
              struct.setIs_in_memoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ENABLE_PERSISTENT_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_persistent_index = iprot.readBool();
              struct.setEnable_persistent_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MIN_READABLE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_readable_version = iprot.readI64();
              struct.setMin_readable_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BINLOG_CONFIG_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.binlog_config_version = iprot.readI64();
              struct.setBinlog_config_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IS_ERROR_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_error_state = iprot.readBool();
              struct.setIs_error_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MAX_READABLE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_readable_version = iprot.readI64();
              struct.setMax_readable_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MAX_ROWSET_CREATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_rowset_creation_time = iprot.readI64();
              struct.setMax_rowset_creation_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PRIMARY_INDEX_CACHE_EXPIRE_SEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.primary_index_cache_expire_sec = iprot.readI32();
              struct.setPrimary_index_cache_expire_secIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TABLET_SCHEMA_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tablet_schema_version = iprot.readI32();
              struct.setTablet_schema_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTablet_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tablet_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSchema_hash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'schema_hash' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVersion_hash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version_hash' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRow_count()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'row_count' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetData_size()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'data_size' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTabletInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
      oprot.writeI64(struct.tablet_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHEMA_HASH_FIELD_DESC);
      oprot.writeI32(struct.schema_hash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI64(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_HASH_FIELD_DESC);
      oprot.writeI64(struct.version_hash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
      oprot.writeI64(struct.row_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATA_SIZE_FIELD_DESC);
      oprot.writeI64(struct.data_size);
      oprot.writeFieldEnd();
      if (struct.storage_medium != null) {
        if (struct.isSetStorage_medium()) {
          oprot.writeFieldBegin(STORAGE_MEDIUM_FIELD_DESC);
          oprot.writeI32(struct.storage_medium.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.transaction_ids != null) {
        if (struct.isSetTransaction_ids()) {
          oprot.writeFieldBegin(TRANSACTION_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.transaction_ids.size()));
            for (long _iter3 : struct.transaction_ids)
            {
              oprot.writeI64(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVersion_count()) {
        oprot.writeFieldBegin(VERSION_COUNT_FIELD_DESC);
        oprot.writeI64(struct.version_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPath_hash()) {
        oprot.writeFieldBegin(PATH_HASH_FIELD_DESC);
        oprot.writeI64(struct.path_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersion_miss()) {
        oprot.writeFieldBegin(VERSION_MISS_FIELD_DESC);
        oprot.writeBool(struct.version_miss);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUsed()) {
        oprot.writeFieldBegin(USED_FIELD_DESC);
        oprot.writeBool(struct.used);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartition_id()) {
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI64(struct.partition_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_in_memory()) {
        oprot.writeFieldBegin(IS_IN_MEMORY_FIELD_DESC);
        oprot.writeBool(struct.is_in_memory);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_persistent_index()) {
        oprot.writeFieldBegin(ENABLE_PERSISTENT_INDEX_FIELD_DESC);
        oprot.writeBool(struct.enable_persistent_index);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMin_readable_version()) {
        oprot.writeFieldBegin(MIN_READABLE_VERSION_FIELD_DESC);
        oprot.writeI64(struct.min_readable_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBinlog_config_version()) {
        oprot.writeFieldBegin(BINLOG_CONFIG_VERSION_FIELD_DESC);
        oprot.writeI64(struct.binlog_config_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_error_state()) {
        oprot.writeFieldBegin(IS_ERROR_STATE_FIELD_DESC);
        oprot.writeBool(struct.is_error_state);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_readable_version()) {
        oprot.writeFieldBegin(MAX_READABLE_VERSION_FIELD_DESC);
        oprot.writeI64(struct.max_readable_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_rowset_creation_time()) {
        oprot.writeFieldBegin(MAX_ROWSET_CREATION_TIME_FIELD_DESC);
        oprot.writeI64(struct.max_rowset_creation_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrimary_index_cache_expire_sec()) {
        oprot.writeFieldBegin(PRIMARY_INDEX_CACHE_EXPIRE_SEC_FIELD_DESC);
        oprot.writeI32(struct.primary_index_cache_expire_sec);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTablet_schema_version()) {
        oprot.writeFieldBegin(TABLET_SCHEMA_VERSION_FIELD_DESC);
        oprot.writeI32(struct.tablet_schema_version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTabletInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTabletInfoTupleScheme getScheme() {
      return new TTabletInfoTupleScheme();
    }
  }

  private static class TTabletInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTabletInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTabletInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.tablet_id);
      oprot.writeI32(struct.schema_hash);
      oprot.writeI64(struct.version);
      oprot.writeI64(struct.version_hash);
      oprot.writeI64(struct.row_count);
      oprot.writeI64(struct.data_size);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStorage_medium()) {
        optionals.set(0);
      }
      if (struct.isSetTransaction_ids()) {
        optionals.set(1);
      }
      if (struct.isSetVersion_count()) {
        optionals.set(2);
      }
      if (struct.isSetPath_hash()) {
        optionals.set(3);
      }
      if (struct.isSetVersion_miss()) {
        optionals.set(4);
      }
      if (struct.isSetUsed()) {
        optionals.set(5);
      }
      if (struct.isSetPartition_id()) {
        optionals.set(6);
      }
      if (struct.isSetIs_in_memory()) {
        optionals.set(7);
      }
      if (struct.isSetEnable_persistent_index()) {
        optionals.set(8);
      }
      if (struct.isSetMin_readable_version()) {
        optionals.set(9);
      }
      if (struct.isSetBinlog_config_version()) {
        optionals.set(10);
      }
      if (struct.isSetIs_error_state()) {
        optionals.set(11);
      }
      if (struct.isSetMax_readable_version()) {
        optionals.set(12);
      }
      if (struct.isSetMax_rowset_creation_time()) {
        optionals.set(13);
      }
      if (struct.isSetPrimary_index_cache_expire_sec()) {
        optionals.set(14);
      }
      if (struct.isSetTablet_schema_version()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetStorage_medium()) {
        oprot.writeI32(struct.storage_medium.getValue());
      }
      if (struct.isSetTransaction_ids()) {
        {
          oprot.writeI32(struct.transaction_ids.size());
          for (long _iter4 : struct.transaction_ids)
          {
            oprot.writeI64(_iter4);
          }
        }
      }
      if (struct.isSetVersion_count()) {
        oprot.writeI64(struct.version_count);
      }
      if (struct.isSetPath_hash()) {
        oprot.writeI64(struct.path_hash);
      }
      if (struct.isSetVersion_miss()) {
        oprot.writeBool(struct.version_miss);
      }
      if (struct.isSetUsed()) {
        oprot.writeBool(struct.used);
      }
      if (struct.isSetPartition_id()) {
        oprot.writeI64(struct.partition_id);
      }
      if (struct.isSetIs_in_memory()) {
        oprot.writeBool(struct.is_in_memory);
      }
      if (struct.isSetEnable_persistent_index()) {
        oprot.writeBool(struct.enable_persistent_index);
      }
      if (struct.isSetMin_readable_version()) {
        oprot.writeI64(struct.min_readable_version);
      }
      if (struct.isSetBinlog_config_version()) {
        oprot.writeI64(struct.binlog_config_version);
      }
      if (struct.isSetIs_error_state()) {
        oprot.writeBool(struct.is_error_state);
      }
      if (struct.isSetMax_readable_version()) {
        oprot.writeI64(struct.max_readable_version);
      }
      if (struct.isSetMax_rowset_creation_time()) {
        oprot.writeI64(struct.max_rowset_creation_time);
      }
      if (struct.isSetPrimary_index_cache_expire_sec()) {
        oprot.writeI32(struct.primary_index_cache_expire_sec);
      }
      if (struct.isSetTablet_schema_version()) {
        oprot.writeI32(struct.tablet_schema_version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTabletInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tablet_id = iprot.readI64();
      struct.setTablet_idIsSet(true);
      struct.schema_hash = iprot.readI32();
      struct.setSchema_hashIsSet(true);
      struct.version = iprot.readI64();
      struct.setVersionIsSet(true);
      struct.version_hash = iprot.readI64();
      struct.setVersion_hashIsSet(true);
      struct.row_count = iprot.readI64();
      struct.setRow_countIsSet(true);
      struct.data_size = iprot.readI64();
      struct.setData_sizeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.storage_medium = com.starrocks.thrift.TStorageMedium.findByValue(iprot.readI32());
        struct.setStorage_mediumIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.transaction_ids = new java.util.ArrayList<java.lang.Long>(_list5.size);
          long _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readI64();
            struct.transaction_ids.add(_elem6);
          }
        }
        struct.setTransaction_idsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.version_count = iprot.readI64();
        struct.setVersion_countIsSet(true);
      }
      if (incoming.get(3)) {
        struct.path_hash = iprot.readI64();
        struct.setPath_hashIsSet(true);
      }
      if (incoming.get(4)) {
        struct.version_miss = iprot.readBool();
        struct.setVersion_missIsSet(true);
      }
      if (incoming.get(5)) {
        struct.used = iprot.readBool();
        struct.setUsedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.partition_id = iprot.readI64();
        struct.setPartition_idIsSet(true);
      }
      if (incoming.get(7)) {
        struct.is_in_memory = iprot.readBool();
        struct.setIs_in_memoryIsSet(true);
      }
      if (incoming.get(8)) {
        struct.enable_persistent_index = iprot.readBool();
        struct.setEnable_persistent_indexIsSet(true);
      }
      if (incoming.get(9)) {
        struct.min_readable_version = iprot.readI64();
        struct.setMin_readable_versionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.binlog_config_version = iprot.readI64();
        struct.setBinlog_config_versionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.is_error_state = iprot.readBool();
        struct.setIs_error_stateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.max_readable_version = iprot.readI64();
        struct.setMax_readable_versionIsSet(true);
      }
      if (incoming.get(13)) {
        struct.max_rowset_creation_time = iprot.readI64();
        struct.setMax_rowset_creation_timeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.primary_index_cache_expire_sec = iprot.readI32();
        struct.setPrimary_index_cache_expire_secIsSet(true);
      }
      if (incoming.get(15)) {
        struct.tablet_schema_version = iprot.readI32();
        struct.setTablet_schema_versionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

