/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TSnapshotRequest implements org.apache.thrift.TBase<TSnapshotRequest, TSnapshotRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TSnapshotRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSnapshotRequest");

  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_hash", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("version_hash", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MISSING_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("missing_version", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField LIST_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("list_files", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField ALLOW_INCREMENTAL_CLONE_FIELD_DESC = new org.apache.thrift.protocol.TField("allow_incremental_clone", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField PREFERRED_SNAPSHOT_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("preferred_snapshot_format", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField MISSING_VERSION_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("missing_version_ranges", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField IS_RESTORE_TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("is_restore_task", org.apache.thrift.protocol.TType.BOOL, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSnapshotRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSnapshotRequestTupleSchemeFactory();

  public long tablet_id; // required
  public int schema_hash; // required
  public long version; // optional
  public long version_hash; // optional
  public long timeout; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> missing_version; // optional
  public boolean list_files; // optional
  public boolean allow_incremental_clone; // optional
  public int preferred_snapshot_format; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> missing_version_ranges; // optional
  public boolean is_restore_task; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLET_ID((short)1, "tablet_id"),
    SCHEMA_HASH((short)2, "schema_hash"),
    VERSION((short)3, "version"),
    VERSION_HASH((short)4, "version_hash"),
    TIMEOUT((short)5, "timeout"),
    MISSING_VERSION((short)6, "missing_version"),
    LIST_FILES((short)7, "list_files"),
    ALLOW_INCREMENTAL_CLONE((short)8, "allow_incremental_clone"),
    PREFERRED_SNAPSHOT_FORMAT((short)9, "preferred_snapshot_format"),
    MISSING_VERSION_RANGES((short)10, "missing_version_ranges"),
    IS_RESTORE_TASK((short)11, "is_restore_task");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLET_ID
          return TABLET_ID;
        case 2: // SCHEMA_HASH
          return SCHEMA_HASH;
        case 3: // VERSION
          return VERSION;
        case 4: // VERSION_HASH
          return VERSION_HASH;
        case 5: // TIMEOUT
          return TIMEOUT;
        case 6: // MISSING_VERSION
          return MISSING_VERSION;
        case 7: // LIST_FILES
          return LIST_FILES;
        case 8: // ALLOW_INCREMENTAL_CLONE
          return ALLOW_INCREMENTAL_CLONE;
        case 9: // PREFERRED_SNAPSHOT_FORMAT
          return PREFERRED_SNAPSHOT_FORMAT;
        case 10: // MISSING_VERSION_RANGES
          return MISSING_VERSION_RANGES;
        case 11: // IS_RESTORE_TASK
          return IS_RESTORE_TASK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLET_ID_ISSET_ID = 0;
  private static final int __SCHEMA_HASH_ISSET_ID = 1;
  private static final int __VERSION_ISSET_ID = 2;
  private static final int __VERSION_HASH_ISSET_ID = 3;
  private static final int __TIMEOUT_ISSET_ID = 4;
  private static final int __LIST_FILES_ISSET_ID = 5;
  private static final int __ALLOW_INCREMENTAL_CLONE_ISSET_ID = 6;
  private static final int __PREFERRED_SNAPSHOT_FORMAT_ISSET_ID = 7;
  private static final int __IS_RESTORE_TASK_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.VERSION,_Fields.VERSION_HASH,_Fields.TIMEOUT,_Fields.MISSING_VERSION,_Fields.LIST_FILES,_Fields.ALLOW_INCREMENTAL_CLONE,_Fields.PREFERRED_SNAPSHOT_FORMAT,_Fields.MISSING_VERSION_RANGES,_Fields.IS_RESTORE_TASK};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("schema_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSchemaHash")));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersion")));
    tmpMap.put(_Fields.VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("version_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersionHash")));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MISSING_VERSION, new org.apache.thrift.meta_data.FieldMetaData("missing_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "TVersion"))));
    tmpMap.put(_Fields.LIST_FILES, new org.apache.thrift.meta_data.FieldMetaData("list_files", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ALLOW_INCREMENTAL_CLONE, new org.apache.thrift.meta_data.FieldMetaData("allow_incremental_clone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PREFERRED_SNAPSHOT_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("preferred_snapshot_format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MISSING_VERSION_RANGES, new org.apache.thrift.meta_data.FieldMetaData("missing_version_ranges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "TVersion"))));
    tmpMap.put(_Fields.IS_RESTORE_TASK, new org.apache.thrift.meta_data.FieldMetaData("is_restore_task", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSnapshotRequest.class, metaDataMap);
  }

  public TSnapshotRequest() {
    this.preferred_snapshot_format = 4;

    this.is_restore_task = false;

  }

  public TSnapshotRequest(
    long tablet_id,
    int schema_hash)
  {
    this();
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSnapshotRequest(TSnapshotRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tablet_id = other.tablet_id;
    this.schema_hash = other.schema_hash;
    this.version = other.version;
    this.version_hash = other.version_hash;
    this.timeout = other.timeout;
    if (other.isSetMissing_version()) {
      java.util.List<java.lang.Long> __this__missing_version = new java.util.ArrayList<java.lang.Long>(other.missing_version.size());
      for (java.lang.Long other_element : other.missing_version) {
        __this__missing_version.add(other_element);
      }
      this.missing_version = __this__missing_version;
    }
    this.list_files = other.list_files;
    this.allow_incremental_clone = other.allow_incremental_clone;
    this.preferred_snapshot_format = other.preferred_snapshot_format;
    if (other.isSetMissing_version_ranges()) {
      java.util.List<java.lang.Long> __this__missing_version_ranges = new java.util.ArrayList<java.lang.Long>(other.missing_version_ranges.size());
      for (java.lang.Long other_element : other.missing_version_ranges) {
        __this__missing_version_ranges.add(other_element);
      }
      this.missing_version_ranges = __this__missing_version_ranges;
    }
    this.is_restore_task = other.is_restore_task;
  }

  @Override
  public TSnapshotRequest deepCopy() {
    return new TSnapshotRequest(this);
  }

  @Override
  public void clear() {
    setTablet_idIsSet(false);
    this.tablet_id = 0;
    setSchema_hashIsSet(false);
    this.schema_hash = 0;
    setVersionIsSet(false);
    this.version = 0;
    setVersion_hashIsSet(false);
    this.version_hash = 0;
    setTimeoutIsSet(false);
    this.timeout = 0;
    this.missing_version = null;
    setList_filesIsSet(false);
    this.list_files = false;
    setAllow_incremental_cloneIsSet(false);
    this.allow_incremental_clone = false;
    this.preferred_snapshot_format = 4;

    this.missing_version_ranges = null;
    this.is_restore_task = false;

  }

  public long getTablet_id() {
    return this.tablet_id;
  }

  public TSnapshotRequest setTablet_id(long tablet_id) {
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    return this;
  }

  public void unsetTablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  public int getSchema_hash() {
    return this.schema_hash;
  }

  public TSnapshotRequest setSchema_hash(int schema_hash) {
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    return this;
  }

  public void unsetSchema_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  public void setSchema_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID, value);
  }

  public long getVersion() {
    return this.version;
  }

  public TSnapshotRequest setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public long getVersion_hash() {
    return this.version_hash;
  }

  public TSnapshotRequest setVersion_hash(long version_hash) {
    this.version_hash = version_hash;
    setVersion_hashIsSet(true);
    return this;
  }

  public void unsetVersion_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_HASH_ISSET_ID);
  }

  public void setVersion_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_HASH_ISSET_ID, value);
  }

  public long getTimeout() {
    return this.timeout;
  }

  public TSnapshotRequest setTimeout(long timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public int getMissing_versionSize() {
    return (this.missing_version == null) ? 0 : this.missing_version.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getMissing_versionIterator() {
    return (this.missing_version == null) ? null : this.missing_version.iterator();
  }

  public void addToMissing_version(long elem) {
    if (this.missing_version == null) {
      this.missing_version = new java.util.ArrayList<java.lang.Long>();
    }
    this.missing_version.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getMissing_version() {
    return this.missing_version;
  }

  public TSnapshotRequest setMissing_version(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> missing_version) {
    this.missing_version = missing_version;
    return this;
  }

  public void unsetMissing_version() {
    this.missing_version = null;
  }

  /** Returns true if field missing_version is set (has been assigned a value) and false otherwise */
  public boolean isSetMissing_version() {
    return this.missing_version != null;
  }

  public void setMissing_versionIsSet(boolean value) {
    if (!value) {
      this.missing_version = null;
    }
  }

  public boolean isList_files() {
    return this.list_files;
  }

  public TSnapshotRequest setList_files(boolean list_files) {
    this.list_files = list_files;
    setList_filesIsSet(true);
    return this;
  }

  public void unsetList_files() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIST_FILES_ISSET_ID);
  }

  /** Returns true if field list_files is set (has been assigned a value) and false otherwise */
  public boolean isSetList_files() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIST_FILES_ISSET_ID);
  }

  public void setList_filesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIST_FILES_ISSET_ID, value);
  }

  public boolean isAllow_incremental_clone() {
    return this.allow_incremental_clone;
  }

  public TSnapshotRequest setAllow_incremental_clone(boolean allow_incremental_clone) {
    this.allow_incremental_clone = allow_incremental_clone;
    setAllow_incremental_cloneIsSet(true);
    return this;
  }

  public void unsetAllow_incremental_clone() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALLOW_INCREMENTAL_CLONE_ISSET_ID);
  }

  /** Returns true if field allow_incremental_clone is set (has been assigned a value) and false otherwise */
  public boolean isSetAllow_incremental_clone() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALLOW_INCREMENTAL_CLONE_ISSET_ID);
  }

  public void setAllow_incremental_cloneIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALLOW_INCREMENTAL_CLONE_ISSET_ID, value);
  }

  public int getPreferred_snapshot_format() {
    return this.preferred_snapshot_format;
  }

  public TSnapshotRequest setPreferred_snapshot_format(int preferred_snapshot_format) {
    this.preferred_snapshot_format = preferred_snapshot_format;
    setPreferred_snapshot_formatIsSet(true);
    return this;
  }

  public void unsetPreferred_snapshot_format() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PREFERRED_SNAPSHOT_FORMAT_ISSET_ID);
  }

  /** Returns true if field preferred_snapshot_format is set (has been assigned a value) and false otherwise */
  public boolean isSetPreferred_snapshot_format() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PREFERRED_SNAPSHOT_FORMAT_ISSET_ID);
  }

  public void setPreferred_snapshot_formatIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PREFERRED_SNAPSHOT_FORMAT_ISSET_ID, value);
  }

  public int getMissing_version_rangesSize() {
    return (this.missing_version_ranges == null) ? 0 : this.missing_version_ranges.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getMissing_version_rangesIterator() {
    return (this.missing_version_ranges == null) ? null : this.missing_version_ranges.iterator();
  }

  public void addToMissing_version_ranges(long elem) {
    if (this.missing_version_ranges == null) {
      this.missing_version_ranges = new java.util.ArrayList<java.lang.Long>();
    }
    this.missing_version_ranges.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getMissing_version_ranges() {
    return this.missing_version_ranges;
  }

  public TSnapshotRequest setMissing_version_ranges(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> missing_version_ranges) {
    this.missing_version_ranges = missing_version_ranges;
    return this;
  }

  public void unsetMissing_version_ranges() {
    this.missing_version_ranges = null;
  }

  /** Returns true if field missing_version_ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetMissing_version_ranges() {
    return this.missing_version_ranges != null;
  }

  public void setMissing_version_rangesIsSet(boolean value) {
    if (!value) {
      this.missing_version_ranges = null;
    }
  }

  public boolean isIs_restore_task() {
    return this.is_restore_task;
  }

  public TSnapshotRequest setIs_restore_task(boolean is_restore_task) {
    this.is_restore_task = is_restore_task;
    setIs_restore_taskIsSet(true);
    return this;
  }

  public void unsetIs_restore_task() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_RESTORE_TASK_ISSET_ID);
  }

  /** Returns true if field is_restore_task is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_restore_task() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_RESTORE_TASK_ISSET_ID);
  }

  public void setIs_restore_taskIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_RESTORE_TASK_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLET_ID:
      if (value == null) {
        unsetTablet_id();
      } else {
        setTablet_id((java.lang.Long)value);
      }
      break;

    case SCHEMA_HASH:
      if (value == null) {
        unsetSchema_hash();
      } else {
        setSchema_hash((java.lang.Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Long)value);
      }
      break;

    case VERSION_HASH:
      if (value == null) {
        unsetVersion_hash();
      } else {
        setVersion_hash((java.lang.Long)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((java.lang.Long)value);
      }
      break;

    case MISSING_VERSION:
      if (value == null) {
        unsetMissing_version();
      } else {
        setMissing_version((java.util.List<java.lang.Long>)value);
      }
      break;

    case LIST_FILES:
      if (value == null) {
        unsetList_files();
      } else {
        setList_files((java.lang.Boolean)value);
      }
      break;

    case ALLOW_INCREMENTAL_CLONE:
      if (value == null) {
        unsetAllow_incremental_clone();
      } else {
        setAllow_incremental_clone((java.lang.Boolean)value);
      }
      break;

    case PREFERRED_SNAPSHOT_FORMAT:
      if (value == null) {
        unsetPreferred_snapshot_format();
      } else {
        setPreferred_snapshot_format((java.lang.Integer)value);
      }
      break;

    case MISSING_VERSION_RANGES:
      if (value == null) {
        unsetMissing_version_ranges();
      } else {
        setMissing_version_ranges((java.util.List<java.lang.Long>)value);
      }
      break;

    case IS_RESTORE_TASK:
      if (value == null) {
        unsetIs_restore_task();
      } else {
        setIs_restore_task((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLET_ID:
      return getTablet_id();

    case SCHEMA_HASH:
      return getSchema_hash();

    case VERSION:
      return getVersion();

    case VERSION_HASH:
      return getVersion_hash();

    case TIMEOUT:
      return getTimeout();

    case MISSING_VERSION:
      return getMissing_version();

    case LIST_FILES:
      return isList_files();

    case ALLOW_INCREMENTAL_CLONE:
      return isAllow_incremental_clone();

    case PREFERRED_SNAPSHOT_FORMAT:
      return getPreferred_snapshot_format();

    case MISSING_VERSION_RANGES:
      return getMissing_version_ranges();

    case IS_RESTORE_TASK:
      return isIs_restore_task();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLET_ID:
      return isSetTablet_id();
    case SCHEMA_HASH:
      return isSetSchema_hash();
    case VERSION:
      return isSetVersion();
    case VERSION_HASH:
      return isSetVersion_hash();
    case TIMEOUT:
      return isSetTimeout();
    case MISSING_VERSION:
      return isSetMissing_version();
    case LIST_FILES:
      return isSetList_files();
    case ALLOW_INCREMENTAL_CLONE:
      return isSetAllow_incremental_clone();
    case PREFERRED_SNAPSHOT_FORMAT:
      return isSetPreferred_snapshot_format();
    case MISSING_VERSION_RANGES:
      return isSetMissing_version_ranges();
    case IS_RESTORE_TASK:
      return isSetIs_restore_task();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSnapshotRequest)
      return this.equals((TSnapshotRequest)that);
    return false;
  }

  public boolean equals(TSnapshotRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tablet_id = true;
    boolean that_present_tablet_id = true;
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_schema_hash = true;
    boolean that_present_schema_hash = true;
    if (this_present_schema_hash || that_present_schema_hash) {
      if (!(this_present_schema_hash && that_present_schema_hash))
        return false;
      if (this.schema_hash != that.schema_hash)
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_version_hash = true && this.isSetVersion_hash();
    boolean that_present_version_hash = true && that.isSetVersion_hash();
    if (this_present_version_hash || that_present_version_hash) {
      if (!(this_present_version_hash && that_present_version_hash))
        return false;
      if (this.version_hash != that.version_hash)
        return false;
    }

    boolean this_present_timeout = true && this.isSetTimeout();
    boolean that_present_timeout = true && that.isSetTimeout();
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    boolean this_present_missing_version = true && this.isSetMissing_version();
    boolean that_present_missing_version = true && that.isSetMissing_version();
    if (this_present_missing_version || that_present_missing_version) {
      if (!(this_present_missing_version && that_present_missing_version))
        return false;
      if (!this.missing_version.equals(that.missing_version))
        return false;
    }

    boolean this_present_list_files = true && this.isSetList_files();
    boolean that_present_list_files = true && that.isSetList_files();
    if (this_present_list_files || that_present_list_files) {
      if (!(this_present_list_files && that_present_list_files))
        return false;
      if (this.list_files != that.list_files)
        return false;
    }

    boolean this_present_allow_incremental_clone = true && this.isSetAllow_incremental_clone();
    boolean that_present_allow_incremental_clone = true && that.isSetAllow_incremental_clone();
    if (this_present_allow_incremental_clone || that_present_allow_incremental_clone) {
      if (!(this_present_allow_incremental_clone && that_present_allow_incremental_clone))
        return false;
      if (this.allow_incremental_clone != that.allow_incremental_clone)
        return false;
    }

    boolean this_present_preferred_snapshot_format = true && this.isSetPreferred_snapshot_format();
    boolean that_present_preferred_snapshot_format = true && that.isSetPreferred_snapshot_format();
    if (this_present_preferred_snapshot_format || that_present_preferred_snapshot_format) {
      if (!(this_present_preferred_snapshot_format && that_present_preferred_snapshot_format))
        return false;
      if (this.preferred_snapshot_format != that.preferred_snapshot_format)
        return false;
    }

    boolean this_present_missing_version_ranges = true && this.isSetMissing_version_ranges();
    boolean that_present_missing_version_ranges = true && that.isSetMissing_version_ranges();
    if (this_present_missing_version_ranges || that_present_missing_version_ranges) {
      if (!(this_present_missing_version_ranges && that_present_missing_version_ranges))
        return false;
      if (!this.missing_version_ranges.equals(that.missing_version_ranges))
        return false;
    }

    boolean this_present_is_restore_task = true && this.isSetIs_restore_task();
    boolean that_present_is_restore_task = true && that.isSetIs_restore_task();
    if (this_present_is_restore_task || that_present_is_restore_task) {
      if (!(this_present_is_restore_task && that_present_is_restore_task))
        return false;
      if (this.is_restore_task != that.is_restore_task)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tablet_id);

    hashCode = hashCode * 8191 + schema_hash;

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

    hashCode = hashCode * 8191 + ((isSetVersion_hash()) ? 131071 : 524287);
    if (isSetVersion_hash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version_hash);

    hashCode = hashCode * 8191 + ((isSetTimeout()) ? 131071 : 524287);
    if (isSetTimeout())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeout);

    hashCode = hashCode * 8191 + ((isSetMissing_version()) ? 131071 : 524287);
    if (isSetMissing_version())
      hashCode = hashCode * 8191 + missing_version.hashCode();

    hashCode = hashCode * 8191 + ((isSetList_files()) ? 131071 : 524287);
    if (isSetList_files())
      hashCode = hashCode * 8191 + ((list_files) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAllow_incremental_clone()) ? 131071 : 524287);
    if (isSetAllow_incremental_clone())
      hashCode = hashCode * 8191 + ((allow_incremental_clone) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPreferred_snapshot_format()) ? 131071 : 524287);
    if (isSetPreferred_snapshot_format())
      hashCode = hashCode * 8191 + preferred_snapshot_format;

    hashCode = hashCode * 8191 + ((isSetMissing_version_ranges()) ? 131071 : 524287);
    if (isSetMissing_version_ranges())
      hashCode = hashCode * 8191 + missing_version_ranges.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_restore_task()) ? 131071 : 524287);
    if (isSetIs_restore_task())
      hashCode = hashCode * 8191 + ((is_restore_task) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TSnapshotRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTablet_id(), other.isSetTablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchema_hash(), other.isSetSchema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_hash, other.schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion_hash(), other.isSetVersion_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_hash, other.version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimeout(), other.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMissing_version(), other.isSetMissing_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissing_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missing_version, other.missing_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetList_files(), other.isSetList_files());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetList_files()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_files, other.list_files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAllow_incremental_clone(), other.isSetAllow_incremental_clone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllow_incremental_clone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allow_incremental_clone, other.allow_incremental_clone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPreferred_snapshot_format(), other.isSetPreferred_snapshot_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreferred_snapshot_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preferred_snapshot_format, other.preferred_snapshot_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMissing_version_ranges(), other.isSetMissing_version_ranges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissing_version_ranges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missing_version_ranges, other.missing_version_ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_restore_task(), other.isSetIs_restore_task());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_restore_task()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_restore_task, other.is_restore_task);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSnapshotRequest(");
    boolean first = true;

    sb.append("tablet_id:");
    sb.append(this.tablet_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("schema_hash:");
    sb.append(this.schema_hash);
    first = false;
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetVersion_hash()) {
      if (!first) sb.append(", ");
      sb.append("version_hash:");
      sb.append(this.version_hash);
      first = false;
    }
    if (isSetTimeout()) {
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
    }
    if (isSetMissing_version()) {
      if (!first) sb.append(", ");
      sb.append("missing_version:");
      if (this.missing_version == null) {
        sb.append("null");
      } else {
        sb.append(this.missing_version);
      }
      first = false;
    }
    if (isSetList_files()) {
      if (!first) sb.append(", ");
      sb.append("list_files:");
      sb.append(this.list_files);
      first = false;
    }
    if (isSetAllow_incremental_clone()) {
      if (!first) sb.append(", ");
      sb.append("allow_incremental_clone:");
      sb.append(this.allow_incremental_clone);
      first = false;
    }
    if (isSetPreferred_snapshot_format()) {
      if (!first) sb.append(", ");
      sb.append("preferred_snapshot_format:");
      sb.append(this.preferred_snapshot_format);
      first = false;
    }
    if (isSetMissing_version_ranges()) {
      if (!first) sb.append(", ");
      sb.append("missing_version_ranges:");
      if (this.missing_version_ranges == null) {
        sb.append("null");
      } else {
        sb.append(this.missing_version_ranges);
      }
      first = false;
    }
    if (isSetIs_restore_task()) {
      if (!first) sb.append(", ");
      sb.append("is_restore_task:");
      sb.append(this.is_restore_task);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tablet_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'schema_hash' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSnapshotRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSnapshotRequestStandardScheme getScheme() {
      return new TSnapshotRequestStandardScheme();
    }
  }

  private static class TSnapshotRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSnapshotRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSnapshotRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schema_hash = iprot.readI32();
              struct.setSchema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version_hash = iprot.readI64();
              struct.setVersion_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeout = iprot.readI64();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MISSING_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                struct.missing_version = new java.util.ArrayList<java.lang.Long>(_list146.size);
                long _elem147;
                for (int _i148 = 0; _i148 < _list146.size; ++_i148)
                {
                  _elem147 = iprot.readI64();
                  struct.missing_version.add(_elem147);
                }
                iprot.readListEnd();
              }
              struct.setMissing_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LIST_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.list_files = iprot.readBool();
              struct.setList_filesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ALLOW_INCREMENTAL_CLONE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allow_incremental_clone = iprot.readBool();
              struct.setAllow_incremental_cloneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PREFERRED_SNAPSHOT_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.preferred_snapshot_format = iprot.readI32();
              struct.setPreferred_snapshot_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MISSING_VERSION_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list149 = iprot.readListBegin();
                struct.missing_version_ranges = new java.util.ArrayList<java.lang.Long>(_list149.size);
                long _elem150;
                for (int _i151 = 0; _i151 < _list149.size; ++_i151)
                {
                  _elem150 = iprot.readI64();
                  struct.missing_version_ranges.add(_elem150);
                }
                iprot.readListEnd();
              }
              struct.setMissing_version_rangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_RESTORE_TASK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_restore_task = iprot.readBool();
              struct.setIs_restore_taskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTablet_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tablet_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSchema_hash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'schema_hash' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSnapshotRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
      oprot.writeI64(struct.tablet_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHEMA_HASH_FIELD_DESC);
      oprot.writeI32(struct.schema_hash);
      oprot.writeFieldEnd();
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI64(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersion_hash()) {
        oprot.writeFieldBegin(VERSION_HASH_FIELD_DESC);
        oprot.writeI64(struct.version_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeout()) {
        oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
        oprot.writeI64(struct.timeout);
        oprot.writeFieldEnd();
      }
      if (struct.missing_version != null) {
        if (struct.isSetMissing_version()) {
          oprot.writeFieldBegin(MISSING_VERSION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.missing_version.size()));
            for (long _iter152 : struct.missing_version)
            {
              oprot.writeI64(_iter152);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetList_files()) {
        oprot.writeFieldBegin(LIST_FILES_FIELD_DESC);
        oprot.writeBool(struct.list_files);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAllow_incremental_clone()) {
        oprot.writeFieldBegin(ALLOW_INCREMENTAL_CLONE_FIELD_DESC);
        oprot.writeBool(struct.allow_incremental_clone);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreferred_snapshot_format()) {
        oprot.writeFieldBegin(PREFERRED_SNAPSHOT_FORMAT_FIELD_DESC);
        oprot.writeI32(struct.preferred_snapshot_format);
        oprot.writeFieldEnd();
      }
      if (struct.missing_version_ranges != null) {
        if (struct.isSetMissing_version_ranges()) {
          oprot.writeFieldBegin(MISSING_VERSION_RANGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.missing_version_ranges.size()));
            for (long _iter153 : struct.missing_version_ranges)
            {
              oprot.writeI64(_iter153);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_restore_task()) {
        oprot.writeFieldBegin(IS_RESTORE_TASK_FIELD_DESC);
        oprot.writeBool(struct.is_restore_task);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSnapshotRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSnapshotRequestTupleScheme getScheme() {
      return new TSnapshotRequestTupleScheme();
    }
  }

  private static class TSnapshotRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSnapshotRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSnapshotRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.tablet_id);
      oprot.writeI32(struct.schema_hash);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetVersion_hash()) {
        optionals.set(1);
      }
      if (struct.isSetTimeout()) {
        optionals.set(2);
      }
      if (struct.isSetMissing_version()) {
        optionals.set(3);
      }
      if (struct.isSetList_files()) {
        optionals.set(4);
      }
      if (struct.isSetAllow_incremental_clone()) {
        optionals.set(5);
      }
      if (struct.isSetPreferred_snapshot_format()) {
        optionals.set(6);
      }
      if (struct.isSetMissing_version_ranges()) {
        optionals.set(7);
      }
      if (struct.isSetIs_restore_task()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetVersion()) {
        oprot.writeI64(struct.version);
      }
      if (struct.isSetVersion_hash()) {
        oprot.writeI64(struct.version_hash);
      }
      if (struct.isSetTimeout()) {
        oprot.writeI64(struct.timeout);
      }
      if (struct.isSetMissing_version()) {
        {
          oprot.writeI32(struct.missing_version.size());
          for (long _iter154 : struct.missing_version)
          {
            oprot.writeI64(_iter154);
          }
        }
      }
      if (struct.isSetList_files()) {
        oprot.writeBool(struct.list_files);
      }
      if (struct.isSetAllow_incremental_clone()) {
        oprot.writeBool(struct.allow_incremental_clone);
      }
      if (struct.isSetPreferred_snapshot_format()) {
        oprot.writeI32(struct.preferred_snapshot_format);
      }
      if (struct.isSetMissing_version_ranges()) {
        {
          oprot.writeI32(struct.missing_version_ranges.size());
          for (long _iter155 : struct.missing_version_ranges)
          {
            oprot.writeI64(_iter155);
          }
        }
      }
      if (struct.isSetIs_restore_task()) {
        oprot.writeBool(struct.is_restore_task);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSnapshotRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tablet_id = iprot.readI64();
      struct.setTablet_idIsSet(true);
      struct.schema_hash = iprot.readI32();
      struct.setSchema_hashIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.version = iprot.readI64();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.version_hash = iprot.readI64();
        struct.setVersion_hashIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timeout = iprot.readI64();
        struct.setTimeoutIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list156 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.missing_version = new java.util.ArrayList<java.lang.Long>(_list156.size);
          long _elem157;
          for (int _i158 = 0; _i158 < _list156.size; ++_i158)
          {
            _elem157 = iprot.readI64();
            struct.missing_version.add(_elem157);
          }
        }
        struct.setMissing_versionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.list_files = iprot.readBool();
        struct.setList_filesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.allow_incremental_clone = iprot.readBool();
        struct.setAllow_incremental_cloneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.preferred_snapshot_format = iprot.readI32();
        struct.setPreferred_snapshot_formatIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list159 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.missing_version_ranges = new java.util.ArrayList<java.lang.Long>(_list159.size);
          long _elem160;
          for (int _i161 = 0; _i161 < _list159.size; ++_i161)
          {
            _elem160 = iprot.readI64();
            struct.missing_version_ranges.add(_elem160);
          }
        }
        struct.setMissing_version_rangesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.is_restore_task = iprot.readBool();
        struct.setIs_restore_taskIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

