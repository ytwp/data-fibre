/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TPlanFragmentDestination implements org.apache.thrift.TBase<TPlanFragmentDestination, TPlanFragmentDestination._Fields>, java.io.Serializable, Cloneable, Comparable<TPlanFragmentDestination> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlanFragmentDestination");

  private static final org.apache.thrift.protocol.TField FRAGMENT_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_instance_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DEPRECATED_SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("deprecated_server", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField BRPC_SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("brpc_server", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PIPELINE_DRIVER_SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeline_driver_sequence", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPlanFragmentDestinationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPlanFragmentDestinationTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TUniqueId fragment_instance_id; // required
  public @org.apache.thrift.annotation.Nullable TNetworkAddress deprecated_server; // optional
  public @org.apache.thrift.annotation.Nullable TNetworkAddress brpc_server; // optional
  public int pipeline_driver_sequence; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FRAGMENT_INSTANCE_ID((short)1, "fragment_instance_id"),
    DEPRECATED_SERVER((short)2, "deprecated_server"),
    BRPC_SERVER((short)3, "brpc_server"),
    PIPELINE_DRIVER_SEQUENCE((short)4, "pipeline_driver_sequence");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FRAGMENT_INSTANCE_ID
          return FRAGMENT_INSTANCE_ID;
        case 2: // DEPRECATED_SERVER
          return DEPRECATED_SERVER;
        case 3: // BRPC_SERVER
          return BRPC_SERVER;
        case 4: // PIPELINE_DRIVER_SEQUENCE
          return PIPELINE_DRIVER_SEQUENCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PIPELINE_DRIVER_SEQUENCE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DEPRECATED_SERVER,_Fields.BRPC_SERVER,_Fields.PIPELINE_DRIVER_SEQUENCE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FRAGMENT_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("fragment_instance_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class)));
    tmpMap.put(_Fields.DEPRECATED_SERVER, new org.apache.thrift.meta_data.FieldMetaData("deprecated_server", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNetworkAddress.class)));
    tmpMap.put(_Fields.BRPC_SERVER, new org.apache.thrift.meta_data.FieldMetaData("brpc_server", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNetworkAddress.class)));
    tmpMap.put(_Fields.PIPELINE_DRIVER_SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("pipeline_driver_sequence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlanFragmentDestination.class, metaDataMap);
  }

  public TPlanFragmentDestination() {
  }

  public TPlanFragmentDestination(
    TUniqueId fragment_instance_id)
  {
    this();
    this.fragment_instance_id = fragment_instance_id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlanFragmentDestination(TPlanFragmentDestination other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFragment_instance_id()) {
      this.fragment_instance_id = new TUniqueId(other.fragment_instance_id);
    }
    if (other.isSetDeprecated_server()) {
      this.deprecated_server = new TNetworkAddress(other.deprecated_server);
    }
    if (other.isSetBrpc_server()) {
      this.brpc_server = new TNetworkAddress(other.brpc_server);
    }
    this.pipeline_driver_sequence = other.pipeline_driver_sequence;
  }

  @Override
  public TPlanFragmentDestination deepCopy() {
    return new TPlanFragmentDestination(this);
  }

  @Override
  public void clear() {
    this.fragment_instance_id = null;
    this.deprecated_server = null;
    this.brpc_server = null;
    setPipeline_driver_sequenceIsSet(false);
    this.pipeline_driver_sequence = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public TUniqueId getFragment_instance_id() {
    return this.fragment_instance_id;
  }

  public TPlanFragmentDestination setFragment_instance_id(@org.apache.thrift.annotation.Nullable TUniqueId fragment_instance_id) {
    this.fragment_instance_id = fragment_instance_id;
    return this;
  }

  public void unsetFragment_instance_id() {
    this.fragment_instance_id = null;
  }

  /** Returns true if field fragment_instance_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment_instance_id() {
    return this.fragment_instance_id != null;
  }

  public void setFragment_instance_idIsSet(boolean value) {
    if (!value) {
      this.fragment_instance_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNetworkAddress getDeprecated_server() {
    return this.deprecated_server;
  }

  public TPlanFragmentDestination setDeprecated_server(@org.apache.thrift.annotation.Nullable TNetworkAddress deprecated_server) {
    this.deprecated_server = deprecated_server;
    return this;
  }

  public void unsetDeprecated_server() {
    this.deprecated_server = null;
  }

  /** Returns true if field deprecated_server is set (has been assigned a value) and false otherwise */
  public boolean isSetDeprecated_server() {
    return this.deprecated_server != null;
  }

  public void setDeprecated_serverIsSet(boolean value) {
    if (!value) {
      this.deprecated_server = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNetworkAddress getBrpc_server() {
    return this.brpc_server;
  }

  public TPlanFragmentDestination setBrpc_server(@org.apache.thrift.annotation.Nullable TNetworkAddress brpc_server) {
    this.brpc_server = brpc_server;
    return this;
  }

  public void unsetBrpc_server() {
    this.brpc_server = null;
  }

  /** Returns true if field brpc_server is set (has been assigned a value) and false otherwise */
  public boolean isSetBrpc_server() {
    return this.brpc_server != null;
  }

  public void setBrpc_serverIsSet(boolean value) {
    if (!value) {
      this.brpc_server = null;
    }
  }

  public int getPipeline_driver_sequence() {
    return this.pipeline_driver_sequence;
  }

  public TPlanFragmentDestination setPipeline_driver_sequence(int pipeline_driver_sequence) {
    this.pipeline_driver_sequence = pipeline_driver_sequence;
    setPipeline_driver_sequenceIsSet(true);
    return this;
  }

  public void unsetPipeline_driver_sequence() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PIPELINE_DRIVER_SEQUENCE_ISSET_ID);
  }

  /** Returns true if field pipeline_driver_sequence is set (has been assigned a value) and false otherwise */
  public boolean isSetPipeline_driver_sequence() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PIPELINE_DRIVER_SEQUENCE_ISSET_ID);
  }

  public void setPipeline_driver_sequenceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PIPELINE_DRIVER_SEQUENCE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case FRAGMENT_INSTANCE_ID:
      if (value == null) {
        unsetFragment_instance_id();
      } else {
        setFragment_instance_id((TUniqueId)value);
      }
      break;

    case DEPRECATED_SERVER:
      if (value == null) {
        unsetDeprecated_server();
      } else {
        setDeprecated_server((TNetworkAddress)value);
      }
      break;

    case BRPC_SERVER:
      if (value == null) {
        unsetBrpc_server();
      } else {
        setBrpc_server((TNetworkAddress)value);
      }
      break;

    case PIPELINE_DRIVER_SEQUENCE:
      if (value == null) {
        unsetPipeline_driver_sequence();
      } else {
        setPipeline_driver_sequence((Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FRAGMENT_INSTANCE_ID:
      return getFragment_instance_id();

    case DEPRECATED_SERVER:
      return getDeprecated_server();

    case BRPC_SERVER:
      return getBrpc_server();

    case PIPELINE_DRIVER_SEQUENCE:
      return getPipeline_driver_sequence();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FRAGMENT_INSTANCE_ID:
      return isSetFragment_instance_id();
    case DEPRECATED_SERVER:
      return isSetDeprecated_server();
    case BRPC_SERVER:
      return isSetBrpc_server();
    case PIPELINE_DRIVER_SEQUENCE:
      return isSetPipeline_driver_sequence();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof TPlanFragmentDestination)
      return this.equals((TPlanFragmentDestination)that);
    return false;
  }

  public boolean equals(TPlanFragmentDestination that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fragment_instance_id = true && this.isSetFragment_instance_id();
    boolean that_present_fragment_instance_id = true && that.isSetFragment_instance_id();
    if (this_present_fragment_instance_id || that_present_fragment_instance_id) {
      if (!(this_present_fragment_instance_id && that_present_fragment_instance_id))
        return false;
      if (!this.fragment_instance_id.equals(that.fragment_instance_id))
        return false;
    }

    boolean this_present_deprecated_server = true && this.isSetDeprecated_server();
    boolean that_present_deprecated_server = true && that.isSetDeprecated_server();
    if (this_present_deprecated_server || that_present_deprecated_server) {
      if (!(this_present_deprecated_server && that_present_deprecated_server))
        return false;
      if (!this.deprecated_server.equals(that.deprecated_server))
        return false;
    }

    boolean this_present_brpc_server = true && this.isSetBrpc_server();
    boolean that_present_brpc_server = true && that.isSetBrpc_server();
    if (this_present_brpc_server || that_present_brpc_server) {
      if (!(this_present_brpc_server && that_present_brpc_server))
        return false;
      if (!this.brpc_server.equals(that.brpc_server))
        return false;
    }

    boolean this_present_pipeline_driver_sequence = true && this.isSetPipeline_driver_sequence();
    boolean that_present_pipeline_driver_sequence = true && that.isSetPipeline_driver_sequence();
    if (this_present_pipeline_driver_sequence || that_present_pipeline_driver_sequence) {
      if (!(this_present_pipeline_driver_sequence && that_present_pipeline_driver_sequence))
        return false;
      if (this.pipeline_driver_sequence != that.pipeline_driver_sequence)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFragment_instance_id()) ? 131071 : 524287);
    if (isSetFragment_instance_id())
      hashCode = hashCode * 8191 + fragment_instance_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeprecated_server()) ? 131071 : 524287);
    if (isSetDeprecated_server())
      hashCode = hashCode * 8191 + deprecated_server.hashCode();

    hashCode = hashCode * 8191 + ((isSetBrpc_server()) ? 131071 : 524287);
    if (isSetBrpc_server())
      hashCode = hashCode * 8191 + brpc_server.hashCode();

    hashCode = hashCode * 8191 + ((isSetPipeline_driver_sequence()) ? 131071 : 524287);
    if (isSetPipeline_driver_sequence())
      hashCode = hashCode * 8191 + pipeline_driver_sequence;

    return hashCode;
  }

  @Override
  public int compareTo(TPlanFragmentDestination other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetFragment_instance_id(), other.isSetFragment_instance_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment_instance_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_instance_id, other.fragment_instance_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDeprecated_server(), other.isSetDeprecated_server());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeprecated_server()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deprecated_server, other.deprecated_server);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetBrpc_server(), other.isSetBrpc_server());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrpc_server()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brpc_server, other.brpc_server);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetPipeline_driver_sequence(), other.isSetPipeline_driver_sequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipeline_driver_sequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeline_driver_sequence, other.pipeline_driver_sequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPlanFragmentDestination(");
    boolean first = true;

    sb.append("fragment_instance_id:");
    if (this.fragment_instance_id == null) {
      sb.append("null");
    } else {
      sb.append(this.fragment_instance_id);
    }
    first = false;
    if (isSetDeprecated_server()) {
      if (!first) sb.append(", ");
      sb.append("deprecated_server:");
      if (this.deprecated_server == null) {
        sb.append("null");
      } else {
        sb.append(this.deprecated_server);
      }
      first = false;
    }
    if (isSetBrpc_server()) {
      if (!first) sb.append(", ");
      sb.append("brpc_server:");
      if (this.brpc_server == null) {
        sb.append("null");
      } else {
        sb.append(this.brpc_server);
      }
      first = false;
    }
    if (isSetPipeline_driver_sequence()) {
      if (!first) sb.append(", ");
      sb.append("pipeline_driver_sequence:");
      sb.append(this.pipeline_driver_sequence);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (fragment_instance_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fragment_instance_id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (fragment_instance_id != null) {
      fragment_instance_id.validate();
    }
    if (deprecated_server != null) {
      deprecated_server.validate();
    }
    if (brpc_server != null) {
      brpc_server.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlanFragmentDestinationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPlanFragmentDestinationStandardScheme getScheme() {
      return new TPlanFragmentDestinationStandardScheme();
    }
  }

  private static class TPlanFragmentDestinationStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPlanFragmentDestination> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlanFragmentDestination struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FRAGMENT_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment_instance_id = new TUniqueId();
              struct.fragment_instance_id.read(iprot);
              struct.setFragment_instance_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEPRECATED_SERVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deprecated_server = new TNetworkAddress();
              struct.deprecated_server.read(iprot);
              struct.setDeprecated_serverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BRPC_SERVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.brpc_server = new TNetworkAddress();
              struct.brpc_server.read(iprot);
              struct.setBrpc_serverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PIPELINE_DRIVER_SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pipeline_driver_sequence = iprot.readI32();
              struct.setPipeline_driver_sequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlanFragmentDestination struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fragment_instance_id != null) {
        oprot.writeFieldBegin(FRAGMENT_INSTANCE_ID_FIELD_DESC);
        struct.fragment_instance_id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.deprecated_server != null) {
        if (struct.isSetDeprecated_server()) {
          oprot.writeFieldBegin(DEPRECATED_SERVER_FIELD_DESC);
          struct.deprecated_server.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.brpc_server != null) {
        if (struct.isSetBrpc_server()) {
          oprot.writeFieldBegin(BRPC_SERVER_FIELD_DESC);
          struct.brpc_server.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPipeline_driver_sequence()) {
        oprot.writeFieldBegin(PIPELINE_DRIVER_SEQUENCE_FIELD_DESC);
        oprot.writeI32(struct.pipeline_driver_sequence);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlanFragmentDestinationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPlanFragmentDestinationTupleScheme getScheme() {
      return new TPlanFragmentDestinationTupleScheme();
    }
  }

  private static class TPlanFragmentDestinationTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPlanFragmentDestination> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentDestination struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.fragment_instance_id.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDeprecated_server()) {
        optionals.set(0);
      }
      if (struct.isSetBrpc_server()) {
        optionals.set(1);
      }
      if (struct.isSetPipeline_driver_sequence()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDeprecated_server()) {
        struct.deprecated_server.write(oprot);
      }
      if (struct.isSetBrpc_server()) {
        struct.brpc_server.write(oprot);
      }
      if (struct.isSetPipeline_driver_sequence()) {
        oprot.writeI32(struct.pipeline_driver_sequence);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentDestination struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.fragment_instance_id = new TUniqueId();
      struct.fragment_instance_id.read(iprot);
      struct.setFragment_instance_idIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.deprecated_server = new TNetworkAddress();
        struct.deprecated_server.read(iprot);
        struct.setDeprecated_serverIsSet(true);
      }
      if (incoming.get(1)) {
        struct.brpc_server = new TNetworkAddress();
        struct.brpc_server.read(iprot);
        struct.setBrpc_serverIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pipeline_driver_sequence = iprot.readI32();
        struct.setPipeline_driver_sequenceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

