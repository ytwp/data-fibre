/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TColumnDesc implements org.apache.thrift.TBase<TColumnDesc, TColumnDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TColumnDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumnDesc");

  private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("columnName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("columnType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("columnLength", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMN_PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("columnPrecision", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COLUMN_SCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("columnScale", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ALLOW_NULL_FIELD_DESC = new org.apache.thrift.protocol.TField("allowNull", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField COLUMN_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("columnKey", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregationType", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbName", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField COLUMN_DEFAULT_FIELD_DESC = new org.apache.thrift.protocol.TField("columnDefault", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField COLUMN_TYPE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("columnTypeStr", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataType", org.apache.thrift.protocol.TType.STRING, (short)27);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TColumnDescStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TColumnDescTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String columnName; // required
  /**
   * 
   * @see io.datafibre.fibre.thrift.TPrimitiveType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPrimitiveType columnType; // required
  public int columnLength; // optional
  public int columnPrecision; // optional
  public int columnScale; // optional
  public boolean allowNull; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String columnKey; // optional
  public boolean key; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String aggregationType; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String dbName; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String tableName; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String columnDefault; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String columnTypeStr; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String dataType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_NAME((short)1, "columnName"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TPrimitiveType
     */
    COLUMN_TYPE((short)2, "columnType"),
    COLUMN_LENGTH((short)3, "columnLength"),
    COLUMN_PRECISION((short)4, "columnPrecision"),
    COLUMN_SCALE((short)5, "columnScale"),
    ALLOW_NULL((short)6, "allowNull"),
    COLUMN_KEY((short)20, "columnKey"),
    KEY((short)21, "key"),
    AGGREGATION_TYPE((short)22, "aggregationType"),
    DB_NAME((short)23, "dbName"),
    TABLE_NAME((short)24, "tableName"),
    COLUMN_DEFAULT((short)25, "columnDefault"),
    COLUMN_TYPE_STR((short)26, "columnTypeStr"),
    DATA_TYPE((short)27, "dataType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_NAME
          return COLUMN_NAME;
        case 2: // COLUMN_TYPE
          return COLUMN_TYPE;
        case 3: // COLUMN_LENGTH
          return COLUMN_LENGTH;
        case 4: // COLUMN_PRECISION
          return COLUMN_PRECISION;
        case 5: // COLUMN_SCALE
          return COLUMN_SCALE;
        case 6: // ALLOW_NULL
          return ALLOW_NULL;
        case 20: // COLUMN_KEY
          return COLUMN_KEY;
        case 21: // KEY
          return KEY;
        case 22: // AGGREGATION_TYPE
          return AGGREGATION_TYPE;
        case 23: // DB_NAME
          return DB_NAME;
        case 24: // TABLE_NAME
          return TABLE_NAME;
        case 25: // COLUMN_DEFAULT
          return COLUMN_DEFAULT;
        case 26: // COLUMN_TYPE_STR
          return COLUMN_TYPE_STR;
        case 27: // DATA_TYPE
          return DATA_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COLUMNLENGTH_ISSET_ID = 0;
  private static final int __COLUMNPRECISION_ISSET_ID = 1;
  private static final int __COLUMNSCALE_ISSET_ID = 2;
  private static final int __ALLOWNULL_ISSET_ID = 3;
  private static final int __KEY_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COLUMN_LENGTH,_Fields.COLUMN_PRECISION,_Fields.COLUMN_SCALE,_Fields.ALLOW_NULL,_Fields.COLUMN_KEY,_Fields.KEY,_Fields.AGGREGATION_TYPE,_Fields.DB_NAME,_Fields.TABLE_NAME,_Fields.COLUMN_DEFAULT,_Fields.COLUMN_TYPE_STR,_Fields.DATA_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("columnName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("columnType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TPrimitiveType.class)));
    tmpMap.put(_Fields.COLUMN_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("columnLength", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_PRECISION, new org.apache.thrift.meta_data.FieldMetaData("columnPrecision", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_SCALE, new org.apache.thrift.meta_data.FieldMetaData("columnScale", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALLOW_NULL, new org.apache.thrift.meta_data.FieldMetaData("allowNull", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COLUMN_KEY, new org.apache.thrift.meta_data.FieldMetaData("columnKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AGGREGATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aggregationType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("dbName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_DEFAULT, new org.apache.thrift.meta_data.FieldMetaData("columnDefault", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_TYPE_STR, new org.apache.thrift.meta_data.FieldMetaData("columnTypeStr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumnDesc.class, metaDataMap);
  }

  public TColumnDesc() {
  }

  public TColumnDesc(
    java.lang.String columnName,
    io.datafibre.fibre.thrift.TPrimitiveType columnType)
  {
    this();
    this.columnName = columnName;
    this.columnType = columnType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TColumnDesc(TColumnDesc other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetColumnName()) {
      this.columnName = other.columnName;
    }
    if (other.isSetColumnType()) {
      this.columnType = other.columnType;
    }
    this.columnLength = other.columnLength;
    this.columnPrecision = other.columnPrecision;
    this.columnScale = other.columnScale;
    this.allowNull = other.allowNull;
    if (other.isSetColumnKey()) {
      this.columnKey = other.columnKey;
    }
    this.key = other.key;
    if (other.isSetAggregationType()) {
      this.aggregationType = other.aggregationType;
    }
    if (other.isSetDbName()) {
      this.dbName = other.dbName;
    }
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    if (other.isSetColumnDefault()) {
      this.columnDefault = other.columnDefault;
    }
    if (other.isSetColumnTypeStr()) {
      this.columnTypeStr = other.columnTypeStr;
    }
    if (other.isSetDataType()) {
      this.dataType = other.dataType;
    }
  }

  @Override
  public TColumnDesc deepCopy() {
    return new TColumnDesc(this);
  }

  @Override
  public void clear() {
    this.columnName = null;
    this.columnType = null;
    setColumnLengthIsSet(false);
    this.columnLength = 0;
    setColumnPrecisionIsSet(false);
    this.columnPrecision = 0;
    setColumnScaleIsSet(false);
    this.columnScale = 0;
    setAllowNullIsSet(false);
    this.allowNull = false;
    this.columnKey = null;
    setKeyIsSet(false);
    this.key = false;
    this.aggregationType = null;
    this.dbName = null;
    this.tableName = null;
    this.columnDefault = null;
    this.columnTypeStr = null;
    this.dataType = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumnName() {
    return this.columnName;
  }

  public TColumnDesc setColumnName(@org.apache.thrift.annotation.Nullable java.lang.String columnName) {
    this.columnName = columnName;
    return this;
  }

  public void unsetColumnName() {
    this.columnName = null;
  }

  /** Returns true if field columnName is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnName() {
    return this.columnName != null;
  }

  public void setColumnNameIsSet(boolean value) {
    if (!value) {
      this.columnName = null;
    }
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TPrimitiveType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TPrimitiveType getColumnType() {
    return this.columnType;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TPrimitiveType
   */
  public TColumnDesc setColumnType(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPrimitiveType columnType) {
    this.columnType = columnType;
    return this;
  }

  public void unsetColumnType() {
    this.columnType = null;
  }

  /** Returns true if field columnType is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnType() {
    return this.columnType != null;
  }

  public void setColumnTypeIsSet(boolean value) {
    if (!value) {
      this.columnType = null;
    }
  }

  public int getColumnLength() {
    return this.columnLength;
  }

  public TColumnDesc setColumnLength(int columnLength) {
    this.columnLength = columnLength;
    setColumnLengthIsSet(true);
    return this;
  }

  public void unsetColumnLength() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLUMNLENGTH_ISSET_ID);
  }

  /** Returns true if field columnLength is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnLength() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLUMNLENGTH_ISSET_ID);
  }

  public void setColumnLengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLUMNLENGTH_ISSET_ID, value);
  }

  public int getColumnPrecision() {
    return this.columnPrecision;
  }

  public TColumnDesc setColumnPrecision(int columnPrecision) {
    this.columnPrecision = columnPrecision;
    setColumnPrecisionIsSet(true);
    return this;
  }

  public void unsetColumnPrecision() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLUMNPRECISION_ISSET_ID);
  }

  /** Returns true if field columnPrecision is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnPrecision() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLUMNPRECISION_ISSET_ID);
  }

  public void setColumnPrecisionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLUMNPRECISION_ISSET_ID, value);
  }

  public int getColumnScale() {
    return this.columnScale;
  }

  public TColumnDesc setColumnScale(int columnScale) {
    this.columnScale = columnScale;
    setColumnScaleIsSet(true);
    return this;
  }

  public void unsetColumnScale() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLUMNSCALE_ISSET_ID);
  }

  /** Returns true if field columnScale is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnScale() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLUMNSCALE_ISSET_ID);
  }

  public void setColumnScaleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLUMNSCALE_ISSET_ID, value);
  }

  public boolean isAllowNull() {
    return this.allowNull;
  }

  public TColumnDesc setAllowNull(boolean allowNull) {
    this.allowNull = allowNull;
    setAllowNullIsSet(true);
    return this;
  }

  public void unsetAllowNull() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALLOWNULL_ISSET_ID);
  }

  /** Returns true if field allowNull is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowNull() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALLOWNULL_ISSET_ID);
  }

  public void setAllowNullIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALLOWNULL_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumnKey() {
    return this.columnKey;
  }

  public TColumnDesc setColumnKey(@org.apache.thrift.annotation.Nullable java.lang.String columnKey) {
    this.columnKey = columnKey;
    return this;
  }

  public void unsetColumnKey() {
    this.columnKey = null;
  }

  /** Returns true if field columnKey is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnKey() {
    return this.columnKey != null;
  }

  public void setColumnKeyIsSet(boolean value) {
    if (!value) {
      this.columnKey = null;
    }
  }

  public boolean isKey() {
    return this.key;
  }

  public TColumnDesc setKey(boolean key) {
    this.key = key;
    setKeyIsSet(true);
    return this;
  }

  public void unsetKey() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEY_ISSET_ID);
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEY_ISSET_ID);
  }

  public void setKeyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEY_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAggregationType() {
    return this.aggregationType;
  }

  public TColumnDesc setAggregationType(@org.apache.thrift.annotation.Nullable java.lang.String aggregationType) {
    this.aggregationType = aggregationType;
    return this;
  }

  public void unsetAggregationType() {
    this.aggregationType = null;
  }

  /** Returns true if field aggregationType is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregationType() {
    return this.aggregationType != null;
  }

  public void setAggregationTypeIsSet(boolean value) {
    if (!value) {
      this.aggregationType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDbName() {
    return this.dbName;
  }

  public TColumnDesc setDbName(@org.apache.thrift.annotation.Nullable java.lang.String dbName) {
    this.dbName = dbName;
    return this;
  }

  public void unsetDbName() {
    this.dbName = null;
  }

  /** Returns true if field dbName is set (has been assigned a value) and false otherwise */
  public boolean isSetDbName() {
    return this.dbName != null;
  }

  public void setDbNameIsSet(boolean value) {
    if (!value) {
      this.dbName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTableName() {
    return this.tableName;
  }

  public TColumnDesc setTableName(@org.apache.thrift.annotation.Nullable java.lang.String tableName) {
    this.tableName = tableName;
    return this;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumnDefault() {
    return this.columnDefault;
  }

  public TColumnDesc setColumnDefault(@org.apache.thrift.annotation.Nullable java.lang.String columnDefault) {
    this.columnDefault = columnDefault;
    return this;
  }

  public void unsetColumnDefault() {
    this.columnDefault = null;
  }

  /** Returns true if field columnDefault is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnDefault() {
    return this.columnDefault != null;
  }

  public void setColumnDefaultIsSet(boolean value) {
    if (!value) {
      this.columnDefault = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumnTypeStr() {
    return this.columnTypeStr;
  }

  public TColumnDesc setColumnTypeStr(@org.apache.thrift.annotation.Nullable java.lang.String columnTypeStr) {
    this.columnTypeStr = columnTypeStr;
    return this;
  }

  public void unsetColumnTypeStr() {
    this.columnTypeStr = null;
  }

  /** Returns true if field columnTypeStr is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnTypeStr() {
    return this.columnTypeStr != null;
  }

  public void setColumnTypeStrIsSet(boolean value) {
    if (!value) {
      this.columnTypeStr = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDataType() {
    return this.dataType;
  }

  public TColumnDesc setDataType(@org.apache.thrift.annotation.Nullable java.lang.String dataType) {
    this.dataType = dataType;
    return this;
  }

  public void unsetDataType() {
    this.dataType = null;
  }

  /** Returns true if field dataType is set (has been assigned a value) and false otherwise */
  public boolean isSetDataType() {
    return this.dataType != null;
  }

  public void setDataTypeIsSet(boolean value) {
    if (!value) {
      this.dataType = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COLUMN_NAME:
      if (value == null) {
        unsetColumnName();
      } else {
        setColumnName((java.lang.String)value);
      }
      break;

    case COLUMN_TYPE:
      if (value == null) {
        unsetColumnType();
      } else {
        setColumnType((io.datafibre.fibre.thrift.TPrimitiveType)value);
      }
      break;

    case COLUMN_LENGTH:
      if (value == null) {
        unsetColumnLength();
      } else {
        setColumnLength((java.lang.Integer)value);
      }
      break;

    case COLUMN_PRECISION:
      if (value == null) {
        unsetColumnPrecision();
      } else {
        setColumnPrecision((java.lang.Integer)value);
      }
      break;

    case COLUMN_SCALE:
      if (value == null) {
        unsetColumnScale();
      } else {
        setColumnScale((java.lang.Integer)value);
      }
      break;

    case ALLOW_NULL:
      if (value == null) {
        unsetAllowNull();
      } else {
        setAllowNull((java.lang.Boolean)value);
      }
      break;

    case COLUMN_KEY:
      if (value == null) {
        unsetColumnKey();
      } else {
        setColumnKey((java.lang.String)value);
      }
      break;

    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((java.lang.Boolean)value);
      }
      break;

    case AGGREGATION_TYPE:
      if (value == null) {
        unsetAggregationType();
      } else {
        setAggregationType((java.lang.String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDbName();
      } else {
        setDbName((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((java.lang.String)value);
      }
      break;

    case COLUMN_DEFAULT:
      if (value == null) {
        unsetColumnDefault();
      } else {
        setColumnDefault((java.lang.String)value);
      }
      break;

    case COLUMN_TYPE_STR:
      if (value == null) {
        unsetColumnTypeStr();
      } else {
        setColumnTypeStr((java.lang.String)value);
      }
      break;

    case DATA_TYPE:
      if (value == null) {
        unsetDataType();
      } else {
        setDataType((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_NAME:
      return getColumnName();

    case COLUMN_TYPE:
      return getColumnType();

    case COLUMN_LENGTH:
      return getColumnLength();

    case COLUMN_PRECISION:
      return getColumnPrecision();

    case COLUMN_SCALE:
      return getColumnScale();

    case ALLOW_NULL:
      return isAllowNull();

    case COLUMN_KEY:
      return getColumnKey();

    case KEY:
      return isKey();

    case AGGREGATION_TYPE:
      return getAggregationType();

    case DB_NAME:
      return getDbName();

    case TABLE_NAME:
      return getTableName();

    case COLUMN_DEFAULT:
      return getColumnDefault();

    case COLUMN_TYPE_STR:
      return getColumnTypeStr();

    case DATA_TYPE:
      return getDataType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_NAME:
      return isSetColumnName();
    case COLUMN_TYPE:
      return isSetColumnType();
    case COLUMN_LENGTH:
      return isSetColumnLength();
    case COLUMN_PRECISION:
      return isSetColumnPrecision();
    case COLUMN_SCALE:
      return isSetColumnScale();
    case ALLOW_NULL:
      return isSetAllowNull();
    case COLUMN_KEY:
      return isSetColumnKey();
    case KEY:
      return isSetKey();
    case AGGREGATION_TYPE:
      return isSetAggregationType();
    case DB_NAME:
      return isSetDbName();
    case TABLE_NAME:
      return isSetTableName();
    case COLUMN_DEFAULT:
      return isSetColumnDefault();
    case COLUMN_TYPE_STR:
      return isSetColumnTypeStr();
    case DATA_TYPE:
      return isSetDataType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TColumnDesc)
      return this.equals((TColumnDesc)that);
    return false;
  }

  public boolean equals(TColumnDesc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_columnName = true && this.isSetColumnName();
    boolean that_present_columnName = true && that.isSetColumnName();
    if (this_present_columnName || that_present_columnName) {
      if (!(this_present_columnName && that_present_columnName))
        return false;
      if (!this.columnName.equals(that.columnName))
        return false;
    }

    boolean this_present_columnType = true && this.isSetColumnType();
    boolean that_present_columnType = true && that.isSetColumnType();
    if (this_present_columnType || that_present_columnType) {
      if (!(this_present_columnType && that_present_columnType))
        return false;
      if (!this.columnType.equals(that.columnType))
        return false;
    }

    boolean this_present_columnLength = true && this.isSetColumnLength();
    boolean that_present_columnLength = true && that.isSetColumnLength();
    if (this_present_columnLength || that_present_columnLength) {
      if (!(this_present_columnLength && that_present_columnLength))
        return false;
      if (this.columnLength != that.columnLength)
        return false;
    }

    boolean this_present_columnPrecision = true && this.isSetColumnPrecision();
    boolean that_present_columnPrecision = true && that.isSetColumnPrecision();
    if (this_present_columnPrecision || that_present_columnPrecision) {
      if (!(this_present_columnPrecision && that_present_columnPrecision))
        return false;
      if (this.columnPrecision != that.columnPrecision)
        return false;
    }

    boolean this_present_columnScale = true && this.isSetColumnScale();
    boolean that_present_columnScale = true && that.isSetColumnScale();
    if (this_present_columnScale || that_present_columnScale) {
      if (!(this_present_columnScale && that_present_columnScale))
        return false;
      if (this.columnScale != that.columnScale)
        return false;
    }

    boolean this_present_allowNull = true && this.isSetAllowNull();
    boolean that_present_allowNull = true && that.isSetAllowNull();
    if (this_present_allowNull || that_present_allowNull) {
      if (!(this_present_allowNull && that_present_allowNull))
        return false;
      if (this.allowNull != that.allowNull)
        return false;
    }

    boolean this_present_columnKey = true && this.isSetColumnKey();
    boolean that_present_columnKey = true && that.isSetColumnKey();
    if (this_present_columnKey || that_present_columnKey) {
      if (!(this_present_columnKey && that_present_columnKey))
        return false;
      if (!this.columnKey.equals(that.columnKey))
        return false;
    }

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (this.key != that.key)
        return false;
    }

    boolean this_present_aggregationType = true && this.isSetAggregationType();
    boolean that_present_aggregationType = true && that.isSetAggregationType();
    if (this_present_aggregationType || that_present_aggregationType) {
      if (!(this_present_aggregationType && that_present_aggregationType))
        return false;
      if (!this.aggregationType.equals(that.aggregationType))
        return false;
    }

    boolean this_present_dbName = true && this.isSetDbName();
    boolean that_present_dbName = true && that.isSetDbName();
    if (this_present_dbName || that_present_dbName) {
      if (!(this_present_dbName && that_present_dbName))
        return false;
      if (!this.dbName.equals(that.dbName))
        return false;
    }

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_columnDefault = true && this.isSetColumnDefault();
    boolean that_present_columnDefault = true && that.isSetColumnDefault();
    if (this_present_columnDefault || that_present_columnDefault) {
      if (!(this_present_columnDefault && that_present_columnDefault))
        return false;
      if (!this.columnDefault.equals(that.columnDefault))
        return false;
    }

    boolean this_present_columnTypeStr = true && this.isSetColumnTypeStr();
    boolean that_present_columnTypeStr = true && that.isSetColumnTypeStr();
    if (this_present_columnTypeStr || that_present_columnTypeStr) {
      if (!(this_present_columnTypeStr && that_present_columnTypeStr))
        return false;
      if (!this.columnTypeStr.equals(that.columnTypeStr))
        return false;
    }

    boolean this_present_dataType = true && this.isSetDataType();
    boolean that_present_dataType = true && that.isSetDataType();
    if (this_present_dataType || that_present_dataType) {
      if (!(this_present_dataType && that_present_dataType))
        return false;
      if (!this.dataType.equals(that.dataType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetColumnName()) ? 131071 : 524287);
    if (isSetColumnName())
      hashCode = hashCode * 8191 + columnName.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnType()) ? 131071 : 524287);
    if (isSetColumnType())
      hashCode = hashCode * 8191 + columnType.getValue();

    hashCode = hashCode * 8191 + ((isSetColumnLength()) ? 131071 : 524287);
    if (isSetColumnLength())
      hashCode = hashCode * 8191 + columnLength;

    hashCode = hashCode * 8191 + ((isSetColumnPrecision()) ? 131071 : 524287);
    if (isSetColumnPrecision())
      hashCode = hashCode * 8191 + columnPrecision;

    hashCode = hashCode * 8191 + ((isSetColumnScale()) ? 131071 : 524287);
    if (isSetColumnScale())
      hashCode = hashCode * 8191 + columnScale;

    hashCode = hashCode * 8191 + ((isSetAllowNull()) ? 131071 : 524287);
    if (isSetAllowNull())
      hashCode = hashCode * 8191 + ((allowNull) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetColumnKey()) ? 131071 : 524287);
    if (isSetColumnKey())
      hashCode = hashCode * 8191 + columnKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
    if (isSetKey())
      hashCode = hashCode * 8191 + ((key) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAggregationType()) ? 131071 : 524287);
    if (isSetAggregationType())
      hashCode = hashCode * 8191 + aggregationType.hashCode();

    hashCode = hashCode * 8191 + ((isSetDbName()) ? 131071 : 524287);
    if (isSetDbName())
      hashCode = hashCode * 8191 + dbName.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableName()) ? 131071 : 524287);
    if (isSetTableName())
      hashCode = hashCode * 8191 + tableName.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnDefault()) ? 131071 : 524287);
    if (isSetColumnDefault())
      hashCode = hashCode * 8191 + columnDefault.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnTypeStr()) ? 131071 : 524287);
    if (isSetColumnTypeStr())
      hashCode = hashCode * 8191 + columnTypeStr.hashCode();

    hashCode = hashCode * 8191 + ((isSetDataType()) ? 131071 : 524287);
    if (isSetDataType())
      hashCode = hashCode * 8191 + dataType.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TColumnDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetColumnName(), other.isSetColumnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnName, other.columnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnType(), other.isSetColumnType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnType, other.columnType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnLength(), other.isSetColumnLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnLength, other.columnLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnPrecision(), other.isSetColumnPrecision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnPrecision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnPrecision, other.columnPrecision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnScale(), other.isSetColumnScale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnScale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnScale, other.columnScale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAllowNull(), other.isSetAllowNull());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowNull()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowNull, other.allowNull);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnKey(), other.isSetColumnKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnKey, other.columnKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKey(), other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAggregationType(), other.isSetAggregationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregationType, other.aggregationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDbName(), other.isSetDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbName, other.dbName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableName(), other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnDefault(), other.isSetColumnDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnDefault()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnDefault, other.columnDefault);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnTypeStr(), other.isSetColumnTypeStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnTypeStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnTypeStr, other.columnTypeStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDataType(), other.isSetDataType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataType, other.dataType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TColumnDesc(");
    boolean first = true;

    sb.append("columnName:");
    if (this.columnName == null) {
      sb.append("null");
    } else {
      sb.append(this.columnName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnType:");
    if (this.columnType == null) {
      sb.append("null");
    } else {
      sb.append(this.columnType);
    }
    first = false;
    if (isSetColumnLength()) {
      if (!first) sb.append(", ");
      sb.append("columnLength:");
      sb.append(this.columnLength);
      first = false;
    }
    if (isSetColumnPrecision()) {
      if (!first) sb.append(", ");
      sb.append("columnPrecision:");
      sb.append(this.columnPrecision);
      first = false;
    }
    if (isSetColumnScale()) {
      if (!first) sb.append(", ");
      sb.append("columnScale:");
      sb.append(this.columnScale);
      first = false;
    }
    if (isSetAllowNull()) {
      if (!first) sb.append(", ");
      sb.append("allowNull:");
      sb.append(this.allowNull);
      first = false;
    }
    if (isSetColumnKey()) {
      if (!first) sb.append(", ");
      sb.append("columnKey:");
      if (this.columnKey == null) {
        sb.append("null");
      } else {
        sb.append(this.columnKey);
      }
      first = false;
    }
    if (isSetKey()) {
      if (!first) sb.append(", ");
      sb.append("key:");
      sb.append(this.key);
      first = false;
    }
    if (isSetAggregationType()) {
      if (!first) sb.append(", ");
      sb.append("aggregationType:");
      if (this.aggregationType == null) {
        sb.append("null");
      } else {
        sb.append(this.aggregationType);
      }
      first = false;
    }
    if (isSetDbName()) {
      if (!first) sb.append(", ");
      sb.append("dbName:");
      if (this.dbName == null) {
        sb.append("null");
      } else {
        sb.append(this.dbName);
      }
      first = false;
    }
    if (isSetTableName()) {
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
    }
    if (isSetColumnDefault()) {
      if (!first) sb.append(", ");
      sb.append("columnDefault:");
      if (this.columnDefault == null) {
        sb.append("null");
      } else {
        sb.append(this.columnDefault);
      }
      first = false;
    }
    if (isSetColumnTypeStr()) {
      if (!first) sb.append(", ");
      sb.append("columnTypeStr:");
      if (this.columnTypeStr == null) {
        sb.append("null");
      } else {
        sb.append(this.columnTypeStr);
      }
      first = false;
    }
    if (isSetDataType()) {
      if (!first) sb.append(", ");
      sb.append("dataType:");
      if (this.dataType == null) {
        sb.append("null");
      } else {
        sb.append(this.dataType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (columnName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnName' was not present! Struct: " + toString());
    }
    if (columnType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TColumnDescStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TColumnDescStandardScheme getScheme() {
      return new TColumnDescStandardScheme();
    }
  }

  private static class TColumnDescStandardScheme extends org.apache.thrift.scheme.StandardScheme<TColumnDesc> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TColumnDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnName = iprot.readString();
              struct.setColumnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnType = io.datafibre.fibre.thrift.TPrimitiveType.findByValue(iprot.readI32());
              struct.setColumnTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnLength = iprot.readI32();
              struct.setColumnLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMN_PRECISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnPrecision = iprot.readI32();
              struct.setColumnPrecisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLUMN_SCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnScale = iprot.readI32();
              struct.setColumnScaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALLOW_NULL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowNull = iprot.readBool();
              struct.setAllowNullIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // COLUMN_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnKey = iprot.readString();
              struct.setColumnKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.key = iprot.readBool();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // AGGREGATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aggregationType = iprot.readString();
              struct.setAggregationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbName = iprot.readString();
              struct.setDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // COLUMN_DEFAULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnDefault = iprot.readString();
              struct.setColumnDefaultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // COLUMN_TYPE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnTypeStr = iprot.readString();
              struct.setColumnTypeStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataType = iprot.readString();
              struct.setDataTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TColumnDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.columnName != null) {
        oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
        oprot.writeString(struct.columnName);
        oprot.writeFieldEnd();
      }
      if (struct.columnType != null) {
        oprot.writeFieldBegin(COLUMN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.columnType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetColumnLength()) {
        oprot.writeFieldBegin(COLUMN_LENGTH_FIELD_DESC);
        oprot.writeI32(struct.columnLength);
        oprot.writeFieldEnd();
      }
      if (struct.isSetColumnPrecision()) {
        oprot.writeFieldBegin(COLUMN_PRECISION_FIELD_DESC);
        oprot.writeI32(struct.columnPrecision);
        oprot.writeFieldEnd();
      }
      if (struct.isSetColumnScale()) {
        oprot.writeFieldBegin(COLUMN_SCALE_FIELD_DESC);
        oprot.writeI32(struct.columnScale);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAllowNull()) {
        oprot.writeFieldBegin(ALLOW_NULL_FIELD_DESC);
        oprot.writeBool(struct.allowNull);
        oprot.writeFieldEnd();
      }
      if (struct.columnKey != null) {
        if (struct.isSetColumnKey()) {
          oprot.writeFieldBegin(COLUMN_KEY_FIELD_DESC);
          oprot.writeString(struct.columnKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetKey()) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeBool(struct.key);
        oprot.writeFieldEnd();
      }
      if (struct.aggregationType != null) {
        if (struct.isSetAggregationType()) {
          oprot.writeFieldBegin(AGGREGATION_TYPE_FIELD_DESC);
          oprot.writeString(struct.aggregationType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dbName != null) {
        if (struct.isSetDbName()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.dbName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tableName != null) {
        if (struct.isSetTableName()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columnDefault != null) {
        if (struct.isSetColumnDefault()) {
          oprot.writeFieldBegin(COLUMN_DEFAULT_FIELD_DESC);
          oprot.writeString(struct.columnDefault);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columnTypeStr != null) {
        if (struct.isSetColumnTypeStr()) {
          oprot.writeFieldBegin(COLUMN_TYPE_STR_FIELD_DESC);
          oprot.writeString(struct.columnTypeStr);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dataType != null) {
        if (struct.isSetDataType()) {
          oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
          oprot.writeString(struct.dataType);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TColumnDescTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TColumnDescTupleScheme getScheme() {
      return new TColumnDescTupleScheme();
    }
  }

  private static class TColumnDescTupleScheme extends org.apache.thrift.scheme.TupleScheme<TColumnDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TColumnDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.columnName);
      oprot.writeI32(struct.columnType.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetColumnLength()) {
        optionals.set(0);
      }
      if (struct.isSetColumnPrecision()) {
        optionals.set(1);
      }
      if (struct.isSetColumnScale()) {
        optionals.set(2);
      }
      if (struct.isSetAllowNull()) {
        optionals.set(3);
      }
      if (struct.isSetColumnKey()) {
        optionals.set(4);
      }
      if (struct.isSetKey()) {
        optionals.set(5);
      }
      if (struct.isSetAggregationType()) {
        optionals.set(6);
      }
      if (struct.isSetDbName()) {
        optionals.set(7);
      }
      if (struct.isSetTableName()) {
        optionals.set(8);
      }
      if (struct.isSetColumnDefault()) {
        optionals.set(9);
      }
      if (struct.isSetColumnTypeStr()) {
        optionals.set(10);
      }
      if (struct.isSetDataType()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetColumnLength()) {
        oprot.writeI32(struct.columnLength);
      }
      if (struct.isSetColumnPrecision()) {
        oprot.writeI32(struct.columnPrecision);
      }
      if (struct.isSetColumnScale()) {
        oprot.writeI32(struct.columnScale);
      }
      if (struct.isSetAllowNull()) {
        oprot.writeBool(struct.allowNull);
      }
      if (struct.isSetColumnKey()) {
        oprot.writeString(struct.columnKey);
      }
      if (struct.isSetKey()) {
        oprot.writeBool(struct.key);
      }
      if (struct.isSetAggregationType()) {
        oprot.writeString(struct.aggregationType);
      }
      if (struct.isSetDbName()) {
        oprot.writeString(struct.dbName);
      }
      if (struct.isSetTableName()) {
        oprot.writeString(struct.tableName);
      }
      if (struct.isSetColumnDefault()) {
        oprot.writeString(struct.columnDefault);
      }
      if (struct.isSetColumnTypeStr()) {
        oprot.writeString(struct.columnTypeStr);
      }
      if (struct.isSetDataType()) {
        oprot.writeString(struct.dataType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TColumnDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.columnName = iprot.readString();
      struct.setColumnNameIsSet(true);
      struct.columnType = io.datafibre.fibre.thrift.TPrimitiveType.findByValue(iprot.readI32());
      struct.setColumnTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.columnLength = iprot.readI32();
        struct.setColumnLengthIsSet(true);
      }
      if (incoming.get(1)) {
        struct.columnPrecision = iprot.readI32();
        struct.setColumnPrecisionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.columnScale = iprot.readI32();
        struct.setColumnScaleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.allowNull = iprot.readBool();
        struct.setAllowNullIsSet(true);
      }
      if (incoming.get(4)) {
        struct.columnKey = iprot.readString();
        struct.setColumnKeyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.key = iprot.readBool();
        struct.setKeyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.aggregationType = iprot.readString();
        struct.setAggregationTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dbName = iprot.readString();
        struct.setDbNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tableName = iprot.readString();
        struct.setTableNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.columnDefault = iprot.readString();
        struct.setColumnDefaultIsSet(true);
      }
      if (incoming.get(10)) {
        struct.columnTypeStr = iprot.readString();
        struct.setColumnTypeStrIsSet(true);
      }
      if (incoming.get(11)) {
        struct.dataType = iprot.readString();
        struct.setDataTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

