/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TRoutineLoadJobInfo implements org.apache.thrift.TBase<TRoutineLoadJobInfo, TRoutineLoadJobInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TRoutineLoadJobInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRoutineLoadJobInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PAUSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("pause_time", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("end_time", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DATA_SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_source_type", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CURRENT_TASK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("current_task_num", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField JOB_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("job_properties", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DATA_SOURCE_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("data_source_properties", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CUSTOM_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("custom_properties", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField STATISTIC_FIELD_DESC = new org.apache.thrift.protocol.TField("statistic", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField REASONS_OF_STATE_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("reasons_of_state_changed", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ERROR_LOG_URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("error_log_urls", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField TRACKING_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("tracking_sql", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField OTHER_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("other_msg", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRoutineLoadJobInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRoutineLoadJobInfoTupleSchemeFactory();

  public long id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String create_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String pause_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String end_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String state; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String data_source_type; // optional
  public long current_task_num; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String job_properties; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String data_source_properties; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String custom_properties; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String statistic; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String progress; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String reasons_of_state_changed; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String error_log_urls; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String tracking_sql; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String other_msg; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    CREATE_TIME((short)3, "create_time"),
    PAUSE_TIME((short)4, "pause_time"),
    END_TIME((short)5, "end_time"),
    DB_NAME((short)6, "db_name"),
    TABLE_NAME((short)7, "table_name"),
    STATE((short)8, "state"),
    DATA_SOURCE_TYPE((short)9, "data_source_type"),
    CURRENT_TASK_NUM((short)10, "current_task_num"),
    JOB_PROPERTIES((short)11, "job_properties"),
    DATA_SOURCE_PROPERTIES((short)12, "data_source_properties"),
    CUSTOM_PROPERTIES((short)13, "custom_properties"),
    STATISTIC((short)14, "statistic"),
    PROGRESS((short)15, "progress"),
    REASONS_OF_STATE_CHANGED((short)16, "reasons_of_state_changed"),
    ERROR_LOG_URLS((short)17, "error_log_urls"),
    TRACKING_SQL((short)18, "tracking_sql"),
    OTHER_MSG((short)19, "other_msg");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // PAUSE_TIME
          return PAUSE_TIME;
        case 5: // END_TIME
          return END_TIME;
        case 6: // DB_NAME
          return DB_NAME;
        case 7: // TABLE_NAME
          return TABLE_NAME;
        case 8: // STATE
          return STATE;
        case 9: // DATA_SOURCE_TYPE
          return DATA_SOURCE_TYPE;
        case 10: // CURRENT_TASK_NUM
          return CURRENT_TASK_NUM;
        case 11: // JOB_PROPERTIES
          return JOB_PROPERTIES;
        case 12: // DATA_SOURCE_PROPERTIES
          return DATA_SOURCE_PROPERTIES;
        case 13: // CUSTOM_PROPERTIES
          return CUSTOM_PROPERTIES;
        case 14: // STATISTIC
          return STATISTIC;
        case 15: // PROGRESS
          return PROGRESS;
        case 16: // REASONS_OF_STATE_CHANGED
          return REASONS_OF_STATE_CHANGED;
        case 17: // ERROR_LOG_URLS
          return ERROR_LOG_URLS;
        case 18: // TRACKING_SQL
          return TRACKING_SQL;
        case 19: // OTHER_MSG
          return OTHER_MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CURRENT_TASK_NUM_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.NAME,_Fields.CREATE_TIME,_Fields.PAUSE_TIME,_Fields.END_TIME,_Fields.DB_NAME,_Fields.TABLE_NAME,_Fields.STATE,_Fields.DATA_SOURCE_TYPE,_Fields.CURRENT_TASK_NUM,_Fields.JOB_PROPERTIES,_Fields.DATA_SOURCE_PROPERTIES,_Fields.CUSTOM_PROPERTIES,_Fields.STATISTIC,_Fields.PROGRESS,_Fields.REASONS_OF_STATE_CHANGED,_Fields.ERROR_LOG_URLS,_Fields.TRACKING_SQL,_Fields.OTHER_MSG};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAUSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("pause_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("end_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("data_source_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_TASK_NUM, new org.apache.thrift.meta_data.FieldMetaData("current_task_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JOB_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("job_properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_SOURCE_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("data_source_properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOM_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("custom_properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATISTIC, new org.apache.thrift.meta_data.FieldMetaData("statistic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("progress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REASONS_OF_STATE_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("reasons_of_state_changed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR_LOG_URLS, new org.apache.thrift.meta_data.FieldMetaData("error_log_urls", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACKING_SQL, new org.apache.thrift.meta_data.FieldMetaData("tracking_sql", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OTHER_MSG, new org.apache.thrift.meta_data.FieldMetaData("other_msg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRoutineLoadJobInfo.class, metaDataMap);
  }

  public TRoutineLoadJobInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRoutineLoadJobInfo(TRoutineLoadJobInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    if (other.isSetPause_time()) {
      this.pause_time = other.pause_time;
    }
    if (other.isSetEnd_time()) {
      this.end_time = other.end_time;
    }
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetData_source_type()) {
      this.data_source_type = other.data_source_type;
    }
    this.current_task_num = other.current_task_num;
    if (other.isSetJob_properties()) {
      this.job_properties = other.job_properties;
    }
    if (other.isSetData_source_properties()) {
      this.data_source_properties = other.data_source_properties;
    }
    if (other.isSetCustom_properties()) {
      this.custom_properties = other.custom_properties;
    }
    if (other.isSetStatistic()) {
      this.statistic = other.statistic;
    }
    if (other.isSetProgress()) {
      this.progress = other.progress;
    }
    if (other.isSetReasons_of_state_changed()) {
      this.reasons_of_state_changed = other.reasons_of_state_changed;
    }
    if (other.isSetError_log_urls()) {
      this.error_log_urls = other.error_log_urls;
    }
    if (other.isSetTracking_sql()) {
      this.tracking_sql = other.tracking_sql;
    }
    if (other.isSetOther_msg()) {
      this.other_msg = other.other_msg;
    }
  }

  @Override
  public TRoutineLoadJobInfo deepCopy() {
    return new TRoutineLoadJobInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.create_time = null;
    this.pause_time = null;
    this.end_time = null;
    this.db_name = null;
    this.table_name = null;
    this.state = null;
    this.data_source_type = null;
    setCurrent_task_numIsSet(false);
    this.current_task_num = 0;
    this.job_properties = null;
    this.data_source_properties = null;
    this.custom_properties = null;
    this.statistic = null;
    this.progress = null;
    this.reasons_of_state_changed = null;
    this.error_log_urls = null;
    this.tracking_sql = null;
    this.other_msg = null;
  }

  public long getId() {
    return this.id;
  }

  public TRoutineLoadJobInfo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public TRoutineLoadJobInfo setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCreate_time() {
    return this.create_time;
  }

  public TRoutineLoadJobInfo setCreate_time(@org.apache.thrift.annotation.Nullable java.lang.String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPause_time() {
    return this.pause_time;
  }

  public TRoutineLoadJobInfo setPause_time(@org.apache.thrift.annotation.Nullable java.lang.String pause_time) {
    this.pause_time = pause_time;
    return this;
  }

  public void unsetPause_time() {
    this.pause_time = null;
  }

  /** Returns true if field pause_time is set (has been assigned a value) and false otherwise */
  public boolean isSetPause_time() {
    return this.pause_time != null;
  }

  public void setPause_timeIsSet(boolean value) {
    if (!value) {
      this.pause_time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEnd_time() {
    return this.end_time;
  }

  public TRoutineLoadJobInfo setEnd_time(@org.apache.thrift.annotation.Nullable java.lang.String end_time) {
    this.end_time = end_time;
    return this;
  }

  public void unsetEnd_time() {
    this.end_time = null;
  }

  /** Returns true if field end_time is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_time() {
    return this.end_time != null;
  }

  public void setEnd_timeIsSet(boolean value) {
    if (!value) {
      this.end_time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb_name() {
    return this.db_name;
  }

  public TRoutineLoadJobInfo setDb_name(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_name() {
    return this.table_name;
  }

  public TRoutineLoadJobInfo setTable_name(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getState() {
    return this.state;
  }

  public TRoutineLoadJobInfo setState(@org.apache.thrift.annotation.Nullable java.lang.String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getData_source_type() {
    return this.data_source_type;
  }

  public TRoutineLoadJobInfo setData_source_type(@org.apache.thrift.annotation.Nullable java.lang.String data_source_type) {
    this.data_source_type = data_source_type;
    return this;
  }

  public void unsetData_source_type() {
    this.data_source_type = null;
  }

  /** Returns true if field data_source_type is set (has been assigned a value) and false otherwise */
  public boolean isSetData_source_type() {
    return this.data_source_type != null;
  }

  public void setData_source_typeIsSet(boolean value) {
    if (!value) {
      this.data_source_type = null;
    }
  }

  public long getCurrent_task_num() {
    return this.current_task_num;
  }

  public TRoutineLoadJobInfo setCurrent_task_num(long current_task_num) {
    this.current_task_num = current_task_num;
    setCurrent_task_numIsSet(true);
    return this;
  }

  public void unsetCurrent_task_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENT_TASK_NUM_ISSET_ID);
  }

  /** Returns true if field current_task_num is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_task_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENT_TASK_NUM_ISSET_ID);
  }

  public void setCurrent_task_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRENT_TASK_NUM_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJob_properties() {
    return this.job_properties;
  }

  public TRoutineLoadJobInfo setJob_properties(@org.apache.thrift.annotation.Nullable java.lang.String job_properties) {
    this.job_properties = job_properties;
    return this;
  }

  public void unsetJob_properties() {
    this.job_properties = null;
  }

  /** Returns true if field job_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetJob_properties() {
    return this.job_properties != null;
  }

  public void setJob_propertiesIsSet(boolean value) {
    if (!value) {
      this.job_properties = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getData_source_properties() {
    return this.data_source_properties;
  }

  public TRoutineLoadJobInfo setData_source_properties(@org.apache.thrift.annotation.Nullable java.lang.String data_source_properties) {
    this.data_source_properties = data_source_properties;
    return this;
  }

  public void unsetData_source_properties() {
    this.data_source_properties = null;
  }

  /** Returns true if field data_source_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetData_source_properties() {
    return this.data_source_properties != null;
  }

  public void setData_source_propertiesIsSet(boolean value) {
    if (!value) {
      this.data_source_properties = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCustom_properties() {
    return this.custom_properties;
  }

  public TRoutineLoadJobInfo setCustom_properties(@org.apache.thrift.annotation.Nullable java.lang.String custom_properties) {
    this.custom_properties = custom_properties;
    return this;
  }

  public void unsetCustom_properties() {
    this.custom_properties = null;
  }

  /** Returns true if field custom_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetCustom_properties() {
    return this.custom_properties != null;
  }

  public void setCustom_propertiesIsSet(boolean value) {
    if (!value) {
      this.custom_properties = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStatistic() {
    return this.statistic;
  }

  public TRoutineLoadJobInfo setStatistic(@org.apache.thrift.annotation.Nullable java.lang.String statistic) {
    this.statistic = statistic;
    return this;
  }

  public void unsetStatistic() {
    this.statistic = null;
  }

  /** Returns true if field statistic is set (has been assigned a value) and false otherwise */
  public boolean isSetStatistic() {
    return this.statistic != null;
  }

  public void setStatisticIsSet(boolean value) {
    if (!value) {
      this.statistic = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getProgress() {
    return this.progress;
  }

  public TRoutineLoadJobInfo setProgress(@org.apache.thrift.annotation.Nullable java.lang.String progress) {
    this.progress = progress;
    return this;
  }

  public void unsetProgress() {
    this.progress = null;
  }

  /** Returns true if field progress is set (has been assigned a value) and false otherwise */
  public boolean isSetProgress() {
    return this.progress != null;
  }

  public void setProgressIsSet(boolean value) {
    if (!value) {
      this.progress = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getReasons_of_state_changed() {
    return this.reasons_of_state_changed;
  }

  public TRoutineLoadJobInfo setReasons_of_state_changed(@org.apache.thrift.annotation.Nullable java.lang.String reasons_of_state_changed) {
    this.reasons_of_state_changed = reasons_of_state_changed;
    return this;
  }

  public void unsetReasons_of_state_changed() {
    this.reasons_of_state_changed = null;
  }

  /** Returns true if field reasons_of_state_changed is set (has been assigned a value) and false otherwise */
  public boolean isSetReasons_of_state_changed() {
    return this.reasons_of_state_changed != null;
  }

  public void setReasons_of_state_changedIsSet(boolean value) {
    if (!value) {
      this.reasons_of_state_changed = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getError_log_urls() {
    return this.error_log_urls;
  }

  public TRoutineLoadJobInfo setError_log_urls(@org.apache.thrift.annotation.Nullable java.lang.String error_log_urls) {
    this.error_log_urls = error_log_urls;
    return this;
  }

  public void unsetError_log_urls() {
    this.error_log_urls = null;
  }

  /** Returns true if field error_log_urls is set (has been assigned a value) and false otherwise */
  public boolean isSetError_log_urls() {
    return this.error_log_urls != null;
  }

  public void setError_log_urlsIsSet(boolean value) {
    if (!value) {
      this.error_log_urls = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTracking_sql() {
    return this.tracking_sql;
  }

  public TRoutineLoadJobInfo setTracking_sql(@org.apache.thrift.annotation.Nullable java.lang.String tracking_sql) {
    this.tracking_sql = tracking_sql;
    return this;
  }

  public void unsetTracking_sql() {
    this.tracking_sql = null;
  }

  /** Returns true if field tracking_sql is set (has been assigned a value) and false otherwise */
  public boolean isSetTracking_sql() {
    return this.tracking_sql != null;
  }

  public void setTracking_sqlIsSet(boolean value) {
    if (!value) {
      this.tracking_sql = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOther_msg() {
    return this.other_msg;
  }

  public TRoutineLoadJobInfo setOther_msg(@org.apache.thrift.annotation.Nullable java.lang.String other_msg) {
    this.other_msg = other_msg;
    return this;
  }

  public void unsetOther_msg() {
    this.other_msg = null;
  }

  /** Returns true if field other_msg is set (has been assigned a value) and false otherwise */
  public boolean isSetOther_msg() {
    return this.other_msg != null;
  }

  public void setOther_msgIsSet(boolean value) {
    if (!value) {
      this.other_msg = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((java.lang.String)value);
      }
      break;

    case PAUSE_TIME:
      if (value == null) {
        unsetPause_time();
      } else {
        setPause_time((java.lang.String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEnd_time();
      } else {
        setEnd_time((java.lang.String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((java.lang.String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.String)value);
      }
      break;

    case DATA_SOURCE_TYPE:
      if (value == null) {
        unsetData_source_type();
      } else {
        setData_source_type((java.lang.String)value);
      }
      break;

    case CURRENT_TASK_NUM:
      if (value == null) {
        unsetCurrent_task_num();
      } else {
        setCurrent_task_num((java.lang.Long)value);
      }
      break;

    case JOB_PROPERTIES:
      if (value == null) {
        unsetJob_properties();
      } else {
        setJob_properties((java.lang.String)value);
      }
      break;

    case DATA_SOURCE_PROPERTIES:
      if (value == null) {
        unsetData_source_properties();
      } else {
        setData_source_properties((java.lang.String)value);
      }
      break;

    case CUSTOM_PROPERTIES:
      if (value == null) {
        unsetCustom_properties();
      } else {
        setCustom_properties((java.lang.String)value);
      }
      break;

    case STATISTIC:
      if (value == null) {
        unsetStatistic();
      } else {
        setStatistic((java.lang.String)value);
      }
      break;

    case PROGRESS:
      if (value == null) {
        unsetProgress();
      } else {
        setProgress((java.lang.String)value);
      }
      break;

    case REASONS_OF_STATE_CHANGED:
      if (value == null) {
        unsetReasons_of_state_changed();
      } else {
        setReasons_of_state_changed((java.lang.String)value);
      }
      break;

    case ERROR_LOG_URLS:
      if (value == null) {
        unsetError_log_urls();
      } else {
        setError_log_urls((java.lang.String)value);
      }
      break;

    case TRACKING_SQL:
      if (value == null) {
        unsetTracking_sql();
      } else {
        setTracking_sql((java.lang.String)value);
      }
      break;

    case OTHER_MSG:
      if (value == null) {
        unsetOther_msg();
      } else {
        setOther_msg((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case CREATE_TIME:
      return getCreate_time();

    case PAUSE_TIME:
      return getPause_time();

    case END_TIME:
      return getEnd_time();

    case DB_NAME:
      return getDb_name();

    case TABLE_NAME:
      return getTable_name();

    case STATE:
      return getState();

    case DATA_SOURCE_TYPE:
      return getData_source_type();

    case CURRENT_TASK_NUM:
      return getCurrent_task_num();

    case JOB_PROPERTIES:
      return getJob_properties();

    case DATA_SOURCE_PROPERTIES:
      return getData_source_properties();

    case CUSTOM_PROPERTIES:
      return getCustom_properties();

    case STATISTIC:
      return getStatistic();

    case PROGRESS:
      return getProgress();

    case REASONS_OF_STATE_CHANGED:
      return getReasons_of_state_changed();

    case ERROR_LOG_URLS:
      return getError_log_urls();

    case TRACKING_SQL:
      return getTracking_sql();

    case OTHER_MSG:
      return getOther_msg();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case CREATE_TIME:
      return isSetCreate_time();
    case PAUSE_TIME:
      return isSetPause_time();
    case END_TIME:
      return isSetEnd_time();
    case DB_NAME:
      return isSetDb_name();
    case TABLE_NAME:
      return isSetTable_name();
    case STATE:
      return isSetState();
    case DATA_SOURCE_TYPE:
      return isSetData_source_type();
    case CURRENT_TASK_NUM:
      return isSetCurrent_task_num();
    case JOB_PROPERTIES:
      return isSetJob_properties();
    case DATA_SOURCE_PROPERTIES:
      return isSetData_source_properties();
    case CUSTOM_PROPERTIES:
      return isSetCustom_properties();
    case STATISTIC:
      return isSetStatistic();
    case PROGRESS:
      return isSetProgress();
    case REASONS_OF_STATE_CHANGED:
      return isSetReasons_of_state_changed();
    case ERROR_LOG_URLS:
      return isSetError_log_urls();
    case TRACKING_SQL:
      return isSetTracking_sql();
    case OTHER_MSG:
      return isSetOther_msg();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRoutineLoadJobInfo)
      return this.equals((TRoutineLoadJobInfo)that);
    return false;
  }

  public boolean equals(TRoutineLoadJobInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_pause_time = true && this.isSetPause_time();
    boolean that_present_pause_time = true && that.isSetPause_time();
    if (this_present_pause_time || that_present_pause_time) {
      if (!(this_present_pause_time && that_present_pause_time))
        return false;
      if (!this.pause_time.equals(that.pause_time))
        return false;
    }

    boolean this_present_end_time = true && this.isSetEnd_time();
    boolean that_present_end_time = true && that.isSetEnd_time();
    if (this_present_end_time || that_present_end_time) {
      if (!(this_present_end_time && that_present_end_time))
        return false;
      if (!this.end_time.equals(that.end_time))
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_data_source_type = true && this.isSetData_source_type();
    boolean that_present_data_source_type = true && that.isSetData_source_type();
    if (this_present_data_source_type || that_present_data_source_type) {
      if (!(this_present_data_source_type && that_present_data_source_type))
        return false;
      if (!this.data_source_type.equals(that.data_source_type))
        return false;
    }

    boolean this_present_current_task_num = true && this.isSetCurrent_task_num();
    boolean that_present_current_task_num = true && that.isSetCurrent_task_num();
    if (this_present_current_task_num || that_present_current_task_num) {
      if (!(this_present_current_task_num && that_present_current_task_num))
        return false;
      if (this.current_task_num != that.current_task_num)
        return false;
    }

    boolean this_present_job_properties = true && this.isSetJob_properties();
    boolean that_present_job_properties = true && that.isSetJob_properties();
    if (this_present_job_properties || that_present_job_properties) {
      if (!(this_present_job_properties && that_present_job_properties))
        return false;
      if (!this.job_properties.equals(that.job_properties))
        return false;
    }

    boolean this_present_data_source_properties = true && this.isSetData_source_properties();
    boolean that_present_data_source_properties = true && that.isSetData_source_properties();
    if (this_present_data_source_properties || that_present_data_source_properties) {
      if (!(this_present_data_source_properties && that_present_data_source_properties))
        return false;
      if (!this.data_source_properties.equals(that.data_source_properties))
        return false;
    }

    boolean this_present_custom_properties = true && this.isSetCustom_properties();
    boolean that_present_custom_properties = true && that.isSetCustom_properties();
    if (this_present_custom_properties || that_present_custom_properties) {
      if (!(this_present_custom_properties && that_present_custom_properties))
        return false;
      if (!this.custom_properties.equals(that.custom_properties))
        return false;
    }

    boolean this_present_statistic = true && this.isSetStatistic();
    boolean that_present_statistic = true && that.isSetStatistic();
    if (this_present_statistic || that_present_statistic) {
      if (!(this_present_statistic && that_present_statistic))
        return false;
      if (!this.statistic.equals(that.statistic))
        return false;
    }

    boolean this_present_progress = true && this.isSetProgress();
    boolean that_present_progress = true && that.isSetProgress();
    if (this_present_progress || that_present_progress) {
      if (!(this_present_progress && that_present_progress))
        return false;
      if (!this.progress.equals(that.progress))
        return false;
    }

    boolean this_present_reasons_of_state_changed = true && this.isSetReasons_of_state_changed();
    boolean that_present_reasons_of_state_changed = true && that.isSetReasons_of_state_changed();
    if (this_present_reasons_of_state_changed || that_present_reasons_of_state_changed) {
      if (!(this_present_reasons_of_state_changed && that_present_reasons_of_state_changed))
        return false;
      if (!this.reasons_of_state_changed.equals(that.reasons_of_state_changed))
        return false;
    }

    boolean this_present_error_log_urls = true && this.isSetError_log_urls();
    boolean that_present_error_log_urls = true && that.isSetError_log_urls();
    if (this_present_error_log_urls || that_present_error_log_urls) {
      if (!(this_present_error_log_urls && that_present_error_log_urls))
        return false;
      if (!this.error_log_urls.equals(that.error_log_urls))
        return false;
    }

    boolean this_present_tracking_sql = true && this.isSetTracking_sql();
    boolean that_present_tracking_sql = true && that.isSetTracking_sql();
    if (this_present_tracking_sql || that_present_tracking_sql) {
      if (!(this_present_tracking_sql && that_present_tracking_sql))
        return false;
      if (!this.tracking_sql.equals(that.tracking_sql))
        return false;
    }

    boolean this_present_other_msg = true && this.isSetOther_msg();
    boolean that_present_other_msg = true && that.isSetOther_msg();
    if (this_present_other_msg || that_present_other_msg) {
      if (!(this_present_other_msg && that_present_other_msg))
        return false;
      if (!this.other_msg.equals(that.other_msg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreate_time()) ? 131071 : 524287);
    if (isSetCreate_time())
      hashCode = hashCode * 8191 + create_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetPause_time()) ? 131071 : 524287);
    if (isSetPause_time())
      hashCode = hashCode * 8191 + pause_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnd_time()) ? 131071 : 524287);
    if (isSetEnd_time())
      hashCode = hashCode * 8191 + end_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb_name()) ? 131071 : 524287);
    if (isSetDb_name())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.hashCode();

    hashCode = hashCode * 8191 + ((isSetData_source_type()) ? 131071 : 524287);
    if (isSetData_source_type())
      hashCode = hashCode * 8191 + data_source_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrent_task_num()) ? 131071 : 524287);
    if (isSetCurrent_task_num())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(current_task_num);

    hashCode = hashCode * 8191 + ((isSetJob_properties()) ? 131071 : 524287);
    if (isSetJob_properties())
      hashCode = hashCode * 8191 + job_properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetData_source_properties()) ? 131071 : 524287);
    if (isSetData_source_properties())
      hashCode = hashCode * 8191 + data_source_properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetCustom_properties()) ? 131071 : 524287);
    if (isSetCustom_properties())
      hashCode = hashCode * 8191 + custom_properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatistic()) ? 131071 : 524287);
    if (isSetStatistic())
      hashCode = hashCode * 8191 + statistic.hashCode();

    hashCode = hashCode * 8191 + ((isSetProgress()) ? 131071 : 524287);
    if (isSetProgress())
      hashCode = hashCode * 8191 + progress.hashCode();

    hashCode = hashCode * 8191 + ((isSetReasons_of_state_changed()) ? 131071 : 524287);
    if (isSetReasons_of_state_changed())
      hashCode = hashCode * 8191 + reasons_of_state_changed.hashCode();

    hashCode = hashCode * 8191 + ((isSetError_log_urls()) ? 131071 : 524287);
    if (isSetError_log_urls())
      hashCode = hashCode * 8191 + error_log_urls.hashCode();

    hashCode = hashCode * 8191 + ((isSetTracking_sql()) ? 131071 : 524287);
    if (isSetTracking_sql())
      hashCode = hashCode * 8191 + tracking_sql.hashCode();

    hashCode = hashCode * 8191 + ((isSetOther_msg()) ? 131071 : 524287);
    if (isSetOther_msg())
      hashCode = hashCode * 8191 + other_msg.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TRoutineLoadJobInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreate_time(), other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPause_time(), other.isSetPause_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPause_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pause_time, other.pause_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnd_time(), other.isSetEnd_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_time, other.end_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb_name(), other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_name(), other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetData_source_type(), other.isSetData_source_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_source_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_source_type, other.data_source_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCurrent_task_num(), other.isSetCurrent_task_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_task_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_task_num, other.current_task_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJob_properties(), other.isSetJob_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job_properties, other.job_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetData_source_properties(), other.isSetData_source_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_source_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_source_properties, other.data_source_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCustom_properties(), other.isSetCustom_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustom_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custom_properties, other.custom_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatistic(), other.isSetStatistic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatistic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statistic, other.statistic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProgress(), other.isSetProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress, other.progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReasons_of_state_changed(), other.isSetReasons_of_state_changed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReasons_of_state_changed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reasons_of_state_changed, other.reasons_of_state_changed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetError_log_urls(), other.isSetError_log_urls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_log_urls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_log_urls, other.error_log_urls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTracking_sql(), other.isSetTracking_sql());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTracking_sql()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracking_sql, other.tracking_sql);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOther_msg(), other.isSetOther_msg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOther_msg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.other_msg, other.other_msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRoutineLoadJobInfo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      if (this.create_time == null) {
        sb.append("null");
      } else {
        sb.append(this.create_time);
      }
      first = false;
    }
    if (isSetPause_time()) {
      if (!first) sb.append(", ");
      sb.append("pause_time:");
      if (this.pause_time == null) {
        sb.append("null");
      } else {
        sb.append(this.pause_time);
      }
      first = false;
    }
    if (isSetEnd_time()) {
      if (!first) sb.append(", ");
      sb.append("end_time:");
      if (this.end_time == null) {
        sb.append("null");
      } else {
        sb.append(this.end_time);
      }
      first = false;
    }
    if (isSetDb_name()) {
      if (!first) sb.append(", ");
      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetData_source_type()) {
      if (!first) sb.append(", ");
      sb.append("data_source_type:");
      if (this.data_source_type == null) {
        sb.append("null");
      } else {
        sb.append(this.data_source_type);
      }
      first = false;
    }
    if (isSetCurrent_task_num()) {
      if (!first) sb.append(", ");
      sb.append("current_task_num:");
      sb.append(this.current_task_num);
      first = false;
    }
    if (isSetJob_properties()) {
      if (!first) sb.append(", ");
      sb.append("job_properties:");
      if (this.job_properties == null) {
        sb.append("null");
      } else {
        sb.append(this.job_properties);
      }
      first = false;
    }
    if (isSetData_source_properties()) {
      if (!first) sb.append(", ");
      sb.append("data_source_properties:");
      if (this.data_source_properties == null) {
        sb.append("null");
      } else {
        sb.append(this.data_source_properties);
      }
      first = false;
    }
    if (isSetCustom_properties()) {
      if (!first) sb.append(", ");
      sb.append("custom_properties:");
      if (this.custom_properties == null) {
        sb.append("null");
      } else {
        sb.append(this.custom_properties);
      }
      first = false;
    }
    if (isSetStatistic()) {
      if (!first) sb.append(", ");
      sb.append("statistic:");
      if (this.statistic == null) {
        sb.append("null");
      } else {
        sb.append(this.statistic);
      }
      first = false;
    }
    if (isSetProgress()) {
      if (!first) sb.append(", ");
      sb.append("progress:");
      if (this.progress == null) {
        sb.append("null");
      } else {
        sb.append(this.progress);
      }
      first = false;
    }
    if (isSetReasons_of_state_changed()) {
      if (!first) sb.append(", ");
      sb.append("reasons_of_state_changed:");
      if (this.reasons_of_state_changed == null) {
        sb.append("null");
      } else {
        sb.append(this.reasons_of_state_changed);
      }
      first = false;
    }
    if (isSetError_log_urls()) {
      if (!first) sb.append(", ");
      sb.append("error_log_urls:");
      if (this.error_log_urls == null) {
        sb.append("null");
      } else {
        sb.append(this.error_log_urls);
      }
      first = false;
    }
    if (isSetTracking_sql()) {
      if (!first) sb.append(", ");
      sb.append("tracking_sql:");
      if (this.tracking_sql == null) {
        sb.append("null");
      } else {
        sb.append(this.tracking_sql);
      }
      first = false;
    }
    if (isSetOther_msg()) {
      if (!first) sb.append(", ");
      sb.append("other_msg:");
      if (this.other_msg == null) {
        sb.append("null");
      } else {
        sb.append(this.other_msg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRoutineLoadJobInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRoutineLoadJobInfoStandardScheme getScheme() {
      return new TRoutineLoadJobInfoStandardScheme();
    }
  }

  private static class TRoutineLoadJobInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRoutineLoadJobInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TRoutineLoadJobInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAUSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pause_time = iprot.readString();
              struct.setPause_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.end_time = iprot.readString();
              struct.setEnd_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DATA_SOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data_source_type = iprot.readString();
              struct.setData_source_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CURRENT_TASK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.current_task_num = iprot.readI64();
              struct.setCurrent_task_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // JOB_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.job_properties = iprot.readString();
              struct.setJob_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DATA_SOURCE_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data_source_properties = iprot.readString();
              struct.setData_source_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CUSTOM_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.custom_properties = iprot.readString();
              struct.setCustom_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STATISTIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statistic = iprot.readString();
              struct.setStatisticIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.progress = iprot.readString();
              struct.setProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REASONS_OF_STATE_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reasons_of_state_changed = iprot.readString();
              struct.setReasons_of_state_changedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ERROR_LOG_URLS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error_log_urls = iprot.readString();
              struct.setError_log_urlsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TRACKING_SQL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tracking_sql = iprot.readString();
              struct.setTracking_sqlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // OTHER_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.other_msg = iprot.readString();
              struct.setOther_msgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TRoutineLoadJobInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_time != null) {
        if (struct.isSetCreate_time()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.create_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pause_time != null) {
        if (struct.isSetPause_time()) {
          oprot.writeFieldBegin(PAUSE_TIME_FIELD_DESC);
          oprot.writeString(struct.pause_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.end_time != null) {
        if (struct.isSetEnd_time()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.end_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db_name != null) {
        if (struct.isSetDb_name()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.db_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.data_source_type != null) {
        if (struct.isSetData_source_type()) {
          oprot.writeFieldBegin(DATA_SOURCE_TYPE_FIELD_DESC);
          oprot.writeString(struct.data_source_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCurrent_task_num()) {
        oprot.writeFieldBegin(CURRENT_TASK_NUM_FIELD_DESC);
        oprot.writeI64(struct.current_task_num);
        oprot.writeFieldEnd();
      }
      if (struct.job_properties != null) {
        if (struct.isSetJob_properties()) {
          oprot.writeFieldBegin(JOB_PROPERTIES_FIELD_DESC);
          oprot.writeString(struct.job_properties);
          oprot.writeFieldEnd();
        }
      }
      if (struct.data_source_properties != null) {
        if (struct.isSetData_source_properties()) {
          oprot.writeFieldBegin(DATA_SOURCE_PROPERTIES_FIELD_DESC);
          oprot.writeString(struct.data_source_properties);
          oprot.writeFieldEnd();
        }
      }
      if (struct.custom_properties != null) {
        if (struct.isSetCustom_properties()) {
          oprot.writeFieldBegin(CUSTOM_PROPERTIES_FIELD_DESC);
          oprot.writeString(struct.custom_properties);
          oprot.writeFieldEnd();
        }
      }
      if (struct.statistic != null) {
        if (struct.isSetStatistic()) {
          oprot.writeFieldBegin(STATISTIC_FIELD_DESC);
          oprot.writeString(struct.statistic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.progress != null) {
        if (struct.isSetProgress()) {
          oprot.writeFieldBegin(PROGRESS_FIELD_DESC);
          oprot.writeString(struct.progress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reasons_of_state_changed != null) {
        if (struct.isSetReasons_of_state_changed()) {
          oprot.writeFieldBegin(REASONS_OF_STATE_CHANGED_FIELD_DESC);
          oprot.writeString(struct.reasons_of_state_changed);
          oprot.writeFieldEnd();
        }
      }
      if (struct.error_log_urls != null) {
        if (struct.isSetError_log_urls()) {
          oprot.writeFieldBegin(ERROR_LOG_URLS_FIELD_DESC);
          oprot.writeString(struct.error_log_urls);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tracking_sql != null) {
        if (struct.isSetTracking_sql()) {
          oprot.writeFieldBegin(TRACKING_SQL_FIELD_DESC);
          oprot.writeString(struct.tracking_sql);
          oprot.writeFieldEnd();
        }
      }
      if (struct.other_msg != null) {
        if (struct.isSetOther_msg()) {
          oprot.writeFieldBegin(OTHER_MSG_FIELD_DESC);
          oprot.writeString(struct.other_msg);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRoutineLoadJobInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRoutineLoadJobInfoTupleScheme getScheme() {
      return new TRoutineLoadJobInfoTupleScheme();
    }
  }

  private static class TRoutineLoadJobInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRoutineLoadJobInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRoutineLoadJobInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(2);
      }
      if (struct.isSetPause_time()) {
        optionals.set(3);
      }
      if (struct.isSetEnd_time()) {
        optionals.set(4);
      }
      if (struct.isSetDb_name()) {
        optionals.set(5);
      }
      if (struct.isSetTable_name()) {
        optionals.set(6);
      }
      if (struct.isSetState()) {
        optionals.set(7);
      }
      if (struct.isSetData_source_type()) {
        optionals.set(8);
      }
      if (struct.isSetCurrent_task_num()) {
        optionals.set(9);
      }
      if (struct.isSetJob_properties()) {
        optionals.set(10);
      }
      if (struct.isSetData_source_properties()) {
        optionals.set(11);
      }
      if (struct.isSetCustom_properties()) {
        optionals.set(12);
      }
      if (struct.isSetStatistic()) {
        optionals.set(13);
      }
      if (struct.isSetProgress()) {
        optionals.set(14);
      }
      if (struct.isSetReasons_of_state_changed()) {
        optionals.set(15);
      }
      if (struct.isSetError_log_urls()) {
        optionals.set(16);
      }
      if (struct.isSetTracking_sql()) {
        optionals.set(17);
      }
      if (struct.isSetOther_msg()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetPause_time()) {
        oprot.writeString(struct.pause_time);
      }
      if (struct.isSetEnd_time()) {
        oprot.writeString(struct.end_time);
      }
      if (struct.isSetDb_name()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetData_source_type()) {
        oprot.writeString(struct.data_source_type);
      }
      if (struct.isSetCurrent_task_num()) {
        oprot.writeI64(struct.current_task_num);
      }
      if (struct.isSetJob_properties()) {
        oprot.writeString(struct.job_properties);
      }
      if (struct.isSetData_source_properties()) {
        oprot.writeString(struct.data_source_properties);
      }
      if (struct.isSetCustom_properties()) {
        oprot.writeString(struct.custom_properties);
      }
      if (struct.isSetStatistic()) {
        oprot.writeString(struct.statistic);
      }
      if (struct.isSetProgress()) {
        oprot.writeString(struct.progress);
      }
      if (struct.isSetReasons_of_state_changed()) {
        oprot.writeString(struct.reasons_of_state_changed);
      }
      if (struct.isSetError_log_urls()) {
        oprot.writeString(struct.error_log_urls);
      }
      if (struct.isSetTracking_sql()) {
        oprot.writeString(struct.tracking_sql);
      }
      if (struct.isSetOther_msg()) {
        oprot.writeString(struct.other_msg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRoutineLoadJobInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pause_time = iprot.readString();
        struct.setPause_timeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.end_time = iprot.readString();
        struct.setEnd_timeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.db_name = iprot.readString();
        struct.setDb_nameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.data_source_type = iprot.readString();
        struct.setData_source_typeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.current_task_num = iprot.readI64();
        struct.setCurrent_task_numIsSet(true);
      }
      if (incoming.get(10)) {
        struct.job_properties = iprot.readString();
        struct.setJob_propertiesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.data_source_properties = iprot.readString();
        struct.setData_source_propertiesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.custom_properties = iprot.readString();
        struct.setCustom_propertiesIsSet(true);
      }
      if (incoming.get(13)) {
        struct.statistic = iprot.readString();
        struct.setStatisticIsSet(true);
      }
      if (incoming.get(14)) {
        struct.progress = iprot.readString();
        struct.setProgressIsSet(true);
      }
      if (incoming.get(15)) {
        struct.reasons_of_state_changed = iprot.readString();
        struct.setReasons_of_state_changedIsSet(true);
      }
      if (incoming.get(16)) {
        struct.error_log_urls = iprot.readString();
        struct.setError_log_urlsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.tracking_sql = iprot.readString();
        struct.setTracking_sqlIsSet(true);
      }
      if (incoming.get(18)) {
        struct.other_msg = iprot.readString();
        struct.setOther_msgIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

