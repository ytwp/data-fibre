/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TQueryOptions implements org.apache.thrift.TBase<TQueryOptions, TQueryOptions._Fields>, java.io.Serializable, Cloneable, Comparable<TQueryOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueryOptions");

  private static final org.apache.thrift.protocol.TField MAX_ERRORS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_errors", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("batch_size", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_limit", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField ABORT_ON_DEFAULT_LIMIT_EXCEEDED_FIELD_DESC = new org.apache.thrift.protocol.TField("abort_on_default_limit_exceeded", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField QUERY_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("query_timeout", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ENABLE_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_profile", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField QUERY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("query_type", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField LOAD_MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("load_mem_limit", org.apache.thrift.protocol.TType.I64, (short)28);
  private static final org.apache.thrift.protocol.TField MAX_SCAN_KEY_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("max_scan_key_num", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField MAX_PUSHDOWN_CONDITIONS_PER_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("max_pushdown_conditions_per_column", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField ENABLE_SPILL_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_spill", org.apache.thrift.protocol.TType.BOOL, (short)31);
  private static final org.apache.thrift.protocol.TField TRANSMISSION_COMPRESSION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transmission_compression_type", org.apache.thrift.protocol.TType.I32, (short)50);
  private static final org.apache.thrift.protocol.TField RUNTIME_JOIN_FILTER_PUSHDOWN_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_join_filter_pushdown_limit", org.apache.thrift.protocol.TType.I64, (short)51);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_WAIT_TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_wait_timeout_ms", org.apache.thrift.protocol.TType.I32, (short)52);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_SEND_TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_send_timeout_ms", org.apache.thrift.protocol.TType.I32, (short)53);
  private static final org.apache.thrift.protocol.TField PIPELINE_DOP_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeline_dop", org.apache.thrift.protocol.TType.I32, (short)54);
  private static final org.apache.thrift.protocol.TField PIPELINE_PROFILE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeline_profile_level", org.apache.thrift.protocol.TType.I32, (short)55);
  private static final org.apache.thrift.protocol.TField LOAD_DOP_FIELD_DESC = new org.apache.thrift.protocol.TField("load_dop", org.apache.thrift.protocol.TType.I32, (short)56);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_SCAN_WAIT_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_scan_wait_time_ms", org.apache.thrift.protocol.TType.I64, (short)57);
  private static final org.apache.thrift.protocol.TField QUERY_MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("query_mem_limit", org.apache.thrift.protocol.TType.I64, (short)58);
  private static final org.apache.thrift.protocol.TField ENABLE_TABLET_INTERNAL_PARALLEL_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_tablet_internal_parallel", org.apache.thrift.protocol.TType.BOOL, (short)59);
  private static final org.apache.thrift.protocol.TField QUERY_DELIVERY_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("query_delivery_timeout", org.apache.thrift.protocol.TType.I32, (short)60);
  private static final org.apache.thrift.protocol.TField ENABLE_QUERY_DEBUG_TRACE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_query_debug_trace", org.apache.thrift.protocol.TType.BOOL, (short)61);
  private static final org.apache.thrift.protocol.TField LOAD_TRANSMISSION_COMPRESSION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("load_transmission_compression_type", org.apache.thrift.protocol.TType.I32, (short)62);
  private static final org.apache.thrift.protocol.TField TABLET_INTERNAL_PARALLEL_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_internal_parallel_mode", org.apache.thrift.protocol.TType.I32, (short)63);
  private static final org.apache.thrift.protocol.TField LOAD_JOB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("load_job_type", org.apache.thrift.protocol.TType.I32, (short)64);
  private static final org.apache.thrift.protocol.TField ENABLE_SCAN_DATACACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_scan_datacache", org.apache.thrift.protocol.TType.BOOL, (short)66);
  private static final org.apache.thrift.protocol.TField ENABLE_PIPELINE_QUERY_STATISTIC_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_pipeline_query_statistic", org.apache.thrift.protocol.TType.BOOL, (short)67);
  private static final org.apache.thrift.protocol.TField TRANSMISSION_ENCODE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("transmission_encode_level", org.apache.thrift.protocol.TType.I32, (short)68);
  private static final org.apache.thrift.protocol.TField ENABLE_POPULATE_DATACACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_populate_datacache", org.apache.thrift.protocol.TType.BOOL, (short)69);
  private static final org.apache.thrift.protocol.TField ALLOW_THROW_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("allow_throw_exception", org.apache.thrift.protocol.TType.BOOL, (short)70);
  private static final org.apache.thrift.protocol.TField HUDI_MOR_FORCE_JNI_READER_FIELD_DESC = new org.apache.thrift.protocol.TField("hudi_mor_force_jni_reader", org.apache.thrift.protocol.TType.BOOL, (short)71);
  private static final org.apache.thrift.protocol.TField RPC_HTTP_MIN_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("rpc_http_min_size", org.apache.thrift.protocol.TType.I64, (short)72);
  private static final org.apache.thrift.protocol.TField SPILL_MEM_TABLE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_mem_table_size", org.apache.thrift.protocol.TType.I32, (short)73);
  private static final org.apache.thrift.protocol.TField SPILL_MEM_TABLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_mem_table_num", org.apache.thrift.protocol.TType.I32, (short)74);
  private static final org.apache.thrift.protocol.TField SPILL_MEM_LIMIT_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_mem_limit_threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)75);
  private static final org.apache.thrift.protocol.TField SPILL_OPERATOR_MIN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_operator_min_bytes", org.apache.thrift.protocol.TType.I64, (short)76);
  private static final org.apache.thrift.protocol.TField SPILL_OPERATOR_MAX_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_operator_max_bytes", org.apache.thrift.protocol.TType.I64, (short)77);
  private static final org.apache.thrift.protocol.TField SPILL_ENCODE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_encode_level", org.apache.thrift.protocol.TType.I32, (short)78);
  private static final org.apache.thrift.protocol.TField SPILL_REVOCABLE_MAX_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_revocable_max_bytes", org.apache.thrift.protocol.TType.I64, (short)79);
  private static final org.apache.thrift.protocol.TField SPILL_ENABLE_DIRECT_IO_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_enable_direct_io", org.apache.thrift.protocol.TType.BOOL, (short)80);
  private static final org.apache.thrift.protocol.TField SPILL_RAND_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_rand_ratio", org.apache.thrift.protocol.TType.DOUBLE, (short)81);
  private static final org.apache.thrift.protocol.TField SPILL_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_mode", org.apache.thrift.protocol.TType.I32, (short)85);
  private static final org.apache.thrift.protocol.TField IO_TASKS_PER_SCAN_OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_tasks_per_scan_operator", org.apache.thrift.protocol.TType.I32, (short)86);
  private static final org.apache.thrift.protocol.TField CONNECTOR_IO_TASKS_PER_SCAN_OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("connector_io_tasks_per_scan_operator", org.apache.thrift.protocol.TType.I32, (short)87);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_EARLY_RETURN_SELECTIVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_early_return_selectivity", org.apache.thrift.protocol.TType.DOUBLE, (short)88);
  private static final org.apache.thrift.protocol.TField ENABLE_DYNAMIC_PRUNE_SCAN_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_dynamic_prune_scan_range", org.apache.thrift.protocol.TType.BOOL, (short)89);
  private static final org.apache.thrift.protocol.TField LOG_REJECTED_RECORD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("log_rejected_record_num", org.apache.thrift.protocol.TType.I64, (short)90);
  private static final org.apache.thrift.protocol.TField USE_PAGE_CACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("use_page_cache", org.apache.thrift.protocol.TType.BOOL, (short)91);
  private static final org.apache.thrift.protocol.TField ENABLE_CONNECTOR_ADAPTIVE_IO_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_connector_adaptive_io_tasks", org.apache.thrift.protocol.TType.BOOL, (short)92);
  private static final org.apache.thrift.protocol.TField CONNECTOR_IO_TASKS_SLOW_IO_LATENCY_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("connector_io_tasks_slow_io_latency_ms", org.apache.thrift.protocol.TType.I32, (short)93);
  private static final org.apache.thrift.protocol.TField SCAN_USE_QUERY_MEM_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_use_query_mem_ratio", org.apache.thrift.protocol.TType.DOUBLE, (short)94);
  private static final org.apache.thrift.protocol.TField CONNECTOR_SCAN_USE_QUERY_MEM_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("connector_scan_use_query_mem_ratio", org.apache.thrift.protocol.TType.DOUBLE, (short)95);
  private static final org.apache.thrift.protocol.TField SPILLABLE_OPERATOR_MASK_FIELD_DESC = new org.apache.thrift.protocol.TField("spillable_operator_mask", org.apache.thrift.protocol.TType.I64, (short)96);
  private static final org.apache.thrift.protocol.TField LOAD_PROFILE_COLLECT_SECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("load_profile_collect_second", org.apache.thrift.protocol.TType.I64, (short)97);
  private static final org.apache.thrift.protocol.TField GROUP_CONCAT_MAX_LEN_FIELD_DESC = new org.apache.thrift.protocol.TField("group_concat_max_len", org.apache.thrift.protocol.TType.I64, (short)100);
  private static final org.apache.thrift.protocol.TField RUNTIME_PROFILE_REPORT_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_profile_report_interval", org.apache.thrift.protocol.TType.I64, (short)101);
  private static final org.apache.thrift.protocol.TField ENABLE_COLLECT_TABLE_LEVEL_SCAN_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_collect_table_level_scan_stats", org.apache.thrift.protocol.TType.BOOL, (short)102);
  private static final org.apache.thrift.protocol.TField INTERLEAVING_GROUP_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("interleaving_group_size", org.apache.thrift.protocol.TType.I32, (short)103);
  private static final org.apache.thrift.protocol.TField OVERFLOW_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("overflow_mode", org.apache.thrift.protocol.TType.I32, (short)104);
  private static final org.apache.thrift.protocol.TField USE_COLUMN_POOL_FIELD_DESC = new org.apache.thrift.protocol.TField("use_column_pool", org.apache.thrift.protocol.TType.BOOL, (short)105);
  private static final org.apache.thrift.protocol.TField ENABLE_AGG_SPILL_PREAGGREGATION_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_agg_spill_preaggregation", org.apache.thrift.protocol.TType.BOOL, (short)106);
  private static final org.apache.thrift.protocol.TField GLOBAL_RUNTIME_FILTER_BUILD_MAX_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("global_runtime_filter_build_max_size", org.apache.thrift.protocol.TType.I64, (short)107);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_RPC_HTTP_MIN_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_rpc_http_min_size", org.apache.thrift.protocol.TType.I64, (short)108);
  private static final org.apache.thrift.protocol.TField BIG_QUERY_PROFILE_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("big_query_profile_threshold", org.apache.thrift.protocol.TType.I64, (short)109);
  private static final org.apache.thrift.protocol.TField QUERY_QUEUE_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_queue_options", org.apache.thrift.protocol.TType.STRUCT, (short)110);
  private static final org.apache.thrift.protocol.TField ENABLE_FILE_METACACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_file_metacache", org.apache.thrift.protocol.TType.BOOL, (short)111);
  private static final org.apache.thrift.protocol.TField ENABLE_PIPELINE_LEVEL_SHUFFLE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_pipeline_level_shuffle", org.apache.thrift.protocol.TType.BOOL, (short)112);
  private static final org.apache.thrift.protocol.TField ENABLE_HYPERSCAN_VEC_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_hyperscan_vec", org.apache.thrift.protocol.TType.BOOL, (short)113);
  private static final org.apache.thrift.protocol.TField ENABLE_JIT_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_jit", org.apache.thrift.protocol.TType.BOOL, (short)114);
  private static final org.apache.thrift.protocol.TField BIG_QUERY_PROFILE_THRESHOLD_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("big_query_profile_threshold_unit", org.apache.thrift.protocol.TType.I32, (short)115);
  private static final org.apache.thrift.protocol.TField SQL_DIALECT_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_dialect", org.apache.thrift.protocol.TType.STRING, (short)116);
  private static final org.apache.thrift.protocol.TField ENABLE_SPILL_TO_REMOTE_STORAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_spill_to_remote_storage", org.apache.thrift.protocol.TType.BOOL, (short)117);
  private static final org.apache.thrift.protocol.TField SPILL_TO_REMOTE_STORAGE_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_to_remote_storage_options", org.apache.thrift.protocol.TType.STRUCT, (short)118);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TQueryOptionsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TQueryOptionsTupleSchemeFactory();

  public int max_errors; // optional
  public int batch_size; // optional
  public long mem_limit; // optional
  public boolean abort_on_default_limit_exceeded; // optional
  public int query_timeout; // optional
  public boolean enable_profile; // optional
  /**
   * 
   * @see TQueryType
   */
  public @org.apache.thrift.annotation.Nullable TQueryType query_type; // optional
  public long load_mem_limit; // optional
  public int max_scan_key_num; // optional
  public int max_pushdown_conditions_per_column; // optional
  public boolean enable_spill; // optional
  /**
   * 
   * @see io.datafibre.fibre.thrift.TCompressionType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TCompressionType transmission_compression_type; // optional
  public long runtime_join_filter_pushdown_limit; // optional
  public int runtime_filter_wait_timeout_ms; // optional
  public int runtime_filter_send_timeout_ms; // optional
  public int pipeline_dop; // optional
  /**
   * 
   * @see TPipelineProfileLevel
   */
  public @org.apache.thrift.annotation.Nullable TPipelineProfileLevel pipeline_profile_level; // optional
  public int load_dop; // optional
  public long runtime_filter_scan_wait_time_ms; // optional
  public long query_mem_limit; // optional
  public boolean enable_tablet_internal_parallel; // optional
  public int query_delivery_timeout; // optional
  public boolean enable_query_debug_trace; // optional
  /**
   * 
   * @see io.datafibre.fibre.thrift.TCompressionType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TCompressionType load_transmission_compression_type; // optional
  /**
   * 
   * @see TTabletInternalParallelMode
   */
  public @org.apache.thrift.annotation.Nullable TTabletInternalParallelMode tablet_internal_parallel_mode; // optional
  /**
   * 
   * @see TLoadJobType
   */
  public @org.apache.thrift.annotation.Nullable TLoadJobType load_job_type; // optional
  public boolean enable_scan_datacache; // optional
  public boolean enable_pipeline_query_statistic; // optional
  public int transmission_encode_level; // optional
  public boolean enable_populate_datacache; // optional
  public boolean allow_throw_exception; // optional
  public boolean hudi_mor_force_jni_reader; // optional
  public long rpc_http_min_size; // optional
  public int spill_mem_table_size; // optional
  public int spill_mem_table_num; // optional
  public double spill_mem_limit_threshold; // optional
  public long spill_operator_min_bytes; // optional
  public long spill_operator_max_bytes; // optional
  public int spill_encode_level; // optional
  public long spill_revocable_max_bytes; // optional
  public boolean spill_enable_direct_io; // optional
  public double spill_rand_ratio; // optional
  /**
   * 
   * @see TSpillMode
   */
  public @org.apache.thrift.annotation.Nullable TSpillMode spill_mode; // optional
  public int io_tasks_per_scan_operator; // optional
  public int connector_io_tasks_per_scan_operator; // optional
  public double runtime_filter_early_return_selectivity; // optional
  public boolean enable_dynamic_prune_scan_range; // optional
  public long log_rejected_record_num; // optional
  public boolean use_page_cache; // optional
  public boolean enable_connector_adaptive_io_tasks; // optional
  public int connector_io_tasks_slow_io_latency_ms; // optional
  public double scan_use_query_mem_ratio; // optional
  public double connector_scan_use_query_mem_ratio; // optional
  public long spillable_operator_mask; // optional
  public long load_profile_collect_second; // optional
  public long group_concat_max_len; // optional
  public long runtime_profile_report_interval; // optional
  public boolean enable_collect_table_level_scan_stats; // optional
  public int interleaving_group_size; // optional
  /**
   * 
   * @see TOverflowMode
   */
  public @org.apache.thrift.annotation.Nullable TOverflowMode overflow_mode; // optional
  public boolean use_column_pool; // optional
  public boolean enable_agg_spill_preaggregation; // optional
  public long global_runtime_filter_build_max_size; // optional
  public long runtime_filter_rpc_http_min_size; // optional
  public long big_query_profile_threshold; // optional
  public @org.apache.thrift.annotation.Nullable TQueryQueueOptions query_queue_options; // optional
  public boolean enable_file_metacache; // optional
  public boolean enable_pipeline_level_shuffle; // optional
  public boolean enable_hyperscan_vec; // optional
  public boolean enable_jit; // optional
  /**
   * 
   * @see TTimeUnit
   */
  public @org.apache.thrift.annotation.Nullable TTimeUnit big_query_profile_threshold_unit; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sql_dialect; // optional
  public boolean enable_spill_to_remote_storage; // optional
  public @org.apache.thrift.annotation.Nullable TSpillToRemoteStorageOptions spill_to_remote_storage_options; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAX_ERRORS((short)2, "max_errors"),
    BATCH_SIZE((short)4, "batch_size"),
    MEM_LIMIT((short)12, "mem_limit"),
    ABORT_ON_DEFAULT_LIMIT_EXCEEDED((short)13, "abort_on_default_limit_exceeded"),
    QUERY_TIMEOUT((short)14, "query_timeout"),
    ENABLE_PROFILE((short)15, "enable_profile"),
    /**
     * 
     * @see TQueryType
     */
    QUERY_TYPE((short)18, "query_type"),
    LOAD_MEM_LIMIT((short)28, "load_mem_limit"),
    MAX_SCAN_KEY_NUM((short)29, "max_scan_key_num"),
    MAX_PUSHDOWN_CONDITIONS_PER_COLUMN((short)30, "max_pushdown_conditions_per_column"),
    ENABLE_SPILL((short)31, "enable_spill"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TCompressionType
     */
    TRANSMISSION_COMPRESSION_TYPE((short)50, "transmission_compression_type"),
    RUNTIME_JOIN_FILTER_PUSHDOWN_LIMIT((short)51, "runtime_join_filter_pushdown_limit"),
    RUNTIME_FILTER_WAIT_TIMEOUT_MS((short)52, "runtime_filter_wait_timeout_ms"),
    RUNTIME_FILTER_SEND_TIMEOUT_MS((short)53, "runtime_filter_send_timeout_ms"),
    PIPELINE_DOP((short)54, "pipeline_dop"),
    /**
     * 
     * @see TPipelineProfileLevel
     */
    PIPELINE_PROFILE_LEVEL((short)55, "pipeline_profile_level"),
    LOAD_DOP((short)56, "load_dop"),
    RUNTIME_FILTER_SCAN_WAIT_TIME_MS((short)57, "runtime_filter_scan_wait_time_ms"),
    QUERY_MEM_LIMIT((short)58, "query_mem_limit"),
    ENABLE_TABLET_INTERNAL_PARALLEL((short)59, "enable_tablet_internal_parallel"),
    QUERY_DELIVERY_TIMEOUT((short)60, "query_delivery_timeout"),
    ENABLE_QUERY_DEBUG_TRACE((short)61, "enable_query_debug_trace"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TCompressionType
     */
    LOAD_TRANSMISSION_COMPRESSION_TYPE((short)62, "load_transmission_compression_type"),
    /**
     * 
     * @see TTabletInternalParallelMode
     */
    TABLET_INTERNAL_PARALLEL_MODE((short)63, "tablet_internal_parallel_mode"),
    /**
     * 
     * @see TLoadJobType
     */
    LOAD_JOB_TYPE((short)64, "load_job_type"),
    ENABLE_SCAN_DATACACHE((short)66, "enable_scan_datacache"),
    ENABLE_PIPELINE_QUERY_STATISTIC((short)67, "enable_pipeline_query_statistic"),
    TRANSMISSION_ENCODE_LEVEL((short)68, "transmission_encode_level"),
    ENABLE_POPULATE_DATACACHE((short)69, "enable_populate_datacache"),
    ALLOW_THROW_EXCEPTION((short)70, "allow_throw_exception"),
    HUDI_MOR_FORCE_JNI_READER((short)71, "hudi_mor_force_jni_reader"),
    RPC_HTTP_MIN_SIZE((short)72, "rpc_http_min_size"),
    SPILL_MEM_TABLE_SIZE((short)73, "spill_mem_table_size"),
    SPILL_MEM_TABLE_NUM((short)74, "spill_mem_table_num"),
    SPILL_MEM_LIMIT_THRESHOLD((short)75, "spill_mem_limit_threshold"),
    SPILL_OPERATOR_MIN_BYTES((short)76, "spill_operator_min_bytes"),
    SPILL_OPERATOR_MAX_BYTES((short)77, "spill_operator_max_bytes"),
    SPILL_ENCODE_LEVEL((short)78, "spill_encode_level"),
    SPILL_REVOCABLE_MAX_BYTES((short)79, "spill_revocable_max_bytes"),
    SPILL_ENABLE_DIRECT_IO((short)80, "spill_enable_direct_io"),
    SPILL_RAND_RATIO((short)81, "spill_rand_ratio"),
    /**
     * 
     * @see TSpillMode
     */
    SPILL_MODE((short)85, "spill_mode"),
    IO_TASKS_PER_SCAN_OPERATOR((short)86, "io_tasks_per_scan_operator"),
    CONNECTOR_IO_TASKS_PER_SCAN_OPERATOR((short)87, "connector_io_tasks_per_scan_operator"),
    RUNTIME_FILTER_EARLY_RETURN_SELECTIVITY((short)88, "runtime_filter_early_return_selectivity"),
    ENABLE_DYNAMIC_PRUNE_SCAN_RANGE((short)89, "enable_dynamic_prune_scan_range"),
    LOG_REJECTED_RECORD_NUM((short)90, "log_rejected_record_num"),
    USE_PAGE_CACHE((short)91, "use_page_cache"),
    ENABLE_CONNECTOR_ADAPTIVE_IO_TASKS((short)92, "enable_connector_adaptive_io_tasks"),
    CONNECTOR_IO_TASKS_SLOW_IO_LATENCY_MS((short)93, "connector_io_tasks_slow_io_latency_ms"),
    SCAN_USE_QUERY_MEM_RATIO((short)94, "scan_use_query_mem_ratio"),
    CONNECTOR_SCAN_USE_QUERY_MEM_RATIO((short)95, "connector_scan_use_query_mem_ratio"),
    SPILLABLE_OPERATOR_MASK((short)96, "spillable_operator_mask"),
    LOAD_PROFILE_COLLECT_SECOND((short)97, "load_profile_collect_second"),
    GROUP_CONCAT_MAX_LEN((short)100, "group_concat_max_len"),
    RUNTIME_PROFILE_REPORT_INTERVAL((short)101, "runtime_profile_report_interval"),
    ENABLE_COLLECT_TABLE_LEVEL_SCAN_STATS((short)102, "enable_collect_table_level_scan_stats"),
    INTERLEAVING_GROUP_SIZE((short)103, "interleaving_group_size"),
    /**
     * 
     * @see TOverflowMode
     */
    OVERFLOW_MODE((short)104, "overflow_mode"),
    USE_COLUMN_POOL((short)105, "use_column_pool"),
    ENABLE_AGG_SPILL_PREAGGREGATION((short)106, "enable_agg_spill_preaggregation"),
    GLOBAL_RUNTIME_FILTER_BUILD_MAX_SIZE((short)107, "global_runtime_filter_build_max_size"),
    RUNTIME_FILTER_RPC_HTTP_MIN_SIZE((short)108, "runtime_filter_rpc_http_min_size"),
    BIG_QUERY_PROFILE_THRESHOLD((short)109, "big_query_profile_threshold"),
    QUERY_QUEUE_OPTIONS((short)110, "query_queue_options"),
    ENABLE_FILE_METACACHE((short)111, "enable_file_metacache"),
    ENABLE_PIPELINE_LEVEL_SHUFFLE((short)112, "enable_pipeline_level_shuffle"),
    ENABLE_HYPERSCAN_VEC((short)113, "enable_hyperscan_vec"),
    ENABLE_JIT((short)114, "enable_jit"),
    /**
     * 
     * @see TTimeUnit
     */
    BIG_QUERY_PROFILE_THRESHOLD_UNIT((short)115, "big_query_profile_threshold_unit"),
    SQL_DIALECT((short)116, "sql_dialect"),
    ENABLE_SPILL_TO_REMOTE_STORAGE((short)117, "enable_spill_to_remote_storage"),
    SPILL_TO_REMOTE_STORAGE_OPTIONS((short)118, "spill_to_remote_storage_options");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // MAX_ERRORS
          return MAX_ERRORS;
        case 4: // BATCH_SIZE
          return BATCH_SIZE;
        case 12: // MEM_LIMIT
          return MEM_LIMIT;
        case 13: // ABORT_ON_DEFAULT_LIMIT_EXCEEDED
          return ABORT_ON_DEFAULT_LIMIT_EXCEEDED;
        case 14: // QUERY_TIMEOUT
          return QUERY_TIMEOUT;
        case 15: // ENABLE_PROFILE
          return ENABLE_PROFILE;
        case 18: // QUERY_TYPE
          return QUERY_TYPE;
        case 28: // LOAD_MEM_LIMIT
          return LOAD_MEM_LIMIT;
        case 29: // MAX_SCAN_KEY_NUM
          return MAX_SCAN_KEY_NUM;
        case 30: // MAX_PUSHDOWN_CONDITIONS_PER_COLUMN
          return MAX_PUSHDOWN_CONDITIONS_PER_COLUMN;
        case 31: // ENABLE_SPILL
          return ENABLE_SPILL;
        case 50: // TRANSMISSION_COMPRESSION_TYPE
          return TRANSMISSION_COMPRESSION_TYPE;
        case 51: // RUNTIME_JOIN_FILTER_PUSHDOWN_LIMIT
          return RUNTIME_JOIN_FILTER_PUSHDOWN_LIMIT;
        case 52: // RUNTIME_FILTER_WAIT_TIMEOUT_MS
          return RUNTIME_FILTER_WAIT_TIMEOUT_MS;
        case 53: // RUNTIME_FILTER_SEND_TIMEOUT_MS
          return RUNTIME_FILTER_SEND_TIMEOUT_MS;
        case 54: // PIPELINE_DOP
          return PIPELINE_DOP;
        case 55: // PIPELINE_PROFILE_LEVEL
          return PIPELINE_PROFILE_LEVEL;
        case 56: // LOAD_DOP
          return LOAD_DOP;
        case 57: // RUNTIME_FILTER_SCAN_WAIT_TIME_MS
          return RUNTIME_FILTER_SCAN_WAIT_TIME_MS;
        case 58: // QUERY_MEM_LIMIT
          return QUERY_MEM_LIMIT;
        case 59: // ENABLE_TABLET_INTERNAL_PARALLEL
          return ENABLE_TABLET_INTERNAL_PARALLEL;
        case 60: // QUERY_DELIVERY_TIMEOUT
          return QUERY_DELIVERY_TIMEOUT;
        case 61: // ENABLE_QUERY_DEBUG_TRACE
          return ENABLE_QUERY_DEBUG_TRACE;
        case 62: // LOAD_TRANSMISSION_COMPRESSION_TYPE
          return LOAD_TRANSMISSION_COMPRESSION_TYPE;
        case 63: // TABLET_INTERNAL_PARALLEL_MODE
          return TABLET_INTERNAL_PARALLEL_MODE;
        case 64: // LOAD_JOB_TYPE
          return LOAD_JOB_TYPE;
        case 66: // ENABLE_SCAN_DATACACHE
          return ENABLE_SCAN_DATACACHE;
        case 67: // ENABLE_PIPELINE_QUERY_STATISTIC
          return ENABLE_PIPELINE_QUERY_STATISTIC;
        case 68: // TRANSMISSION_ENCODE_LEVEL
          return TRANSMISSION_ENCODE_LEVEL;
        case 69: // ENABLE_POPULATE_DATACACHE
          return ENABLE_POPULATE_DATACACHE;
        case 70: // ALLOW_THROW_EXCEPTION
          return ALLOW_THROW_EXCEPTION;
        case 71: // HUDI_MOR_FORCE_JNI_READER
          return HUDI_MOR_FORCE_JNI_READER;
        case 72: // RPC_HTTP_MIN_SIZE
          return RPC_HTTP_MIN_SIZE;
        case 73: // SPILL_MEM_TABLE_SIZE
          return SPILL_MEM_TABLE_SIZE;
        case 74: // SPILL_MEM_TABLE_NUM
          return SPILL_MEM_TABLE_NUM;
        case 75: // SPILL_MEM_LIMIT_THRESHOLD
          return SPILL_MEM_LIMIT_THRESHOLD;
        case 76: // SPILL_OPERATOR_MIN_BYTES
          return SPILL_OPERATOR_MIN_BYTES;
        case 77: // SPILL_OPERATOR_MAX_BYTES
          return SPILL_OPERATOR_MAX_BYTES;
        case 78: // SPILL_ENCODE_LEVEL
          return SPILL_ENCODE_LEVEL;
        case 79: // SPILL_REVOCABLE_MAX_BYTES
          return SPILL_REVOCABLE_MAX_BYTES;
        case 80: // SPILL_ENABLE_DIRECT_IO
          return SPILL_ENABLE_DIRECT_IO;
        case 81: // SPILL_RAND_RATIO
          return SPILL_RAND_RATIO;
        case 85: // SPILL_MODE
          return SPILL_MODE;
        case 86: // IO_TASKS_PER_SCAN_OPERATOR
          return IO_TASKS_PER_SCAN_OPERATOR;
        case 87: // CONNECTOR_IO_TASKS_PER_SCAN_OPERATOR
          return CONNECTOR_IO_TASKS_PER_SCAN_OPERATOR;
        case 88: // RUNTIME_FILTER_EARLY_RETURN_SELECTIVITY
          return RUNTIME_FILTER_EARLY_RETURN_SELECTIVITY;
        case 89: // ENABLE_DYNAMIC_PRUNE_SCAN_RANGE
          return ENABLE_DYNAMIC_PRUNE_SCAN_RANGE;
        case 90: // LOG_REJECTED_RECORD_NUM
          return LOG_REJECTED_RECORD_NUM;
        case 91: // USE_PAGE_CACHE
          return USE_PAGE_CACHE;
        case 92: // ENABLE_CONNECTOR_ADAPTIVE_IO_TASKS
          return ENABLE_CONNECTOR_ADAPTIVE_IO_TASKS;
        case 93: // CONNECTOR_IO_TASKS_SLOW_IO_LATENCY_MS
          return CONNECTOR_IO_TASKS_SLOW_IO_LATENCY_MS;
        case 94: // SCAN_USE_QUERY_MEM_RATIO
          return SCAN_USE_QUERY_MEM_RATIO;
        case 95: // CONNECTOR_SCAN_USE_QUERY_MEM_RATIO
          return CONNECTOR_SCAN_USE_QUERY_MEM_RATIO;
        case 96: // SPILLABLE_OPERATOR_MASK
          return SPILLABLE_OPERATOR_MASK;
        case 97: // LOAD_PROFILE_COLLECT_SECOND
          return LOAD_PROFILE_COLLECT_SECOND;
        case 100: // GROUP_CONCAT_MAX_LEN
          return GROUP_CONCAT_MAX_LEN;
        case 101: // RUNTIME_PROFILE_REPORT_INTERVAL
          return RUNTIME_PROFILE_REPORT_INTERVAL;
        case 102: // ENABLE_COLLECT_TABLE_LEVEL_SCAN_STATS
          return ENABLE_COLLECT_TABLE_LEVEL_SCAN_STATS;
        case 103: // INTERLEAVING_GROUP_SIZE
          return INTERLEAVING_GROUP_SIZE;
        case 104: // OVERFLOW_MODE
          return OVERFLOW_MODE;
        case 105: // USE_COLUMN_POOL
          return USE_COLUMN_POOL;
        case 106: // ENABLE_AGG_SPILL_PREAGGREGATION
          return ENABLE_AGG_SPILL_PREAGGREGATION;
        case 107: // GLOBAL_RUNTIME_FILTER_BUILD_MAX_SIZE
          return GLOBAL_RUNTIME_FILTER_BUILD_MAX_SIZE;
        case 108: // RUNTIME_FILTER_RPC_HTTP_MIN_SIZE
          return RUNTIME_FILTER_RPC_HTTP_MIN_SIZE;
        case 109: // BIG_QUERY_PROFILE_THRESHOLD
          return BIG_QUERY_PROFILE_THRESHOLD;
        case 110: // QUERY_QUEUE_OPTIONS
          return QUERY_QUEUE_OPTIONS;
        case 111: // ENABLE_FILE_METACACHE
          return ENABLE_FILE_METACACHE;
        case 112: // ENABLE_PIPELINE_LEVEL_SHUFFLE
          return ENABLE_PIPELINE_LEVEL_SHUFFLE;
        case 113: // ENABLE_HYPERSCAN_VEC
          return ENABLE_HYPERSCAN_VEC;
        case 114: // ENABLE_JIT
          return ENABLE_JIT;
        case 115: // BIG_QUERY_PROFILE_THRESHOLD_UNIT
          return BIG_QUERY_PROFILE_THRESHOLD_UNIT;
        case 116: // SQL_DIALECT
          return SQL_DIALECT;
        case 117: // ENABLE_SPILL_TO_REMOTE_STORAGE
          return ENABLE_SPILL_TO_REMOTE_STORAGE;
        case 118: // SPILL_TO_REMOTE_STORAGE_OPTIONS
          return SPILL_TO_REMOTE_STORAGE_OPTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAX_ERRORS_ISSET_ID = 0;
  private static final int __BATCH_SIZE_ISSET_ID = 1;
  private static final int __MEM_LIMIT_ISSET_ID = 2;
  private static final int __ABORT_ON_DEFAULT_LIMIT_EXCEEDED_ISSET_ID = 3;
  private static final int __QUERY_TIMEOUT_ISSET_ID = 4;
  private static final int __ENABLE_PROFILE_ISSET_ID = 5;
  private static final int __LOAD_MEM_LIMIT_ISSET_ID = 6;
  private static final int __MAX_SCAN_KEY_NUM_ISSET_ID = 7;
  private static final int __MAX_PUSHDOWN_CONDITIONS_PER_COLUMN_ISSET_ID = 8;
  private static final int __ENABLE_SPILL_ISSET_ID = 9;
  private static final int __RUNTIME_JOIN_FILTER_PUSHDOWN_LIMIT_ISSET_ID = 10;
  private static final int __RUNTIME_FILTER_WAIT_TIMEOUT_MS_ISSET_ID = 11;
  private static final int __RUNTIME_FILTER_SEND_TIMEOUT_MS_ISSET_ID = 12;
  private static final int __PIPELINE_DOP_ISSET_ID = 13;
  private static final int __LOAD_DOP_ISSET_ID = 14;
  private static final int __RUNTIME_FILTER_SCAN_WAIT_TIME_MS_ISSET_ID = 15;
  private static final int __QUERY_MEM_LIMIT_ISSET_ID = 16;
  private static final int __ENABLE_TABLET_INTERNAL_PARALLEL_ISSET_ID = 17;
  private static final int __QUERY_DELIVERY_TIMEOUT_ISSET_ID = 18;
  private static final int __ENABLE_QUERY_DEBUG_TRACE_ISSET_ID = 19;
  private static final int __ENABLE_SCAN_DATACACHE_ISSET_ID = 20;
  private static final int __ENABLE_PIPELINE_QUERY_STATISTIC_ISSET_ID = 21;
  private static final int __TRANSMISSION_ENCODE_LEVEL_ISSET_ID = 22;
  private static final int __ENABLE_POPULATE_DATACACHE_ISSET_ID = 23;
  private static final int __ALLOW_THROW_EXCEPTION_ISSET_ID = 24;
  private static final int __HUDI_MOR_FORCE_JNI_READER_ISSET_ID = 25;
  private static final int __RPC_HTTP_MIN_SIZE_ISSET_ID = 26;
  private static final int __SPILL_MEM_TABLE_SIZE_ISSET_ID = 27;
  private static final int __SPILL_MEM_TABLE_NUM_ISSET_ID = 28;
  private static final int __SPILL_MEM_LIMIT_THRESHOLD_ISSET_ID = 29;
  private static final int __SPILL_OPERATOR_MIN_BYTES_ISSET_ID = 30;
  private static final int __SPILL_OPERATOR_MAX_BYTES_ISSET_ID = 31;
  private static final int __SPILL_ENCODE_LEVEL_ISSET_ID = 32;
  private static final int __SPILL_REVOCABLE_MAX_BYTES_ISSET_ID = 33;
  private static final int __SPILL_ENABLE_DIRECT_IO_ISSET_ID = 34;
  private static final int __SPILL_RAND_RATIO_ISSET_ID = 35;
  private static final int __IO_TASKS_PER_SCAN_OPERATOR_ISSET_ID = 36;
  private static final int __CONNECTOR_IO_TASKS_PER_SCAN_OPERATOR_ISSET_ID = 37;
  private static final int __RUNTIME_FILTER_EARLY_RETURN_SELECTIVITY_ISSET_ID = 38;
  private static final int __ENABLE_DYNAMIC_PRUNE_SCAN_RANGE_ISSET_ID = 39;
  private static final int __LOG_REJECTED_RECORD_NUM_ISSET_ID = 40;
  private static final int __USE_PAGE_CACHE_ISSET_ID = 41;
  private static final int __ENABLE_CONNECTOR_ADAPTIVE_IO_TASKS_ISSET_ID = 42;
  private static final int __CONNECTOR_IO_TASKS_SLOW_IO_LATENCY_MS_ISSET_ID = 43;
  private static final int __SCAN_USE_QUERY_MEM_RATIO_ISSET_ID = 44;
  private static final int __CONNECTOR_SCAN_USE_QUERY_MEM_RATIO_ISSET_ID = 45;
  private static final int __SPILLABLE_OPERATOR_MASK_ISSET_ID = 46;
  private static final int __LOAD_PROFILE_COLLECT_SECOND_ISSET_ID = 47;
  private static final int __GROUP_CONCAT_MAX_LEN_ISSET_ID = 48;
  private static final int __RUNTIME_PROFILE_REPORT_INTERVAL_ISSET_ID = 49;
  private static final int __ENABLE_COLLECT_TABLE_LEVEL_SCAN_STATS_ISSET_ID = 50;
  private static final int __INTERLEAVING_GROUP_SIZE_ISSET_ID = 51;
  private static final int __USE_COLUMN_POOL_ISSET_ID = 52;
  private static final int __ENABLE_AGG_SPILL_PREAGGREGATION_ISSET_ID = 53;
  private static final int __GLOBAL_RUNTIME_FILTER_BUILD_MAX_SIZE_ISSET_ID = 54;
  private static final int __RUNTIME_FILTER_RPC_HTTP_MIN_SIZE_ISSET_ID = 55;
  private static final int __BIG_QUERY_PROFILE_THRESHOLD_ISSET_ID = 56;
  private static final int __ENABLE_FILE_METACACHE_ISSET_ID = 57;
  private static final int __ENABLE_PIPELINE_LEVEL_SHUFFLE_ISSET_ID = 58;
  private static final int __ENABLE_HYPERSCAN_VEC_ISSET_ID = 59;
  private static final int __ENABLE_JIT_ISSET_ID = 60;
  private static final int __ENABLE_SPILL_TO_REMOTE_STORAGE_ISSET_ID = 61;
  private long __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MAX_ERRORS,_Fields.BATCH_SIZE,_Fields.MEM_LIMIT,_Fields.ABORT_ON_DEFAULT_LIMIT_EXCEEDED,_Fields.QUERY_TIMEOUT,_Fields.ENABLE_PROFILE,_Fields.QUERY_TYPE,_Fields.LOAD_MEM_LIMIT,_Fields.MAX_SCAN_KEY_NUM,_Fields.MAX_PUSHDOWN_CONDITIONS_PER_COLUMN,_Fields.ENABLE_SPILL,_Fields.TRANSMISSION_COMPRESSION_TYPE,_Fields.RUNTIME_JOIN_FILTER_PUSHDOWN_LIMIT,_Fields.RUNTIME_FILTER_WAIT_TIMEOUT_MS,_Fields.RUNTIME_FILTER_SEND_TIMEOUT_MS,_Fields.PIPELINE_DOP,_Fields.PIPELINE_PROFILE_LEVEL,_Fields.LOAD_DOP,_Fields.RUNTIME_FILTER_SCAN_WAIT_TIME_MS,_Fields.QUERY_MEM_LIMIT,_Fields.ENABLE_TABLET_INTERNAL_PARALLEL,_Fields.QUERY_DELIVERY_TIMEOUT,_Fields.ENABLE_QUERY_DEBUG_TRACE,_Fields.LOAD_TRANSMISSION_COMPRESSION_TYPE,_Fields.TABLET_INTERNAL_PARALLEL_MODE,_Fields.LOAD_JOB_TYPE,_Fields.ENABLE_SCAN_DATACACHE,_Fields.ENABLE_PIPELINE_QUERY_STATISTIC,_Fields.TRANSMISSION_ENCODE_LEVEL,_Fields.ENABLE_POPULATE_DATACACHE,_Fields.ALLOW_THROW_EXCEPTION,_Fields.HUDI_MOR_FORCE_JNI_READER,_Fields.RPC_HTTP_MIN_SIZE,_Fields.SPILL_MEM_TABLE_SIZE,_Fields.SPILL_MEM_TABLE_NUM,_Fields.SPILL_MEM_LIMIT_THRESHOLD,_Fields.SPILL_OPERATOR_MIN_BYTES,_Fields.SPILL_OPERATOR_MAX_BYTES,_Fields.SPILL_ENCODE_LEVEL,_Fields.SPILL_REVOCABLE_MAX_BYTES,_Fields.SPILL_ENABLE_DIRECT_IO,_Fields.SPILL_RAND_RATIO,_Fields.SPILL_MODE,_Fields.IO_TASKS_PER_SCAN_OPERATOR,_Fields.CONNECTOR_IO_TASKS_PER_SCAN_OPERATOR,_Fields.RUNTIME_FILTER_EARLY_RETURN_SELECTIVITY,_Fields.ENABLE_DYNAMIC_PRUNE_SCAN_RANGE,_Fields.LOG_REJECTED_RECORD_NUM,_Fields.USE_PAGE_CACHE,_Fields.ENABLE_CONNECTOR_ADAPTIVE_IO_TASKS,_Fields.CONNECTOR_IO_TASKS_SLOW_IO_LATENCY_MS,_Fields.SCAN_USE_QUERY_MEM_RATIO,_Fields.CONNECTOR_SCAN_USE_QUERY_MEM_RATIO,_Fields.SPILLABLE_OPERATOR_MASK,_Fields.LOAD_PROFILE_COLLECT_SECOND,_Fields.GROUP_CONCAT_MAX_LEN,_Fields.RUNTIME_PROFILE_REPORT_INTERVAL,_Fields.ENABLE_COLLECT_TABLE_LEVEL_SCAN_STATS,_Fields.INTERLEAVING_GROUP_SIZE,_Fields.OVERFLOW_MODE,_Fields.USE_COLUMN_POOL,_Fields.ENABLE_AGG_SPILL_PREAGGREGATION,_Fields.GLOBAL_RUNTIME_FILTER_BUILD_MAX_SIZE,_Fields.RUNTIME_FILTER_RPC_HTTP_MIN_SIZE,_Fields.BIG_QUERY_PROFILE_THRESHOLD,_Fields.QUERY_QUEUE_OPTIONS,_Fields.ENABLE_FILE_METACACHE,_Fields.ENABLE_PIPELINE_LEVEL_SHUFFLE,_Fields.ENABLE_HYPERSCAN_VEC,_Fields.ENABLE_JIT,_Fields.BIG_QUERY_PROFILE_THRESHOLD_UNIT,_Fields.SQL_DIALECT,_Fields.ENABLE_SPILL_TO_REMOTE_STORAGE,_Fields.SPILL_TO_REMOTE_STORAGE_OPTIONS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAX_ERRORS, new org.apache.thrift.meta_data.FieldMetaData("max_errors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("batch_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("mem_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ABORT_ON_DEFAULT_LIMIT_EXCEEDED, new org.apache.thrift.meta_data.FieldMetaData("abort_on_default_limit_exceeded", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.QUERY_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("query_timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLE_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("enable_profile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.QUERY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("query_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TQueryType.class)));
    tmpMap.put(_Fields.LOAD_MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("load_mem_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_SCAN_KEY_NUM, new org.apache.thrift.meta_data.FieldMetaData("max_scan_key_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_PUSHDOWN_CONDITIONS_PER_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("max_pushdown_conditions_per_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLE_SPILL, new org.apache.thrift.meta_data.FieldMetaData("enable_spill", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TRANSMISSION_COMPRESSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transmission_compression_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TCompressionType.class)));
    tmpMap.put(_Fields.RUNTIME_JOIN_FILTER_PUSHDOWN_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("runtime_join_filter_pushdown_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUNTIME_FILTER_WAIT_TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_wait_timeout_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RUNTIME_FILTER_SEND_TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_send_timeout_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PIPELINE_DOP, new org.apache.thrift.meta_data.FieldMetaData("pipeline_dop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PIPELINE_PROFILE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("pipeline_profile_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPipelineProfileLevel.class)));
    tmpMap.put(_Fields.LOAD_DOP, new org.apache.thrift.meta_data.FieldMetaData("load_dop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RUNTIME_FILTER_SCAN_WAIT_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_scan_wait_time_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("query_mem_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLE_TABLET_INTERNAL_PARALLEL, new org.apache.thrift.meta_data.FieldMetaData("enable_tablet_internal_parallel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.QUERY_DELIVERY_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("query_delivery_timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLE_QUERY_DEBUG_TRACE, new org.apache.thrift.meta_data.FieldMetaData("enable_query_debug_trace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOAD_TRANSMISSION_COMPRESSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("load_transmission_compression_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TCompressionType.class)));
    tmpMap.put(_Fields.TABLET_INTERNAL_PARALLEL_MODE, new org.apache.thrift.meta_data.FieldMetaData("tablet_internal_parallel_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTabletInternalParallelMode.class)));
    tmpMap.put(_Fields.LOAD_JOB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("load_job_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TLoadJobType.class)));
    tmpMap.put(_Fields.ENABLE_SCAN_DATACACHE, new org.apache.thrift.meta_data.FieldMetaData("enable_scan_datacache", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_PIPELINE_QUERY_STATISTIC, new org.apache.thrift.meta_data.FieldMetaData("enable_pipeline_query_statistic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TRANSMISSION_ENCODE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("transmission_encode_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLE_POPULATE_DATACACHE, new org.apache.thrift.meta_data.FieldMetaData("enable_populate_datacache", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ALLOW_THROW_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("allow_throw_exception", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HUDI_MOR_FORCE_JNI_READER, new org.apache.thrift.meta_data.FieldMetaData("hudi_mor_force_jni_reader", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RPC_HTTP_MIN_SIZE, new org.apache.thrift.meta_data.FieldMetaData("rpc_http_min_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPILL_MEM_TABLE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("spill_mem_table_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPILL_MEM_TABLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("spill_mem_table_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPILL_MEM_LIMIT_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("spill_mem_limit_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPILL_OPERATOR_MIN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("spill_operator_min_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPILL_OPERATOR_MAX_BYTES, new org.apache.thrift.meta_data.FieldMetaData("spill_operator_max_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPILL_ENCODE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("spill_encode_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPILL_REVOCABLE_MAX_BYTES, new org.apache.thrift.meta_data.FieldMetaData("spill_revocable_max_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPILL_ENABLE_DIRECT_IO, new org.apache.thrift.meta_data.FieldMetaData("spill_enable_direct_io", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SPILL_RAND_RATIO, new org.apache.thrift.meta_data.FieldMetaData("spill_rand_ratio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPILL_MODE, new org.apache.thrift.meta_data.FieldMetaData("spill_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TSpillMode.class)));
    tmpMap.put(_Fields.IO_TASKS_PER_SCAN_OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("io_tasks_per_scan_operator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONNECTOR_IO_TASKS_PER_SCAN_OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("connector_io_tasks_per_scan_operator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RUNTIME_FILTER_EARLY_RETURN_SELECTIVITY, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_early_return_selectivity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ENABLE_DYNAMIC_PRUNE_SCAN_RANGE, new org.apache.thrift.meta_data.FieldMetaData("enable_dynamic_prune_scan_range", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOG_REJECTED_RECORD_NUM, new org.apache.thrift.meta_data.FieldMetaData("log_rejected_record_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USE_PAGE_CACHE, new org.apache.thrift.meta_data.FieldMetaData("use_page_cache", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_CONNECTOR_ADAPTIVE_IO_TASKS, new org.apache.thrift.meta_data.FieldMetaData("enable_connector_adaptive_io_tasks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CONNECTOR_IO_TASKS_SLOW_IO_LATENCY_MS, new org.apache.thrift.meta_data.FieldMetaData("connector_io_tasks_slow_io_latency_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCAN_USE_QUERY_MEM_RATIO, new org.apache.thrift.meta_data.FieldMetaData("scan_use_query_mem_ratio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONNECTOR_SCAN_USE_QUERY_MEM_RATIO, new org.apache.thrift.meta_data.FieldMetaData("connector_scan_use_query_mem_ratio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPILLABLE_OPERATOR_MASK, new org.apache.thrift.meta_data.FieldMetaData("spillable_operator_mask", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOAD_PROFILE_COLLECT_SECOND, new org.apache.thrift.meta_data.FieldMetaData("load_profile_collect_second", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GROUP_CONCAT_MAX_LEN, new org.apache.thrift.meta_data.FieldMetaData("group_concat_max_len", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUNTIME_PROFILE_REPORT_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("runtime_profile_report_interval", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLE_COLLECT_TABLE_LEVEL_SCAN_STATS, new org.apache.thrift.meta_data.FieldMetaData("enable_collect_table_level_scan_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INTERLEAVING_GROUP_SIZE, new org.apache.thrift.meta_data.FieldMetaData("interleaving_group_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERFLOW_MODE, new org.apache.thrift.meta_data.FieldMetaData("overflow_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TOverflowMode.class)));
    tmpMap.put(_Fields.USE_COLUMN_POOL, new org.apache.thrift.meta_data.FieldMetaData("use_column_pool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_AGG_SPILL_PREAGGREGATION, new org.apache.thrift.meta_data.FieldMetaData("enable_agg_spill_preaggregation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.GLOBAL_RUNTIME_FILTER_BUILD_MAX_SIZE, new org.apache.thrift.meta_data.FieldMetaData("global_runtime_filter_build_max_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUNTIME_FILTER_RPC_HTTP_MIN_SIZE, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_rpc_http_min_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BIG_QUERY_PROFILE_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("big_query_profile_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_QUEUE_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("query_queue_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryQueueOptions.class)));
    tmpMap.put(_Fields.ENABLE_FILE_METACACHE, new org.apache.thrift.meta_data.FieldMetaData("enable_file_metacache", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_PIPELINE_LEVEL_SHUFFLE, new org.apache.thrift.meta_data.FieldMetaData("enable_pipeline_level_shuffle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_HYPERSCAN_VEC, new org.apache.thrift.meta_data.FieldMetaData("enable_hyperscan_vec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_JIT, new org.apache.thrift.meta_data.FieldMetaData("enable_jit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BIG_QUERY_PROFILE_THRESHOLD_UNIT, new org.apache.thrift.meta_data.FieldMetaData("big_query_profile_threshold_unit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTimeUnit.class)));
    tmpMap.put(_Fields.SQL_DIALECT, new org.apache.thrift.meta_data.FieldMetaData("sql_dialect", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLE_SPILL_TO_REMOTE_STORAGE, new org.apache.thrift.meta_data.FieldMetaData("enable_spill_to_remote_storage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SPILL_TO_REMOTE_STORAGE_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("spill_to_remote_storage_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSpillToRemoteStorageOptions.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueryOptions.class, metaDataMap);
  }

  public TQueryOptions() {
    this.max_errors = 0;

    this.batch_size = 0;

    this.mem_limit = 2147483648L;

    this.abort_on_default_limit_exceeded = false;

    this.query_timeout = 3600;

    this.enable_profile = false;

    this.query_type = io.datafibre.fibre.thrift.TQueryType.SELECT;

    this.load_mem_limit = 0L;

    this.enable_spill = false;

    this.runtime_filter_wait_timeout_ms = 200;

    this.runtime_filter_send_timeout_ms = 400;

    this.enable_pipeline_query_statistic = false;

    this.allow_throw_exception = false;

    this.io_tasks_per_scan_operator = 4;

    this.connector_io_tasks_per_scan_operator = 16;

    this.runtime_filter_early_return_selectivity = 0.0500000000000000;

    this.enable_dynamic_prune_scan_range = true;

    this.log_rejected_record_num = 0L;

    this.enable_connector_adaptive_io_tasks = true;

    this.connector_io_tasks_slow_io_latency_ms = 50;

    this.scan_use_query_mem_ratio = 0.2500000000000000;

    this.connector_scan_use_query_mem_ratio = 0.3000000000000000;

    this.group_concat_max_len = 1024L;

    this.runtime_profile_report_interval = 30L;

    this.overflow_mode = io.datafibre.fibre.thrift.TOverflowMode.OUTPUT_NULL;

    this.use_column_pool = true;

    this.big_query_profile_threshold = 0L;

    this.enable_jit = false;

    this.big_query_profile_threshold_unit = io.datafibre.fibre.thrift.TTimeUnit.SECOND;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryOptions(TQueryOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.max_errors = other.max_errors;
    this.batch_size = other.batch_size;
    this.mem_limit = other.mem_limit;
    this.abort_on_default_limit_exceeded = other.abort_on_default_limit_exceeded;
    this.query_timeout = other.query_timeout;
    this.enable_profile = other.enable_profile;
    if (other.isSetQuery_type()) {
      this.query_type = other.query_type;
    }
    this.load_mem_limit = other.load_mem_limit;
    this.max_scan_key_num = other.max_scan_key_num;
    this.max_pushdown_conditions_per_column = other.max_pushdown_conditions_per_column;
    this.enable_spill = other.enable_spill;
    if (other.isSetTransmission_compression_type()) {
      this.transmission_compression_type = other.transmission_compression_type;
    }
    this.runtime_join_filter_pushdown_limit = other.runtime_join_filter_pushdown_limit;
    this.runtime_filter_wait_timeout_ms = other.runtime_filter_wait_timeout_ms;
    this.runtime_filter_send_timeout_ms = other.runtime_filter_send_timeout_ms;
    this.pipeline_dop = other.pipeline_dop;
    if (other.isSetPipeline_profile_level()) {
      this.pipeline_profile_level = other.pipeline_profile_level;
    }
    this.load_dop = other.load_dop;
    this.runtime_filter_scan_wait_time_ms = other.runtime_filter_scan_wait_time_ms;
    this.query_mem_limit = other.query_mem_limit;
    this.enable_tablet_internal_parallel = other.enable_tablet_internal_parallel;
    this.query_delivery_timeout = other.query_delivery_timeout;
    this.enable_query_debug_trace = other.enable_query_debug_trace;
    if (other.isSetLoad_transmission_compression_type()) {
      this.load_transmission_compression_type = other.load_transmission_compression_type;
    }
    if (other.isSetTablet_internal_parallel_mode()) {
      this.tablet_internal_parallel_mode = other.tablet_internal_parallel_mode;
    }
    if (other.isSetLoad_job_type()) {
      this.load_job_type = other.load_job_type;
    }
    this.enable_scan_datacache = other.enable_scan_datacache;
    this.enable_pipeline_query_statistic = other.enable_pipeline_query_statistic;
    this.transmission_encode_level = other.transmission_encode_level;
    this.enable_populate_datacache = other.enable_populate_datacache;
    this.allow_throw_exception = other.allow_throw_exception;
    this.hudi_mor_force_jni_reader = other.hudi_mor_force_jni_reader;
    this.rpc_http_min_size = other.rpc_http_min_size;
    this.spill_mem_table_size = other.spill_mem_table_size;
    this.spill_mem_table_num = other.spill_mem_table_num;
    this.spill_mem_limit_threshold = other.spill_mem_limit_threshold;
    this.spill_operator_min_bytes = other.spill_operator_min_bytes;
    this.spill_operator_max_bytes = other.spill_operator_max_bytes;
    this.spill_encode_level = other.spill_encode_level;
    this.spill_revocable_max_bytes = other.spill_revocable_max_bytes;
    this.spill_enable_direct_io = other.spill_enable_direct_io;
    this.spill_rand_ratio = other.spill_rand_ratio;
    if (other.isSetSpill_mode()) {
      this.spill_mode = other.spill_mode;
    }
    this.io_tasks_per_scan_operator = other.io_tasks_per_scan_operator;
    this.connector_io_tasks_per_scan_operator = other.connector_io_tasks_per_scan_operator;
    this.runtime_filter_early_return_selectivity = other.runtime_filter_early_return_selectivity;
    this.enable_dynamic_prune_scan_range = other.enable_dynamic_prune_scan_range;
    this.log_rejected_record_num = other.log_rejected_record_num;
    this.use_page_cache = other.use_page_cache;
    this.enable_connector_adaptive_io_tasks = other.enable_connector_adaptive_io_tasks;
    this.connector_io_tasks_slow_io_latency_ms = other.connector_io_tasks_slow_io_latency_ms;
    this.scan_use_query_mem_ratio = other.scan_use_query_mem_ratio;
    this.connector_scan_use_query_mem_ratio = other.connector_scan_use_query_mem_ratio;
    this.spillable_operator_mask = other.spillable_operator_mask;
    this.load_profile_collect_second = other.load_profile_collect_second;
    this.group_concat_max_len = other.group_concat_max_len;
    this.runtime_profile_report_interval = other.runtime_profile_report_interval;
    this.enable_collect_table_level_scan_stats = other.enable_collect_table_level_scan_stats;
    this.interleaving_group_size = other.interleaving_group_size;
    if (other.isSetOverflow_mode()) {
      this.overflow_mode = other.overflow_mode;
    }
    this.use_column_pool = other.use_column_pool;
    this.enable_agg_spill_preaggregation = other.enable_agg_spill_preaggregation;
    this.global_runtime_filter_build_max_size = other.global_runtime_filter_build_max_size;
    this.runtime_filter_rpc_http_min_size = other.runtime_filter_rpc_http_min_size;
    this.big_query_profile_threshold = other.big_query_profile_threshold;
    if (other.isSetQuery_queue_options()) {
      this.query_queue_options = new TQueryQueueOptions(other.query_queue_options);
    }
    this.enable_file_metacache = other.enable_file_metacache;
    this.enable_pipeline_level_shuffle = other.enable_pipeline_level_shuffle;
    this.enable_hyperscan_vec = other.enable_hyperscan_vec;
    this.enable_jit = other.enable_jit;
    if (other.isSetBig_query_profile_threshold_unit()) {
      this.big_query_profile_threshold_unit = other.big_query_profile_threshold_unit;
    }
    if (other.isSetSql_dialect()) {
      this.sql_dialect = other.sql_dialect;
    }
    this.enable_spill_to_remote_storage = other.enable_spill_to_remote_storage;
    if (other.isSetSpill_to_remote_storage_options()) {
      this.spill_to_remote_storage_options = new TSpillToRemoteStorageOptions(other.spill_to_remote_storage_options);
    }
  }

  @Override
  public TQueryOptions deepCopy() {
    return new TQueryOptions(this);
  }

  @Override
  public void clear() {
    this.max_errors = 0;

    this.batch_size = 0;

    this.mem_limit = 2147483648L;

    this.abort_on_default_limit_exceeded = false;

    this.query_timeout = 3600;

    this.enable_profile = false;

    this.query_type = io.datafibre.fibre.thrift.TQueryType.SELECT;

    this.load_mem_limit = 0L;

    setMax_scan_key_numIsSet(false);
    this.max_scan_key_num = 0;
    setMax_pushdown_conditions_per_columnIsSet(false);
    this.max_pushdown_conditions_per_column = 0;
    this.enable_spill = false;

    this.transmission_compression_type = null;
    setRuntime_join_filter_pushdown_limitIsSet(false);
    this.runtime_join_filter_pushdown_limit = 0;
    this.runtime_filter_wait_timeout_ms = 200;

    this.runtime_filter_send_timeout_ms = 400;

    setPipeline_dopIsSet(false);
    this.pipeline_dop = 0;
    this.pipeline_profile_level = null;
    setLoad_dopIsSet(false);
    this.load_dop = 0;
    setRuntime_filter_scan_wait_time_msIsSet(false);
    this.runtime_filter_scan_wait_time_ms = 0;
    setQuery_mem_limitIsSet(false);
    this.query_mem_limit = 0;
    setEnable_tablet_internal_parallelIsSet(false);
    this.enable_tablet_internal_parallel = false;
    setQuery_delivery_timeoutIsSet(false);
    this.query_delivery_timeout = 0;
    setEnable_query_debug_traceIsSet(false);
    this.enable_query_debug_trace = false;
    this.load_transmission_compression_type = null;
    this.tablet_internal_parallel_mode = null;
    this.load_job_type = null;
    setEnable_scan_datacacheIsSet(false);
    this.enable_scan_datacache = false;
    this.enable_pipeline_query_statistic = false;

    setTransmission_encode_levelIsSet(false);
    this.transmission_encode_level = 0;
    setEnable_populate_datacacheIsSet(false);
    this.enable_populate_datacache = false;
    this.allow_throw_exception = false;

    setHudi_mor_force_jni_readerIsSet(false);
    this.hudi_mor_force_jni_reader = false;
    setRpc_http_min_sizeIsSet(false);
    this.rpc_http_min_size = 0;
    setSpill_mem_table_sizeIsSet(false);
    this.spill_mem_table_size = 0;
    setSpill_mem_table_numIsSet(false);
    this.spill_mem_table_num = 0;
    setSpill_mem_limit_thresholdIsSet(false);
    this.spill_mem_limit_threshold = 0.0;
    setSpill_operator_min_bytesIsSet(false);
    this.spill_operator_min_bytes = 0;
    setSpill_operator_max_bytesIsSet(false);
    this.spill_operator_max_bytes = 0;
    setSpill_encode_levelIsSet(false);
    this.spill_encode_level = 0;
    setSpill_revocable_max_bytesIsSet(false);
    this.spill_revocable_max_bytes = 0;
    setSpill_enable_direct_ioIsSet(false);
    this.spill_enable_direct_io = false;
    setSpill_rand_ratioIsSet(false);
    this.spill_rand_ratio = 0.0;
    this.spill_mode = null;
    this.io_tasks_per_scan_operator = 4;

    this.connector_io_tasks_per_scan_operator = 16;

    this.runtime_filter_early_return_selectivity = 0.0500000000000000;

    this.enable_dynamic_prune_scan_range = true;

    this.log_rejected_record_num = 0L;

    setUse_page_cacheIsSet(false);
    this.use_page_cache = false;
    this.enable_connector_adaptive_io_tasks = true;

    this.connector_io_tasks_slow_io_latency_ms = 50;

    this.scan_use_query_mem_ratio = 0.2500000000000000;

    this.connector_scan_use_query_mem_ratio = 0.3000000000000000;

    setSpillable_operator_maskIsSet(false);
    this.spillable_operator_mask = 0;
    setLoad_profile_collect_secondIsSet(false);
    this.load_profile_collect_second = 0;
    this.group_concat_max_len = 1024L;

    this.runtime_profile_report_interval = 30L;

    setEnable_collect_table_level_scan_statsIsSet(false);
    this.enable_collect_table_level_scan_stats = false;
    setInterleaving_group_sizeIsSet(false);
    this.interleaving_group_size = 0;
    this.overflow_mode = io.datafibre.fibre.thrift.TOverflowMode.OUTPUT_NULL;

    this.use_column_pool = true;

    setEnable_agg_spill_preaggregationIsSet(false);
    this.enable_agg_spill_preaggregation = false;
    setGlobal_runtime_filter_build_max_sizeIsSet(false);
    this.global_runtime_filter_build_max_size = 0;
    setRuntime_filter_rpc_http_min_sizeIsSet(false);
    this.runtime_filter_rpc_http_min_size = 0;
    this.big_query_profile_threshold = 0L;

    this.query_queue_options = null;
    setEnable_file_metacacheIsSet(false);
    this.enable_file_metacache = false;
    setEnable_pipeline_level_shuffleIsSet(false);
    this.enable_pipeline_level_shuffle = false;
    setEnable_hyperscan_vecIsSet(false);
    this.enable_hyperscan_vec = false;
    this.enable_jit = false;

    this.big_query_profile_threshold_unit = io.datafibre.fibre.thrift.TTimeUnit.SECOND;

    this.sql_dialect = null;
    setEnable_spill_to_remote_storageIsSet(false);
    this.enable_spill_to_remote_storage = false;
    this.spill_to_remote_storage_options = null;
  }

  public int getMax_errors() {
    return this.max_errors;
  }

  public TQueryOptions setMax_errors(int max_errors) {
    this.max_errors = max_errors;
    setMax_errorsIsSet(true);
    return this;
  }

  public void unsetMax_errors() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_ERRORS_ISSET_ID);
  }

  /** Returns true if field max_errors is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_errors() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_ERRORS_ISSET_ID);
  }

  public void setMax_errorsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_ERRORS_ISSET_ID, value);
  }

  public int getBatch_size() {
    return this.batch_size;
  }

  public TQueryOptions setBatch_size(int batch_size) {
    this.batch_size = batch_size;
    setBatch_sizeIsSet(true);
    return this;
  }

  public void unsetBatch_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BATCH_SIZE_ISSET_ID);
  }

  /** Returns true if field batch_size is set (has been assigned a value) and false otherwise */
  public boolean isSetBatch_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BATCH_SIZE_ISSET_ID);
  }

  public void setBatch_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BATCH_SIZE_ISSET_ID, value);
  }

  public long getMem_limit() {
    return this.mem_limit;
  }

  public TQueryOptions setMem_limit(long mem_limit) {
    this.mem_limit = mem_limit;
    setMem_limitIsSet(true);
    return this;
  }

  public void unsetMem_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEM_LIMIT_ISSET_ID);
  }

  /** Returns true if field mem_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEM_LIMIT_ISSET_ID);
  }

  public void setMem_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEM_LIMIT_ISSET_ID, value);
  }

  public boolean isAbort_on_default_limit_exceeded() {
    return this.abort_on_default_limit_exceeded;
  }

  public TQueryOptions setAbort_on_default_limit_exceeded(boolean abort_on_default_limit_exceeded) {
    this.abort_on_default_limit_exceeded = abort_on_default_limit_exceeded;
    setAbort_on_default_limit_exceededIsSet(true);
    return this;
  }

  public void unsetAbort_on_default_limit_exceeded() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ABORT_ON_DEFAULT_LIMIT_EXCEEDED_ISSET_ID);
  }

  /** Returns true if field abort_on_default_limit_exceeded is set (has been assigned a value) and false otherwise */
  public boolean isSetAbort_on_default_limit_exceeded() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ABORT_ON_DEFAULT_LIMIT_EXCEEDED_ISSET_ID);
  }

  public void setAbort_on_default_limit_exceededIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ABORT_ON_DEFAULT_LIMIT_EXCEEDED_ISSET_ID, value);
  }

  public int getQuery_timeout() {
    return this.query_timeout;
  }

  public TQueryOptions setQuery_timeout(int query_timeout) {
    this.query_timeout = query_timeout;
    setQuery_timeoutIsSet(true);
    return this;
  }

  public void unsetQuery_timeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERY_TIMEOUT_ISSET_ID);
  }

  /** Returns true if field query_timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_timeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERY_TIMEOUT_ISSET_ID);
  }

  public void setQuery_timeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERY_TIMEOUT_ISSET_ID, value);
  }

  public boolean isEnable_profile() {
    return this.enable_profile;
  }

  public TQueryOptions setEnable_profile(boolean enable_profile) {
    this.enable_profile = enable_profile;
    setEnable_profileIsSet(true);
    return this;
  }

  public void unsetEnable_profile() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_PROFILE_ISSET_ID);
  }

  /** Returns true if field enable_profile is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_profile() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_PROFILE_ISSET_ID);
  }

  public void setEnable_profileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_PROFILE_ISSET_ID, value);
  }

  /**
   * 
   * @see TQueryType
   */
  @org.apache.thrift.annotation.Nullable
  public TQueryType getQuery_type() {
    return this.query_type;
  }

  /**
   * 
   * @see TQueryType
   */
  public TQueryOptions setQuery_type(@org.apache.thrift.annotation.Nullable TQueryType query_type) {
    this.query_type = query_type;
    return this;
  }

  public void unsetQuery_type() {
    this.query_type = null;
  }

  /** Returns true if field query_type is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_type() {
    return this.query_type != null;
  }

  public void setQuery_typeIsSet(boolean value) {
    if (!value) {
      this.query_type = null;
    }
  }

  public long getLoad_mem_limit() {
    return this.load_mem_limit;
  }

  public TQueryOptions setLoad_mem_limit(long load_mem_limit) {
    this.load_mem_limit = load_mem_limit;
    setLoad_mem_limitIsSet(true);
    return this;
  }

  public void unsetLoad_mem_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOAD_MEM_LIMIT_ISSET_ID);
  }

  /** Returns true if field load_mem_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_mem_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOAD_MEM_LIMIT_ISSET_ID);
  }

  public void setLoad_mem_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOAD_MEM_LIMIT_ISSET_ID, value);
  }

  public int getMax_scan_key_num() {
    return this.max_scan_key_num;
  }

  public TQueryOptions setMax_scan_key_num(int max_scan_key_num) {
    this.max_scan_key_num = max_scan_key_num;
    setMax_scan_key_numIsSet(true);
    return this;
  }

  public void unsetMax_scan_key_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_SCAN_KEY_NUM_ISSET_ID);
  }

  /** Returns true if field max_scan_key_num is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_scan_key_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_SCAN_KEY_NUM_ISSET_ID);
  }

  public void setMax_scan_key_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_SCAN_KEY_NUM_ISSET_ID, value);
  }

  public int getMax_pushdown_conditions_per_column() {
    return this.max_pushdown_conditions_per_column;
  }

  public TQueryOptions setMax_pushdown_conditions_per_column(int max_pushdown_conditions_per_column) {
    this.max_pushdown_conditions_per_column = max_pushdown_conditions_per_column;
    setMax_pushdown_conditions_per_columnIsSet(true);
    return this;
  }

  public void unsetMax_pushdown_conditions_per_column() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_PUSHDOWN_CONDITIONS_PER_COLUMN_ISSET_ID);
  }

  /** Returns true if field max_pushdown_conditions_per_column is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_pushdown_conditions_per_column() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_PUSHDOWN_CONDITIONS_PER_COLUMN_ISSET_ID);
  }

  public void setMax_pushdown_conditions_per_columnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_PUSHDOWN_CONDITIONS_PER_COLUMN_ISSET_ID, value);
  }

  public boolean isEnable_spill() {
    return this.enable_spill;
  }

  public TQueryOptions setEnable_spill(boolean enable_spill) {
    this.enable_spill = enable_spill;
    setEnable_spillIsSet(true);
    return this;
  }

  public void unsetEnable_spill() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_SPILL_ISSET_ID);
  }

  /** Returns true if field enable_spill is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_spill() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_SPILL_ISSET_ID);
  }

  public void setEnable_spillIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_SPILL_ISSET_ID, value);
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TCompressionType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TCompressionType getTransmission_compression_type() {
    return this.transmission_compression_type;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TCompressionType
   */
  public TQueryOptions setTransmission_compression_type(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TCompressionType transmission_compression_type) {
    this.transmission_compression_type = transmission_compression_type;
    return this;
  }

  public void unsetTransmission_compression_type() {
    this.transmission_compression_type = null;
  }

  /** Returns true if field transmission_compression_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTransmission_compression_type() {
    return this.transmission_compression_type != null;
  }

  public void setTransmission_compression_typeIsSet(boolean value) {
    if (!value) {
      this.transmission_compression_type = null;
    }
  }

  public long getRuntime_join_filter_pushdown_limit() {
    return this.runtime_join_filter_pushdown_limit;
  }

  public TQueryOptions setRuntime_join_filter_pushdown_limit(long runtime_join_filter_pushdown_limit) {
    this.runtime_join_filter_pushdown_limit = runtime_join_filter_pushdown_limit;
    setRuntime_join_filter_pushdown_limitIsSet(true);
    return this;
  }

  public void unsetRuntime_join_filter_pushdown_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNTIME_JOIN_FILTER_PUSHDOWN_LIMIT_ISSET_ID);
  }

  /** Returns true if field runtime_join_filter_pushdown_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_join_filter_pushdown_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNTIME_JOIN_FILTER_PUSHDOWN_LIMIT_ISSET_ID);
  }

  public void setRuntime_join_filter_pushdown_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNTIME_JOIN_FILTER_PUSHDOWN_LIMIT_ISSET_ID, value);
  }

  public int getRuntime_filter_wait_timeout_ms() {
    return this.runtime_filter_wait_timeout_ms;
  }

  public TQueryOptions setRuntime_filter_wait_timeout_ms(int runtime_filter_wait_timeout_ms) {
    this.runtime_filter_wait_timeout_ms = runtime_filter_wait_timeout_ms;
    setRuntime_filter_wait_timeout_msIsSet(true);
    return this;
  }

  public void unsetRuntime_filter_wait_timeout_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNTIME_FILTER_WAIT_TIMEOUT_MS_ISSET_ID);
  }

  /** Returns true if field runtime_filter_wait_timeout_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_filter_wait_timeout_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNTIME_FILTER_WAIT_TIMEOUT_MS_ISSET_ID);
  }

  public void setRuntime_filter_wait_timeout_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNTIME_FILTER_WAIT_TIMEOUT_MS_ISSET_ID, value);
  }

  public int getRuntime_filter_send_timeout_ms() {
    return this.runtime_filter_send_timeout_ms;
  }

  public TQueryOptions setRuntime_filter_send_timeout_ms(int runtime_filter_send_timeout_ms) {
    this.runtime_filter_send_timeout_ms = runtime_filter_send_timeout_ms;
    setRuntime_filter_send_timeout_msIsSet(true);
    return this;
  }

  public void unsetRuntime_filter_send_timeout_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNTIME_FILTER_SEND_TIMEOUT_MS_ISSET_ID);
  }

  /** Returns true if field runtime_filter_send_timeout_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_filter_send_timeout_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNTIME_FILTER_SEND_TIMEOUT_MS_ISSET_ID);
  }

  public void setRuntime_filter_send_timeout_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNTIME_FILTER_SEND_TIMEOUT_MS_ISSET_ID, value);
  }

  public int getPipeline_dop() {
    return this.pipeline_dop;
  }

  public TQueryOptions setPipeline_dop(int pipeline_dop) {
    this.pipeline_dop = pipeline_dop;
    setPipeline_dopIsSet(true);
    return this;
  }

  public void unsetPipeline_dop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PIPELINE_DOP_ISSET_ID);
  }

  /** Returns true if field pipeline_dop is set (has been assigned a value) and false otherwise */
  public boolean isSetPipeline_dop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PIPELINE_DOP_ISSET_ID);
  }

  public void setPipeline_dopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PIPELINE_DOP_ISSET_ID, value);
  }

  /**
   * 
   * @see TPipelineProfileLevel
   */
  @org.apache.thrift.annotation.Nullable
  public TPipelineProfileLevel getPipeline_profile_level() {
    return this.pipeline_profile_level;
  }

  /**
   * 
   * @see TPipelineProfileLevel
   */
  public TQueryOptions setPipeline_profile_level(@org.apache.thrift.annotation.Nullable TPipelineProfileLevel pipeline_profile_level) {
    this.pipeline_profile_level = pipeline_profile_level;
    return this;
  }

  public void unsetPipeline_profile_level() {
    this.pipeline_profile_level = null;
  }

  /** Returns true if field pipeline_profile_level is set (has been assigned a value) and false otherwise */
  public boolean isSetPipeline_profile_level() {
    return this.pipeline_profile_level != null;
  }

  public void setPipeline_profile_levelIsSet(boolean value) {
    if (!value) {
      this.pipeline_profile_level = null;
    }
  }

  public int getLoad_dop() {
    return this.load_dop;
  }

  public TQueryOptions setLoad_dop(int load_dop) {
    this.load_dop = load_dop;
    setLoad_dopIsSet(true);
    return this;
  }

  public void unsetLoad_dop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOAD_DOP_ISSET_ID);
  }

  /** Returns true if field load_dop is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_dop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOAD_DOP_ISSET_ID);
  }

  public void setLoad_dopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOAD_DOP_ISSET_ID, value);
  }

  public long getRuntime_filter_scan_wait_time_ms() {
    return this.runtime_filter_scan_wait_time_ms;
  }

  public TQueryOptions setRuntime_filter_scan_wait_time_ms(long runtime_filter_scan_wait_time_ms) {
    this.runtime_filter_scan_wait_time_ms = runtime_filter_scan_wait_time_ms;
    setRuntime_filter_scan_wait_time_msIsSet(true);
    return this;
  }

  public void unsetRuntime_filter_scan_wait_time_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNTIME_FILTER_SCAN_WAIT_TIME_MS_ISSET_ID);
  }

  /** Returns true if field runtime_filter_scan_wait_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_filter_scan_wait_time_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNTIME_FILTER_SCAN_WAIT_TIME_MS_ISSET_ID);
  }

  public void setRuntime_filter_scan_wait_time_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNTIME_FILTER_SCAN_WAIT_TIME_MS_ISSET_ID, value);
  }

  public long getQuery_mem_limit() {
    return this.query_mem_limit;
  }

  public TQueryOptions setQuery_mem_limit(long query_mem_limit) {
    this.query_mem_limit = query_mem_limit;
    setQuery_mem_limitIsSet(true);
    return this;
  }

  public void unsetQuery_mem_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERY_MEM_LIMIT_ISSET_ID);
  }

  /** Returns true if field query_mem_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_mem_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERY_MEM_LIMIT_ISSET_ID);
  }

  public void setQuery_mem_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERY_MEM_LIMIT_ISSET_ID, value);
  }

  public boolean isEnable_tablet_internal_parallel() {
    return this.enable_tablet_internal_parallel;
  }

  public TQueryOptions setEnable_tablet_internal_parallel(boolean enable_tablet_internal_parallel) {
    this.enable_tablet_internal_parallel = enable_tablet_internal_parallel;
    setEnable_tablet_internal_parallelIsSet(true);
    return this;
  }

  public void unsetEnable_tablet_internal_parallel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_TABLET_INTERNAL_PARALLEL_ISSET_ID);
  }

  /** Returns true if field enable_tablet_internal_parallel is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_tablet_internal_parallel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_TABLET_INTERNAL_PARALLEL_ISSET_ID);
  }

  public void setEnable_tablet_internal_parallelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_TABLET_INTERNAL_PARALLEL_ISSET_ID, value);
  }

  public int getQuery_delivery_timeout() {
    return this.query_delivery_timeout;
  }

  public TQueryOptions setQuery_delivery_timeout(int query_delivery_timeout) {
    this.query_delivery_timeout = query_delivery_timeout;
    setQuery_delivery_timeoutIsSet(true);
    return this;
  }

  public void unsetQuery_delivery_timeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERY_DELIVERY_TIMEOUT_ISSET_ID);
  }

  /** Returns true if field query_delivery_timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_delivery_timeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERY_DELIVERY_TIMEOUT_ISSET_ID);
  }

  public void setQuery_delivery_timeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERY_DELIVERY_TIMEOUT_ISSET_ID, value);
  }

  public boolean isEnable_query_debug_trace() {
    return this.enable_query_debug_trace;
  }

  public TQueryOptions setEnable_query_debug_trace(boolean enable_query_debug_trace) {
    this.enable_query_debug_trace = enable_query_debug_trace;
    setEnable_query_debug_traceIsSet(true);
    return this;
  }

  public void unsetEnable_query_debug_trace() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_QUERY_DEBUG_TRACE_ISSET_ID);
  }

  /** Returns true if field enable_query_debug_trace is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_query_debug_trace() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_QUERY_DEBUG_TRACE_ISSET_ID);
  }

  public void setEnable_query_debug_traceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_QUERY_DEBUG_TRACE_ISSET_ID, value);
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TCompressionType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TCompressionType getLoad_transmission_compression_type() {
    return this.load_transmission_compression_type;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TCompressionType
   */
  public TQueryOptions setLoad_transmission_compression_type(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TCompressionType load_transmission_compression_type) {
    this.load_transmission_compression_type = load_transmission_compression_type;
    return this;
  }

  public void unsetLoad_transmission_compression_type() {
    this.load_transmission_compression_type = null;
  }

  /** Returns true if field load_transmission_compression_type is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_transmission_compression_type() {
    return this.load_transmission_compression_type != null;
  }

  public void setLoad_transmission_compression_typeIsSet(boolean value) {
    if (!value) {
      this.load_transmission_compression_type = null;
    }
  }

  /**
   * 
   * @see TTabletInternalParallelMode
   */
  @org.apache.thrift.annotation.Nullable
  public TTabletInternalParallelMode getTablet_internal_parallel_mode() {
    return this.tablet_internal_parallel_mode;
  }

  /**
   * 
   * @see TTabletInternalParallelMode
   */
  public TQueryOptions setTablet_internal_parallel_mode(@org.apache.thrift.annotation.Nullable TTabletInternalParallelMode tablet_internal_parallel_mode) {
    this.tablet_internal_parallel_mode = tablet_internal_parallel_mode;
    return this;
  }

  public void unsetTablet_internal_parallel_mode() {
    this.tablet_internal_parallel_mode = null;
  }

  /** Returns true if field tablet_internal_parallel_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_internal_parallel_mode() {
    return this.tablet_internal_parallel_mode != null;
  }

  public void setTablet_internal_parallel_modeIsSet(boolean value) {
    if (!value) {
      this.tablet_internal_parallel_mode = null;
    }
  }

  /**
   * 
   * @see TLoadJobType
   */
  @org.apache.thrift.annotation.Nullable
  public TLoadJobType getLoad_job_type() {
    return this.load_job_type;
  }

  /**
   * 
   * @see TLoadJobType
   */
  public TQueryOptions setLoad_job_type(@org.apache.thrift.annotation.Nullable TLoadJobType load_job_type) {
    this.load_job_type = load_job_type;
    return this;
  }

  public void unsetLoad_job_type() {
    this.load_job_type = null;
  }

  /** Returns true if field load_job_type is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_job_type() {
    return this.load_job_type != null;
  }

  public void setLoad_job_typeIsSet(boolean value) {
    if (!value) {
      this.load_job_type = null;
    }
  }

  public boolean isEnable_scan_datacache() {
    return this.enable_scan_datacache;
  }

  public TQueryOptions setEnable_scan_datacache(boolean enable_scan_datacache) {
    this.enable_scan_datacache = enable_scan_datacache;
    setEnable_scan_datacacheIsSet(true);
    return this;
  }

  public void unsetEnable_scan_datacache() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_SCAN_DATACACHE_ISSET_ID);
  }

  /** Returns true if field enable_scan_datacache is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_scan_datacache() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_SCAN_DATACACHE_ISSET_ID);
  }

  public void setEnable_scan_datacacheIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_SCAN_DATACACHE_ISSET_ID, value);
  }

  public boolean isEnable_pipeline_query_statistic() {
    return this.enable_pipeline_query_statistic;
  }

  public TQueryOptions setEnable_pipeline_query_statistic(boolean enable_pipeline_query_statistic) {
    this.enable_pipeline_query_statistic = enable_pipeline_query_statistic;
    setEnable_pipeline_query_statisticIsSet(true);
    return this;
  }

  public void unsetEnable_pipeline_query_statistic() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_PIPELINE_QUERY_STATISTIC_ISSET_ID);
  }

  /** Returns true if field enable_pipeline_query_statistic is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_pipeline_query_statistic() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_PIPELINE_QUERY_STATISTIC_ISSET_ID);
  }

  public void setEnable_pipeline_query_statisticIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_PIPELINE_QUERY_STATISTIC_ISSET_ID, value);
  }

  public int getTransmission_encode_level() {
    return this.transmission_encode_level;
  }

  public TQueryOptions setTransmission_encode_level(int transmission_encode_level) {
    this.transmission_encode_level = transmission_encode_level;
    setTransmission_encode_levelIsSet(true);
    return this;
  }

  public void unsetTransmission_encode_level() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSMISSION_ENCODE_LEVEL_ISSET_ID);
  }

  /** Returns true if field transmission_encode_level is set (has been assigned a value) and false otherwise */
  public boolean isSetTransmission_encode_level() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSMISSION_ENCODE_LEVEL_ISSET_ID);
  }

  public void setTransmission_encode_levelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSMISSION_ENCODE_LEVEL_ISSET_ID, value);
  }

  public boolean isEnable_populate_datacache() {
    return this.enable_populate_datacache;
  }

  public TQueryOptions setEnable_populate_datacache(boolean enable_populate_datacache) {
    this.enable_populate_datacache = enable_populate_datacache;
    setEnable_populate_datacacheIsSet(true);
    return this;
  }

  public void unsetEnable_populate_datacache() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_POPULATE_DATACACHE_ISSET_ID);
  }

  /** Returns true if field enable_populate_datacache is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_populate_datacache() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_POPULATE_DATACACHE_ISSET_ID);
  }

  public void setEnable_populate_datacacheIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_POPULATE_DATACACHE_ISSET_ID, value);
  }

  public boolean isAllow_throw_exception() {
    return this.allow_throw_exception;
  }

  public TQueryOptions setAllow_throw_exception(boolean allow_throw_exception) {
    this.allow_throw_exception = allow_throw_exception;
    setAllow_throw_exceptionIsSet(true);
    return this;
  }

  public void unsetAllow_throw_exception() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALLOW_THROW_EXCEPTION_ISSET_ID);
  }

  /** Returns true if field allow_throw_exception is set (has been assigned a value) and false otherwise */
  public boolean isSetAllow_throw_exception() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALLOW_THROW_EXCEPTION_ISSET_ID);
  }

  public void setAllow_throw_exceptionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALLOW_THROW_EXCEPTION_ISSET_ID, value);
  }

  public boolean isHudi_mor_force_jni_reader() {
    return this.hudi_mor_force_jni_reader;
  }

  public TQueryOptions setHudi_mor_force_jni_reader(boolean hudi_mor_force_jni_reader) {
    this.hudi_mor_force_jni_reader = hudi_mor_force_jni_reader;
    setHudi_mor_force_jni_readerIsSet(true);
    return this;
  }

  public void unsetHudi_mor_force_jni_reader() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HUDI_MOR_FORCE_JNI_READER_ISSET_ID);
  }

  /** Returns true if field hudi_mor_force_jni_reader is set (has been assigned a value) and false otherwise */
  public boolean isSetHudi_mor_force_jni_reader() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HUDI_MOR_FORCE_JNI_READER_ISSET_ID);
  }

  public void setHudi_mor_force_jni_readerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HUDI_MOR_FORCE_JNI_READER_ISSET_ID, value);
  }

  public long getRpc_http_min_size() {
    return this.rpc_http_min_size;
  }

  public TQueryOptions setRpc_http_min_size(long rpc_http_min_size) {
    this.rpc_http_min_size = rpc_http_min_size;
    setRpc_http_min_sizeIsSet(true);
    return this;
  }

  public void unsetRpc_http_min_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RPC_HTTP_MIN_SIZE_ISSET_ID);
  }

  /** Returns true if field rpc_http_min_size is set (has been assigned a value) and false otherwise */
  public boolean isSetRpc_http_min_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RPC_HTTP_MIN_SIZE_ISSET_ID);
  }

  public void setRpc_http_min_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RPC_HTTP_MIN_SIZE_ISSET_ID, value);
  }

  public int getSpill_mem_table_size() {
    return this.spill_mem_table_size;
  }

  public TQueryOptions setSpill_mem_table_size(int spill_mem_table_size) {
    this.spill_mem_table_size = spill_mem_table_size;
    setSpill_mem_table_sizeIsSet(true);
    return this;
  }

  public void unsetSpill_mem_table_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_MEM_TABLE_SIZE_ISSET_ID);
  }

  /** Returns true if field spill_mem_table_size is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_mem_table_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_MEM_TABLE_SIZE_ISSET_ID);
  }

  public void setSpill_mem_table_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_MEM_TABLE_SIZE_ISSET_ID, value);
  }

  public int getSpill_mem_table_num() {
    return this.spill_mem_table_num;
  }

  public TQueryOptions setSpill_mem_table_num(int spill_mem_table_num) {
    this.spill_mem_table_num = spill_mem_table_num;
    setSpill_mem_table_numIsSet(true);
    return this;
  }

  public void unsetSpill_mem_table_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_MEM_TABLE_NUM_ISSET_ID);
  }

  /** Returns true if field spill_mem_table_num is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_mem_table_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_MEM_TABLE_NUM_ISSET_ID);
  }

  public void setSpill_mem_table_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_MEM_TABLE_NUM_ISSET_ID, value);
  }

  public double getSpill_mem_limit_threshold() {
    return this.spill_mem_limit_threshold;
  }

  public TQueryOptions setSpill_mem_limit_threshold(double spill_mem_limit_threshold) {
    this.spill_mem_limit_threshold = spill_mem_limit_threshold;
    setSpill_mem_limit_thresholdIsSet(true);
    return this;
  }

  public void unsetSpill_mem_limit_threshold() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_MEM_LIMIT_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field spill_mem_limit_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_mem_limit_threshold() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_MEM_LIMIT_THRESHOLD_ISSET_ID);
  }

  public void setSpill_mem_limit_thresholdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_MEM_LIMIT_THRESHOLD_ISSET_ID, value);
  }

  public long getSpill_operator_min_bytes() {
    return this.spill_operator_min_bytes;
  }

  public TQueryOptions setSpill_operator_min_bytes(long spill_operator_min_bytes) {
    this.spill_operator_min_bytes = spill_operator_min_bytes;
    setSpill_operator_min_bytesIsSet(true);
    return this;
  }

  public void unsetSpill_operator_min_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_OPERATOR_MIN_BYTES_ISSET_ID);
  }

  /** Returns true if field spill_operator_min_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_operator_min_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_OPERATOR_MIN_BYTES_ISSET_ID);
  }

  public void setSpill_operator_min_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_OPERATOR_MIN_BYTES_ISSET_ID, value);
  }

  public long getSpill_operator_max_bytes() {
    return this.spill_operator_max_bytes;
  }

  public TQueryOptions setSpill_operator_max_bytes(long spill_operator_max_bytes) {
    this.spill_operator_max_bytes = spill_operator_max_bytes;
    setSpill_operator_max_bytesIsSet(true);
    return this;
  }

  public void unsetSpill_operator_max_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_OPERATOR_MAX_BYTES_ISSET_ID);
  }

  /** Returns true if field spill_operator_max_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_operator_max_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_OPERATOR_MAX_BYTES_ISSET_ID);
  }

  public void setSpill_operator_max_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_OPERATOR_MAX_BYTES_ISSET_ID, value);
  }

  public int getSpill_encode_level() {
    return this.spill_encode_level;
  }

  public TQueryOptions setSpill_encode_level(int spill_encode_level) {
    this.spill_encode_level = spill_encode_level;
    setSpill_encode_levelIsSet(true);
    return this;
  }

  public void unsetSpill_encode_level() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_ENCODE_LEVEL_ISSET_ID);
  }

  /** Returns true if field spill_encode_level is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_encode_level() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_ENCODE_LEVEL_ISSET_ID);
  }

  public void setSpill_encode_levelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_ENCODE_LEVEL_ISSET_ID, value);
  }

  public long getSpill_revocable_max_bytes() {
    return this.spill_revocable_max_bytes;
  }

  public TQueryOptions setSpill_revocable_max_bytes(long spill_revocable_max_bytes) {
    this.spill_revocable_max_bytes = spill_revocable_max_bytes;
    setSpill_revocable_max_bytesIsSet(true);
    return this;
  }

  public void unsetSpill_revocable_max_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_REVOCABLE_MAX_BYTES_ISSET_ID);
  }

  /** Returns true if field spill_revocable_max_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_revocable_max_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_REVOCABLE_MAX_BYTES_ISSET_ID);
  }

  public void setSpill_revocable_max_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_REVOCABLE_MAX_BYTES_ISSET_ID, value);
  }

  public boolean isSpill_enable_direct_io() {
    return this.spill_enable_direct_io;
  }

  public TQueryOptions setSpill_enable_direct_io(boolean spill_enable_direct_io) {
    this.spill_enable_direct_io = spill_enable_direct_io;
    setSpill_enable_direct_ioIsSet(true);
    return this;
  }

  public void unsetSpill_enable_direct_io() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_ENABLE_DIRECT_IO_ISSET_ID);
  }

  /** Returns true if field spill_enable_direct_io is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_enable_direct_io() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_ENABLE_DIRECT_IO_ISSET_ID);
  }

  public void setSpill_enable_direct_ioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_ENABLE_DIRECT_IO_ISSET_ID, value);
  }

  public double getSpill_rand_ratio() {
    return this.spill_rand_ratio;
  }

  public TQueryOptions setSpill_rand_ratio(double spill_rand_ratio) {
    this.spill_rand_ratio = spill_rand_ratio;
    setSpill_rand_ratioIsSet(true);
    return this;
  }

  public void unsetSpill_rand_ratio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_RAND_RATIO_ISSET_ID);
  }

  /** Returns true if field spill_rand_ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_rand_ratio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_RAND_RATIO_ISSET_ID);
  }

  public void setSpill_rand_ratioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_RAND_RATIO_ISSET_ID, value);
  }

  /**
   * 
   * @see TSpillMode
   */
  @org.apache.thrift.annotation.Nullable
  public TSpillMode getSpill_mode() {
    return this.spill_mode;
  }

  /**
   * 
   * @see TSpillMode
   */
  public TQueryOptions setSpill_mode(@org.apache.thrift.annotation.Nullable TSpillMode spill_mode) {
    this.spill_mode = spill_mode;
    return this;
  }

  public void unsetSpill_mode() {
    this.spill_mode = null;
  }

  /** Returns true if field spill_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_mode() {
    return this.spill_mode != null;
  }

  public void setSpill_modeIsSet(boolean value) {
    if (!value) {
      this.spill_mode = null;
    }
  }

  public int getIo_tasks_per_scan_operator() {
    return this.io_tasks_per_scan_operator;
  }

  public TQueryOptions setIo_tasks_per_scan_operator(int io_tasks_per_scan_operator) {
    this.io_tasks_per_scan_operator = io_tasks_per_scan_operator;
    setIo_tasks_per_scan_operatorIsSet(true);
    return this;
  }

  public void unsetIo_tasks_per_scan_operator() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IO_TASKS_PER_SCAN_OPERATOR_ISSET_ID);
  }

  /** Returns true if field io_tasks_per_scan_operator is set (has been assigned a value) and false otherwise */
  public boolean isSetIo_tasks_per_scan_operator() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IO_TASKS_PER_SCAN_OPERATOR_ISSET_ID);
  }

  public void setIo_tasks_per_scan_operatorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IO_TASKS_PER_SCAN_OPERATOR_ISSET_ID, value);
  }

  public int getConnector_io_tasks_per_scan_operator() {
    return this.connector_io_tasks_per_scan_operator;
  }

  public TQueryOptions setConnector_io_tasks_per_scan_operator(int connector_io_tasks_per_scan_operator) {
    this.connector_io_tasks_per_scan_operator = connector_io_tasks_per_scan_operator;
    setConnector_io_tasks_per_scan_operatorIsSet(true);
    return this;
  }

  public void unsetConnector_io_tasks_per_scan_operator() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNECTOR_IO_TASKS_PER_SCAN_OPERATOR_ISSET_ID);
  }

  /** Returns true if field connector_io_tasks_per_scan_operator is set (has been assigned a value) and false otherwise */
  public boolean isSetConnector_io_tasks_per_scan_operator() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNECTOR_IO_TASKS_PER_SCAN_OPERATOR_ISSET_ID);
  }

  public void setConnector_io_tasks_per_scan_operatorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNECTOR_IO_TASKS_PER_SCAN_OPERATOR_ISSET_ID, value);
  }

  public double getRuntime_filter_early_return_selectivity() {
    return this.runtime_filter_early_return_selectivity;
  }

  public TQueryOptions setRuntime_filter_early_return_selectivity(double runtime_filter_early_return_selectivity) {
    this.runtime_filter_early_return_selectivity = runtime_filter_early_return_selectivity;
    setRuntime_filter_early_return_selectivityIsSet(true);
    return this;
  }

  public void unsetRuntime_filter_early_return_selectivity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNTIME_FILTER_EARLY_RETURN_SELECTIVITY_ISSET_ID);
  }

  /** Returns true if field runtime_filter_early_return_selectivity is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_filter_early_return_selectivity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNTIME_FILTER_EARLY_RETURN_SELECTIVITY_ISSET_ID);
  }

  public void setRuntime_filter_early_return_selectivityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNTIME_FILTER_EARLY_RETURN_SELECTIVITY_ISSET_ID, value);
  }

  public boolean isEnable_dynamic_prune_scan_range() {
    return this.enable_dynamic_prune_scan_range;
  }

  public TQueryOptions setEnable_dynamic_prune_scan_range(boolean enable_dynamic_prune_scan_range) {
    this.enable_dynamic_prune_scan_range = enable_dynamic_prune_scan_range;
    setEnable_dynamic_prune_scan_rangeIsSet(true);
    return this;
  }

  public void unsetEnable_dynamic_prune_scan_range() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_DYNAMIC_PRUNE_SCAN_RANGE_ISSET_ID);
  }

  /** Returns true if field enable_dynamic_prune_scan_range is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_dynamic_prune_scan_range() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_DYNAMIC_PRUNE_SCAN_RANGE_ISSET_ID);
  }

  public void setEnable_dynamic_prune_scan_rangeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_DYNAMIC_PRUNE_SCAN_RANGE_ISSET_ID, value);
  }

  public long getLog_rejected_record_num() {
    return this.log_rejected_record_num;
  }

  public TQueryOptions setLog_rejected_record_num(long log_rejected_record_num) {
    this.log_rejected_record_num = log_rejected_record_num;
    setLog_rejected_record_numIsSet(true);
    return this;
  }

  public void unsetLog_rejected_record_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOG_REJECTED_RECORD_NUM_ISSET_ID);
  }

  /** Returns true if field log_rejected_record_num is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_rejected_record_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOG_REJECTED_RECORD_NUM_ISSET_ID);
  }

  public void setLog_rejected_record_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOG_REJECTED_RECORD_NUM_ISSET_ID, value);
  }

  public boolean isUse_page_cache() {
    return this.use_page_cache;
  }

  public TQueryOptions setUse_page_cache(boolean use_page_cache) {
    this.use_page_cache = use_page_cache;
    setUse_page_cacheIsSet(true);
    return this;
  }

  public void unsetUse_page_cache() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_PAGE_CACHE_ISSET_ID);
  }

  /** Returns true if field use_page_cache is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_page_cache() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_PAGE_CACHE_ISSET_ID);
  }

  public void setUse_page_cacheIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_PAGE_CACHE_ISSET_ID, value);
  }

  public boolean isEnable_connector_adaptive_io_tasks() {
    return this.enable_connector_adaptive_io_tasks;
  }

  public TQueryOptions setEnable_connector_adaptive_io_tasks(boolean enable_connector_adaptive_io_tasks) {
    this.enable_connector_adaptive_io_tasks = enable_connector_adaptive_io_tasks;
    setEnable_connector_adaptive_io_tasksIsSet(true);
    return this;
  }

  public void unsetEnable_connector_adaptive_io_tasks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_CONNECTOR_ADAPTIVE_IO_TASKS_ISSET_ID);
  }

  /** Returns true if field enable_connector_adaptive_io_tasks is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_connector_adaptive_io_tasks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_CONNECTOR_ADAPTIVE_IO_TASKS_ISSET_ID);
  }

  public void setEnable_connector_adaptive_io_tasksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_CONNECTOR_ADAPTIVE_IO_TASKS_ISSET_ID, value);
  }

  public int getConnector_io_tasks_slow_io_latency_ms() {
    return this.connector_io_tasks_slow_io_latency_ms;
  }

  public TQueryOptions setConnector_io_tasks_slow_io_latency_ms(int connector_io_tasks_slow_io_latency_ms) {
    this.connector_io_tasks_slow_io_latency_ms = connector_io_tasks_slow_io_latency_ms;
    setConnector_io_tasks_slow_io_latency_msIsSet(true);
    return this;
  }

  public void unsetConnector_io_tasks_slow_io_latency_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNECTOR_IO_TASKS_SLOW_IO_LATENCY_MS_ISSET_ID);
  }

  /** Returns true if field connector_io_tasks_slow_io_latency_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetConnector_io_tasks_slow_io_latency_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNECTOR_IO_TASKS_SLOW_IO_LATENCY_MS_ISSET_ID);
  }

  public void setConnector_io_tasks_slow_io_latency_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNECTOR_IO_TASKS_SLOW_IO_LATENCY_MS_ISSET_ID, value);
  }

  public double getScan_use_query_mem_ratio() {
    return this.scan_use_query_mem_ratio;
  }

  public TQueryOptions setScan_use_query_mem_ratio(double scan_use_query_mem_ratio) {
    this.scan_use_query_mem_ratio = scan_use_query_mem_ratio;
    setScan_use_query_mem_ratioIsSet(true);
    return this;
  }

  public void unsetScan_use_query_mem_ratio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCAN_USE_QUERY_MEM_RATIO_ISSET_ID);
  }

  /** Returns true if field scan_use_query_mem_ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetScan_use_query_mem_ratio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCAN_USE_QUERY_MEM_RATIO_ISSET_ID);
  }

  public void setScan_use_query_mem_ratioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCAN_USE_QUERY_MEM_RATIO_ISSET_ID, value);
  }

  public double getConnector_scan_use_query_mem_ratio() {
    return this.connector_scan_use_query_mem_ratio;
  }

  public TQueryOptions setConnector_scan_use_query_mem_ratio(double connector_scan_use_query_mem_ratio) {
    this.connector_scan_use_query_mem_ratio = connector_scan_use_query_mem_ratio;
    setConnector_scan_use_query_mem_ratioIsSet(true);
    return this;
  }

  public void unsetConnector_scan_use_query_mem_ratio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNECTOR_SCAN_USE_QUERY_MEM_RATIO_ISSET_ID);
  }

  /** Returns true if field connector_scan_use_query_mem_ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetConnector_scan_use_query_mem_ratio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNECTOR_SCAN_USE_QUERY_MEM_RATIO_ISSET_ID);
  }

  public void setConnector_scan_use_query_mem_ratioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNECTOR_SCAN_USE_QUERY_MEM_RATIO_ISSET_ID, value);
  }

  public long getSpillable_operator_mask() {
    return this.spillable_operator_mask;
  }

  public TQueryOptions setSpillable_operator_mask(long spillable_operator_mask) {
    this.spillable_operator_mask = spillable_operator_mask;
    setSpillable_operator_maskIsSet(true);
    return this;
  }

  public void unsetSpillable_operator_mask() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILLABLE_OPERATOR_MASK_ISSET_ID);
  }

  /** Returns true if field spillable_operator_mask is set (has been assigned a value) and false otherwise */
  public boolean isSetSpillable_operator_mask() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILLABLE_OPERATOR_MASK_ISSET_ID);
  }

  public void setSpillable_operator_maskIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILLABLE_OPERATOR_MASK_ISSET_ID, value);
  }

  public long getLoad_profile_collect_second() {
    return this.load_profile_collect_second;
  }

  public TQueryOptions setLoad_profile_collect_second(long load_profile_collect_second) {
    this.load_profile_collect_second = load_profile_collect_second;
    setLoad_profile_collect_secondIsSet(true);
    return this;
  }

  public void unsetLoad_profile_collect_second() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOAD_PROFILE_COLLECT_SECOND_ISSET_ID);
  }

  /** Returns true if field load_profile_collect_second is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_profile_collect_second() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOAD_PROFILE_COLLECT_SECOND_ISSET_ID);
  }

  public void setLoad_profile_collect_secondIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOAD_PROFILE_COLLECT_SECOND_ISSET_ID, value);
  }

  public long getGroup_concat_max_len() {
    return this.group_concat_max_len;
  }

  public TQueryOptions setGroup_concat_max_len(long group_concat_max_len) {
    this.group_concat_max_len = group_concat_max_len;
    setGroup_concat_max_lenIsSet(true);
    return this;
  }

  public void unsetGroup_concat_max_len() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GROUP_CONCAT_MAX_LEN_ISSET_ID);
  }

  /** Returns true if field group_concat_max_len is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_concat_max_len() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GROUP_CONCAT_MAX_LEN_ISSET_ID);
  }

  public void setGroup_concat_max_lenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GROUP_CONCAT_MAX_LEN_ISSET_ID, value);
  }

  public long getRuntime_profile_report_interval() {
    return this.runtime_profile_report_interval;
  }

  public TQueryOptions setRuntime_profile_report_interval(long runtime_profile_report_interval) {
    this.runtime_profile_report_interval = runtime_profile_report_interval;
    setRuntime_profile_report_intervalIsSet(true);
    return this;
  }

  public void unsetRuntime_profile_report_interval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNTIME_PROFILE_REPORT_INTERVAL_ISSET_ID);
  }

  /** Returns true if field runtime_profile_report_interval is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_profile_report_interval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNTIME_PROFILE_REPORT_INTERVAL_ISSET_ID);
  }

  public void setRuntime_profile_report_intervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNTIME_PROFILE_REPORT_INTERVAL_ISSET_ID, value);
  }

  public boolean isEnable_collect_table_level_scan_stats() {
    return this.enable_collect_table_level_scan_stats;
  }

  public TQueryOptions setEnable_collect_table_level_scan_stats(boolean enable_collect_table_level_scan_stats) {
    this.enable_collect_table_level_scan_stats = enable_collect_table_level_scan_stats;
    setEnable_collect_table_level_scan_statsIsSet(true);
    return this;
  }

  public void unsetEnable_collect_table_level_scan_stats() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_COLLECT_TABLE_LEVEL_SCAN_STATS_ISSET_ID);
  }

  /** Returns true if field enable_collect_table_level_scan_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_collect_table_level_scan_stats() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_COLLECT_TABLE_LEVEL_SCAN_STATS_ISSET_ID);
  }

  public void setEnable_collect_table_level_scan_statsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_COLLECT_TABLE_LEVEL_SCAN_STATS_ISSET_ID, value);
  }

  public int getInterleaving_group_size() {
    return this.interleaving_group_size;
  }

  public TQueryOptions setInterleaving_group_size(int interleaving_group_size) {
    this.interleaving_group_size = interleaving_group_size;
    setInterleaving_group_sizeIsSet(true);
    return this;
  }

  public void unsetInterleaving_group_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERLEAVING_GROUP_SIZE_ISSET_ID);
  }

  /** Returns true if field interleaving_group_size is set (has been assigned a value) and false otherwise */
  public boolean isSetInterleaving_group_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERLEAVING_GROUP_SIZE_ISSET_ID);
  }

  public void setInterleaving_group_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERLEAVING_GROUP_SIZE_ISSET_ID, value);
  }

  /**
   * 
   * @see TOverflowMode
   */
  @org.apache.thrift.annotation.Nullable
  public TOverflowMode getOverflow_mode() {
    return this.overflow_mode;
  }

  /**
   * 
   * @see TOverflowMode
   */
  public TQueryOptions setOverflow_mode(@org.apache.thrift.annotation.Nullable TOverflowMode overflow_mode) {
    this.overflow_mode = overflow_mode;
    return this;
  }

  public void unsetOverflow_mode() {
    this.overflow_mode = null;
  }

  /** Returns true if field overflow_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetOverflow_mode() {
    return this.overflow_mode != null;
  }

  public void setOverflow_modeIsSet(boolean value) {
    if (!value) {
      this.overflow_mode = null;
    }
  }

  public boolean isUse_column_pool() {
    return this.use_column_pool;
  }

  public TQueryOptions setUse_column_pool(boolean use_column_pool) {
    this.use_column_pool = use_column_pool;
    setUse_column_poolIsSet(true);
    return this;
  }

  public void unsetUse_column_pool() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_COLUMN_POOL_ISSET_ID);
  }

  /** Returns true if field use_column_pool is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_column_pool() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_COLUMN_POOL_ISSET_ID);
  }

  public void setUse_column_poolIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_COLUMN_POOL_ISSET_ID, value);
  }

  public boolean isEnable_agg_spill_preaggregation() {
    return this.enable_agg_spill_preaggregation;
  }

  public TQueryOptions setEnable_agg_spill_preaggregation(boolean enable_agg_spill_preaggregation) {
    this.enable_agg_spill_preaggregation = enable_agg_spill_preaggregation;
    setEnable_agg_spill_preaggregationIsSet(true);
    return this;
  }

  public void unsetEnable_agg_spill_preaggregation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_AGG_SPILL_PREAGGREGATION_ISSET_ID);
  }

  /** Returns true if field enable_agg_spill_preaggregation is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_agg_spill_preaggregation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_AGG_SPILL_PREAGGREGATION_ISSET_ID);
  }

  public void setEnable_agg_spill_preaggregationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_AGG_SPILL_PREAGGREGATION_ISSET_ID, value);
  }

  public long getGlobal_runtime_filter_build_max_size() {
    return this.global_runtime_filter_build_max_size;
  }

  public TQueryOptions setGlobal_runtime_filter_build_max_size(long global_runtime_filter_build_max_size) {
    this.global_runtime_filter_build_max_size = global_runtime_filter_build_max_size;
    setGlobal_runtime_filter_build_max_sizeIsSet(true);
    return this;
  }

  public void unsetGlobal_runtime_filter_build_max_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GLOBAL_RUNTIME_FILTER_BUILD_MAX_SIZE_ISSET_ID);
  }

  /** Returns true if field global_runtime_filter_build_max_size is set (has been assigned a value) and false otherwise */
  public boolean isSetGlobal_runtime_filter_build_max_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GLOBAL_RUNTIME_FILTER_BUILD_MAX_SIZE_ISSET_ID);
  }

  public void setGlobal_runtime_filter_build_max_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GLOBAL_RUNTIME_FILTER_BUILD_MAX_SIZE_ISSET_ID, value);
  }

  public long getRuntime_filter_rpc_http_min_size() {
    return this.runtime_filter_rpc_http_min_size;
  }

  public TQueryOptions setRuntime_filter_rpc_http_min_size(long runtime_filter_rpc_http_min_size) {
    this.runtime_filter_rpc_http_min_size = runtime_filter_rpc_http_min_size;
    setRuntime_filter_rpc_http_min_sizeIsSet(true);
    return this;
  }

  public void unsetRuntime_filter_rpc_http_min_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNTIME_FILTER_RPC_HTTP_MIN_SIZE_ISSET_ID);
  }

  /** Returns true if field runtime_filter_rpc_http_min_size is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_filter_rpc_http_min_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNTIME_FILTER_RPC_HTTP_MIN_SIZE_ISSET_ID);
  }

  public void setRuntime_filter_rpc_http_min_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNTIME_FILTER_RPC_HTTP_MIN_SIZE_ISSET_ID, value);
  }

  public long getBig_query_profile_threshold() {
    return this.big_query_profile_threshold;
  }

  public TQueryOptions setBig_query_profile_threshold(long big_query_profile_threshold) {
    this.big_query_profile_threshold = big_query_profile_threshold;
    setBig_query_profile_thresholdIsSet(true);
    return this;
  }

  public void unsetBig_query_profile_threshold() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIG_QUERY_PROFILE_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field big_query_profile_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetBig_query_profile_threshold() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIG_QUERY_PROFILE_THRESHOLD_ISSET_ID);
  }

  public void setBig_query_profile_thresholdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIG_QUERY_PROFILE_THRESHOLD_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TQueryQueueOptions getQuery_queue_options() {
    return this.query_queue_options;
  }

  public TQueryOptions setQuery_queue_options(@org.apache.thrift.annotation.Nullable TQueryQueueOptions query_queue_options) {
    this.query_queue_options = query_queue_options;
    return this;
  }

  public void unsetQuery_queue_options() {
    this.query_queue_options = null;
  }

  /** Returns true if field query_queue_options is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_queue_options() {
    return this.query_queue_options != null;
  }

  public void setQuery_queue_optionsIsSet(boolean value) {
    if (!value) {
      this.query_queue_options = null;
    }
  }

  public boolean isEnable_file_metacache() {
    return this.enable_file_metacache;
  }

  public TQueryOptions setEnable_file_metacache(boolean enable_file_metacache) {
    this.enable_file_metacache = enable_file_metacache;
    setEnable_file_metacacheIsSet(true);
    return this;
  }

  public void unsetEnable_file_metacache() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_FILE_METACACHE_ISSET_ID);
  }

  /** Returns true if field enable_file_metacache is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_file_metacache() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_FILE_METACACHE_ISSET_ID);
  }

  public void setEnable_file_metacacheIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_FILE_METACACHE_ISSET_ID, value);
  }

  public boolean isEnable_pipeline_level_shuffle() {
    return this.enable_pipeline_level_shuffle;
  }

  public TQueryOptions setEnable_pipeline_level_shuffle(boolean enable_pipeline_level_shuffle) {
    this.enable_pipeline_level_shuffle = enable_pipeline_level_shuffle;
    setEnable_pipeline_level_shuffleIsSet(true);
    return this;
  }

  public void unsetEnable_pipeline_level_shuffle() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_PIPELINE_LEVEL_SHUFFLE_ISSET_ID);
  }

  /** Returns true if field enable_pipeline_level_shuffle is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_pipeline_level_shuffle() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_PIPELINE_LEVEL_SHUFFLE_ISSET_ID);
  }

  public void setEnable_pipeline_level_shuffleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_PIPELINE_LEVEL_SHUFFLE_ISSET_ID, value);
  }

  public boolean isEnable_hyperscan_vec() {
    return this.enable_hyperscan_vec;
  }

  public TQueryOptions setEnable_hyperscan_vec(boolean enable_hyperscan_vec) {
    this.enable_hyperscan_vec = enable_hyperscan_vec;
    setEnable_hyperscan_vecIsSet(true);
    return this;
  }

  public void unsetEnable_hyperscan_vec() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_HYPERSCAN_VEC_ISSET_ID);
  }

  /** Returns true if field enable_hyperscan_vec is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_hyperscan_vec() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_HYPERSCAN_VEC_ISSET_ID);
  }

  public void setEnable_hyperscan_vecIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_HYPERSCAN_VEC_ISSET_ID, value);
  }

  public boolean isEnable_jit() {
    return this.enable_jit;
  }

  public TQueryOptions setEnable_jit(boolean enable_jit) {
    this.enable_jit = enable_jit;
    setEnable_jitIsSet(true);
    return this;
  }

  public void unsetEnable_jit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_JIT_ISSET_ID);
  }

  /** Returns true if field enable_jit is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_jit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_JIT_ISSET_ID);
  }

  public void setEnable_jitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_JIT_ISSET_ID, value);
  }

  /**
   * 
   * @see TTimeUnit
   */
  @org.apache.thrift.annotation.Nullable
  public TTimeUnit getBig_query_profile_threshold_unit() {
    return this.big_query_profile_threshold_unit;
  }

  /**
   * 
   * @see TTimeUnit
   */
  public TQueryOptions setBig_query_profile_threshold_unit(@org.apache.thrift.annotation.Nullable TTimeUnit big_query_profile_threshold_unit) {
    this.big_query_profile_threshold_unit = big_query_profile_threshold_unit;
    return this;
  }

  public void unsetBig_query_profile_threshold_unit() {
    this.big_query_profile_threshold_unit = null;
  }

  /** Returns true if field big_query_profile_threshold_unit is set (has been assigned a value) and false otherwise */
  public boolean isSetBig_query_profile_threshold_unit() {
    return this.big_query_profile_threshold_unit != null;
  }

  public void setBig_query_profile_threshold_unitIsSet(boolean value) {
    if (!value) {
      this.big_query_profile_threshold_unit = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSql_dialect() {
    return this.sql_dialect;
  }

  public TQueryOptions setSql_dialect(@org.apache.thrift.annotation.Nullable java.lang.String sql_dialect) {
    this.sql_dialect = sql_dialect;
    return this;
  }

  public void unsetSql_dialect() {
    this.sql_dialect = null;
  }

  /** Returns true if field sql_dialect is set (has been assigned a value) and false otherwise */
  public boolean isSetSql_dialect() {
    return this.sql_dialect != null;
  }

  public void setSql_dialectIsSet(boolean value) {
    if (!value) {
      this.sql_dialect = null;
    }
  }

  public boolean isEnable_spill_to_remote_storage() {
    return this.enable_spill_to_remote_storage;
  }

  public TQueryOptions setEnable_spill_to_remote_storage(boolean enable_spill_to_remote_storage) {
    this.enable_spill_to_remote_storage = enable_spill_to_remote_storage;
    setEnable_spill_to_remote_storageIsSet(true);
    return this;
  }

  public void unsetEnable_spill_to_remote_storage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_SPILL_TO_REMOTE_STORAGE_ISSET_ID);
  }

  /** Returns true if field enable_spill_to_remote_storage is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_spill_to_remote_storage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_SPILL_TO_REMOTE_STORAGE_ISSET_ID);
  }

  public void setEnable_spill_to_remote_storageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_SPILL_TO_REMOTE_STORAGE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TSpillToRemoteStorageOptions getSpill_to_remote_storage_options() {
    return this.spill_to_remote_storage_options;
  }

  public TQueryOptions setSpill_to_remote_storage_options(@org.apache.thrift.annotation.Nullable TSpillToRemoteStorageOptions spill_to_remote_storage_options) {
    this.spill_to_remote_storage_options = spill_to_remote_storage_options;
    return this;
  }

  public void unsetSpill_to_remote_storage_options() {
    this.spill_to_remote_storage_options = null;
  }

  /** Returns true if field spill_to_remote_storage_options is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_to_remote_storage_options() {
    return this.spill_to_remote_storage_options != null;
  }

  public void setSpill_to_remote_storage_optionsIsSet(boolean value) {
    if (!value) {
      this.spill_to_remote_storage_options = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case MAX_ERRORS:
      if (value == null) {
        unsetMax_errors();
      } else {
        setMax_errors((java.lang.Integer)value);
      }
      break;

    case BATCH_SIZE:
      if (value == null) {
        unsetBatch_size();
      } else {
        setBatch_size((java.lang.Integer)value);
      }
      break;

    case MEM_LIMIT:
      if (value == null) {
        unsetMem_limit();
      } else {
        setMem_limit((java.lang.Long)value);
      }
      break;

    case ABORT_ON_DEFAULT_LIMIT_EXCEEDED:
      if (value == null) {
        unsetAbort_on_default_limit_exceeded();
      } else {
        setAbort_on_default_limit_exceeded((java.lang.Boolean)value);
      }
      break;

    case QUERY_TIMEOUT:
      if (value == null) {
        unsetQuery_timeout();
      } else {
        setQuery_timeout((java.lang.Integer)value);
      }
      break;

    case ENABLE_PROFILE:
      if (value == null) {
        unsetEnable_profile();
      } else {
        setEnable_profile((java.lang.Boolean)value);
      }
      break;

    case QUERY_TYPE:
      if (value == null) {
        unsetQuery_type();
      } else {
        setQuery_type((TQueryType)value);
      }
      break;

    case LOAD_MEM_LIMIT:
      if (value == null) {
        unsetLoad_mem_limit();
      } else {
        setLoad_mem_limit((java.lang.Long)value);
      }
      break;

    case MAX_SCAN_KEY_NUM:
      if (value == null) {
        unsetMax_scan_key_num();
      } else {
        setMax_scan_key_num((java.lang.Integer)value);
      }
      break;

    case MAX_PUSHDOWN_CONDITIONS_PER_COLUMN:
      if (value == null) {
        unsetMax_pushdown_conditions_per_column();
      } else {
        setMax_pushdown_conditions_per_column((java.lang.Integer)value);
      }
      break;

    case ENABLE_SPILL:
      if (value == null) {
        unsetEnable_spill();
      } else {
        setEnable_spill((java.lang.Boolean)value);
      }
      break;

    case TRANSMISSION_COMPRESSION_TYPE:
      if (value == null) {
        unsetTransmission_compression_type();
      } else {
        setTransmission_compression_type((io.datafibre.fibre.thrift.TCompressionType)value);
      }
      break;

    case RUNTIME_JOIN_FILTER_PUSHDOWN_LIMIT:
      if (value == null) {
        unsetRuntime_join_filter_pushdown_limit();
      } else {
        setRuntime_join_filter_pushdown_limit((java.lang.Long)value);
      }
      break;

    case RUNTIME_FILTER_WAIT_TIMEOUT_MS:
      if (value == null) {
        unsetRuntime_filter_wait_timeout_ms();
      } else {
        setRuntime_filter_wait_timeout_ms((java.lang.Integer)value);
      }
      break;

    case RUNTIME_FILTER_SEND_TIMEOUT_MS:
      if (value == null) {
        unsetRuntime_filter_send_timeout_ms();
      } else {
        setRuntime_filter_send_timeout_ms((java.lang.Integer)value);
      }
      break;

    case PIPELINE_DOP:
      if (value == null) {
        unsetPipeline_dop();
      } else {
        setPipeline_dop((java.lang.Integer)value);
      }
      break;

    case PIPELINE_PROFILE_LEVEL:
      if (value == null) {
        unsetPipeline_profile_level();
      } else {
        setPipeline_profile_level((TPipelineProfileLevel)value);
      }
      break;

    case LOAD_DOP:
      if (value == null) {
        unsetLoad_dop();
      } else {
        setLoad_dop((java.lang.Integer)value);
      }
      break;

    case RUNTIME_FILTER_SCAN_WAIT_TIME_MS:
      if (value == null) {
        unsetRuntime_filter_scan_wait_time_ms();
      } else {
        setRuntime_filter_scan_wait_time_ms((java.lang.Long)value);
      }
      break;

    case QUERY_MEM_LIMIT:
      if (value == null) {
        unsetQuery_mem_limit();
      } else {
        setQuery_mem_limit((java.lang.Long)value);
      }
      break;

    case ENABLE_TABLET_INTERNAL_PARALLEL:
      if (value == null) {
        unsetEnable_tablet_internal_parallel();
      } else {
        setEnable_tablet_internal_parallel((java.lang.Boolean)value);
      }
      break;

    case QUERY_DELIVERY_TIMEOUT:
      if (value == null) {
        unsetQuery_delivery_timeout();
      } else {
        setQuery_delivery_timeout((java.lang.Integer)value);
      }
      break;

    case ENABLE_QUERY_DEBUG_TRACE:
      if (value == null) {
        unsetEnable_query_debug_trace();
      } else {
        setEnable_query_debug_trace((java.lang.Boolean)value);
      }
      break;

    case LOAD_TRANSMISSION_COMPRESSION_TYPE:
      if (value == null) {
        unsetLoad_transmission_compression_type();
      } else {
        setLoad_transmission_compression_type((io.datafibre.fibre.thrift.TCompressionType)value);
      }
      break;

    case TABLET_INTERNAL_PARALLEL_MODE:
      if (value == null) {
        unsetTablet_internal_parallel_mode();
      } else {
        setTablet_internal_parallel_mode((TTabletInternalParallelMode)value);
      }
      break;

    case LOAD_JOB_TYPE:
      if (value == null) {
        unsetLoad_job_type();
      } else {
        setLoad_job_type((TLoadJobType)value);
      }
      break;

    case ENABLE_SCAN_DATACACHE:
      if (value == null) {
        unsetEnable_scan_datacache();
      } else {
        setEnable_scan_datacache((java.lang.Boolean)value);
      }
      break;

    case ENABLE_PIPELINE_QUERY_STATISTIC:
      if (value == null) {
        unsetEnable_pipeline_query_statistic();
      } else {
        setEnable_pipeline_query_statistic((java.lang.Boolean)value);
      }
      break;

    case TRANSMISSION_ENCODE_LEVEL:
      if (value == null) {
        unsetTransmission_encode_level();
      } else {
        setTransmission_encode_level((java.lang.Integer)value);
      }
      break;

    case ENABLE_POPULATE_DATACACHE:
      if (value == null) {
        unsetEnable_populate_datacache();
      } else {
        setEnable_populate_datacache((java.lang.Boolean)value);
      }
      break;

    case ALLOW_THROW_EXCEPTION:
      if (value == null) {
        unsetAllow_throw_exception();
      } else {
        setAllow_throw_exception((java.lang.Boolean)value);
      }
      break;

    case HUDI_MOR_FORCE_JNI_READER:
      if (value == null) {
        unsetHudi_mor_force_jni_reader();
      } else {
        setHudi_mor_force_jni_reader((java.lang.Boolean)value);
      }
      break;

    case RPC_HTTP_MIN_SIZE:
      if (value == null) {
        unsetRpc_http_min_size();
      } else {
        setRpc_http_min_size((java.lang.Long)value);
      }
      break;

    case SPILL_MEM_TABLE_SIZE:
      if (value == null) {
        unsetSpill_mem_table_size();
      } else {
        setSpill_mem_table_size((java.lang.Integer)value);
      }
      break;

    case SPILL_MEM_TABLE_NUM:
      if (value == null) {
        unsetSpill_mem_table_num();
      } else {
        setSpill_mem_table_num((java.lang.Integer)value);
      }
      break;

    case SPILL_MEM_LIMIT_THRESHOLD:
      if (value == null) {
        unsetSpill_mem_limit_threshold();
      } else {
        setSpill_mem_limit_threshold((java.lang.Double)value);
      }
      break;

    case SPILL_OPERATOR_MIN_BYTES:
      if (value == null) {
        unsetSpill_operator_min_bytes();
      } else {
        setSpill_operator_min_bytes((java.lang.Long)value);
      }
      break;

    case SPILL_OPERATOR_MAX_BYTES:
      if (value == null) {
        unsetSpill_operator_max_bytes();
      } else {
        setSpill_operator_max_bytes((java.lang.Long)value);
      }
      break;

    case SPILL_ENCODE_LEVEL:
      if (value == null) {
        unsetSpill_encode_level();
      } else {
        setSpill_encode_level((java.lang.Integer)value);
      }
      break;

    case SPILL_REVOCABLE_MAX_BYTES:
      if (value == null) {
        unsetSpill_revocable_max_bytes();
      } else {
        setSpill_revocable_max_bytes((java.lang.Long)value);
      }
      break;

    case SPILL_ENABLE_DIRECT_IO:
      if (value == null) {
        unsetSpill_enable_direct_io();
      } else {
        setSpill_enable_direct_io((java.lang.Boolean)value);
      }
      break;

    case SPILL_RAND_RATIO:
      if (value == null) {
        unsetSpill_rand_ratio();
      } else {
        setSpill_rand_ratio((java.lang.Double)value);
      }
      break;

    case SPILL_MODE:
      if (value == null) {
        unsetSpill_mode();
      } else {
        setSpill_mode((TSpillMode)value);
      }
      break;

    case IO_TASKS_PER_SCAN_OPERATOR:
      if (value == null) {
        unsetIo_tasks_per_scan_operator();
      } else {
        setIo_tasks_per_scan_operator((java.lang.Integer)value);
      }
      break;

    case CONNECTOR_IO_TASKS_PER_SCAN_OPERATOR:
      if (value == null) {
        unsetConnector_io_tasks_per_scan_operator();
      } else {
        setConnector_io_tasks_per_scan_operator((java.lang.Integer)value);
      }
      break;

    case RUNTIME_FILTER_EARLY_RETURN_SELECTIVITY:
      if (value == null) {
        unsetRuntime_filter_early_return_selectivity();
      } else {
        setRuntime_filter_early_return_selectivity((java.lang.Double)value);
      }
      break;

    case ENABLE_DYNAMIC_PRUNE_SCAN_RANGE:
      if (value == null) {
        unsetEnable_dynamic_prune_scan_range();
      } else {
        setEnable_dynamic_prune_scan_range((java.lang.Boolean)value);
      }
      break;

    case LOG_REJECTED_RECORD_NUM:
      if (value == null) {
        unsetLog_rejected_record_num();
      } else {
        setLog_rejected_record_num((java.lang.Long)value);
      }
      break;

    case USE_PAGE_CACHE:
      if (value == null) {
        unsetUse_page_cache();
      } else {
        setUse_page_cache((java.lang.Boolean)value);
      }
      break;

    case ENABLE_CONNECTOR_ADAPTIVE_IO_TASKS:
      if (value == null) {
        unsetEnable_connector_adaptive_io_tasks();
      } else {
        setEnable_connector_adaptive_io_tasks((java.lang.Boolean)value);
      }
      break;

    case CONNECTOR_IO_TASKS_SLOW_IO_LATENCY_MS:
      if (value == null) {
        unsetConnector_io_tasks_slow_io_latency_ms();
      } else {
        setConnector_io_tasks_slow_io_latency_ms((java.lang.Integer)value);
      }
      break;

    case SCAN_USE_QUERY_MEM_RATIO:
      if (value == null) {
        unsetScan_use_query_mem_ratio();
      } else {
        setScan_use_query_mem_ratio((java.lang.Double)value);
      }
      break;

    case CONNECTOR_SCAN_USE_QUERY_MEM_RATIO:
      if (value == null) {
        unsetConnector_scan_use_query_mem_ratio();
      } else {
        setConnector_scan_use_query_mem_ratio((java.lang.Double)value);
      }
      break;

    case SPILLABLE_OPERATOR_MASK:
      if (value == null) {
        unsetSpillable_operator_mask();
      } else {
        setSpillable_operator_mask((java.lang.Long)value);
      }
      break;

    case LOAD_PROFILE_COLLECT_SECOND:
      if (value == null) {
        unsetLoad_profile_collect_second();
      } else {
        setLoad_profile_collect_second((java.lang.Long)value);
      }
      break;

    case GROUP_CONCAT_MAX_LEN:
      if (value == null) {
        unsetGroup_concat_max_len();
      } else {
        setGroup_concat_max_len((java.lang.Long)value);
      }
      break;

    case RUNTIME_PROFILE_REPORT_INTERVAL:
      if (value == null) {
        unsetRuntime_profile_report_interval();
      } else {
        setRuntime_profile_report_interval((java.lang.Long)value);
      }
      break;

    case ENABLE_COLLECT_TABLE_LEVEL_SCAN_STATS:
      if (value == null) {
        unsetEnable_collect_table_level_scan_stats();
      } else {
        setEnable_collect_table_level_scan_stats((java.lang.Boolean)value);
      }
      break;

    case INTERLEAVING_GROUP_SIZE:
      if (value == null) {
        unsetInterleaving_group_size();
      } else {
        setInterleaving_group_size((java.lang.Integer)value);
      }
      break;

    case OVERFLOW_MODE:
      if (value == null) {
        unsetOverflow_mode();
      } else {
        setOverflow_mode((TOverflowMode)value);
      }
      break;

    case USE_COLUMN_POOL:
      if (value == null) {
        unsetUse_column_pool();
      } else {
        setUse_column_pool((java.lang.Boolean)value);
      }
      break;

    case ENABLE_AGG_SPILL_PREAGGREGATION:
      if (value == null) {
        unsetEnable_agg_spill_preaggregation();
      } else {
        setEnable_agg_spill_preaggregation((java.lang.Boolean)value);
      }
      break;

    case GLOBAL_RUNTIME_FILTER_BUILD_MAX_SIZE:
      if (value == null) {
        unsetGlobal_runtime_filter_build_max_size();
      } else {
        setGlobal_runtime_filter_build_max_size((java.lang.Long)value);
      }
      break;

    case RUNTIME_FILTER_RPC_HTTP_MIN_SIZE:
      if (value == null) {
        unsetRuntime_filter_rpc_http_min_size();
      } else {
        setRuntime_filter_rpc_http_min_size((java.lang.Long)value);
      }
      break;

    case BIG_QUERY_PROFILE_THRESHOLD:
      if (value == null) {
        unsetBig_query_profile_threshold();
      } else {
        setBig_query_profile_threshold((java.lang.Long)value);
      }
      break;

    case QUERY_QUEUE_OPTIONS:
      if (value == null) {
        unsetQuery_queue_options();
      } else {
        setQuery_queue_options((TQueryQueueOptions)value);
      }
      break;

    case ENABLE_FILE_METACACHE:
      if (value == null) {
        unsetEnable_file_metacache();
      } else {
        setEnable_file_metacache((java.lang.Boolean)value);
      }
      break;

    case ENABLE_PIPELINE_LEVEL_SHUFFLE:
      if (value == null) {
        unsetEnable_pipeline_level_shuffle();
      } else {
        setEnable_pipeline_level_shuffle((java.lang.Boolean)value);
      }
      break;

    case ENABLE_HYPERSCAN_VEC:
      if (value == null) {
        unsetEnable_hyperscan_vec();
      } else {
        setEnable_hyperscan_vec((java.lang.Boolean)value);
      }
      break;

    case ENABLE_JIT:
      if (value == null) {
        unsetEnable_jit();
      } else {
        setEnable_jit((java.lang.Boolean)value);
      }
      break;

    case BIG_QUERY_PROFILE_THRESHOLD_UNIT:
      if (value == null) {
        unsetBig_query_profile_threshold_unit();
      } else {
        setBig_query_profile_threshold_unit((TTimeUnit)value);
      }
      break;

    case SQL_DIALECT:
      if (value == null) {
        unsetSql_dialect();
      } else {
        setSql_dialect((java.lang.String)value);
      }
      break;

    case ENABLE_SPILL_TO_REMOTE_STORAGE:
      if (value == null) {
        unsetEnable_spill_to_remote_storage();
      } else {
        setEnable_spill_to_remote_storage((java.lang.Boolean)value);
      }
      break;

    case SPILL_TO_REMOTE_STORAGE_OPTIONS:
      if (value == null) {
        unsetSpill_to_remote_storage_options();
      } else {
        setSpill_to_remote_storage_options((TSpillToRemoteStorageOptions)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MAX_ERRORS:
      return getMax_errors();

    case BATCH_SIZE:
      return getBatch_size();

    case MEM_LIMIT:
      return getMem_limit();

    case ABORT_ON_DEFAULT_LIMIT_EXCEEDED:
      return isAbort_on_default_limit_exceeded();

    case QUERY_TIMEOUT:
      return getQuery_timeout();

    case ENABLE_PROFILE:
      return isEnable_profile();

    case QUERY_TYPE:
      return getQuery_type();

    case LOAD_MEM_LIMIT:
      return getLoad_mem_limit();

    case MAX_SCAN_KEY_NUM:
      return getMax_scan_key_num();

    case MAX_PUSHDOWN_CONDITIONS_PER_COLUMN:
      return getMax_pushdown_conditions_per_column();

    case ENABLE_SPILL:
      return isEnable_spill();

    case TRANSMISSION_COMPRESSION_TYPE:
      return getTransmission_compression_type();

    case RUNTIME_JOIN_FILTER_PUSHDOWN_LIMIT:
      return getRuntime_join_filter_pushdown_limit();

    case RUNTIME_FILTER_WAIT_TIMEOUT_MS:
      return getRuntime_filter_wait_timeout_ms();

    case RUNTIME_FILTER_SEND_TIMEOUT_MS:
      return getRuntime_filter_send_timeout_ms();

    case PIPELINE_DOP:
      return getPipeline_dop();

    case PIPELINE_PROFILE_LEVEL:
      return getPipeline_profile_level();

    case LOAD_DOP:
      return getLoad_dop();

    case RUNTIME_FILTER_SCAN_WAIT_TIME_MS:
      return getRuntime_filter_scan_wait_time_ms();

    case QUERY_MEM_LIMIT:
      return getQuery_mem_limit();

    case ENABLE_TABLET_INTERNAL_PARALLEL:
      return isEnable_tablet_internal_parallel();

    case QUERY_DELIVERY_TIMEOUT:
      return getQuery_delivery_timeout();

    case ENABLE_QUERY_DEBUG_TRACE:
      return isEnable_query_debug_trace();

    case LOAD_TRANSMISSION_COMPRESSION_TYPE:
      return getLoad_transmission_compression_type();

    case TABLET_INTERNAL_PARALLEL_MODE:
      return getTablet_internal_parallel_mode();

    case LOAD_JOB_TYPE:
      return getLoad_job_type();

    case ENABLE_SCAN_DATACACHE:
      return isEnable_scan_datacache();

    case ENABLE_PIPELINE_QUERY_STATISTIC:
      return isEnable_pipeline_query_statistic();

    case TRANSMISSION_ENCODE_LEVEL:
      return getTransmission_encode_level();

    case ENABLE_POPULATE_DATACACHE:
      return isEnable_populate_datacache();

    case ALLOW_THROW_EXCEPTION:
      return isAllow_throw_exception();

    case HUDI_MOR_FORCE_JNI_READER:
      return isHudi_mor_force_jni_reader();

    case RPC_HTTP_MIN_SIZE:
      return getRpc_http_min_size();

    case SPILL_MEM_TABLE_SIZE:
      return getSpill_mem_table_size();

    case SPILL_MEM_TABLE_NUM:
      return getSpill_mem_table_num();

    case SPILL_MEM_LIMIT_THRESHOLD:
      return getSpill_mem_limit_threshold();

    case SPILL_OPERATOR_MIN_BYTES:
      return getSpill_operator_min_bytes();

    case SPILL_OPERATOR_MAX_BYTES:
      return getSpill_operator_max_bytes();

    case SPILL_ENCODE_LEVEL:
      return getSpill_encode_level();

    case SPILL_REVOCABLE_MAX_BYTES:
      return getSpill_revocable_max_bytes();

    case SPILL_ENABLE_DIRECT_IO:
      return isSpill_enable_direct_io();

    case SPILL_RAND_RATIO:
      return getSpill_rand_ratio();

    case SPILL_MODE:
      return getSpill_mode();

    case IO_TASKS_PER_SCAN_OPERATOR:
      return getIo_tasks_per_scan_operator();

    case CONNECTOR_IO_TASKS_PER_SCAN_OPERATOR:
      return getConnector_io_tasks_per_scan_operator();

    case RUNTIME_FILTER_EARLY_RETURN_SELECTIVITY:
      return getRuntime_filter_early_return_selectivity();

    case ENABLE_DYNAMIC_PRUNE_SCAN_RANGE:
      return isEnable_dynamic_prune_scan_range();

    case LOG_REJECTED_RECORD_NUM:
      return getLog_rejected_record_num();

    case USE_PAGE_CACHE:
      return isUse_page_cache();

    case ENABLE_CONNECTOR_ADAPTIVE_IO_TASKS:
      return isEnable_connector_adaptive_io_tasks();

    case CONNECTOR_IO_TASKS_SLOW_IO_LATENCY_MS:
      return getConnector_io_tasks_slow_io_latency_ms();

    case SCAN_USE_QUERY_MEM_RATIO:
      return getScan_use_query_mem_ratio();

    case CONNECTOR_SCAN_USE_QUERY_MEM_RATIO:
      return getConnector_scan_use_query_mem_ratio();

    case SPILLABLE_OPERATOR_MASK:
      return getSpillable_operator_mask();

    case LOAD_PROFILE_COLLECT_SECOND:
      return getLoad_profile_collect_second();

    case GROUP_CONCAT_MAX_LEN:
      return getGroup_concat_max_len();

    case RUNTIME_PROFILE_REPORT_INTERVAL:
      return getRuntime_profile_report_interval();

    case ENABLE_COLLECT_TABLE_LEVEL_SCAN_STATS:
      return isEnable_collect_table_level_scan_stats();

    case INTERLEAVING_GROUP_SIZE:
      return getInterleaving_group_size();

    case OVERFLOW_MODE:
      return getOverflow_mode();

    case USE_COLUMN_POOL:
      return isUse_column_pool();

    case ENABLE_AGG_SPILL_PREAGGREGATION:
      return isEnable_agg_spill_preaggregation();

    case GLOBAL_RUNTIME_FILTER_BUILD_MAX_SIZE:
      return getGlobal_runtime_filter_build_max_size();

    case RUNTIME_FILTER_RPC_HTTP_MIN_SIZE:
      return getRuntime_filter_rpc_http_min_size();

    case BIG_QUERY_PROFILE_THRESHOLD:
      return getBig_query_profile_threshold();

    case QUERY_QUEUE_OPTIONS:
      return getQuery_queue_options();

    case ENABLE_FILE_METACACHE:
      return isEnable_file_metacache();

    case ENABLE_PIPELINE_LEVEL_SHUFFLE:
      return isEnable_pipeline_level_shuffle();

    case ENABLE_HYPERSCAN_VEC:
      return isEnable_hyperscan_vec();

    case ENABLE_JIT:
      return isEnable_jit();

    case BIG_QUERY_PROFILE_THRESHOLD_UNIT:
      return getBig_query_profile_threshold_unit();

    case SQL_DIALECT:
      return getSql_dialect();

    case ENABLE_SPILL_TO_REMOTE_STORAGE:
      return isEnable_spill_to_remote_storage();

    case SPILL_TO_REMOTE_STORAGE_OPTIONS:
      return getSpill_to_remote_storage_options();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MAX_ERRORS:
      return isSetMax_errors();
    case BATCH_SIZE:
      return isSetBatch_size();
    case MEM_LIMIT:
      return isSetMem_limit();
    case ABORT_ON_DEFAULT_LIMIT_EXCEEDED:
      return isSetAbort_on_default_limit_exceeded();
    case QUERY_TIMEOUT:
      return isSetQuery_timeout();
    case ENABLE_PROFILE:
      return isSetEnable_profile();
    case QUERY_TYPE:
      return isSetQuery_type();
    case LOAD_MEM_LIMIT:
      return isSetLoad_mem_limit();
    case MAX_SCAN_KEY_NUM:
      return isSetMax_scan_key_num();
    case MAX_PUSHDOWN_CONDITIONS_PER_COLUMN:
      return isSetMax_pushdown_conditions_per_column();
    case ENABLE_SPILL:
      return isSetEnable_spill();
    case TRANSMISSION_COMPRESSION_TYPE:
      return isSetTransmission_compression_type();
    case RUNTIME_JOIN_FILTER_PUSHDOWN_LIMIT:
      return isSetRuntime_join_filter_pushdown_limit();
    case RUNTIME_FILTER_WAIT_TIMEOUT_MS:
      return isSetRuntime_filter_wait_timeout_ms();
    case RUNTIME_FILTER_SEND_TIMEOUT_MS:
      return isSetRuntime_filter_send_timeout_ms();
    case PIPELINE_DOP:
      return isSetPipeline_dop();
    case PIPELINE_PROFILE_LEVEL:
      return isSetPipeline_profile_level();
    case LOAD_DOP:
      return isSetLoad_dop();
    case RUNTIME_FILTER_SCAN_WAIT_TIME_MS:
      return isSetRuntime_filter_scan_wait_time_ms();
    case QUERY_MEM_LIMIT:
      return isSetQuery_mem_limit();
    case ENABLE_TABLET_INTERNAL_PARALLEL:
      return isSetEnable_tablet_internal_parallel();
    case QUERY_DELIVERY_TIMEOUT:
      return isSetQuery_delivery_timeout();
    case ENABLE_QUERY_DEBUG_TRACE:
      return isSetEnable_query_debug_trace();
    case LOAD_TRANSMISSION_COMPRESSION_TYPE:
      return isSetLoad_transmission_compression_type();
    case TABLET_INTERNAL_PARALLEL_MODE:
      return isSetTablet_internal_parallel_mode();
    case LOAD_JOB_TYPE:
      return isSetLoad_job_type();
    case ENABLE_SCAN_DATACACHE:
      return isSetEnable_scan_datacache();
    case ENABLE_PIPELINE_QUERY_STATISTIC:
      return isSetEnable_pipeline_query_statistic();
    case TRANSMISSION_ENCODE_LEVEL:
      return isSetTransmission_encode_level();
    case ENABLE_POPULATE_DATACACHE:
      return isSetEnable_populate_datacache();
    case ALLOW_THROW_EXCEPTION:
      return isSetAllow_throw_exception();
    case HUDI_MOR_FORCE_JNI_READER:
      return isSetHudi_mor_force_jni_reader();
    case RPC_HTTP_MIN_SIZE:
      return isSetRpc_http_min_size();
    case SPILL_MEM_TABLE_SIZE:
      return isSetSpill_mem_table_size();
    case SPILL_MEM_TABLE_NUM:
      return isSetSpill_mem_table_num();
    case SPILL_MEM_LIMIT_THRESHOLD:
      return isSetSpill_mem_limit_threshold();
    case SPILL_OPERATOR_MIN_BYTES:
      return isSetSpill_operator_min_bytes();
    case SPILL_OPERATOR_MAX_BYTES:
      return isSetSpill_operator_max_bytes();
    case SPILL_ENCODE_LEVEL:
      return isSetSpill_encode_level();
    case SPILL_REVOCABLE_MAX_BYTES:
      return isSetSpill_revocable_max_bytes();
    case SPILL_ENABLE_DIRECT_IO:
      return isSetSpill_enable_direct_io();
    case SPILL_RAND_RATIO:
      return isSetSpill_rand_ratio();
    case SPILL_MODE:
      return isSetSpill_mode();
    case IO_TASKS_PER_SCAN_OPERATOR:
      return isSetIo_tasks_per_scan_operator();
    case CONNECTOR_IO_TASKS_PER_SCAN_OPERATOR:
      return isSetConnector_io_tasks_per_scan_operator();
    case RUNTIME_FILTER_EARLY_RETURN_SELECTIVITY:
      return isSetRuntime_filter_early_return_selectivity();
    case ENABLE_DYNAMIC_PRUNE_SCAN_RANGE:
      return isSetEnable_dynamic_prune_scan_range();
    case LOG_REJECTED_RECORD_NUM:
      return isSetLog_rejected_record_num();
    case USE_PAGE_CACHE:
      return isSetUse_page_cache();
    case ENABLE_CONNECTOR_ADAPTIVE_IO_TASKS:
      return isSetEnable_connector_adaptive_io_tasks();
    case CONNECTOR_IO_TASKS_SLOW_IO_LATENCY_MS:
      return isSetConnector_io_tasks_slow_io_latency_ms();
    case SCAN_USE_QUERY_MEM_RATIO:
      return isSetScan_use_query_mem_ratio();
    case CONNECTOR_SCAN_USE_QUERY_MEM_RATIO:
      return isSetConnector_scan_use_query_mem_ratio();
    case SPILLABLE_OPERATOR_MASK:
      return isSetSpillable_operator_mask();
    case LOAD_PROFILE_COLLECT_SECOND:
      return isSetLoad_profile_collect_second();
    case GROUP_CONCAT_MAX_LEN:
      return isSetGroup_concat_max_len();
    case RUNTIME_PROFILE_REPORT_INTERVAL:
      return isSetRuntime_profile_report_interval();
    case ENABLE_COLLECT_TABLE_LEVEL_SCAN_STATS:
      return isSetEnable_collect_table_level_scan_stats();
    case INTERLEAVING_GROUP_SIZE:
      return isSetInterleaving_group_size();
    case OVERFLOW_MODE:
      return isSetOverflow_mode();
    case USE_COLUMN_POOL:
      return isSetUse_column_pool();
    case ENABLE_AGG_SPILL_PREAGGREGATION:
      return isSetEnable_agg_spill_preaggregation();
    case GLOBAL_RUNTIME_FILTER_BUILD_MAX_SIZE:
      return isSetGlobal_runtime_filter_build_max_size();
    case RUNTIME_FILTER_RPC_HTTP_MIN_SIZE:
      return isSetRuntime_filter_rpc_http_min_size();
    case BIG_QUERY_PROFILE_THRESHOLD:
      return isSetBig_query_profile_threshold();
    case QUERY_QUEUE_OPTIONS:
      return isSetQuery_queue_options();
    case ENABLE_FILE_METACACHE:
      return isSetEnable_file_metacache();
    case ENABLE_PIPELINE_LEVEL_SHUFFLE:
      return isSetEnable_pipeline_level_shuffle();
    case ENABLE_HYPERSCAN_VEC:
      return isSetEnable_hyperscan_vec();
    case ENABLE_JIT:
      return isSetEnable_jit();
    case BIG_QUERY_PROFILE_THRESHOLD_UNIT:
      return isSetBig_query_profile_threshold_unit();
    case SQL_DIALECT:
      return isSetSql_dialect();
    case ENABLE_SPILL_TO_REMOTE_STORAGE:
      return isSetEnable_spill_to_remote_storage();
    case SPILL_TO_REMOTE_STORAGE_OPTIONS:
      return isSetSpill_to_remote_storage_options();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TQueryOptions)
      return this.equals((TQueryOptions)that);
    return false;
  }

  public boolean equals(TQueryOptions that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_max_errors = true && this.isSetMax_errors();
    boolean that_present_max_errors = true && that.isSetMax_errors();
    if (this_present_max_errors || that_present_max_errors) {
      if (!(this_present_max_errors && that_present_max_errors))
        return false;
      if (this.max_errors != that.max_errors)
        return false;
    }

    boolean this_present_batch_size = true && this.isSetBatch_size();
    boolean that_present_batch_size = true && that.isSetBatch_size();
    if (this_present_batch_size || that_present_batch_size) {
      if (!(this_present_batch_size && that_present_batch_size))
        return false;
      if (this.batch_size != that.batch_size)
        return false;
    }

    boolean this_present_mem_limit = true && this.isSetMem_limit();
    boolean that_present_mem_limit = true && that.isSetMem_limit();
    if (this_present_mem_limit || that_present_mem_limit) {
      if (!(this_present_mem_limit && that_present_mem_limit))
        return false;
      if (this.mem_limit != that.mem_limit)
        return false;
    }

    boolean this_present_abort_on_default_limit_exceeded = true && this.isSetAbort_on_default_limit_exceeded();
    boolean that_present_abort_on_default_limit_exceeded = true && that.isSetAbort_on_default_limit_exceeded();
    if (this_present_abort_on_default_limit_exceeded || that_present_abort_on_default_limit_exceeded) {
      if (!(this_present_abort_on_default_limit_exceeded && that_present_abort_on_default_limit_exceeded))
        return false;
      if (this.abort_on_default_limit_exceeded != that.abort_on_default_limit_exceeded)
        return false;
    }

    boolean this_present_query_timeout = true && this.isSetQuery_timeout();
    boolean that_present_query_timeout = true && that.isSetQuery_timeout();
    if (this_present_query_timeout || that_present_query_timeout) {
      if (!(this_present_query_timeout && that_present_query_timeout))
        return false;
      if (this.query_timeout != that.query_timeout)
        return false;
    }

    boolean this_present_enable_profile = true && this.isSetEnable_profile();
    boolean that_present_enable_profile = true && that.isSetEnable_profile();
    if (this_present_enable_profile || that_present_enable_profile) {
      if (!(this_present_enable_profile && that_present_enable_profile))
        return false;
      if (this.enable_profile != that.enable_profile)
        return false;
    }

    boolean this_present_query_type = true && this.isSetQuery_type();
    boolean that_present_query_type = true && that.isSetQuery_type();
    if (this_present_query_type || that_present_query_type) {
      if (!(this_present_query_type && that_present_query_type))
        return false;
      if (!this.query_type.equals(that.query_type))
        return false;
    }

    boolean this_present_load_mem_limit = true && this.isSetLoad_mem_limit();
    boolean that_present_load_mem_limit = true && that.isSetLoad_mem_limit();
    if (this_present_load_mem_limit || that_present_load_mem_limit) {
      if (!(this_present_load_mem_limit && that_present_load_mem_limit))
        return false;
      if (this.load_mem_limit != that.load_mem_limit)
        return false;
    }

    boolean this_present_max_scan_key_num = true && this.isSetMax_scan_key_num();
    boolean that_present_max_scan_key_num = true && that.isSetMax_scan_key_num();
    if (this_present_max_scan_key_num || that_present_max_scan_key_num) {
      if (!(this_present_max_scan_key_num && that_present_max_scan_key_num))
        return false;
      if (this.max_scan_key_num != that.max_scan_key_num)
        return false;
    }

    boolean this_present_max_pushdown_conditions_per_column = true && this.isSetMax_pushdown_conditions_per_column();
    boolean that_present_max_pushdown_conditions_per_column = true && that.isSetMax_pushdown_conditions_per_column();
    if (this_present_max_pushdown_conditions_per_column || that_present_max_pushdown_conditions_per_column) {
      if (!(this_present_max_pushdown_conditions_per_column && that_present_max_pushdown_conditions_per_column))
        return false;
      if (this.max_pushdown_conditions_per_column != that.max_pushdown_conditions_per_column)
        return false;
    }

    boolean this_present_enable_spill = true && this.isSetEnable_spill();
    boolean that_present_enable_spill = true && that.isSetEnable_spill();
    if (this_present_enable_spill || that_present_enable_spill) {
      if (!(this_present_enable_spill && that_present_enable_spill))
        return false;
      if (this.enable_spill != that.enable_spill)
        return false;
    }

    boolean this_present_transmission_compression_type = true && this.isSetTransmission_compression_type();
    boolean that_present_transmission_compression_type = true && that.isSetTransmission_compression_type();
    if (this_present_transmission_compression_type || that_present_transmission_compression_type) {
      if (!(this_present_transmission_compression_type && that_present_transmission_compression_type))
        return false;
      if (!this.transmission_compression_type.equals(that.transmission_compression_type))
        return false;
    }

    boolean this_present_runtime_join_filter_pushdown_limit = true && this.isSetRuntime_join_filter_pushdown_limit();
    boolean that_present_runtime_join_filter_pushdown_limit = true && that.isSetRuntime_join_filter_pushdown_limit();
    if (this_present_runtime_join_filter_pushdown_limit || that_present_runtime_join_filter_pushdown_limit) {
      if (!(this_present_runtime_join_filter_pushdown_limit && that_present_runtime_join_filter_pushdown_limit))
        return false;
      if (this.runtime_join_filter_pushdown_limit != that.runtime_join_filter_pushdown_limit)
        return false;
    }

    boolean this_present_runtime_filter_wait_timeout_ms = true && this.isSetRuntime_filter_wait_timeout_ms();
    boolean that_present_runtime_filter_wait_timeout_ms = true && that.isSetRuntime_filter_wait_timeout_ms();
    if (this_present_runtime_filter_wait_timeout_ms || that_present_runtime_filter_wait_timeout_ms) {
      if (!(this_present_runtime_filter_wait_timeout_ms && that_present_runtime_filter_wait_timeout_ms))
        return false;
      if (this.runtime_filter_wait_timeout_ms != that.runtime_filter_wait_timeout_ms)
        return false;
    }

    boolean this_present_runtime_filter_send_timeout_ms = true && this.isSetRuntime_filter_send_timeout_ms();
    boolean that_present_runtime_filter_send_timeout_ms = true && that.isSetRuntime_filter_send_timeout_ms();
    if (this_present_runtime_filter_send_timeout_ms || that_present_runtime_filter_send_timeout_ms) {
      if (!(this_present_runtime_filter_send_timeout_ms && that_present_runtime_filter_send_timeout_ms))
        return false;
      if (this.runtime_filter_send_timeout_ms != that.runtime_filter_send_timeout_ms)
        return false;
    }

    boolean this_present_pipeline_dop = true && this.isSetPipeline_dop();
    boolean that_present_pipeline_dop = true && that.isSetPipeline_dop();
    if (this_present_pipeline_dop || that_present_pipeline_dop) {
      if (!(this_present_pipeline_dop && that_present_pipeline_dop))
        return false;
      if (this.pipeline_dop != that.pipeline_dop)
        return false;
    }

    boolean this_present_pipeline_profile_level = true && this.isSetPipeline_profile_level();
    boolean that_present_pipeline_profile_level = true && that.isSetPipeline_profile_level();
    if (this_present_pipeline_profile_level || that_present_pipeline_profile_level) {
      if (!(this_present_pipeline_profile_level && that_present_pipeline_profile_level))
        return false;
      if (!this.pipeline_profile_level.equals(that.pipeline_profile_level))
        return false;
    }

    boolean this_present_load_dop = true && this.isSetLoad_dop();
    boolean that_present_load_dop = true && that.isSetLoad_dop();
    if (this_present_load_dop || that_present_load_dop) {
      if (!(this_present_load_dop && that_present_load_dop))
        return false;
      if (this.load_dop != that.load_dop)
        return false;
    }

    boolean this_present_runtime_filter_scan_wait_time_ms = true && this.isSetRuntime_filter_scan_wait_time_ms();
    boolean that_present_runtime_filter_scan_wait_time_ms = true && that.isSetRuntime_filter_scan_wait_time_ms();
    if (this_present_runtime_filter_scan_wait_time_ms || that_present_runtime_filter_scan_wait_time_ms) {
      if (!(this_present_runtime_filter_scan_wait_time_ms && that_present_runtime_filter_scan_wait_time_ms))
        return false;
      if (this.runtime_filter_scan_wait_time_ms != that.runtime_filter_scan_wait_time_ms)
        return false;
    }

    boolean this_present_query_mem_limit = true && this.isSetQuery_mem_limit();
    boolean that_present_query_mem_limit = true && that.isSetQuery_mem_limit();
    if (this_present_query_mem_limit || that_present_query_mem_limit) {
      if (!(this_present_query_mem_limit && that_present_query_mem_limit))
        return false;
      if (this.query_mem_limit != that.query_mem_limit)
        return false;
    }

    boolean this_present_enable_tablet_internal_parallel = true && this.isSetEnable_tablet_internal_parallel();
    boolean that_present_enable_tablet_internal_parallel = true && that.isSetEnable_tablet_internal_parallel();
    if (this_present_enable_tablet_internal_parallel || that_present_enable_tablet_internal_parallel) {
      if (!(this_present_enable_tablet_internal_parallel && that_present_enable_tablet_internal_parallel))
        return false;
      if (this.enable_tablet_internal_parallel != that.enable_tablet_internal_parallel)
        return false;
    }

    boolean this_present_query_delivery_timeout = true && this.isSetQuery_delivery_timeout();
    boolean that_present_query_delivery_timeout = true && that.isSetQuery_delivery_timeout();
    if (this_present_query_delivery_timeout || that_present_query_delivery_timeout) {
      if (!(this_present_query_delivery_timeout && that_present_query_delivery_timeout))
        return false;
      if (this.query_delivery_timeout != that.query_delivery_timeout)
        return false;
    }

    boolean this_present_enable_query_debug_trace = true && this.isSetEnable_query_debug_trace();
    boolean that_present_enable_query_debug_trace = true && that.isSetEnable_query_debug_trace();
    if (this_present_enable_query_debug_trace || that_present_enable_query_debug_trace) {
      if (!(this_present_enable_query_debug_trace && that_present_enable_query_debug_trace))
        return false;
      if (this.enable_query_debug_trace != that.enable_query_debug_trace)
        return false;
    }

    boolean this_present_load_transmission_compression_type = true && this.isSetLoad_transmission_compression_type();
    boolean that_present_load_transmission_compression_type = true && that.isSetLoad_transmission_compression_type();
    if (this_present_load_transmission_compression_type || that_present_load_transmission_compression_type) {
      if (!(this_present_load_transmission_compression_type && that_present_load_transmission_compression_type))
        return false;
      if (!this.load_transmission_compression_type.equals(that.load_transmission_compression_type))
        return false;
    }

    boolean this_present_tablet_internal_parallel_mode = true && this.isSetTablet_internal_parallel_mode();
    boolean that_present_tablet_internal_parallel_mode = true && that.isSetTablet_internal_parallel_mode();
    if (this_present_tablet_internal_parallel_mode || that_present_tablet_internal_parallel_mode) {
      if (!(this_present_tablet_internal_parallel_mode && that_present_tablet_internal_parallel_mode))
        return false;
      if (!this.tablet_internal_parallel_mode.equals(that.tablet_internal_parallel_mode))
        return false;
    }

    boolean this_present_load_job_type = true && this.isSetLoad_job_type();
    boolean that_present_load_job_type = true && that.isSetLoad_job_type();
    if (this_present_load_job_type || that_present_load_job_type) {
      if (!(this_present_load_job_type && that_present_load_job_type))
        return false;
      if (!this.load_job_type.equals(that.load_job_type))
        return false;
    }

    boolean this_present_enable_scan_datacache = true && this.isSetEnable_scan_datacache();
    boolean that_present_enable_scan_datacache = true && that.isSetEnable_scan_datacache();
    if (this_present_enable_scan_datacache || that_present_enable_scan_datacache) {
      if (!(this_present_enable_scan_datacache && that_present_enable_scan_datacache))
        return false;
      if (this.enable_scan_datacache != that.enable_scan_datacache)
        return false;
    }

    boolean this_present_enable_pipeline_query_statistic = true && this.isSetEnable_pipeline_query_statistic();
    boolean that_present_enable_pipeline_query_statistic = true && that.isSetEnable_pipeline_query_statistic();
    if (this_present_enable_pipeline_query_statistic || that_present_enable_pipeline_query_statistic) {
      if (!(this_present_enable_pipeline_query_statistic && that_present_enable_pipeline_query_statistic))
        return false;
      if (this.enable_pipeline_query_statistic != that.enable_pipeline_query_statistic)
        return false;
    }

    boolean this_present_transmission_encode_level = true && this.isSetTransmission_encode_level();
    boolean that_present_transmission_encode_level = true && that.isSetTransmission_encode_level();
    if (this_present_transmission_encode_level || that_present_transmission_encode_level) {
      if (!(this_present_transmission_encode_level && that_present_transmission_encode_level))
        return false;
      if (this.transmission_encode_level != that.transmission_encode_level)
        return false;
    }

    boolean this_present_enable_populate_datacache = true && this.isSetEnable_populate_datacache();
    boolean that_present_enable_populate_datacache = true && that.isSetEnable_populate_datacache();
    if (this_present_enable_populate_datacache || that_present_enable_populate_datacache) {
      if (!(this_present_enable_populate_datacache && that_present_enable_populate_datacache))
        return false;
      if (this.enable_populate_datacache != that.enable_populate_datacache)
        return false;
    }

    boolean this_present_allow_throw_exception = true && this.isSetAllow_throw_exception();
    boolean that_present_allow_throw_exception = true && that.isSetAllow_throw_exception();
    if (this_present_allow_throw_exception || that_present_allow_throw_exception) {
      if (!(this_present_allow_throw_exception && that_present_allow_throw_exception))
        return false;
      if (this.allow_throw_exception != that.allow_throw_exception)
        return false;
    }

    boolean this_present_hudi_mor_force_jni_reader = true && this.isSetHudi_mor_force_jni_reader();
    boolean that_present_hudi_mor_force_jni_reader = true && that.isSetHudi_mor_force_jni_reader();
    if (this_present_hudi_mor_force_jni_reader || that_present_hudi_mor_force_jni_reader) {
      if (!(this_present_hudi_mor_force_jni_reader && that_present_hudi_mor_force_jni_reader))
        return false;
      if (this.hudi_mor_force_jni_reader != that.hudi_mor_force_jni_reader)
        return false;
    }

    boolean this_present_rpc_http_min_size = true && this.isSetRpc_http_min_size();
    boolean that_present_rpc_http_min_size = true && that.isSetRpc_http_min_size();
    if (this_present_rpc_http_min_size || that_present_rpc_http_min_size) {
      if (!(this_present_rpc_http_min_size && that_present_rpc_http_min_size))
        return false;
      if (this.rpc_http_min_size != that.rpc_http_min_size)
        return false;
    }

    boolean this_present_spill_mem_table_size = true && this.isSetSpill_mem_table_size();
    boolean that_present_spill_mem_table_size = true && that.isSetSpill_mem_table_size();
    if (this_present_spill_mem_table_size || that_present_spill_mem_table_size) {
      if (!(this_present_spill_mem_table_size && that_present_spill_mem_table_size))
        return false;
      if (this.spill_mem_table_size != that.spill_mem_table_size)
        return false;
    }

    boolean this_present_spill_mem_table_num = true && this.isSetSpill_mem_table_num();
    boolean that_present_spill_mem_table_num = true && that.isSetSpill_mem_table_num();
    if (this_present_spill_mem_table_num || that_present_spill_mem_table_num) {
      if (!(this_present_spill_mem_table_num && that_present_spill_mem_table_num))
        return false;
      if (this.spill_mem_table_num != that.spill_mem_table_num)
        return false;
    }

    boolean this_present_spill_mem_limit_threshold = true && this.isSetSpill_mem_limit_threshold();
    boolean that_present_spill_mem_limit_threshold = true && that.isSetSpill_mem_limit_threshold();
    if (this_present_spill_mem_limit_threshold || that_present_spill_mem_limit_threshold) {
      if (!(this_present_spill_mem_limit_threshold && that_present_spill_mem_limit_threshold))
        return false;
      if (this.spill_mem_limit_threshold != that.spill_mem_limit_threshold)
        return false;
    }

    boolean this_present_spill_operator_min_bytes = true && this.isSetSpill_operator_min_bytes();
    boolean that_present_spill_operator_min_bytes = true && that.isSetSpill_operator_min_bytes();
    if (this_present_spill_operator_min_bytes || that_present_spill_operator_min_bytes) {
      if (!(this_present_spill_operator_min_bytes && that_present_spill_operator_min_bytes))
        return false;
      if (this.spill_operator_min_bytes != that.spill_operator_min_bytes)
        return false;
    }

    boolean this_present_spill_operator_max_bytes = true && this.isSetSpill_operator_max_bytes();
    boolean that_present_spill_operator_max_bytes = true && that.isSetSpill_operator_max_bytes();
    if (this_present_spill_operator_max_bytes || that_present_spill_operator_max_bytes) {
      if (!(this_present_spill_operator_max_bytes && that_present_spill_operator_max_bytes))
        return false;
      if (this.spill_operator_max_bytes != that.spill_operator_max_bytes)
        return false;
    }

    boolean this_present_spill_encode_level = true && this.isSetSpill_encode_level();
    boolean that_present_spill_encode_level = true && that.isSetSpill_encode_level();
    if (this_present_spill_encode_level || that_present_spill_encode_level) {
      if (!(this_present_spill_encode_level && that_present_spill_encode_level))
        return false;
      if (this.spill_encode_level != that.spill_encode_level)
        return false;
    }

    boolean this_present_spill_revocable_max_bytes = true && this.isSetSpill_revocable_max_bytes();
    boolean that_present_spill_revocable_max_bytes = true && that.isSetSpill_revocable_max_bytes();
    if (this_present_spill_revocable_max_bytes || that_present_spill_revocable_max_bytes) {
      if (!(this_present_spill_revocable_max_bytes && that_present_spill_revocable_max_bytes))
        return false;
      if (this.spill_revocable_max_bytes != that.spill_revocable_max_bytes)
        return false;
    }

    boolean this_present_spill_enable_direct_io = true && this.isSetSpill_enable_direct_io();
    boolean that_present_spill_enable_direct_io = true && that.isSetSpill_enable_direct_io();
    if (this_present_spill_enable_direct_io || that_present_spill_enable_direct_io) {
      if (!(this_present_spill_enable_direct_io && that_present_spill_enable_direct_io))
        return false;
      if (this.spill_enable_direct_io != that.spill_enable_direct_io)
        return false;
    }

    boolean this_present_spill_rand_ratio = true && this.isSetSpill_rand_ratio();
    boolean that_present_spill_rand_ratio = true && that.isSetSpill_rand_ratio();
    if (this_present_spill_rand_ratio || that_present_spill_rand_ratio) {
      if (!(this_present_spill_rand_ratio && that_present_spill_rand_ratio))
        return false;
      if (this.spill_rand_ratio != that.spill_rand_ratio)
        return false;
    }

    boolean this_present_spill_mode = true && this.isSetSpill_mode();
    boolean that_present_spill_mode = true && that.isSetSpill_mode();
    if (this_present_spill_mode || that_present_spill_mode) {
      if (!(this_present_spill_mode && that_present_spill_mode))
        return false;
      if (!this.spill_mode.equals(that.spill_mode))
        return false;
    }

    boolean this_present_io_tasks_per_scan_operator = true && this.isSetIo_tasks_per_scan_operator();
    boolean that_present_io_tasks_per_scan_operator = true && that.isSetIo_tasks_per_scan_operator();
    if (this_present_io_tasks_per_scan_operator || that_present_io_tasks_per_scan_operator) {
      if (!(this_present_io_tasks_per_scan_operator && that_present_io_tasks_per_scan_operator))
        return false;
      if (this.io_tasks_per_scan_operator != that.io_tasks_per_scan_operator)
        return false;
    }

    boolean this_present_connector_io_tasks_per_scan_operator = true && this.isSetConnector_io_tasks_per_scan_operator();
    boolean that_present_connector_io_tasks_per_scan_operator = true && that.isSetConnector_io_tasks_per_scan_operator();
    if (this_present_connector_io_tasks_per_scan_operator || that_present_connector_io_tasks_per_scan_operator) {
      if (!(this_present_connector_io_tasks_per_scan_operator && that_present_connector_io_tasks_per_scan_operator))
        return false;
      if (this.connector_io_tasks_per_scan_operator != that.connector_io_tasks_per_scan_operator)
        return false;
    }

    boolean this_present_runtime_filter_early_return_selectivity = true && this.isSetRuntime_filter_early_return_selectivity();
    boolean that_present_runtime_filter_early_return_selectivity = true && that.isSetRuntime_filter_early_return_selectivity();
    if (this_present_runtime_filter_early_return_selectivity || that_present_runtime_filter_early_return_selectivity) {
      if (!(this_present_runtime_filter_early_return_selectivity && that_present_runtime_filter_early_return_selectivity))
        return false;
      if (this.runtime_filter_early_return_selectivity != that.runtime_filter_early_return_selectivity)
        return false;
    }

    boolean this_present_enable_dynamic_prune_scan_range = true && this.isSetEnable_dynamic_prune_scan_range();
    boolean that_present_enable_dynamic_prune_scan_range = true && that.isSetEnable_dynamic_prune_scan_range();
    if (this_present_enable_dynamic_prune_scan_range || that_present_enable_dynamic_prune_scan_range) {
      if (!(this_present_enable_dynamic_prune_scan_range && that_present_enable_dynamic_prune_scan_range))
        return false;
      if (this.enable_dynamic_prune_scan_range != that.enable_dynamic_prune_scan_range)
        return false;
    }

    boolean this_present_log_rejected_record_num = true && this.isSetLog_rejected_record_num();
    boolean that_present_log_rejected_record_num = true && that.isSetLog_rejected_record_num();
    if (this_present_log_rejected_record_num || that_present_log_rejected_record_num) {
      if (!(this_present_log_rejected_record_num && that_present_log_rejected_record_num))
        return false;
      if (this.log_rejected_record_num != that.log_rejected_record_num)
        return false;
    }

    boolean this_present_use_page_cache = true && this.isSetUse_page_cache();
    boolean that_present_use_page_cache = true && that.isSetUse_page_cache();
    if (this_present_use_page_cache || that_present_use_page_cache) {
      if (!(this_present_use_page_cache && that_present_use_page_cache))
        return false;
      if (this.use_page_cache != that.use_page_cache)
        return false;
    }

    boolean this_present_enable_connector_adaptive_io_tasks = true && this.isSetEnable_connector_adaptive_io_tasks();
    boolean that_present_enable_connector_adaptive_io_tasks = true && that.isSetEnable_connector_adaptive_io_tasks();
    if (this_present_enable_connector_adaptive_io_tasks || that_present_enable_connector_adaptive_io_tasks) {
      if (!(this_present_enable_connector_adaptive_io_tasks && that_present_enable_connector_adaptive_io_tasks))
        return false;
      if (this.enable_connector_adaptive_io_tasks != that.enable_connector_adaptive_io_tasks)
        return false;
    }

    boolean this_present_connector_io_tasks_slow_io_latency_ms = true && this.isSetConnector_io_tasks_slow_io_latency_ms();
    boolean that_present_connector_io_tasks_slow_io_latency_ms = true && that.isSetConnector_io_tasks_slow_io_latency_ms();
    if (this_present_connector_io_tasks_slow_io_latency_ms || that_present_connector_io_tasks_slow_io_latency_ms) {
      if (!(this_present_connector_io_tasks_slow_io_latency_ms && that_present_connector_io_tasks_slow_io_latency_ms))
        return false;
      if (this.connector_io_tasks_slow_io_latency_ms != that.connector_io_tasks_slow_io_latency_ms)
        return false;
    }

    boolean this_present_scan_use_query_mem_ratio = true && this.isSetScan_use_query_mem_ratio();
    boolean that_present_scan_use_query_mem_ratio = true && that.isSetScan_use_query_mem_ratio();
    if (this_present_scan_use_query_mem_ratio || that_present_scan_use_query_mem_ratio) {
      if (!(this_present_scan_use_query_mem_ratio && that_present_scan_use_query_mem_ratio))
        return false;
      if (this.scan_use_query_mem_ratio != that.scan_use_query_mem_ratio)
        return false;
    }

    boolean this_present_connector_scan_use_query_mem_ratio = true && this.isSetConnector_scan_use_query_mem_ratio();
    boolean that_present_connector_scan_use_query_mem_ratio = true && that.isSetConnector_scan_use_query_mem_ratio();
    if (this_present_connector_scan_use_query_mem_ratio || that_present_connector_scan_use_query_mem_ratio) {
      if (!(this_present_connector_scan_use_query_mem_ratio && that_present_connector_scan_use_query_mem_ratio))
        return false;
      if (this.connector_scan_use_query_mem_ratio != that.connector_scan_use_query_mem_ratio)
        return false;
    }

    boolean this_present_spillable_operator_mask = true && this.isSetSpillable_operator_mask();
    boolean that_present_spillable_operator_mask = true && that.isSetSpillable_operator_mask();
    if (this_present_spillable_operator_mask || that_present_spillable_operator_mask) {
      if (!(this_present_spillable_operator_mask && that_present_spillable_operator_mask))
        return false;
      if (this.spillable_operator_mask != that.spillable_operator_mask)
        return false;
    }

    boolean this_present_load_profile_collect_second = true && this.isSetLoad_profile_collect_second();
    boolean that_present_load_profile_collect_second = true && that.isSetLoad_profile_collect_second();
    if (this_present_load_profile_collect_second || that_present_load_profile_collect_second) {
      if (!(this_present_load_profile_collect_second && that_present_load_profile_collect_second))
        return false;
      if (this.load_profile_collect_second != that.load_profile_collect_second)
        return false;
    }

    boolean this_present_group_concat_max_len = true && this.isSetGroup_concat_max_len();
    boolean that_present_group_concat_max_len = true && that.isSetGroup_concat_max_len();
    if (this_present_group_concat_max_len || that_present_group_concat_max_len) {
      if (!(this_present_group_concat_max_len && that_present_group_concat_max_len))
        return false;
      if (this.group_concat_max_len != that.group_concat_max_len)
        return false;
    }

    boolean this_present_runtime_profile_report_interval = true && this.isSetRuntime_profile_report_interval();
    boolean that_present_runtime_profile_report_interval = true && that.isSetRuntime_profile_report_interval();
    if (this_present_runtime_profile_report_interval || that_present_runtime_profile_report_interval) {
      if (!(this_present_runtime_profile_report_interval && that_present_runtime_profile_report_interval))
        return false;
      if (this.runtime_profile_report_interval != that.runtime_profile_report_interval)
        return false;
    }

    boolean this_present_enable_collect_table_level_scan_stats = true && this.isSetEnable_collect_table_level_scan_stats();
    boolean that_present_enable_collect_table_level_scan_stats = true && that.isSetEnable_collect_table_level_scan_stats();
    if (this_present_enable_collect_table_level_scan_stats || that_present_enable_collect_table_level_scan_stats) {
      if (!(this_present_enable_collect_table_level_scan_stats && that_present_enable_collect_table_level_scan_stats))
        return false;
      if (this.enable_collect_table_level_scan_stats != that.enable_collect_table_level_scan_stats)
        return false;
    }

    boolean this_present_interleaving_group_size = true && this.isSetInterleaving_group_size();
    boolean that_present_interleaving_group_size = true && that.isSetInterleaving_group_size();
    if (this_present_interleaving_group_size || that_present_interleaving_group_size) {
      if (!(this_present_interleaving_group_size && that_present_interleaving_group_size))
        return false;
      if (this.interleaving_group_size != that.interleaving_group_size)
        return false;
    }

    boolean this_present_overflow_mode = true && this.isSetOverflow_mode();
    boolean that_present_overflow_mode = true && that.isSetOverflow_mode();
    if (this_present_overflow_mode || that_present_overflow_mode) {
      if (!(this_present_overflow_mode && that_present_overflow_mode))
        return false;
      if (!this.overflow_mode.equals(that.overflow_mode))
        return false;
    }

    boolean this_present_use_column_pool = true && this.isSetUse_column_pool();
    boolean that_present_use_column_pool = true && that.isSetUse_column_pool();
    if (this_present_use_column_pool || that_present_use_column_pool) {
      if (!(this_present_use_column_pool && that_present_use_column_pool))
        return false;
      if (this.use_column_pool != that.use_column_pool)
        return false;
    }

    boolean this_present_enable_agg_spill_preaggregation = true && this.isSetEnable_agg_spill_preaggregation();
    boolean that_present_enable_agg_spill_preaggregation = true && that.isSetEnable_agg_spill_preaggregation();
    if (this_present_enable_agg_spill_preaggregation || that_present_enable_agg_spill_preaggregation) {
      if (!(this_present_enable_agg_spill_preaggregation && that_present_enable_agg_spill_preaggregation))
        return false;
      if (this.enable_agg_spill_preaggregation != that.enable_agg_spill_preaggregation)
        return false;
    }

    boolean this_present_global_runtime_filter_build_max_size = true && this.isSetGlobal_runtime_filter_build_max_size();
    boolean that_present_global_runtime_filter_build_max_size = true && that.isSetGlobal_runtime_filter_build_max_size();
    if (this_present_global_runtime_filter_build_max_size || that_present_global_runtime_filter_build_max_size) {
      if (!(this_present_global_runtime_filter_build_max_size && that_present_global_runtime_filter_build_max_size))
        return false;
      if (this.global_runtime_filter_build_max_size != that.global_runtime_filter_build_max_size)
        return false;
    }

    boolean this_present_runtime_filter_rpc_http_min_size = true && this.isSetRuntime_filter_rpc_http_min_size();
    boolean that_present_runtime_filter_rpc_http_min_size = true && that.isSetRuntime_filter_rpc_http_min_size();
    if (this_present_runtime_filter_rpc_http_min_size || that_present_runtime_filter_rpc_http_min_size) {
      if (!(this_present_runtime_filter_rpc_http_min_size && that_present_runtime_filter_rpc_http_min_size))
        return false;
      if (this.runtime_filter_rpc_http_min_size != that.runtime_filter_rpc_http_min_size)
        return false;
    }

    boolean this_present_big_query_profile_threshold = true && this.isSetBig_query_profile_threshold();
    boolean that_present_big_query_profile_threshold = true && that.isSetBig_query_profile_threshold();
    if (this_present_big_query_profile_threshold || that_present_big_query_profile_threshold) {
      if (!(this_present_big_query_profile_threshold && that_present_big_query_profile_threshold))
        return false;
      if (this.big_query_profile_threshold != that.big_query_profile_threshold)
        return false;
    }

    boolean this_present_query_queue_options = true && this.isSetQuery_queue_options();
    boolean that_present_query_queue_options = true && that.isSetQuery_queue_options();
    if (this_present_query_queue_options || that_present_query_queue_options) {
      if (!(this_present_query_queue_options && that_present_query_queue_options))
        return false;
      if (!this.query_queue_options.equals(that.query_queue_options))
        return false;
    }

    boolean this_present_enable_file_metacache = true && this.isSetEnable_file_metacache();
    boolean that_present_enable_file_metacache = true && that.isSetEnable_file_metacache();
    if (this_present_enable_file_metacache || that_present_enable_file_metacache) {
      if (!(this_present_enable_file_metacache && that_present_enable_file_metacache))
        return false;
      if (this.enable_file_metacache != that.enable_file_metacache)
        return false;
    }

    boolean this_present_enable_pipeline_level_shuffle = true && this.isSetEnable_pipeline_level_shuffle();
    boolean that_present_enable_pipeline_level_shuffle = true && that.isSetEnable_pipeline_level_shuffle();
    if (this_present_enable_pipeline_level_shuffle || that_present_enable_pipeline_level_shuffle) {
      if (!(this_present_enable_pipeline_level_shuffle && that_present_enable_pipeline_level_shuffle))
        return false;
      if (this.enable_pipeline_level_shuffle != that.enable_pipeline_level_shuffle)
        return false;
    }

    boolean this_present_enable_hyperscan_vec = true && this.isSetEnable_hyperscan_vec();
    boolean that_present_enable_hyperscan_vec = true && that.isSetEnable_hyperscan_vec();
    if (this_present_enable_hyperscan_vec || that_present_enable_hyperscan_vec) {
      if (!(this_present_enable_hyperscan_vec && that_present_enable_hyperscan_vec))
        return false;
      if (this.enable_hyperscan_vec != that.enable_hyperscan_vec)
        return false;
    }

    boolean this_present_enable_jit = true && this.isSetEnable_jit();
    boolean that_present_enable_jit = true && that.isSetEnable_jit();
    if (this_present_enable_jit || that_present_enable_jit) {
      if (!(this_present_enable_jit && that_present_enable_jit))
        return false;
      if (this.enable_jit != that.enable_jit)
        return false;
    }

    boolean this_present_big_query_profile_threshold_unit = true && this.isSetBig_query_profile_threshold_unit();
    boolean that_present_big_query_profile_threshold_unit = true && that.isSetBig_query_profile_threshold_unit();
    if (this_present_big_query_profile_threshold_unit || that_present_big_query_profile_threshold_unit) {
      if (!(this_present_big_query_profile_threshold_unit && that_present_big_query_profile_threshold_unit))
        return false;
      if (!this.big_query_profile_threshold_unit.equals(that.big_query_profile_threshold_unit))
        return false;
    }

    boolean this_present_sql_dialect = true && this.isSetSql_dialect();
    boolean that_present_sql_dialect = true && that.isSetSql_dialect();
    if (this_present_sql_dialect || that_present_sql_dialect) {
      if (!(this_present_sql_dialect && that_present_sql_dialect))
        return false;
      if (!this.sql_dialect.equals(that.sql_dialect))
        return false;
    }

    boolean this_present_enable_spill_to_remote_storage = true && this.isSetEnable_spill_to_remote_storage();
    boolean that_present_enable_spill_to_remote_storage = true && that.isSetEnable_spill_to_remote_storage();
    if (this_present_enable_spill_to_remote_storage || that_present_enable_spill_to_remote_storage) {
      if (!(this_present_enable_spill_to_remote_storage && that_present_enable_spill_to_remote_storage))
        return false;
      if (this.enable_spill_to_remote_storage != that.enable_spill_to_remote_storage)
        return false;
    }

    boolean this_present_spill_to_remote_storage_options = true && this.isSetSpill_to_remote_storage_options();
    boolean that_present_spill_to_remote_storage_options = true && that.isSetSpill_to_remote_storage_options();
    if (this_present_spill_to_remote_storage_options || that_present_spill_to_remote_storage_options) {
      if (!(this_present_spill_to_remote_storage_options && that_present_spill_to_remote_storage_options))
        return false;
      if (!this.spill_to_remote_storage_options.equals(that.spill_to_remote_storage_options))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMax_errors()) ? 131071 : 524287);
    if (isSetMax_errors())
      hashCode = hashCode * 8191 + max_errors;

    hashCode = hashCode * 8191 + ((isSetBatch_size()) ? 131071 : 524287);
    if (isSetBatch_size())
      hashCode = hashCode * 8191 + batch_size;

    hashCode = hashCode * 8191 + ((isSetMem_limit()) ? 131071 : 524287);
    if (isSetMem_limit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mem_limit);

    hashCode = hashCode * 8191 + ((isSetAbort_on_default_limit_exceeded()) ? 131071 : 524287);
    if (isSetAbort_on_default_limit_exceeded())
      hashCode = hashCode * 8191 + ((abort_on_default_limit_exceeded) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetQuery_timeout()) ? 131071 : 524287);
    if (isSetQuery_timeout())
      hashCode = hashCode * 8191 + query_timeout;

    hashCode = hashCode * 8191 + ((isSetEnable_profile()) ? 131071 : 524287);
    if (isSetEnable_profile())
      hashCode = hashCode * 8191 + ((enable_profile) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetQuery_type()) ? 131071 : 524287);
    if (isSetQuery_type())
      hashCode = hashCode * 8191 + query_type.getValue();

    hashCode = hashCode * 8191 + ((isSetLoad_mem_limit()) ? 131071 : 524287);
    if (isSetLoad_mem_limit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(load_mem_limit);

    hashCode = hashCode * 8191 + ((isSetMax_scan_key_num()) ? 131071 : 524287);
    if (isSetMax_scan_key_num())
      hashCode = hashCode * 8191 + max_scan_key_num;

    hashCode = hashCode * 8191 + ((isSetMax_pushdown_conditions_per_column()) ? 131071 : 524287);
    if (isSetMax_pushdown_conditions_per_column())
      hashCode = hashCode * 8191 + max_pushdown_conditions_per_column;

    hashCode = hashCode * 8191 + ((isSetEnable_spill()) ? 131071 : 524287);
    if (isSetEnable_spill())
      hashCode = hashCode * 8191 + ((enable_spill) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTransmission_compression_type()) ? 131071 : 524287);
    if (isSetTransmission_compression_type())
      hashCode = hashCode * 8191 + transmission_compression_type.getValue();

    hashCode = hashCode * 8191 + ((isSetRuntime_join_filter_pushdown_limit()) ? 131071 : 524287);
    if (isSetRuntime_join_filter_pushdown_limit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(runtime_join_filter_pushdown_limit);

    hashCode = hashCode * 8191 + ((isSetRuntime_filter_wait_timeout_ms()) ? 131071 : 524287);
    if (isSetRuntime_filter_wait_timeout_ms())
      hashCode = hashCode * 8191 + runtime_filter_wait_timeout_ms;

    hashCode = hashCode * 8191 + ((isSetRuntime_filter_send_timeout_ms()) ? 131071 : 524287);
    if (isSetRuntime_filter_send_timeout_ms())
      hashCode = hashCode * 8191 + runtime_filter_send_timeout_ms;

    hashCode = hashCode * 8191 + ((isSetPipeline_dop()) ? 131071 : 524287);
    if (isSetPipeline_dop())
      hashCode = hashCode * 8191 + pipeline_dop;

    hashCode = hashCode * 8191 + ((isSetPipeline_profile_level()) ? 131071 : 524287);
    if (isSetPipeline_profile_level())
      hashCode = hashCode * 8191 + pipeline_profile_level.getValue();

    hashCode = hashCode * 8191 + ((isSetLoad_dop()) ? 131071 : 524287);
    if (isSetLoad_dop())
      hashCode = hashCode * 8191 + load_dop;

    hashCode = hashCode * 8191 + ((isSetRuntime_filter_scan_wait_time_ms()) ? 131071 : 524287);
    if (isSetRuntime_filter_scan_wait_time_ms())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(runtime_filter_scan_wait_time_ms);

    hashCode = hashCode * 8191 + ((isSetQuery_mem_limit()) ? 131071 : 524287);
    if (isSetQuery_mem_limit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(query_mem_limit);

    hashCode = hashCode * 8191 + ((isSetEnable_tablet_internal_parallel()) ? 131071 : 524287);
    if (isSetEnable_tablet_internal_parallel())
      hashCode = hashCode * 8191 + ((enable_tablet_internal_parallel) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetQuery_delivery_timeout()) ? 131071 : 524287);
    if (isSetQuery_delivery_timeout())
      hashCode = hashCode * 8191 + query_delivery_timeout;

    hashCode = hashCode * 8191 + ((isSetEnable_query_debug_trace()) ? 131071 : 524287);
    if (isSetEnable_query_debug_trace())
      hashCode = hashCode * 8191 + ((enable_query_debug_trace) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetLoad_transmission_compression_type()) ? 131071 : 524287);
    if (isSetLoad_transmission_compression_type())
      hashCode = hashCode * 8191 + load_transmission_compression_type.getValue();

    hashCode = hashCode * 8191 + ((isSetTablet_internal_parallel_mode()) ? 131071 : 524287);
    if (isSetTablet_internal_parallel_mode())
      hashCode = hashCode * 8191 + tablet_internal_parallel_mode.getValue();

    hashCode = hashCode * 8191 + ((isSetLoad_job_type()) ? 131071 : 524287);
    if (isSetLoad_job_type())
      hashCode = hashCode * 8191 + load_job_type.getValue();

    hashCode = hashCode * 8191 + ((isSetEnable_scan_datacache()) ? 131071 : 524287);
    if (isSetEnable_scan_datacache())
      hashCode = hashCode * 8191 + ((enable_scan_datacache) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnable_pipeline_query_statistic()) ? 131071 : 524287);
    if (isSetEnable_pipeline_query_statistic())
      hashCode = hashCode * 8191 + ((enable_pipeline_query_statistic) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTransmission_encode_level()) ? 131071 : 524287);
    if (isSetTransmission_encode_level())
      hashCode = hashCode * 8191 + transmission_encode_level;

    hashCode = hashCode * 8191 + ((isSetEnable_populate_datacache()) ? 131071 : 524287);
    if (isSetEnable_populate_datacache())
      hashCode = hashCode * 8191 + ((enable_populate_datacache) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAllow_throw_exception()) ? 131071 : 524287);
    if (isSetAllow_throw_exception())
      hashCode = hashCode * 8191 + ((allow_throw_exception) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetHudi_mor_force_jni_reader()) ? 131071 : 524287);
    if (isSetHudi_mor_force_jni_reader())
      hashCode = hashCode * 8191 + ((hudi_mor_force_jni_reader) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetRpc_http_min_size()) ? 131071 : 524287);
    if (isSetRpc_http_min_size())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rpc_http_min_size);

    hashCode = hashCode * 8191 + ((isSetSpill_mem_table_size()) ? 131071 : 524287);
    if (isSetSpill_mem_table_size())
      hashCode = hashCode * 8191 + spill_mem_table_size;

    hashCode = hashCode * 8191 + ((isSetSpill_mem_table_num()) ? 131071 : 524287);
    if (isSetSpill_mem_table_num())
      hashCode = hashCode * 8191 + spill_mem_table_num;

    hashCode = hashCode * 8191 + ((isSetSpill_mem_limit_threshold()) ? 131071 : 524287);
    if (isSetSpill_mem_limit_threshold())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spill_mem_limit_threshold);

    hashCode = hashCode * 8191 + ((isSetSpill_operator_min_bytes()) ? 131071 : 524287);
    if (isSetSpill_operator_min_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spill_operator_min_bytes);

    hashCode = hashCode * 8191 + ((isSetSpill_operator_max_bytes()) ? 131071 : 524287);
    if (isSetSpill_operator_max_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spill_operator_max_bytes);

    hashCode = hashCode * 8191 + ((isSetSpill_encode_level()) ? 131071 : 524287);
    if (isSetSpill_encode_level())
      hashCode = hashCode * 8191 + spill_encode_level;

    hashCode = hashCode * 8191 + ((isSetSpill_revocable_max_bytes()) ? 131071 : 524287);
    if (isSetSpill_revocable_max_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spill_revocable_max_bytes);

    hashCode = hashCode * 8191 + ((isSetSpill_enable_direct_io()) ? 131071 : 524287);
    if (isSetSpill_enable_direct_io())
      hashCode = hashCode * 8191 + ((spill_enable_direct_io) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSpill_rand_ratio()) ? 131071 : 524287);
    if (isSetSpill_rand_ratio())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spill_rand_ratio);

    hashCode = hashCode * 8191 + ((isSetSpill_mode()) ? 131071 : 524287);
    if (isSetSpill_mode())
      hashCode = hashCode * 8191 + spill_mode.getValue();

    hashCode = hashCode * 8191 + ((isSetIo_tasks_per_scan_operator()) ? 131071 : 524287);
    if (isSetIo_tasks_per_scan_operator())
      hashCode = hashCode * 8191 + io_tasks_per_scan_operator;

    hashCode = hashCode * 8191 + ((isSetConnector_io_tasks_per_scan_operator()) ? 131071 : 524287);
    if (isSetConnector_io_tasks_per_scan_operator())
      hashCode = hashCode * 8191 + connector_io_tasks_per_scan_operator;

    hashCode = hashCode * 8191 + ((isSetRuntime_filter_early_return_selectivity()) ? 131071 : 524287);
    if (isSetRuntime_filter_early_return_selectivity())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(runtime_filter_early_return_selectivity);

    hashCode = hashCode * 8191 + ((isSetEnable_dynamic_prune_scan_range()) ? 131071 : 524287);
    if (isSetEnable_dynamic_prune_scan_range())
      hashCode = hashCode * 8191 + ((enable_dynamic_prune_scan_range) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetLog_rejected_record_num()) ? 131071 : 524287);
    if (isSetLog_rejected_record_num())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(log_rejected_record_num);

    hashCode = hashCode * 8191 + ((isSetUse_page_cache()) ? 131071 : 524287);
    if (isSetUse_page_cache())
      hashCode = hashCode * 8191 + ((use_page_cache) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnable_connector_adaptive_io_tasks()) ? 131071 : 524287);
    if (isSetEnable_connector_adaptive_io_tasks())
      hashCode = hashCode * 8191 + ((enable_connector_adaptive_io_tasks) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetConnector_io_tasks_slow_io_latency_ms()) ? 131071 : 524287);
    if (isSetConnector_io_tasks_slow_io_latency_ms())
      hashCode = hashCode * 8191 + connector_io_tasks_slow_io_latency_ms;

    hashCode = hashCode * 8191 + ((isSetScan_use_query_mem_ratio()) ? 131071 : 524287);
    if (isSetScan_use_query_mem_ratio())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(scan_use_query_mem_ratio);

    hashCode = hashCode * 8191 + ((isSetConnector_scan_use_query_mem_ratio()) ? 131071 : 524287);
    if (isSetConnector_scan_use_query_mem_ratio())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(connector_scan_use_query_mem_ratio);

    hashCode = hashCode * 8191 + ((isSetSpillable_operator_mask()) ? 131071 : 524287);
    if (isSetSpillable_operator_mask())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spillable_operator_mask);

    hashCode = hashCode * 8191 + ((isSetLoad_profile_collect_second()) ? 131071 : 524287);
    if (isSetLoad_profile_collect_second())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(load_profile_collect_second);

    hashCode = hashCode * 8191 + ((isSetGroup_concat_max_len()) ? 131071 : 524287);
    if (isSetGroup_concat_max_len())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(group_concat_max_len);

    hashCode = hashCode * 8191 + ((isSetRuntime_profile_report_interval()) ? 131071 : 524287);
    if (isSetRuntime_profile_report_interval())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(runtime_profile_report_interval);

    hashCode = hashCode * 8191 + ((isSetEnable_collect_table_level_scan_stats()) ? 131071 : 524287);
    if (isSetEnable_collect_table_level_scan_stats())
      hashCode = hashCode * 8191 + ((enable_collect_table_level_scan_stats) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetInterleaving_group_size()) ? 131071 : 524287);
    if (isSetInterleaving_group_size())
      hashCode = hashCode * 8191 + interleaving_group_size;

    hashCode = hashCode * 8191 + ((isSetOverflow_mode()) ? 131071 : 524287);
    if (isSetOverflow_mode())
      hashCode = hashCode * 8191 + overflow_mode.getValue();

    hashCode = hashCode * 8191 + ((isSetUse_column_pool()) ? 131071 : 524287);
    if (isSetUse_column_pool())
      hashCode = hashCode * 8191 + ((use_column_pool) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnable_agg_spill_preaggregation()) ? 131071 : 524287);
    if (isSetEnable_agg_spill_preaggregation())
      hashCode = hashCode * 8191 + ((enable_agg_spill_preaggregation) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetGlobal_runtime_filter_build_max_size()) ? 131071 : 524287);
    if (isSetGlobal_runtime_filter_build_max_size())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(global_runtime_filter_build_max_size);

    hashCode = hashCode * 8191 + ((isSetRuntime_filter_rpc_http_min_size()) ? 131071 : 524287);
    if (isSetRuntime_filter_rpc_http_min_size())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(runtime_filter_rpc_http_min_size);

    hashCode = hashCode * 8191 + ((isSetBig_query_profile_threshold()) ? 131071 : 524287);
    if (isSetBig_query_profile_threshold())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(big_query_profile_threshold);

    hashCode = hashCode * 8191 + ((isSetQuery_queue_options()) ? 131071 : 524287);
    if (isSetQuery_queue_options())
      hashCode = hashCode * 8191 + query_queue_options.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnable_file_metacache()) ? 131071 : 524287);
    if (isSetEnable_file_metacache())
      hashCode = hashCode * 8191 + ((enable_file_metacache) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnable_pipeline_level_shuffle()) ? 131071 : 524287);
    if (isSetEnable_pipeline_level_shuffle())
      hashCode = hashCode * 8191 + ((enable_pipeline_level_shuffle) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnable_hyperscan_vec()) ? 131071 : 524287);
    if (isSetEnable_hyperscan_vec())
      hashCode = hashCode * 8191 + ((enable_hyperscan_vec) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnable_jit()) ? 131071 : 524287);
    if (isSetEnable_jit())
      hashCode = hashCode * 8191 + ((enable_jit) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBig_query_profile_threshold_unit()) ? 131071 : 524287);
    if (isSetBig_query_profile_threshold_unit())
      hashCode = hashCode * 8191 + big_query_profile_threshold_unit.getValue();

    hashCode = hashCode * 8191 + ((isSetSql_dialect()) ? 131071 : 524287);
    if (isSetSql_dialect())
      hashCode = hashCode * 8191 + sql_dialect.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnable_spill_to_remote_storage()) ? 131071 : 524287);
    if (isSetEnable_spill_to_remote_storage())
      hashCode = hashCode * 8191 + ((enable_spill_to_remote_storage) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSpill_to_remote_storage_options()) ? 131071 : 524287);
    if (isSetSpill_to_remote_storage_options())
      hashCode = hashCode * 8191 + spill_to_remote_storage_options.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TQueryOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetMax_errors(), other.isSetMax_errors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_errors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_errors, other.max_errors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBatch_size(), other.isSetBatch_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatch_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batch_size, other.batch_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMem_limit(), other.isSetMem_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_limit, other.mem_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAbort_on_default_limit_exceeded(), other.isSetAbort_on_default_limit_exceeded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbort_on_default_limit_exceeded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abort_on_default_limit_exceeded, other.abort_on_default_limit_exceeded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_timeout(), other.isSetQuery_timeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_timeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_timeout, other.query_timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_profile(), other.isSetEnable_profile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_profile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_profile, other.enable_profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_type(), other.isSetQuery_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_type, other.query_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_mem_limit(), other.isSetLoad_mem_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_mem_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_mem_limit, other.load_mem_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_scan_key_num(), other.isSetMax_scan_key_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_scan_key_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_scan_key_num, other.max_scan_key_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_pushdown_conditions_per_column(), other.isSetMax_pushdown_conditions_per_column());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_pushdown_conditions_per_column()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_pushdown_conditions_per_column, other.max_pushdown_conditions_per_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_spill(), other.isSetEnable_spill());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_spill()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_spill, other.enable_spill);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTransmission_compression_type(), other.isSetTransmission_compression_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransmission_compression_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transmission_compression_type, other.transmission_compression_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntime_join_filter_pushdown_limit(), other.isSetRuntime_join_filter_pushdown_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_join_filter_pushdown_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_join_filter_pushdown_limit, other.runtime_join_filter_pushdown_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntime_filter_wait_timeout_ms(), other.isSetRuntime_filter_wait_timeout_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_filter_wait_timeout_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_wait_timeout_ms, other.runtime_filter_wait_timeout_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntime_filter_send_timeout_ms(), other.isSetRuntime_filter_send_timeout_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_filter_send_timeout_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_send_timeout_ms, other.runtime_filter_send_timeout_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPipeline_dop(), other.isSetPipeline_dop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipeline_dop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeline_dop, other.pipeline_dop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPipeline_profile_level(), other.isSetPipeline_profile_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipeline_profile_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeline_profile_level, other.pipeline_profile_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_dop(), other.isSetLoad_dop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_dop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_dop, other.load_dop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntime_filter_scan_wait_time_ms(), other.isSetRuntime_filter_scan_wait_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_filter_scan_wait_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_scan_wait_time_ms, other.runtime_filter_scan_wait_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_mem_limit(), other.isSetQuery_mem_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_mem_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_mem_limit, other.query_mem_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_tablet_internal_parallel(), other.isSetEnable_tablet_internal_parallel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_tablet_internal_parallel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_tablet_internal_parallel, other.enable_tablet_internal_parallel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_delivery_timeout(), other.isSetQuery_delivery_timeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_delivery_timeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_delivery_timeout, other.query_delivery_timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_query_debug_trace(), other.isSetEnable_query_debug_trace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_query_debug_trace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_query_debug_trace, other.enable_query_debug_trace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_transmission_compression_type(), other.isSetLoad_transmission_compression_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_transmission_compression_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_transmission_compression_type, other.load_transmission_compression_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_internal_parallel_mode(), other.isSetTablet_internal_parallel_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_internal_parallel_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_internal_parallel_mode, other.tablet_internal_parallel_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_job_type(), other.isSetLoad_job_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_job_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_job_type, other.load_job_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_scan_datacache(), other.isSetEnable_scan_datacache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_scan_datacache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_scan_datacache, other.enable_scan_datacache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_pipeline_query_statistic(), other.isSetEnable_pipeline_query_statistic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_pipeline_query_statistic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_pipeline_query_statistic, other.enable_pipeline_query_statistic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTransmission_encode_level(), other.isSetTransmission_encode_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransmission_encode_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transmission_encode_level, other.transmission_encode_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_populate_datacache(), other.isSetEnable_populate_datacache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_populate_datacache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_populate_datacache, other.enable_populate_datacache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAllow_throw_exception(), other.isSetAllow_throw_exception());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllow_throw_exception()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allow_throw_exception, other.allow_throw_exception);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHudi_mor_force_jni_reader(), other.isSetHudi_mor_force_jni_reader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHudi_mor_force_jni_reader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hudi_mor_force_jni_reader, other.hudi_mor_force_jni_reader);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRpc_http_min_size(), other.isSetRpc_http_min_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpc_http_min_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpc_http_min_size, other.rpc_http_min_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_mem_table_size(), other.isSetSpill_mem_table_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_mem_table_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_mem_table_size, other.spill_mem_table_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_mem_table_num(), other.isSetSpill_mem_table_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_mem_table_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_mem_table_num, other.spill_mem_table_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_mem_limit_threshold(), other.isSetSpill_mem_limit_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_mem_limit_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_mem_limit_threshold, other.spill_mem_limit_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_operator_min_bytes(), other.isSetSpill_operator_min_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_operator_min_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_operator_min_bytes, other.spill_operator_min_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_operator_max_bytes(), other.isSetSpill_operator_max_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_operator_max_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_operator_max_bytes, other.spill_operator_max_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_encode_level(), other.isSetSpill_encode_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_encode_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_encode_level, other.spill_encode_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_revocable_max_bytes(), other.isSetSpill_revocable_max_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_revocable_max_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_revocable_max_bytes, other.spill_revocable_max_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_enable_direct_io(), other.isSetSpill_enable_direct_io());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_enable_direct_io()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_enable_direct_io, other.spill_enable_direct_io);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_rand_ratio(), other.isSetSpill_rand_ratio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_rand_ratio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_rand_ratio, other.spill_rand_ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_mode(), other.isSetSpill_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_mode, other.spill_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIo_tasks_per_scan_operator(), other.isSetIo_tasks_per_scan_operator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIo_tasks_per_scan_operator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_tasks_per_scan_operator, other.io_tasks_per_scan_operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConnector_io_tasks_per_scan_operator(), other.isSetConnector_io_tasks_per_scan_operator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnector_io_tasks_per_scan_operator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connector_io_tasks_per_scan_operator, other.connector_io_tasks_per_scan_operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntime_filter_early_return_selectivity(), other.isSetRuntime_filter_early_return_selectivity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_filter_early_return_selectivity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_early_return_selectivity, other.runtime_filter_early_return_selectivity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_dynamic_prune_scan_range(), other.isSetEnable_dynamic_prune_scan_range());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_dynamic_prune_scan_range()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_dynamic_prune_scan_range, other.enable_dynamic_prune_scan_range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLog_rejected_record_num(), other.isSetLog_rejected_record_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_rejected_record_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_rejected_record_num, other.log_rejected_record_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_page_cache(), other.isSetUse_page_cache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_page_cache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_page_cache, other.use_page_cache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_connector_adaptive_io_tasks(), other.isSetEnable_connector_adaptive_io_tasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_connector_adaptive_io_tasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_connector_adaptive_io_tasks, other.enable_connector_adaptive_io_tasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConnector_io_tasks_slow_io_latency_ms(), other.isSetConnector_io_tasks_slow_io_latency_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnector_io_tasks_slow_io_latency_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connector_io_tasks_slow_io_latency_ms, other.connector_io_tasks_slow_io_latency_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetScan_use_query_mem_ratio(), other.isSetScan_use_query_mem_ratio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScan_use_query_mem_ratio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_use_query_mem_ratio, other.scan_use_query_mem_ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConnector_scan_use_query_mem_ratio(), other.isSetConnector_scan_use_query_mem_ratio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnector_scan_use_query_mem_ratio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connector_scan_use_query_mem_ratio, other.connector_scan_use_query_mem_ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpillable_operator_mask(), other.isSetSpillable_operator_mask());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpillable_operator_mask()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spillable_operator_mask, other.spillable_operator_mask);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_profile_collect_second(), other.isSetLoad_profile_collect_second());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_profile_collect_second()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_profile_collect_second, other.load_profile_collect_second);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGroup_concat_max_len(), other.isSetGroup_concat_max_len());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_concat_max_len()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_concat_max_len, other.group_concat_max_len);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntime_profile_report_interval(), other.isSetRuntime_profile_report_interval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_profile_report_interval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_profile_report_interval, other.runtime_profile_report_interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_collect_table_level_scan_stats(), other.isSetEnable_collect_table_level_scan_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_collect_table_level_scan_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_collect_table_level_scan_stats, other.enable_collect_table_level_scan_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInterleaving_group_size(), other.isSetInterleaving_group_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterleaving_group_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interleaving_group_size, other.interleaving_group_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOverflow_mode(), other.isSetOverflow_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverflow_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overflow_mode, other.overflow_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_column_pool(), other.isSetUse_column_pool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_column_pool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_column_pool, other.use_column_pool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_agg_spill_preaggregation(), other.isSetEnable_agg_spill_preaggregation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_agg_spill_preaggregation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_agg_spill_preaggregation, other.enable_agg_spill_preaggregation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGlobal_runtime_filter_build_max_size(), other.isSetGlobal_runtime_filter_build_max_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlobal_runtime_filter_build_max_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.global_runtime_filter_build_max_size, other.global_runtime_filter_build_max_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntime_filter_rpc_http_min_size(), other.isSetRuntime_filter_rpc_http_min_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_filter_rpc_http_min_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_rpc_http_min_size, other.runtime_filter_rpc_http_min_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBig_query_profile_threshold(), other.isSetBig_query_profile_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBig_query_profile_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.big_query_profile_threshold, other.big_query_profile_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_queue_options(), other.isSetQuery_queue_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_queue_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_queue_options, other.query_queue_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_file_metacache(), other.isSetEnable_file_metacache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_file_metacache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_file_metacache, other.enable_file_metacache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_pipeline_level_shuffle(), other.isSetEnable_pipeline_level_shuffle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_pipeline_level_shuffle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_pipeline_level_shuffle, other.enable_pipeline_level_shuffle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_hyperscan_vec(), other.isSetEnable_hyperscan_vec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_hyperscan_vec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_hyperscan_vec, other.enable_hyperscan_vec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_jit(), other.isSetEnable_jit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_jit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_jit, other.enable_jit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBig_query_profile_threshold_unit(), other.isSetBig_query_profile_threshold_unit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBig_query_profile_threshold_unit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.big_query_profile_threshold_unit, other.big_query_profile_threshold_unit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSql_dialect(), other.isSetSql_dialect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql_dialect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_dialect, other.sql_dialect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_spill_to_remote_storage(), other.isSetEnable_spill_to_remote_storage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_spill_to_remote_storage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_spill_to_remote_storage, other.enable_spill_to_remote_storage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_to_remote_storage_options(), other.isSetSpill_to_remote_storage_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_to_remote_storage_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_to_remote_storage_options, other.spill_to_remote_storage_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TQueryOptions(");
    boolean first = true;

    if (isSetMax_errors()) {
      sb.append("max_errors:");
      sb.append(this.max_errors);
      first = false;
    }
    if (isSetBatch_size()) {
      if (!first) sb.append(", ");
      sb.append("batch_size:");
      sb.append(this.batch_size);
      first = false;
    }
    if (isSetMem_limit()) {
      if (!first) sb.append(", ");
      sb.append("mem_limit:");
      sb.append(this.mem_limit);
      first = false;
    }
    if (isSetAbort_on_default_limit_exceeded()) {
      if (!first) sb.append(", ");
      sb.append("abort_on_default_limit_exceeded:");
      sb.append(this.abort_on_default_limit_exceeded);
      first = false;
    }
    if (isSetQuery_timeout()) {
      if (!first) sb.append(", ");
      sb.append("query_timeout:");
      sb.append(this.query_timeout);
      first = false;
    }
    if (isSetEnable_profile()) {
      if (!first) sb.append(", ");
      sb.append("enable_profile:");
      sb.append(this.enable_profile);
      first = false;
    }
    if (isSetQuery_type()) {
      if (!first) sb.append(", ");
      sb.append("query_type:");
      if (this.query_type == null) {
        sb.append("null");
      } else {
        sb.append(this.query_type);
      }
      first = false;
    }
    if (isSetLoad_mem_limit()) {
      if (!first) sb.append(", ");
      sb.append("load_mem_limit:");
      sb.append(this.load_mem_limit);
      first = false;
    }
    if (isSetMax_scan_key_num()) {
      if (!first) sb.append(", ");
      sb.append("max_scan_key_num:");
      sb.append(this.max_scan_key_num);
      first = false;
    }
    if (isSetMax_pushdown_conditions_per_column()) {
      if (!first) sb.append(", ");
      sb.append("max_pushdown_conditions_per_column:");
      sb.append(this.max_pushdown_conditions_per_column);
      first = false;
    }
    if (isSetEnable_spill()) {
      if (!first) sb.append(", ");
      sb.append("enable_spill:");
      sb.append(this.enable_spill);
      first = false;
    }
    if (isSetTransmission_compression_type()) {
      if (!first) sb.append(", ");
      sb.append("transmission_compression_type:");
      if (this.transmission_compression_type == null) {
        sb.append("null");
      } else {
        sb.append(this.transmission_compression_type);
      }
      first = false;
    }
    if (isSetRuntime_join_filter_pushdown_limit()) {
      if (!first) sb.append(", ");
      sb.append("runtime_join_filter_pushdown_limit:");
      sb.append(this.runtime_join_filter_pushdown_limit);
      first = false;
    }
    if (isSetRuntime_filter_wait_timeout_ms()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_wait_timeout_ms:");
      sb.append(this.runtime_filter_wait_timeout_ms);
      first = false;
    }
    if (isSetRuntime_filter_send_timeout_ms()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_send_timeout_ms:");
      sb.append(this.runtime_filter_send_timeout_ms);
      first = false;
    }
    if (isSetPipeline_dop()) {
      if (!first) sb.append(", ");
      sb.append("pipeline_dop:");
      sb.append(this.pipeline_dop);
      first = false;
    }
    if (isSetPipeline_profile_level()) {
      if (!first) sb.append(", ");
      sb.append("pipeline_profile_level:");
      if (this.pipeline_profile_level == null) {
        sb.append("null");
      } else {
        sb.append(this.pipeline_profile_level);
      }
      first = false;
    }
    if (isSetLoad_dop()) {
      if (!first) sb.append(", ");
      sb.append("load_dop:");
      sb.append(this.load_dop);
      first = false;
    }
    if (isSetRuntime_filter_scan_wait_time_ms()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_scan_wait_time_ms:");
      sb.append(this.runtime_filter_scan_wait_time_ms);
      first = false;
    }
    if (isSetQuery_mem_limit()) {
      if (!first) sb.append(", ");
      sb.append("query_mem_limit:");
      sb.append(this.query_mem_limit);
      first = false;
    }
    if (isSetEnable_tablet_internal_parallel()) {
      if (!first) sb.append(", ");
      sb.append("enable_tablet_internal_parallel:");
      sb.append(this.enable_tablet_internal_parallel);
      first = false;
    }
    if (isSetQuery_delivery_timeout()) {
      if (!first) sb.append(", ");
      sb.append("query_delivery_timeout:");
      sb.append(this.query_delivery_timeout);
      first = false;
    }
    if (isSetEnable_query_debug_trace()) {
      if (!first) sb.append(", ");
      sb.append("enable_query_debug_trace:");
      sb.append(this.enable_query_debug_trace);
      first = false;
    }
    if (isSetLoad_transmission_compression_type()) {
      if (!first) sb.append(", ");
      sb.append("load_transmission_compression_type:");
      if (this.load_transmission_compression_type == null) {
        sb.append("null");
      } else {
        sb.append(this.load_transmission_compression_type);
      }
      first = false;
    }
    if (isSetTablet_internal_parallel_mode()) {
      if (!first) sb.append(", ");
      sb.append("tablet_internal_parallel_mode:");
      if (this.tablet_internal_parallel_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet_internal_parallel_mode);
      }
      first = false;
    }
    if (isSetLoad_job_type()) {
      if (!first) sb.append(", ");
      sb.append("load_job_type:");
      if (this.load_job_type == null) {
        sb.append("null");
      } else {
        sb.append(this.load_job_type);
      }
      first = false;
    }
    if (isSetEnable_scan_datacache()) {
      if (!first) sb.append(", ");
      sb.append("enable_scan_datacache:");
      sb.append(this.enable_scan_datacache);
      first = false;
    }
    if (isSetEnable_pipeline_query_statistic()) {
      if (!first) sb.append(", ");
      sb.append("enable_pipeline_query_statistic:");
      sb.append(this.enable_pipeline_query_statistic);
      first = false;
    }
    if (isSetTransmission_encode_level()) {
      if (!first) sb.append(", ");
      sb.append("transmission_encode_level:");
      sb.append(this.transmission_encode_level);
      first = false;
    }
    if (isSetEnable_populate_datacache()) {
      if (!first) sb.append(", ");
      sb.append("enable_populate_datacache:");
      sb.append(this.enable_populate_datacache);
      first = false;
    }
    if (isSetAllow_throw_exception()) {
      if (!first) sb.append(", ");
      sb.append("allow_throw_exception:");
      sb.append(this.allow_throw_exception);
      first = false;
    }
    if (isSetHudi_mor_force_jni_reader()) {
      if (!first) sb.append(", ");
      sb.append("hudi_mor_force_jni_reader:");
      sb.append(this.hudi_mor_force_jni_reader);
      first = false;
    }
    if (isSetRpc_http_min_size()) {
      if (!first) sb.append(", ");
      sb.append("rpc_http_min_size:");
      sb.append(this.rpc_http_min_size);
      first = false;
    }
    if (isSetSpill_mem_table_size()) {
      if (!first) sb.append(", ");
      sb.append("spill_mem_table_size:");
      sb.append(this.spill_mem_table_size);
      first = false;
    }
    if (isSetSpill_mem_table_num()) {
      if (!first) sb.append(", ");
      sb.append("spill_mem_table_num:");
      sb.append(this.spill_mem_table_num);
      first = false;
    }
    if (isSetSpill_mem_limit_threshold()) {
      if (!first) sb.append(", ");
      sb.append("spill_mem_limit_threshold:");
      sb.append(this.spill_mem_limit_threshold);
      first = false;
    }
    if (isSetSpill_operator_min_bytes()) {
      if (!first) sb.append(", ");
      sb.append("spill_operator_min_bytes:");
      sb.append(this.spill_operator_min_bytes);
      first = false;
    }
    if (isSetSpill_operator_max_bytes()) {
      if (!first) sb.append(", ");
      sb.append("spill_operator_max_bytes:");
      sb.append(this.spill_operator_max_bytes);
      first = false;
    }
    if (isSetSpill_encode_level()) {
      if (!first) sb.append(", ");
      sb.append("spill_encode_level:");
      sb.append(this.spill_encode_level);
      first = false;
    }
    if (isSetSpill_revocable_max_bytes()) {
      if (!first) sb.append(", ");
      sb.append("spill_revocable_max_bytes:");
      sb.append(this.spill_revocable_max_bytes);
      first = false;
    }
    if (isSetSpill_enable_direct_io()) {
      if (!first) sb.append(", ");
      sb.append("spill_enable_direct_io:");
      sb.append(this.spill_enable_direct_io);
      first = false;
    }
    if (isSetSpill_rand_ratio()) {
      if (!first) sb.append(", ");
      sb.append("spill_rand_ratio:");
      sb.append(this.spill_rand_ratio);
      first = false;
    }
    if (isSetSpill_mode()) {
      if (!first) sb.append(", ");
      sb.append("spill_mode:");
      if (this.spill_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.spill_mode);
      }
      first = false;
    }
    if (isSetIo_tasks_per_scan_operator()) {
      if (!first) sb.append(", ");
      sb.append("io_tasks_per_scan_operator:");
      sb.append(this.io_tasks_per_scan_operator);
      first = false;
    }
    if (isSetConnector_io_tasks_per_scan_operator()) {
      if (!first) sb.append(", ");
      sb.append("connector_io_tasks_per_scan_operator:");
      sb.append(this.connector_io_tasks_per_scan_operator);
      first = false;
    }
    if (isSetRuntime_filter_early_return_selectivity()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_early_return_selectivity:");
      sb.append(this.runtime_filter_early_return_selectivity);
      first = false;
    }
    if (isSetEnable_dynamic_prune_scan_range()) {
      if (!first) sb.append(", ");
      sb.append("enable_dynamic_prune_scan_range:");
      sb.append(this.enable_dynamic_prune_scan_range);
      first = false;
    }
    if (isSetLog_rejected_record_num()) {
      if (!first) sb.append(", ");
      sb.append("log_rejected_record_num:");
      sb.append(this.log_rejected_record_num);
      first = false;
    }
    if (isSetUse_page_cache()) {
      if (!first) sb.append(", ");
      sb.append("use_page_cache:");
      sb.append(this.use_page_cache);
      first = false;
    }
    if (isSetEnable_connector_adaptive_io_tasks()) {
      if (!first) sb.append(", ");
      sb.append("enable_connector_adaptive_io_tasks:");
      sb.append(this.enable_connector_adaptive_io_tasks);
      first = false;
    }
    if (isSetConnector_io_tasks_slow_io_latency_ms()) {
      if (!first) sb.append(", ");
      sb.append("connector_io_tasks_slow_io_latency_ms:");
      sb.append(this.connector_io_tasks_slow_io_latency_ms);
      first = false;
    }
    if (isSetScan_use_query_mem_ratio()) {
      if (!first) sb.append(", ");
      sb.append("scan_use_query_mem_ratio:");
      sb.append(this.scan_use_query_mem_ratio);
      first = false;
    }
    if (isSetConnector_scan_use_query_mem_ratio()) {
      if (!first) sb.append(", ");
      sb.append("connector_scan_use_query_mem_ratio:");
      sb.append(this.connector_scan_use_query_mem_ratio);
      first = false;
    }
    if (isSetSpillable_operator_mask()) {
      if (!first) sb.append(", ");
      sb.append("spillable_operator_mask:");
      sb.append(this.spillable_operator_mask);
      first = false;
    }
    if (isSetLoad_profile_collect_second()) {
      if (!first) sb.append(", ");
      sb.append("load_profile_collect_second:");
      sb.append(this.load_profile_collect_second);
      first = false;
    }
    if (isSetGroup_concat_max_len()) {
      if (!first) sb.append(", ");
      sb.append("group_concat_max_len:");
      sb.append(this.group_concat_max_len);
      first = false;
    }
    if (isSetRuntime_profile_report_interval()) {
      if (!first) sb.append(", ");
      sb.append("runtime_profile_report_interval:");
      sb.append(this.runtime_profile_report_interval);
      first = false;
    }
    if (isSetEnable_collect_table_level_scan_stats()) {
      if (!first) sb.append(", ");
      sb.append("enable_collect_table_level_scan_stats:");
      sb.append(this.enable_collect_table_level_scan_stats);
      first = false;
    }
    if (isSetInterleaving_group_size()) {
      if (!first) sb.append(", ");
      sb.append("interleaving_group_size:");
      sb.append(this.interleaving_group_size);
      first = false;
    }
    if (isSetOverflow_mode()) {
      if (!first) sb.append(", ");
      sb.append("overflow_mode:");
      if (this.overflow_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.overflow_mode);
      }
      first = false;
    }
    if (isSetUse_column_pool()) {
      if (!first) sb.append(", ");
      sb.append("use_column_pool:");
      sb.append(this.use_column_pool);
      first = false;
    }
    if (isSetEnable_agg_spill_preaggregation()) {
      if (!first) sb.append(", ");
      sb.append("enable_agg_spill_preaggregation:");
      sb.append(this.enable_agg_spill_preaggregation);
      first = false;
    }
    if (isSetGlobal_runtime_filter_build_max_size()) {
      if (!first) sb.append(", ");
      sb.append("global_runtime_filter_build_max_size:");
      sb.append(this.global_runtime_filter_build_max_size);
      first = false;
    }
    if (isSetRuntime_filter_rpc_http_min_size()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_rpc_http_min_size:");
      sb.append(this.runtime_filter_rpc_http_min_size);
      first = false;
    }
    if (isSetBig_query_profile_threshold()) {
      if (!first) sb.append(", ");
      sb.append("big_query_profile_threshold:");
      sb.append(this.big_query_profile_threshold);
      first = false;
    }
    if (isSetQuery_queue_options()) {
      if (!first) sb.append(", ");
      sb.append("query_queue_options:");
      if (this.query_queue_options == null) {
        sb.append("null");
      } else {
        sb.append(this.query_queue_options);
      }
      first = false;
    }
    if (isSetEnable_file_metacache()) {
      if (!first) sb.append(", ");
      sb.append("enable_file_metacache:");
      sb.append(this.enable_file_metacache);
      first = false;
    }
    if (isSetEnable_pipeline_level_shuffle()) {
      if (!first) sb.append(", ");
      sb.append("enable_pipeline_level_shuffle:");
      sb.append(this.enable_pipeline_level_shuffle);
      first = false;
    }
    if (isSetEnable_hyperscan_vec()) {
      if (!first) sb.append(", ");
      sb.append("enable_hyperscan_vec:");
      sb.append(this.enable_hyperscan_vec);
      first = false;
    }
    if (isSetEnable_jit()) {
      if (!first) sb.append(", ");
      sb.append("enable_jit:");
      sb.append(this.enable_jit);
      first = false;
    }
    if (isSetBig_query_profile_threshold_unit()) {
      if (!first) sb.append(", ");
      sb.append("big_query_profile_threshold_unit:");
      if (this.big_query_profile_threshold_unit == null) {
        sb.append("null");
      } else {
        sb.append(this.big_query_profile_threshold_unit);
      }
      first = false;
    }
    if (isSetSql_dialect()) {
      if (!first) sb.append(", ");
      sb.append("sql_dialect:");
      if (this.sql_dialect == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_dialect);
      }
      first = false;
    }
    if (isSetEnable_spill_to_remote_storage()) {
      if (!first) sb.append(", ");
      sb.append("enable_spill_to_remote_storage:");
      sb.append(this.enable_spill_to_remote_storage);
      first = false;
    }
    if (isSetSpill_to_remote_storage_options()) {
      if (!first) sb.append(", ");
      sb.append("spill_to_remote_storage_options:");
      if (this.spill_to_remote_storage_options == null) {
        sb.append("null");
      } else {
        sb.append(this.spill_to_remote_storage_options);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (query_queue_options != null) {
      query_queue_options.validate();
    }
    if (spill_to_remote_storage_options != null) {
      spill_to_remote_storage_options.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueryOptionsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TQueryOptionsStandardScheme getScheme() {
      return new TQueryOptionsStandardScheme();
    }
  }

  private static class TQueryOptionsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TQueryOptions> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueryOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // MAX_ERRORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_errors = iprot.readI32();
              struct.setMax_errorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BATCH_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.batch_size = iprot.readI32();
              struct.setBatch_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem_limit = iprot.readI64();
              struct.setMem_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ABORT_ON_DEFAULT_LIMIT_EXCEEDED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.abort_on_default_limit_exceeded = iprot.readBool();
              struct.setAbort_on_default_limit_exceededIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // QUERY_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.query_timeout = iprot.readI32();
              struct.setQuery_timeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ENABLE_PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_profile = iprot.readBool();
              struct.setEnable_profileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // QUERY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.query_type = io.datafibre.fibre.thrift.TQueryType.findByValue(iprot.readI32());
              struct.setQuery_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // LOAD_MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.load_mem_limit = iprot.readI64();
              struct.setLoad_mem_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // MAX_SCAN_KEY_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_scan_key_num = iprot.readI32();
              struct.setMax_scan_key_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // MAX_PUSHDOWN_CONDITIONS_PER_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_pushdown_conditions_per_column = iprot.readI32();
              struct.setMax_pushdown_conditions_per_columnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // ENABLE_SPILL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_spill = iprot.readBool();
              struct.setEnable_spillIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // TRANSMISSION_COMPRESSION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transmission_compression_type = io.datafibre.fibre.thrift.TCompressionType.findByValue(iprot.readI32());
              struct.setTransmission_compression_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // RUNTIME_JOIN_FILTER_PUSHDOWN_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.runtime_join_filter_pushdown_limit = iprot.readI64();
              struct.setRuntime_join_filter_pushdown_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // RUNTIME_FILTER_WAIT_TIMEOUT_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runtime_filter_wait_timeout_ms = iprot.readI32();
              struct.setRuntime_filter_wait_timeout_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // RUNTIME_FILTER_SEND_TIMEOUT_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runtime_filter_send_timeout_ms = iprot.readI32();
              struct.setRuntime_filter_send_timeout_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // PIPELINE_DOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pipeline_dop = iprot.readI32();
              struct.setPipeline_dopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // PIPELINE_PROFILE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pipeline_profile_level = io.datafibre.fibre.thrift.TPipelineProfileLevel.findByValue(iprot.readI32());
              struct.setPipeline_profile_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // LOAD_DOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.load_dop = iprot.readI32();
              struct.setLoad_dopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // RUNTIME_FILTER_SCAN_WAIT_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.runtime_filter_scan_wait_time_ms = iprot.readI64();
              struct.setRuntime_filter_scan_wait_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // QUERY_MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.query_mem_limit = iprot.readI64();
              struct.setQuery_mem_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // ENABLE_TABLET_INTERNAL_PARALLEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_tablet_internal_parallel = iprot.readBool();
              struct.setEnable_tablet_internal_parallelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // QUERY_DELIVERY_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.query_delivery_timeout = iprot.readI32();
              struct.setQuery_delivery_timeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // ENABLE_QUERY_DEBUG_TRACE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_query_debug_trace = iprot.readBool();
              struct.setEnable_query_debug_traceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // LOAD_TRANSMISSION_COMPRESSION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.load_transmission_compression_type = io.datafibre.fibre.thrift.TCompressionType.findByValue(iprot.readI32());
              struct.setLoad_transmission_compression_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // TABLET_INTERNAL_PARALLEL_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tablet_internal_parallel_mode = io.datafibre.fibre.thrift.TTabletInternalParallelMode.findByValue(iprot.readI32());
              struct.setTablet_internal_parallel_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // LOAD_JOB_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.load_job_type = io.datafibre.fibre.thrift.TLoadJobType.findByValue(iprot.readI32());
              struct.setLoad_job_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 66: // ENABLE_SCAN_DATACACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_scan_datacache = iprot.readBool();
              struct.setEnable_scan_datacacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 67: // ENABLE_PIPELINE_QUERY_STATISTIC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_pipeline_query_statistic = iprot.readBool();
              struct.setEnable_pipeline_query_statisticIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 68: // TRANSMISSION_ENCODE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transmission_encode_level = iprot.readI32();
              struct.setTransmission_encode_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 69: // ENABLE_POPULATE_DATACACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_populate_datacache = iprot.readBool();
              struct.setEnable_populate_datacacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // ALLOW_THROW_EXCEPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allow_throw_exception = iprot.readBool();
              struct.setAllow_throw_exceptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // HUDI_MOR_FORCE_JNI_READER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hudi_mor_force_jni_reader = iprot.readBool();
              struct.setHudi_mor_force_jni_readerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 72: // RPC_HTTP_MIN_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rpc_http_min_size = iprot.readI64();
              struct.setRpc_http_min_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 73: // SPILL_MEM_TABLE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spill_mem_table_size = iprot.readI32();
              struct.setSpill_mem_table_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 74: // SPILL_MEM_TABLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spill_mem_table_num = iprot.readI32();
              struct.setSpill_mem_table_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 75: // SPILL_MEM_LIMIT_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.spill_mem_limit_threshold = iprot.readDouble();
              struct.setSpill_mem_limit_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 76: // SPILL_OPERATOR_MIN_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.spill_operator_min_bytes = iprot.readI64();
              struct.setSpill_operator_min_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 77: // SPILL_OPERATOR_MAX_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.spill_operator_max_bytes = iprot.readI64();
              struct.setSpill_operator_max_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 78: // SPILL_ENCODE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spill_encode_level = iprot.readI32();
              struct.setSpill_encode_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 79: // SPILL_REVOCABLE_MAX_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.spill_revocable_max_bytes = iprot.readI64();
              struct.setSpill_revocable_max_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 80: // SPILL_ENABLE_DIRECT_IO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.spill_enable_direct_io = iprot.readBool();
              struct.setSpill_enable_direct_ioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 81: // SPILL_RAND_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.spill_rand_ratio = iprot.readDouble();
              struct.setSpill_rand_ratioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 85: // SPILL_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spill_mode = io.datafibre.fibre.thrift.TSpillMode.findByValue(iprot.readI32());
              struct.setSpill_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 86: // IO_TASKS_PER_SCAN_OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.io_tasks_per_scan_operator = iprot.readI32();
              struct.setIo_tasks_per_scan_operatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 87: // CONNECTOR_IO_TASKS_PER_SCAN_OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.connector_io_tasks_per_scan_operator = iprot.readI32();
              struct.setConnector_io_tasks_per_scan_operatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 88: // RUNTIME_FILTER_EARLY_RETURN_SELECTIVITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.runtime_filter_early_return_selectivity = iprot.readDouble();
              struct.setRuntime_filter_early_return_selectivityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 89: // ENABLE_DYNAMIC_PRUNE_SCAN_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_dynamic_prune_scan_range = iprot.readBool();
              struct.setEnable_dynamic_prune_scan_rangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 90: // LOG_REJECTED_RECORD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.log_rejected_record_num = iprot.readI64();
              struct.setLog_rejected_record_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 91: // USE_PAGE_CACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_page_cache = iprot.readBool();
              struct.setUse_page_cacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 92: // ENABLE_CONNECTOR_ADAPTIVE_IO_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_connector_adaptive_io_tasks = iprot.readBool();
              struct.setEnable_connector_adaptive_io_tasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 93: // CONNECTOR_IO_TASKS_SLOW_IO_LATENCY_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.connector_io_tasks_slow_io_latency_ms = iprot.readI32();
              struct.setConnector_io_tasks_slow_io_latency_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 94: // SCAN_USE_QUERY_MEM_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.scan_use_query_mem_ratio = iprot.readDouble();
              struct.setScan_use_query_mem_ratioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 95: // CONNECTOR_SCAN_USE_QUERY_MEM_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.connector_scan_use_query_mem_ratio = iprot.readDouble();
              struct.setConnector_scan_use_query_mem_ratioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 96: // SPILLABLE_OPERATOR_MASK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.spillable_operator_mask = iprot.readI64();
              struct.setSpillable_operator_maskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 97: // LOAD_PROFILE_COLLECT_SECOND
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.load_profile_collect_second = iprot.readI64();
              struct.setLoad_profile_collect_secondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // GROUP_CONCAT_MAX_LEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.group_concat_max_len = iprot.readI64();
              struct.setGroup_concat_max_lenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // RUNTIME_PROFILE_REPORT_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.runtime_profile_report_interval = iprot.readI64();
              struct.setRuntime_profile_report_intervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // ENABLE_COLLECT_TABLE_LEVEL_SCAN_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_collect_table_level_scan_stats = iprot.readBool();
              struct.setEnable_collect_table_level_scan_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // INTERLEAVING_GROUP_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interleaving_group_size = iprot.readI32();
              struct.setInterleaving_group_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // OVERFLOW_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overflow_mode = io.datafibre.fibre.thrift.TOverflowMode.findByValue(iprot.readI32());
              struct.setOverflow_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // USE_COLUMN_POOL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_column_pool = iprot.readBool();
              struct.setUse_column_poolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 106: // ENABLE_AGG_SPILL_PREAGGREGATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_agg_spill_preaggregation = iprot.readBool();
              struct.setEnable_agg_spill_preaggregationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 107: // GLOBAL_RUNTIME_FILTER_BUILD_MAX_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.global_runtime_filter_build_max_size = iprot.readI64();
              struct.setGlobal_runtime_filter_build_max_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 108: // RUNTIME_FILTER_RPC_HTTP_MIN_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.runtime_filter_rpc_http_min_size = iprot.readI64();
              struct.setRuntime_filter_rpc_http_min_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 109: // BIG_QUERY_PROFILE_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.big_query_profile_threshold = iprot.readI64();
              struct.setBig_query_profile_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 110: // QUERY_QUEUE_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_queue_options = new TQueryQueueOptions();
              struct.query_queue_options.read(iprot);
              struct.setQuery_queue_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 111: // ENABLE_FILE_METACACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_file_metacache = iprot.readBool();
              struct.setEnable_file_metacacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 112: // ENABLE_PIPELINE_LEVEL_SHUFFLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_pipeline_level_shuffle = iprot.readBool();
              struct.setEnable_pipeline_level_shuffleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 113: // ENABLE_HYPERSCAN_VEC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_hyperscan_vec = iprot.readBool();
              struct.setEnable_hyperscan_vecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 114: // ENABLE_JIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_jit = iprot.readBool();
              struct.setEnable_jitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 115: // BIG_QUERY_PROFILE_THRESHOLD_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.big_query_profile_threshold_unit = io.datafibre.fibre.thrift.TTimeUnit.findByValue(iprot.readI32());
              struct.setBig_query_profile_threshold_unitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 116: // SQL_DIALECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql_dialect = iprot.readString();
              struct.setSql_dialectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 117: // ENABLE_SPILL_TO_REMOTE_STORAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_spill_to_remote_storage = iprot.readBool();
              struct.setEnable_spill_to_remote_storageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 118: // SPILL_TO_REMOTE_STORAGE_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spill_to_remote_storage_options = new TSpillToRemoteStorageOptions();
              struct.spill_to_remote_storage_options.read(iprot);
              struct.setSpill_to_remote_storage_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueryOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMax_errors()) {
        oprot.writeFieldBegin(MAX_ERRORS_FIELD_DESC);
        oprot.writeI32(struct.max_errors);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBatch_size()) {
        oprot.writeFieldBegin(BATCH_SIZE_FIELD_DESC);
        oprot.writeI32(struct.batch_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMem_limit()) {
        oprot.writeFieldBegin(MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.mem_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAbort_on_default_limit_exceeded()) {
        oprot.writeFieldBegin(ABORT_ON_DEFAULT_LIMIT_EXCEEDED_FIELD_DESC);
        oprot.writeBool(struct.abort_on_default_limit_exceeded);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQuery_timeout()) {
        oprot.writeFieldBegin(QUERY_TIMEOUT_FIELD_DESC);
        oprot.writeI32(struct.query_timeout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_profile()) {
        oprot.writeFieldBegin(ENABLE_PROFILE_FIELD_DESC);
        oprot.writeBool(struct.enable_profile);
        oprot.writeFieldEnd();
      }
      if (struct.query_type != null) {
        if (struct.isSetQuery_type()) {
          oprot.writeFieldBegin(QUERY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.query_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLoad_mem_limit()) {
        oprot.writeFieldBegin(LOAD_MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.load_mem_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_scan_key_num()) {
        oprot.writeFieldBegin(MAX_SCAN_KEY_NUM_FIELD_DESC);
        oprot.writeI32(struct.max_scan_key_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_pushdown_conditions_per_column()) {
        oprot.writeFieldBegin(MAX_PUSHDOWN_CONDITIONS_PER_COLUMN_FIELD_DESC);
        oprot.writeI32(struct.max_pushdown_conditions_per_column);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_spill()) {
        oprot.writeFieldBegin(ENABLE_SPILL_FIELD_DESC);
        oprot.writeBool(struct.enable_spill);
        oprot.writeFieldEnd();
      }
      if (struct.transmission_compression_type != null) {
        if (struct.isSetTransmission_compression_type()) {
          oprot.writeFieldBegin(TRANSMISSION_COMPRESSION_TYPE_FIELD_DESC);
          oprot.writeI32(struct.transmission_compression_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRuntime_join_filter_pushdown_limit()) {
        oprot.writeFieldBegin(RUNTIME_JOIN_FILTER_PUSHDOWN_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.runtime_join_filter_pushdown_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRuntime_filter_wait_timeout_ms()) {
        oprot.writeFieldBegin(RUNTIME_FILTER_WAIT_TIMEOUT_MS_FIELD_DESC);
        oprot.writeI32(struct.runtime_filter_wait_timeout_ms);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRuntime_filter_send_timeout_ms()) {
        oprot.writeFieldBegin(RUNTIME_FILTER_SEND_TIMEOUT_MS_FIELD_DESC);
        oprot.writeI32(struct.runtime_filter_send_timeout_ms);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPipeline_dop()) {
        oprot.writeFieldBegin(PIPELINE_DOP_FIELD_DESC);
        oprot.writeI32(struct.pipeline_dop);
        oprot.writeFieldEnd();
      }
      if (struct.pipeline_profile_level != null) {
        if (struct.isSetPipeline_profile_level()) {
          oprot.writeFieldBegin(PIPELINE_PROFILE_LEVEL_FIELD_DESC);
          oprot.writeI32(struct.pipeline_profile_level.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLoad_dop()) {
        oprot.writeFieldBegin(LOAD_DOP_FIELD_DESC);
        oprot.writeI32(struct.load_dop);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRuntime_filter_scan_wait_time_ms()) {
        oprot.writeFieldBegin(RUNTIME_FILTER_SCAN_WAIT_TIME_MS_FIELD_DESC);
        oprot.writeI64(struct.runtime_filter_scan_wait_time_ms);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQuery_mem_limit()) {
        oprot.writeFieldBegin(QUERY_MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.query_mem_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_tablet_internal_parallel()) {
        oprot.writeFieldBegin(ENABLE_TABLET_INTERNAL_PARALLEL_FIELD_DESC);
        oprot.writeBool(struct.enable_tablet_internal_parallel);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQuery_delivery_timeout()) {
        oprot.writeFieldBegin(QUERY_DELIVERY_TIMEOUT_FIELD_DESC);
        oprot.writeI32(struct.query_delivery_timeout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_query_debug_trace()) {
        oprot.writeFieldBegin(ENABLE_QUERY_DEBUG_TRACE_FIELD_DESC);
        oprot.writeBool(struct.enable_query_debug_trace);
        oprot.writeFieldEnd();
      }
      if (struct.load_transmission_compression_type != null) {
        if (struct.isSetLoad_transmission_compression_type()) {
          oprot.writeFieldBegin(LOAD_TRANSMISSION_COMPRESSION_TYPE_FIELD_DESC);
          oprot.writeI32(struct.load_transmission_compression_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.tablet_internal_parallel_mode != null) {
        if (struct.isSetTablet_internal_parallel_mode()) {
          oprot.writeFieldBegin(TABLET_INTERNAL_PARALLEL_MODE_FIELD_DESC);
          oprot.writeI32(struct.tablet_internal_parallel_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.load_job_type != null) {
        if (struct.isSetLoad_job_type()) {
          oprot.writeFieldBegin(LOAD_JOB_TYPE_FIELD_DESC);
          oprot.writeI32(struct.load_job_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_scan_datacache()) {
        oprot.writeFieldBegin(ENABLE_SCAN_DATACACHE_FIELD_DESC);
        oprot.writeBool(struct.enable_scan_datacache);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_pipeline_query_statistic()) {
        oprot.writeFieldBegin(ENABLE_PIPELINE_QUERY_STATISTIC_FIELD_DESC);
        oprot.writeBool(struct.enable_pipeline_query_statistic);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTransmission_encode_level()) {
        oprot.writeFieldBegin(TRANSMISSION_ENCODE_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.transmission_encode_level);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_populate_datacache()) {
        oprot.writeFieldBegin(ENABLE_POPULATE_DATACACHE_FIELD_DESC);
        oprot.writeBool(struct.enable_populate_datacache);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAllow_throw_exception()) {
        oprot.writeFieldBegin(ALLOW_THROW_EXCEPTION_FIELD_DESC);
        oprot.writeBool(struct.allow_throw_exception);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHudi_mor_force_jni_reader()) {
        oprot.writeFieldBegin(HUDI_MOR_FORCE_JNI_READER_FIELD_DESC);
        oprot.writeBool(struct.hudi_mor_force_jni_reader);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRpc_http_min_size()) {
        oprot.writeFieldBegin(RPC_HTTP_MIN_SIZE_FIELD_DESC);
        oprot.writeI64(struct.rpc_http_min_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_mem_table_size()) {
        oprot.writeFieldBegin(SPILL_MEM_TABLE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.spill_mem_table_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_mem_table_num()) {
        oprot.writeFieldBegin(SPILL_MEM_TABLE_NUM_FIELD_DESC);
        oprot.writeI32(struct.spill_mem_table_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_mem_limit_threshold()) {
        oprot.writeFieldBegin(SPILL_MEM_LIMIT_THRESHOLD_FIELD_DESC);
        oprot.writeDouble(struct.spill_mem_limit_threshold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_operator_min_bytes()) {
        oprot.writeFieldBegin(SPILL_OPERATOR_MIN_BYTES_FIELD_DESC);
        oprot.writeI64(struct.spill_operator_min_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_operator_max_bytes()) {
        oprot.writeFieldBegin(SPILL_OPERATOR_MAX_BYTES_FIELD_DESC);
        oprot.writeI64(struct.spill_operator_max_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_encode_level()) {
        oprot.writeFieldBegin(SPILL_ENCODE_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.spill_encode_level);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_revocable_max_bytes()) {
        oprot.writeFieldBegin(SPILL_REVOCABLE_MAX_BYTES_FIELD_DESC);
        oprot.writeI64(struct.spill_revocable_max_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_enable_direct_io()) {
        oprot.writeFieldBegin(SPILL_ENABLE_DIRECT_IO_FIELD_DESC);
        oprot.writeBool(struct.spill_enable_direct_io);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_rand_ratio()) {
        oprot.writeFieldBegin(SPILL_RAND_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.spill_rand_ratio);
        oprot.writeFieldEnd();
      }
      if (struct.spill_mode != null) {
        if (struct.isSetSpill_mode()) {
          oprot.writeFieldBegin(SPILL_MODE_FIELD_DESC);
          oprot.writeI32(struct.spill_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIo_tasks_per_scan_operator()) {
        oprot.writeFieldBegin(IO_TASKS_PER_SCAN_OPERATOR_FIELD_DESC);
        oprot.writeI32(struct.io_tasks_per_scan_operator);
        oprot.writeFieldEnd();
      }
      if (struct.isSetConnector_io_tasks_per_scan_operator()) {
        oprot.writeFieldBegin(CONNECTOR_IO_TASKS_PER_SCAN_OPERATOR_FIELD_DESC);
        oprot.writeI32(struct.connector_io_tasks_per_scan_operator);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRuntime_filter_early_return_selectivity()) {
        oprot.writeFieldBegin(RUNTIME_FILTER_EARLY_RETURN_SELECTIVITY_FIELD_DESC);
        oprot.writeDouble(struct.runtime_filter_early_return_selectivity);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_dynamic_prune_scan_range()) {
        oprot.writeFieldBegin(ENABLE_DYNAMIC_PRUNE_SCAN_RANGE_FIELD_DESC);
        oprot.writeBool(struct.enable_dynamic_prune_scan_range);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLog_rejected_record_num()) {
        oprot.writeFieldBegin(LOG_REJECTED_RECORD_NUM_FIELD_DESC);
        oprot.writeI64(struct.log_rejected_record_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUse_page_cache()) {
        oprot.writeFieldBegin(USE_PAGE_CACHE_FIELD_DESC);
        oprot.writeBool(struct.use_page_cache);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_connector_adaptive_io_tasks()) {
        oprot.writeFieldBegin(ENABLE_CONNECTOR_ADAPTIVE_IO_TASKS_FIELD_DESC);
        oprot.writeBool(struct.enable_connector_adaptive_io_tasks);
        oprot.writeFieldEnd();
      }
      if (struct.isSetConnector_io_tasks_slow_io_latency_ms()) {
        oprot.writeFieldBegin(CONNECTOR_IO_TASKS_SLOW_IO_LATENCY_MS_FIELD_DESC);
        oprot.writeI32(struct.connector_io_tasks_slow_io_latency_ms);
        oprot.writeFieldEnd();
      }
      if (struct.isSetScan_use_query_mem_ratio()) {
        oprot.writeFieldBegin(SCAN_USE_QUERY_MEM_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.scan_use_query_mem_ratio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetConnector_scan_use_query_mem_ratio()) {
        oprot.writeFieldBegin(CONNECTOR_SCAN_USE_QUERY_MEM_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.connector_scan_use_query_mem_ratio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpillable_operator_mask()) {
        oprot.writeFieldBegin(SPILLABLE_OPERATOR_MASK_FIELD_DESC);
        oprot.writeI64(struct.spillable_operator_mask);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLoad_profile_collect_second()) {
        oprot.writeFieldBegin(LOAD_PROFILE_COLLECT_SECOND_FIELD_DESC);
        oprot.writeI64(struct.load_profile_collect_second);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGroup_concat_max_len()) {
        oprot.writeFieldBegin(GROUP_CONCAT_MAX_LEN_FIELD_DESC);
        oprot.writeI64(struct.group_concat_max_len);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRuntime_profile_report_interval()) {
        oprot.writeFieldBegin(RUNTIME_PROFILE_REPORT_INTERVAL_FIELD_DESC);
        oprot.writeI64(struct.runtime_profile_report_interval);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_collect_table_level_scan_stats()) {
        oprot.writeFieldBegin(ENABLE_COLLECT_TABLE_LEVEL_SCAN_STATS_FIELD_DESC);
        oprot.writeBool(struct.enable_collect_table_level_scan_stats);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInterleaving_group_size()) {
        oprot.writeFieldBegin(INTERLEAVING_GROUP_SIZE_FIELD_DESC);
        oprot.writeI32(struct.interleaving_group_size);
        oprot.writeFieldEnd();
      }
      if (struct.overflow_mode != null) {
        if (struct.isSetOverflow_mode()) {
          oprot.writeFieldBegin(OVERFLOW_MODE_FIELD_DESC);
          oprot.writeI32(struct.overflow_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUse_column_pool()) {
        oprot.writeFieldBegin(USE_COLUMN_POOL_FIELD_DESC);
        oprot.writeBool(struct.use_column_pool);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_agg_spill_preaggregation()) {
        oprot.writeFieldBegin(ENABLE_AGG_SPILL_PREAGGREGATION_FIELD_DESC);
        oprot.writeBool(struct.enable_agg_spill_preaggregation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGlobal_runtime_filter_build_max_size()) {
        oprot.writeFieldBegin(GLOBAL_RUNTIME_FILTER_BUILD_MAX_SIZE_FIELD_DESC);
        oprot.writeI64(struct.global_runtime_filter_build_max_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRuntime_filter_rpc_http_min_size()) {
        oprot.writeFieldBegin(RUNTIME_FILTER_RPC_HTTP_MIN_SIZE_FIELD_DESC);
        oprot.writeI64(struct.runtime_filter_rpc_http_min_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBig_query_profile_threshold()) {
        oprot.writeFieldBegin(BIG_QUERY_PROFILE_THRESHOLD_FIELD_DESC);
        oprot.writeI64(struct.big_query_profile_threshold);
        oprot.writeFieldEnd();
      }
      if (struct.query_queue_options != null) {
        if (struct.isSetQuery_queue_options()) {
          oprot.writeFieldBegin(QUERY_QUEUE_OPTIONS_FIELD_DESC);
          struct.query_queue_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_file_metacache()) {
        oprot.writeFieldBegin(ENABLE_FILE_METACACHE_FIELD_DESC);
        oprot.writeBool(struct.enable_file_metacache);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_pipeline_level_shuffle()) {
        oprot.writeFieldBegin(ENABLE_PIPELINE_LEVEL_SHUFFLE_FIELD_DESC);
        oprot.writeBool(struct.enable_pipeline_level_shuffle);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_hyperscan_vec()) {
        oprot.writeFieldBegin(ENABLE_HYPERSCAN_VEC_FIELD_DESC);
        oprot.writeBool(struct.enable_hyperscan_vec);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_jit()) {
        oprot.writeFieldBegin(ENABLE_JIT_FIELD_DESC);
        oprot.writeBool(struct.enable_jit);
        oprot.writeFieldEnd();
      }
      if (struct.big_query_profile_threshold_unit != null) {
        if (struct.isSetBig_query_profile_threshold_unit()) {
          oprot.writeFieldBegin(BIG_QUERY_PROFILE_THRESHOLD_UNIT_FIELD_DESC);
          oprot.writeI32(struct.big_query_profile_threshold_unit.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.sql_dialect != null) {
        if (struct.isSetSql_dialect()) {
          oprot.writeFieldBegin(SQL_DIALECT_FIELD_DESC);
          oprot.writeString(struct.sql_dialect);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_spill_to_remote_storage()) {
        oprot.writeFieldBegin(ENABLE_SPILL_TO_REMOTE_STORAGE_FIELD_DESC);
        oprot.writeBool(struct.enable_spill_to_remote_storage);
        oprot.writeFieldEnd();
      }
      if (struct.spill_to_remote_storage_options != null) {
        if (struct.isSetSpill_to_remote_storage_options()) {
          oprot.writeFieldBegin(SPILL_TO_REMOTE_STORAGE_OPTIONS_FIELD_DESC);
          struct.spill_to_remote_storage_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueryOptionsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TQueryOptionsTupleScheme getScheme() {
      return new TQueryOptionsTupleScheme();
    }
  }

  private static class TQueryOptionsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TQueryOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueryOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMax_errors()) {
        optionals.set(0);
      }
      if (struct.isSetBatch_size()) {
        optionals.set(1);
      }
      if (struct.isSetMem_limit()) {
        optionals.set(2);
      }
      if (struct.isSetAbort_on_default_limit_exceeded()) {
        optionals.set(3);
      }
      if (struct.isSetQuery_timeout()) {
        optionals.set(4);
      }
      if (struct.isSetEnable_profile()) {
        optionals.set(5);
      }
      if (struct.isSetQuery_type()) {
        optionals.set(6);
      }
      if (struct.isSetLoad_mem_limit()) {
        optionals.set(7);
      }
      if (struct.isSetMax_scan_key_num()) {
        optionals.set(8);
      }
      if (struct.isSetMax_pushdown_conditions_per_column()) {
        optionals.set(9);
      }
      if (struct.isSetEnable_spill()) {
        optionals.set(10);
      }
      if (struct.isSetTransmission_compression_type()) {
        optionals.set(11);
      }
      if (struct.isSetRuntime_join_filter_pushdown_limit()) {
        optionals.set(12);
      }
      if (struct.isSetRuntime_filter_wait_timeout_ms()) {
        optionals.set(13);
      }
      if (struct.isSetRuntime_filter_send_timeout_ms()) {
        optionals.set(14);
      }
      if (struct.isSetPipeline_dop()) {
        optionals.set(15);
      }
      if (struct.isSetPipeline_profile_level()) {
        optionals.set(16);
      }
      if (struct.isSetLoad_dop()) {
        optionals.set(17);
      }
      if (struct.isSetRuntime_filter_scan_wait_time_ms()) {
        optionals.set(18);
      }
      if (struct.isSetQuery_mem_limit()) {
        optionals.set(19);
      }
      if (struct.isSetEnable_tablet_internal_parallel()) {
        optionals.set(20);
      }
      if (struct.isSetQuery_delivery_timeout()) {
        optionals.set(21);
      }
      if (struct.isSetEnable_query_debug_trace()) {
        optionals.set(22);
      }
      if (struct.isSetLoad_transmission_compression_type()) {
        optionals.set(23);
      }
      if (struct.isSetTablet_internal_parallel_mode()) {
        optionals.set(24);
      }
      if (struct.isSetLoad_job_type()) {
        optionals.set(25);
      }
      if (struct.isSetEnable_scan_datacache()) {
        optionals.set(26);
      }
      if (struct.isSetEnable_pipeline_query_statistic()) {
        optionals.set(27);
      }
      if (struct.isSetTransmission_encode_level()) {
        optionals.set(28);
      }
      if (struct.isSetEnable_populate_datacache()) {
        optionals.set(29);
      }
      if (struct.isSetAllow_throw_exception()) {
        optionals.set(30);
      }
      if (struct.isSetHudi_mor_force_jni_reader()) {
        optionals.set(31);
      }
      if (struct.isSetRpc_http_min_size()) {
        optionals.set(32);
      }
      if (struct.isSetSpill_mem_table_size()) {
        optionals.set(33);
      }
      if (struct.isSetSpill_mem_table_num()) {
        optionals.set(34);
      }
      if (struct.isSetSpill_mem_limit_threshold()) {
        optionals.set(35);
      }
      if (struct.isSetSpill_operator_min_bytes()) {
        optionals.set(36);
      }
      if (struct.isSetSpill_operator_max_bytes()) {
        optionals.set(37);
      }
      if (struct.isSetSpill_encode_level()) {
        optionals.set(38);
      }
      if (struct.isSetSpill_revocable_max_bytes()) {
        optionals.set(39);
      }
      if (struct.isSetSpill_enable_direct_io()) {
        optionals.set(40);
      }
      if (struct.isSetSpill_rand_ratio()) {
        optionals.set(41);
      }
      if (struct.isSetSpill_mode()) {
        optionals.set(42);
      }
      if (struct.isSetIo_tasks_per_scan_operator()) {
        optionals.set(43);
      }
      if (struct.isSetConnector_io_tasks_per_scan_operator()) {
        optionals.set(44);
      }
      if (struct.isSetRuntime_filter_early_return_selectivity()) {
        optionals.set(45);
      }
      if (struct.isSetEnable_dynamic_prune_scan_range()) {
        optionals.set(46);
      }
      if (struct.isSetLog_rejected_record_num()) {
        optionals.set(47);
      }
      if (struct.isSetUse_page_cache()) {
        optionals.set(48);
      }
      if (struct.isSetEnable_connector_adaptive_io_tasks()) {
        optionals.set(49);
      }
      if (struct.isSetConnector_io_tasks_slow_io_latency_ms()) {
        optionals.set(50);
      }
      if (struct.isSetScan_use_query_mem_ratio()) {
        optionals.set(51);
      }
      if (struct.isSetConnector_scan_use_query_mem_ratio()) {
        optionals.set(52);
      }
      if (struct.isSetSpillable_operator_mask()) {
        optionals.set(53);
      }
      if (struct.isSetLoad_profile_collect_second()) {
        optionals.set(54);
      }
      if (struct.isSetGroup_concat_max_len()) {
        optionals.set(55);
      }
      if (struct.isSetRuntime_profile_report_interval()) {
        optionals.set(56);
      }
      if (struct.isSetEnable_collect_table_level_scan_stats()) {
        optionals.set(57);
      }
      if (struct.isSetInterleaving_group_size()) {
        optionals.set(58);
      }
      if (struct.isSetOverflow_mode()) {
        optionals.set(59);
      }
      if (struct.isSetUse_column_pool()) {
        optionals.set(60);
      }
      if (struct.isSetEnable_agg_spill_preaggregation()) {
        optionals.set(61);
      }
      if (struct.isSetGlobal_runtime_filter_build_max_size()) {
        optionals.set(62);
      }
      if (struct.isSetRuntime_filter_rpc_http_min_size()) {
        optionals.set(63);
      }
      if (struct.isSetBig_query_profile_threshold()) {
        optionals.set(64);
      }
      if (struct.isSetQuery_queue_options()) {
        optionals.set(65);
      }
      if (struct.isSetEnable_file_metacache()) {
        optionals.set(66);
      }
      if (struct.isSetEnable_pipeline_level_shuffle()) {
        optionals.set(67);
      }
      if (struct.isSetEnable_hyperscan_vec()) {
        optionals.set(68);
      }
      if (struct.isSetEnable_jit()) {
        optionals.set(69);
      }
      if (struct.isSetBig_query_profile_threshold_unit()) {
        optionals.set(70);
      }
      if (struct.isSetSql_dialect()) {
        optionals.set(71);
      }
      if (struct.isSetEnable_spill_to_remote_storage()) {
        optionals.set(72);
      }
      if (struct.isSetSpill_to_remote_storage_options()) {
        optionals.set(73);
      }
      oprot.writeBitSet(optionals, 74);
      if (struct.isSetMax_errors()) {
        oprot.writeI32(struct.max_errors);
      }
      if (struct.isSetBatch_size()) {
        oprot.writeI32(struct.batch_size);
      }
      if (struct.isSetMem_limit()) {
        oprot.writeI64(struct.mem_limit);
      }
      if (struct.isSetAbort_on_default_limit_exceeded()) {
        oprot.writeBool(struct.abort_on_default_limit_exceeded);
      }
      if (struct.isSetQuery_timeout()) {
        oprot.writeI32(struct.query_timeout);
      }
      if (struct.isSetEnable_profile()) {
        oprot.writeBool(struct.enable_profile);
      }
      if (struct.isSetQuery_type()) {
        oprot.writeI32(struct.query_type.getValue());
      }
      if (struct.isSetLoad_mem_limit()) {
        oprot.writeI64(struct.load_mem_limit);
      }
      if (struct.isSetMax_scan_key_num()) {
        oprot.writeI32(struct.max_scan_key_num);
      }
      if (struct.isSetMax_pushdown_conditions_per_column()) {
        oprot.writeI32(struct.max_pushdown_conditions_per_column);
      }
      if (struct.isSetEnable_spill()) {
        oprot.writeBool(struct.enable_spill);
      }
      if (struct.isSetTransmission_compression_type()) {
        oprot.writeI32(struct.transmission_compression_type.getValue());
      }
      if (struct.isSetRuntime_join_filter_pushdown_limit()) {
        oprot.writeI64(struct.runtime_join_filter_pushdown_limit);
      }
      if (struct.isSetRuntime_filter_wait_timeout_ms()) {
        oprot.writeI32(struct.runtime_filter_wait_timeout_ms);
      }
      if (struct.isSetRuntime_filter_send_timeout_ms()) {
        oprot.writeI32(struct.runtime_filter_send_timeout_ms);
      }
      if (struct.isSetPipeline_dop()) {
        oprot.writeI32(struct.pipeline_dop);
      }
      if (struct.isSetPipeline_profile_level()) {
        oprot.writeI32(struct.pipeline_profile_level.getValue());
      }
      if (struct.isSetLoad_dop()) {
        oprot.writeI32(struct.load_dop);
      }
      if (struct.isSetRuntime_filter_scan_wait_time_ms()) {
        oprot.writeI64(struct.runtime_filter_scan_wait_time_ms);
      }
      if (struct.isSetQuery_mem_limit()) {
        oprot.writeI64(struct.query_mem_limit);
      }
      if (struct.isSetEnable_tablet_internal_parallel()) {
        oprot.writeBool(struct.enable_tablet_internal_parallel);
      }
      if (struct.isSetQuery_delivery_timeout()) {
        oprot.writeI32(struct.query_delivery_timeout);
      }
      if (struct.isSetEnable_query_debug_trace()) {
        oprot.writeBool(struct.enable_query_debug_trace);
      }
      if (struct.isSetLoad_transmission_compression_type()) {
        oprot.writeI32(struct.load_transmission_compression_type.getValue());
      }
      if (struct.isSetTablet_internal_parallel_mode()) {
        oprot.writeI32(struct.tablet_internal_parallel_mode.getValue());
      }
      if (struct.isSetLoad_job_type()) {
        oprot.writeI32(struct.load_job_type.getValue());
      }
      if (struct.isSetEnable_scan_datacache()) {
        oprot.writeBool(struct.enable_scan_datacache);
      }
      if (struct.isSetEnable_pipeline_query_statistic()) {
        oprot.writeBool(struct.enable_pipeline_query_statistic);
      }
      if (struct.isSetTransmission_encode_level()) {
        oprot.writeI32(struct.transmission_encode_level);
      }
      if (struct.isSetEnable_populate_datacache()) {
        oprot.writeBool(struct.enable_populate_datacache);
      }
      if (struct.isSetAllow_throw_exception()) {
        oprot.writeBool(struct.allow_throw_exception);
      }
      if (struct.isSetHudi_mor_force_jni_reader()) {
        oprot.writeBool(struct.hudi_mor_force_jni_reader);
      }
      if (struct.isSetRpc_http_min_size()) {
        oprot.writeI64(struct.rpc_http_min_size);
      }
      if (struct.isSetSpill_mem_table_size()) {
        oprot.writeI32(struct.spill_mem_table_size);
      }
      if (struct.isSetSpill_mem_table_num()) {
        oprot.writeI32(struct.spill_mem_table_num);
      }
      if (struct.isSetSpill_mem_limit_threshold()) {
        oprot.writeDouble(struct.spill_mem_limit_threshold);
      }
      if (struct.isSetSpill_operator_min_bytes()) {
        oprot.writeI64(struct.spill_operator_min_bytes);
      }
      if (struct.isSetSpill_operator_max_bytes()) {
        oprot.writeI64(struct.spill_operator_max_bytes);
      }
      if (struct.isSetSpill_encode_level()) {
        oprot.writeI32(struct.spill_encode_level);
      }
      if (struct.isSetSpill_revocable_max_bytes()) {
        oprot.writeI64(struct.spill_revocable_max_bytes);
      }
      if (struct.isSetSpill_enable_direct_io()) {
        oprot.writeBool(struct.spill_enable_direct_io);
      }
      if (struct.isSetSpill_rand_ratio()) {
        oprot.writeDouble(struct.spill_rand_ratio);
      }
      if (struct.isSetSpill_mode()) {
        oprot.writeI32(struct.spill_mode.getValue());
      }
      if (struct.isSetIo_tasks_per_scan_operator()) {
        oprot.writeI32(struct.io_tasks_per_scan_operator);
      }
      if (struct.isSetConnector_io_tasks_per_scan_operator()) {
        oprot.writeI32(struct.connector_io_tasks_per_scan_operator);
      }
      if (struct.isSetRuntime_filter_early_return_selectivity()) {
        oprot.writeDouble(struct.runtime_filter_early_return_selectivity);
      }
      if (struct.isSetEnable_dynamic_prune_scan_range()) {
        oprot.writeBool(struct.enable_dynamic_prune_scan_range);
      }
      if (struct.isSetLog_rejected_record_num()) {
        oprot.writeI64(struct.log_rejected_record_num);
      }
      if (struct.isSetUse_page_cache()) {
        oprot.writeBool(struct.use_page_cache);
      }
      if (struct.isSetEnable_connector_adaptive_io_tasks()) {
        oprot.writeBool(struct.enable_connector_adaptive_io_tasks);
      }
      if (struct.isSetConnector_io_tasks_slow_io_latency_ms()) {
        oprot.writeI32(struct.connector_io_tasks_slow_io_latency_ms);
      }
      if (struct.isSetScan_use_query_mem_ratio()) {
        oprot.writeDouble(struct.scan_use_query_mem_ratio);
      }
      if (struct.isSetConnector_scan_use_query_mem_ratio()) {
        oprot.writeDouble(struct.connector_scan_use_query_mem_ratio);
      }
      if (struct.isSetSpillable_operator_mask()) {
        oprot.writeI64(struct.spillable_operator_mask);
      }
      if (struct.isSetLoad_profile_collect_second()) {
        oprot.writeI64(struct.load_profile_collect_second);
      }
      if (struct.isSetGroup_concat_max_len()) {
        oprot.writeI64(struct.group_concat_max_len);
      }
      if (struct.isSetRuntime_profile_report_interval()) {
        oprot.writeI64(struct.runtime_profile_report_interval);
      }
      if (struct.isSetEnable_collect_table_level_scan_stats()) {
        oprot.writeBool(struct.enable_collect_table_level_scan_stats);
      }
      if (struct.isSetInterleaving_group_size()) {
        oprot.writeI32(struct.interleaving_group_size);
      }
      if (struct.isSetOverflow_mode()) {
        oprot.writeI32(struct.overflow_mode.getValue());
      }
      if (struct.isSetUse_column_pool()) {
        oprot.writeBool(struct.use_column_pool);
      }
      if (struct.isSetEnable_agg_spill_preaggregation()) {
        oprot.writeBool(struct.enable_agg_spill_preaggregation);
      }
      if (struct.isSetGlobal_runtime_filter_build_max_size()) {
        oprot.writeI64(struct.global_runtime_filter_build_max_size);
      }
      if (struct.isSetRuntime_filter_rpc_http_min_size()) {
        oprot.writeI64(struct.runtime_filter_rpc_http_min_size);
      }
      if (struct.isSetBig_query_profile_threshold()) {
        oprot.writeI64(struct.big_query_profile_threshold);
      }
      if (struct.isSetQuery_queue_options()) {
        struct.query_queue_options.write(oprot);
      }
      if (struct.isSetEnable_file_metacache()) {
        oprot.writeBool(struct.enable_file_metacache);
      }
      if (struct.isSetEnable_pipeline_level_shuffle()) {
        oprot.writeBool(struct.enable_pipeline_level_shuffle);
      }
      if (struct.isSetEnable_hyperscan_vec()) {
        oprot.writeBool(struct.enable_hyperscan_vec);
      }
      if (struct.isSetEnable_jit()) {
        oprot.writeBool(struct.enable_jit);
      }
      if (struct.isSetBig_query_profile_threshold_unit()) {
        oprot.writeI32(struct.big_query_profile_threshold_unit.getValue());
      }
      if (struct.isSetSql_dialect()) {
        oprot.writeString(struct.sql_dialect);
      }
      if (struct.isSetEnable_spill_to_remote_storage()) {
        oprot.writeBool(struct.enable_spill_to_remote_storage);
      }
      if (struct.isSetSpill_to_remote_storage_options()) {
        struct.spill_to_remote_storage_options.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueryOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(74);
      if (incoming.get(0)) {
        struct.max_errors = iprot.readI32();
        struct.setMax_errorsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.batch_size = iprot.readI32();
        struct.setBatch_sizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mem_limit = iprot.readI64();
        struct.setMem_limitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.abort_on_default_limit_exceeded = iprot.readBool();
        struct.setAbort_on_default_limit_exceededIsSet(true);
      }
      if (incoming.get(4)) {
        struct.query_timeout = iprot.readI32();
        struct.setQuery_timeoutIsSet(true);
      }
      if (incoming.get(5)) {
        struct.enable_profile = iprot.readBool();
        struct.setEnable_profileIsSet(true);
      }
      if (incoming.get(6)) {
        struct.query_type = io.datafibre.fibre.thrift.TQueryType.findByValue(iprot.readI32());
        struct.setQuery_typeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.load_mem_limit = iprot.readI64();
        struct.setLoad_mem_limitIsSet(true);
      }
      if (incoming.get(8)) {
        struct.max_scan_key_num = iprot.readI32();
        struct.setMax_scan_key_numIsSet(true);
      }
      if (incoming.get(9)) {
        struct.max_pushdown_conditions_per_column = iprot.readI32();
        struct.setMax_pushdown_conditions_per_columnIsSet(true);
      }
      if (incoming.get(10)) {
        struct.enable_spill = iprot.readBool();
        struct.setEnable_spillIsSet(true);
      }
      if (incoming.get(11)) {
        struct.transmission_compression_type = io.datafibre.fibre.thrift.TCompressionType.findByValue(iprot.readI32());
        struct.setTransmission_compression_typeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.runtime_join_filter_pushdown_limit = iprot.readI64();
        struct.setRuntime_join_filter_pushdown_limitIsSet(true);
      }
      if (incoming.get(13)) {
        struct.runtime_filter_wait_timeout_ms = iprot.readI32();
        struct.setRuntime_filter_wait_timeout_msIsSet(true);
      }
      if (incoming.get(14)) {
        struct.runtime_filter_send_timeout_ms = iprot.readI32();
        struct.setRuntime_filter_send_timeout_msIsSet(true);
      }
      if (incoming.get(15)) {
        struct.pipeline_dop = iprot.readI32();
        struct.setPipeline_dopIsSet(true);
      }
      if (incoming.get(16)) {
        struct.pipeline_profile_level = io.datafibre.fibre.thrift.TPipelineProfileLevel.findByValue(iprot.readI32());
        struct.setPipeline_profile_levelIsSet(true);
      }
      if (incoming.get(17)) {
        struct.load_dop = iprot.readI32();
        struct.setLoad_dopIsSet(true);
      }
      if (incoming.get(18)) {
        struct.runtime_filter_scan_wait_time_ms = iprot.readI64();
        struct.setRuntime_filter_scan_wait_time_msIsSet(true);
      }
      if (incoming.get(19)) {
        struct.query_mem_limit = iprot.readI64();
        struct.setQuery_mem_limitIsSet(true);
      }
      if (incoming.get(20)) {
        struct.enable_tablet_internal_parallel = iprot.readBool();
        struct.setEnable_tablet_internal_parallelIsSet(true);
      }
      if (incoming.get(21)) {
        struct.query_delivery_timeout = iprot.readI32();
        struct.setQuery_delivery_timeoutIsSet(true);
      }
      if (incoming.get(22)) {
        struct.enable_query_debug_trace = iprot.readBool();
        struct.setEnable_query_debug_traceIsSet(true);
      }
      if (incoming.get(23)) {
        struct.load_transmission_compression_type = io.datafibre.fibre.thrift.TCompressionType.findByValue(iprot.readI32());
        struct.setLoad_transmission_compression_typeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.tablet_internal_parallel_mode = io.datafibre.fibre.thrift.TTabletInternalParallelMode.findByValue(iprot.readI32());
        struct.setTablet_internal_parallel_modeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.load_job_type = io.datafibre.fibre.thrift.TLoadJobType.findByValue(iprot.readI32());
        struct.setLoad_job_typeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.enable_scan_datacache = iprot.readBool();
        struct.setEnable_scan_datacacheIsSet(true);
      }
      if (incoming.get(27)) {
        struct.enable_pipeline_query_statistic = iprot.readBool();
        struct.setEnable_pipeline_query_statisticIsSet(true);
      }
      if (incoming.get(28)) {
        struct.transmission_encode_level = iprot.readI32();
        struct.setTransmission_encode_levelIsSet(true);
      }
      if (incoming.get(29)) {
        struct.enable_populate_datacache = iprot.readBool();
        struct.setEnable_populate_datacacheIsSet(true);
      }
      if (incoming.get(30)) {
        struct.allow_throw_exception = iprot.readBool();
        struct.setAllow_throw_exceptionIsSet(true);
      }
      if (incoming.get(31)) {
        struct.hudi_mor_force_jni_reader = iprot.readBool();
        struct.setHudi_mor_force_jni_readerIsSet(true);
      }
      if (incoming.get(32)) {
        struct.rpc_http_min_size = iprot.readI64();
        struct.setRpc_http_min_sizeIsSet(true);
      }
      if (incoming.get(33)) {
        struct.spill_mem_table_size = iprot.readI32();
        struct.setSpill_mem_table_sizeIsSet(true);
      }
      if (incoming.get(34)) {
        struct.spill_mem_table_num = iprot.readI32();
        struct.setSpill_mem_table_numIsSet(true);
      }
      if (incoming.get(35)) {
        struct.spill_mem_limit_threshold = iprot.readDouble();
        struct.setSpill_mem_limit_thresholdIsSet(true);
      }
      if (incoming.get(36)) {
        struct.spill_operator_min_bytes = iprot.readI64();
        struct.setSpill_operator_min_bytesIsSet(true);
      }
      if (incoming.get(37)) {
        struct.spill_operator_max_bytes = iprot.readI64();
        struct.setSpill_operator_max_bytesIsSet(true);
      }
      if (incoming.get(38)) {
        struct.spill_encode_level = iprot.readI32();
        struct.setSpill_encode_levelIsSet(true);
      }
      if (incoming.get(39)) {
        struct.spill_revocable_max_bytes = iprot.readI64();
        struct.setSpill_revocable_max_bytesIsSet(true);
      }
      if (incoming.get(40)) {
        struct.spill_enable_direct_io = iprot.readBool();
        struct.setSpill_enable_direct_ioIsSet(true);
      }
      if (incoming.get(41)) {
        struct.spill_rand_ratio = iprot.readDouble();
        struct.setSpill_rand_ratioIsSet(true);
      }
      if (incoming.get(42)) {
        struct.spill_mode = io.datafibre.fibre.thrift.TSpillMode.findByValue(iprot.readI32());
        struct.setSpill_modeIsSet(true);
      }
      if (incoming.get(43)) {
        struct.io_tasks_per_scan_operator = iprot.readI32();
        struct.setIo_tasks_per_scan_operatorIsSet(true);
      }
      if (incoming.get(44)) {
        struct.connector_io_tasks_per_scan_operator = iprot.readI32();
        struct.setConnector_io_tasks_per_scan_operatorIsSet(true);
      }
      if (incoming.get(45)) {
        struct.runtime_filter_early_return_selectivity = iprot.readDouble();
        struct.setRuntime_filter_early_return_selectivityIsSet(true);
      }
      if (incoming.get(46)) {
        struct.enable_dynamic_prune_scan_range = iprot.readBool();
        struct.setEnable_dynamic_prune_scan_rangeIsSet(true);
      }
      if (incoming.get(47)) {
        struct.log_rejected_record_num = iprot.readI64();
        struct.setLog_rejected_record_numIsSet(true);
      }
      if (incoming.get(48)) {
        struct.use_page_cache = iprot.readBool();
        struct.setUse_page_cacheIsSet(true);
      }
      if (incoming.get(49)) {
        struct.enable_connector_adaptive_io_tasks = iprot.readBool();
        struct.setEnable_connector_adaptive_io_tasksIsSet(true);
      }
      if (incoming.get(50)) {
        struct.connector_io_tasks_slow_io_latency_ms = iprot.readI32();
        struct.setConnector_io_tasks_slow_io_latency_msIsSet(true);
      }
      if (incoming.get(51)) {
        struct.scan_use_query_mem_ratio = iprot.readDouble();
        struct.setScan_use_query_mem_ratioIsSet(true);
      }
      if (incoming.get(52)) {
        struct.connector_scan_use_query_mem_ratio = iprot.readDouble();
        struct.setConnector_scan_use_query_mem_ratioIsSet(true);
      }
      if (incoming.get(53)) {
        struct.spillable_operator_mask = iprot.readI64();
        struct.setSpillable_operator_maskIsSet(true);
      }
      if (incoming.get(54)) {
        struct.load_profile_collect_second = iprot.readI64();
        struct.setLoad_profile_collect_secondIsSet(true);
      }
      if (incoming.get(55)) {
        struct.group_concat_max_len = iprot.readI64();
        struct.setGroup_concat_max_lenIsSet(true);
      }
      if (incoming.get(56)) {
        struct.runtime_profile_report_interval = iprot.readI64();
        struct.setRuntime_profile_report_intervalIsSet(true);
      }
      if (incoming.get(57)) {
        struct.enable_collect_table_level_scan_stats = iprot.readBool();
        struct.setEnable_collect_table_level_scan_statsIsSet(true);
      }
      if (incoming.get(58)) {
        struct.interleaving_group_size = iprot.readI32();
        struct.setInterleaving_group_sizeIsSet(true);
      }
      if (incoming.get(59)) {
        struct.overflow_mode = io.datafibre.fibre.thrift.TOverflowMode.findByValue(iprot.readI32());
        struct.setOverflow_modeIsSet(true);
      }
      if (incoming.get(60)) {
        struct.use_column_pool = iprot.readBool();
        struct.setUse_column_poolIsSet(true);
      }
      if (incoming.get(61)) {
        struct.enable_agg_spill_preaggregation = iprot.readBool();
        struct.setEnable_agg_spill_preaggregationIsSet(true);
      }
      if (incoming.get(62)) {
        struct.global_runtime_filter_build_max_size = iprot.readI64();
        struct.setGlobal_runtime_filter_build_max_sizeIsSet(true);
      }
      if (incoming.get(63)) {
        struct.runtime_filter_rpc_http_min_size = iprot.readI64();
        struct.setRuntime_filter_rpc_http_min_sizeIsSet(true);
      }
      if (incoming.get(64)) {
        struct.big_query_profile_threshold = iprot.readI64();
        struct.setBig_query_profile_thresholdIsSet(true);
      }
      if (incoming.get(65)) {
        struct.query_queue_options = new TQueryQueueOptions();
        struct.query_queue_options.read(iprot);
        struct.setQuery_queue_optionsIsSet(true);
      }
      if (incoming.get(66)) {
        struct.enable_file_metacache = iprot.readBool();
        struct.setEnable_file_metacacheIsSet(true);
      }
      if (incoming.get(67)) {
        struct.enable_pipeline_level_shuffle = iprot.readBool();
        struct.setEnable_pipeline_level_shuffleIsSet(true);
      }
      if (incoming.get(68)) {
        struct.enable_hyperscan_vec = iprot.readBool();
        struct.setEnable_hyperscan_vecIsSet(true);
      }
      if (incoming.get(69)) {
        struct.enable_jit = iprot.readBool();
        struct.setEnable_jitIsSet(true);
      }
      if (incoming.get(70)) {
        struct.big_query_profile_threshold_unit = io.datafibre.fibre.thrift.TTimeUnit.findByValue(iprot.readI32());
        struct.setBig_query_profile_threshold_unitIsSet(true);
      }
      if (incoming.get(71)) {
        struct.sql_dialect = iprot.readString();
        struct.setSql_dialectIsSet(true);
      }
      if (incoming.get(72)) {
        struct.enable_spill_to_remote_storage = iprot.readBool();
        struct.setEnable_spill_to_remote_storageIsSet(true);
      }
      if (incoming.get(73)) {
        struct.spill_to_remote_storage_options = new TSpillToRemoteStorageOptions();
        struct.spill_to_remote_storage_options.read(iprot);
        struct.setSpill_to_remote_storage_optionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

