/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TMasterOpRequest implements org.apache.thrift.TBase<TMasterOpRequest, TMasterOpRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TMasterOpRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMasterOpRequest");

  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RESOURCE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXEC_MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("execMemLimit", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField QUERY_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryTimeout", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField USER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ip", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TIME_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("time_zone", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STMT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stmt_id", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField SQL_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlMode", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField LOAD_MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("loadMemLimit", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField ENABLE_STRICT_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("enableStrictMode", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField CURRENT_USER_IDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("current_user_ident", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField STMT_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("stmtIdx", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField QUERY_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_options", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("queryId", org.apache.thrift.protocol.TType.STRUCT, (short)30);
  private static final org.apache.thrift.protocol.TField IS_LAST_STMT_FIELD_DESC = new org.apache.thrift.protocol.TField("isLastStmt", org.apache.thrift.protocol.TType.BOOL, (short)31);
  private static final org.apache.thrift.protocol.TField MODIFIED_VARIABLES_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("modified_variables_sql", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField USER_ROLES_FIELD_DESC = new org.apache.thrift.protocol.TField("user_roles", org.apache.thrift.protocol.TType.STRUCT, (short)33);
  private static final org.apache.thrift.protocol.TField FORWARD_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("forward_times", org.apache.thrift.protocol.TType.I32, (short)34);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMasterOpRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMasterOpRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String user; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String sql; // required
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TResourceInfo resourceInfo; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String cluster; // optional
  public long execMemLimit; // optional
  public int queryTimeout; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String user_ip; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String time_zone; // optional
  public long stmt_id; // optional
  public long sqlMode; // optional
  public long loadMemLimit; // optional
  public boolean enableStrictMode; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUserIdentity current_user_ident; // optional
  public int stmtIdx; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TQueryOptions query_options; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String catalog; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUniqueId queryId; // optional
  public boolean isLastStmt; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String modified_variables_sql; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUserRoles user_roles; // optional
  public int forward_times; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER((short)1, "user"),
    DB((short)2, "db"),
    SQL((short)3, "sql"),
    RESOURCE_INFO((short)4, "resourceInfo"),
    CLUSTER((short)5, "cluster"),
    EXEC_MEM_LIMIT((short)6, "execMemLimit"),
    QUERY_TIMEOUT((short)7, "queryTimeout"),
    USER_IP((short)8, "user_ip"),
    TIME_ZONE((short)9, "time_zone"),
    STMT_ID((short)10, "stmt_id"),
    SQL_MODE((short)11, "sqlMode"),
    LOAD_MEM_LIMIT((short)12, "loadMemLimit"),
    ENABLE_STRICT_MODE((short)13, "enableStrictMode"),
    CURRENT_USER_IDENT((short)14, "current_user_ident"),
    STMT_IDX((short)15, "stmtIdx"),
    QUERY_OPTIONS((short)16, "query_options"),
    CATALOG((short)17, "catalog"),
    QUERY_ID((short)30, "queryId"),
    IS_LAST_STMT((short)31, "isLastStmt"),
    MODIFIED_VARIABLES_SQL((short)32, "modified_variables_sql"),
    USER_ROLES((short)33, "user_roles"),
    FORWARD_TIMES((short)34, "forward_times");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER
          return USER;
        case 2: // DB
          return DB;
        case 3: // SQL
          return SQL;
        case 4: // RESOURCE_INFO
          return RESOURCE_INFO;
        case 5: // CLUSTER
          return CLUSTER;
        case 6: // EXEC_MEM_LIMIT
          return EXEC_MEM_LIMIT;
        case 7: // QUERY_TIMEOUT
          return QUERY_TIMEOUT;
        case 8: // USER_IP
          return USER_IP;
        case 9: // TIME_ZONE
          return TIME_ZONE;
        case 10: // STMT_ID
          return STMT_ID;
        case 11: // SQL_MODE
          return SQL_MODE;
        case 12: // LOAD_MEM_LIMIT
          return LOAD_MEM_LIMIT;
        case 13: // ENABLE_STRICT_MODE
          return ENABLE_STRICT_MODE;
        case 14: // CURRENT_USER_IDENT
          return CURRENT_USER_IDENT;
        case 15: // STMT_IDX
          return STMT_IDX;
        case 16: // QUERY_OPTIONS
          return QUERY_OPTIONS;
        case 17: // CATALOG
          return CATALOG;
        case 30: // QUERY_ID
          return QUERY_ID;
        case 31: // IS_LAST_STMT
          return IS_LAST_STMT;
        case 32: // MODIFIED_VARIABLES_SQL
          return MODIFIED_VARIABLES_SQL;
        case 33: // USER_ROLES
          return USER_ROLES;
        case 34: // FORWARD_TIMES
          return FORWARD_TIMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECMEMLIMIT_ISSET_ID = 0;
  private static final int __QUERYTIMEOUT_ISSET_ID = 1;
  private static final int __STMT_ID_ISSET_ID = 2;
  private static final int __SQLMODE_ISSET_ID = 3;
  private static final int __LOADMEMLIMIT_ISSET_ID = 4;
  private static final int __ENABLESTRICTMODE_ISSET_ID = 5;
  private static final int __STMTIDX_ISSET_ID = 6;
  private static final int __ISLASTSTMT_ISSET_ID = 7;
  private static final int __FORWARD_TIMES_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RESOURCE_INFO,_Fields.CLUSTER,_Fields.EXEC_MEM_LIMIT,_Fields.QUERY_TIMEOUT,_Fields.USER_IP,_Fields.TIME_ZONE,_Fields.STMT_ID,_Fields.SQL_MODE,_Fields.LOAD_MEM_LIMIT,_Fields.ENABLE_STRICT_MODE,_Fields.CURRENT_USER_IDENT,_Fields.STMT_IDX,_Fields.QUERY_OPTIONS,_Fields.CATALOG,_Fields.QUERY_ID,_Fields.IS_LAST_STMT,_Fields.MODIFIED_VARIABLES_SQL,_Fields.USER_ROLES,_Fields.FORWARD_TIMES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_INFO, new org.apache.thrift.meta_data.FieldMetaData("resourceInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TResourceInfo.class)));
    tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXEC_MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("execMemLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("queryTimeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IP, new org.apache.thrift.meta_data.FieldMetaData("user_ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_ZONE, new org.apache.thrift.meta_data.FieldMetaData("time_zone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STMT_ID, new org.apache.thrift.meta_data.FieldMetaData("stmt_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SQL_MODE, new org.apache.thrift.meta_data.FieldMetaData("sqlMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOAD_MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("loadMemLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLE_STRICT_MODE, new org.apache.thrift.meta_data.FieldMetaData("enableStrictMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CURRENT_USER_IDENT, new org.apache.thrift.meta_data.FieldMetaData("current_user_ident", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TUserIdentity.class)));
    tmpMap.put(_Fields.STMT_IDX, new org.apache.thrift.meta_data.FieldMetaData("stmtIdx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("query_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TQueryOptions.class)));
    tmpMap.put(_Fields.CATALOG, new org.apache.thrift.meta_data.FieldMetaData("catalog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("queryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.IS_LAST_STMT, new org.apache.thrift.meta_data.FieldMetaData("isLastStmt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MODIFIED_VARIABLES_SQL, new org.apache.thrift.meta_data.FieldMetaData("modified_variables_sql", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ROLES, new org.apache.thrift.meta_data.FieldMetaData("user_roles", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TUserRoles.class)));
    tmpMap.put(_Fields.FORWARD_TIMES, new org.apache.thrift.meta_data.FieldMetaData("forward_times", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMasterOpRequest.class, metaDataMap);
  }

  public TMasterOpRequest() {
  }

  public TMasterOpRequest(
    java.lang.String user,
    java.lang.String db,
    java.lang.String sql)
  {
    this();
    this.user = user;
    this.db = db;
    this.sql = sql;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMasterOpRequest(TMasterOpRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetDb()) {
      this.db = other.db;
    }
    if (other.isSetSql()) {
      this.sql = other.sql;
    }
    if (other.isSetResourceInfo()) {
      this.resourceInfo = new io.datafibre.fibre.thrift.TResourceInfo(other.resourceInfo);
    }
    if (other.isSetCluster()) {
      this.cluster = other.cluster;
    }
    this.execMemLimit = other.execMemLimit;
    this.queryTimeout = other.queryTimeout;
    if (other.isSetUser_ip()) {
      this.user_ip = other.user_ip;
    }
    if (other.isSetTime_zone()) {
      this.time_zone = other.time_zone;
    }
    this.stmt_id = other.stmt_id;
    this.sqlMode = other.sqlMode;
    this.loadMemLimit = other.loadMemLimit;
    this.enableStrictMode = other.enableStrictMode;
    if (other.isSetCurrent_user_ident()) {
      this.current_user_ident = new io.datafibre.fibre.thrift.TUserIdentity(other.current_user_ident);
    }
    this.stmtIdx = other.stmtIdx;
    if (other.isSetQuery_options()) {
      this.query_options = new io.datafibre.fibre.thrift.TQueryOptions(other.query_options);
    }
    if (other.isSetCatalog()) {
      this.catalog = other.catalog;
    }
    if (other.isSetQueryId()) {
      this.queryId = new io.datafibre.fibre.thrift.TUniqueId(other.queryId);
    }
    this.isLastStmt = other.isLastStmt;
    if (other.isSetModified_variables_sql()) {
      this.modified_variables_sql = other.modified_variables_sql;
    }
    if (other.isSetUser_roles()) {
      this.user_roles = new io.datafibre.fibre.thrift.TUserRoles(other.user_roles);
    }
    this.forward_times = other.forward_times;
  }

  @Override
  public TMasterOpRequest deepCopy() {
    return new TMasterOpRequest(this);
  }

  @Override
  public void clear() {
    this.user = null;
    this.db = null;
    this.sql = null;
    this.resourceInfo = null;
    this.cluster = null;
    setExecMemLimitIsSet(false);
    this.execMemLimit = 0;
    setQueryTimeoutIsSet(false);
    this.queryTimeout = 0;
    this.user_ip = null;
    this.time_zone = null;
    setStmt_idIsSet(false);
    this.stmt_id = 0;
    setSqlModeIsSet(false);
    this.sqlMode = 0;
    setLoadMemLimitIsSet(false);
    this.loadMemLimit = 0;
    setEnableStrictModeIsSet(false);
    this.enableStrictMode = false;
    this.current_user_ident = null;
    setStmtIdxIsSet(false);
    this.stmtIdx = 0;
    this.query_options = null;
    this.catalog = null;
    this.queryId = null;
    setIsLastStmtIsSet(false);
    this.isLastStmt = false;
    this.modified_variables_sql = null;
    this.user_roles = null;
    setForward_timesIsSet(false);
    this.forward_times = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser() {
    return this.user;
  }

  public TMasterOpRequest setUser(@org.apache.thrift.annotation.Nullable java.lang.String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb() {
    return this.db;
  }

  public TMasterOpRequest setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSql() {
    return this.sql;
  }

  public TMasterOpRequest setSql(@org.apache.thrift.annotation.Nullable java.lang.String sql) {
    this.sql = sql;
    return this;
  }

  public void unsetSql() {
    this.sql = null;
  }

  /** Returns true if field sql is set (has been assigned a value) and false otherwise */
  public boolean isSetSql() {
    return this.sql != null;
  }

  public void setSqlIsSet(boolean value) {
    if (!value) {
      this.sql = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TResourceInfo getResourceInfo() {
    return this.resourceInfo;
  }

  public TMasterOpRequest setResourceInfo(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TResourceInfo resourceInfo) {
    this.resourceInfo = resourceInfo;
    return this;
  }

  public void unsetResourceInfo() {
    this.resourceInfo = null;
  }

  /** Returns true if field resourceInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceInfo() {
    return this.resourceInfo != null;
  }

  public void setResourceInfoIsSet(boolean value) {
    if (!value) {
      this.resourceInfo = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCluster() {
    return this.cluster;
  }

  public TMasterOpRequest setCluster(@org.apache.thrift.annotation.Nullable java.lang.String cluster) {
    this.cluster = cluster;
    return this;
  }

  public void unsetCluster() {
    this.cluster = null;
  }

  /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster() {
    return this.cluster != null;
  }

  public void setClusterIsSet(boolean value) {
    if (!value) {
      this.cluster = null;
    }
  }

  public long getExecMemLimit() {
    return this.execMemLimit;
  }

  public TMasterOpRequest setExecMemLimit(long execMemLimit) {
    this.execMemLimit = execMemLimit;
    setExecMemLimitIsSet(true);
    return this;
  }

  public void unsetExecMemLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECMEMLIMIT_ISSET_ID);
  }

  /** Returns true if field execMemLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetExecMemLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECMEMLIMIT_ISSET_ID);
  }

  public void setExecMemLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXECMEMLIMIT_ISSET_ID, value);
  }

  public int getQueryTimeout() {
    return this.queryTimeout;
  }

  public TMasterOpRequest setQueryTimeout(int queryTimeout) {
    this.queryTimeout = queryTimeout;
    setQueryTimeoutIsSet(true);
    return this;
  }

  public void unsetQueryTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERYTIMEOUT_ISSET_ID);
  }

  /** Returns true if field queryTimeout is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERYTIMEOUT_ISSET_ID);
  }

  public void setQueryTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERYTIMEOUT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser_ip() {
    return this.user_ip;
  }

  public TMasterOpRequest setUser_ip(@org.apache.thrift.annotation.Nullable java.lang.String user_ip) {
    this.user_ip = user_ip;
    return this;
  }

  public void unsetUser_ip() {
    this.user_ip = null;
  }

  /** Returns true if field user_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_ip() {
    return this.user_ip != null;
  }

  public void setUser_ipIsSet(boolean value) {
    if (!value) {
      this.user_ip = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTime_zone() {
    return this.time_zone;
  }

  public TMasterOpRequest setTime_zone(@org.apache.thrift.annotation.Nullable java.lang.String time_zone) {
    this.time_zone = time_zone;
    return this;
  }

  public void unsetTime_zone() {
    this.time_zone = null;
  }

  /** Returns true if field time_zone is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_zone() {
    return this.time_zone != null;
  }

  public void setTime_zoneIsSet(boolean value) {
    if (!value) {
      this.time_zone = null;
    }
  }

  public long getStmt_id() {
    return this.stmt_id;
  }

  public TMasterOpRequest setStmt_id(long stmt_id) {
    this.stmt_id = stmt_id;
    setStmt_idIsSet(true);
    return this;
  }

  public void unsetStmt_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STMT_ID_ISSET_ID);
  }

  /** Returns true if field stmt_id is set (has been assigned a value) and false otherwise */
  public boolean isSetStmt_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STMT_ID_ISSET_ID);
  }

  public void setStmt_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STMT_ID_ISSET_ID, value);
  }

  public long getSqlMode() {
    return this.sqlMode;
  }

  public TMasterOpRequest setSqlMode(long sqlMode) {
    this.sqlMode = sqlMode;
    setSqlModeIsSet(true);
    return this;
  }

  public void unsetSqlMode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SQLMODE_ISSET_ID);
  }

  /** Returns true if field sqlMode is set (has been assigned a value) and false otherwise */
  public boolean isSetSqlMode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SQLMODE_ISSET_ID);
  }

  public void setSqlModeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SQLMODE_ISSET_ID, value);
  }

  public long getLoadMemLimit() {
    return this.loadMemLimit;
  }

  public TMasterOpRequest setLoadMemLimit(long loadMemLimit) {
    this.loadMemLimit = loadMemLimit;
    setLoadMemLimitIsSet(true);
    return this;
  }

  public void unsetLoadMemLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADMEMLIMIT_ISSET_ID);
  }

  /** Returns true if field loadMemLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadMemLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADMEMLIMIT_ISSET_ID);
  }

  public void setLoadMemLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADMEMLIMIT_ISSET_ID, value);
  }

  public boolean isEnableStrictMode() {
    return this.enableStrictMode;
  }

  public TMasterOpRequest setEnableStrictMode(boolean enableStrictMode) {
    this.enableStrictMode = enableStrictMode;
    setEnableStrictModeIsSet(true);
    return this;
  }

  public void unsetEnableStrictMode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLESTRICTMODE_ISSET_ID);
  }

  /** Returns true if field enableStrictMode is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableStrictMode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLESTRICTMODE_ISSET_ID);
  }

  public void setEnableStrictModeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLESTRICTMODE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TUserIdentity getCurrent_user_ident() {
    return this.current_user_ident;
  }

  public TMasterOpRequest setCurrent_user_ident(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUserIdentity current_user_ident) {
    this.current_user_ident = current_user_ident;
    return this;
  }

  public void unsetCurrent_user_ident() {
    this.current_user_ident = null;
  }

  /** Returns true if field current_user_ident is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_user_ident() {
    return this.current_user_ident != null;
  }

  public void setCurrent_user_identIsSet(boolean value) {
    if (!value) {
      this.current_user_ident = null;
    }
  }

  public int getStmtIdx() {
    return this.stmtIdx;
  }

  public TMasterOpRequest setStmtIdx(int stmtIdx) {
    this.stmtIdx = stmtIdx;
    setStmtIdxIsSet(true);
    return this;
  }

  public void unsetStmtIdx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STMTIDX_ISSET_ID);
  }

  /** Returns true if field stmtIdx is set (has been assigned a value) and false otherwise */
  public boolean isSetStmtIdx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STMTIDX_ISSET_ID);
  }

  public void setStmtIdxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STMTIDX_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TQueryOptions getQuery_options() {
    return this.query_options;
  }

  public TMasterOpRequest setQuery_options(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TQueryOptions query_options) {
    this.query_options = query_options;
    return this;
  }

  public void unsetQuery_options() {
    this.query_options = null;
  }

  /** Returns true if field query_options is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_options() {
    return this.query_options != null;
  }

  public void setQuery_optionsIsSet(boolean value) {
    if (!value) {
      this.query_options = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCatalog() {
    return this.catalog;
  }

  public TMasterOpRequest setCatalog(@org.apache.thrift.annotation.Nullable java.lang.String catalog) {
    this.catalog = catalog;
    return this;
  }

  public void unsetCatalog() {
    this.catalog = null;
  }

  /** Returns true if field catalog is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog() {
    return this.catalog != null;
  }

  public void setCatalogIsSet(boolean value) {
    if (!value) {
      this.catalog = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TUniqueId getQueryId() {
    return this.queryId;
  }

  public TMasterOpRequest setQueryId(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUniqueId queryId) {
    this.queryId = queryId;
    return this;
  }

  public void unsetQueryId() {
    this.queryId = null;
  }

  /** Returns true if field queryId is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryId() {
    return this.queryId != null;
  }

  public void setQueryIdIsSet(boolean value) {
    if (!value) {
      this.queryId = null;
    }
  }

  public boolean isIsLastStmt() {
    return this.isLastStmt;
  }

  public TMasterOpRequest setIsLastStmt(boolean isLastStmt) {
    this.isLastStmt = isLastStmt;
    setIsLastStmtIsSet(true);
    return this;
  }

  public void unsetIsLastStmt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISLASTSTMT_ISSET_ID);
  }

  /** Returns true if field isLastStmt is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLastStmt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISLASTSTMT_ISSET_ID);
  }

  public void setIsLastStmtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISLASTSTMT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getModified_variables_sql() {
    return this.modified_variables_sql;
  }

  public TMasterOpRequest setModified_variables_sql(@org.apache.thrift.annotation.Nullable java.lang.String modified_variables_sql) {
    this.modified_variables_sql = modified_variables_sql;
    return this;
  }

  public void unsetModified_variables_sql() {
    this.modified_variables_sql = null;
  }

  /** Returns true if field modified_variables_sql is set (has been assigned a value) and false otherwise */
  public boolean isSetModified_variables_sql() {
    return this.modified_variables_sql != null;
  }

  public void setModified_variables_sqlIsSet(boolean value) {
    if (!value) {
      this.modified_variables_sql = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TUserRoles getUser_roles() {
    return this.user_roles;
  }

  public TMasterOpRequest setUser_roles(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUserRoles user_roles) {
    this.user_roles = user_roles;
    return this;
  }

  public void unsetUser_roles() {
    this.user_roles = null;
  }

  /** Returns true if field user_roles is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_roles() {
    return this.user_roles != null;
  }

  public void setUser_rolesIsSet(boolean value) {
    if (!value) {
      this.user_roles = null;
    }
  }

  public int getForward_times() {
    return this.forward_times;
  }

  public TMasterOpRequest setForward_times(int forward_times) {
    this.forward_times = forward_times;
    setForward_timesIsSet(true);
    return this;
  }

  public void unsetForward_times() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FORWARD_TIMES_ISSET_ID);
  }

  /** Returns true if field forward_times is set (has been assigned a value) and false otherwise */
  public boolean isSetForward_times() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FORWARD_TIMES_ISSET_ID);
  }

  public void setForward_timesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FORWARD_TIMES_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((java.lang.String)value);
      }
      break;

    case DB:
      if (value == null) {
        unsetDb();
      } else {
        setDb((java.lang.String)value);
      }
      break;

    case SQL:
      if (value == null) {
        unsetSql();
      } else {
        setSql((java.lang.String)value);
      }
      break;

    case RESOURCE_INFO:
      if (value == null) {
        unsetResourceInfo();
      } else {
        setResourceInfo((io.datafibre.fibre.thrift.TResourceInfo)value);
      }
      break;

    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((java.lang.String)value);
      }
      break;

    case EXEC_MEM_LIMIT:
      if (value == null) {
        unsetExecMemLimit();
      } else {
        setExecMemLimit((java.lang.Long)value);
      }
      break;

    case QUERY_TIMEOUT:
      if (value == null) {
        unsetQueryTimeout();
      } else {
        setQueryTimeout((java.lang.Integer)value);
      }
      break;

    case USER_IP:
      if (value == null) {
        unsetUser_ip();
      } else {
        setUser_ip((java.lang.String)value);
      }
      break;

    case TIME_ZONE:
      if (value == null) {
        unsetTime_zone();
      } else {
        setTime_zone((java.lang.String)value);
      }
      break;

    case STMT_ID:
      if (value == null) {
        unsetStmt_id();
      } else {
        setStmt_id((java.lang.Long)value);
      }
      break;

    case SQL_MODE:
      if (value == null) {
        unsetSqlMode();
      } else {
        setSqlMode((java.lang.Long)value);
      }
      break;

    case LOAD_MEM_LIMIT:
      if (value == null) {
        unsetLoadMemLimit();
      } else {
        setLoadMemLimit((java.lang.Long)value);
      }
      break;

    case ENABLE_STRICT_MODE:
      if (value == null) {
        unsetEnableStrictMode();
      } else {
        setEnableStrictMode((java.lang.Boolean)value);
      }
      break;

    case CURRENT_USER_IDENT:
      if (value == null) {
        unsetCurrent_user_ident();
      } else {
        setCurrent_user_ident((io.datafibre.fibre.thrift.TUserIdentity)value);
      }
      break;

    case STMT_IDX:
      if (value == null) {
        unsetStmtIdx();
      } else {
        setStmtIdx((java.lang.Integer)value);
      }
      break;

    case QUERY_OPTIONS:
      if (value == null) {
        unsetQuery_options();
      } else {
        setQuery_options((io.datafibre.fibre.thrift.TQueryOptions)value);
      }
      break;

    case CATALOG:
      if (value == null) {
        unsetCatalog();
      } else {
        setCatalog((java.lang.String)value);
      }
      break;

    case QUERY_ID:
      if (value == null) {
        unsetQueryId();
      } else {
        setQueryId((io.datafibre.fibre.thrift.TUniqueId)value);
      }
      break;

    case IS_LAST_STMT:
      if (value == null) {
        unsetIsLastStmt();
      } else {
        setIsLastStmt((java.lang.Boolean)value);
      }
      break;

    case MODIFIED_VARIABLES_SQL:
      if (value == null) {
        unsetModified_variables_sql();
      } else {
        setModified_variables_sql((java.lang.String)value);
      }
      break;

    case USER_ROLES:
      if (value == null) {
        unsetUser_roles();
      } else {
        setUser_roles((io.datafibre.fibre.thrift.TUserRoles)value);
      }
      break;

    case FORWARD_TIMES:
      if (value == null) {
        unsetForward_times();
      } else {
        setForward_times((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER:
      return getUser();

    case DB:
      return getDb();

    case SQL:
      return getSql();

    case RESOURCE_INFO:
      return getResourceInfo();

    case CLUSTER:
      return getCluster();

    case EXEC_MEM_LIMIT:
      return getExecMemLimit();

    case QUERY_TIMEOUT:
      return getQueryTimeout();

    case USER_IP:
      return getUser_ip();

    case TIME_ZONE:
      return getTime_zone();

    case STMT_ID:
      return getStmt_id();

    case SQL_MODE:
      return getSqlMode();

    case LOAD_MEM_LIMIT:
      return getLoadMemLimit();

    case ENABLE_STRICT_MODE:
      return isEnableStrictMode();

    case CURRENT_USER_IDENT:
      return getCurrent_user_ident();

    case STMT_IDX:
      return getStmtIdx();

    case QUERY_OPTIONS:
      return getQuery_options();

    case CATALOG:
      return getCatalog();

    case QUERY_ID:
      return getQueryId();

    case IS_LAST_STMT:
      return isIsLastStmt();

    case MODIFIED_VARIABLES_SQL:
      return getModified_variables_sql();

    case USER_ROLES:
      return getUser_roles();

    case FORWARD_TIMES:
      return getForward_times();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER:
      return isSetUser();
    case DB:
      return isSetDb();
    case SQL:
      return isSetSql();
    case RESOURCE_INFO:
      return isSetResourceInfo();
    case CLUSTER:
      return isSetCluster();
    case EXEC_MEM_LIMIT:
      return isSetExecMemLimit();
    case QUERY_TIMEOUT:
      return isSetQueryTimeout();
    case USER_IP:
      return isSetUser_ip();
    case TIME_ZONE:
      return isSetTime_zone();
    case STMT_ID:
      return isSetStmt_id();
    case SQL_MODE:
      return isSetSqlMode();
    case LOAD_MEM_LIMIT:
      return isSetLoadMemLimit();
    case ENABLE_STRICT_MODE:
      return isSetEnableStrictMode();
    case CURRENT_USER_IDENT:
      return isSetCurrent_user_ident();
    case STMT_IDX:
      return isSetStmtIdx();
    case QUERY_OPTIONS:
      return isSetQuery_options();
    case CATALOG:
      return isSetCatalog();
    case QUERY_ID:
      return isSetQueryId();
    case IS_LAST_STMT:
      return isSetIsLastStmt();
    case MODIFIED_VARIABLES_SQL:
      return isSetModified_variables_sql();
    case USER_ROLES:
      return isSetUser_roles();
    case FORWARD_TIMES:
      return isSetForward_times();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TMasterOpRequest)
      return this.equals((TMasterOpRequest)that);
    return false;
  }

  public boolean equals(TMasterOpRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_sql = true && this.isSetSql();
    boolean that_present_sql = true && that.isSetSql();
    if (this_present_sql || that_present_sql) {
      if (!(this_present_sql && that_present_sql))
        return false;
      if (!this.sql.equals(that.sql))
        return false;
    }

    boolean this_present_resourceInfo = true && this.isSetResourceInfo();
    boolean that_present_resourceInfo = true && that.isSetResourceInfo();
    if (this_present_resourceInfo || that_present_resourceInfo) {
      if (!(this_present_resourceInfo && that_present_resourceInfo))
        return false;
      if (!this.resourceInfo.equals(that.resourceInfo))
        return false;
    }

    boolean this_present_cluster = true && this.isSetCluster();
    boolean that_present_cluster = true && that.isSetCluster();
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (!this.cluster.equals(that.cluster))
        return false;
    }

    boolean this_present_execMemLimit = true && this.isSetExecMemLimit();
    boolean that_present_execMemLimit = true && that.isSetExecMemLimit();
    if (this_present_execMemLimit || that_present_execMemLimit) {
      if (!(this_present_execMemLimit && that_present_execMemLimit))
        return false;
      if (this.execMemLimit != that.execMemLimit)
        return false;
    }

    boolean this_present_queryTimeout = true && this.isSetQueryTimeout();
    boolean that_present_queryTimeout = true && that.isSetQueryTimeout();
    if (this_present_queryTimeout || that_present_queryTimeout) {
      if (!(this_present_queryTimeout && that_present_queryTimeout))
        return false;
      if (this.queryTimeout != that.queryTimeout)
        return false;
    }

    boolean this_present_user_ip = true && this.isSetUser_ip();
    boolean that_present_user_ip = true && that.isSetUser_ip();
    if (this_present_user_ip || that_present_user_ip) {
      if (!(this_present_user_ip && that_present_user_ip))
        return false;
      if (!this.user_ip.equals(that.user_ip))
        return false;
    }

    boolean this_present_time_zone = true && this.isSetTime_zone();
    boolean that_present_time_zone = true && that.isSetTime_zone();
    if (this_present_time_zone || that_present_time_zone) {
      if (!(this_present_time_zone && that_present_time_zone))
        return false;
      if (!this.time_zone.equals(that.time_zone))
        return false;
    }

    boolean this_present_stmt_id = true && this.isSetStmt_id();
    boolean that_present_stmt_id = true && that.isSetStmt_id();
    if (this_present_stmt_id || that_present_stmt_id) {
      if (!(this_present_stmt_id && that_present_stmt_id))
        return false;
      if (this.stmt_id != that.stmt_id)
        return false;
    }

    boolean this_present_sqlMode = true && this.isSetSqlMode();
    boolean that_present_sqlMode = true && that.isSetSqlMode();
    if (this_present_sqlMode || that_present_sqlMode) {
      if (!(this_present_sqlMode && that_present_sqlMode))
        return false;
      if (this.sqlMode != that.sqlMode)
        return false;
    }

    boolean this_present_loadMemLimit = true && this.isSetLoadMemLimit();
    boolean that_present_loadMemLimit = true && that.isSetLoadMemLimit();
    if (this_present_loadMemLimit || that_present_loadMemLimit) {
      if (!(this_present_loadMemLimit && that_present_loadMemLimit))
        return false;
      if (this.loadMemLimit != that.loadMemLimit)
        return false;
    }

    boolean this_present_enableStrictMode = true && this.isSetEnableStrictMode();
    boolean that_present_enableStrictMode = true && that.isSetEnableStrictMode();
    if (this_present_enableStrictMode || that_present_enableStrictMode) {
      if (!(this_present_enableStrictMode && that_present_enableStrictMode))
        return false;
      if (this.enableStrictMode != that.enableStrictMode)
        return false;
    }

    boolean this_present_current_user_ident = true && this.isSetCurrent_user_ident();
    boolean that_present_current_user_ident = true && that.isSetCurrent_user_ident();
    if (this_present_current_user_ident || that_present_current_user_ident) {
      if (!(this_present_current_user_ident && that_present_current_user_ident))
        return false;
      if (!this.current_user_ident.equals(that.current_user_ident))
        return false;
    }

    boolean this_present_stmtIdx = true && this.isSetStmtIdx();
    boolean that_present_stmtIdx = true && that.isSetStmtIdx();
    if (this_present_stmtIdx || that_present_stmtIdx) {
      if (!(this_present_stmtIdx && that_present_stmtIdx))
        return false;
      if (this.stmtIdx != that.stmtIdx)
        return false;
    }

    boolean this_present_query_options = true && this.isSetQuery_options();
    boolean that_present_query_options = true && that.isSetQuery_options();
    if (this_present_query_options || that_present_query_options) {
      if (!(this_present_query_options && that_present_query_options))
        return false;
      if (!this.query_options.equals(that.query_options))
        return false;
    }

    boolean this_present_catalog = true && this.isSetCatalog();
    boolean that_present_catalog = true && that.isSetCatalog();
    if (this_present_catalog || that_present_catalog) {
      if (!(this_present_catalog && that_present_catalog))
        return false;
      if (!this.catalog.equals(that.catalog))
        return false;
    }

    boolean this_present_queryId = true && this.isSetQueryId();
    boolean that_present_queryId = true && that.isSetQueryId();
    if (this_present_queryId || that_present_queryId) {
      if (!(this_present_queryId && that_present_queryId))
        return false;
      if (!this.queryId.equals(that.queryId))
        return false;
    }

    boolean this_present_isLastStmt = true && this.isSetIsLastStmt();
    boolean that_present_isLastStmt = true && that.isSetIsLastStmt();
    if (this_present_isLastStmt || that_present_isLastStmt) {
      if (!(this_present_isLastStmt && that_present_isLastStmt))
        return false;
      if (this.isLastStmt != that.isLastStmt)
        return false;
    }

    boolean this_present_modified_variables_sql = true && this.isSetModified_variables_sql();
    boolean that_present_modified_variables_sql = true && that.isSetModified_variables_sql();
    if (this_present_modified_variables_sql || that_present_modified_variables_sql) {
      if (!(this_present_modified_variables_sql && that_present_modified_variables_sql))
        return false;
      if (!this.modified_variables_sql.equals(that.modified_variables_sql))
        return false;
    }

    boolean this_present_user_roles = true && this.isSetUser_roles();
    boolean that_present_user_roles = true && that.isSetUser_roles();
    if (this_present_user_roles || that_present_user_roles) {
      if (!(this_present_user_roles && that_present_user_roles))
        return false;
      if (!this.user_roles.equals(that.user_roles))
        return false;
    }

    boolean this_present_forward_times = true && this.isSetForward_times();
    boolean that_present_forward_times = true && that.isSetForward_times();
    if (this_present_forward_times || that_present_forward_times) {
      if (!(this_present_forward_times && that_present_forward_times))
        return false;
      if (this.forward_times != that.forward_times)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
    if (isSetUser())
      hashCode = hashCode * 8191 + user.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
    if (isSetDb())
      hashCode = hashCode * 8191 + db.hashCode();

    hashCode = hashCode * 8191 + ((isSetSql()) ? 131071 : 524287);
    if (isSetSql())
      hashCode = hashCode * 8191 + sql.hashCode();

    hashCode = hashCode * 8191 + ((isSetResourceInfo()) ? 131071 : 524287);
    if (isSetResourceInfo())
      hashCode = hashCode * 8191 + resourceInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetCluster()) ? 131071 : 524287);
    if (isSetCluster())
      hashCode = hashCode * 8191 + cluster.hashCode();

    hashCode = hashCode * 8191 + ((isSetExecMemLimit()) ? 131071 : 524287);
    if (isSetExecMemLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(execMemLimit);

    hashCode = hashCode * 8191 + ((isSetQueryTimeout()) ? 131071 : 524287);
    if (isSetQueryTimeout())
      hashCode = hashCode * 8191 + queryTimeout;

    hashCode = hashCode * 8191 + ((isSetUser_ip()) ? 131071 : 524287);
    if (isSetUser_ip())
      hashCode = hashCode * 8191 + user_ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetTime_zone()) ? 131071 : 524287);
    if (isSetTime_zone())
      hashCode = hashCode * 8191 + time_zone.hashCode();

    hashCode = hashCode * 8191 + ((isSetStmt_id()) ? 131071 : 524287);
    if (isSetStmt_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(stmt_id);

    hashCode = hashCode * 8191 + ((isSetSqlMode()) ? 131071 : 524287);
    if (isSetSqlMode())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sqlMode);

    hashCode = hashCode * 8191 + ((isSetLoadMemLimit()) ? 131071 : 524287);
    if (isSetLoadMemLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loadMemLimit);

    hashCode = hashCode * 8191 + ((isSetEnableStrictMode()) ? 131071 : 524287);
    if (isSetEnableStrictMode())
      hashCode = hashCode * 8191 + ((enableStrictMode) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCurrent_user_ident()) ? 131071 : 524287);
    if (isSetCurrent_user_ident())
      hashCode = hashCode * 8191 + current_user_ident.hashCode();

    hashCode = hashCode * 8191 + ((isSetStmtIdx()) ? 131071 : 524287);
    if (isSetStmtIdx())
      hashCode = hashCode * 8191 + stmtIdx;

    hashCode = hashCode * 8191 + ((isSetQuery_options()) ? 131071 : 524287);
    if (isSetQuery_options())
      hashCode = hashCode * 8191 + query_options.hashCode();

    hashCode = hashCode * 8191 + ((isSetCatalog()) ? 131071 : 524287);
    if (isSetCatalog())
      hashCode = hashCode * 8191 + catalog.hashCode();

    hashCode = hashCode * 8191 + ((isSetQueryId()) ? 131071 : 524287);
    if (isSetQueryId())
      hashCode = hashCode * 8191 + queryId.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsLastStmt()) ? 131071 : 524287);
    if (isSetIsLastStmt())
      hashCode = hashCode * 8191 + ((isLastStmt) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetModified_variables_sql()) ? 131071 : 524287);
    if (isSetModified_variables_sql())
      hashCode = hashCode * 8191 + modified_variables_sql.hashCode();

    hashCode = hashCode * 8191 + ((isSetUser_roles()) ? 131071 : 524287);
    if (isSetUser_roles())
      hashCode = hashCode * 8191 + user_roles.hashCode();

    hashCode = hashCode * 8191 + ((isSetForward_times()) ? 131071 : 524287);
    if (isSetForward_times())
      hashCode = hashCode * 8191 + forward_times;

    return hashCode;
  }

  @Override
  public int compareTo(TMasterOpRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUser(), other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb(), other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSql(), other.isSetSql());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResourceInfo(), other.isSetResourceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceInfo, other.resourceInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCluster(), other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExecMemLimit(), other.isSetExecMemLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecMemLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execMemLimit, other.execMemLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryTimeout(), other.isSetQueryTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryTimeout, other.queryTimeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUser_ip(), other.isSetUser_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ip, other.user_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTime_zone(), other.isSetTime_zone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_zone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_zone, other.time_zone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStmt_id(), other.isSetStmt_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStmt_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stmt_id, other.stmt_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSqlMode(), other.isSetSqlMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSqlMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlMode, other.sqlMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadMemLimit(), other.isSetLoadMemLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadMemLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadMemLimit, other.loadMemLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableStrictMode(), other.isSetEnableStrictMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableStrictMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableStrictMode, other.enableStrictMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCurrent_user_ident(), other.isSetCurrent_user_ident());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_user_ident()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_user_ident, other.current_user_ident);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStmtIdx(), other.isSetStmtIdx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStmtIdx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stmtIdx, other.stmtIdx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_options(), other.isSetQuery_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_options, other.query_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCatalog(), other.isSetCatalog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog, other.catalog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryId(), other.isSetQueryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryId, other.queryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsLastStmt(), other.isSetIsLastStmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLastStmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLastStmt, other.isLastStmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetModified_variables_sql(), other.isSetModified_variables_sql());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModified_variables_sql()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modified_variables_sql, other.modified_variables_sql);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUser_roles(), other.isSetUser_roles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_roles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_roles, other.user_roles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetForward_times(), other.isSetForward_times());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForward_times()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forward_times, other.forward_times);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMasterOpRequest(");
    boolean first = true;

    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("db:");
    if (this.db == null) {
      sb.append("null");
    } else {
      sb.append(this.db);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sql:");
    if (this.sql == null) {
      sb.append("null");
    } else {
      sb.append(this.sql);
    }
    first = false;
    if (isSetResourceInfo()) {
      if (!first) sb.append(", ");
      sb.append("resourceInfo:");
      if (this.resourceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceInfo);
      }
      first = false;
    }
    if (isSetCluster()) {
      if (!first) sb.append(", ");
      sb.append("cluster:");
      if (this.cluster == null) {
        sb.append("null");
      } else {
        sb.append(this.cluster);
      }
      first = false;
    }
    if (isSetExecMemLimit()) {
      if (!first) sb.append(", ");
      sb.append("execMemLimit:");
      sb.append(this.execMemLimit);
      first = false;
    }
    if (isSetQueryTimeout()) {
      if (!first) sb.append(", ");
      sb.append("queryTimeout:");
      sb.append(this.queryTimeout);
      first = false;
    }
    if (isSetUser_ip()) {
      if (!first) sb.append(", ");
      sb.append("user_ip:");
      if (this.user_ip == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ip);
      }
      first = false;
    }
    if (isSetTime_zone()) {
      if (!first) sb.append(", ");
      sb.append("time_zone:");
      if (this.time_zone == null) {
        sb.append("null");
      } else {
        sb.append(this.time_zone);
      }
      first = false;
    }
    if (isSetStmt_id()) {
      if (!first) sb.append(", ");
      sb.append("stmt_id:");
      sb.append(this.stmt_id);
      first = false;
    }
    if (isSetSqlMode()) {
      if (!first) sb.append(", ");
      sb.append("sqlMode:");
      sb.append(this.sqlMode);
      first = false;
    }
    if (isSetLoadMemLimit()) {
      if (!first) sb.append(", ");
      sb.append("loadMemLimit:");
      sb.append(this.loadMemLimit);
      first = false;
    }
    if (isSetEnableStrictMode()) {
      if (!first) sb.append(", ");
      sb.append("enableStrictMode:");
      sb.append(this.enableStrictMode);
      first = false;
    }
    if (isSetCurrent_user_ident()) {
      if (!first) sb.append(", ");
      sb.append("current_user_ident:");
      if (this.current_user_ident == null) {
        sb.append("null");
      } else {
        sb.append(this.current_user_ident);
      }
      first = false;
    }
    if (isSetStmtIdx()) {
      if (!first) sb.append(", ");
      sb.append("stmtIdx:");
      sb.append(this.stmtIdx);
      first = false;
    }
    if (isSetQuery_options()) {
      if (!first) sb.append(", ");
      sb.append("query_options:");
      if (this.query_options == null) {
        sb.append("null");
      } else {
        sb.append(this.query_options);
      }
      first = false;
    }
    if (isSetCatalog()) {
      if (!first) sb.append(", ");
      sb.append("catalog:");
      if (this.catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog);
      }
      first = false;
    }
    if (isSetQueryId()) {
      if (!first) sb.append(", ");
      sb.append("queryId:");
      if (this.queryId == null) {
        sb.append("null");
      } else {
        sb.append(this.queryId);
      }
      first = false;
    }
    if (isSetIsLastStmt()) {
      if (!first) sb.append(", ");
      sb.append("isLastStmt:");
      sb.append(this.isLastStmt);
      first = false;
    }
    if (isSetModified_variables_sql()) {
      if (!first) sb.append(", ");
      sb.append("modified_variables_sql:");
      if (this.modified_variables_sql == null) {
        sb.append("null");
      } else {
        sb.append(this.modified_variables_sql);
      }
      first = false;
    }
    if (isSetUser_roles()) {
      if (!first) sb.append(", ");
      sb.append("user_roles:");
      if (this.user_roles == null) {
        sb.append("null");
      } else {
        sb.append(this.user_roles);
      }
      first = false;
    }
    if (isSetForward_times()) {
      if (!first) sb.append(", ");
      sb.append("forward_times:");
      sb.append(this.forward_times);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (user == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' was not present! Struct: " + toString());
    }
    if (db == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db' was not present! Struct: " + toString());
    }
    if (sql == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sql' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (resourceInfo != null) {
      resourceInfo.validate();
    }
    if (current_user_ident != null) {
      current_user_ident.validate();
    }
    if (query_options != null) {
      query_options.validate();
    }
    if (queryId != null) {
      queryId.validate();
    }
    if (user_roles != null) {
      user_roles.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMasterOpRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMasterOpRequestStandardScheme getScheme() {
      return new TMasterOpRequestStandardScheme();
    }
  }

  private static class TMasterOpRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMasterOpRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TMasterOpRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SQL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql = iprot.readString();
              struct.setSqlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESOURCE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resourceInfo = new io.datafibre.fibre.thrift.TResourceInfo();
              struct.resourceInfo.read(iprot);
              struct.setResourceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cluster = iprot.readString();
              struct.setClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXEC_MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execMemLimit = iprot.readI64();
              struct.setExecMemLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUERY_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryTimeout = iprot.readI32();
              struct.setQueryTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_ip = iprot.readString();
              struct.setUser_ipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TIME_ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time_zone = iprot.readString();
              struct.setTime_zoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STMT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.stmt_id = iprot.readI64();
              struct.setStmt_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SQL_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sqlMode = iprot.readI64();
              struct.setSqlModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOAD_MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loadMemLimit = iprot.readI64();
              struct.setLoadMemLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ENABLE_STRICT_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableStrictMode = iprot.readBool();
              struct.setEnableStrictModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CURRENT_USER_IDENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.current_user_ident = new io.datafibre.fibre.thrift.TUserIdentity();
              struct.current_user_ident.read(iprot);
              struct.setCurrent_user_identIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // STMT_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stmtIdx = iprot.readI32();
              struct.setStmtIdxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // QUERY_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_options = new io.datafibre.fibre.thrift.TQueryOptions();
              struct.query_options.read(iprot);
              struct.setQuery_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CATALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catalog = iprot.readString();
              struct.setCatalogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.queryId = new io.datafibre.fibre.thrift.TUniqueId();
              struct.queryId.read(iprot);
              struct.setQueryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // IS_LAST_STMT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLastStmt = iprot.readBool();
              struct.setIsLastStmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // MODIFIED_VARIABLES_SQL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modified_variables_sql = iprot.readString();
              struct.setModified_variables_sqlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // USER_ROLES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user_roles = new io.datafibre.fibre.thrift.TUserRoles();
              struct.user_roles.read(iprot);
              struct.setUser_rolesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // FORWARD_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.forward_times = iprot.readI32();
              struct.setForward_timesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TMasterOpRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(struct.user);
        oprot.writeFieldEnd();
      }
      if (struct.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(struct.db);
        oprot.writeFieldEnd();
      }
      if (struct.sql != null) {
        oprot.writeFieldBegin(SQL_FIELD_DESC);
        oprot.writeString(struct.sql);
        oprot.writeFieldEnd();
      }
      if (struct.resourceInfo != null) {
        if (struct.isSetResourceInfo()) {
          oprot.writeFieldBegin(RESOURCE_INFO_FIELD_DESC);
          struct.resourceInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cluster != null) {
        if (struct.isSetCluster()) {
          oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
          oprot.writeString(struct.cluster);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExecMemLimit()) {
        oprot.writeFieldBegin(EXEC_MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.execMemLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQueryTimeout()) {
        oprot.writeFieldBegin(QUERY_TIMEOUT_FIELD_DESC);
        oprot.writeI32(struct.queryTimeout);
        oprot.writeFieldEnd();
      }
      if (struct.user_ip != null) {
        if (struct.isSetUser_ip()) {
          oprot.writeFieldBegin(USER_IP_FIELD_DESC);
          oprot.writeString(struct.user_ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.time_zone != null) {
        if (struct.isSetTime_zone()) {
          oprot.writeFieldBegin(TIME_ZONE_FIELD_DESC);
          oprot.writeString(struct.time_zone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStmt_id()) {
        oprot.writeFieldBegin(STMT_ID_FIELD_DESC);
        oprot.writeI64(struct.stmt_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSqlMode()) {
        oprot.writeFieldBegin(SQL_MODE_FIELD_DESC);
        oprot.writeI64(struct.sqlMode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLoadMemLimit()) {
        oprot.writeFieldBegin(LOAD_MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.loadMemLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableStrictMode()) {
        oprot.writeFieldBegin(ENABLE_STRICT_MODE_FIELD_DESC);
        oprot.writeBool(struct.enableStrictMode);
        oprot.writeFieldEnd();
      }
      if (struct.current_user_ident != null) {
        if (struct.isSetCurrent_user_ident()) {
          oprot.writeFieldBegin(CURRENT_USER_IDENT_FIELD_DESC);
          struct.current_user_ident.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStmtIdx()) {
        oprot.writeFieldBegin(STMT_IDX_FIELD_DESC);
        oprot.writeI32(struct.stmtIdx);
        oprot.writeFieldEnd();
      }
      if (struct.query_options != null) {
        if (struct.isSetQuery_options()) {
          oprot.writeFieldBegin(QUERY_OPTIONS_FIELD_DESC);
          struct.query_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.catalog != null) {
        if (struct.isSetCatalog()) {
          oprot.writeFieldBegin(CATALOG_FIELD_DESC);
          oprot.writeString(struct.catalog);
          oprot.writeFieldEnd();
        }
      }
      if (struct.queryId != null) {
        if (struct.isSetQueryId()) {
          oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
          struct.queryId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsLastStmt()) {
        oprot.writeFieldBegin(IS_LAST_STMT_FIELD_DESC);
        oprot.writeBool(struct.isLastStmt);
        oprot.writeFieldEnd();
      }
      if (struct.modified_variables_sql != null) {
        if (struct.isSetModified_variables_sql()) {
          oprot.writeFieldBegin(MODIFIED_VARIABLES_SQL_FIELD_DESC);
          oprot.writeString(struct.modified_variables_sql);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user_roles != null) {
        if (struct.isSetUser_roles()) {
          oprot.writeFieldBegin(USER_ROLES_FIELD_DESC);
          struct.user_roles.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetForward_times()) {
        oprot.writeFieldBegin(FORWARD_TIMES_FIELD_DESC);
        oprot.writeI32(struct.forward_times);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMasterOpRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMasterOpRequestTupleScheme getScheme() {
      return new TMasterOpRequestTupleScheme();
    }
  }

  private static class TMasterOpRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMasterOpRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMasterOpRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.user);
      oprot.writeString(struct.db);
      oprot.writeString(struct.sql);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetResourceInfo()) {
        optionals.set(0);
      }
      if (struct.isSetCluster()) {
        optionals.set(1);
      }
      if (struct.isSetExecMemLimit()) {
        optionals.set(2);
      }
      if (struct.isSetQueryTimeout()) {
        optionals.set(3);
      }
      if (struct.isSetUser_ip()) {
        optionals.set(4);
      }
      if (struct.isSetTime_zone()) {
        optionals.set(5);
      }
      if (struct.isSetStmt_id()) {
        optionals.set(6);
      }
      if (struct.isSetSqlMode()) {
        optionals.set(7);
      }
      if (struct.isSetLoadMemLimit()) {
        optionals.set(8);
      }
      if (struct.isSetEnableStrictMode()) {
        optionals.set(9);
      }
      if (struct.isSetCurrent_user_ident()) {
        optionals.set(10);
      }
      if (struct.isSetStmtIdx()) {
        optionals.set(11);
      }
      if (struct.isSetQuery_options()) {
        optionals.set(12);
      }
      if (struct.isSetCatalog()) {
        optionals.set(13);
      }
      if (struct.isSetQueryId()) {
        optionals.set(14);
      }
      if (struct.isSetIsLastStmt()) {
        optionals.set(15);
      }
      if (struct.isSetModified_variables_sql()) {
        optionals.set(16);
      }
      if (struct.isSetUser_roles()) {
        optionals.set(17);
      }
      if (struct.isSetForward_times()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetResourceInfo()) {
        struct.resourceInfo.write(oprot);
      }
      if (struct.isSetCluster()) {
        oprot.writeString(struct.cluster);
      }
      if (struct.isSetExecMemLimit()) {
        oprot.writeI64(struct.execMemLimit);
      }
      if (struct.isSetQueryTimeout()) {
        oprot.writeI32(struct.queryTimeout);
      }
      if (struct.isSetUser_ip()) {
        oprot.writeString(struct.user_ip);
      }
      if (struct.isSetTime_zone()) {
        oprot.writeString(struct.time_zone);
      }
      if (struct.isSetStmt_id()) {
        oprot.writeI64(struct.stmt_id);
      }
      if (struct.isSetSqlMode()) {
        oprot.writeI64(struct.sqlMode);
      }
      if (struct.isSetLoadMemLimit()) {
        oprot.writeI64(struct.loadMemLimit);
      }
      if (struct.isSetEnableStrictMode()) {
        oprot.writeBool(struct.enableStrictMode);
      }
      if (struct.isSetCurrent_user_ident()) {
        struct.current_user_ident.write(oprot);
      }
      if (struct.isSetStmtIdx()) {
        oprot.writeI32(struct.stmtIdx);
      }
      if (struct.isSetQuery_options()) {
        struct.query_options.write(oprot);
      }
      if (struct.isSetCatalog()) {
        oprot.writeString(struct.catalog);
      }
      if (struct.isSetQueryId()) {
        struct.queryId.write(oprot);
      }
      if (struct.isSetIsLastStmt()) {
        oprot.writeBool(struct.isLastStmt);
      }
      if (struct.isSetModified_variables_sql()) {
        oprot.writeString(struct.modified_variables_sql);
      }
      if (struct.isSetUser_roles()) {
        struct.user_roles.write(oprot);
      }
      if (struct.isSetForward_times()) {
        oprot.writeI32(struct.forward_times);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMasterOpRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.user = iprot.readString();
      struct.setUserIsSet(true);
      struct.db = iprot.readString();
      struct.setDbIsSet(true);
      struct.sql = iprot.readString();
      struct.setSqlIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.resourceInfo = new io.datafibre.fibre.thrift.TResourceInfo();
        struct.resourceInfo.read(iprot);
        struct.setResourceInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cluster = iprot.readString();
        struct.setClusterIsSet(true);
      }
      if (incoming.get(2)) {
        struct.execMemLimit = iprot.readI64();
        struct.setExecMemLimitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.queryTimeout = iprot.readI32();
        struct.setQueryTimeoutIsSet(true);
      }
      if (incoming.get(4)) {
        struct.user_ip = iprot.readString();
        struct.setUser_ipIsSet(true);
      }
      if (incoming.get(5)) {
        struct.time_zone = iprot.readString();
        struct.setTime_zoneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.stmt_id = iprot.readI64();
        struct.setStmt_idIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sqlMode = iprot.readI64();
        struct.setSqlModeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.loadMemLimit = iprot.readI64();
        struct.setLoadMemLimitIsSet(true);
      }
      if (incoming.get(9)) {
        struct.enableStrictMode = iprot.readBool();
        struct.setEnableStrictModeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.current_user_ident = new io.datafibre.fibre.thrift.TUserIdentity();
        struct.current_user_ident.read(iprot);
        struct.setCurrent_user_identIsSet(true);
      }
      if (incoming.get(11)) {
        struct.stmtIdx = iprot.readI32();
        struct.setStmtIdxIsSet(true);
      }
      if (incoming.get(12)) {
        struct.query_options = new io.datafibre.fibre.thrift.TQueryOptions();
        struct.query_options.read(iprot);
        struct.setQuery_optionsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.catalog = iprot.readString();
        struct.setCatalogIsSet(true);
      }
      if (incoming.get(14)) {
        struct.queryId = new io.datafibre.fibre.thrift.TUniqueId();
        struct.queryId.read(iprot);
        struct.setQueryIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.isLastStmt = iprot.readBool();
        struct.setIsLastStmtIsSet(true);
      }
      if (incoming.get(16)) {
        struct.modified_variables_sql = iprot.readString();
        struct.setModified_variables_sqlIsSet(true);
      }
      if (incoming.get(17)) {
        struct.user_roles = new io.datafibre.fibre.thrift.TUserRoles();
        struct.user_roles.read(iprot);
        struct.setUser_rolesIsSet(true);
      }
      if (incoming.get(18)) {
        struct.forward_times = iprot.readI32();
        struct.setForward_timesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

