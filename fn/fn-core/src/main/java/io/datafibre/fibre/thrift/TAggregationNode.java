/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TAggregationNode implements org.apache.thrift.TBase<TAggregationNode, TAggregationNode._Fields>, java.io.Serializable, Cloneable, Comparable<TAggregationNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAggregationNode");

  private static final org.apache.thrift.protocol.TField GROUPING_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("grouping_exprs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField AGGREGATE_FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregate_functions", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField INTERMEDIATE_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediate_tuple_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField OUTPUT_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("output_tuple_id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NEED_FINALIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("need_finalize", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField USE_STREAMING_PREAGGREGATION_FIELD_DESC = new org.apache.thrift.protocol.TField("use_streaming_preaggregation", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField HAS_OUTER_JOIN_CHILD_FIELD_DESC = new org.apache.thrift.protocol.TField("has_outer_join_child", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField STREAMING_PREAGGREGATION_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("streaming_preaggregation_mode", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField SQL_GROUPING_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_grouping_keys", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField SQL_AGGREGATE_FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_aggregate_functions", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField AGG_FUNC_SET_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("agg_func_set_version", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField INTERMEDIATE_AGGR_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediate_aggr_exprs", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField INTERPOLATE_PASSTHROUGH_FIELD_DESC = new org.apache.thrift.protocol.TField("interpolate_passthrough", org.apache.thrift.protocol.TType.BOOL, (short)26);
  private static final org.apache.thrift.protocol.TField USE_SORT_AGG_FIELD_DESC = new org.apache.thrift.protocol.TField("use_sort_agg", org.apache.thrift.protocol.TType.BOOL, (short)27);
  private static final org.apache.thrift.protocol.TField USE_PER_BUCKET_OPTIMIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("use_per_bucket_optimize", org.apache.thrift.protocol.TType.BOOL, (short)28);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAggregationNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAggregationNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> grouping_exprs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> aggregate_functions; // required
  public int intermediate_tuple_id; // required
  public int output_tuple_id; // required
  public boolean need_finalize; // required
  public boolean use_streaming_preaggregation; // optional
  public boolean has_outer_join_child; // optional
  /**
   * 
   * @see TStreamingPreaggregationMode
   */
  public @org.apache.thrift.annotation.Nullable TStreamingPreaggregationMode streaming_preaggregation_mode; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sql_grouping_keys; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sql_aggregate_functions; // optional
  public int agg_func_set_version; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> intermediate_aggr_exprs; // optional
  public boolean interpolate_passthrough; // optional
  public boolean use_sort_agg; // optional
  public boolean use_per_bucket_optimize; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUPING_EXPRS((short)1, "grouping_exprs"),
    AGGREGATE_FUNCTIONS((short)2, "aggregate_functions"),
    INTERMEDIATE_TUPLE_ID((short)3, "intermediate_tuple_id"),
    OUTPUT_TUPLE_ID((short)4, "output_tuple_id"),
    NEED_FINALIZE((short)5, "need_finalize"),
    USE_STREAMING_PREAGGREGATION((short)6, "use_streaming_preaggregation"),
    HAS_OUTER_JOIN_CHILD((short)20, "has_outer_join_child"),
    /**
     * 
     * @see TStreamingPreaggregationMode
     */
    STREAMING_PREAGGREGATION_MODE((short)21, "streaming_preaggregation_mode"),
    SQL_GROUPING_KEYS((short)22, "sql_grouping_keys"),
    SQL_AGGREGATE_FUNCTIONS((short)23, "sql_aggregate_functions"),
    AGG_FUNC_SET_VERSION((short)24, "agg_func_set_version"),
    INTERMEDIATE_AGGR_EXPRS((short)25, "intermediate_aggr_exprs"),
    INTERPOLATE_PASSTHROUGH((short)26, "interpolate_passthrough"),
    USE_SORT_AGG((short)27, "use_sort_agg"),
    USE_PER_BUCKET_OPTIMIZE((short)28, "use_per_bucket_optimize");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUPING_EXPRS
          return GROUPING_EXPRS;
        case 2: // AGGREGATE_FUNCTIONS
          return AGGREGATE_FUNCTIONS;
        case 3: // INTERMEDIATE_TUPLE_ID
          return INTERMEDIATE_TUPLE_ID;
        case 4: // OUTPUT_TUPLE_ID
          return OUTPUT_TUPLE_ID;
        case 5: // NEED_FINALIZE
          return NEED_FINALIZE;
        case 6: // USE_STREAMING_PREAGGREGATION
          return USE_STREAMING_PREAGGREGATION;
        case 20: // HAS_OUTER_JOIN_CHILD
          return HAS_OUTER_JOIN_CHILD;
        case 21: // STREAMING_PREAGGREGATION_MODE
          return STREAMING_PREAGGREGATION_MODE;
        case 22: // SQL_GROUPING_KEYS
          return SQL_GROUPING_KEYS;
        case 23: // SQL_AGGREGATE_FUNCTIONS
          return SQL_AGGREGATE_FUNCTIONS;
        case 24: // AGG_FUNC_SET_VERSION
          return AGG_FUNC_SET_VERSION;
        case 25: // INTERMEDIATE_AGGR_EXPRS
          return INTERMEDIATE_AGGR_EXPRS;
        case 26: // INTERPOLATE_PASSTHROUGH
          return INTERPOLATE_PASSTHROUGH;
        case 27: // USE_SORT_AGG
          return USE_SORT_AGG;
        case 28: // USE_PER_BUCKET_OPTIMIZE
          return USE_PER_BUCKET_OPTIMIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTERMEDIATE_TUPLE_ID_ISSET_ID = 0;
  private static final int __OUTPUT_TUPLE_ID_ISSET_ID = 1;
  private static final int __NEED_FINALIZE_ISSET_ID = 2;
  private static final int __USE_STREAMING_PREAGGREGATION_ISSET_ID = 3;
  private static final int __HAS_OUTER_JOIN_CHILD_ISSET_ID = 4;
  private static final int __AGG_FUNC_SET_VERSION_ISSET_ID = 5;
  private static final int __INTERPOLATE_PASSTHROUGH_ISSET_ID = 6;
  private static final int __USE_SORT_AGG_ISSET_ID = 7;
  private static final int __USE_PER_BUCKET_OPTIMIZE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GROUPING_EXPRS,_Fields.USE_STREAMING_PREAGGREGATION,_Fields.HAS_OUTER_JOIN_CHILD,_Fields.STREAMING_PREAGGREGATION_MODE,_Fields.SQL_GROUPING_KEYS,_Fields.SQL_AGGREGATE_FUNCTIONS,_Fields.AGG_FUNC_SET_VERSION,_Fields.INTERMEDIATE_AGGR_EXPRS,_Fields.INTERPOLATE_PASSTHROUGH,_Fields.USE_SORT_AGG,_Fields.USE_PER_BUCKET_OPTIMIZE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUPING_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("grouping_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TExpr.class))));
    tmpMap.put(_Fields.AGGREGATE_FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("aggregate_functions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TExpr.class))));
    tmpMap.put(_Fields.INTERMEDIATE_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("intermediate_tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.OUTPUT_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("output_tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.NEED_FINALIZE, new org.apache.thrift.meta_data.FieldMetaData("need_finalize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USE_STREAMING_PREAGGREGATION, new org.apache.thrift.meta_data.FieldMetaData("use_streaming_preaggregation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_OUTER_JOIN_CHILD, new org.apache.thrift.meta_data.FieldMetaData("has_outer_join_child", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STREAMING_PREAGGREGATION_MODE, new org.apache.thrift.meta_data.FieldMetaData("streaming_preaggregation_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TStreamingPreaggregationMode.class)));
    tmpMap.put(_Fields.SQL_GROUPING_KEYS, new org.apache.thrift.meta_data.FieldMetaData("sql_grouping_keys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SQL_AGGREGATE_FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("sql_aggregate_functions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGG_FUNC_SET_VERSION, new org.apache.thrift.meta_data.FieldMetaData("agg_func_set_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTERMEDIATE_AGGR_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("intermediate_aggr_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TExpr.class))));
    tmpMap.put(_Fields.INTERPOLATE_PASSTHROUGH, new org.apache.thrift.meta_data.FieldMetaData("interpolate_passthrough", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USE_SORT_AGG, new org.apache.thrift.meta_data.FieldMetaData("use_sort_agg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USE_PER_BUCKET_OPTIMIZE, new org.apache.thrift.meta_data.FieldMetaData("use_per_bucket_optimize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAggregationNode.class, metaDataMap);
  }

  public TAggregationNode() {
    this.agg_func_set_version = 1;

    this.interpolate_passthrough = false;

  }

  public TAggregationNode(
    java.util.List<io.datafibre.fibre.thrift.TExpr> aggregate_functions,
    int intermediate_tuple_id,
    int output_tuple_id,
    boolean need_finalize)
  {
    this();
    this.aggregate_functions = aggregate_functions;
    this.intermediate_tuple_id = intermediate_tuple_id;
    setIntermediate_tuple_idIsSet(true);
    this.output_tuple_id = output_tuple_id;
    setOutput_tuple_idIsSet(true);
    this.need_finalize = need_finalize;
    setNeed_finalizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAggregationNode(TAggregationNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGrouping_exprs()) {
      java.util.List<io.datafibre.fibre.thrift.TExpr> __this__grouping_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(other.grouping_exprs.size());
      for (io.datafibre.fibre.thrift.TExpr other_element : other.grouping_exprs) {
        __this__grouping_exprs.add(new io.datafibre.fibre.thrift.TExpr(other_element));
      }
      this.grouping_exprs = __this__grouping_exprs;
    }
    if (other.isSetAggregate_functions()) {
      java.util.List<io.datafibre.fibre.thrift.TExpr> __this__aggregate_functions = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(other.aggregate_functions.size());
      for (io.datafibre.fibre.thrift.TExpr other_element : other.aggregate_functions) {
        __this__aggregate_functions.add(new io.datafibre.fibre.thrift.TExpr(other_element));
      }
      this.aggregate_functions = __this__aggregate_functions;
    }
    this.intermediate_tuple_id = other.intermediate_tuple_id;
    this.output_tuple_id = other.output_tuple_id;
    this.need_finalize = other.need_finalize;
    this.use_streaming_preaggregation = other.use_streaming_preaggregation;
    this.has_outer_join_child = other.has_outer_join_child;
    if (other.isSetStreaming_preaggregation_mode()) {
      this.streaming_preaggregation_mode = other.streaming_preaggregation_mode;
    }
    if (other.isSetSql_grouping_keys()) {
      this.sql_grouping_keys = other.sql_grouping_keys;
    }
    if (other.isSetSql_aggregate_functions()) {
      this.sql_aggregate_functions = other.sql_aggregate_functions;
    }
    this.agg_func_set_version = other.agg_func_set_version;
    if (other.isSetIntermediate_aggr_exprs()) {
      java.util.List<io.datafibre.fibre.thrift.TExpr> __this__intermediate_aggr_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(other.intermediate_aggr_exprs.size());
      for (io.datafibre.fibre.thrift.TExpr other_element : other.intermediate_aggr_exprs) {
        __this__intermediate_aggr_exprs.add(new io.datafibre.fibre.thrift.TExpr(other_element));
      }
      this.intermediate_aggr_exprs = __this__intermediate_aggr_exprs;
    }
    this.interpolate_passthrough = other.interpolate_passthrough;
    this.use_sort_agg = other.use_sort_agg;
    this.use_per_bucket_optimize = other.use_per_bucket_optimize;
  }

  @Override
  public TAggregationNode deepCopy() {
    return new TAggregationNode(this);
  }

  @Override
  public void clear() {
    this.grouping_exprs = null;
    this.aggregate_functions = null;
    setIntermediate_tuple_idIsSet(false);
    this.intermediate_tuple_id = 0;
    setOutput_tuple_idIsSet(false);
    this.output_tuple_id = 0;
    setNeed_finalizeIsSet(false);
    this.need_finalize = false;
    setUse_streaming_preaggregationIsSet(false);
    this.use_streaming_preaggregation = false;
    setHas_outer_join_childIsSet(false);
    this.has_outer_join_child = false;
    this.streaming_preaggregation_mode = null;
    this.sql_grouping_keys = null;
    this.sql_aggregate_functions = null;
    this.agg_func_set_version = 1;

    this.intermediate_aggr_exprs = null;
    this.interpolate_passthrough = false;

    setUse_sort_aggIsSet(false);
    this.use_sort_agg = false;
    setUse_per_bucket_optimizeIsSet(false);
    this.use_per_bucket_optimize = false;
  }

  public int getGrouping_exprsSize() {
    return (this.grouping_exprs == null) ? 0 : this.grouping_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TExpr> getGrouping_exprsIterator() {
    return (this.grouping_exprs == null) ? null : this.grouping_exprs.iterator();
  }

  public void addToGrouping_exprs(io.datafibre.fibre.thrift.TExpr elem) {
    if (this.grouping_exprs == null) {
      this.grouping_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>();
    }
    this.grouping_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TExpr> getGrouping_exprs() {
    return this.grouping_exprs;
  }

  public TAggregationNode setGrouping_exprs(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> grouping_exprs) {
    this.grouping_exprs = grouping_exprs;
    return this;
  }

  public void unsetGrouping_exprs() {
    this.grouping_exprs = null;
  }

  /** Returns true if field grouping_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetGrouping_exprs() {
    return this.grouping_exprs != null;
  }

  public void setGrouping_exprsIsSet(boolean value) {
    if (!value) {
      this.grouping_exprs = null;
    }
  }

  public int getAggregate_functionsSize() {
    return (this.aggregate_functions == null) ? 0 : this.aggregate_functions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TExpr> getAggregate_functionsIterator() {
    return (this.aggregate_functions == null) ? null : this.aggregate_functions.iterator();
  }

  public void addToAggregate_functions(io.datafibre.fibre.thrift.TExpr elem) {
    if (this.aggregate_functions == null) {
      this.aggregate_functions = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>();
    }
    this.aggregate_functions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TExpr> getAggregate_functions() {
    return this.aggregate_functions;
  }

  public TAggregationNode setAggregate_functions(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> aggregate_functions) {
    this.aggregate_functions = aggregate_functions;
    return this;
  }

  public void unsetAggregate_functions() {
    this.aggregate_functions = null;
  }

  /** Returns true if field aggregate_functions is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregate_functions() {
    return this.aggregate_functions != null;
  }

  public void setAggregate_functionsIsSet(boolean value) {
    if (!value) {
      this.aggregate_functions = null;
    }
  }

  public int getIntermediate_tuple_id() {
    return this.intermediate_tuple_id;
  }

  public TAggregationNode setIntermediate_tuple_id(int intermediate_tuple_id) {
    this.intermediate_tuple_id = intermediate_tuple_id;
    setIntermediate_tuple_idIsSet(true);
    return this;
  }

  public void unsetIntermediate_tuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERMEDIATE_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field intermediate_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetIntermediate_tuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERMEDIATE_TUPLE_ID_ISSET_ID);
  }

  public void setIntermediate_tuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERMEDIATE_TUPLE_ID_ISSET_ID, value);
  }

  public int getOutput_tuple_id() {
    return this.output_tuple_id;
  }

  public TAggregationNode setOutput_tuple_id(int output_tuple_id) {
    this.output_tuple_id = output_tuple_id;
    setOutput_tuple_idIsSet(true);
    return this;
  }

  public void unsetOutput_tuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field output_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_tuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID);
  }

  public void setOutput_tuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID, value);
  }

  public boolean isNeed_finalize() {
    return this.need_finalize;
  }

  public TAggregationNode setNeed_finalize(boolean need_finalize) {
    this.need_finalize = need_finalize;
    setNeed_finalizeIsSet(true);
    return this;
  }

  public void unsetNeed_finalize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEED_FINALIZE_ISSET_ID);
  }

  /** Returns true if field need_finalize is set (has been assigned a value) and false otherwise */
  public boolean isSetNeed_finalize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEED_FINALIZE_ISSET_ID);
  }

  public void setNeed_finalizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEED_FINALIZE_ISSET_ID, value);
  }

  public boolean isUse_streaming_preaggregation() {
    return this.use_streaming_preaggregation;
  }

  public TAggregationNode setUse_streaming_preaggregation(boolean use_streaming_preaggregation) {
    this.use_streaming_preaggregation = use_streaming_preaggregation;
    setUse_streaming_preaggregationIsSet(true);
    return this;
  }

  public void unsetUse_streaming_preaggregation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_STREAMING_PREAGGREGATION_ISSET_ID);
  }

  /** Returns true if field use_streaming_preaggregation is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_streaming_preaggregation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_STREAMING_PREAGGREGATION_ISSET_ID);
  }

  public void setUse_streaming_preaggregationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_STREAMING_PREAGGREGATION_ISSET_ID, value);
  }

  public boolean isHas_outer_join_child() {
    return this.has_outer_join_child;
  }

  public TAggregationNode setHas_outer_join_child(boolean has_outer_join_child) {
    this.has_outer_join_child = has_outer_join_child;
    setHas_outer_join_childIsSet(true);
    return this;
  }

  public void unsetHas_outer_join_child() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HAS_OUTER_JOIN_CHILD_ISSET_ID);
  }

  /** Returns true if field has_outer_join_child is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_outer_join_child() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HAS_OUTER_JOIN_CHILD_ISSET_ID);
  }

  public void setHas_outer_join_childIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HAS_OUTER_JOIN_CHILD_ISSET_ID, value);
  }

  /**
   * 
   * @see TStreamingPreaggregationMode
   */
  @org.apache.thrift.annotation.Nullable
  public TStreamingPreaggregationMode getStreaming_preaggregation_mode() {
    return this.streaming_preaggregation_mode;
  }

  /**
   * 
   * @see TStreamingPreaggregationMode
   */
  public TAggregationNode setStreaming_preaggregation_mode(@org.apache.thrift.annotation.Nullable TStreamingPreaggregationMode streaming_preaggregation_mode) {
    this.streaming_preaggregation_mode = streaming_preaggregation_mode;
    return this;
  }

  public void unsetStreaming_preaggregation_mode() {
    this.streaming_preaggregation_mode = null;
  }

  /** Returns true if field streaming_preaggregation_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetStreaming_preaggregation_mode() {
    return this.streaming_preaggregation_mode != null;
  }

  public void setStreaming_preaggregation_modeIsSet(boolean value) {
    if (!value) {
      this.streaming_preaggregation_mode = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSql_grouping_keys() {
    return this.sql_grouping_keys;
  }

  public TAggregationNode setSql_grouping_keys(@org.apache.thrift.annotation.Nullable java.lang.String sql_grouping_keys) {
    this.sql_grouping_keys = sql_grouping_keys;
    return this;
  }

  public void unsetSql_grouping_keys() {
    this.sql_grouping_keys = null;
  }

  /** Returns true if field sql_grouping_keys is set (has been assigned a value) and false otherwise */
  public boolean isSetSql_grouping_keys() {
    return this.sql_grouping_keys != null;
  }

  public void setSql_grouping_keysIsSet(boolean value) {
    if (!value) {
      this.sql_grouping_keys = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSql_aggregate_functions() {
    return this.sql_aggregate_functions;
  }

  public TAggregationNode setSql_aggregate_functions(@org.apache.thrift.annotation.Nullable java.lang.String sql_aggregate_functions) {
    this.sql_aggregate_functions = sql_aggregate_functions;
    return this;
  }

  public void unsetSql_aggregate_functions() {
    this.sql_aggregate_functions = null;
  }

  /** Returns true if field sql_aggregate_functions is set (has been assigned a value) and false otherwise */
  public boolean isSetSql_aggregate_functions() {
    return this.sql_aggregate_functions != null;
  }

  public void setSql_aggregate_functionsIsSet(boolean value) {
    if (!value) {
      this.sql_aggregate_functions = null;
    }
  }

  public int getAgg_func_set_version() {
    return this.agg_func_set_version;
  }

  public TAggregationNode setAgg_func_set_version(int agg_func_set_version) {
    this.agg_func_set_version = agg_func_set_version;
    setAgg_func_set_versionIsSet(true);
    return this;
  }

  public void unsetAgg_func_set_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGG_FUNC_SET_VERSION_ISSET_ID);
  }

  /** Returns true if field agg_func_set_version is set (has been assigned a value) and false otherwise */
  public boolean isSetAgg_func_set_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGG_FUNC_SET_VERSION_ISSET_ID);
  }

  public void setAgg_func_set_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGG_FUNC_SET_VERSION_ISSET_ID, value);
  }

  public int getIntermediate_aggr_exprsSize() {
    return (this.intermediate_aggr_exprs == null) ? 0 : this.intermediate_aggr_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TExpr> getIntermediate_aggr_exprsIterator() {
    return (this.intermediate_aggr_exprs == null) ? null : this.intermediate_aggr_exprs.iterator();
  }

  public void addToIntermediate_aggr_exprs(io.datafibre.fibre.thrift.TExpr elem) {
    if (this.intermediate_aggr_exprs == null) {
      this.intermediate_aggr_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>();
    }
    this.intermediate_aggr_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TExpr> getIntermediate_aggr_exprs() {
    return this.intermediate_aggr_exprs;
  }

  public TAggregationNode setIntermediate_aggr_exprs(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> intermediate_aggr_exprs) {
    this.intermediate_aggr_exprs = intermediate_aggr_exprs;
    return this;
  }

  public void unsetIntermediate_aggr_exprs() {
    this.intermediate_aggr_exprs = null;
  }

  /** Returns true if field intermediate_aggr_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetIntermediate_aggr_exprs() {
    return this.intermediate_aggr_exprs != null;
  }

  public void setIntermediate_aggr_exprsIsSet(boolean value) {
    if (!value) {
      this.intermediate_aggr_exprs = null;
    }
  }

  public boolean isInterpolate_passthrough() {
    return this.interpolate_passthrough;
  }

  public TAggregationNode setInterpolate_passthrough(boolean interpolate_passthrough) {
    this.interpolate_passthrough = interpolate_passthrough;
    setInterpolate_passthroughIsSet(true);
    return this;
  }

  public void unsetInterpolate_passthrough() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERPOLATE_PASSTHROUGH_ISSET_ID);
  }

  /** Returns true if field interpolate_passthrough is set (has been assigned a value) and false otherwise */
  public boolean isSetInterpolate_passthrough() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERPOLATE_PASSTHROUGH_ISSET_ID);
  }

  public void setInterpolate_passthroughIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERPOLATE_PASSTHROUGH_ISSET_ID, value);
  }

  public boolean isUse_sort_agg() {
    return this.use_sort_agg;
  }

  public TAggregationNode setUse_sort_agg(boolean use_sort_agg) {
    this.use_sort_agg = use_sort_agg;
    setUse_sort_aggIsSet(true);
    return this;
  }

  public void unsetUse_sort_agg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_SORT_AGG_ISSET_ID);
  }

  /** Returns true if field use_sort_agg is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_sort_agg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_SORT_AGG_ISSET_ID);
  }

  public void setUse_sort_aggIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_SORT_AGG_ISSET_ID, value);
  }

  public boolean isUse_per_bucket_optimize() {
    return this.use_per_bucket_optimize;
  }

  public TAggregationNode setUse_per_bucket_optimize(boolean use_per_bucket_optimize) {
    this.use_per_bucket_optimize = use_per_bucket_optimize;
    setUse_per_bucket_optimizeIsSet(true);
    return this;
  }

  public void unsetUse_per_bucket_optimize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_PER_BUCKET_OPTIMIZE_ISSET_ID);
  }

  /** Returns true if field use_per_bucket_optimize is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_per_bucket_optimize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_PER_BUCKET_OPTIMIZE_ISSET_ID);
  }

  public void setUse_per_bucket_optimizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_PER_BUCKET_OPTIMIZE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case GROUPING_EXPRS:
      if (value == null) {
        unsetGrouping_exprs();
      } else {
        setGrouping_exprs((java.util.List<io.datafibre.fibre.thrift.TExpr>)value);
      }
      break;

    case AGGREGATE_FUNCTIONS:
      if (value == null) {
        unsetAggregate_functions();
      } else {
        setAggregate_functions((java.util.List<io.datafibre.fibre.thrift.TExpr>)value);
      }
      break;

    case INTERMEDIATE_TUPLE_ID:
      if (value == null) {
        unsetIntermediate_tuple_id();
      } else {
        setIntermediate_tuple_id((java.lang.Integer)value);
      }
      break;

    case OUTPUT_TUPLE_ID:
      if (value == null) {
        unsetOutput_tuple_id();
      } else {
        setOutput_tuple_id((java.lang.Integer)value);
      }
      break;

    case NEED_FINALIZE:
      if (value == null) {
        unsetNeed_finalize();
      } else {
        setNeed_finalize((java.lang.Boolean)value);
      }
      break;

    case USE_STREAMING_PREAGGREGATION:
      if (value == null) {
        unsetUse_streaming_preaggregation();
      } else {
        setUse_streaming_preaggregation((java.lang.Boolean)value);
      }
      break;

    case HAS_OUTER_JOIN_CHILD:
      if (value == null) {
        unsetHas_outer_join_child();
      } else {
        setHas_outer_join_child((java.lang.Boolean)value);
      }
      break;

    case STREAMING_PREAGGREGATION_MODE:
      if (value == null) {
        unsetStreaming_preaggregation_mode();
      } else {
        setStreaming_preaggregation_mode((TStreamingPreaggregationMode)value);
      }
      break;

    case SQL_GROUPING_KEYS:
      if (value == null) {
        unsetSql_grouping_keys();
      } else {
        setSql_grouping_keys((java.lang.String)value);
      }
      break;

    case SQL_AGGREGATE_FUNCTIONS:
      if (value == null) {
        unsetSql_aggregate_functions();
      } else {
        setSql_aggregate_functions((java.lang.String)value);
      }
      break;

    case AGG_FUNC_SET_VERSION:
      if (value == null) {
        unsetAgg_func_set_version();
      } else {
        setAgg_func_set_version((java.lang.Integer)value);
      }
      break;

    case INTERMEDIATE_AGGR_EXPRS:
      if (value == null) {
        unsetIntermediate_aggr_exprs();
      } else {
        setIntermediate_aggr_exprs((java.util.List<io.datafibre.fibre.thrift.TExpr>)value);
      }
      break;

    case INTERPOLATE_PASSTHROUGH:
      if (value == null) {
        unsetInterpolate_passthrough();
      } else {
        setInterpolate_passthrough((java.lang.Boolean)value);
      }
      break;

    case USE_SORT_AGG:
      if (value == null) {
        unsetUse_sort_agg();
      } else {
        setUse_sort_agg((java.lang.Boolean)value);
      }
      break;

    case USE_PER_BUCKET_OPTIMIZE:
      if (value == null) {
        unsetUse_per_bucket_optimize();
      } else {
        setUse_per_bucket_optimize((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUPING_EXPRS:
      return getGrouping_exprs();

    case AGGREGATE_FUNCTIONS:
      return getAggregate_functions();

    case INTERMEDIATE_TUPLE_ID:
      return getIntermediate_tuple_id();

    case OUTPUT_TUPLE_ID:
      return getOutput_tuple_id();

    case NEED_FINALIZE:
      return isNeed_finalize();

    case USE_STREAMING_PREAGGREGATION:
      return isUse_streaming_preaggregation();

    case HAS_OUTER_JOIN_CHILD:
      return isHas_outer_join_child();

    case STREAMING_PREAGGREGATION_MODE:
      return getStreaming_preaggregation_mode();

    case SQL_GROUPING_KEYS:
      return getSql_grouping_keys();

    case SQL_AGGREGATE_FUNCTIONS:
      return getSql_aggregate_functions();

    case AGG_FUNC_SET_VERSION:
      return getAgg_func_set_version();

    case INTERMEDIATE_AGGR_EXPRS:
      return getIntermediate_aggr_exprs();

    case INTERPOLATE_PASSTHROUGH:
      return isInterpolate_passthrough();

    case USE_SORT_AGG:
      return isUse_sort_agg();

    case USE_PER_BUCKET_OPTIMIZE:
      return isUse_per_bucket_optimize();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case GROUPING_EXPRS:
      return isSetGrouping_exprs();
    case AGGREGATE_FUNCTIONS:
      return isSetAggregate_functions();
    case INTERMEDIATE_TUPLE_ID:
      return isSetIntermediate_tuple_id();
    case OUTPUT_TUPLE_ID:
      return isSetOutput_tuple_id();
    case NEED_FINALIZE:
      return isSetNeed_finalize();
    case USE_STREAMING_PREAGGREGATION:
      return isSetUse_streaming_preaggregation();
    case HAS_OUTER_JOIN_CHILD:
      return isSetHas_outer_join_child();
    case STREAMING_PREAGGREGATION_MODE:
      return isSetStreaming_preaggregation_mode();
    case SQL_GROUPING_KEYS:
      return isSetSql_grouping_keys();
    case SQL_AGGREGATE_FUNCTIONS:
      return isSetSql_aggregate_functions();
    case AGG_FUNC_SET_VERSION:
      return isSetAgg_func_set_version();
    case INTERMEDIATE_AGGR_EXPRS:
      return isSetIntermediate_aggr_exprs();
    case INTERPOLATE_PASSTHROUGH:
      return isSetInterpolate_passthrough();
    case USE_SORT_AGG:
      return isSetUse_sort_agg();
    case USE_PER_BUCKET_OPTIMIZE:
      return isSetUse_per_bucket_optimize();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TAggregationNode)
      return this.equals((TAggregationNode)that);
    return false;
  }

  public boolean equals(TAggregationNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_grouping_exprs = true && this.isSetGrouping_exprs();
    boolean that_present_grouping_exprs = true && that.isSetGrouping_exprs();
    if (this_present_grouping_exprs || that_present_grouping_exprs) {
      if (!(this_present_grouping_exprs && that_present_grouping_exprs))
        return false;
      if (!this.grouping_exprs.equals(that.grouping_exprs))
        return false;
    }

    boolean this_present_aggregate_functions = true && this.isSetAggregate_functions();
    boolean that_present_aggregate_functions = true && that.isSetAggregate_functions();
    if (this_present_aggregate_functions || that_present_aggregate_functions) {
      if (!(this_present_aggregate_functions && that_present_aggregate_functions))
        return false;
      if (!this.aggregate_functions.equals(that.aggregate_functions))
        return false;
    }

    boolean this_present_intermediate_tuple_id = true;
    boolean that_present_intermediate_tuple_id = true;
    if (this_present_intermediate_tuple_id || that_present_intermediate_tuple_id) {
      if (!(this_present_intermediate_tuple_id && that_present_intermediate_tuple_id))
        return false;
      if (this.intermediate_tuple_id != that.intermediate_tuple_id)
        return false;
    }

    boolean this_present_output_tuple_id = true;
    boolean that_present_output_tuple_id = true;
    if (this_present_output_tuple_id || that_present_output_tuple_id) {
      if (!(this_present_output_tuple_id && that_present_output_tuple_id))
        return false;
      if (this.output_tuple_id != that.output_tuple_id)
        return false;
    }

    boolean this_present_need_finalize = true;
    boolean that_present_need_finalize = true;
    if (this_present_need_finalize || that_present_need_finalize) {
      if (!(this_present_need_finalize && that_present_need_finalize))
        return false;
      if (this.need_finalize != that.need_finalize)
        return false;
    }

    boolean this_present_use_streaming_preaggregation = true && this.isSetUse_streaming_preaggregation();
    boolean that_present_use_streaming_preaggregation = true && that.isSetUse_streaming_preaggregation();
    if (this_present_use_streaming_preaggregation || that_present_use_streaming_preaggregation) {
      if (!(this_present_use_streaming_preaggregation && that_present_use_streaming_preaggregation))
        return false;
      if (this.use_streaming_preaggregation != that.use_streaming_preaggregation)
        return false;
    }

    boolean this_present_has_outer_join_child = true && this.isSetHas_outer_join_child();
    boolean that_present_has_outer_join_child = true && that.isSetHas_outer_join_child();
    if (this_present_has_outer_join_child || that_present_has_outer_join_child) {
      if (!(this_present_has_outer_join_child && that_present_has_outer_join_child))
        return false;
      if (this.has_outer_join_child != that.has_outer_join_child)
        return false;
    }

    boolean this_present_streaming_preaggregation_mode = true && this.isSetStreaming_preaggregation_mode();
    boolean that_present_streaming_preaggregation_mode = true && that.isSetStreaming_preaggregation_mode();
    if (this_present_streaming_preaggregation_mode || that_present_streaming_preaggregation_mode) {
      if (!(this_present_streaming_preaggregation_mode && that_present_streaming_preaggregation_mode))
        return false;
      if (!this.streaming_preaggregation_mode.equals(that.streaming_preaggregation_mode))
        return false;
    }

    boolean this_present_sql_grouping_keys = true && this.isSetSql_grouping_keys();
    boolean that_present_sql_grouping_keys = true && that.isSetSql_grouping_keys();
    if (this_present_sql_grouping_keys || that_present_sql_grouping_keys) {
      if (!(this_present_sql_grouping_keys && that_present_sql_grouping_keys))
        return false;
      if (!this.sql_grouping_keys.equals(that.sql_grouping_keys))
        return false;
    }

    boolean this_present_sql_aggregate_functions = true && this.isSetSql_aggregate_functions();
    boolean that_present_sql_aggregate_functions = true && that.isSetSql_aggregate_functions();
    if (this_present_sql_aggregate_functions || that_present_sql_aggregate_functions) {
      if (!(this_present_sql_aggregate_functions && that_present_sql_aggregate_functions))
        return false;
      if (!this.sql_aggregate_functions.equals(that.sql_aggregate_functions))
        return false;
    }

    boolean this_present_agg_func_set_version = true && this.isSetAgg_func_set_version();
    boolean that_present_agg_func_set_version = true && that.isSetAgg_func_set_version();
    if (this_present_agg_func_set_version || that_present_agg_func_set_version) {
      if (!(this_present_agg_func_set_version && that_present_agg_func_set_version))
        return false;
      if (this.agg_func_set_version != that.agg_func_set_version)
        return false;
    }

    boolean this_present_intermediate_aggr_exprs = true && this.isSetIntermediate_aggr_exprs();
    boolean that_present_intermediate_aggr_exprs = true && that.isSetIntermediate_aggr_exprs();
    if (this_present_intermediate_aggr_exprs || that_present_intermediate_aggr_exprs) {
      if (!(this_present_intermediate_aggr_exprs && that_present_intermediate_aggr_exprs))
        return false;
      if (!this.intermediate_aggr_exprs.equals(that.intermediate_aggr_exprs))
        return false;
    }

    boolean this_present_interpolate_passthrough = true && this.isSetInterpolate_passthrough();
    boolean that_present_interpolate_passthrough = true && that.isSetInterpolate_passthrough();
    if (this_present_interpolate_passthrough || that_present_interpolate_passthrough) {
      if (!(this_present_interpolate_passthrough && that_present_interpolate_passthrough))
        return false;
      if (this.interpolate_passthrough != that.interpolate_passthrough)
        return false;
    }

    boolean this_present_use_sort_agg = true && this.isSetUse_sort_agg();
    boolean that_present_use_sort_agg = true && that.isSetUse_sort_agg();
    if (this_present_use_sort_agg || that_present_use_sort_agg) {
      if (!(this_present_use_sort_agg && that_present_use_sort_agg))
        return false;
      if (this.use_sort_agg != that.use_sort_agg)
        return false;
    }

    boolean this_present_use_per_bucket_optimize = true && this.isSetUse_per_bucket_optimize();
    boolean that_present_use_per_bucket_optimize = true && that.isSetUse_per_bucket_optimize();
    if (this_present_use_per_bucket_optimize || that_present_use_per_bucket_optimize) {
      if (!(this_present_use_per_bucket_optimize && that_present_use_per_bucket_optimize))
        return false;
      if (this.use_per_bucket_optimize != that.use_per_bucket_optimize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGrouping_exprs()) ? 131071 : 524287);
    if (isSetGrouping_exprs())
      hashCode = hashCode * 8191 + grouping_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetAggregate_functions()) ? 131071 : 524287);
    if (isSetAggregate_functions())
      hashCode = hashCode * 8191 + aggregate_functions.hashCode();

    hashCode = hashCode * 8191 + intermediate_tuple_id;

    hashCode = hashCode * 8191 + output_tuple_id;

    hashCode = hashCode * 8191 + ((need_finalize) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetUse_streaming_preaggregation()) ? 131071 : 524287);
    if (isSetUse_streaming_preaggregation())
      hashCode = hashCode * 8191 + ((use_streaming_preaggregation) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetHas_outer_join_child()) ? 131071 : 524287);
    if (isSetHas_outer_join_child())
      hashCode = hashCode * 8191 + ((has_outer_join_child) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetStreaming_preaggregation_mode()) ? 131071 : 524287);
    if (isSetStreaming_preaggregation_mode())
      hashCode = hashCode * 8191 + streaming_preaggregation_mode.getValue();

    hashCode = hashCode * 8191 + ((isSetSql_grouping_keys()) ? 131071 : 524287);
    if (isSetSql_grouping_keys())
      hashCode = hashCode * 8191 + sql_grouping_keys.hashCode();

    hashCode = hashCode * 8191 + ((isSetSql_aggregate_functions()) ? 131071 : 524287);
    if (isSetSql_aggregate_functions())
      hashCode = hashCode * 8191 + sql_aggregate_functions.hashCode();

    hashCode = hashCode * 8191 + ((isSetAgg_func_set_version()) ? 131071 : 524287);
    if (isSetAgg_func_set_version())
      hashCode = hashCode * 8191 + agg_func_set_version;

    hashCode = hashCode * 8191 + ((isSetIntermediate_aggr_exprs()) ? 131071 : 524287);
    if (isSetIntermediate_aggr_exprs())
      hashCode = hashCode * 8191 + intermediate_aggr_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetInterpolate_passthrough()) ? 131071 : 524287);
    if (isSetInterpolate_passthrough())
      hashCode = hashCode * 8191 + ((interpolate_passthrough) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetUse_sort_agg()) ? 131071 : 524287);
    if (isSetUse_sort_agg())
      hashCode = hashCode * 8191 + ((use_sort_agg) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetUse_per_bucket_optimize()) ? 131071 : 524287);
    if (isSetUse_per_bucket_optimize())
      hashCode = hashCode * 8191 + ((use_per_bucket_optimize) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TAggregationNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetGrouping_exprs(), other.isSetGrouping_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrouping_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grouping_exprs, other.grouping_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAggregate_functions(), other.isSetAggregate_functions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregate_functions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregate_functions, other.aggregate_functions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIntermediate_tuple_id(), other.isSetIntermediate_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntermediate_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediate_tuple_id, other.intermediate_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutput_tuple_id(), other.isSetOutput_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_tuple_id, other.output_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNeed_finalize(), other.isSetNeed_finalize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeed_finalize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.need_finalize, other.need_finalize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_streaming_preaggregation(), other.isSetUse_streaming_preaggregation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_streaming_preaggregation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_streaming_preaggregation, other.use_streaming_preaggregation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHas_outer_join_child(), other.isSetHas_outer_join_child());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_outer_join_child()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_outer_join_child, other.has_outer_join_child);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStreaming_preaggregation_mode(), other.isSetStreaming_preaggregation_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreaming_preaggregation_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streaming_preaggregation_mode, other.streaming_preaggregation_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSql_grouping_keys(), other.isSetSql_grouping_keys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql_grouping_keys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_grouping_keys, other.sql_grouping_keys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSql_aggregate_functions(), other.isSetSql_aggregate_functions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql_aggregate_functions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_aggregate_functions, other.sql_aggregate_functions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAgg_func_set_version(), other.isSetAgg_func_set_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgg_func_set_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agg_func_set_version, other.agg_func_set_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIntermediate_aggr_exprs(), other.isSetIntermediate_aggr_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntermediate_aggr_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediate_aggr_exprs, other.intermediate_aggr_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInterpolate_passthrough(), other.isSetInterpolate_passthrough());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterpolate_passthrough()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interpolate_passthrough, other.interpolate_passthrough);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_sort_agg(), other.isSetUse_sort_agg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_sort_agg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_sort_agg, other.use_sort_agg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_per_bucket_optimize(), other.isSetUse_per_bucket_optimize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_per_bucket_optimize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_per_bucket_optimize, other.use_per_bucket_optimize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAggregationNode(");
    boolean first = true;

    if (isSetGrouping_exprs()) {
      sb.append("grouping_exprs:");
      if (this.grouping_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.grouping_exprs);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("aggregate_functions:");
    if (this.aggregate_functions == null) {
      sb.append("null");
    } else {
      sb.append(this.aggregate_functions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intermediate_tuple_id:");
    sb.append(this.intermediate_tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("output_tuple_id:");
    sb.append(this.output_tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("need_finalize:");
    sb.append(this.need_finalize);
    first = false;
    if (isSetUse_streaming_preaggregation()) {
      if (!first) sb.append(", ");
      sb.append("use_streaming_preaggregation:");
      sb.append(this.use_streaming_preaggregation);
      first = false;
    }
    if (isSetHas_outer_join_child()) {
      if (!first) sb.append(", ");
      sb.append("has_outer_join_child:");
      sb.append(this.has_outer_join_child);
      first = false;
    }
    if (isSetStreaming_preaggregation_mode()) {
      if (!first) sb.append(", ");
      sb.append("streaming_preaggregation_mode:");
      if (this.streaming_preaggregation_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.streaming_preaggregation_mode);
      }
      first = false;
    }
    if (isSetSql_grouping_keys()) {
      if (!first) sb.append(", ");
      sb.append("sql_grouping_keys:");
      if (this.sql_grouping_keys == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_grouping_keys);
      }
      first = false;
    }
    if (isSetSql_aggregate_functions()) {
      if (!first) sb.append(", ");
      sb.append("sql_aggregate_functions:");
      if (this.sql_aggregate_functions == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_aggregate_functions);
      }
      first = false;
    }
    if (isSetAgg_func_set_version()) {
      if (!first) sb.append(", ");
      sb.append("agg_func_set_version:");
      sb.append(this.agg_func_set_version);
      first = false;
    }
    if (isSetIntermediate_aggr_exprs()) {
      if (!first) sb.append(", ");
      sb.append("intermediate_aggr_exprs:");
      if (this.intermediate_aggr_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.intermediate_aggr_exprs);
      }
      first = false;
    }
    if (isSetInterpolate_passthrough()) {
      if (!first) sb.append(", ");
      sb.append("interpolate_passthrough:");
      sb.append(this.interpolate_passthrough);
      first = false;
    }
    if (isSetUse_sort_agg()) {
      if (!first) sb.append(", ");
      sb.append("use_sort_agg:");
      sb.append(this.use_sort_agg);
      first = false;
    }
    if (isSetUse_per_bucket_optimize()) {
      if (!first) sb.append(", ");
      sb.append("use_per_bucket_optimize:");
      sb.append(this.use_per_bucket_optimize);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (aggregate_functions == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'aggregate_functions' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'intermediate_tuple_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'output_tuple_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'need_finalize' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAggregationNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAggregationNodeStandardScheme getScheme() {
      return new TAggregationNodeStandardScheme();
    }
  }

  private static class TAggregationNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAggregationNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TAggregationNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUPING_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list458 = iprot.readListBegin();
                struct.grouping_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list458.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem459;
                for (int _i460 = 0; _i460 < _list458.size; ++_i460)
                {
                  _elem459 = new io.datafibre.fibre.thrift.TExpr();
                  _elem459.read(iprot);
                  struct.grouping_exprs.add(_elem459);
                }
                iprot.readListEnd();
              }
              struct.setGrouping_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGGREGATE_FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list461 = iprot.readListBegin();
                struct.aggregate_functions = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list461.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem462;
                for (int _i463 = 0; _i463 < _list461.size; ++_i463)
                {
                  _elem462 = new io.datafibre.fibre.thrift.TExpr();
                  _elem462.read(iprot);
                  struct.aggregate_functions.add(_elem462);
                }
                iprot.readListEnd();
              }
              struct.setAggregate_functionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTERMEDIATE_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.intermediate_tuple_id = iprot.readI32();
              struct.setIntermediate_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OUTPUT_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.output_tuple_id = iprot.readI32();
              struct.setOutput_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NEED_FINALIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.need_finalize = iprot.readBool();
              struct.setNeed_finalizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USE_STREAMING_PREAGGREGATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_streaming_preaggregation = iprot.readBool();
              struct.setUse_streaming_preaggregationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // HAS_OUTER_JOIN_CHILD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_outer_join_child = iprot.readBool();
              struct.setHas_outer_join_childIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // STREAMING_PREAGGREGATION_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.streaming_preaggregation_mode = io.datafibre.fibre.thrift.TStreamingPreaggregationMode.findByValue(iprot.readI32());
              struct.setStreaming_preaggregation_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SQL_GROUPING_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql_grouping_keys = iprot.readString();
              struct.setSql_grouping_keysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SQL_AGGREGATE_FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql_aggregate_functions = iprot.readString();
              struct.setSql_aggregate_functionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // AGG_FUNC_SET_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.agg_func_set_version = iprot.readI32();
              struct.setAgg_func_set_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // INTERMEDIATE_AGGR_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list464 = iprot.readListBegin();
                struct.intermediate_aggr_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list464.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem465;
                for (int _i466 = 0; _i466 < _list464.size; ++_i466)
                {
                  _elem465 = new io.datafibre.fibre.thrift.TExpr();
                  _elem465.read(iprot);
                  struct.intermediate_aggr_exprs.add(_elem465);
                }
                iprot.readListEnd();
              }
              struct.setIntermediate_aggr_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // INTERPOLATE_PASSTHROUGH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.interpolate_passthrough = iprot.readBool();
              struct.setInterpolate_passthroughIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // USE_SORT_AGG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_sort_agg = iprot.readBool();
              struct.setUse_sort_aggIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // USE_PER_BUCKET_OPTIMIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_per_bucket_optimize = iprot.readBool();
              struct.setUse_per_bucket_optimizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIntermediate_tuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'intermediate_tuple_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOutput_tuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'output_tuple_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNeed_finalize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'need_finalize' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TAggregationNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.grouping_exprs != null) {
        if (struct.isSetGrouping_exprs()) {
          oprot.writeFieldBegin(GROUPING_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.grouping_exprs.size()));
            for (io.datafibre.fibre.thrift.TExpr _iter467 : struct.grouping_exprs)
            {
              _iter467.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.aggregate_functions != null) {
        oprot.writeFieldBegin(AGGREGATE_FUNCTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.aggregate_functions.size()));
          for (io.datafibre.fibre.thrift.TExpr _iter468 : struct.aggregate_functions)
          {
            _iter468.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTERMEDIATE_TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.intermediate_tuple_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTPUT_TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.output_tuple_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEED_FINALIZE_FIELD_DESC);
      oprot.writeBool(struct.need_finalize);
      oprot.writeFieldEnd();
      if (struct.isSetUse_streaming_preaggregation()) {
        oprot.writeFieldBegin(USE_STREAMING_PREAGGREGATION_FIELD_DESC);
        oprot.writeBool(struct.use_streaming_preaggregation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHas_outer_join_child()) {
        oprot.writeFieldBegin(HAS_OUTER_JOIN_CHILD_FIELD_DESC);
        oprot.writeBool(struct.has_outer_join_child);
        oprot.writeFieldEnd();
      }
      if (struct.streaming_preaggregation_mode != null) {
        if (struct.isSetStreaming_preaggregation_mode()) {
          oprot.writeFieldBegin(STREAMING_PREAGGREGATION_MODE_FIELD_DESC);
          oprot.writeI32(struct.streaming_preaggregation_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.sql_grouping_keys != null) {
        if (struct.isSetSql_grouping_keys()) {
          oprot.writeFieldBegin(SQL_GROUPING_KEYS_FIELD_DESC);
          oprot.writeString(struct.sql_grouping_keys);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sql_aggregate_functions != null) {
        if (struct.isSetSql_aggregate_functions()) {
          oprot.writeFieldBegin(SQL_AGGREGATE_FUNCTIONS_FIELD_DESC);
          oprot.writeString(struct.sql_aggregate_functions);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAgg_func_set_version()) {
        oprot.writeFieldBegin(AGG_FUNC_SET_VERSION_FIELD_DESC);
        oprot.writeI32(struct.agg_func_set_version);
        oprot.writeFieldEnd();
      }
      if (struct.intermediate_aggr_exprs != null) {
        if (struct.isSetIntermediate_aggr_exprs()) {
          oprot.writeFieldBegin(INTERMEDIATE_AGGR_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.intermediate_aggr_exprs.size()));
            for (io.datafibre.fibre.thrift.TExpr _iter469 : struct.intermediate_aggr_exprs)
            {
              _iter469.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInterpolate_passthrough()) {
        oprot.writeFieldBegin(INTERPOLATE_PASSTHROUGH_FIELD_DESC);
        oprot.writeBool(struct.interpolate_passthrough);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUse_sort_agg()) {
        oprot.writeFieldBegin(USE_SORT_AGG_FIELD_DESC);
        oprot.writeBool(struct.use_sort_agg);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUse_per_bucket_optimize()) {
        oprot.writeFieldBegin(USE_PER_BUCKET_OPTIMIZE_FIELD_DESC);
        oprot.writeBool(struct.use_per_bucket_optimize);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAggregationNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAggregationNodeTupleScheme getScheme() {
      return new TAggregationNodeTupleScheme();
    }
  }

  private static class TAggregationNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAggregationNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAggregationNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.aggregate_functions.size());
        for (io.datafibre.fibre.thrift.TExpr _iter470 : struct.aggregate_functions)
        {
          _iter470.write(oprot);
        }
      }
      oprot.writeI32(struct.intermediate_tuple_id);
      oprot.writeI32(struct.output_tuple_id);
      oprot.writeBool(struct.need_finalize);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGrouping_exprs()) {
        optionals.set(0);
      }
      if (struct.isSetUse_streaming_preaggregation()) {
        optionals.set(1);
      }
      if (struct.isSetHas_outer_join_child()) {
        optionals.set(2);
      }
      if (struct.isSetStreaming_preaggregation_mode()) {
        optionals.set(3);
      }
      if (struct.isSetSql_grouping_keys()) {
        optionals.set(4);
      }
      if (struct.isSetSql_aggregate_functions()) {
        optionals.set(5);
      }
      if (struct.isSetAgg_func_set_version()) {
        optionals.set(6);
      }
      if (struct.isSetIntermediate_aggr_exprs()) {
        optionals.set(7);
      }
      if (struct.isSetInterpolate_passthrough()) {
        optionals.set(8);
      }
      if (struct.isSetUse_sort_agg()) {
        optionals.set(9);
      }
      if (struct.isSetUse_per_bucket_optimize()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetGrouping_exprs()) {
        {
          oprot.writeI32(struct.grouping_exprs.size());
          for (io.datafibre.fibre.thrift.TExpr _iter471 : struct.grouping_exprs)
          {
            _iter471.write(oprot);
          }
        }
      }
      if (struct.isSetUse_streaming_preaggregation()) {
        oprot.writeBool(struct.use_streaming_preaggregation);
      }
      if (struct.isSetHas_outer_join_child()) {
        oprot.writeBool(struct.has_outer_join_child);
      }
      if (struct.isSetStreaming_preaggregation_mode()) {
        oprot.writeI32(struct.streaming_preaggregation_mode.getValue());
      }
      if (struct.isSetSql_grouping_keys()) {
        oprot.writeString(struct.sql_grouping_keys);
      }
      if (struct.isSetSql_aggregate_functions()) {
        oprot.writeString(struct.sql_aggregate_functions);
      }
      if (struct.isSetAgg_func_set_version()) {
        oprot.writeI32(struct.agg_func_set_version);
      }
      if (struct.isSetIntermediate_aggr_exprs()) {
        {
          oprot.writeI32(struct.intermediate_aggr_exprs.size());
          for (io.datafibre.fibre.thrift.TExpr _iter472 : struct.intermediate_aggr_exprs)
          {
            _iter472.write(oprot);
          }
        }
      }
      if (struct.isSetInterpolate_passthrough()) {
        oprot.writeBool(struct.interpolate_passthrough);
      }
      if (struct.isSetUse_sort_agg()) {
        oprot.writeBool(struct.use_sort_agg);
      }
      if (struct.isSetUse_per_bucket_optimize()) {
        oprot.writeBool(struct.use_per_bucket_optimize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAggregationNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list473 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.aggregate_functions = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list473.size);
        @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem474;
        for (int _i475 = 0; _i475 < _list473.size; ++_i475)
        {
          _elem474 = new io.datafibre.fibre.thrift.TExpr();
          _elem474.read(iprot);
          struct.aggregate_functions.add(_elem474);
        }
      }
      struct.setAggregate_functionsIsSet(true);
      struct.intermediate_tuple_id = iprot.readI32();
      struct.setIntermediate_tuple_idIsSet(true);
      struct.output_tuple_id = iprot.readI32();
      struct.setOutput_tuple_idIsSet(true);
      struct.need_finalize = iprot.readBool();
      struct.setNeed_finalizeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list476 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.grouping_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list476.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem477;
          for (int _i478 = 0; _i478 < _list476.size; ++_i478)
          {
            _elem477 = new io.datafibre.fibre.thrift.TExpr();
            _elem477.read(iprot);
            struct.grouping_exprs.add(_elem477);
          }
        }
        struct.setGrouping_exprsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.use_streaming_preaggregation = iprot.readBool();
        struct.setUse_streaming_preaggregationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.has_outer_join_child = iprot.readBool();
        struct.setHas_outer_join_childIsSet(true);
      }
      if (incoming.get(3)) {
        struct.streaming_preaggregation_mode = io.datafibre.fibre.thrift.TStreamingPreaggregationMode.findByValue(iprot.readI32());
        struct.setStreaming_preaggregation_modeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sql_grouping_keys = iprot.readString();
        struct.setSql_grouping_keysIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sql_aggregate_functions = iprot.readString();
        struct.setSql_aggregate_functionsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.agg_func_set_version = iprot.readI32();
        struct.setAgg_func_set_versionIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list479 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.intermediate_aggr_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list479.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem480;
          for (int _i481 = 0; _i481 < _list479.size; ++_i481)
          {
            _elem480 = new io.datafibre.fibre.thrift.TExpr();
            _elem480.read(iprot);
            struct.intermediate_aggr_exprs.add(_elem480);
          }
        }
        struct.setIntermediate_aggr_exprsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.interpolate_passthrough = iprot.readBool();
        struct.setInterpolate_passthroughIsSet(true);
      }
      if (incoming.get(9)) {
        struct.use_sort_agg = iprot.readBool();
        struct.setUse_sort_aggIsSet(true);
      }
      if (incoming.get(10)) {
        struct.use_per_bucket_optimize = iprot.readBool();
        struct.setUse_per_bucket_optimizeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

