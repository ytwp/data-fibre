/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TReplicaMeta implements org.apache.thrift.TBase<TReplicaMeta, TReplicaMeta._Fields>, java.io.Serializable, Cloneable, Comparable<TReplicaMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TReplicaMeta");

  private static final org.apache.thrift.protocol.TField REPLICA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replica_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField BACKEND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_hash", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("version_hash", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DATA_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_size", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("row_count", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_FAILED_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("last_failed_version", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField LAST_FAILED_VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("last_failed_version_hash", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField LAST_FAILED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("last_failed_time", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField LAST_SUCCESS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("last_success_version", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField LAST_SUCCESS_VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("last_success_version_hash", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField VERSION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("version_count", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField PATH_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("path_hash", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField BAD_FIELD_DESC = new org.apache.thrift.protocol.TField("bad", org.apache.thrift.protocol.TType.BOOL, (short)16);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TReplicaMetaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TReplicaMetaTupleSchemeFactory();

  public long replica_id; // optional
  public long backend_id; // optional
  public int schema_hash; // optional
  public long version; // optional
  public long version_hash; // optional
  public long data_size; // optional
  public long row_count; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String state; // optional
  public long last_failed_version; // optional
  public long last_failed_version_hash; // optional
  public long last_failed_time; // optional
  public long last_success_version; // optional
  public long last_success_version_hash; // optional
  public long version_count; // optional
  public long path_hash; // optional
  public boolean bad; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPLICA_ID((short)1, "replica_id"),
    BACKEND_ID((short)2, "backend_id"),
    SCHEMA_HASH((short)3, "schema_hash"),
    VERSION((short)4, "version"),
    VERSION_HASH((short)5, "version_hash"),
    DATA_SIZE((short)6, "data_size"),
    ROW_COUNT((short)7, "row_count"),
    STATE((short)8, "state"),
    LAST_FAILED_VERSION((short)9, "last_failed_version"),
    LAST_FAILED_VERSION_HASH((short)10, "last_failed_version_hash"),
    LAST_FAILED_TIME((short)11, "last_failed_time"),
    LAST_SUCCESS_VERSION((short)12, "last_success_version"),
    LAST_SUCCESS_VERSION_HASH((short)13, "last_success_version_hash"),
    VERSION_COUNT((short)14, "version_count"),
    PATH_HASH((short)15, "path_hash"),
    BAD((short)16, "bad");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPLICA_ID
          return REPLICA_ID;
        case 2: // BACKEND_ID
          return BACKEND_ID;
        case 3: // SCHEMA_HASH
          return SCHEMA_HASH;
        case 4: // VERSION
          return VERSION;
        case 5: // VERSION_HASH
          return VERSION_HASH;
        case 6: // DATA_SIZE
          return DATA_SIZE;
        case 7: // ROW_COUNT
          return ROW_COUNT;
        case 8: // STATE
          return STATE;
        case 9: // LAST_FAILED_VERSION
          return LAST_FAILED_VERSION;
        case 10: // LAST_FAILED_VERSION_HASH
          return LAST_FAILED_VERSION_HASH;
        case 11: // LAST_FAILED_TIME
          return LAST_FAILED_TIME;
        case 12: // LAST_SUCCESS_VERSION
          return LAST_SUCCESS_VERSION;
        case 13: // LAST_SUCCESS_VERSION_HASH
          return LAST_SUCCESS_VERSION_HASH;
        case 14: // VERSION_COUNT
          return VERSION_COUNT;
        case 15: // PATH_HASH
          return PATH_HASH;
        case 16: // BAD
          return BAD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPLICA_ID_ISSET_ID = 0;
  private static final int __BACKEND_ID_ISSET_ID = 1;
  private static final int __SCHEMA_HASH_ISSET_ID = 2;
  private static final int __VERSION_ISSET_ID = 3;
  private static final int __VERSION_HASH_ISSET_ID = 4;
  private static final int __DATA_SIZE_ISSET_ID = 5;
  private static final int __ROW_COUNT_ISSET_ID = 6;
  private static final int __LAST_FAILED_VERSION_ISSET_ID = 7;
  private static final int __LAST_FAILED_VERSION_HASH_ISSET_ID = 8;
  private static final int __LAST_FAILED_TIME_ISSET_ID = 9;
  private static final int __LAST_SUCCESS_VERSION_ISSET_ID = 10;
  private static final int __LAST_SUCCESS_VERSION_HASH_ISSET_ID = 11;
  private static final int __VERSION_COUNT_ISSET_ID = 12;
  private static final int __PATH_HASH_ISSET_ID = 13;
  private static final int __BAD_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REPLICA_ID,_Fields.BACKEND_ID,_Fields.SCHEMA_HASH,_Fields.VERSION,_Fields.VERSION_HASH,_Fields.DATA_SIZE,_Fields.ROW_COUNT,_Fields.STATE,_Fields.LAST_FAILED_VERSION,_Fields.LAST_FAILED_VERSION_HASH,_Fields.LAST_FAILED_TIME,_Fields.LAST_SUCCESS_VERSION,_Fields.LAST_SUCCESS_VERSION_HASH,_Fields.VERSION_COUNT,_Fields.PATH_HASH,_Fields.BAD};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPLICA_ID, new org.apache.thrift.meta_data.FieldMetaData("replica_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BACKEND_ID, new org.apache.thrift.meta_data.FieldMetaData("backend_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("schema_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("version_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_SIZE, new org.apache.thrift.meta_data.FieldMetaData("data_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("row_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_FAILED_VERSION, new org.apache.thrift.meta_data.FieldMetaData("last_failed_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_FAILED_VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("last_failed_version_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_FAILED_TIME, new org.apache.thrift.meta_data.FieldMetaData("last_failed_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_SUCCESS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("last_success_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_SUCCESS_VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("last_success_version_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("version_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PATH_HASH, new org.apache.thrift.meta_data.FieldMetaData("path_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BAD, new org.apache.thrift.meta_data.FieldMetaData("bad", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TReplicaMeta.class, metaDataMap);
  }

  public TReplicaMeta() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TReplicaMeta(TReplicaMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    this.replica_id = other.replica_id;
    this.backend_id = other.backend_id;
    this.schema_hash = other.schema_hash;
    this.version = other.version;
    this.version_hash = other.version_hash;
    this.data_size = other.data_size;
    this.row_count = other.row_count;
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.last_failed_version = other.last_failed_version;
    this.last_failed_version_hash = other.last_failed_version_hash;
    this.last_failed_time = other.last_failed_time;
    this.last_success_version = other.last_success_version;
    this.last_success_version_hash = other.last_success_version_hash;
    this.version_count = other.version_count;
    this.path_hash = other.path_hash;
    this.bad = other.bad;
  }

  @Override
  public TReplicaMeta deepCopy() {
    return new TReplicaMeta(this);
  }

  @Override
  public void clear() {
    setReplica_idIsSet(false);
    this.replica_id = 0;
    setBackend_idIsSet(false);
    this.backend_id = 0;
    setSchema_hashIsSet(false);
    this.schema_hash = 0;
    setVersionIsSet(false);
    this.version = 0;
    setVersion_hashIsSet(false);
    this.version_hash = 0;
    setData_sizeIsSet(false);
    this.data_size = 0;
    setRow_countIsSet(false);
    this.row_count = 0;
    this.state = null;
    setLast_failed_versionIsSet(false);
    this.last_failed_version = 0;
    setLast_failed_version_hashIsSet(false);
    this.last_failed_version_hash = 0;
    setLast_failed_timeIsSet(false);
    this.last_failed_time = 0;
    setLast_success_versionIsSet(false);
    this.last_success_version = 0;
    setLast_success_version_hashIsSet(false);
    this.last_success_version_hash = 0;
    setVersion_countIsSet(false);
    this.version_count = 0;
    setPath_hashIsSet(false);
    this.path_hash = 0;
    setBadIsSet(false);
    this.bad = false;
  }

  public long getReplica_id() {
    return this.replica_id;
  }

  public TReplicaMeta setReplica_id(long replica_id) {
    this.replica_id = replica_id;
    setReplica_idIsSet(true);
    return this;
  }

  public void unsetReplica_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPLICA_ID_ISSET_ID);
  }

  /** Returns true if field replica_id is set (has been assigned a value) and false otherwise */
  public boolean isSetReplica_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPLICA_ID_ISSET_ID);
  }

  public void setReplica_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPLICA_ID_ISSET_ID, value);
  }

  public long getBackend_id() {
    return this.backend_id;
  }

  public TReplicaMeta setBackend_id(long backend_id) {
    this.backend_id = backend_id;
    setBackend_idIsSet(true);
    return this;
  }

  public void unsetBackend_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BACKEND_ID_ISSET_ID);
  }

  /** Returns true if field backend_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BACKEND_ID_ISSET_ID);
  }

  public void setBackend_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BACKEND_ID_ISSET_ID, value);
  }

  public int getSchema_hash() {
    return this.schema_hash;
  }

  public TReplicaMeta setSchema_hash(int schema_hash) {
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    return this;
  }

  public void unsetSchema_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  public void setSchema_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID, value);
  }

  public long getVersion() {
    return this.version;
  }

  public TReplicaMeta setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public long getVersion_hash() {
    return this.version_hash;
  }

  public TReplicaMeta setVersion_hash(long version_hash) {
    this.version_hash = version_hash;
    setVersion_hashIsSet(true);
    return this;
  }

  public void unsetVersion_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_HASH_ISSET_ID);
  }

  public void setVersion_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_HASH_ISSET_ID, value);
  }

  public long getData_size() {
    return this.data_size;
  }

  public TReplicaMeta setData_size(long data_size) {
    this.data_size = data_size;
    setData_sizeIsSet(true);
    return this;
  }

  public void unsetData_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATA_SIZE_ISSET_ID);
  }

  /** Returns true if field data_size is set (has been assigned a value) and false otherwise */
  public boolean isSetData_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATA_SIZE_ISSET_ID);
  }

  public void setData_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATA_SIZE_ISSET_ID, value);
  }

  public long getRow_count() {
    return this.row_count;
  }

  public TReplicaMeta setRow_count(long row_count) {
    this.row_count = row_count;
    setRow_countIsSet(true);
    return this;
  }

  public void unsetRow_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROW_COUNT_ISSET_ID);
  }

  /** Returns true if field row_count is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROW_COUNT_ISSET_ID);
  }

  public void setRow_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROW_COUNT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getState() {
    return this.state;
  }

  public TReplicaMeta setState(@org.apache.thrift.annotation.Nullable java.lang.String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public long getLast_failed_version() {
    return this.last_failed_version;
  }

  public TReplicaMeta setLast_failed_version(long last_failed_version) {
    this.last_failed_version = last_failed_version;
    setLast_failed_versionIsSet(true);
    return this;
  }

  public void unsetLast_failed_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAST_FAILED_VERSION_ISSET_ID);
  }

  /** Returns true if field last_failed_version is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_failed_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAST_FAILED_VERSION_ISSET_ID);
  }

  public void setLast_failed_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAST_FAILED_VERSION_ISSET_ID, value);
  }

  public long getLast_failed_version_hash() {
    return this.last_failed_version_hash;
  }

  public TReplicaMeta setLast_failed_version_hash(long last_failed_version_hash) {
    this.last_failed_version_hash = last_failed_version_hash;
    setLast_failed_version_hashIsSet(true);
    return this;
  }

  public void unsetLast_failed_version_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAST_FAILED_VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field last_failed_version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_failed_version_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAST_FAILED_VERSION_HASH_ISSET_ID);
  }

  public void setLast_failed_version_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAST_FAILED_VERSION_HASH_ISSET_ID, value);
  }

  public long getLast_failed_time() {
    return this.last_failed_time;
  }

  public TReplicaMeta setLast_failed_time(long last_failed_time) {
    this.last_failed_time = last_failed_time;
    setLast_failed_timeIsSet(true);
    return this;
  }

  public void unsetLast_failed_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAST_FAILED_TIME_ISSET_ID);
  }

  /** Returns true if field last_failed_time is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_failed_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAST_FAILED_TIME_ISSET_ID);
  }

  public void setLast_failed_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAST_FAILED_TIME_ISSET_ID, value);
  }

  public long getLast_success_version() {
    return this.last_success_version;
  }

  public TReplicaMeta setLast_success_version(long last_success_version) {
    this.last_success_version = last_success_version;
    setLast_success_versionIsSet(true);
    return this;
  }

  public void unsetLast_success_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAST_SUCCESS_VERSION_ISSET_ID);
  }

  /** Returns true if field last_success_version is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_success_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAST_SUCCESS_VERSION_ISSET_ID);
  }

  public void setLast_success_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAST_SUCCESS_VERSION_ISSET_ID, value);
  }

  public long getLast_success_version_hash() {
    return this.last_success_version_hash;
  }

  public TReplicaMeta setLast_success_version_hash(long last_success_version_hash) {
    this.last_success_version_hash = last_success_version_hash;
    setLast_success_version_hashIsSet(true);
    return this;
  }

  public void unsetLast_success_version_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAST_SUCCESS_VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field last_success_version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_success_version_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAST_SUCCESS_VERSION_HASH_ISSET_ID);
  }

  public void setLast_success_version_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAST_SUCCESS_VERSION_HASH_ISSET_ID, value);
  }

  public long getVersion_count() {
    return this.version_count;
  }

  public TReplicaMeta setVersion_count(long version_count) {
    this.version_count = version_count;
    setVersion_countIsSet(true);
    return this;
  }

  public void unsetVersion_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_COUNT_ISSET_ID);
  }

  /** Returns true if field version_count is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_COUNT_ISSET_ID);
  }

  public void setVersion_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_COUNT_ISSET_ID, value);
  }

  public long getPath_hash() {
    return this.path_hash;
  }

  public TReplicaMeta setPath_hash(long path_hash) {
    this.path_hash = path_hash;
    setPath_hashIsSet(true);
    return this;
  }

  public void unsetPath_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PATH_HASH_ISSET_ID);
  }

  /** Returns true if field path_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetPath_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PATH_HASH_ISSET_ID);
  }

  public void setPath_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PATH_HASH_ISSET_ID, value);
  }

  public boolean isBad() {
    return this.bad;
  }

  public TReplicaMeta setBad(boolean bad) {
    this.bad = bad;
    setBadIsSet(true);
    return this;
  }

  public void unsetBad() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BAD_ISSET_ID);
  }

  /** Returns true if field bad is set (has been assigned a value) and false otherwise */
  public boolean isSetBad() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BAD_ISSET_ID);
  }

  public void setBadIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BAD_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case REPLICA_ID:
      if (value == null) {
        unsetReplica_id();
      } else {
        setReplica_id((java.lang.Long)value);
      }
      break;

    case BACKEND_ID:
      if (value == null) {
        unsetBackend_id();
      } else {
        setBackend_id((java.lang.Long)value);
      }
      break;

    case SCHEMA_HASH:
      if (value == null) {
        unsetSchema_hash();
      } else {
        setSchema_hash((java.lang.Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Long)value);
      }
      break;

    case VERSION_HASH:
      if (value == null) {
        unsetVersion_hash();
      } else {
        setVersion_hash((java.lang.Long)value);
      }
      break;

    case DATA_SIZE:
      if (value == null) {
        unsetData_size();
      } else {
        setData_size((java.lang.Long)value);
      }
      break;

    case ROW_COUNT:
      if (value == null) {
        unsetRow_count();
      } else {
        setRow_count((java.lang.Long)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.String)value);
      }
      break;

    case LAST_FAILED_VERSION:
      if (value == null) {
        unsetLast_failed_version();
      } else {
        setLast_failed_version((java.lang.Long)value);
      }
      break;

    case LAST_FAILED_VERSION_HASH:
      if (value == null) {
        unsetLast_failed_version_hash();
      } else {
        setLast_failed_version_hash((java.lang.Long)value);
      }
      break;

    case LAST_FAILED_TIME:
      if (value == null) {
        unsetLast_failed_time();
      } else {
        setLast_failed_time((java.lang.Long)value);
      }
      break;

    case LAST_SUCCESS_VERSION:
      if (value == null) {
        unsetLast_success_version();
      } else {
        setLast_success_version((java.lang.Long)value);
      }
      break;

    case LAST_SUCCESS_VERSION_HASH:
      if (value == null) {
        unsetLast_success_version_hash();
      } else {
        setLast_success_version_hash((java.lang.Long)value);
      }
      break;

    case VERSION_COUNT:
      if (value == null) {
        unsetVersion_count();
      } else {
        setVersion_count((java.lang.Long)value);
      }
      break;

    case PATH_HASH:
      if (value == null) {
        unsetPath_hash();
      } else {
        setPath_hash((java.lang.Long)value);
      }
      break;

    case BAD:
      if (value == null) {
        unsetBad();
      } else {
        setBad((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REPLICA_ID:
      return getReplica_id();

    case BACKEND_ID:
      return getBackend_id();

    case SCHEMA_HASH:
      return getSchema_hash();

    case VERSION:
      return getVersion();

    case VERSION_HASH:
      return getVersion_hash();

    case DATA_SIZE:
      return getData_size();

    case ROW_COUNT:
      return getRow_count();

    case STATE:
      return getState();

    case LAST_FAILED_VERSION:
      return getLast_failed_version();

    case LAST_FAILED_VERSION_HASH:
      return getLast_failed_version_hash();

    case LAST_FAILED_TIME:
      return getLast_failed_time();

    case LAST_SUCCESS_VERSION:
      return getLast_success_version();

    case LAST_SUCCESS_VERSION_HASH:
      return getLast_success_version_hash();

    case VERSION_COUNT:
      return getVersion_count();

    case PATH_HASH:
      return getPath_hash();

    case BAD:
      return isBad();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REPLICA_ID:
      return isSetReplica_id();
    case BACKEND_ID:
      return isSetBackend_id();
    case SCHEMA_HASH:
      return isSetSchema_hash();
    case VERSION:
      return isSetVersion();
    case VERSION_HASH:
      return isSetVersion_hash();
    case DATA_SIZE:
      return isSetData_size();
    case ROW_COUNT:
      return isSetRow_count();
    case STATE:
      return isSetState();
    case LAST_FAILED_VERSION:
      return isSetLast_failed_version();
    case LAST_FAILED_VERSION_HASH:
      return isSetLast_failed_version_hash();
    case LAST_FAILED_TIME:
      return isSetLast_failed_time();
    case LAST_SUCCESS_VERSION:
      return isSetLast_success_version();
    case LAST_SUCCESS_VERSION_HASH:
      return isSetLast_success_version_hash();
    case VERSION_COUNT:
      return isSetVersion_count();
    case PATH_HASH:
      return isSetPath_hash();
    case BAD:
      return isSetBad();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TReplicaMeta)
      return this.equals((TReplicaMeta)that);
    return false;
  }

  public boolean equals(TReplicaMeta that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_replica_id = true && this.isSetReplica_id();
    boolean that_present_replica_id = true && that.isSetReplica_id();
    if (this_present_replica_id || that_present_replica_id) {
      if (!(this_present_replica_id && that_present_replica_id))
        return false;
      if (this.replica_id != that.replica_id)
        return false;
    }

    boolean this_present_backend_id = true && this.isSetBackend_id();
    boolean that_present_backend_id = true && that.isSetBackend_id();
    if (this_present_backend_id || that_present_backend_id) {
      if (!(this_present_backend_id && that_present_backend_id))
        return false;
      if (this.backend_id != that.backend_id)
        return false;
    }

    boolean this_present_schema_hash = true && this.isSetSchema_hash();
    boolean that_present_schema_hash = true && that.isSetSchema_hash();
    if (this_present_schema_hash || that_present_schema_hash) {
      if (!(this_present_schema_hash && that_present_schema_hash))
        return false;
      if (this.schema_hash != that.schema_hash)
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_version_hash = true && this.isSetVersion_hash();
    boolean that_present_version_hash = true && that.isSetVersion_hash();
    if (this_present_version_hash || that_present_version_hash) {
      if (!(this_present_version_hash && that_present_version_hash))
        return false;
      if (this.version_hash != that.version_hash)
        return false;
    }

    boolean this_present_data_size = true && this.isSetData_size();
    boolean that_present_data_size = true && that.isSetData_size();
    if (this_present_data_size || that_present_data_size) {
      if (!(this_present_data_size && that_present_data_size))
        return false;
      if (this.data_size != that.data_size)
        return false;
    }

    boolean this_present_row_count = true && this.isSetRow_count();
    boolean that_present_row_count = true && that.isSetRow_count();
    if (this_present_row_count || that_present_row_count) {
      if (!(this_present_row_count && that_present_row_count))
        return false;
      if (this.row_count != that.row_count)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_last_failed_version = true && this.isSetLast_failed_version();
    boolean that_present_last_failed_version = true && that.isSetLast_failed_version();
    if (this_present_last_failed_version || that_present_last_failed_version) {
      if (!(this_present_last_failed_version && that_present_last_failed_version))
        return false;
      if (this.last_failed_version != that.last_failed_version)
        return false;
    }

    boolean this_present_last_failed_version_hash = true && this.isSetLast_failed_version_hash();
    boolean that_present_last_failed_version_hash = true && that.isSetLast_failed_version_hash();
    if (this_present_last_failed_version_hash || that_present_last_failed_version_hash) {
      if (!(this_present_last_failed_version_hash && that_present_last_failed_version_hash))
        return false;
      if (this.last_failed_version_hash != that.last_failed_version_hash)
        return false;
    }

    boolean this_present_last_failed_time = true && this.isSetLast_failed_time();
    boolean that_present_last_failed_time = true && that.isSetLast_failed_time();
    if (this_present_last_failed_time || that_present_last_failed_time) {
      if (!(this_present_last_failed_time && that_present_last_failed_time))
        return false;
      if (this.last_failed_time != that.last_failed_time)
        return false;
    }

    boolean this_present_last_success_version = true && this.isSetLast_success_version();
    boolean that_present_last_success_version = true && that.isSetLast_success_version();
    if (this_present_last_success_version || that_present_last_success_version) {
      if (!(this_present_last_success_version && that_present_last_success_version))
        return false;
      if (this.last_success_version != that.last_success_version)
        return false;
    }

    boolean this_present_last_success_version_hash = true && this.isSetLast_success_version_hash();
    boolean that_present_last_success_version_hash = true && that.isSetLast_success_version_hash();
    if (this_present_last_success_version_hash || that_present_last_success_version_hash) {
      if (!(this_present_last_success_version_hash && that_present_last_success_version_hash))
        return false;
      if (this.last_success_version_hash != that.last_success_version_hash)
        return false;
    }

    boolean this_present_version_count = true && this.isSetVersion_count();
    boolean that_present_version_count = true && that.isSetVersion_count();
    if (this_present_version_count || that_present_version_count) {
      if (!(this_present_version_count && that_present_version_count))
        return false;
      if (this.version_count != that.version_count)
        return false;
    }

    boolean this_present_path_hash = true && this.isSetPath_hash();
    boolean that_present_path_hash = true && that.isSetPath_hash();
    if (this_present_path_hash || that_present_path_hash) {
      if (!(this_present_path_hash && that_present_path_hash))
        return false;
      if (this.path_hash != that.path_hash)
        return false;
    }

    boolean this_present_bad = true && this.isSetBad();
    boolean that_present_bad = true && that.isSetBad();
    if (this_present_bad || that_present_bad) {
      if (!(this_present_bad && that_present_bad))
        return false;
      if (this.bad != that.bad)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetReplica_id()) ? 131071 : 524287);
    if (isSetReplica_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(replica_id);

    hashCode = hashCode * 8191 + ((isSetBackend_id()) ? 131071 : 524287);
    if (isSetBackend_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(backend_id);

    hashCode = hashCode * 8191 + ((isSetSchema_hash()) ? 131071 : 524287);
    if (isSetSchema_hash())
      hashCode = hashCode * 8191 + schema_hash;

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

    hashCode = hashCode * 8191 + ((isSetVersion_hash()) ? 131071 : 524287);
    if (isSetVersion_hash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version_hash);

    hashCode = hashCode * 8191 + ((isSetData_size()) ? 131071 : 524287);
    if (isSetData_size())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(data_size);

    hashCode = hashCode * 8191 + ((isSetRow_count()) ? 131071 : 524287);
    if (isSetRow_count())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(row_count);

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_failed_version()) ? 131071 : 524287);
    if (isSetLast_failed_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(last_failed_version);

    hashCode = hashCode * 8191 + ((isSetLast_failed_version_hash()) ? 131071 : 524287);
    if (isSetLast_failed_version_hash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(last_failed_version_hash);

    hashCode = hashCode * 8191 + ((isSetLast_failed_time()) ? 131071 : 524287);
    if (isSetLast_failed_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(last_failed_time);

    hashCode = hashCode * 8191 + ((isSetLast_success_version()) ? 131071 : 524287);
    if (isSetLast_success_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(last_success_version);

    hashCode = hashCode * 8191 + ((isSetLast_success_version_hash()) ? 131071 : 524287);
    if (isSetLast_success_version_hash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(last_success_version_hash);

    hashCode = hashCode * 8191 + ((isSetVersion_count()) ? 131071 : 524287);
    if (isSetVersion_count())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version_count);

    hashCode = hashCode * 8191 + ((isSetPath_hash()) ? 131071 : 524287);
    if (isSetPath_hash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(path_hash);

    hashCode = hashCode * 8191 + ((isSetBad()) ? 131071 : 524287);
    if (isSetBad())
      hashCode = hashCode * 8191 + ((bad) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TReplicaMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetReplica_id(), other.isSetReplica_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplica_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replica_id, other.replica_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBackend_id(), other.isSetBackend_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_id, other.backend_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchema_hash(), other.isSetSchema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_hash, other.schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion_hash(), other.isSetVersion_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_hash, other.version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetData_size(), other.isSetData_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_size, other.data_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRow_count(), other.isSetRow_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_count, other.row_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_failed_version(), other.isSetLast_failed_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_failed_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_failed_version, other.last_failed_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_failed_version_hash(), other.isSetLast_failed_version_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_failed_version_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_failed_version_hash, other.last_failed_version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_failed_time(), other.isSetLast_failed_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_failed_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_failed_time, other.last_failed_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_success_version(), other.isSetLast_success_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_success_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_success_version, other.last_success_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_success_version_hash(), other.isSetLast_success_version_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_success_version_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_success_version_hash, other.last_success_version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion_count(), other.isSetVersion_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_count, other.version_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPath_hash(), other.isSetPath_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path_hash, other.path_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBad(), other.isSetBad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bad, other.bad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TReplicaMeta(");
    boolean first = true;

    if (isSetReplica_id()) {
      sb.append("replica_id:");
      sb.append(this.replica_id);
      first = false;
    }
    if (isSetBackend_id()) {
      if (!first) sb.append(", ");
      sb.append("backend_id:");
      sb.append(this.backend_id);
      first = false;
    }
    if (isSetSchema_hash()) {
      if (!first) sb.append(", ");
      sb.append("schema_hash:");
      sb.append(this.schema_hash);
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetVersion_hash()) {
      if (!first) sb.append(", ");
      sb.append("version_hash:");
      sb.append(this.version_hash);
      first = false;
    }
    if (isSetData_size()) {
      if (!first) sb.append(", ");
      sb.append("data_size:");
      sb.append(this.data_size);
      first = false;
    }
    if (isSetRow_count()) {
      if (!first) sb.append(", ");
      sb.append("row_count:");
      sb.append(this.row_count);
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetLast_failed_version()) {
      if (!first) sb.append(", ");
      sb.append("last_failed_version:");
      sb.append(this.last_failed_version);
      first = false;
    }
    if (isSetLast_failed_version_hash()) {
      if (!first) sb.append(", ");
      sb.append("last_failed_version_hash:");
      sb.append(this.last_failed_version_hash);
      first = false;
    }
    if (isSetLast_failed_time()) {
      if (!first) sb.append(", ");
      sb.append("last_failed_time:");
      sb.append(this.last_failed_time);
      first = false;
    }
    if (isSetLast_success_version()) {
      if (!first) sb.append(", ");
      sb.append("last_success_version:");
      sb.append(this.last_success_version);
      first = false;
    }
    if (isSetLast_success_version_hash()) {
      if (!first) sb.append(", ");
      sb.append("last_success_version_hash:");
      sb.append(this.last_success_version_hash);
      first = false;
    }
    if (isSetVersion_count()) {
      if (!first) sb.append(", ");
      sb.append("version_count:");
      sb.append(this.version_count);
      first = false;
    }
    if (isSetPath_hash()) {
      if (!first) sb.append(", ");
      sb.append("path_hash:");
      sb.append(this.path_hash);
      first = false;
    }
    if (isSetBad()) {
      if (!first) sb.append(", ");
      sb.append("bad:");
      sb.append(this.bad);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TReplicaMetaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TReplicaMetaStandardScheme getScheme() {
      return new TReplicaMetaStandardScheme();
    }
  }

  private static class TReplicaMetaStandardScheme extends org.apache.thrift.scheme.StandardScheme<TReplicaMeta> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TReplicaMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPLICA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.replica_id = iprot.readI64();
              struct.setReplica_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BACKEND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.backend_id = iprot.readI64();
              struct.setBackend_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schema_hash = iprot.readI32();
              struct.setSchema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version_hash = iprot.readI64();
              struct.setVersion_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATA_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.data_size = iprot.readI64();
              struct.setData_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.row_count = iprot.readI64();
              struct.setRow_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_FAILED_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.last_failed_version = iprot.readI64();
              struct.setLast_failed_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LAST_FAILED_VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.last_failed_version_hash = iprot.readI64();
              struct.setLast_failed_version_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAST_FAILED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.last_failed_time = iprot.readI64();
              struct.setLast_failed_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LAST_SUCCESS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.last_success_version = iprot.readI64();
              struct.setLast_success_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LAST_SUCCESS_VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.last_success_version_hash = iprot.readI64();
              struct.setLast_success_version_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // VERSION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version_count = iprot.readI64();
              struct.setVersion_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PATH_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.path_hash = iprot.readI64();
              struct.setPath_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BAD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bad = iprot.readBool();
              struct.setBadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TReplicaMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetReplica_id()) {
        oprot.writeFieldBegin(REPLICA_ID_FIELD_DESC);
        oprot.writeI64(struct.replica_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBackend_id()) {
        oprot.writeFieldBegin(BACKEND_ID_FIELD_DESC);
        oprot.writeI64(struct.backend_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSchema_hash()) {
        oprot.writeFieldBegin(SCHEMA_HASH_FIELD_DESC);
        oprot.writeI32(struct.schema_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI64(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersion_hash()) {
        oprot.writeFieldBegin(VERSION_HASH_FIELD_DESC);
        oprot.writeI64(struct.version_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetData_size()) {
        oprot.writeFieldBegin(DATA_SIZE_FIELD_DESC);
        oprot.writeI64(struct.data_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRow_count()) {
        oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
        oprot.writeI64(struct.row_count);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLast_failed_version()) {
        oprot.writeFieldBegin(LAST_FAILED_VERSION_FIELD_DESC);
        oprot.writeI64(struct.last_failed_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLast_failed_version_hash()) {
        oprot.writeFieldBegin(LAST_FAILED_VERSION_HASH_FIELD_DESC);
        oprot.writeI64(struct.last_failed_version_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLast_failed_time()) {
        oprot.writeFieldBegin(LAST_FAILED_TIME_FIELD_DESC);
        oprot.writeI64(struct.last_failed_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLast_success_version()) {
        oprot.writeFieldBegin(LAST_SUCCESS_VERSION_FIELD_DESC);
        oprot.writeI64(struct.last_success_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLast_success_version_hash()) {
        oprot.writeFieldBegin(LAST_SUCCESS_VERSION_HASH_FIELD_DESC);
        oprot.writeI64(struct.last_success_version_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersion_count()) {
        oprot.writeFieldBegin(VERSION_COUNT_FIELD_DESC);
        oprot.writeI64(struct.version_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPath_hash()) {
        oprot.writeFieldBegin(PATH_HASH_FIELD_DESC);
        oprot.writeI64(struct.path_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBad()) {
        oprot.writeFieldBegin(BAD_FIELD_DESC);
        oprot.writeBool(struct.bad);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TReplicaMetaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TReplicaMetaTupleScheme getScheme() {
      return new TReplicaMetaTupleScheme();
    }
  }

  private static class TReplicaMetaTupleScheme extends org.apache.thrift.scheme.TupleScheme<TReplicaMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TReplicaMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReplica_id()) {
        optionals.set(0);
      }
      if (struct.isSetBackend_id()) {
        optionals.set(1);
      }
      if (struct.isSetSchema_hash()) {
        optionals.set(2);
      }
      if (struct.isSetVersion()) {
        optionals.set(3);
      }
      if (struct.isSetVersion_hash()) {
        optionals.set(4);
      }
      if (struct.isSetData_size()) {
        optionals.set(5);
      }
      if (struct.isSetRow_count()) {
        optionals.set(6);
      }
      if (struct.isSetState()) {
        optionals.set(7);
      }
      if (struct.isSetLast_failed_version()) {
        optionals.set(8);
      }
      if (struct.isSetLast_failed_version_hash()) {
        optionals.set(9);
      }
      if (struct.isSetLast_failed_time()) {
        optionals.set(10);
      }
      if (struct.isSetLast_success_version()) {
        optionals.set(11);
      }
      if (struct.isSetLast_success_version_hash()) {
        optionals.set(12);
      }
      if (struct.isSetVersion_count()) {
        optionals.set(13);
      }
      if (struct.isSetPath_hash()) {
        optionals.set(14);
      }
      if (struct.isSetBad()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetReplica_id()) {
        oprot.writeI64(struct.replica_id);
      }
      if (struct.isSetBackend_id()) {
        oprot.writeI64(struct.backend_id);
      }
      if (struct.isSetSchema_hash()) {
        oprot.writeI32(struct.schema_hash);
      }
      if (struct.isSetVersion()) {
        oprot.writeI64(struct.version);
      }
      if (struct.isSetVersion_hash()) {
        oprot.writeI64(struct.version_hash);
      }
      if (struct.isSetData_size()) {
        oprot.writeI64(struct.data_size);
      }
      if (struct.isSetRow_count()) {
        oprot.writeI64(struct.row_count);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetLast_failed_version()) {
        oprot.writeI64(struct.last_failed_version);
      }
      if (struct.isSetLast_failed_version_hash()) {
        oprot.writeI64(struct.last_failed_version_hash);
      }
      if (struct.isSetLast_failed_time()) {
        oprot.writeI64(struct.last_failed_time);
      }
      if (struct.isSetLast_success_version()) {
        oprot.writeI64(struct.last_success_version);
      }
      if (struct.isSetLast_success_version_hash()) {
        oprot.writeI64(struct.last_success_version_hash);
      }
      if (struct.isSetVersion_count()) {
        oprot.writeI64(struct.version_count);
      }
      if (struct.isSetPath_hash()) {
        oprot.writeI64(struct.path_hash);
      }
      if (struct.isSetBad()) {
        oprot.writeBool(struct.bad);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TReplicaMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.replica_id = iprot.readI64();
        struct.setReplica_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.backend_id = iprot.readI64();
        struct.setBackend_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.schema_hash = iprot.readI32();
        struct.setSchema_hashIsSet(true);
      }
      if (incoming.get(3)) {
        struct.version = iprot.readI64();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.version_hash = iprot.readI64();
        struct.setVersion_hashIsSet(true);
      }
      if (incoming.get(5)) {
        struct.data_size = iprot.readI64();
        struct.setData_sizeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.row_count = iprot.readI64();
        struct.setRow_countIsSet(true);
      }
      if (incoming.get(7)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.last_failed_version = iprot.readI64();
        struct.setLast_failed_versionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.last_failed_version_hash = iprot.readI64();
        struct.setLast_failed_version_hashIsSet(true);
      }
      if (incoming.get(10)) {
        struct.last_failed_time = iprot.readI64();
        struct.setLast_failed_timeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.last_success_version = iprot.readI64();
        struct.setLast_success_versionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.last_success_version_hash = iprot.readI64();
        struct.setLast_success_version_hashIsSet(true);
      }
      if (incoming.get(13)) {
        struct.version_count = iprot.readI64();
        struct.setVersion_countIsSet(true);
      }
      if (incoming.get(14)) {
        struct.path_hash = iprot.readI64();
        struct.setPath_hashIsSet(true);
      }
      if (incoming.get(15)) {
        struct.bad = iprot.readBool();
        struct.setBadIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

