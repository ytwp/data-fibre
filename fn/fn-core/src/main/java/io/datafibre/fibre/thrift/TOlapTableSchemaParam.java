/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TOlapTableSchemaParam implements org.apache.thrift.TBase<TOlapTableSchemaParam, TOlapTableSchemaParam._Fields>, java.io.Serializable, Cloneable, Comparable<TOlapTableSchemaParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOlapTableSchemaParam");

  private static final org.apache.thrift.protocol.TField DB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("db_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SLOT_DESCS_FIELD_DESC = new org.apache.thrift.protocol.TField("slot_descs", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TUPLE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_desc", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField INDEXES_FIELD_DESC = new org.apache.thrift.protocol.TField("indexes", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TOlapTableSchemaParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TOlapTableSchemaParamTupleSchemeFactory();

  public long db_id; // required
  public long table_id; // required
  public long version; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<TSlotDescriptor> slot_descs; // required
  public @org.apache.thrift.annotation.Nullable TTupleDescriptor tuple_desc; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<TOlapTableIndexSchema> indexes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DB_ID((short)1, "db_id"),
    TABLE_ID((short)2, "table_id"),
    VERSION((short)3, "version"),
    SLOT_DESCS((short)4, "slot_descs"),
    TUPLE_DESC((short)5, "tuple_desc"),
    INDEXES((short)6, "indexes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DB_ID
          return DB_ID;
        case 2: // TABLE_ID
          return TABLE_ID;
        case 3: // VERSION
          return VERSION;
        case 4: // SLOT_DESCS
          return SLOT_DESCS;
        case 5: // TUPLE_DESC
          return TUPLE_DESC;
        case 6: // INDEXES
          return INDEXES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DB_ID_ISSET_ID = 0;
  private static final int __TABLE_ID_ISSET_ID = 1;
  private static final int __VERSION_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DB_ID, new org.apache.thrift.meta_data.FieldMetaData("db_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLOT_DESCS, new org.apache.thrift.meta_data.FieldMetaData("slot_descs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSlotDescriptor.class))));
    tmpMap.put(_Fields.TUPLE_DESC, new org.apache.thrift.meta_data.FieldMetaData("tuple_desc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTupleDescriptor.class)));
    tmpMap.put(_Fields.INDEXES, new org.apache.thrift.meta_data.FieldMetaData("indexes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlapTableIndexSchema.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOlapTableSchemaParam.class, metaDataMap);
  }

  public TOlapTableSchemaParam() {
  }

  public TOlapTableSchemaParam(
    long db_id,
    long table_id,
    long version,
    java.util.List<TSlotDescriptor> slot_descs,
    TTupleDescriptor tuple_desc,
    java.util.List<TOlapTableIndexSchema> indexes)
  {
    this();
    this.db_id = db_id;
    setDb_idIsSet(true);
    this.table_id = table_id;
    setTable_idIsSet(true);
    this.version = version;
    setVersionIsSet(true);
    this.slot_descs = slot_descs;
    this.tuple_desc = tuple_desc;
    this.indexes = indexes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOlapTableSchemaParam(TOlapTableSchemaParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.db_id = other.db_id;
    this.table_id = other.table_id;
    this.version = other.version;
    if (other.isSetSlot_descs()) {
      java.util.List<TSlotDescriptor> __this__slot_descs = new java.util.ArrayList<TSlotDescriptor>(other.slot_descs.size());
      for (TSlotDescriptor other_element : other.slot_descs) {
        __this__slot_descs.add(new TSlotDescriptor(other_element));
      }
      this.slot_descs = __this__slot_descs;
    }
    if (other.isSetTuple_desc()) {
      this.tuple_desc = new TTupleDescriptor(other.tuple_desc);
    }
    if (other.isSetIndexes()) {
      java.util.List<TOlapTableIndexSchema> __this__indexes = new java.util.ArrayList<TOlapTableIndexSchema>(other.indexes.size());
      for (TOlapTableIndexSchema other_element : other.indexes) {
        __this__indexes.add(new TOlapTableIndexSchema(other_element));
      }
      this.indexes = __this__indexes;
    }
  }

  @Override
  public TOlapTableSchemaParam deepCopy() {
    return new TOlapTableSchemaParam(this);
  }

  @Override
  public void clear() {
    setDb_idIsSet(false);
    this.db_id = 0;
    setTable_idIsSet(false);
    this.table_id = 0;
    setVersionIsSet(false);
    this.version = 0;
    this.slot_descs = null;
    this.tuple_desc = null;
    this.indexes = null;
  }

  public long getDb_id() {
    return this.db_id;
  }

  public TOlapTableSchemaParam setDb_id(long db_id) {
    this.db_id = db_id;
    setDb_idIsSet(true);
    return this;
  }

  public void unsetDb_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  /** Returns true if field db_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  public void setDb_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DB_ID_ISSET_ID, value);
  }

  public long getTable_id() {
    return this.table_id;
  }

  public TOlapTableSchemaParam setTable_id(long table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  public long getVersion() {
    return this.version;
  }

  public TOlapTableSchemaParam setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getSlot_descsSize() {
    return (this.slot_descs == null) ? 0 : this.slot_descs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TSlotDescriptor> getSlot_descsIterator() {
    return (this.slot_descs == null) ? null : this.slot_descs.iterator();
  }

  public void addToSlot_descs(TSlotDescriptor elem) {
    if (this.slot_descs == null) {
      this.slot_descs = new java.util.ArrayList<TSlotDescriptor>();
    }
    this.slot_descs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TSlotDescriptor> getSlot_descs() {
    return this.slot_descs;
  }

  public TOlapTableSchemaParam setSlot_descs(@org.apache.thrift.annotation.Nullable java.util.List<TSlotDescriptor> slot_descs) {
    this.slot_descs = slot_descs;
    return this;
  }

  public void unsetSlot_descs() {
    this.slot_descs = null;
  }

  /** Returns true if field slot_descs is set (has been assigned a value) and false otherwise */
  public boolean isSetSlot_descs() {
    return this.slot_descs != null;
  }

  public void setSlot_descsIsSet(boolean value) {
    if (!value) {
      this.slot_descs = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TTupleDescriptor getTuple_desc() {
    return this.tuple_desc;
  }

  public TOlapTableSchemaParam setTuple_desc(@org.apache.thrift.annotation.Nullable TTupleDescriptor tuple_desc) {
    this.tuple_desc = tuple_desc;
    return this;
  }

  public void unsetTuple_desc() {
    this.tuple_desc = null;
  }

  /** Returns true if field tuple_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetTuple_desc() {
    return this.tuple_desc != null;
  }

  public void setTuple_descIsSet(boolean value) {
    if (!value) {
      this.tuple_desc = null;
    }
  }

  public int getIndexesSize() {
    return (this.indexes == null) ? 0 : this.indexes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TOlapTableIndexSchema> getIndexesIterator() {
    return (this.indexes == null) ? null : this.indexes.iterator();
  }

  public void addToIndexes(TOlapTableIndexSchema elem) {
    if (this.indexes == null) {
      this.indexes = new java.util.ArrayList<TOlapTableIndexSchema>();
    }
    this.indexes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TOlapTableIndexSchema> getIndexes() {
    return this.indexes;
  }

  public TOlapTableSchemaParam setIndexes(@org.apache.thrift.annotation.Nullable java.util.List<TOlapTableIndexSchema> indexes) {
    this.indexes = indexes;
    return this;
  }

  public void unsetIndexes() {
    this.indexes = null;
  }

  /** Returns true if field indexes is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexes() {
    return this.indexes != null;
  }

  public void setIndexesIsSet(boolean value) {
    if (!value) {
      this.indexes = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DB_ID:
      if (value == null) {
        unsetDb_id();
      } else {
        setDb_id((java.lang.Long)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((java.lang.Long)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Long)value);
      }
      break;

    case SLOT_DESCS:
      if (value == null) {
        unsetSlot_descs();
      } else {
        setSlot_descs((java.util.List<TSlotDescriptor>)value);
      }
      break;

    case TUPLE_DESC:
      if (value == null) {
        unsetTuple_desc();
      } else {
        setTuple_desc((TTupleDescriptor)value);
      }
      break;

    case INDEXES:
      if (value == null) {
        unsetIndexes();
      } else {
        setIndexes((java.util.List<TOlapTableIndexSchema>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DB_ID:
      return getDb_id();

    case TABLE_ID:
      return getTable_id();

    case VERSION:
      return getVersion();

    case SLOT_DESCS:
      return getSlot_descs();

    case TUPLE_DESC:
      return getTuple_desc();

    case INDEXES:
      return getIndexes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DB_ID:
      return isSetDb_id();
    case TABLE_ID:
      return isSetTable_id();
    case VERSION:
      return isSetVersion();
    case SLOT_DESCS:
      return isSetSlot_descs();
    case TUPLE_DESC:
      return isSetTuple_desc();
    case INDEXES:
      return isSetIndexes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TOlapTableSchemaParam)
      return this.equals((TOlapTableSchemaParam)that);
    return false;
  }

  public boolean equals(TOlapTableSchemaParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_db_id = true;
    boolean that_present_db_id = true;
    if (this_present_db_id || that_present_db_id) {
      if (!(this_present_db_id && that_present_db_id))
        return false;
      if (this.db_id != that.db_id)
        return false;
    }

    boolean this_present_table_id = true;
    boolean that_present_table_id = true;
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_slot_descs = true && this.isSetSlot_descs();
    boolean that_present_slot_descs = true && that.isSetSlot_descs();
    if (this_present_slot_descs || that_present_slot_descs) {
      if (!(this_present_slot_descs && that_present_slot_descs))
        return false;
      if (!this.slot_descs.equals(that.slot_descs))
        return false;
    }

    boolean this_present_tuple_desc = true && this.isSetTuple_desc();
    boolean that_present_tuple_desc = true && that.isSetTuple_desc();
    if (this_present_tuple_desc || that_present_tuple_desc) {
      if (!(this_present_tuple_desc && that_present_tuple_desc))
        return false;
      if (!this.tuple_desc.equals(that.tuple_desc))
        return false;
    }

    boolean this_present_indexes = true && this.isSetIndexes();
    boolean that_present_indexes = true && that.isSetIndexes();
    if (this_present_indexes || that_present_indexes) {
      if (!(this_present_indexes && that_present_indexes))
        return false;
      if (!this.indexes.equals(that.indexes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(db_id);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_id);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

    hashCode = hashCode * 8191 + ((isSetSlot_descs()) ? 131071 : 524287);
    if (isSetSlot_descs())
      hashCode = hashCode * 8191 + slot_descs.hashCode();

    hashCode = hashCode * 8191 + ((isSetTuple_desc()) ? 131071 : 524287);
    if (isSetTuple_desc())
      hashCode = hashCode * 8191 + tuple_desc.hashCode();

    hashCode = hashCode * 8191 + ((isSetIndexes()) ? 131071 : 524287);
    if (isSetIndexes())
      hashCode = hashCode * 8191 + indexes.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TOlapTableSchemaParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetDb_id(), other.isSetDb_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_id, other.db_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_id(), other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSlot_descs(), other.isSetSlot_descs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlot_descs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slot_descs, other.slot_descs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTuple_desc(), other.isSetTuple_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuple_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_desc, other.tuple_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIndexes(), other.isSetIndexes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexes, other.indexes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TOlapTableSchemaParam(");
    boolean first = true;

    sb.append("db_id:");
    sb.append(this.db_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("table_id:");
    sb.append(this.table_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("slot_descs:");
    if (this.slot_descs == null) {
      sb.append("null");
    } else {
      sb.append(this.slot_descs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tuple_desc:");
    if (this.tuple_desc == null) {
      sb.append("null");
    } else {
      sb.append(this.tuple_desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("indexes:");
    if (this.indexes == null) {
      sb.append("null");
    } else {
      sb.append(this.indexes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'db_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'table_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    if (slot_descs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'slot_descs' was not present! Struct: " + toString());
    }
    if (tuple_desc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tuple_desc' was not present! Struct: " + toString());
    }
    if (indexes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'indexes' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (tuple_desc != null) {
      tuple_desc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOlapTableSchemaParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapTableSchemaParamStandardScheme getScheme() {
      return new TOlapTableSchemaParamStandardScheme();
    }
  }

  private static class TOlapTableSchemaParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<TOlapTableSchemaParam> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TOlapTableSchemaParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.db_id = iprot.readI64();
              struct.setDb_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_id = iprot.readI64();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLOT_DESCS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                struct.slot_descs = new java.util.ArrayList<TSlotDescriptor>(_list104.size);
                @org.apache.thrift.annotation.Nullable TSlotDescriptor _elem105;
                for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                {
                  _elem105 = new TSlotDescriptor();
                  _elem105.read(iprot);
                  struct.slot_descs.add(_elem105);
                }
                iprot.readListEnd();
              }
              struct.setSlot_descsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TUPLE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tuple_desc = new TTupleDescriptor();
              struct.tuple_desc.read(iprot);
              struct.setTuple_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INDEXES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list107 = iprot.readListBegin();
                struct.indexes = new java.util.ArrayList<TOlapTableIndexSchema>(_list107.size);
                @org.apache.thrift.annotation.Nullable TOlapTableIndexSchema _elem108;
                for (int _i109 = 0; _i109 < _list107.size; ++_i109)
                {
                  _elem108 = new TOlapTableIndexSchema();
                  _elem108.read(iprot);
                  struct.indexes.add(_elem108);
                }
                iprot.readListEnd();
              }
              struct.setIndexesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDb_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'db_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTable_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TOlapTableSchemaParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DB_ID_FIELD_DESC);
      oprot.writeI64(struct.db_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
      oprot.writeI64(struct.table_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI64(struct.version);
      oprot.writeFieldEnd();
      if (struct.slot_descs != null) {
        oprot.writeFieldBegin(SLOT_DESCS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.slot_descs.size()));
          for (TSlotDescriptor _iter110 : struct.slot_descs)
          {
            _iter110.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tuple_desc != null) {
        oprot.writeFieldBegin(TUPLE_DESC_FIELD_DESC);
        struct.tuple_desc.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.indexes != null) {
        oprot.writeFieldBegin(INDEXES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.indexes.size()));
          for (TOlapTableIndexSchema _iter111 : struct.indexes)
          {
            _iter111.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOlapTableSchemaParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapTableSchemaParamTupleScheme getScheme() {
      return new TOlapTableSchemaParamTupleScheme();
    }
  }

  private static class TOlapTableSchemaParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<TOlapTableSchemaParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOlapTableSchemaParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.db_id);
      oprot.writeI64(struct.table_id);
      oprot.writeI64(struct.version);
      {
        oprot.writeI32(struct.slot_descs.size());
        for (TSlotDescriptor _iter112 : struct.slot_descs)
        {
          _iter112.write(oprot);
        }
      }
      struct.tuple_desc.write(oprot);
      {
        oprot.writeI32(struct.indexes.size());
        for (TOlapTableIndexSchema _iter113 : struct.indexes)
        {
          _iter113.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOlapTableSchemaParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.db_id = iprot.readI64();
      struct.setDb_idIsSet(true);
      struct.table_id = iprot.readI64();
      struct.setTable_idIsSet(true);
      struct.version = iprot.readI64();
      struct.setVersionIsSet(true);
      {
        org.apache.thrift.protocol.TList _list114 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.slot_descs = new java.util.ArrayList<TSlotDescriptor>(_list114.size);
        @org.apache.thrift.annotation.Nullable TSlotDescriptor _elem115;
        for (int _i116 = 0; _i116 < _list114.size; ++_i116)
        {
          _elem115 = new TSlotDescriptor();
          _elem115.read(iprot);
          struct.slot_descs.add(_elem115);
        }
      }
      struct.setSlot_descsIsSet(true);
      struct.tuple_desc = new TTupleDescriptor();
      struct.tuple_desc.read(iprot);
      struct.setTuple_descIsSet(true);
      {
        org.apache.thrift.protocol.TList _list117 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.indexes = new java.util.ArrayList<TOlapTableIndexSchema>(_list117.size);
        @org.apache.thrift.annotation.Nullable TOlapTableIndexSchema _elem118;
        for (int _i119 = 0; _i119 < _list117.size; ++_i119)
        {
          _elem118 = new TOlapTableIndexSchema();
          _elem118.read(iprot);
          struct.indexes.add(_elem118);
        }
      }
      struct.setIndexesIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

