/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TExecBatchPlanFragmentsParams implements org.apache.thrift.TBase<TExecBatchPlanFragmentsParams, TExecBatchPlanFragmentsParams._Fields>, java.io.Serializable, Cloneable, Comparable<TExecBatchPlanFragmentsParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecBatchPlanFragmentsParams");

  private static final org.apache.thrift.protocol.TField COMMON_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("common_param", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField UNIQUE_PARAM_PER_INSTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("unique_param_per_instance", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TExecBatchPlanFragmentsParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TExecBatchPlanFragmentsParamsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TExecPlanFragmentParams common_param; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TExecPlanFragmentParams> unique_param_per_instance; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMON_PARAM((short)1, "common_param"),
    UNIQUE_PARAM_PER_INSTANCE((short)2, "unique_param_per_instance");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMON_PARAM
          return COMMON_PARAM;
        case 2: // UNIQUE_PARAM_PER_INSTANCE
          return UNIQUE_PARAM_PER_INSTANCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.COMMON_PARAM,_Fields.UNIQUE_PARAM_PER_INSTANCE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMON_PARAM, new org.apache.thrift.meta_data.FieldMetaData("common_param", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExecPlanFragmentParams.class)));
    tmpMap.put(_Fields.UNIQUE_PARAM_PER_INSTANCE, new org.apache.thrift.meta_data.FieldMetaData("unique_param_per_instance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExecPlanFragmentParams.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecBatchPlanFragmentsParams.class, metaDataMap);
  }

  public TExecBatchPlanFragmentsParams() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecBatchPlanFragmentsParams(TExecBatchPlanFragmentsParams other) {
    if (other.isSetCommon_param()) {
      this.common_param = new TExecPlanFragmentParams(other.common_param);
    }
    if (other.isSetUnique_param_per_instance()) {
      java.util.List<TExecPlanFragmentParams> __this__unique_param_per_instance = new java.util.ArrayList<TExecPlanFragmentParams>(other.unique_param_per_instance.size());
      for (TExecPlanFragmentParams other_element : other.unique_param_per_instance) {
        __this__unique_param_per_instance.add(new TExecPlanFragmentParams(other_element));
      }
      this.unique_param_per_instance = __this__unique_param_per_instance;
    }
  }

  @Override
  public TExecBatchPlanFragmentsParams deepCopy() {
    return new TExecBatchPlanFragmentsParams(this);
  }

  @Override
  public void clear() {
    this.common_param = null;
    this.unique_param_per_instance = null;
  }

  @org.apache.thrift.annotation.Nullable
  public TExecPlanFragmentParams getCommon_param() {
    return this.common_param;
  }

  public TExecBatchPlanFragmentsParams setCommon_param(@org.apache.thrift.annotation.Nullable TExecPlanFragmentParams common_param) {
    this.common_param = common_param;
    return this;
  }

  public void unsetCommon_param() {
    this.common_param = null;
  }

  /** Returns true if field common_param is set (has been assigned a value) and false otherwise */
  public boolean isSetCommon_param() {
    return this.common_param != null;
  }

  public void setCommon_paramIsSet(boolean value) {
    if (!value) {
      this.common_param = null;
    }
  }

  public int getUnique_param_per_instanceSize() {
    return (this.unique_param_per_instance == null) ? 0 : this.unique_param_per_instance.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TExecPlanFragmentParams> getUnique_param_per_instanceIterator() {
    return (this.unique_param_per_instance == null) ? null : this.unique_param_per_instance.iterator();
  }

  public void addToUnique_param_per_instance(TExecPlanFragmentParams elem) {
    if (this.unique_param_per_instance == null) {
      this.unique_param_per_instance = new java.util.ArrayList<TExecPlanFragmentParams>();
    }
    this.unique_param_per_instance.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TExecPlanFragmentParams> getUnique_param_per_instance() {
    return this.unique_param_per_instance;
  }

  public TExecBatchPlanFragmentsParams setUnique_param_per_instance(@org.apache.thrift.annotation.Nullable java.util.List<TExecPlanFragmentParams> unique_param_per_instance) {
    this.unique_param_per_instance = unique_param_per_instance;
    return this;
  }

  public void unsetUnique_param_per_instance() {
    this.unique_param_per_instance = null;
  }

  /** Returns true if field unique_param_per_instance is set (has been assigned a value) and false otherwise */
  public boolean isSetUnique_param_per_instance() {
    return this.unique_param_per_instance != null;
  }

  public void setUnique_param_per_instanceIsSet(boolean value) {
    if (!value) {
      this.unique_param_per_instance = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COMMON_PARAM:
      if (value == null) {
        unsetCommon_param();
      } else {
        setCommon_param((TExecPlanFragmentParams)value);
      }
      break;

    case UNIQUE_PARAM_PER_INSTANCE:
      if (value == null) {
        unsetUnique_param_per_instance();
      } else {
        setUnique_param_per_instance((java.util.List<TExecPlanFragmentParams>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMON_PARAM:
      return getCommon_param();

    case UNIQUE_PARAM_PER_INSTANCE:
      return getUnique_param_per_instance();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COMMON_PARAM:
      return isSetCommon_param();
    case UNIQUE_PARAM_PER_INSTANCE:
      return isSetUnique_param_per_instance();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TExecBatchPlanFragmentsParams)
      return this.equals((TExecBatchPlanFragmentsParams)that);
    return false;
  }

  public boolean equals(TExecBatchPlanFragmentsParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_common_param = true && this.isSetCommon_param();
    boolean that_present_common_param = true && that.isSetCommon_param();
    if (this_present_common_param || that_present_common_param) {
      if (!(this_present_common_param && that_present_common_param))
        return false;
      if (!this.common_param.equals(that.common_param))
        return false;
    }

    boolean this_present_unique_param_per_instance = true && this.isSetUnique_param_per_instance();
    boolean that_present_unique_param_per_instance = true && that.isSetUnique_param_per_instance();
    if (this_present_unique_param_per_instance || that_present_unique_param_per_instance) {
      if (!(this_present_unique_param_per_instance && that_present_unique_param_per_instance))
        return false;
      if (!this.unique_param_per_instance.equals(that.unique_param_per_instance))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCommon_param()) ? 131071 : 524287);
    if (isSetCommon_param())
      hashCode = hashCode * 8191 + common_param.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnique_param_per_instance()) ? 131071 : 524287);
    if (isSetUnique_param_per_instance())
      hashCode = hashCode * 8191 + unique_param_per_instance.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TExecBatchPlanFragmentsParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCommon_param(), other.isSetCommon_param());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommon_param()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.common_param, other.common_param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUnique_param_per_instance(), other.isSetUnique_param_per_instance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnique_param_per_instance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unique_param_per_instance, other.unique_param_per_instance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TExecBatchPlanFragmentsParams(");
    boolean first = true;

    if (isSetCommon_param()) {
      sb.append("common_param:");
      if (this.common_param == null) {
        sb.append("null");
      } else {
        sb.append(this.common_param);
      }
      first = false;
    }
    if (isSetUnique_param_per_instance()) {
      if (!first) sb.append(", ");
      sb.append("unique_param_per_instance:");
      if (this.unique_param_per_instance == null) {
        sb.append("null");
      } else {
        sb.append(this.unique_param_per_instance);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (common_param != null) {
      common_param.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecBatchPlanFragmentsParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecBatchPlanFragmentsParamsStandardScheme getScheme() {
      return new TExecBatchPlanFragmentsParamsStandardScheme();
    }
  }

  private static class TExecBatchPlanFragmentsParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TExecBatchPlanFragmentsParams> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecBatchPlanFragmentsParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMON_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.common_param = new TExecPlanFragmentParams();
              struct.common_param.read(iprot);
              struct.setCommon_paramIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UNIQUE_PARAM_PER_INSTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                struct.unique_param_per_instance = new java.util.ArrayList<TExecPlanFragmentParams>(_list92.size);
                @org.apache.thrift.annotation.Nullable TExecPlanFragmentParams _elem93;
                for (int _i94 = 0; _i94 < _list92.size; ++_i94)
                {
                  _elem93 = new TExecPlanFragmentParams();
                  _elem93.read(iprot);
                  struct.unique_param_per_instance.add(_elem93);
                }
                iprot.readListEnd();
              }
              struct.setUnique_param_per_instanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecBatchPlanFragmentsParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.common_param != null) {
        if (struct.isSetCommon_param()) {
          oprot.writeFieldBegin(COMMON_PARAM_FIELD_DESC);
          struct.common_param.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unique_param_per_instance != null) {
        if (struct.isSetUnique_param_per_instance()) {
          oprot.writeFieldBegin(UNIQUE_PARAM_PER_INSTANCE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.unique_param_per_instance.size()));
            for (TExecPlanFragmentParams _iter95 : struct.unique_param_per_instance)
            {
              _iter95.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecBatchPlanFragmentsParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecBatchPlanFragmentsParamsTupleScheme getScheme() {
      return new TExecBatchPlanFragmentsParamsTupleScheme();
    }
  }

  private static class TExecBatchPlanFragmentsParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TExecBatchPlanFragmentsParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecBatchPlanFragmentsParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCommon_param()) {
        optionals.set(0);
      }
      if (struct.isSetUnique_param_per_instance()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCommon_param()) {
        struct.common_param.write(oprot);
      }
      if (struct.isSetUnique_param_per_instance()) {
        {
          oprot.writeI32(struct.unique_param_per_instance.size());
          for (TExecPlanFragmentParams _iter96 : struct.unique_param_per_instance)
          {
            _iter96.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecBatchPlanFragmentsParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.common_param = new TExecPlanFragmentParams();
        struct.common_param.read(iprot);
        struct.setCommon_paramIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list97 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.unique_param_per_instance = new java.util.ArrayList<TExecPlanFragmentParams>(_list97.size);
          @org.apache.thrift.annotation.Nullable TExecPlanFragmentParams _elem98;
          for (int _i99 = 0; _i99 < _list97.size; ++_i99)
          {
            _elem98 = new TExecPlanFragmentParams();
            _elem98.read(iprot);
            struct.unique_param_per_instance.add(_elem98);
          }
        }
        struct.setUnique_param_per_instanceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

