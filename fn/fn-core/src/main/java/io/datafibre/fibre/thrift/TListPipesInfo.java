/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TListPipesInfo implements org.apache.thrift.TBase<TListPipesInfo, TListPipesInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TListPipesInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TListPipesInfo");

  private static final org.apache.thrift.protocol.TField PIPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipe_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PIPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pipe_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATABASE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("database_name", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField LOADED_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("loaded_files", org.apache.thrift.protocol.TType.I64, (short)30);
  private static final org.apache.thrift.protocol.TField LOADED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("loaded_rows", org.apache.thrift.protocol.TType.I64, (short)31);
  private static final org.apache.thrift.protocol.TField LOADED_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("loaded_bytes", org.apache.thrift.protocol.TType.I64, (short)32);
  private static final org.apache.thrift.protocol.TField LOAD_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("load_status", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField LAST_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("last_error", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField CREATED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("created_time", org.apache.thrift.protocol.TType.I64, (short)35);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TListPipesInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TListPipesInfoTupleSchemeFactory();

  public long pipe_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String pipe_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String properties; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String database_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String state; // optional
  public long loaded_files; // optional
  public long loaded_rows; // optional
  public long loaded_bytes; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String load_status; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String last_error; // optional
  public long created_time; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PIPE_ID((short)1, "pipe_id"),
    PIPE_NAME((short)2, "pipe_name"),
    PROPERTIES((short)3, "properties"),
    DATABASE_NAME((short)10, "database_name"),
    TABLE_NAME((short)11, "table_name"),
    STATE((short)20, "state"),
    LOADED_FILES((short)30, "loaded_files"),
    LOADED_ROWS((short)31, "loaded_rows"),
    LOADED_BYTES((short)32, "loaded_bytes"),
    LOAD_STATUS((short)33, "load_status"),
    LAST_ERROR((short)34, "last_error"),
    CREATED_TIME((short)35, "created_time");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PIPE_ID
          return PIPE_ID;
        case 2: // PIPE_NAME
          return PIPE_NAME;
        case 3: // PROPERTIES
          return PROPERTIES;
        case 10: // DATABASE_NAME
          return DATABASE_NAME;
        case 11: // TABLE_NAME
          return TABLE_NAME;
        case 20: // STATE
          return STATE;
        case 30: // LOADED_FILES
          return LOADED_FILES;
        case 31: // LOADED_ROWS
          return LOADED_ROWS;
        case 32: // LOADED_BYTES
          return LOADED_BYTES;
        case 33: // LOAD_STATUS
          return LOAD_STATUS;
        case 34: // LAST_ERROR
          return LAST_ERROR;
        case 35: // CREATED_TIME
          return CREATED_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PIPE_ID_ISSET_ID = 0;
  private static final int __LOADED_FILES_ISSET_ID = 1;
  private static final int __LOADED_ROWS_ISSET_ID = 2;
  private static final int __LOADED_BYTES_ISSET_ID = 3;
  private static final int __CREATED_TIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PIPE_ID,_Fields.PIPE_NAME,_Fields.PROPERTIES,_Fields.DATABASE_NAME,_Fields.TABLE_NAME,_Fields.STATE,_Fields.LOADED_FILES,_Fields.LOADED_ROWS,_Fields.LOADED_BYTES,_Fields.LOAD_STATUS,_Fields.LAST_ERROR,_Fields.CREATED_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PIPE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipe_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PIPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("pipe_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATABASE_NAME, new org.apache.thrift.meta_data.FieldMetaData("database_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOADED_FILES, new org.apache.thrift.meta_data.FieldMetaData("loaded_files", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOADED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("loaded_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOADED_BYTES, new org.apache.thrift.meta_data.FieldMetaData("loaded_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOAD_STATUS, new org.apache.thrift.meta_data.FieldMetaData("load_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_ERROR, new org.apache.thrift.meta_data.FieldMetaData("last_error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_TIME, new org.apache.thrift.meta_data.FieldMetaData("created_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TListPipesInfo.class, metaDataMap);
  }

  public TListPipesInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TListPipesInfo(TListPipesInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pipe_id = other.pipe_id;
    if (other.isSetPipe_name()) {
      this.pipe_name = other.pipe_name;
    }
    if (other.isSetProperties()) {
      this.properties = other.properties;
    }
    if (other.isSetDatabase_name()) {
      this.database_name = other.database_name;
    }
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.loaded_files = other.loaded_files;
    this.loaded_rows = other.loaded_rows;
    this.loaded_bytes = other.loaded_bytes;
    if (other.isSetLoad_status()) {
      this.load_status = other.load_status;
    }
    if (other.isSetLast_error()) {
      this.last_error = other.last_error;
    }
    this.created_time = other.created_time;
  }

  @Override
  public TListPipesInfo deepCopy() {
    return new TListPipesInfo(this);
  }

  @Override
  public void clear() {
    setPipe_idIsSet(false);
    this.pipe_id = 0;
    this.pipe_name = null;
    this.properties = null;
    this.database_name = null;
    this.table_name = null;
    this.state = null;
    setLoaded_filesIsSet(false);
    this.loaded_files = 0;
    setLoaded_rowsIsSet(false);
    this.loaded_rows = 0;
    setLoaded_bytesIsSet(false);
    this.loaded_bytes = 0;
    this.load_status = null;
    this.last_error = null;
    setCreated_timeIsSet(false);
    this.created_time = 0;
  }

  public long getPipe_id() {
    return this.pipe_id;
  }

  public TListPipesInfo setPipe_id(long pipe_id) {
    this.pipe_id = pipe_id;
    setPipe_idIsSet(true);
    return this;
  }

  public void unsetPipe_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PIPE_ID_ISSET_ID);
  }

  /** Returns true if field pipe_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPipe_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PIPE_ID_ISSET_ID);
  }

  public void setPipe_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PIPE_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPipe_name() {
    return this.pipe_name;
  }

  public TListPipesInfo setPipe_name(@org.apache.thrift.annotation.Nullable java.lang.String pipe_name) {
    this.pipe_name = pipe_name;
    return this;
  }

  public void unsetPipe_name() {
    this.pipe_name = null;
  }

  /** Returns true if field pipe_name is set (has been assigned a value) and false otherwise */
  public boolean isSetPipe_name() {
    return this.pipe_name != null;
  }

  public void setPipe_nameIsSet(boolean value) {
    if (!value) {
      this.pipe_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getProperties() {
    return this.properties;
  }

  public TListPipesInfo setProperties(@org.apache.thrift.annotation.Nullable java.lang.String properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDatabase_name() {
    return this.database_name;
  }

  public TListPipesInfo setDatabase_name(@org.apache.thrift.annotation.Nullable java.lang.String database_name) {
    this.database_name = database_name;
    return this;
  }

  public void unsetDatabase_name() {
    this.database_name = null;
  }

  /** Returns true if field database_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabase_name() {
    return this.database_name != null;
  }

  public void setDatabase_nameIsSet(boolean value) {
    if (!value) {
      this.database_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_name() {
    return this.table_name;
  }

  public TListPipesInfo setTable_name(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getState() {
    return this.state;
  }

  public TListPipesInfo setState(@org.apache.thrift.annotation.Nullable java.lang.String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public long getLoaded_files() {
    return this.loaded_files;
  }

  public TListPipesInfo setLoaded_files(long loaded_files) {
    this.loaded_files = loaded_files;
    setLoaded_filesIsSet(true);
    return this;
  }

  public void unsetLoaded_files() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADED_FILES_ISSET_ID);
  }

  /** Returns true if field loaded_files is set (has been assigned a value) and false otherwise */
  public boolean isSetLoaded_files() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADED_FILES_ISSET_ID);
  }

  public void setLoaded_filesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADED_FILES_ISSET_ID, value);
  }

  public long getLoaded_rows() {
    return this.loaded_rows;
  }

  public TListPipesInfo setLoaded_rows(long loaded_rows) {
    this.loaded_rows = loaded_rows;
    setLoaded_rowsIsSet(true);
    return this;
  }

  public void unsetLoaded_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADED_ROWS_ISSET_ID);
  }

  /** Returns true if field loaded_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetLoaded_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADED_ROWS_ISSET_ID);
  }

  public void setLoaded_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADED_ROWS_ISSET_ID, value);
  }

  public long getLoaded_bytes() {
    return this.loaded_bytes;
  }

  public TListPipesInfo setLoaded_bytes(long loaded_bytes) {
    this.loaded_bytes = loaded_bytes;
    setLoaded_bytesIsSet(true);
    return this;
  }

  public void unsetLoaded_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADED_BYTES_ISSET_ID);
  }

  /** Returns true if field loaded_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetLoaded_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADED_BYTES_ISSET_ID);
  }

  public void setLoaded_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADED_BYTES_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLoad_status() {
    return this.load_status;
  }

  public TListPipesInfo setLoad_status(@org.apache.thrift.annotation.Nullable java.lang.String load_status) {
    this.load_status = load_status;
    return this;
  }

  public void unsetLoad_status() {
    this.load_status = null;
  }

  /** Returns true if field load_status is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_status() {
    return this.load_status != null;
  }

  public void setLoad_statusIsSet(boolean value) {
    if (!value) {
      this.load_status = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLast_error() {
    return this.last_error;
  }

  public TListPipesInfo setLast_error(@org.apache.thrift.annotation.Nullable java.lang.String last_error) {
    this.last_error = last_error;
    return this;
  }

  public void unsetLast_error() {
    this.last_error = null;
  }

  /** Returns true if field last_error is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_error() {
    return this.last_error != null;
  }

  public void setLast_errorIsSet(boolean value) {
    if (!value) {
      this.last_error = null;
    }
  }

  public long getCreated_time() {
    return this.created_time;
  }

  public TListPipesInfo setCreated_time(long created_time) {
    this.created_time = created_time;
    setCreated_timeIsSet(true);
    return this;
  }

  public void unsetCreated_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATED_TIME_ISSET_ID);
  }

  /** Returns true if field created_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATED_TIME_ISSET_ID);
  }

  public void setCreated_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATED_TIME_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PIPE_ID:
      if (value == null) {
        unsetPipe_id();
      } else {
        setPipe_id((java.lang.Long)value);
      }
      break;

    case PIPE_NAME:
      if (value == null) {
        unsetPipe_name();
      } else {
        setPipe_name((java.lang.String)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.lang.String)value);
      }
      break;

    case DATABASE_NAME:
      if (value == null) {
        unsetDatabase_name();
      } else {
        setDatabase_name((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((java.lang.String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.String)value);
      }
      break;

    case LOADED_FILES:
      if (value == null) {
        unsetLoaded_files();
      } else {
        setLoaded_files((java.lang.Long)value);
      }
      break;

    case LOADED_ROWS:
      if (value == null) {
        unsetLoaded_rows();
      } else {
        setLoaded_rows((java.lang.Long)value);
      }
      break;

    case LOADED_BYTES:
      if (value == null) {
        unsetLoaded_bytes();
      } else {
        setLoaded_bytes((java.lang.Long)value);
      }
      break;

    case LOAD_STATUS:
      if (value == null) {
        unsetLoad_status();
      } else {
        setLoad_status((java.lang.String)value);
      }
      break;

    case LAST_ERROR:
      if (value == null) {
        unsetLast_error();
      } else {
        setLast_error((java.lang.String)value);
      }
      break;

    case CREATED_TIME:
      if (value == null) {
        unsetCreated_time();
      } else {
        setCreated_time((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PIPE_ID:
      return getPipe_id();

    case PIPE_NAME:
      return getPipe_name();

    case PROPERTIES:
      return getProperties();

    case DATABASE_NAME:
      return getDatabase_name();

    case TABLE_NAME:
      return getTable_name();

    case STATE:
      return getState();

    case LOADED_FILES:
      return getLoaded_files();

    case LOADED_ROWS:
      return getLoaded_rows();

    case LOADED_BYTES:
      return getLoaded_bytes();

    case LOAD_STATUS:
      return getLoad_status();

    case LAST_ERROR:
      return getLast_error();

    case CREATED_TIME:
      return getCreated_time();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PIPE_ID:
      return isSetPipe_id();
    case PIPE_NAME:
      return isSetPipe_name();
    case PROPERTIES:
      return isSetProperties();
    case DATABASE_NAME:
      return isSetDatabase_name();
    case TABLE_NAME:
      return isSetTable_name();
    case STATE:
      return isSetState();
    case LOADED_FILES:
      return isSetLoaded_files();
    case LOADED_ROWS:
      return isSetLoaded_rows();
    case LOADED_BYTES:
      return isSetLoaded_bytes();
    case LOAD_STATUS:
      return isSetLoad_status();
    case LAST_ERROR:
      return isSetLast_error();
    case CREATED_TIME:
      return isSetCreated_time();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TListPipesInfo)
      return this.equals((TListPipesInfo)that);
    return false;
  }

  public boolean equals(TListPipesInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_pipe_id = true && this.isSetPipe_id();
    boolean that_present_pipe_id = true && that.isSetPipe_id();
    if (this_present_pipe_id || that_present_pipe_id) {
      if (!(this_present_pipe_id && that_present_pipe_id))
        return false;
      if (this.pipe_id != that.pipe_id)
        return false;
    }

    boolean this_present_pipe_name = true && this.isSetPipe_name();
    boolean that_present_pipe_name = true && that.isSetPipe_name();
    if (this_present_pipe_name || that_present_pipe_name) {
      if (!(this_present_pipe_name && that_present_pipe_name))
        return false;
      if (!this.pipe_name.equals(that.pipe_name))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_database_name = true && this.isSetDatabase_name();
    boolean that_present_database_name = true && that.isSetDatabase_name();
    if (this_present_database_name || that_present_database_name) {
      if (!(this_present_database_name && that_present_database_name))
        return false;
      if (!this.database_name.equals(that.database_name))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_loaded_files = true && this.isSetLoaded_files();
    boolean that_present_loaded_files = true && that.isSetLoaded_files();
    if (this_present_loaded_files || that_present_loaded_files) {
      if (!(this_present_loaded_files && that_present_loaded_files))
        return false;
      if (this.loaded_files != that.loaded_files)
        return false;
    }

    boolean this_present_loaded_rows = true && this.isSetLoaded_rows();
    boolean that_present_loaded_rows = true && that.isSetLoaded_rows();
    if (this_present_loaded_rows || that_present_loaded_rows) {
      if (!(this_present_loaded_rows && that_present_loaded_rows))
        return false;
      if (this.loaded_rows != that.loaded_rows)
        return false;
    }

    boolean this_present_loaded_bytes = true && this.isSetLoaded_bytes();
    boolean that_present_loaded_bytes = true && that.isSetLoaded_bytes();
    if (this_present_loaded_bytes || that_present_loaded_bytes) {
      if (!(this_present_loaded_bytes && that_present_loaded_bytes))
        return false;
      if (this.loaded_bytes != that.loaded_bytes)
        return false;
    }

    boolean this_present_load_status = true && this.isSetLoad_status();
    boolean that_present_load_status = true && that.isSetLoad_status();
    if (this_present_load_status || that_present_load_status) {
      if (!(this_present_load_status && that_present_load_status))
        return false;
      if (!this.load_status.equals(that.load_status))
        return false;
    }

    boolean this_present_last_error = true && this.isSetLast_error();
    boolean that_present_last_error = true && that.isSetLast_error();
    if (this_present_last_error || that_present_last_error) {
      if (!(this_present_last_error && that_present_last_error))
        return false;
      if (!this.last_error.equals(that.last_error))
        return false;
    }

    boolean this_present_created_time = true && this.isSetCreated_time();
    boolean that_present_created_time = true && that.isSetCreated_time();
    if (this_present_created_time || that_present_created_time) {
      if (!(this_present_created_time && that_present_created_time))
        return false;
      if (this.created_time != that.created_time)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPipe_id()) ? 131071 : 524287);
    if (isSetPipe_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pipe_id);

    hashCode = hashCode * 8191 + ((isSetPipe_name()) ? 131071 : 524287);
    if (isSetPipe_name())
      hashCode = hashCode * 8191 + pipe_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatabase_name()) ? 131071 : 524287);
    if (isSetDatabase_name())
      hashCode = hashCode * 8191 + database_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoaded_files()) ? 131071 : 524287);
    if (isSetLoaded_files())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loaded_files);

    hashCode = hashCode * 8191 + ((isSetLoaded_rows()) ? 131071 : 524287);
    if (isSetLoaded_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loaded_rows);

    hashCode = hashCode * 8191 + ((isSetLoaded_bytes()) ? 131071 : 524287);
    if (isSetLoaded_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loaded_bytes);

    hashCode = hashCode * 8191 + ((isSetLoad_status()) ? 131071 : 524287);
    if (isSetLoad_status())
      hashCode = hashCode * 8191 + load_status.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_error()) ? 131071 : 524287);
    if (isSetLast_error())
      hashCode = hashCode * 8191 + last_error.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreated_time()) ? 131071 : 524287);
    if (isSetCreated_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(created_time);

    return hashCode;
  }

  @Override
  public int compareTo(TListPipesInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPipe_id(), other.isSetPipe_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipe_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipe_id, other.pipe_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPipe_name(), other.isSetPipe_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipe_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipe_name, other.pipe_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProperties(), other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDatabase_name(), other.isSetDatabase_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabase_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database_name, other.database_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_name(), other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoaded_files(), other.isSetLoaded_files());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoaded_files()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loaded_files, other.loaded_files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoaded_rows(), other.isSetLoaded_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoaded_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loaded_rows, other.loaded_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoaded_bytes(), other.isSetLoaded_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoaded_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loaded_bytes, other.loaded_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_status(), other.isSetLoad_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_status, other.load_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_error(), other.isSetLast_error());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_error()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_error, other.last_error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreated_time(), other.isSetCreated_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created_time, other.created_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TListPipesInfo(");
    boolean first = true;

    if (isSetPipe_id()) {
      sb.append("pipe_id:");
      sb.append(this.pipe_id);
      first = false;
    }
    if (isSetPipe_name()) {
      if (!first) sb.append(", ");
      sb.append("pipe_name:");
      if (this.pipe_name == null) {
        sb.append("null");
      } else {
        sb.append(this.pipe_name);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    if (isSetDatabase_name()) {
      if (!first) sb.append(", ");
      sb.append("database_name:");
      if (this.database_name == null) {
        sb.append("null");
      } else {
        sb.append(this.database_name);
      }
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetLoaded_files()) {
      if (!first) sb.append(", ");
      sb.append("loaded_files:");
      sb.append(this.loaded_files);
      first = false;
    }
    if (isSetLoaded_rows()) {
      if (!first) sb.append(", ");
      sb.append("loaded_rows:");
      sb.append(this.loaded_rows);
      first = false;
    }
    if (isSetLoaded_bytes()) {
      if (!first) sb.append(", ");
      sb.append("loaded_bytes:");
      sb.append(this.loaded_bytes);
      first = false;
    }
    if (isSetLoad_status()) {
      if (!first) sb.append(", ");
      sb.append("load_status:");
      if (this.load_status == null) {
        sb.append("null");
      } else {
        sb.append(this.load_status);
      }
      first = false;
    }
    if (isSetLast_error()) {
      if (!first) sb.append(", ");
      sb.append("last_error:");
      if (this.last_error == null) {
        sb.append("null");
      } else {
        sb.append(this.last_error);
      }
      first = false;
    }
    if (isSetCreated_time()) {
      if (!first) sb.append(", ");
      sb.append("created_time:");
      sb.append(this.created_time);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TListPipesInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TListPipesInfoStandardScheme getScheme() {
      return new TListPipesInfoStandardScheme();
    }
  }

  private static class TListPipesInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TListPipesInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TListPipesInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PIPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pipe_id = iprot.readI64();
              struct.setPipe_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PIPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pipe_name = iprot.readString();
              struct.setPipe_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.properties = iprot.readString();
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DATABASE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.database_name = iprot.readString();
              struct.setDatabase_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // LOADED_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loaded_files = iprot.readI64();
              struct.setLoaded_filesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // LOADED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loaded_rows = iprot.readI64();
              struct.setLoaded_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // LOADED_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loaded_bytes = iprot.readI64();
              struct.setLoaded_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // LOAD_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.load_status = iprot.readString();
              struct.setLoad_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // LAST_ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_error = iprot.readString();
              struct.setLast_errorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // CREATED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.created_time = iprot.readI64();
              struct.setCreated_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TListPipesInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPipe_id()) {
        oprot.writeFieldBegin(PIPE_ID_FIELD_DESC);
        oprot.writeI64(struct.pipe_id);
        oprot.writeFieldEnd();
      }
      if (struct.pipe_name != null) {
        if (struct.isSetPipe_name()) {
          oprot.writeFieldBegin(PIPE_NAME_FIELD_DESC);
          oprot.writeString(struct.pipe_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          oprot.writeString(struct.properties);
          oprot.writeFieldEnd();
        }
      }
      if (struct.database_name != null) {
        if (struct.isSetDatabase_name()) {
          oprot.writeFieldBegin(DATABASE_NAME_FIELD_DESC);
          oprot.writeString(struct.database_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLoaded_files()) {
        oprot.writeFieldBegin(LOADED_FILES_FIELD_DESC);
        oprot.writeI64(struct.loaded_files);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLoaded_rows()) {
        oprot.writeFieldBegin(LOADED_ROWS_FIELD_DESC);
        oprot.writeI64(struct.loaded_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLoaded_bytes()) {
        oprot.writeFieldBegin(LOADED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.loaded_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.load_status != null) {
        if (struct.isSetLoad_status()) {
          oprot.writeFieldBegin(LOAD_STATUS_FIELD_DESC);
          oprot.writeString(struct.load_status);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_error != null) {
        if (struct.isSetLast_error()) {
          oprot.writeFieldBegin(LAST_ERROR_FIELD_DESC);
          oprot.writeString(struct.last_error);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreated_time()) {
        oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
        oprot.writeI64(struct.created_time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TListPipesInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TListPipesInfoTupleScheme getScheme() {
      return new TListPipesInfoTupleScheme();
    }
  }

  private static class TListPipesInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TListPipesInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TListPipesInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPipe_id()) {
        optionals.set(0);
      }
      if (struct.isSetPipe_name()) {
        optionals.set(1);
      }
      if (struct.isSetProperties()) {
        optionals.set(2);
      }
      if (struct.isSetDatabase_name()) {
        optionals.set(3);
      }
      if (struct.isSetTable_name()) {
        optionals.set(4);
      }
      if (struct.isSetState()) {
        optionals.set(5);
      }
      if (struct.isSetLoaded_files()) {
        optionals.set(6);
      }
      if (struct.isSetLoaded_rows()) {
        optionals.set(7);
      }
      if (struct.isSetLoaded_bytes()) {
        optionals.set(8);
      }
      if (struct.isSetLoad_status()) {
        optionals.set(9);
      }
      if (struct.isSetLast_error()) {
        optionals.set(10);
      }
      if (struct.isSetCreated_time()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPipe_id()) {
        oprot.writeI64(struct.pipe_id);
      }
      if (struct.isSetPipe_name()) {
        oprot.writeString(struct.pipe_name);
      }
      if (struct.isSetProperties()) {
        oprot.writeString(struct.properties);
      }
      if (struct.isSetDatabase_name()) {
        oprot.writeString(struct.database_name);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetLoaded_files()) {
        oprot.writeI64(struct.loaded_files);
      }
      if (struct.isSetLoaded_rows()) {
        oprot.writeI64(struct.loaded_rows);
      }
      if (struct.isSetLoaded_bytes()) {
        oprot.writeI64(struct.loaded_bytes);
      }
      if (struct.isSetLoad_status()) {
        oprot.writeString(struct.load_status);
      }
      if (struct.isSetLast_error()) {
        oprot.writeString(struct.last_error);
      }
      if (struct.isSetCreated_time()) {
        oprot.writeI64(struct.created_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TListPipesInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pipe_id = iprot.readI64();
        struct.setPipe_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pipe_name = iprot.readString();
        struct.setPipe_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.properties = iprot.readString();
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.database_name = iprot.readString();
        struct.setDatabase_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.loaded_files = iprot.readI64();
        struct.setLoaded_filesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.loaded_rows = iprot.readI64();
        struct.setLoaded_rowsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.loaded_bytes = iprot.readI64();
        struct.setLoaded_bytesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.load_status = iprot.readString();
        struct.setLoad_statusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.last_error = iprot.readString();
        struct.setLast_errorIsSet(true);
      }
      if (incoming.get(11)) {
        struct.created_time = iprot.readI64();
        struct.setCreated_timeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

