/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class THdfsPartition implements org.apache.thrift.TBase<THdfsPartition, THdfsPartition._Fields>, java.io.Serializable, Cloneable, Comparable<THdfsPartition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THdfsPartition");

  private static final org.apache.thrift.protocol.TField FILE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("file_format", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARTITION_KEY_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_key_exprs", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new THdfsPartitionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new THdfsPartitionTupleSchemeFactory();

  /**
   * 
   * @see THdfsFileFormat
   */
  public @org.apache.thrift.annotation.Nullable THdfsFileFormat file_format; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> partition_key_exprs; // optional
  public @org.apache.thrift.annotation.Nullable THdfsPartitionLocation location; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see THdfsFileFormat
     */
    FILE_FORMAT((short)1, "file_format"),
    PARTITION_KEY_EXPRS((short)2, "partition_key_exprs"),
    LOCATION((short)3, "location");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_FORMAT
          return FILE_FORMAT;
        case 2: // PARTITION_KEY_EXPRS
          return PARTITION_KEY_EXPRS;
        case 3: // LOCATION
          return LOCATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.FILE_FORMAT,_Fields.PARTITION_KEY_EXPRS,_Fields.LOCATION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("file_format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, THdfsFileFormat.class)));
    tmpMap.put(_Fields.PARTITION_KEY_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("partition_key_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TExpr.class))));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsPartitionLocation.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THdfsPartition.class, metaDataMap);
  }

  public THdfsPartition() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THdfsPartition(THdfsPartition other) {
    if (other.isSetFile_format()) {
      this.file_format = other.file_format;
    }
    if (other.isSetPartition_key_exprs()) {
      java.util.List<io.datafibre.fibre.thrift.TExpr> __this__partition_key_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(other.partition_key_exprs.size());
      for (io.datafibre.fibre.thrift.TExpr other_element : other.partition_key_exprs) {
        __this__partition_key_exprs.add(new io.datafibre.fibre.thrift.TExpr(other_element));
      }
      this.partition_key_exprs = __this__partition_key_exprs;
    }
    if (other.isSetLocation()) {
      this.location = new THdfsPartitionLocation(other.location);
    }
  }

  @Override
  public THdfsPartition deepCopy() {
    return new THdfsPartition(this);
  }

  @Override
  public void clear() {
    this.file_format = null;
    this.partition_key_exprs = null;
    this.location = null;
  }

  /**
   * 
   * @see THdfsFileFormat
   */
  @org.apache.thrift.annotation.Nullable
  public THdfsFileFormat getFile_format() {
    return this.file_format;
  }

  /**
   * 
   * @see THdfsFileFormat
   */
  public THdfsPartition setFile_format(@org.apache.thrift.annotation.Nullable THdfsFileFormat file_format) {
    this.file_format = file_format;
    return this;
  }

  public void unsetFile_format() {
    this.file_format = null;
  }

  /** Returns true if field file_format is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_format() {
    return this.file_format != null;
  }

  public void setFile_formatIsSet(boolean value) {
    if (!value) {
      this.file_format = null;
    }
  }

  public int getPartition_key_exprsSize() {
    return (this.partition_key_exprs == null) ? 0 : this.partition_key_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TExpr> getPartition_key_exprsIterator() {
    return (this.partition_key_exprs == null) ? null : this.partition_key_exprs.iterator();
  }

  public void addToPartition_key_exprs(io.datafibre.fibre.thrift.TExpr elem) {
    if (this.partition_key_exprs == null) {
      this.partition_key_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>();
    }
    this.partition_key_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TExpr> getPartition_key_exprs() {
    return this.partition_key_exprs;
  }

  public THdfsPartition setPartition_key_exprs(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> partition_key_exprs) {
    this.partition_key_exprs = partition_key_exprs;
    return this;
  }

  public void unsetPartition_key_exprs() {
    this.partition_key_exprs = null;
  }

  /** Returns true if field partition_key_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_key_exprs() {
    return this.partition_key_exprs != null;
  }

  public void setPartition_key_exprsIsSet(boolean value) {
    if (!value) {
      this.partition_key_exprs = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public THdfsPartitionLocation getLocation() {
    return this.location;
  }

  public THdfsPartition setLocation(@org.apache.thrift.annotation.Nullable THdfsPartitionLocation location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FILE_FORMAT:
      if (value == null) {
        unsetFile_format();
      } else {
        setFile_format((THdfsFileFormat)value);
      }
      break;

    case PARTITION_KEY_EXPRS:
      if (value == null) {
        unsetPartition_key_exprs();
      } else {
        setPartition_key_exprs((java.util.List<io.datafibre.fibre.thrift.TExpr>)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((THdfsPartitionLocation)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_FORMAT:
      return getFile_format();

    case PARTITION_KEY_EXPRS:
      return getPartition_key_exprs();

    case LOCATION:
      return getLocation();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FILE_FORMAT:
      return isSetFile_format();
    case PARTITION_KEY_EXPRS:
      return isSetPartition_key_exprs();
    case LOCATION:
      return isSetLocation();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof THdfsPartition)
      return this.equals((THdfsPartition)that);
    return false;
  }

  public boolean equals(THdfsPartition that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_file_format = true && this.isSetFile_format();
    boolean that_present_file_format = true && that.isSetFile_format();
    if (this_present_file_format || that_present_file_format) {
      if (!(this_present_file_format && that_present_file_format))
        return false;
      if (!this.file_format.equals(that.file_format))
        return false;
    }

    boolean this_present_partition_key_exprs = true && this.isSetPartition_key_exprs();
    boolean that_present_partition_key_exprs = true && that.isSetPartition_key_exprs();
    if (this_present_partition_key_exprs || that_present_partition_key_exprs) {
      if (!(this_present_partition_key_exprs && that_present_partition_key_exprs))
        return false;
      if (!this.partition_key_exprs.equals(that.partition_key_exprs))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFile_format()) ? 131071 : 524287);
    if (isSetFile_format())
      hashCode = hashCode * 8191 + file_format.getValue();

    hashCode = hashCode * 8191 + ((isSetPartition_key_exprs()) ? 131071 : 524287);
    if (isSetPartition_key_exprs())
      hashCode = hashCode * 8191 + partition_key_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
    if (isSetLocation())
      hashCode = hashCode * 8191 + location.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(THdfsPartition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFile_format(), other.isSetFile_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_format, other.file_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_key_exprs(), other.isSetPartition_key_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_key_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_key_exprs, other.partition_key_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLocation(), other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("THdfsPartition(");
    boolean first = true;

    if (isSetFile_format()) {
      sb.append("file_format:");
      if (this.file_format == null) {
        sb.append("null");
      } else {
        sb.append(this.file_format);
      }
      first = false;
    }
    if (isSetPartition_key_exprs()) {
      if (!first) sb.append(", ");
      sb.append("partition_key_exprs:");
      if (this.partition_key_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_key_exprs);
      }
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (location != null) {
      location.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THdfsPartitionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THdfsPartitionStandardScheme getScheme() {
      return new THdfsPartitionStandardScheme();
    }
  }

  private static class THdfsPartitionStandardScheme extends org.apache.thrift.scheme.StandardScheme<THdfsPartition> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, THdfsPartition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.file_format = io.datafibre.fibre.thrift.THdfsFileFormat.findByValue(iprot.readI32());
              struct.setFile_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTITION_KEY_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                struct.partition_key_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list192.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem193;
                for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                {
                  _elem193 = new io.datafibre.fibre.thrift.TExpr();
                  _elem193.read(iprot);
                  struct.partition_key_exprs.add(_elem193);
                }
                iprot.readListEnd();
              }
              struct.setPartition_key_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.location = new THdfsPartitionLocation();
              struct.location.read(iprot);
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, THdfsPartition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.file_format != null) {
        if (struct.isSetFile_format()) {
          oprot.writeFieldBegin(FILE_FORMAT_FIELD_DESC);
          oprot.writeI32(struct.file_format.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_key_exprs != null) {
        if (struct.isSetPartition_key_exprs()) {
          oprot.writeFieldBegin(PARTITION_KEY_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_key_exprs.size()));
            for (io.datafibre.fibre.thrift.TExpr _iter195 : struct.partition_key_exprs)
            {
              _iter195.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THdfsPartitionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THdfsPartitionTupleScheme getScheme() {
      return new THdfsPartitionTupleScheme();
    }
  }

  private static class THdfsPartitionTupleScheme extends org.apache.thrift.scheme.TupleScheme<THdfsPartition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THdfsPartition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFile_format()) {
        optionals.set(0);
      }
      if (struct.isSetPartition_key_exprs()) {
        optionals.set(1);
      }
      if (struct.isSetLocation()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFile_format()) {
        oprot.writeI32(struct.file_format.getValue());
      }
      if (struct.isSetPartition_key_exprs()) {
        {
          oprot.writeI32(struct.partition_key_exprs.size());
          for (io.datafibre.fibre.thrift.TExpr _iter196 : struct.partition_key_exprs)
          {
            _iter196.write(oprot);
          }
        }
      }
      if (struct.isSetLocation()) {
        struct.location.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THdfsPartition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.file_format = io.datafibre.fibre.thrift.THdfsFileFormat.findByValue(iprot.readI32());
        struct.setFile_formatIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list197 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.partition_key_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list197.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem198;
          for (int _i199 = 0; _i199 < _list197.size; ++_i199)
          {
            _elem198 = new io.datafibre.fibre.thrift.TExpr();
            _elem198.read(iprot);
            struct.partition_key_exprs.add(_elem198);
          }
        }
        struct.setPartition_key_exprsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.location = new THdfsPartitionLocation();
        struct.location.read(iprot);
        struct.setLocationIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

