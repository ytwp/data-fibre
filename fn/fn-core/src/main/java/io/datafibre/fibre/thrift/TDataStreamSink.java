/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TDataStreamSink implements org.apache.thrift.TBase<TDataStreamSink, TDataStreamSink._Fields>, java.io.Serializable, Cloneable, Comparable<TDataStreamSink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDataStreamSink");

  private static final org.apache.thrift.protocol.TField DEST_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dest_node_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OUTPUT_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("output_partition", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField IGNORE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("ignore_not_found", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IS_MERGE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_merge", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField DEST_DOP_FIELD_DESC = new org.apache.thrift.protocol.TField("dest_dop", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField OUTPUT_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("output_columns", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDataStreamSinkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDataStreamSinkTupleSchemeFactory();

  public int dest_node_id; // required
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TDataPartition output_partition; // required
  public boolean ignore_not_found; // optional
  public boolean is_merge; // optional
  public int dest_dop; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<Integer> output_columns; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEST_NODE_ID((short)1, "dest_node_id"),
    OUTPUT_PARTITION((short)2, "output_partition"),
    IGNORE_NOT_FOUND((short)3, "ignore_not_found"),
    IS_MERGE((short)4, "is_merge"),
    DEST_DOP((short)5, "dest_dop"),
    OUTPUT_COLUMNS((short)6, "output_columns");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEST_NODE_ID
          return DEST_NODE_ID;
        case 2: // OUTPUT_PARTITION
          return OUTPUT_PARTITION;
        case 3: // IGNORE_NOT_FOUND
          return IGNORE_NOT_FOUND;
        case 4: // IS_MERGE
          return IS_MERGE;
        case 5: // DEST_DOP
          return DEST_DOP;
        case 6: // OUTPUT_COLUMNS
          return OUTPUT_COLUMNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEST_NODE_ID_ISSET_ID = 0;
  private static final int __IGNORE_NOT_FOUND_ISSET_ID = 1;
  private static final int __IS_MERGE_ISSET_ID = 2;
  private static final int __DEST_DOP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IGNORE_NOT_FOUND,_Fields.IS_MERGE,_Fields.DEST_DOP,_Fields.OUTPUT_COLUMNS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEST_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("dest_node_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TPlanNodeId")));
    tmpMap.put(_Fields.OUTPUT_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("output_partition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TDataPartition.class)));
    tmpMap.put(_Fields.IGNORE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("ignore_not_found", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_MERGE, new org.apache.thrift.meta_data.FieldMetaData("is_merge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEST_DOP, new org.apache.thrift.meta_data.FieldMetaData("dest_dop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OUTPUT_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("output_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDataStreamSink.class, metaDataMap);
  }

  public TDataStreamSink() {
  }

  public TDataStreamSink(
    int dest_node_id,
    io.datafibre.fibre.thrift.TDataPartition output_partition)
  {
    this();
    this.dest_node_id = dest_node_id;
    setDest_node_idIsSet(true);
    this.output_partition = output_partition;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDataStreamSink(TDataStreamSink other) {
    __isset_bitfield = other.__isset_bitfield;
    this.dest_node_id = other.dest_node_id;
    if (other.isSetOutput_partition()) {
      this.output_partition = new io.datafibre.fibre.thrift.TDataPartition(other.output_partition);
    }
    this.ignore_not_found = other.ignore_not_found;
    this.is_merge = other.is_merge;
    this.dest_dop = other.dest_dop;
    if (other.isSetOutput_columns()) {
      java.util.List<Integer> __this__output_columns = new java.util.ArrayList<Integer>(other.output_columns);
      this.output_columns = __this__output_columns;
    }
  }

  @Override
  public TDataStreamSink deepCopy() {
    return new TDataStreamSink(this);
  }

  @Override
  public void clear() {
    setDest_node_idIsSet(false);
    this.dest_node_id = 0;
    this.output_partition = null;
    setIgnore_not_foundIsSet(false);
    this.ignore_not_found = false;
    setIs_mergeIsSet(false);
    this.is_merge = false;
    setDest_dopIsSet(false);
    this.dest_dop = 0;
    this.output_columns = null;
  }

  public int getDest_node_id() {
    return this.dest_node_id;
  }

  public TDataStreamSink setDest_node_id(int dest_node_id) {
    this.dest_node_id = dest_node_id;
    setDest_node_idIsSet(true);
    return this;
  }

  public void unsetDest_node_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEST_NODE_ID_ISSET_ID);
  }

  /** Returns true if field dest_node_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDest_node_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEST_NODE_ID_ISSET_ID);
  }

  public void setDest_node_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEST_NODE_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TDataPartition getOutput_partition() {
    return this.output_partition;
  }

  public TDataStreamSink setOutput_partition(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TDataPartition output_partition) {
    this.output_partition = output_partition;
    return this;
  }

  public void unsetOutput_partition() {
    this.output_partition = null;
  }

  /** Returns true if field output_partition is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_partition() {
    return this.output_partition != null;
  }

  public void setOutput_partitionIsSet(boolean value) {
    if (!value) {
      this.output_partition = null;
    }
  }

  public boolean isIgnore_not_found() {
    return this.ignore_not_found;
  }

  public TDataStreamSink setIgnore_not_found(boolean ignore_not_found) {
    this.ignore_not_found = ignore_not_found;
    setIgnore_not_foundIsSet(true);
    return this;
  }

  public void unsetIgnore_not_found() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IGNORE_NOT_FOUND_ISSET_ID);
  }

  /** Returns true if field ignore_not_found is set (has been assigned a value) and false otherwise */
  public boolean isSetIgnore_not_found() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IGNORE_NOT_FOUND_ISSET_ID);
  }

  public void setIgnore_not_foundIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IGNORE_NOT_FOUND_ISSET_ID, value);
  }

  public boolean isIs_merge() {
    return this.is_merge;
  }

  public TDataStreamSink setIs_merge(boolean is_merge) {
    this.is_merge = is_merge;
    setIs_mergeIsSet(true);
    return this;
  }

  public void unsetIs_merge() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_MERGE_ISSET_ID);
  }

  /** Returns true if field is_merge is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_merge() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_MERGE_ISSET_ID);
  }

  public void setIs_mergeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_MERGE_ISSET_ID, value);
  }

  public int getDest_dop() {
    return this.dest_dop;
  }

  public TDataStreamSink setDest_dop(int dest_dop) {
    this.dest_dop = dest_dop;
    setDest_dopIsSet(true);
    return this;
  }

  public void unsetDest_dop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEST_DOP_ISSET_ID);
  }

  /** Returns true if field dest_dop is set (has been assigned a value) and false otherwise */
  public boolean isSetDest_dop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEST_DOP_ISSET_ID);
  }

  public void setDest_dopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEST_DOP_ISSET_ID, value);
  }

  public int getOutput_columnsSize() {
    return (this.output_columns == null) ? 0 : this.output_columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Integer> getOutput_columnsIterator() {
    return (this.output_columns == null) ? null : this.output_columns.iterator();
  }

  public void addToOutput_columns(int elem) {
    if (this.output_columns == null) {
      this.output_columns = new java.util.ArrayList<Integer>();
    }
    this.output_columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Integer> getOutput_columns() {
    return this.output_columns;
  }

  public TDataStreamSink setOutput_columns(@org.apache.thrift.annotation.Nullable java.util.List<Integer> output_columns) {
    this.output_columns = output_columns;
    return this;
  }

  public void unsetOutput_columns() {
    this.output_columns = null;
  }

  /** Returns true if field output_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_columns() {
    return this.output_columns != null;
  }

  public void setOutput_columnsIsSet(boolean value) {
    if (!value) {
      this.output_columns = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case DEST_NODE_ID:
      if (value == null) {
        unsetDest_node_id();
      } else {
        setDest_node_id((Integer)value);
      }
      break;

    case OUTPUT_PARTITION:
      if (value == null) {
        unsetOutput_partition();
      } else {
        setOutput_partition((io.datafibre.fibre.thrift.TDataPartition)value);
      }
      break;

    case IGNORE_NOT_FOUND:
      if (value == null) {
        unsetIgnore_not_found();
      } else {
        setIgnore_not_found((Boolean)value);
      }
      break;

    case IS_MERGE:
      if (value == null) {
        unsetIs_merge();
      } else {
        setIs_merge((Boolean)value);
      }
      break;

    case DEST_DOP:
      if (value == null) {
        unsetDest_dop();
      } else {
        setDest_dop((Integer)value);
      }
      break;

    case OUTPUT_COLUMNS:
      if (value == null) {
        unsetOutput_columns();
      } else {
        setOutput_columns((java.util.List<Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEST_NODE_ID:
      return getDest_node_id();

    case OUTPUT_PARTITION:
      return getOutput_partition();

    case IGNORE_NOT_FOUND:
      return isIgnore_not_found();

    case IS_MERGE:
      return isIs_merge();

    case DEST_DOP:
      return getDest_dop();

    case OUTPUT_COLUMNS:
      return getOutput_columns();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEST_NODE_ID:
      return isSetDest_node_id();
    case OUTPUT_PARTITION:
      return isSetOutput_partition();
    case IGNORE_NOT_FOUND:
      return isSetIgnore_not_found();
    case IS_MERGE:
      return isSetIs_merge();
    case DEST_DOP:
      return isSetDest_dop();
    case OUTPUT_COLUMNS:
      return isSetOutput_columns();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof TDataStreamSink)
      return this.equals((TDataStreamSink)that);
    return false;
  }

  public boolean equals(TDataStreamSink that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_dest_node_id = true;
    boolean that_present_dest_node_id = true;
    if (this_present_dest_node_id || that_present_dest_node_id) {
      if (!(this_present_dest_node_id && that_present_dest_node_id))
        return false;
      if (this.dest_node_id != that.dest_node_id)
        return false;
    }

    boolean this_present_output_partition = true && this.isSetOutput_partition();
    boolean that_present_output_partition = true && that.isSetOutput_partition();
    if (this_present_output_partition || that_present_output_partition) {
      if (!(this_present_output_partition && that_present_output_partition))
        return false;
      if (!this.output_partition.equals(that.output_partition))
        return false;
    }

    boolean this_present_ignore_not_found = true && this.isSetIgnore_not_found();
    boolean that_present_ignore_not_found = true && that.isSetIgnore_not_found();
    if (this_present_ignore_not_found || that_present_ignore_not_found) {
      if (!(this_present_ignore_not_found && that_present_ignore_not_found))
        return false;
      if (this.ignore_not_found != that.ignore_not_found)
        return false;
    }

    boolean this_present_is_merge = true && this.isSetIs_merge();
    boolean that_present_is_merge = true && that.isSetIs_merge();
    if (this_present_is_merge || that_present_is_merge) {
      if (!(this_present_is_merge && that_present_is_merge))
        return false;
      if (this.is_merge != that.is_merge)
        return false;
    }

    boolean this_present_dest_dop = true && this.isSetDest_dop();
    boolean that_present_dest_dop = true && that.isSetDest_dop();
    if (this_present_dest_dop || that_present_dest_dop) {
      if (!(this_present_dest_dop && that_present_dest_dop))
        return false;
      if (this.dest_dop != that.dest_dop)
        return false;
    }

    boolean this_present_output_columns = true && this.isSetOutput_columns();
    boolean that_present_output_columns = true && that.isSetOutput_columns();
    if (this_present_output_columns || that_present_output_columns) {
      if (!(this_present_output_columns && that_present_output_columns))
        return false;
      if (!this.output_columns.equals(that.output_columns))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + dest_node_id;

    hashCode = hashCode * 8191 + ((isSetOutput_partition()) ? 131071 : 524287);
    if (isSetOutput_partition())
      hashCode = hashCode * 8191 + output_partition.hashCode();

    hashCode = hashCode * 8191 + ((isSetIgnore_not_found()) ? 131071 : 524287);
    if (isSetIgnore_not_found())
      hashCode = hashCode * 8191 + ((ignore_not_found) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIs_merge()) ? 131071 : 524287);
    if (isSetIs_merge())
      hashCode = hashCode * 8191 + ((is_merge) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDest_dop()) ? 131071 : 524287);
    if (isSetDest_dop())
      hashCode = hashCode * 8191 + dest_dop;

    hashCode = hashCode * 8191 + ((isSetOutput_columns()) ? 131071 : 524287);
    if (isSetOutput_columns())
      hashCode = hashCode * 8191 + output_columns.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDataStreamSink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetDest_node_id(), other.isSetDest_node_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDest_node_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dest_node_id, other.dest_node_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetOutput_partition(), other.isSetOutput_partition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_partition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_partition, other.output_partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetIgnore_not_found(), other.isSetIgnore_not_found());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIgnore_not_found()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ignore_not_found, other.ignore_not_found);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetIs_merge(), other.isSetIs_merge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_merge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_merge, other.is_merge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDest_dop(), other.isSetDest_dop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDest_dop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dest_dop, other.dest_dop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetOutput_columns(), other.isSetOutput_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_columns, other.output_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDataStreamSink(");
    boolean first = true;

    sb.append("dest_node_id:");
    sb.append(this.dest_node_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("output_partition:");
    if (this.output_partition == null) {
      sb.append("null");
    } else {
      sb.append(this.output_partition);
    }
    first = false;
    if (isSetIgnore_not_found()) {
      if (!first) sb.append(", ");
      sb.append("ignore_not_found:");
      sb.append(this.ignore_not_found);
      first = false;
    }
    if (isSetIs_merge()) {
      if (!first) sb.append(", ");
      sb.append("is_merge:");
      sb.append(this.is_merge);
      first = false;
    }
    if (isSetDest_dop()) {
      if (!first) sb.append(", ");
      sb.append("dest_dop:");
      sb.append(this.dest_dop);
      first = false;
    }
    if (isSetOutput_columns()) {
      if (!first) sb.append(", ");
      sb.append("output_columns:");
      if (this.output_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.output_columns);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'dest_node_id' because it's a primitive and you chose the non-beans generator.
    if (output_partition == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'output_partition' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (output_partition != null) {
      output_partition.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDataStreamSinkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDataStreamSinkStandardScheme getScheme() {
      return new TDataStreamSinkStandardScheme();
    }
  }

  private static class TDataStreamSinkStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDataStreamSink> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TDataStreamSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEST_NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dest_node_id = iprot.readI32();
              struct.setDest_node_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OUTPUT_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.output_partition = new io.datafibre.fibre.thrift.TDataPartition();
              struct.output_partition.read(iprot);
              struct.setOutput_partitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IGNORE_NOT_FOUND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ignore_not_found = iprot.readBool();
              struct.setIgnore_not_foundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_MERGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_merge = iprot.readBool();
              struct.setIs_mergeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEST_DOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dest_dop = iprot.readI32();
              struct.setDest_dopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OUTPUT_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.output_columns = new java.util.ArrayList<Integer>(_list26.size);
                int _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = iprot.readI32();
                  struct.output_columns.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setOutput_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDest_node_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dest_node_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TDataStreamSink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DEST_NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.dest_node_id);
      oprot.writeFieldEnd();
      if (struct.output_partition != null) {
        oprot.writeFieldBegin(OUTPUT_PARTITION_FIELD_DESC);
        struct.output_partition.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIgnore_not_found()) {
        oprot.writeFieldBegin(IGNORE_NOT_FOUND_FIELD_DESC);
        oprot.writeBool(struct.ignore_not_found);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_merge()) {
        oprot.writeFieldBegin(IS_MERGE_FIELD_DESC);
        oprot.writeBool(struct.is_merge);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDest_dop()) {
        oprot.writeFieldBegin(DEST_DOP_FIELD_DESC);
        oprot.writeI32(struct.dest_dop);
        oprot.writeFieldEnd();
      }
      if (struct.output_columns != null) {
        if (struct.isSetOutput_columns()) {
          oprot.writeFieldBegin(OUTPUT_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.output_columns.size()));
            for (int _iter29 : struct.output_columns)
            {
              oprot.writeI32(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDataStreamSinkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDataStreamSinkTupleScheme getScheme() {
      return new TDataStreamSinkTupleScheme();
    }
  }

  private static class TDataStreamSinkTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDataStreamSink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDataStreamSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.dest_node_id);
      struct.output_partition.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIgnore_not_found()) {
        optionals.set(0);
      }
      if (struct.isSetIs_merge()) {
        optionals.set(1);
      }
      if (struct.isSetDest_dop()) {
        optionals.set(2);
      }
      if (struct.isSetOutput_columns()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetIgnore_not_found()) {
        oprot.writeBool(struct.ignore_not_found);
      }
      if (struct.isSetIs_merge()) {
        oprot.writeBool(struct.is_merge);
      }
      if (struct.isSetDest_dop()) {
        oprot.writeI32(struct.dest_dop);
      }
      if (struct.isSetOutput_columns()) {
        {
          oprot.writeI32(struct.output_columns.size());
          for (int _iter30 : struct.output_columns)
          {
            oprot.writeI32(_iter30);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDataStreamSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.dest_node_id = iprot.readI32();
      struct.setDest_node_idIsSet(true);
      struct.output_partition = new io.datafibre.fibre.thrift.TDataPartition();
      struct.output_partition.read(iprot);
      struct.setOutput_partitionIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.ignore_not_found = iprot.readBool();
        struct.setIgnore_not_foundIsSet(true);
      }
      if (incoming.get(1)) {
        struct.is_merge = iprot.readBool();
        struct.setIs_mergeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dest_dop = iprot.readI32();
        struct.setDest_dopIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list31 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.output_columns = new java.util.ArrayList<Integer>(_list31.size);
          int _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = iprot.readI32();
            struct.output_columns.add(_elem32);
          }
        }
        struct.setOutput_columnsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

