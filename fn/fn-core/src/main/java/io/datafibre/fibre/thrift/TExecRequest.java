/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TExecRequest implements org.apache.thrift.TBase<TExecRequest, TExecRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TExecRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecRequest");

  private static final org.apache.thrift.protocol.TField STMT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stmt_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SQL_STMT_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_stmt", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("request_id", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField QUERY_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_options", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField QUERY_EXEC_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("query_exec_request", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DDL_EXEC_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("ddl_exec_request", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField RESULT_SET_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("result_set_metadata", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField EXPLAIN_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("explain_result", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TExecRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TExecRequestTupleSchemeFactory();

  /**
   * 
   * @see com.starrocks.thrift.TStmtType
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TStmtType stmt_type; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String sql_stmt; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId request_id; // required
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TQueryOptions query_options; // required
  public @org.apache.thrift.annotation.Nullable TQueryExecRequest query_exec_request; // optional
  public @org.apache.thrift.annotation.Nullable TDdlExecRequest ddl_exec_request; // optional
  public @org.apache.thrift.annotation.Nullable TResultSetMetadata result_set_metadata; // optional
  public @org.apache.thrift.annotation.Nullable TExplainResult explain_result; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.starrocks.thrift.TStmtType
     */
    STMT_TYPE((short)1, "stmt_type"),
    SQL_STMT((short)2, "sql_stmt"),
    REQUEST_ID((short)3, "request_id"),
    QUERY_OPTIONS((short)4, "query_options"),
    QUERY_EXEC_REQUEST((short)5, "query_exec_request"),
    DDL_EXEC_REQUEST((short)6, "ddl_exec_request"),
    RESULT_SET_METADATA((short)7, "result_set_metadata"),
    EXPLAIN_RESULT((short)8, "explain_result");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STMT_TYPE
          return STMT_TYPE;
        case 2: // SQL_STMT
          return SQL_STMT;
        case 3: // REQUEST_ID
          return REQUEST_ID;
        case 4: // QUERY_OPTIONS
          return QUERY_OPTIONS;
        case 5: // QUERY_EXEC_REQUEST
          return QUERY_EXEC_REQUEST;
        case 6: // DDL_EXEC_REQUEST
          return DDL_EXEC_REQUEST;
        case 7: // RESULT_SET_METADATA
          return RESULT_SET_METADATA;
        case 8: // EXPLAIN_RESULT
          return EXPLAIN_RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SQL_STMT,_Fields.QUERY_EXEC_REQUEST,_Fields.DDL_EXEC_REQUEST,_Fields.RESULT_SET_METADATA,_Fields.EXPLAIN_RESULT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STMT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stmt_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TStmtType.class)));
    tmpMap.put(_Fields.SQL_STMT, new org.apache.thrift.meta_data.FieldMetaData("sql_stmt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("request_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.QUERY_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("query_options", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TQueryOptions.class)));
    tmpMap.put(_Fields.QUERY_EXEC_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("query_exec_request", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryExecRequest.class)));
    tmpMap.put(_Fields.DDL_EXEC_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("ddl_exec_request", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDdlExecRequest.class)));
    tmpMap.put(_Fields.RESULT_SET_METADATA, new org.apache.thrift.meta_data.FieldMetaData("result_set_metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResultSetMetadata.class)));
    tmpMap.put(_Fields.EXPLAIN_RESULT, new org.apache.thrift.meta_data.FieldMetaData("explain_result", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExplainResult.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecRequest.class, metaDataMap);
  }

  public TExecRequest() {
  }

  public TExecRequest(
    com.starrocks.thrift.TStmtType stmt_type,
    com.starrocks.thrift.TUniqueId request_id,
    com.starrocks.thrift.TQueryOptions query_options)
  {
    this();
    this.stmt_type = stmt_type;
    this.request_id = request_id;
    this.query_options = query_options;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecRequest(TExecRequest other) {
    if (other.isSetStmt_type()) {
      this.stmt_type = other.stmt_type;
    }
    if (other.isSetSql_stmt()) {
      this.sql_stmt = other.sql_stmt;
    }
    if (other.isSetRequest_id()) {
      this.request_id = new com.starrocks.thrift.TUniqueId(other.request_id);
    }
    if (other.isSetQuery_options()) {
      this.query_options = new com.starrocks.thrift.TQueryOptions(other.query_options);
    }
    if (other.isSetQuery_exec_request()) {
      this.query_exec_request = new TQueryExecRequest(other.query_exec_request);
    }
    if (other.isSetDdl_exec_request()) {
      this.ddl_exec_request = new TDdlExecRequest(other.ddl_exec_request);
    }
    if (other.isSetResult_set_metadata()) {
      this.result_set_metadata = new TResultSetMetadata(other.result_set_metadata);
    }
    if (other.isSetExplain_result()) {
      this.explain_result = new TExplainResult(other.explain_result);
    }
  }

  @Override
  public TExecRequest deepCopy() {
    return new TExecRequest(this);
  }

  @Override
  public void clear() {
    this.stmt_type = null;
    this.sql_stmt = null;
    this.request_id = null;
    this.query_options = null;
    this.query_exec_request = null;
    this.ddl_exec_request = null;
    this.result_set_metadata = null;
    this.explain_result = null;
  }

  /**
   * 
   * @see com.starrocks.thrift.TStmtType
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TStmtType getStmt_type() {
    return this.stmt_type;
  }

  /**
   * 
   * @see com.starrocks.thrift.TStmtType
   */
  public TExecRequest setStmt_type(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TStmtType stmt_type) {
    this.stmt_type = stmt_type;
    return this;
  }

  public void unsetStmt_type() {
    this.stmt_type = null;
  }

  /** Returns true if field stmt_type is set (has been assigned a value) and false otherwise */
  public boolean isSetStmt_type() {
    return this.stmt_type != null;
  }

  public void setStmt_typeIsSet(boolean value) {
    if (!value) {
      this.stmt_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSql_stmt() {
    return this.sql_stmt;
  }

  public TExecRequest setSql_stmt(@org.apache.thrift.annotation.Nullable java.lang.String sql_stmt) {
    this.sql_stmt = sql_stmt;
    return this;
  }

  public void unsetSql_stmt() {
    this.sql_stmt = null;
  }

  /** Returns true if field sql_stmt is set (has been assigned a value) and false otherwise */
  public boolean isSetSql_stmt() {
    return this.sql_stmt != null;
  }

  public void setSql_stmtIsSet(boolean value) {
    if (!value) {
      this.sql_stmt = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TUniqueId getRequest_id() {
    return this.request_id;
  }

  public TExecRequest setRequest_id(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId request_id) {
    this.request_id = request_id;
    return this;
  }

  public void unsetRequest_id() {
    this.request_id = null;
  }

  /** Returns true if field request_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_id() {
    return this.request_id != null;
  }

  public void setRequest_idIsSet(boolean value) {
    if (!value) {
      this.request_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TQueryOptions getQuery_options() {
    return this.query_options;
  }

  public TExecRequest setQuery_options(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TQueryOptions query_options) {
    this.query_options = query_options;
    return this;
  }

  public void unsetQuery_options() {
    this.query_options = null;
  }

  /** Returns true if field query_options is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_options() {
    return this.query_options != null;
  }

  public void setQuery_optionsIsSet(boolean value) {
    if (!value) {
      this.query_options = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TQueryExecRequest getQuery_exec_request() {
    return this.query_exec_request;
  }

  public TExecRequest setQuery_exec_request(@org.apache.thrift.annotation.Nullable TQueryExecRequest query_exec_request) {
    this.query_exec_request = query_exec_request;
    return this;
  }

  public void unsetQuery_exec_request() {
    this.query_exec_request = null;
  }

  /** Returns true if field query_exec_request is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_exec_request() {
    return this.query_exec_request != null;
  }

  public void setQuery_exec_requestIsSet(boolean value) {
    if (!value) {
      this.query_exec_request = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDdlExecRequest getDdl_exec_request() {
    return this.ddl_exec_request;
  }

  public TExecRequest setDdl_exec_request(@org.apache.thrift.annotation.Nullable TDdlExecRequest ddl_exec_request) {
    this.ddl_exec_request = ddl_exec_request;
    return this;
  }

  public void unsetDdl_exec_request() {
    this.ddl_exec_request = null;
  }

  /** Returns true if field ddl_exec_request is set (has been assigned a value) and false otherwise */
  public boolean isSetDdl_exec_request() {
    return this.ddl_exec_request != null;
  }

  public void setDdl_exec_requestIsSet(boolean value) {
    if (!value) {
      this.ddl_exec_request = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TResultSetMetadata getResult_set_metadata() {
    return this.result_set_metadata;
  }

  public TExecRequest setResult_set_metadata(@org.apache.thrift.annotation.Nullable TResultSetMetadata result_set_metadata) {
    this.result_set_metadata = result_set_metadata;
    return this;
  }

  public void unsetResult_set_metadata() {
    this.result_set_metadata = null;
  }

  /** Returns true if field result_set_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_set_metadata() {
    return this.result_set_metadata != null;
  }

  public void setResult_set_metadataIsSet(boolean value) {
    if (!value) {
      this.result_set_metadata = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TExplainResult getExplain_result() {
    return this.explain_result;
  }

  public TExecRequest setExplain_result(@org.apache.thrift.annotation.Nullable TExplainResult explain_result) {
    this.explain_result = explain_result;
    return this;
  }

  public void unsetExplain_result() {
    this.explain_result = null;
  }

  /** Returns true if field explain_result is set (has been assigned a value) and false otherwise */
  public boolean isSetExplain_result() {
    return this.explain_result != null;
  }

  public void setExplain_resultIsSet(boolean value) {
    if (!value) {
      this.explain_result = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STMT_TYPE:
      if (value == null) {
        unsetStmt_type();
      } else {
        setStmt_type((com.starrocks.thrift.TStmtType)value);
      }
      break;

    case SQL_STMT:
      if (value == null) {
        unsetSql_stmt();
      } else {
        setSql_stmt((java.lang.String)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequest_id();
      } else {
        setRequest_id((com.starrocks.thrift.TUniqueId)value);
      }
      break;

    case QUERY_OPTIONS:
      if (value == null) {
        unsetQuery_options();
      } else {
        setQuery_options((com.starrocks.thrift.TQueryOptions)value);
      }
      break;

    case QUERY_EXEC_REQUEST:
      if (value == null) {
        unsetQuery_exec_request();
      } else {
        setQuery_exec_request((TQueryExecRequest)value);
      }
      break;

    case DDL_EXEC_REQUEST:
      if (value == null) {
        unsetDdl_exec_request();
      } else {
        setDdl_exec_request((TDdlExecRequest)value);
      }
      break;

    case RESULT_SET_METADATA:
      if (value == null) {
        unsetResult_set_metadata();
      } else {
        setResult_set_metadata((TResultSetMetadata)value);
      }
      break;

    case EXPLAIN_RESULT:
      if (value == null) {
        unsetExplain_result();
      } else {
        setExplain_result((TExplainResult)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STMT_TYPE:
      return getStmt_type();

    case SQL_STMT:
      return getSql_stmt();

    case REQUEST_ID:
      return getRequest_id();

    case QUERY_OPTIONS:
      return getQuery_options();

    case QUERY_EXEC_REQUEST:
      return getQuery_exec_request();

    case DDL_EXEC_REQUEST:
      return getDdl_exec_request();

    case RESULT_SET_METADATA:
      return getResult_set_metadata();

    case EXPLAIN_RESULT:
      return getExplain_result();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STMT_TYPE:
      return isSetStmt_type();
    case SQL_STMT:
      return isSetSql_stmt();
    case REQUEST_ID:
      return isSetRequest_id();
    case QUERY_OPTIONS:
      return isSetQuery_options();
    case QUERY_EXEC_REQUEST:
      return isSetQuery_exec_request();
    case DDL_EXEC_REQUEST:
      return isSetDdl_exec_request();
    case RESULT_SET_METADATA:
      return isSetResult_set_metadata();
    case EXPLAIN_RESULT:
      return isSetExplain_result();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TExecRequest)
      return this.equals((TExecRequest)that);
    return false;
  }

  public boolean equals(TExecRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_stmt_type = true && this.isSetStmt_type();
    boolean that_present_stmt_type = true && that.isSetStmt_type();
    if (this_present_stmt_type || that_present_stmt_type) {
      if (!(this_present_stmt_type && that_present_stmt_type))
        return false;
      if (!this.stmt_type.equals(that.stmt_type))
        return false;
    }

    boolean this_present_sql_stmt = true && this.isSetSql_stmt();
    boolean that_present_sql_stmt = true && that.isSetSql_stmt();
    if (this_present_sql_stmt || that_present_sql_stmt) {
      if (!(this_present_sql_stmt && that_present_sql_stmt))
        return false;
      if (!this.sql_stmt.equals(that.sql_stmt))
        return false;
    }

    boolean this_present_request_id = true && this.isSetRequest_id();
    boolean that_present_request_id = true && that.isSetRequest_id();
    if (this_present_request_id || that_present_request_id) {
      if (!(this_present_request_id && that_present_request_id))
        return false;
      if (!this.request_id.equals(that.request_id))
        return false;
    }

    boolean this_present_query_options = true && this.isSetQuery_options();
    boolean that_present_query_options = true && that.isSetQuery_options();
    if (this_present_query_options || that_present_query_options) {
      if (!(this_present_query_options && that_present_query_options))
        return false;
      if (!this.query_options.equals(that.query_options))
        return false;
    }

    boolean this_present_query_exec_request = true && this.isSetQuery_exec_request();
    boolean that_present_query_exec_request = true && that.isSetQuery_exec_request();
    if (this_present_query_exec_request || that_present_query_exec_request) {
      if (!(this_present_query_exec_request && that_present_query_exec_request))
        return false;
      if (!this.query_exec_request.equals(that.query_exec_request))
        return false;
    }

    boolean this_present_ddl_exec_request = true && this.isSetDdl_exec_request();
    boolean that_present_ddl_exec_request = true && that.isSetDdl_exec_request();
    if (this_present_ddl_exec_request || that_present_ddl_exec_request) {
      if (!(this_present_ddl_exec_request && that_present_ddl_exec_request))
        return false;
      if (!this.ddl_exec_request.equals(that.ddl_exec_request))
        return false;
    }

    boolean this_present_result_set_metadata = true && this.isSetResult_set_metadata();
    boolean that_present_result_set_metadata = true && that.isSetResult_set_metadata();
    if (this_present_result_set_metadata || that_present_result_set_metadata) {
      if (!(this_present_result_set_metadata && that_present_result_set_metadata))
        return false;
      if (!this.result_set_metadata.equals(that.result_set_metadata))
        return false;
    }

    boolean this_present_explain_result = true && this.isSetExplain_result();
    boolean that_present_explain_result = true && that.isSetExplain_result();
    if (this_present_explain_result || that_present_explain_result) {
      if (!(this_present_explain_result && that_present_explain_result))
        return false;
      if (!this.explain_result.equals(that.explain_result))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStmt_type()) ? 131071 : 524287);
    if (isSetStmt_type())
      hashCode = hashCode * 8191 + stmt_type.getValue();

    hashCode = hashCode * 8191 + ((isSetSql_stmt()) ? 131071 : 524287);
    if (isSetSql_stmt())
      hashCode = hashCode * 8191 + sql_stmt.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequest_id()) ? 131071 : 524287);
    if (isSetRequest_id())
      hashCode = hashCode * 8191 + request_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuery_options()) ? 131071 : 524287);
    if (isSetQuery_options())
      hashCode = hashCode * 8191 + query_options.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuery_exec_request()) ? 131071 : 524287);
    if (isSetQuery_exec_request())
      hashCode = hashCode * 8191 + query_exec_request.hashCode();

    hashCode = hashCode * 8191 + ((isSetDdl_exec_request()) ? 131071 : 524287);
    if (isSetDdl_exec_request())
      hashCode = hashCode * 8191 + ddl_exec_request.hashCode();

    hashCode = hashCode * 8191 + ((isSetResult_set_metadata()) ? 131071 : 524287);
    if (isSetResult_set_metadata())
      hashCode = hashCode * 8191 + result_set_metadata.hashCode();

    hashCode = hashCode * 8191 + ((isSetExplain_result()) ? 131071 : 524287);
    if (isSetExplain_result())
      hashCode = hashCode * 8191 + explain_result.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TExecRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStmt_type(), other.isSetStmt_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStmt_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stmt_type, other.stmt_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSql_stmt(), other.isSetSql_stmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql_stmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_stmt, other.sql_stmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRequest_id(), other.isSetRequest_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_id, other.request_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_options(), other.isSetQuery_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_options, other.query_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_exec_request(), other.isSetQuery_exec_request());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_exec_request()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_exec_request, other.query_exec_request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDdl_exec_request(), other.isSetDdl_exec_request());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDdl_exec_request()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ddl_exec_request, other.ddl_exec_request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResult_set_metadata(), other.isSetResult_set_metadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_set_metadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_set_metadata, other.result_set_metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExplain_result(), other.isSetExplain_result());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExplain_result()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.explain_result, other.explain_result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TExecRequest(");
    boolean first = true;

    sb.append("stmt_type:");
    if (this.stmt_type == null) {
      sb.append("null");
    } else {
      sb.append(this.stmt_type);
    }
    first = false;
    if (isSetSql_stmt()) {
      if (!first) sb.append(", ");
      sb.append("sql_stmt:");
      if (this.sql_stmt == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_stmt);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("request_id:");
    if (this.request_id == null) {
      sb.append("null");
    } else {
      sb.append(this.request_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("query_options:");
    if (this.query_options == null) {
      sb.append("null");
    } else {
      sb.append(this.query_options);
    }
    first = false;
    if (isSetQuery_exec_request()) {
      if (!first) sb.append(", ");
      sb.append("query_exec_request:");
      if (this.query_exec_request == null) {
        sb.append("null");
      } else {
        sb.append(this.query_exec_request);
      }
      first = false;
    }
    if (isSetDdl_exec_request()) {
      if (!first) sb.append(", ");
      sb.append("ddl_exec_request:");
      if (this.ddl_exec_request == null) {
        sb.append("null");
      } else {
        sb.append(this.ddl_exec_request);
      }
      first = false;
    }
    if (isSetResult_set_metadata()) {
      if (!first) sb.append(", ");
      sb.append("result_set_metadata:");
      if (this.result_set_metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.result_set_metadata);
      }
      first = false;
    }
    if (isSetExplain_result()) {
      if (!first) sb.append(", ");
      sb.append("explain_result:");
      if (this.explain_result == null) {
        sb.append("null");
      } else {
        sb.append(this.explain_result);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (stmt_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stmt_type' was not present! Struct: " + toString());
    }
    if (request_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'request_id' was not present! Struct: " + toString());
    }
    if (query_options == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query_options' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (request_id != null) {
      request_id.validate();
    }
    if (query_options != null) {
      query_options.validate();
    }
    if (query_exec_request != null) {
      query_exec_request.validate();
    }
    if (ddl_exec_request != null) {
      ddl_exec_request.validate();
    }
    if (result_set_metadata != null) {
      result_set_metadata.validate();
    }
    if (explain_result != null) {
      explain_result.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecRequestStandardScheme getScheme() {
      return new TExecRequestStandardScheme();
    }
  }

  private static class TExecRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TExecRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STMT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stmt_type = com.starrocks.thrift.TStmtType.findByValue(iprot.readI32());
              struct.setStmt_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SQL_STMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql_stmt = iprot.readString();
              struct.setSql_stmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.request_id = new com.starrocks.thrift.TUniqueId();
              struct.request_id.read(iprot);
              struct.setRequest_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUERY_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_options = new com.starrocks.thrift.TQueryOptions();
              struct.query_options.read(iprot);
              struct.setQuery_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUERY_EXEC_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_exec_request = new TQueryExecRequest();
              struct.query_exec_request.read(iprot);
              struct.setQuery_exec_requestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DDL_EXEC_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ddl_exec_request = new TDdlExecRequest();
              struct.ddl_exec_request.read(iprot);
              struct.setDdl_exec_requestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESULT_SET_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result_set_metadata = new TResultSetMetadata();
              struct.result_set_metadata.read(iprot);
              struct.setResult_set_metadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXPLAIN_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.explain_result = new TExplainResult();
              struct.explain_result.read(iprot);
              struct.setExplain_resultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stmt_type != null) {
        oprot.writeFieldBegin(STMT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.stmt_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.sql_stmt != null) {
        if (struct.isSetSql_stmt()) {
          oprot.writeFieldBegin(SQL_STMT_FIELD_DESC);
          oprot.writeString(struct.sql_stmt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.request_id != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        struct.request_id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.query_options != null) {
        oprot.writeFieldBegin(QUERY_OPTIONS_FIELD_DESC);
        struct.query_options.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.query_exec_request != null) {
        if (struct.isSetQuery_exec_request()) {
          oprot.writeFieldBegin(QUERY_EXEC_REQUEST_FIELD_DESC);
          struct.query_exec_request.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ddl_exec_request != null) {
        if (struct.isSetDdl_exec_request()) {
          oprot.writeFieldBegin(DDL_EXEC_REQUEST_FIELD_DESC);
          struct.ddl_exec_request.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.result_set_metadata != null) {
        if (struct.isSetResult_set_metadata()) {
          oprot.writeFieldBegin(RESULT_SET_METADATA_FIELD_DESC);
          struct.result_set_metadata.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.explain_result != null) {
        if (struct.isSetExplain_result()) {
          oprot.writeFieldBegin(EXPLAIN_RESULT_FIELD_DESC);
          struct.explain_result.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecRequestTupleScheme getScheme() {
      return new TExecRequestTupleScheme();
    }
  }

  private static class TExecRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TExecRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.stmt_type.getValue());
      struct.request_id.write(oprot);
      struct.query_options.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSql_stmt()) {
        optionals.set(0);
      }
      if (struct.isSetQuery_exec_request()) {
        optionals.set(1);
      }
      if (struct.isSetDdl_exec_request()) {
        optionals.set(2);
      }
      if (struct.isSetResult_set_metadata()) {
        optionals.set(3);
      }
      if (struct.isSetExplain_result()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSql_stmt()) {
        oprot.writeString(struct.sql_stmt);
      }
      if (struct.isSetQuery_exec_request()) {
        struct.query_exec_request.write(oprot);
      }
      if (struct.isSetDdl_exec_request()) {
        struct.ddl_exec_request.write(oprot);
      }
      if (struct.isSetResult_set_metadata()) {
        struct.result_set_metadata.write(oprot);
      }
      if (struct.isSetExplain_result()) {
        struct.explain_result.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.stmt_type = com.starrocks.thrift.TStmtType.findByValue(iprot.readI32());
      struct.setStmt_typeIsSet(true);
      struct.request_id = new com.starrocks.thrift.TUniqueId();
      struct.request_id.read(iprot);
      struct.setRequest_idIsSet(true);
      struct.query_options = new com.starrocks.thrift.TQueryOptions();
      struct.query_options.read(iprot);
      struct.setQuery_optionsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.sql_stmt = iprot.readString();
        struct.setSql_stmtIsSet(true);
      }
      if (incoming.get(1)) {
        struct.query_exec_request = new TQueryExecRequest();
        struct.query_exec_request.read(iprot);
        struct.setQuery_exec_requestIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ddl_exec_request = new TDdlExecRequest();
        struct.ddl_exec_request.read(iprot);
        struct.setDdl_exec_requestIsSet(true);
      }
      if (incoming.get(3)) {
        struct.result_set_metadata = new TResultSetMetadata();
        struct.result_set_metadata.read(iprot);
        struct.setResult_set_metadataIsSet(true);
      }
      if (incoming.get(4)) {
        struct.explain_result = new TExplainResult();
        struct.explain_result.read(iprot);
        struct.setExplain_resultIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

