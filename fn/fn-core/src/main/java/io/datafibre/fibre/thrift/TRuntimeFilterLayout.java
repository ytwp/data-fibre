/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TRuntimeFilterLayout implements org.apache.thrift.TBase<TRuntimeFilterLayout, TRuntimeFilterLayout._Fields>, java.io.Serializable, Cloneable, Comparable<TRuntimeFilterLayout> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRuntimeFilterLayout");

  private static final org.apache.thrift.protocol.TField FILTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOCAL_LAYOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("local_layout", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GLOBAL_LAYOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("global_layout", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PIPELINE_LEVEL_MULTI_PARTITIONED_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeline_level_multi_partitioned", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_INSTANCES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_instances", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_DRIVERS_PER_INSTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("num_drivers_per_instance", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField BUCKETSEQ_TO_INSTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketseq_to_instance", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField BUCKETSEQ_TO_DRIVERSEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketseq_to_driverseq", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField BUCKETSEQ_TO_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketseq_to_partition", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRuntimeFilterLayoutStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRuntimeFilterLayoutTupleSchemeFactory();

  public int filter_id; // optional
  /**
   * 
   * @see TRuntimeFilterLayoutMode
   */
  public @org.apache.thrift.annotation.Nullable TRuntimeFilterLayoutMode local_layout; // optional
  /**
   * 
   * @see TRuntimeFilterLayoutMode
   */
  public @org.apache.thrift.annotation.Nullable TRuntimeFilterLayoutMode global_layout; // optional
  public boolean pipeline_level_multi_partitioned; // optional
  public int num_instances; // optional
  public int num_drivers_per_instance; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> bucketseq_to_instance; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> bucketseq_to_driverseq; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> bucketseq_to_partition; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILTER_ID((short)1, "filter_id"),
    /**
     * 
     * @see TRuntimeFilterLayoutMode
     */
    LOCAL_LAYOUT((short)2, "local_layout"),
    /**
     * 
     * @see TRuntimeFilterLayoutMode
     */
    GLOBAL_LAYOUT((short)3, "global_layout"),
    PIPELINE_LEVEL_MULTI_PARTITIONED((short)4, "pipeline_level_multi_partitioned"),
    NUM_INSTANCES((short)5, "num_instances"),
    NUM_DRIVERS_PER_INSTANCE((short)6, "num_drivers_per_instance"),
    BUCKETSEQ_TO_INSTANCE((short)7, "bucketseq_to_instance"),
    BUCKETSEQ_TO_DRIVERSEQ((short)8, "bucketseq_to_driverseq"),
    BUCKETSEQ_TO_PARTITION((short)9, "bucketseq_to_partition");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILTER_ID
          return FILTER_ID;
        case 2: // LOCAL_LAYOUT
          return LOCAL_LAYOUT;
        case 3: // GLOBAL_LAYOUT
          return GLOBAL_LAYOUT;
        case 4: // PIPELINE_LEVEL_MULTI_PARTITIONED
          return PIPELINE_LEVEL_MULTI_PARTITIONED;
        case 5: // NUM_INSTANCES
          return NUM_INSTANCES;
        case 6: // NUM_DRIVERS_PER_INSTANCE
          return NUM_DRIVERS_PER_INSTANCE;
        case 7: // BUCKETSEQ_TO_INSTANCE
          return BUCKETSEQ_TO_INSTANCE;
        case 8: // BUCKETSEQ_TO_DRIVERSEQ
          return BUCKETSEQ_TO_DRIVERSEQ;
        case 9: // BUCKETSEQ_TO_PARTITION
          return BUCKETSEQ_TO_PARTITION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FILTER_ID_ISSET_ID = 0;
  private static final int __PIPELINE_LEVEL_MULTI_PARTITIONED_ISSET_ID = 1;
  private static final int __NUM_INSTANCES_ISSET_ID = 2;
  private static final int __NUM_DRIVERS_PER_INSTANCE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FILTER_ID,_Fields.LOCAL_LAYOUT,_Fields.GLOBAL_LAYOUT,_Fields.PIPELINE_LEVEL_MULTI_PARTITIONED,_Fields.NUM_INSTANCES,_Fields.NUM_DRIVERS_PER_INSTANCE,_Fields.BUCKETSEQ_TO_INSTANCE,_Fields.BUCKETSEQ_TO_DRIVERSEQ,_Fields.BUCKETSEQ_TO_PARTITION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILTER_ID, new org.apache.thrift.meta_data.FieldMetaData("filter_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCAL_LAYOUT, new org.apache.thrift.meta_data.FieldMetaData("local_layout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TRuntimeFilterLayoutMode.class)));
    tmpMap.put(_Fields.GLOBAL_LAYOUT, new org.apache.thrift.meta_data.FieldMetaData("global_layout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TRuntimeFilterLayoutMode.class)));
    tmpMap.put(_Fields.PIPELINE_LEVEL_MULTI_PARTITIONED, new org.apache.thrift.meta_data.FieldMetaData("pipeline_level_multi_partitioned", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NUM_INSTANCES, new org.apache.thrift.meta_data.FieldMetaData("num_instances", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_DRIVERS_PER_INSTANCE, new org.apache.thrift.meta_data.FieldMetaData("num_drivers_per_instance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUCKETSEQ_TO_INSTANCE, new org.apache.thrift.meta_data.FieldMetaData("bucketseq_to_instance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BUCKETSEQ_TO_DRIVERSEQ, new org.apache.thrift.meta_data.FieldMetaData("bucketseq_to_driverseq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BUCKETSEQ_TO_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("bucketseq_to_partition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRuntimeFilterLayout.class, metaDataMap);
  }

  public TRuntimeFilterLayout() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRuntimeFilterLayout(TRuntimeFilterLayout other) {
    __isset_bitfield = other.__isset_bitfield;
    this.filter_id = other.filter_id;
    if (other.isSetLocal_layout()) {
      this.local_layout = other.local_layout;
    }
    if (other.isSetGlobal_layout()) {
      this.global_layout = other.global_layout;
    }
    this.pipeline_level_multi_partitioned = other.pipeline_level_multi_partitioned;
    this.num_instances = other.num_instances;
    this.num_drivers_per_instance = other.num_drivers_per_instance;
    if (other.isSetBucketseq_to_instance()) {
      java.util.List<java.lang.Integer> __this__bucketseq_to_instance = new java.util.ArrayList<java.lang.Integer>(other.bucketseq_to_instance);
      this.bucketseq_to_instance = __this__bucketseq_to_instance;
    }
    if (other.isSetBucketseq_to_driverseq()) {
      java.util.List<java.lang.Integer> __this__bucketseq_to_driverseq = new java.util.ArrayList<java.lang.Integer>(other.bucketseq_to_driverseq);
      this.bucketseq_to_driverseq = __this__bucketseq_to_driverseq;
    }
    if (other.isSetBucketseq_to_partition()) {
      java.util.List<java.lang.Integer> __this__bucketseq_to_partition = new java.util.ArrayList<java.lang.Integer>(other.bucketseq_to_partition);
      this.bucketseq_to_partition = __this__bucketseq_to_partition;
    }
  }

  @Override
  public TRuntimeFilterLayout deepCopy() {
    return new TRuntimeFilterLayout(this);
  }

  @Override
  public void clear() {
    setFilter_idIsSet(false);
    this.filter_id = 0;
    this.local_layout = null;
    this.global_layout = null;
    setPipeline_level_multi_partitionedIsSet(false);
    this.pipeline_level_multi_partitioned = false;
    setNum_instancesIsSet(false);
    this.num_instances = 0;
    setNum_drivers_per_instanceIsSet(false);
    this.num_drivers_per_instance = 0;
    this.bucketseq_to_instance = null;
    this.bucketseq_to_driverseq = null;
    this.bucketseq_to_partition = null;
  }

  public int getFilter_id() {
    return this.filter_id;
  }

  public TRuntimeFilterLayout setFilter_id(int filter_id) {
    this.filter_id = filter_id;
    setFilter_idIsSet(true);
    return this;
  }

  public void unsetFilter_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILTER_ID_ISSET_ID);
  }

  /** Returns true if field filter_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILTER_ID_ISSET_ID);
  }

  public void setFilter_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILTER_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see TRuntimeFilterLayoutMode
   */
  @org.apache.thrift.annotation.Nullable
  public TRuntimeFilterLayoutMode getLocal_layout() {
    return this.local_layout;
  }

  /**
   * 
   * @see TRuntimeFilterLayoutMode
   */
  public TRuntimeFilterLayout setLocal_layout(@org.apache.thrift.annotation.Nullable TRuntimeFilterLayoutMode local_layout) {
    this.local_layout = local_layout;
    return this;
  }

  public void unsetLocal_layout() {
    this.local_layout = null;
  }

  /** Returns true if field local_layout is set (has been assigned a value) and false otherwise */
  public boolean isSetLocal_layout() {
    return this.local_layout != null;
  }

  public void setLocal_layoutIsSet(boolean value) {
    if (!value) {
      this.local_layout = null;
    }
  }

  /**
   * 
   * @see TRuntimeFilterLayoutMode
   */
  @org.apache.thrift.annotation.Nullable
  public TRuntimeFilterLayoutMode getGlobal_layout() {
    return this.global_layout;
  }

  /**
   * 
   * @see TRuntimeFilterLayoutMode
   */
  public TRuntimeFilterLayout setGlobal_layout(@org.apache.thrift.annotation.Nullable TRuntimeFilterLayoutMode global_layout) {
    this.global_layout = global_layout;
    return this;
  }

  public void unsetGlobal_layout() {
    this.global_layout = null;
  }

  /** Returns true if field global_layout is set (has been assigned a value) and false otherwise */
  public boolean isSetGlobal_layout() {
    return this.global_layout != null;
  }

  public void setGlobal_layoutIsSet(boolean value) {
    if (!value) {
      this.global_layout = null;
    }
  }

  public boolean isPipeline_level_multi_partitioned() {
    return this.pipeline_level_multi_partitioned;
  }

  public TRuntimeFilterLayout setPipeline_level_multi_partitioned(boolean pipeline_level_multi_partitioned) {
    this.pipeline_level_multi_partitioned = pipeline_level_multi_partitioned;
    setPipeline_level_multi_partitionedIsSet(true);
    return this;
  }

  public void unsetPipeline_level_multi_partitioned() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PIPELINE_LEVEL_MULTI_PARTITIONED_ISSET_ID);
  }

  /** Returns true if field pipeline_level_multi_partitioned is set (has been assigned a value) and false otherwise */
  public boolean isSetPipeline_level_multi_partitioned() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PIPELINE_LEVEL_MULTI_PARTITIONED_ISSET_ID);
  }

  public void setPipeline_level_multi_partitionedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PIPELINE_LEVEL_MULTI_PARTITIONED_ISSET_ID, value);
  }

  public int getNum_instances() {
    return this.num_instances;
  }

  public TRuntimeFilterLayout setNum_instances(int num_instances) {
    this.num_instances = num_instances;
    setNum_instancesIsSet(true);
    return this;
  }

  public void unsetNum_instances() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_INSTANCES_ISSET_ID);
  }

  /** Returns true if field num_instances is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_instances() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_INSTANCES_ISSET_ID);
  }

  public void setNum_instancesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_INSTANCES_ISSET_ID, value);
  }

  public int getNum_drivers_per_instance() {
    return this.num_drivers_per_instance;
  }

  public TRuntimeFilterLayout setNum_drivers_per_instance(int num_drivers_per_instance) {
    this.num_drivers_per_instance = num_drivers_per_instance;
    setNum_drivers_per_instanceIsSet(true);
    return this;
  }

  public void unsetNum_drivers_per_instance() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_DRIVERS_PER_INSTANCE_ISSET_ID);
  }

  /** Returns true if field num_drivers_per_instance is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_drivers_per_instance() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_DRIVERS_PER_INSTANCE_ISSET_ID);
  }

  public void setNum_drivers_per_instanceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_DRIVERS_PER_INSTANCE_ISSET_ID, value);
  }

  public int getBucketseq_to_instanceSize() {
    return (this.bucketseq_to_instance == null) ? 0 : this.bucketseq_to_instance.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getBucketseq_to_instanceIterator() {
    return (this.bucketseq_to_instance == null) ? null : this.bucketseq_to_instance.iterator();
  }

  public void addToBucketseq_to_instance(int elem) {
    if (this.bucketseq_to_instance == null) {
      this.bucketseq_to_instance = new java.util.ArrayList<java.lang.Integer>();
    }
    this.bucketseq_to_instance.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getBucketseq_to_instance() {
    return this.bucketseq_to_instance;
  }

  public TRuntimeFilterLayout setBucketseq_to_instance(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> bucketseq_to_instance) {
    this.bucketseq_to_instance = bucketseq_to_instance;
    return this;
  }

  public void unsetBucketseq_to_instance() {
    this.bucketseq_to_instance = null;
  }

  /** Returns true if field bucketseq_to_instance is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketseq_to_instance() {
    return this.bucketseq_to_instance != null;
  }

  public void setBucketseq_to_instanceIsSet(boolean value) {
    if (!value) {
      this.bucketseq_to_instance = null;
    }
  }

  public int getBucketseq_to_driverseqSize() {
    return (this.bucketseq_to_driverseq == null) ? 0 : this.bucketseq_to_driverseq.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getBucketseq_to_driverseqIterator() {
    return (this.bucketseq_to_driverseq == null) ? null : this.bucketseq_to_driverseq.iterator();
  }

  public void addToBucketseq_to_driverseq(int elem) {
    if (this.bucketseq_to_driverseq == null) {
      this.bucketseq_to_driverseq = new java.util.ArrayList<java.lang.Integer>();
    }
    this.bucketseq_to_driverseq.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getBucketseq_to_driverseq() {
    return this.bucketseq_to_driverseq;
  }

  public TRuntimeFilterLayout setBucketseq_to_driverseq(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> bucketseq_to_driverseq) {
    this.bucketseq_to_driverseq = bucketseq_to_driverseq;
    return this;
  }

  public void unsetBucketseq_to_driverseq() {
    this.bucketseq_to_driverseq = null;
  }

  /** Returns true if field bucketseq_to_driverseq is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketseq_to_driverseq() {
    return this.bucketseq_to_driverseq != null;
  }

  public void setBucketseq_to_driverseqIsSet(boolean value) {
    if (!value) {
      this.bucketseq_to_driverseq = null;
    }
  }

  public int getBucketseq_to_partitionSize() {
    return (this.bucketseq_to_partition == null) ? 0 : this.bucketseq_to_partition.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getBucketseq_to_partitionIterator() {
    return (this.bucketseq_to_partition == null) ? null : this.bucketseq_to_partition.iterator();
  }

  public void addToBucketseq_to_partition(int elem) {
    if (this.bucketseq_to_partition == null) {
      this.bucketseq_to_partition = new java.util.ArrayList<java.lang.Integer>();
    }
    this.bucketseq_to_partition.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getBucketseq_to_partition() {
    return this.bucketseq_to_partition;
  }

  public TRuntimeFilterLayout setBucketseq_to_partition(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> bucketseq_to_partition) {
    this.bucketseq_to_partition = bucketseq_to_partition;
    return this;
  }

  public void unsetBucketseq_to_partition() {
    this.bucketseq_to_partition = null;
  }

  /** Returns true if field bucketseq_to_partition is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketseq_to_partition() {
    return this.bucketseq_to_partition != null;
  }

  public void setBucketseq_to_partitionIsSet(boolean value) {
    if (!value) {
      this.bucketseq_to_partition = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FILTER_ID:
      if (value == null) {
        unsetFilter_id();
      } else {
        setFilter_id((java.lang.Integer)value);
      }
      break;

    case LOCAL_LAYOUT:
      if (value == null) {
        unsetLocal_layout();
      } else {
        setLocal_layout((TRuntimeFilterLayoutMode)value);
      }
      break;

    case GLOBAL_LAYOUT:
      if (value == null) {
        unsetGlobal_layout();
      } else {
        setGlobal_layout((TRuntimeFilterLayoutMode)value);
      }
      break;

    case PIPELINE_LEVEL_MULTI_PARTITIONED:
      if (value == null) {
        unsetPipeline_level_multi_partitioned();
      } else {
        setPipeline_level_multi_partitioned((java.lang.Boolean)value);
      }
      break;

    case NUM_INSTANCES:
      if (value == null) {
        unsetNum_instances();
      } else {
        setNum_instances((java.lang.Integer)value);
      }
      break;

    case NUM_DRIVERS_PER_INSTANCE:
      if (value == null) {
        unsetNum_drivers_per_instance();
      } else {
        setNum_drivers_per_instance((java.lang.Integer)value);
      }
      break;

    case BUCKETSEQ_TO_INSTANCE:
      if (value == null) {
        unsetBucketseq_to_instance();
      } else {
        setBucketseq_to_instance((java.util.List<java.lang.Integer>)value);
      }
      break;

    case BUCKETSEQ_TO_DRIVERSEQ:
      if (value == null) {
        unsetBucketseq_to_driverseq();
      } else {
        setBucketseq_to_driverseq((java.util.List<java.lang.Integer>)value);
      }
      break;

    case BUCKETSEQ_TO_PARTITION:
      if (value == null) {
        unsetBucketseq_to_partition();
      } else {
        setBucketseq_to_partition((java.util.List<java.lang.Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FILTER_ID:
      return getFilter_id();

    case LOCAL_LAYOUT:
      return getLocal_layout();

    case GLOBAL_LAYOUT:
      return getGlobal_layout();

    case PIPELINE_LEVEL_MULTI_PARTITIONED:
      return isPipeline_level_multi_partitioned();

    case NUM_INSTANCES:
      return getNum_instances();

    case NUM_DRIVERS_PER_INSTANCE:
      return getNum_drivers_per_instance();

    case BUCKETSEQ_TO_INSTANCE:
      return getBucketseq_to_instance();

    case BUCKETSEQ_TO_DRIVERSEQ:
      return getBucketseq_to_driverseq();

    case BUCKETSEQ_TO_PARTITION:
      return getBucketseq_to_partition();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FILTER_ID:
      return isSetFilter_id();
    case LOCAL_LAYOUT:
      return isSetLocal_layout();
    case GLOBAL_LAYOUT:
      return isSetGlobal_layout();
    case PIPELINE_LEVEL_MULTI_PARTITIONED:
      return isSetPipeline_level_multi_partitioned();
    case NUM_INSTANCES:
      return isSetNum_instances();
    case NUM_DRIVERS_PER_INSTANCE:
      return isSetNum_drivers_per_instance();
    case BUCKETSEQ_TO_INSTANCE:
      return isSetBucketseq_to_instance();
    case BUCKETSEQ_TO_DRIVERSEQ:
      return isSetBucketseq_to_driverseq();
    case BUCKETSEQ_TO_PARTITION:
      return isSetBucketseq_to_partition();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRuntimeFilterLayout)
      return this.equals((TRuntimeFilterLayout)that);
    return false;
  }

  public boolean equals(TRuntimeFilterLayout that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_filter_id = true && this.isSetFilter_id();
    boolean that_present_filter_id = true && that.isSetFilter_id();
    if (this_present_filter_id || that_present_filter_id) {
      if (!(this_present_filter_id && that_present_filter_id))
        return false;
      if (this.filter_id != that.filter_id)
        return false;
    }

    boolean this_present_local_layout = true && this.isSetLocal_layout();
    boolean that_present_local_layout = true && that.isSetLocal_layout();
    if (this_present_local_layout || that_present_local_layout) {
      if (!(this_present_local_layout && that_present_local_layout))
        return false;
      if (!this.local_layout.equals(that.local_layout))
        return false;
    }

    boolean this_present_global_layout = true && this.isSetGlobal_layout();
    boolean that_present_global_layout = true && that.isSetGlobal_layout();
    if (this_present_global_layout || that_present_global_layout) {
      if (!(this_present_global_layout && that_present_global_layout))
        return false;
      if (!this.global_layout.equals(that.global_layout))
        return false;
    }

    boolean this_present_pipeline_level_multi_partitioned = true && this.isSetPipeline_level_multi_partitioned();
    boolean that_present_pipeline_level_multi_partitioned = true && that.isSetPipeline_level_multi_partitioned();
    if (this_present_pipeline_level_multi_partitioned || that_present_pipeline_level_multi_partitioned) {
      if (!(this_present_pipeline_level_multi_partitioned && that_present_pipeline_level_multi_partitioned))
        return false;
      if (this.pipeline_level_multi_partitioned != that.pipeline_level_multi_partitioned)
        return false;
    }

    boolean this_present_num_instances = true && this.isSetNum_instances();
    boolean that_present_num_instances = true && that.isSetNum_instances();
    if (this_present_num_instances || that_present_num_instances) {
      if (!(this_present_num_instances && that_present_num_instances))
        return false;
      if (this.num_instances != that.num_instances)
        return false;
    }

    boolean this_present_num_drivers_per_instance = true && this.isSetNum_drivers_per_instance();
    boolean that_present_num_drivers_per_instance = true && that.isSetNum_drivers_per_instance();
    if (this_present_num_drivers_per_instance || that_present_num_drivers_per_instance) {
      if (!(this_present_num_drivers_per_instance && that_present_num_drivers_per_instance))
        return false;
      if (this.num_drivers_per_instance != that.num_drivers_per_instance)
        return false;
    }

    boolean this_present_bucketseq_to_instance = true && this.isSetBucketseq_to_instance();
    boolean that_present_bucketseq_to_instance = true && that.isSetBucketseq_to_instance();
    if (this_present_bucketseq_to_instance || that_present_bucketseq_to_instance) {
      if (!(this_present_bucketseq_to_instance && that_present_bucketseq_to_instance))
        return false;
      if (!this.bucketseq_to_instance.equals(that.bucketseq_to_instance))
        return false;
    }

    boolean this_present_bucketseq_to_driverseq = true && this.isSetBucketseq_to_driverseq();
    boolean that_present_bucketseq_to_driverseq = true && that.isSetBucketseq_to_driverseq();
    if (this_present_bucketseq_to_driverseq || that_present_bucketseq_to_driverseq) {
      if (!(this_present_bucketseq_to_driverseq && that_present_bucketseq_to_driverseq))
        return false;
      if (!this.bucketseq_to_driverseq.equals(that.bucketseq_to_driverseq))
        return false;
    }

    boolean this_present_bucketseq_to_partition = true && this.isSetBucketseq_to_partition();
    boolean that_present_bucketseq_to_partition = true && that.isSetBucketseq_to_partition();
    if (this_present_bucketseq_to_partition || that_present_bucketseq_to_partition) {
      if (!(this_present_bucketseq_to_partition && that_present_bucketseq_to_partition))
        return false;
      if (!this.bucketseq_to_partition.equals(that.bucketseq_to_partition))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFilter_id()) ? 131071 : 524287);
    if (isSetFilter_id())
      hashCode = hashCode * 8191 + filter_id;

    hashCode = hashCode * 8191 + ((isSetLocal_layout()) ? 131071 : 524287);
    if (isSetLocal_layout())
      hashCode = hashCode * 8191 + local_layout.getValue();

    hashCode = hashCode * 8191 + ((isSetGlobal_layout()) ? 131071 : 524287);
    if (isSetGlobal_layout())
      hashCode = hashCode * 8191 + global_layout.getValue();

    hashCode = hashCode * 8191 + ((isSetPipeline_level_multi_partitioned()) ? 131071 : 524287);
    if (isSetPipeline_level_multi_partitioned())
      hashCode = hashCode * 8191 + ((pipeline_level_multi_partitioned) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetNum_instances()) ? 131071 : 524287);
    if (isSetNum_instances())
      hashCode = hashCode * 8191 + num_instances;

    hashCode = hashCode * 8191 + ((isSetNum_drivers_per_instance()) ? 131071 : 524287);
    if (isSetNum_drivers_per_instance())
      hashCode = hashCode * 8191 + num_drivers_per_instance;

    hashCode = hashCode * 8191 + ((isSetBucketseq_to_instance()) ? 131071 : 524287);
    if (isSetBucketseq_to_instance())
      hashCode = hashCode * 8191 + bucketseq_to_instance.hashCode();

    hashCode = hashCode * 8191 + ((isSetBucketseq_to_driverseq()) ? 131071 : 524287);
    if (isSetBucketseq_to_driverseq())
      hashCode = hashCode * 8191 + bucketseq_to_driverseq.hashCode();

    hashCode = hashCode * 8191 + ((isSetBucketseq_to_partition()) ? 131071 : 524287);
    if (isSetBucketseq_to_partition())
      hashCode = hashCode * 8191 + bucketseq_to_partition.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TRuntimeFilterLayout other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFilter_id(), other.isSetFilter_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_id, other.filter_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLocal_layout(), other.isSetLocal_layout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocal_layout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local_layout, other.local_layout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGlobal_layout(), other.isSetGlobal_layout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlobal_layout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.global_layout, other.global_layout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPipeline_level_multi_partitioned(), other.isSetPipeline_level_multi_partitioned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipeline_level_multi_partitioned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeline_level_multi_partitioned, other.pipeline_level_multi_partitioned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_instances(), other.isSetNum_instances());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_instances()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_instances, other.num_instances);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_drivers_per_instance(), other.isSetNum_drivers_per_instance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_drivers_per_instance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_drivers_per_instance, other.num_drivers_per_instance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBucketseq_to_instance(), other.isSetBucketseq_to_instance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketseq_to_instance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketseq_to_instance, other.bucketseq_to_instance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBucketseq_to_driverseq(), other.isSetBucketseq_to_driverseq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketseq_to_driverseq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketseq_to_driverseq, other.bucketseq_to_driverseq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBucketseq_to_partition(), other.isSetBucketseq_to_partition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketseq_to_partition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketseq_to_partition, other.bucketseq_to_partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRuntimeFilterLayout(");
    boolean first = true;

    if (isSetFilter_id()) {
      sb.append("filter_id:");
      sb.append(this.filter_id);
      first = false;
    }
    if (isSetLocal_layout()) {
      if (!first) sb.append(", ");
      sb.append("local_layout:");
      if (this.local_layout == null) {
        sb.append("null");
      } else {
        sb.append(this.local_layout);
      }
      first = false;
    }
    if (isSetGlobal_layout()) {
      if (!first) sb.append(", ");
      sb.append("global_layout:");
      if (this.global_layout == null) {
        sb.append("null");
      } else {
        sb.append(this.global_layout);
      }
      first = false;
    }
    if (isSetPipeline_level_multi_partitioned()) {
      if (!first) sb.append(", ");
      sb.append("pipeline_level_multi_partitioned:");
      sb.append(this.pipeline_level_multi_partitioned);
      first = false;
    }
    if (isSetNum_instances()) {
      if (!first) sb.append(", ");
      sb.append("num_instances:");
      sb.append(this.num_instances);
      first = false;
    }
    if (isSetNum_drivers_per_instance()) {
      if (!first) sb.append(", ");
      sb.append("num_drivers_per_instance:");
      sb.append(this.num_drivers_per_instance);
      first = false;
    }
    if (isSetBucketseq_to_instance()) {
      if (!first) sb.append(", ");
      sb.append("bucketseq_to_instance:");
      if (this.bucketseq_to_instance == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketseq_to_instance);
      }
      first = false;
    }
    if (isSetBucketseq_to_driverseq()) {
      if (!first) sb.append(", ");
      sb.append("bucketseq_to_driverseq:");
      if (this.bucketseq_to_driverseq == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketseq_to_driverseq);
      }
      first = false;
    }
    if (isSetBucketseq_to_partition()) {
      if (!first) sb.append(", ");
      sb.append("bucketseq_to_partition:");
      if (this.bucketseq_to_partition == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketseq_to_partition);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRuntimeFilterLayoutStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRuntimeFilterLayoutStandardScheme getScheme() {
      return new TRuntimeFilterLayoutStandardScheme();
    }
  }

  private static class TRuntimeFilterLayoutStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRuntimeFilterLayout> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TRuntimeFilterLayout struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.filter_id = iprot.readI32();
              struct.setFilter_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCAL_LAYOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.local_layout = com.starrocks.thrift.TRuntimeFilterLayoutMode.findByValue(iprot.readI32());
              struct.setLocal_layoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GLOBAL_LAYOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.global_layout = com.starrocks.thrift.TRuntimeFilterLayoutMode.findByValue(iprot.readI32());
              struct.setGlobal_layoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PIPELINE_LEVEL_MULTI_PARTITIONED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.pipeline_level_multi_partitioned = iprot.readBool();
              struct.setPipeline_level_multi_partitionedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM_INSTANCES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_instances = iprot.readI32();
              struct.setNum_instancesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM_DRIVERS_PER_INSTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_drivers_per_instance = iprot.readI32();
              struct.setNum_drivers_per_instanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BUCKETSEQ_TO_INSTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.bucketseq_to_instance = new java.util.ArrayList<java.lang.Integer>(_list8.size);
                int _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readI32();
                  struct.bucketseq_to_instance.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setBucketseq_to_instanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BUCKETSEQ_TO_DRIVERSEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.bucketseq_to_driverseq = new java.util.ArrayList<java.lang.Integer>(_list11.size);
                int _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = iprot.readI32();
                  struct.bucketseq_to_driverseq.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setBucketseq_to_driverseqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BUCKETSEQ_TO_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.bucketseq_to_partition = new java.util.ArrayList<java.lang.Integer>(_list14.size);
                int _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = iprot.readI32();
                  struct.bucketseq_to_partition.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setBucketseq_to_partitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TRuntimeFilterLayout struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetFilter_id()) {
        oprot.writeFieldBegin(FILTER_ID_FIELD_DESC);
        oprot.writeI32(struct.filter_id);
        oprot.writeFieldEnd();
      }
      if (struct.local_layout != null) {
        if (struct.isSetLocal_layout()) {
          oprot.writeFieldBegin(LOCAL_LAYOUT_FIELD_DESC);
          oprot.writeI32(struct.local_layout.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.global_layout != null) {
        if (struct.isSetGlobal_layout()) {
          oprot.writeFieldBegin(GLOBAL_LAYOUT_FIELD_DESC);
          oprot.writeI32(struct.global_layout.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPipeline_level_multi_partitioned()) {
        oprot.writeFieldBegin(PIPELINE_LEVEL_MULTI_PARTITIONED_FIELD_DESC);
        oprot.writeBool(struct.pipeline_level_multi_partitioned);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_instances()) {
        oprot.writeFieldBegin(NUM_INSTANCES_FIELD_DESC);
        oprot.writeI32(struct.num_instances);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_drivers_per_instance()) {
        oprot.writeFieldBegin(NUM_DRIVERS_PER_INSTANCE_FIELD_DESC);
        oprot.writeI32(struct.num_drivers_per_instance);
        oprot.writeFieldEnd();
      }
      if (struct.bucketseq_to_instance != null) {
        if (struct.isSetBucketseq_to_instance()) {
          oprot.writeFieldBegin(BUCKETSEQ_TO_INSTANCE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.bucketseq_to_instance.size()));
            for (int _iter17 : struct.bucketseq_to_instance)
            {
              oprot.writeI32(_iter17);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.bucketseq_to_driverseq != null) {
        if (struct.isSetBucketseq_to_driverseq()) {
          oprot.writeFieldBegin(BUCKETSEQ_TO_DRIVERSEQ_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.bucketseq_to_driverseq.size()));
            for (int _iter18 : struct.bucketseq_to_driverseq)
            {
              oprot.writeI32(_iter18);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.bucketseq_to_partition != null) {
        if (struct.isSetBucketseq_to_partition()) {
          oprot.writeFieldBegin(BUCKETSEQ_TO_PARTITION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.bucketseq_to_partition.size()));
            for (int _iter19 : struct.bucketseq_to_partition)
            {
              oprot.writeI32(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRuntimeFilterLayoutTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRuntimeFilterLayoutTupleScheme getScheme() {
      return new TRuntimeFilterLayoutTupleScheme();
    }
  }

  private static class TRuntimeFilterLayoutTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRuntimeFilterLayout> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterLayout struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFilter_id()) {
        optionals.set(0);
      }
      if (struct.isSetLocal_layout()) {
        optionals.set(1);
      }
      if (struct.isSetGlobal_layout()) {
        optionals.set(2);
      }
      if (struct.isSetPipeline_level_multi_partitioned()) {
        optionals.set(3);
      }
      if (struct.isSetNum_instances()) {
        optionals.set(4);
      }
      if (struct.isSetNum_drivers_per_instance()) {
        optionals.set(5);
      }
      if (struct.isSetBucketseq_to_instance()) {
        optionals.set(6);
      }
      if (struct.isSetBucketseq_to_driverseq()) {
        optionals.set(7);
      }
      if (struct.isSetBucketseq_to_partition()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetFilter_id()) {
        oprot.writeI32(struct.filter_id);
      }
      if (struct.isSetLocal_layout()) {
        oprot.writeI32(struct.local_layout.getValue());
      }
      if (struct.isSetGlobal_layout()) {
        oprot.writeI32(struct.global_layout.getValue());
      }
      if (struct.isSetPipeline_level_multi_partitioned()) {
        oprot.writeBool(struct.pipeline_level_multi_partitioned);
      }
      if (struct.isSetNum_instances()) {
        oprot.writeI32(struct.num_instances);
      }
      if (struct.isSetNum_drivers_per_instance()) {
        oprot.writeI32(struct.num_drivers_per_instance);
      }
      if (struct.isSetBucketseq_to_instance()) {
        {
          oprot.writeI32(struct.bucketseq_to_instance.size());
          for (int _iter20 : struct.bucketseq_to_instance)
          {
            oprot.writeI32(_iter20);
          }
        }
      }
      if (struct.isSetBucketseq_to_driverseq()) {
        {
          oprot.writeI32(struct.bucketseq_to_driverseq.size());
          for (int _iter21 : struct.bucketseq_to_driverseq)
          {
            oprot.writeI32(_iter21);
          }
        }
      }
      if (struct.isSetBucketseq_to_partition()) {
        {
          oprot.writeI32(struct.bucketseq_to_partition.size());
          for (int _iter22 : struct.bucketseq_to_partition)
          {
            oprot.writeI32(_iter22);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterLayout struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.filter_id = iprot.readI32();
        struct.setFilter_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.local_layout = com.starrocks.thrift.TRuntimeFilterLayoutMode.findByValue(iprot.readI32());
        struct.setLocal_layoutIsSet(true);
      }
      if (incoming.get(2)) {
        struct.global_layout = com.starrocks.thrift.TRuntimeFilterLayoutMode.findByValue(iprot.readI32());
        struct.setGlobal_layoutIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pipeline_level_multi_partitioned = iprot.readBool();
        struct.setPipeline_level_multi_partitionedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.num_instances = iprot.readI32();
        struct.setNum_instancesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.num_drivers_per_instance = iprot.readI32();
        struct.setNum_drivers_per_instanceIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list23 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.bucketseq_to_instance = new java.util.ArrayList<java.lang.Integer>(_list23.size);
          int _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = iprot.readI32();
            struct.bucketseq_to_instance.add(_elem24);
          }
        }
        struct.setBucketseq_to_instanceIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list26 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.bucketseq_to_driverseq = new java.util.ArrayList<java.lang.Integer>(_list26.size);
          int _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = iprot.readI32();
            struct.bucketseq_to_driverseq.add(_elem27);
          }
        }
        struct.setBucketseq_to_driverseqIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.bucketseq_to_partition = new java.util.ArrayList<java.lang.Integer>(_list29.size);
          int _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readI32();
            struct.bucketseq_to_partition.add(_elem30);
          }
        }
        struct.setBucketseq_to_partitionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

