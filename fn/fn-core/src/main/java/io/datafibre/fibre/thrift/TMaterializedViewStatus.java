/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TMaterializedViewStatus implements org.apache.thrift.TBase<TMaterializedViewStatus, TMaterializedViewStatus._Fields>, java.io.Serializable, Cloneable, Comparable<TMaterializedViewStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMaterializedViewStatus");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATABASE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("database_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REFRESH_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("refresh_type", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IS_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_active", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_REFRESH_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("last_refresh_start_time", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_REFRESH_FINISHED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("last_refresh_finished_time", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_REFRESH_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("last_refresh_duration", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_REFRESH_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("last_refresh_state", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LAST_REFRESH_ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("last_refresh_error_code", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LAST_REFRESH_ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("last_refresh_error_message", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PARTITION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_type", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LAST_REFRESH_FORCE_REFRESH_FIELD_DESC = new org.apache.thrift.protocol.TField("last_refresh_force_refresh", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField LAST_REFRESH_START_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("last_refresh_start_partition", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LAST_REFRESH_END_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("last_refresh_end_partition", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField LAST_REFRESH_BASE_REFRESH_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("last_refresh_base_refresh_partitions", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField LAST_REFRESH_MV_REFRESH_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("last_refresh_mv_refresh_partitions", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField LAST_CHECK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("last_check_time", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField DDL_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("ddl_sql", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("task_id", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField TASK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("task_name", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField INACTIVE_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("inactive_reason", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField EXTRA_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("extra_message", org.apache.thrift.protocol.TType.STRING, (short)26);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMaterializedViewStatusStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMaterializedViewStatusTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String database_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String refresh_type; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String is_active; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String last_refresh_start_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String last_refresh_finished_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String last_refresh_duration; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String last_refresh_state; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String last_refresh_error_code; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String last_refresh_error_message; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String text; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String rows; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String partition_type; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String last_refresh_force_refresh; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String last_refresh_start_partition; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String last_refresh_end_partition; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String last_refresh_base_refresh_partitions; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String last_refresh_mv_refresh_partitions; // optional
  public long last_check_time; // optional
  public long create_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String ddl_sql; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String task_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String task_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String inactive_reason; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String extra_message; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DATABASE_NAME((short)2, "database_name"),
    NAME((short)3, "name"),
    REFRESH_TYPE((short)4, "refresh_type"),
    IS_ACTIVE((short)5, "is_active"),
    LAST_REFRESH_START_TIME((short)6, "last_refresh_start_time"),
    LAST_REFRESH_FINISHED_TIME((short)7, "last_refresh_finished_time"),
    LAST_REFRESH_DURATION((short)8, "last_refresh_duration"),
    LAST_REFRESH_STATE((short)9, "last_refresh_state"),
    LAST_REFRESH_ERROR_CODE((short)10, "last_refresh_error_code"),
    LAST_REFRESH_ERROR_MESSAGE((short)11, "last_refresh_error_message"),
    TEXT((short)12, "text"),
    ROWS((short)13, "rows"),
    PARTITION_TYPE((short)14, "partition_type"),
    LAST_REFRESH_FORCE_REFRESH((short)15, "last_refresh_force_refresh"),
    LAST_REFRESH_START_PARTITION((short)16, "last_refresh_start_partition"),
    LAST_REFRESH_END_PARTITION((short)17, "last_refresh_end_partition"),
    LAST_REFRESH_BASE_REFRESH_PARTITIONS((short)18, "last_refresh_base_refresh_partitions"),
    LAST_REFRESH_MV_REFRESH_PARTITIONS((short)19, "last_refresh_mv_refresh_partitions"),
    LAST_CHECK_TIME((short)20, "last_check_time"),
    CREATE_TIME((short)21, "create_time"),
    DDL_SQL((short)22, "ddl_sql"),
    TASK_ID((short)23, "task_id"),
    TASK_NAME((short)24, "task_name"),
    INACTIVE_REASON((short)25, "inactive_reason"),
    EXTRA_MESSAGE((short)26, "extra_message");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DATABASE_NAME
          return DATABASE_NAME;
        case 3: // NAME
          return NAME;
        case 4: // REFRESH_TYPE
          return REFRESH_TYPE;
        case 5: // IS_ACTIVE
          return IS_ACTIVE;
        case 6: // LAST_REFRESH_START_TIME
          return LAST_REFRESH_START_TIME;
        case 7: // LAST_REFRESH_FINISHED_TIME
          return LAST_REFRESH_FINISHED_TIME;
        case 8: // LAST_REFRESH_DURATION
          return LAST_REFRESH_DURATION;
        case 9: // LAST_REFRESH_STATE
          return LAST_REFRESH_STATE;
        case 10: // LAST_REFRESH_ERROR_CODE
          return LAST_REFRESH_ERROR_CODE;
        case 11: // LAST_REFRESH_ERROR_MESSAGE
          return LAST_REFRESH_ERROR_MESSAGE;
        case 12: // TEXT
          return TEXT;
        case 13: // ROWS
          return ROWS;
        case 14: // PARTITION_TYPE
          return PARTITION_TYPE;
        case 15: // LAST_REFRESH_FORCE_REFRESH
          return LAST_REFRESH_FORCE_REFRESH;
        case 16: // LAST_REFRESH_START_PARTITION
          return LAST_REFRESH_START_PARTITION;
        case 17: // LAST_REFRESH_END_PARTITION
          return LAST_REFRESH_END_PARTITION;
        case 18: // LAST_REFRESH_BASE_REFRESH_PARTITIONS
          return LAST_REFRESH_BASE_REFRESH_PARTITIONS;
        case 19: // LAST_REFRESH_MV_REFRESH_PARTITIONS
          return LAST_REFRESH_MV_REFRESH_PARTITIONS;
        case 20: // LAST_CHECK_TIME
          return LAST_CHECK_TIME;
        case 21: // CREATE_TIME
          return CREATE_TIME;
        case 22: // DDL_SQL
          return DDL_SQL;
        case 23: // TASK_ID
          return TASK_ID;
        case 24: // TASK_NAME
          return TASK_NAME;
        case 25: // INACTIVE_REASON
          return INACTIVE_REASON;
        case 26: // EXTRA_MESSAGE
          return EXTRA_MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LAST_CHECK_TIME_ISSET_ID = 0;
  private static final int __CREATE_TIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.DATABASE_NAME,_Fields.NAME,_Fields.REFRESH_TYPE,_Fields.IS_ACTIVE,_Fields.LAST_REFRESH_START_TIME,_Fields.LAST_REFRESH_FINISHED_TIME,_Fields.LAST_REFRESH_DURATION,_Fields.LAST_REFRESH_STATE,_Fields.LAST_REFRESH_ERROR_CODE,_Fields.LAST_REFRESH_ERROR_MESSAGE,_Fields.TEXT,_Fields.ROWS,_Fields.PARTITION_TYPE,_Fields.LAST_REFRESH_FORCE_REFRESH,_Fields.LAST_REFRESH_START_PARTITION,_Fields.LAST_REFRESH_END_PARTITION,_Fields.LAST_REFRESH_BASE_REFRESH_PARTITIONS,_Fields.LAST_REFRESH_MV_REFRESH_PARTITIONS,_Fields.LAST_CHECK_TIME,_Fields.CREATE_TIME,_Fields.DDL_SQL,_Fields.TASK_ID,_Fields.TASK_NAME,_Fields.INACTIVE_REASON,_Fields.EXTRA_MESSAGE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATABASE_NAME, new org.apache.thrift.meta_data.FieldMetaData("database_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFRESH_TYPE, new org.apache.thrift.meta_data.FieldMetaData("refresh_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("is_active", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_REFRESH_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("last_refresh_start_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_REFRESH_FINISHED_TIME, new org.apache.thrift.meta_data.FieldMetaData("last_refresh_finished_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_REFRESH_DURATION, new org.apache.thrift.meta_data.FieldMetaData("last_refresh_duration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_REFRESH_STATE, new org.apache.thrift.meta_data.FieldMetaData("last_refresh_state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_REFRESH_ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("last_refresh_error_code", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_REFRESH_ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("last_refresh_error_message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("partition_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_REFRESH_FORCE_REFRESH, new org.apache.thrift.meta_data.FieldMetaData("last_refresh_force_refresh", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_REFRESH_START_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("last_refresh_start_partition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_REFRESH_END_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("last_refresh_end_partition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_REFRESH_BASE_REFRESH_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("last_refresh_base_refresh_partitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_REFRESH_MV_REFRESH_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("last_refresh_mv_refresh_partitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_CHECK_TIME, new org.apache.thrift.meta_data.FieldMetaData("last_check_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DDL_SQL, new org.apache.thrift.meta_data.FieldMetaData("ddl_sql", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("task_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_NAME, new org.apache.thrift.meta_data.FieldMetaData("task_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INACTIVE_REASON, new org.apache.thrift.meta_data.FieldMetaData("inactive_reason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTRA_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("extra_message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMaterializedViewStatus.class, metaDataMap);
  }

  public TMaterializedViewStatus() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMaterializedViewStatus(TMaterializedViewStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetDatabase_name()) {
      this.database_name = other.database_name;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetRefresh_type()) {
      this.refresh_type = other.refresh_type;
    }
    if (other.isSetIs_active()) {
      this.is_active = other.is_active;
    }
    if (other.isSetLast_refresh_start_time()) {
      this.last_refresh_start_time = other.last_refresh_start_time;
    }
    if (other.isSetLast_refresh_finished_time()) {
      this.last_refresh_finished_time = other.last_refresh_finished_time;
    }
    if (other.isSetLast_refresh_duration()) {
      this.last_refresh_duration = other.last_refresh_duration;
    }
    if (other.isSetLast_refresh_state()) {
      this.last_refresh_state = other.last_refresh_state;
    }
    if (other.isSetLast_refresh_error_code()) {
      this.last_refresh_error_code = other.last_refresh_error_code;
    }
    if (other.isSetLast_refresh_error_message()) {
      this.last_refresh_error_message = other.last_refresh_error_message;
    }
    if (other.isSetText()) {
      this.text = other.text;
    }
    if (other.isSetRows()) {
      this.rows = other.rows;
    }
    if (other.isSetPartition_type()) {
      this.partition_type = other.partition_type;
    }
    if (other.isSetLast_refresh_force_refresh()) {
      this.last_refresh_force_refresh = other.last_refresh_force_refresh;
    }
    if (other.isSetLast_refresh_start_partition()) {
      this.last_refresh_start_partition = other.last_refresh_start_partition;
    }
    if (other.isSetLast_refresh_end_partition()) {
      this.last_refresh_end_partition = other.last_refresh_end_partition;
    }
    if (other.isSetLast_refresh_base_refresh_partitions()) {
      this.last_refresh_base_refresh_partitions = other.last_refresh_base_refresh_partitions;
    }
    if (other.isSetLast_refresh_mv_refresh_partitions()) {
      this.last_refresh_mv_refresh_partitions = other.last_refresh_mv_refresh_partitions;
    }
    this.last_check_time = other.last_check_time;
    this.create_time = other.create_time;
    if (other.isSetDdl_sql()) {
      this.ddl_sql = other.ddl_sql;
    }
    if (other.isSetTask_id()) {
      this.task_id = other.task_id;
    }
    if (other.isSetTask_name()) {
      this.task_name = other.task_name;
    }
    if (other.isSetInactive_reason()) {
      this.inactive_reason = other.inactive_reason;
    }
    if (other.isSetExtra_message()) {
      this.extra_message = other.extra_message;
    }
  }

  @Override
  public TMaterializedViewStatus deepCopy() {
    return new TMaterializedViewStatus(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.database_name = null;
    this.name = null;
    this.refresh_type = null;
    this.is_active = null;
    this.last_refresh_start_time = null;
    this.last_refresh_finished_time = null;
    this.last_refresh_duration = null;
    this.last_refresh_state = null;
    this.last_refresh_error_code = null;
    this.last_refresh_error_message = null;
    this.text = null;
    this.rows = null;
    this.partition_type = null;
    this.last_refresh_force_refresh = null;
    this.last_refresh_start_partition = null;
    this.last_refresh_end_partition = null;
    this.last_refresh_base_refresh_partitions = null;
    this.last_refresh_mv_refresh_partitions = null;
    setLast_check_timeIsSet(false);
    this.last_check_time = 0;
    setCreate_timeIsSet(false);
    this.create_time = 0;
    this.ddl_sql = null;
    this.task_id = null;
    this.task_name = null;
    this.inactive_reason = null;
    this.extra_message = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getId() {
    return this.id;
  }

  public TMaterializedViewStatus setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDatabase_name() {
    return this.database_name;
  }

  public TMaterializedViewStatus setDatabase_name(@org.apache.thrift.annotation.Nullable java.lang.String database_name) {
    this.database_name = database_name;
    return this;
  }

  public void unsetDatabase_name() {
    this.database_name = null;
  }

  /** Returns true if field database_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabase_name() {
    return this.database_name != null;
  }

  public void setDatabase_nameIsSet(boolean value) {
    if (!value) {
      this.database_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public TMaterializedViewStatus setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRefresh_type() {
    return this.refresh_type;
  }

  public TMaterializedViewStatus setRefresh_type(@org.apache.thrift.annotation.Nullable java.lang.String refresh_type) {
    this.refresh_type = refresh_type;
    return this;
  }

  public void unsetRefresh_type() {
    this.refresh_type = null;
  }

  /** Returns true if field refresh_type is set (has been assigned a value) and false otherwise */
  public boolean isSetRefresh_type() {
    return this.refresh_type != null;
  }

  public void setRefresh_typeIsSet(boolean value) {
    if (!value) {
      this.refresh_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIs_active() {
    return this.is_active;
  }

  public TMaterializedViewStatus setIs_active(@org.apache.thrift.annotation.Nullable java.lang.String is_active) {
    this.is_active = is_active;
    return this;
  }

  public void unsetIs_active() {
    this.is_active = null;
  }

  /** Returns true if field is_active is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_active() {
    return this.is_active != null;
  }

  public void setIs_activeIsSet(boolean value) {
    if (!value) {
      this.is_active = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLast_refresh_start_time() {
    return this.last_refresh_start_time;
  }

  public TMaterializedViewStatus setLast_refresh_start_time(@org.apache.thrift.annotation.Nullable java.lang.String last_refresh_start_time) {
    this.last_refresh_start_time = last_refresh_start_time;
    return this;
  }

  public void unsetLast_refresh_start_time() {
    this.last_refresh_start_time = null;
  }

  /** Returns true if field last_refresh_start_time is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_refresh_start_time() {
    return this.last_refresh_start_time != null;
  }

  public void setLast_refresh_start_timeIsSet(boolean value) {
    if (!value) {
      this.last_refresh_start_time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLast_refresh_finished_time() {
    return this.last_refresh_finished_time;
  }

  public TMaterializedViewStatus setLast_refresh_finished_time(@org.apache.thrift.annotation.Nullable java.lang.String last_refresh_finished_time) {
    this.last_refresh_finished_time = last_refresh_finished_time;
    return this;
  }

  public void unsetLast_refresh_finished_time() {
    this.last_refresh_finished_time = null;
  }

  /** Returns true if field last_refresh_finished_time is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_refresh_finished_time() {
    return this.last_refresh_finished_time != null;
  }

  public void setLast_refresh_finished_timeIsSet(boolean value) {
    if (!value) {
      this.last_refresh_finished_time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLast_refresh_duration() {
    return this.last_refresh_duration;
  }

  public TMaterializedViewStatus setLast_refresh_duration(@org.apache.thrift.annotation.Nullable java.lang.String last_refresh_duration) {
    this.last_refresh_duration = last_refresh_duration;
    return this;
  }

  public void unsetLast_refresh_duration() {
    this.last_refresh_duration = null;
  }

  /** Returns true if field last_refresh_duration is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_refresh_duration() {
    return this.last_refresh_duration != null;
  }

  public void setLast_refresh_durationIsSet(boolean value) {
    if (!value) {
      this.last_refresh_duration = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLast_refresh_state() {
    return this.last_refresh_state;
  }

  public TMaterializedViewStatus setLast_refresh_state(@org.apache.thrift.annotation.Nullable java.lang.String last_refresh_state) {
    this.last_refresh_state = last_refresh_state;
    return this;
  }

  public void unsetLast_refresh_state() {
    this.last_refresh_state = null;
  }

  /** Returns true if field last_refresh_state is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_refresh_state() {
    return this.last_refresh_state != null;
  }

  public void setLast_refresh_stateIsSet(boolean value) {
    if (!value) {
      this.last_refresh_state = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLast_refresh_error_code() {
    return this.last_refresh_error_code;
  }

  public TMaterializedViewStatus setLast_refresh_error_code(@org.apache.thrift.annotation.Nullable java.lang.String last_refresh_error_code) {
    this.last_refresh_error_code = last_refresh_error_code;
    return this;
  }

  public void unsetLast_refresh_error_code() {
    this.last_refresh_error_code = null;
  }

  /** Returns true if field last_refresh_error_code is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_refresh_error_code() {
    return this.last_refresh_error_code != null;
  }

  public void setLast_refresh_error_codeIsSet(boolean value) {
    if (!value) {
      this.last_refresh_error_code = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLast_refresh_error_message() {
    return this.last_refresh_error_message;
  }

  public TMaterializedViewStatus setLast_refresh_error_message(@org.apache.thrift.annotation.Nullable java.lang.String last_refresh_error_message) {
    this.last_refresh_error_message = last_refresh_error_message;
    return this;
  }

  public void unsetLast_refresh_error_message() {
    this.last_refresh_error_message = null;
  }

  /** Returns true if field last_refresh_error_message is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_refresh_error_message() {
    return this.last_refresh_error_message != null;
  }

  public void setLast_refresh_error_messageIsSet(boolean value) {
    if (!value) {
      this.last_refresh_error_message = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getText() {
    return this.text;
  }

  public TMaterializedViewStatus setText(@org.apache.thrift.annotation.Nullable java.lang.String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRows() {
    return this.rows;
  }

  public TMaterializedViewStatus setRows(@org.apache.thrift.annotation.Nullable java.lang.String rows) {
    this.rows = rows;
    return this;
  }

  public void unsetRows() {
    this.rows = null;
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return this.rows != null;
  }

  public void setRowsIsSet(boolean value) {
    if (!value) {
      this.rows = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartition_type() {
    return this.partition_type;
  }

  public TMaterializedViewStatus setPartition_type(@org.apache.thrift.annotation.Nullable java.lang.String partition_type) {
    this.partition_type = partition_type;
    return this;
  }

  public void unsetPartition_type() {
    this.partition_type = null;
  }

  /** Returns true if field partition_type is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_type() {
    return this.partition_type != null;
  }

  public void setPartition_typeIsSet(boolean value) {
    if (!value) {
      this.partition_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLast_refresh_force_refresh() {
    return this.last_refresh_force_refresh;
  }

  public TMaterializedViewStatus setLast_refresh_force_refresh(@org.apache.thrift.annotation.Nullable java.lang.String last_refresh_force_refresh) {
    this.last_refresh_force_refresh = last_refresh_force_refresh;
    return this;
  }

  public void unsetLast_refresh_force_refresh() {
    this.last_refresh_force_refresh = null;
  }

  /** Returns true if field last_refresh_force_refresh is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_refresh_force_refresh() {
    return this.last_refresh_force_refresh != null;
  }

  public void setLast_refresh_force_refreshIsSet(boolean value) {
    if (!value) {
      this.last_refresh_force_refresh = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLast_refresh_start_partition() {
    return this.last_refresh_start_partition;
  }

  public TMaterializedViewStatus setLast_refresh_start_partition(@org.apache.thrift.annotation.Nullable java.lang.String last_refresh_start_partition) {
    this.last_refresh_start_partition = last_refresh_start_partition;
    return this;
  }

  public void unsetLast_refresh_start_partition() {
    this.last_refresh_start_partition = null;
  }

  /** Returns true if field last_refresh_start_partition is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_refresh_start_partition() {
    return this.last_refresh_start_partition != null;
  }

  public void setLast_refresh_start_partitionIsSet(boolean value) {
    if (!value) {
      this.last_refresh_start_partition = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLast_refresh_end_partition() {
    return this.last_refresh_end_partition;
  }

  public TMaterializedViewStatus setLast_refresh_end_partition(@org.apache.thrift.annotation.Nullable java.lang.String last_refresh_end_partition) {
    this.last_refresh_end_partition = last_refresh_end_partition;
    return this;
  }

  public void unsetLast_refresh_end_partition() {
    this.last_refresh_end_partition = null;
  }

  /** Returns true if field last_refresh_end_partition is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_refresh_end_partition() {
    return this.last_refresh_end_partition != null;
  }

  public void setLast_refresh_end_partitionIsSet(boolean value) {
    if (!value) {
      this.last_refresh_end_partition = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLast_refresh_base_refresh_partitions() {
    return this.last_refresh_base_refresh_partitions;
  }

  public TMaterializedViewStatus setLast_refresh_base_refresh_partitions(@org.apache.thrift.annotation.Nullable java.lang.String last_refresh_base_refresh_partitions) {
    this.last_refresh_base_refresh_partitions = last_refresh_base_refresh_partitions;
    return this;
  }

  public void unsetLast_refresh_base_refresh_partitions() {
    this.last_refresh_base_refresh_partitions = null;
  }

  /** Returns true if field last_refresh_base_refresh_partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_refresh_base_refresh_partitions() {
    return this.last_refresh_base_refresh_partitions != null;
  }

  public void setLast_refresh_base_refresh_partitionsIsSet(boolean value) {
    if (!value) {
      this.last_refresh_base_refresh_partitions = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLast_refresh_mv_refresh_partitions() {
    return this.last_refresh_mv_refresh_partitions;
  }

  public TMaterializedViewStatus setLast_refresh_mv_refresh_partitions(@org.apache.thrift.annotation.Nullable java.lang.String last_refresh_mv_refresh_partitions) {
    this.last_refresh_mv_refresh_partitions = last_refresh_mv_refresh_partitions;
    return this;
  }

  public void unsetLast_refresh_mv_refresh_partitions() {
    this.last_refresh_mv_refresh_partitions = null;
  }

  /** Returns true if field last_refresh_mv_refresh_partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_refresh_mv_refresh_partitions() {
    return this.last_refresh_mv_refresh_partitions != null;
  }

  public void setLast_refresh_mv_refresh_partitionsIsSet(boolean value) {
    if (!value) {
      this.last_refresh_mv_refresh_partitions = null;
    }
  }

  public long getLast_check_time() {
    return this.last_check_time;
  }

  public TMaterializedViewStatus setLast_check_time(long last_check_time) {
    this.last_check_time = last_check_time;
    setLast_check_timeIsSet(true);
    return this;
  }

  public void unsetLast_check_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAST_CHECK_TIME_ISSET_ID);
  }

  /** Returns true if field last_check_time is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_check_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAST_CHECK_TIME_ISSET_ID);
  }

  public void setLast_check_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAST_CHECK_TIME_ISSET_ID, value);
  }

  public long getCreate_time() {
    return this.create_time;
  }

  public TMaterializedViewStatus setCreate_time(long create_time) {
    this.create_time = create_time;
    setCreate_timeIsSet(true);
    return this;
  }

  public void unsetCreate_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  public void setCreate_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATE_TIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDdl_sql() {
    return this.ddl_sql;
  }

  public TMaterializedViewStatus setDdl_sql(@org.apache.thrift.annotation.Nullable java.lang.String ddl_sql) {
    this.ddl_sql = ddl_sql;
    return this;
  }

  public void unsetDdl_sql() {
    this.ddl_sql = null;
  }

  /** Returns true if field ddl_sql is set (has been assigned a value) and false otherwise */
  public boolean isSetDdl_sql() {
    return this.ddl_sql != null;
  }

  public void setDdl_sqlIsSet(boolean value) {
    if (!value) {
      this.ddl_sql = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTask_id() {
    return this.task_id;
  }

  public TMaterializedViewStatus setTask_id(@org.apache.thrift.annotation.Nullable java.lang.String task_id) {
    this.task_id = task_id;
    return this;
  }

  public void unsetTask_id() {
    this.task_id = null;
  }

  /** Returns true if field task_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_id() {
    return this.task_id != null;
  }

  public void setTask_idIsSet(boolean value) {
    if (!value) {
      this.task_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTask_name() {
    return this.task_name;
  }

  public TMaterializedViewStatus setTask_name(@org.apache.thrift.annotation.Nullable java.lang.String task_name) {
    this.task_name = task_name;
    return this;
  }

  public void unsetTask_name() {
    this.task_name = null;
  }

  /** Returns true if field task_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_name() {
    return this.task_name != null;
  }

  public void setTask_nameIsSet(boolean value) {
    if (!value) {
      this.task_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getInactive_reason() {
    return this.inactive_reason;
  }

  public TMaterializedViewStatus setInactive_reason(@org.apache.thrift.annotation.Nullable java.lang.String inactive_reason) {
    this.inactive_reason = inactive_reason;
    return this;
  }

  public void unsetInactive_reason() {
    this.inactive_reason = null;
  }

  /** Returns true if field inactive_reason is set (has been assigned a value) and false otherwise */
  public boolean isSetInactive_reason() {
    return this.inactive_reason != null;
  }

  public void setInactive_reasonIsSet(boolean value) {
    if (!value) {
      this.inactive_reason = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getExtra_message() {
    return this.extra_message;
  }

  public TMaterializedViewStatus setExtra_message(@org.apache.thrift.annotation.Nullable java.lang.String extra_message) {
    this.extra_message = extra_message;
    return this;
  }

  public void unsetExtra_message() {
    this.extra_message = null;
  }

  /** Returns true if field extra_message is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra_message() {
    return this.extra_message != null;
  }

  public void setExtra_messageIsSet(boolean value) {
    if (!value) {
      this.extra_message = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case DATABASE_NAME:
      if (value == null) {
        unsetDatabase_name();
      } else {
        setDatabase_name((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case REFRESH_TYPE:
      if (value == null) {
        unsetRefresh_type();
      } else {
        setRefresh_type((java.lang.String)value);
      }
      break;

    case IS_ACTIVE:
      if (value == null) {
        unsetIs_active();
      } else {
        setIs_active((java.lang.String)value);
      }
      break;

    case LAST_REFRESH_START_TIME:
      if (value == null) {
        unsetLast_refresh_start_time();
      } else {
        setLast_refresh_start_time((java.lang.String)value);
      }
      break;

    case LAST_REFRESH_FINISHED_TIME:
      if (value == null) {
        unsetLast_refresh_finished_time();
      } else {
        setLast_refresh_finished_time((java.lang.String)value);
      }
      break;

    case LAST_REFRESH_DURATION:
      if (value == null) {
        unsetLast_refresh_duration();
      } else {
        setLast_refresh_duration((java.lang.String)value);
      }
      break;

    case LAST_REFRESH_STATE:
      if (value == null) {
        unsetLast_refresh_state();
      } else {
        setLast_refresh_state((java.lang.String)value);
      }
      break;

    case LAST_REFRESH_ERROR_CODE:
      if (value == null) {
        unsetLast_refresh_error_code();
      } else {
        setLast_refresh_error_code((java.lang.String)value);
      }
      break;

    case LAST_REFRESH_ERROR_MESSAGE:
      if (value == null) {
        unsetLast_refresh_error_message();
      } else {
        setLast_refresh_error_message((java.lang.String)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((java.lang.String)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((java.lang.String)value);
      }
      break;

    case PARTITION_TYPE:
      if (value == null) {
        unsetPartition_type();
      } else {
        setPartition_type((java.lang.String)value);
      }
      break;

    case LAST_REFRESH_FORCE_REFRESH:
      if (value == null) {
        unsetLast_refresh_force_refresh();
      } else {
        setLast_refresh_force_refresh((java.lang.String)value);
      }
      break;

    case LAST_REFRESH_START_PARTITION:
      if (value == null) {
        unsetLast_refresh_start_partition();
      } else {
        setLast_refresh_start_partition((java.lang.String)value);
      }
      break;

    case LAST_REFRESH_END_PARTITION:
      if (value == null) {
        unsetLast_refresh_end_partition();
      } else {
        setLast_refresh_end_partition((java.lang.String)value);
      }
      break;

    case LAST_REFRESH_BASE_REFRESH_PARTITIONS:
      if (value == null) {
        unsetLast_refresh_base_refresh_partitions();
      } else {
        setLast_refresh_base_refresh_partitions((java.lang.String)value);
      }
      break;

    case LAST_REFRESH_MV_REFRESH_PARTITIONS:
      if (value == null) {
        unsetLast_refresh_mv_refresh_partitions();
      } else {
        setLast_refresh_mv_refresh_partitions((java.lang.String)value);
      }
      break;

    case LAST_CHECK_TIME:
      if (value == null) {
        unsetLast_check_time();
      } else {
        setLast_check_time((java.lang.Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((java.lang.Long)value);
      }
      break;

    case DDL_SQL:
      if (value == null) {
        unsetDdl_sql();
      } else {
        setDdl_sql((java.lang.String)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTask_id();
      } else {
        setTask_id((java.lang.String)value);
      }
      break;

    case TASK_NAME:
      if (value == null) {
        unsetTask_name();
      } else {
        setTask_name((java.lang.String)value);
      }
      break;

    case INACTIVE_REASON:
      if (value == null) {
        unsetInactive_reason();
      } else {
        setInactive_reason((java.lang.String)value);
      }
      break;

    case EXTRA_MESSAGE:
      if (value == null) {
        unsetExtra_message();
      } else {
        setExtra_message((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case DATABASE_NAME:
      return getDatabase_name();

    case NAME:
      return getName();

    case REFRESH_TYPE:
      return getRefresh_type();

    case IS_ACTIVE:
      return getIs_active();

    case LAST_REFRESH_START_TIME:
      return getLast_refresh_start_time();

    case LAST_REFRESH_FINISHED_TIME:
      return getLast_refresh_finished_time();

    case LAST_REFRESH_DURATION:
      return getLast_refresh_duration();

    case LAST_REFRESH_STATE:
      return getLast_refresh_state();

    case LAST_REFRESH_ERROR_CODE:
      return getLast_refresh_error_code();

    case LAST_REFRESH_ERROR_MESSAGE:
      return getLast_refresh_error_message();

    case TEXT:
      return getText();

    case ROWS:
      return getRows();

    case PARTITION_TYPE:
      return getPartition_type();

    case LAST_REFRESH_FORCE_REFRESH:
      return getLast_refresh_force_refresh();

    case LAST_REFRESH_START_PARTITION:
      return getLast_refresh_start_partition();

    case LAST_REFRESH_END_PARTITION:
      return getLast_refresh_end_partition();

    case LAST_REFRESH_BASE_REFRESH_PARTITIONS:
      return getLast_refresh_base_refresh_partitions();

    case LAST_REFRESH_MV_REFRESH_PARTITIONS:
      return getLast_refresh_mv_refresh_partitions();

    case LAST_CHECK_TIME:
      return getLast_check_time();

    case CREATE_TIME:
      return getCreate_time();

    case DDL_SQL:
      return getDdl_sql();

    case TASK_ID:
      return getTask_id();

    case TASK_NAME:
      return getTask_name();

    case INACTIVE_REASON:
      return getInactive_reason();

    case EXTRA_MESSAGE:
      return getExtra_message();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DATABASE_NAME:
      return isSetDatabase_name();
    case NAME:
      return isSetName();
    case REFRESH_TYPE:
      return isSetRefresh_type();
    case IS_ACTIVE:
      return isSetIs_active();
    case LAST_REFRESH_START_TIME:
      return isSetLast_refresh_start_time();
    case LAST_REFRESH_FINISHED_TIME:
      return isSetLast_refresh_finished_time();
    case LAST_REFRESH_DURATION:
      return isSetLast_refresh_duration();
    case LAST_REFRESH_STATE:
      return isSetLast_refresh_state();
    case LAST_REFRESH_ERROR_CODE:
      return isSetLast_refresh_error_code();
    case LAST_REFRESH_ERROR_MESSAGE:
      return isSetLast_refresh_error_message();
    case TEXT:
      return isSetText();
    case ROWS:
      return isSetRows();
    case PARTITION_TYPE:
      return isSetPartition_type();
    case LAST_REFRESH_FORCE_REFRESH:
      return isSetLast_refresh_force_refresh();
    case LAST_REFRESH_START_PARTITION:
      return isSetLast_refresh_start_partition();
    case LAST_REFRESH_END_PARTITION:
      return isSetLast_refresh_end_partition();
    case LAST_REFRESH_BASE_REFRESH_PARTITIONS:
      return isSetLast_refresh_base_refresh_partitions();
    case LAST_REFRESH_MV_REFRESH_PARTITIONS:
      return isSetLast_refresh_mv_refresh_partitions();
    case LAST_CHECK_TIME:
      return isSetLast_check_time();
    case CREATE_TIME:
      return isSetCreate_time();
    case DDL_SQL:
      return isSetDdl_sql();
    case TASK_ID:
      return isSetTask_id();
    case TASK_NAME:
      return isSetTask_name();
    case INACTIVE_REASON:
      return isSetInactive_reason();
    case EXTRA_MESSAGE:
      return isSetExtra_message();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TMaterializedViewStatus)
      return this.equals((TMaterializedViewStatus)that);
    return false;
  }

  public boolean equals(TMaterializedViewStatus that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_database_name = true && this.isSetDatabase_name();
    boolean that_present_database_name = true && that.isSetDatabase_name();
    if (this_present_database_name || that_present_database_name) {
      if (!(this_present_database_name && that_present_database_name))
        return false;
      if (!this.database_name.equals(that.database_name))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_refresh_type = true && this.isSetRefresh_type();
    boolean that_present_refresh_type = true && that.isSetRefresh_type();
    if (this_present_refresh_type || that_present_refresh_type) {
      if (!(this_present_refresh_type && that_present_refresh_type))
        return false;
      if (!this.refresh_type.equals(that.refresh_type))
        return false;
    }

    boolean this_present_is_active = true && this.isSetIs_active();
    boolean that_present_is_active = true && that.isSetIs_active();
    if (this_present_is_active || that_present_is_active) {
      if (!(this_present_is_active && that_present_is_active))
        return false;
      if (!this.is_active.equals(that.is_active))
        return false;
    }

    boolean this_present_last_refresh_start_time = true && this.isSetLast_refresh_start_time();
    boolean that_present_last_refresh_start_time = true && that.isSetLast_refresh_start_time();
    if (this_present_last_refresh_start_time || that_present_last_refresh_start_time) {
      if (!(this_present_last_refresh_start_time && that_present_last_refresh_start_time))
        return false;
      if (!this.last_refresh_start_time.equals(that.last_refresh_start_time))
        return false;
    }

    boolean this_present_last_refresh_finished_time = true && this.isSetLast_refresh_finished_time();
    boolean that_present_last_refresh_finished_time = true && that.isSetLast_refresh_finished_time();
    if (this_present_last_refresh_finished_time || that_present_last_refresh_finished_time) {
      if (!(this_present_last_refresh_finished_time && that_present_last_refresh_finished_time))
        return false;
      if (!this.last_refresh_finished_time.equals(that.last_refresh_finished_time))
        return false;
    }

    boolean this_present_last_refresh_duration = true && this.isSetLast_refresh_duration();
    boolean that_present_last_refresh_duration = true && that.isSetLast_refresh_duration();
    if (this_present_last_refresh_duration || that_present_last_refresh_duration) {
      if (!(this_present_last_refresh_duration && that_present_last_refresh_duration))
        return false;
      if (!this.last_refresh_duration.equals(that.last_refresh_duration))
        return false;
    }

    boolean this_present_last_refresh_state = true && this.isSetLast_refresh_state();
    boolean that_present_last_refresh_state = true && that.isSetLast_refresh_state();
    if (this_present_last_refresh_state || that_present_last_refresh_state) {
      if (!(this_present_last_refresh_state && that_present_last_refresh_state))
        return false;
      if (!this.last_refresh_state.equals(that.last_refresh_state))
        return false;
    }

    boolean this_present_last_refresh_error_code = true && this.isSetLast_refresh_error_code();
    boolean that_present_last_refresh_error_code = true && that.isSetLast_refresh_error_code();
    if (this_present_last_refresh_error_code || that_present_last_refresh_error_code) {
      if (!(this_present_last_refresh_error_code && that_present_last_refresh_error_code))
        return false;
      if (!this.last_refresh_error_code.equals(that.last_refresh_error_code))
        return false;
    }

    boolean this_present_last_refresh_error_message = true && this.isSetLast_refresh_error_message();
    boolean that_present_last_refresh_error_message = true && that.isSetLast_refresh_error_message();
    if (this_present_last_refresh_error_message || that_present_last_refresh_error_message) {
      if (!(this_present_last_refresh_error_message && that_present_last_refresh_error_message))
        return false;
      if (!this.last_refresh_error_message.equals(that.last_refresh_error_message))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_rows = true && this.isSetRows();
    boolean that_present_rows = true && that.isSetRows();
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (!this.rows.equals(that.rows))
        return false;
    }

    boolean this_present_partition_type = true && this.isSetPartition_type();
    boolean that_present_partition_type = true && that.isSetPartition_type();
    if (this_present_partition_type || that_present_partition_type) {
      if (!(this_present_partition_type && that_present_partition_type))
        return false;
      if (!this.partition_type.equals(that.partition_type))
        return false;
    }

    boolean this_present_last_refresh_force_refresh = true && this.isSetLast_refresh_force_refresh();
    boolean that_present_last_refresh_force_refresh = true && that.isSetLast_refresh_force_refresh();
    if (this_present_last_refresh_force_refresh || that_present_last_refresh_force_refresh) {
      if (!(this_present_last_refresh_force_refresh && that_present_last_refresh_force_refresh))
        return false;
      if (!this.last_refresh_force_refresh.equals(that.last_refresh_force_refresh))
        return false;
    }

    boolean this_present_last_refresh_start_partition = true && this.isSetLast_refresh_start_partition();
    boolean that_present_last_refresh_start_partition = true && that.isSetLast_refresh_start_partition();
    if (this_present_last_refresh_start_partition || that_present_last_refresh_start_partition) {
      if (!(this_present_last_refresh_start_partition && that_present_last_refresh_start_partition))
        return false;
      if (!this.last_refresh_start_partition.equals(that.last_refresh_start_partition))
        return false;
    }

    boolean this_present_last_refresh_end_partition = true && this.isSetLast_refresh_end_partition();
    boolean that_present_last_refresh_end_partition = true && that.isSetLast_refresh_end_partition();
    if (this_present_last_refresh_end_partition || that_present_last_refresh_end_partition) {
      if (!(this_present_last_refresh_end_partition && that_present_last_refresh_end_partition))
        return false;
      if (!this.last_refresh_end_partition.equals(that.last_refresh_end_partition))
        return false;
    }

    boolean this_present_last_refresh_base_refresh_partitions = true && this.isSetLast_refresh_base_refresh_partitions();
    boolean that_present_last_refresh_base_refresh_partitions = true && that.isSetLast_refresh_base_refresh_partitions();
    if (this_present_last_refresh_base_refresh_partitions || that_present_last_refresh_base_refresh_partitions) {
      if (!(this_present_last_refresh_base_refresh_partitions && that_present_last_refresh_base_refresh_partitions))
        return false;
      if (!this.last_refresh_base_refresh_partitions.equals(that.last_refresh_base_refresh_partitions))
        return false;
    }

    boolean this_present_last_refresh_mv_refresh_partitions = true && this.isSetLast_refresh_mv_refresh_partitions();
    boolean that_present_last_refresh_mv_refresh_partitions = true && that.isSetLast_refresh_mv_refresh_partitions();
    if (this_present_last_refresh_mv_refresh_partitions || that_present_last_refresh_mv_refresh_partitions) {
      if (!(this_present_last_refresh_mv_refresh_partitions && that_present_last_refresh_mv_refresh_partitions))
        return false;
      if (!this.last_refresh_mv_refresh_partitions.equals(that.last_refresh_mv_refresh_partitions))
        return false;
    }

    boolean this_present_last_check_time = true && this.isSetLast_check_time();
    boolean that_present_last_check_time = true && that.isSetLast_check_time();
    if (this_present_last_check_time || that_present_last_check_time) {
      if (!(this_present_last_check_time && that_present_last_check_time))
        return false;
      if (this.last_check_time != that.last_check_time)
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (this.create_time != that.create_time)
        return false;
    }

    boolean this_present_ddl_sql = true && this.isSetDdl_sql();
    boolean that_present_ddl_sql = true && that.isSetDdl_sql();
    if (this_present_ddl_sql || that_present_ddl_sql) {
      if (!(this_present_ddl_sql && that_present_ddl_sql))
        return false;
      if (!this.ddl_sql.equals(that.ddl_sql))
        return false;
    }

    boolean this_present_task_id = true && this.isSetTask_id();
    boolean that_present_task_id = true && that.isSetTask_id();
    if (this_present_task_id || that_present_task_id) {
      if (!(this_present_task_id && that_present_task_id))
        return false;
      if (!this.task_id.equals(that.task_id))
        return false;
    }

    boolean this_present_task_name = true && this.isSetTask_name();
    boolean that_present_task_name = true && that.isSetTask_name();
    if (this_present_task_name || that_present_task_name) {
      if (!(this_present_task_name && that_present_task_name))
        return false;
      if (!this.task_name.equals(that.task_name))
        return false;
    }

    boolean this_present_inactive_reason = true && this.isSetInactive_reason();
    boolean that_present_inactive_reason = true && that.isSetInactive_reason();
    if (this_present_inactive_reason || that_present_inactive_reason) {
      if (!(this_present_inactive_reason && that_present_inactive_reason))
        return false;
      if (!this.inactive_reason.equals(that.inactive_reason))
        return false;
    }

    boolean this_present_extra_message = true && this.isSetExtra_message();
    boolean that_present_extra_message = true && that.isSetExtra_message();
    if (this_present_extra_message || that_present_extra_message) {
      if (!(this_present_extra_message && that_present_extra_message))
        return false;
      if (!this.extra_message.equals(that.extra_message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatabase_name()) ? 131071 : 524287);
    if (isSetDatabase_name())
      hashCode = hashCode * 8191 + database_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetRefresh_type()) ? 131071 : 524287);
    if (isSetRefresh_type())
      hashCode = hashCode * 8191 + refresh_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_active()) ? 131071 : 524287);
    if (isSetIs_active())
      hashCode = hashCode * 8191 + is_active.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_refresh_start_time()) ? 131071 : 524287);
    if (isSetLast_refresh_start_time())
      hashCode = hashCode * 8191 + last_refresh_start_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_refresh_finished_time()) ? 131071 : 524287);
    if (isSetLast_refresh_finished_time())
      hashCode = hashCode * 8191 + last_refresh_finished_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_refresh_duration()) ? 131071 : 524287);
    if (isSetLast_refresh_duration())
      hashCode = hashCode * 8191 + last_refresh_duration.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_refresh_state()) ? 131071 : 524287);
    if (isSetLast_refresh_state())
      hashCode = hashCode * 8191 + last_refresh_state.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_refresh_error_code()) ? 131071 : 524287);
    if (isSetLast_refresh_error_code())
      hashCode = hashCode * 8191 + last_refresh_error_code.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_refresh_error_message()) ? 131071 : 524287);
    if (isSetLast_refresh_error_message())
      hashCode = hashCode * 8191 + last_refresh_error_message.hashCode();

    hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
    if (isSetText())
      hashCode = hashCode * 8191 + text.hashCode();

    hashCode = hashCode * 8191 + ((isSetRows()) ? 131071 : 524287);
    if (isSetRows())
      hashCode = hashCode * 8191 + rows.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_type()) ? 131071 : 524287);
    if (isSetPartition_type())
      hashCode = hashCode * 8191 + partition_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_refresh_force_refresh()) ? 131071 : 524287);
    if (isSetLast_refresh_force_refresh())
      hashCode = hashCode * 8191 + last_refresh_force_refresh.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_refresh_start_partition()) ? 131071 : 524287);
    if (isSetLast_refresh_start_partition())
      hashCode = hashCode * 8191 + last_refresh_start_partition.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_refresh_end_partition()) ? 131071 : 524287);
    if (isSetLast_refresh_end_partition())
      hashCode = hashCode * 8191 + last_refresh_end_partition.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_refresh_base_refresh_partitions()) ? 131071 : 524287);
    if (isSetLast_refresh_base_refresh_partitions())
      hashCode = hashCode * 8191 + last_refresh_base_refresh_partitions.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_refresh_mv_refresh_partitions()) ? 131071 : 524287);
    if (isSetLast_refresh_mv_refresh_partitions())
      hashCode = hashCode * 8191 + last_refresh_mv_refresh_partitions.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_check_time()) ? 131071 : 524287);
    if (isSetLast_check_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(last_check_time);

    hashCode = hashCode * 8191 + ((isSetCreate_time()) ? 131071 : 524287);
    if (isSetCreate_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(create_time);

    hashCode = hashCode * 8191 + ((isSetDdl_sql()) ? 131071 : 524287);
    if (isSetDdl_sql())
      hashCode = hashCode * 8191 + ddl_sql.hashCode();

    hashCode = hashCode * 8191 + ((isSetTask_id()) ? 131071 : 524287);
    if (isSetTask_id())
      hashCode = hashCode * 8191 + task_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetTask_name()) ? 131071 : 524287);
    if (isSetTask_name())
      hashCode = hashCode * 8191 + task_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetInactive_reason()) ? 131071 : 524287);
    if (isSetInactive_reason())
      hashCode = hashCode * 8191 + inactive_reason.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtra_message()) ? 131071 : 524287);
    if (isSetExtra_message())
      hashCode = hashCode * 8191 + extra_message.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TMaterializedViewStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDatabase_name(), other.isSetDatabase_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabase_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database_name, other.database_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRefresh_type(), other.isSetRefresh_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefresh_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refresh_type, other.refresh_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_active(), other.isSetIs_active());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_active()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_active, other.is_active);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_refresh_start_time(), other.isSetLast_refresh_start_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_refresh_start_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_refresh_start_time, other.last_refresh_start_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_refresh_finished_time(), other.isSetLast_refresh_finished_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_refresh_finished_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_refresh_finished_time, other.last_refresh_finished_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_refresh_duration(), other.isSetLast_refresh_duration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_refresh_duration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_refresh_duration, other.last_refresh_duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_refresh_state(), other.isSetLast_refresh_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_refresh_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_refresh_state, other.last_refresh_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_refresh_error_code(), other.isSetLast_refresh_error_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_refresh_error_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_refresh_error_code, other.last_refresh_error_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_refresh_error_message(), other.isSetLast_refresh_error_message());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_refresh_error_message()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_refresh_error_message, other.last_refresh_error_message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetText(), other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRows(), other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_type(), other.isSetPartition_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_type, other.partition_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_refresh_force_refresh(), other.isSetLast_refresh_force_refresh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_refresh_force_refresh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_refresh_force_refresh, other.last_refresh_force_refresh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_refresh_start_partition(), other.isSetLast_refresh_start_partition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_refresh_start_partition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_refresh_start_partition, other.last_refresh_start_partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_refresh_end_partition(), other.isSetLast_refresh_end_partition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_refresh_end_partition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_refresh_end_partition, other.last_refresh_end_partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_refresh_base_refresh_partitions(), other.isSetLast_refresh_base_refresh_partitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_refresh_base_refresh_partitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_refresh_base_refresh_partitions, other.last_refresh_base_refresh_partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_refresh_mv_refresh_partitions(), other.isSetLast_refresh_mv_refresh_partitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_refresh_mv_refresh_partitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_refresh_mv_refresh_partitions, other.last_refresh_mv_refresh_partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_check_time(), other.isSetLast_check_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_check_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_check_time, other.last_check_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreate_time(), other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDdl_sql(), other.isSetDdl_sql());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDdl_sql()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ddl_sql, other.ddl_sql);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTask_id(), other.isSetTask_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_id, other.task_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTask_name(), other.isSetTask_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_name, other.task_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInactive_reason(), other.isSetInactive_reason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInactive_reason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inactive_reason, other.inactive_reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtra_message(), other.isSetExtra_message());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra_message()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra_message, other.extra_message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMaterializedViewStatus(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetDatabase_name()) {
      if (!first) sb.append(", ");
      sb.append("database_name:");
      if (this.database_name == null) {
        sb.append("null");
      } else {
        sb.append(this.database_name);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetRefresh_type()) {
      if (!first) sb.append(", ");
      sb.append("refresh_type:");
      if (this.refresh_type == null) {
        sb.append("null");
      } else {
        sb.append(this.refresh_type);
      }
      first = false;
    }
    if (isSetIs_active()) {
      if (!first) sb.append(", ");
      sb.append("is_active:");
      if (this.is_active == null) {
        sb.append("null");
      } else {
        sb.append(this.is_active);
      }
      first = false;
    }
    if (isSetLast_refresh_start_time()) {
      if (!first) sb.append(", ");
      sb.append("last_refresh_start_time:");
      if (this.last_refresh_start_time == null) {
        sb.append("null");
      } else {
        sb.append(this.last_refresh_start_time);
      }
      first = false;
    }
    if (isSetLast_refresh_finished_time()) {
      if (!first) sb.append(", ");
      sb.append("last_refresh_finished_time:");
      if (this.last_refresh_finished_time == null) {
        sb.append("null");
      } else {
        sb.append(this.last_refresh_finished_time);
      }
      first = false;
    }
    if (isSetLast_refresh_duration()) {
      if (!first) sb.append(", ");
      sb.append("last_refresh_duration:");
      if (this.last_refresh_duration == null) {
        sb.append("null");
      } else {
        sb.append(this.last_refresh_duration);
      }
      first = false;
    }
    if (isSetLast_refresh_state()) {
      if (!first) sb.append(", ");
      sb.append("last_refresh_state:");
      if (this.last_refresh_state == null) {
        sb.append("null");
      } else {
        sb.append(this.last_refresh_state);
      }
      first = false;
    }
    if (isSetLast_refresh_error_code()) {
      if (!first) sb.append(", ");
      sb.append("last_refresh_error_code:");
      if (this.last_refresh_error_code == null) {
        sb.append("null");
      } else {
        sb.append(this.last_refresh_error_code);
      }
      first = false;
    }
    if (isSetLast_refresh_error_message()) {
      if (!first) sb.append(", ");
      sb.append("last_refresh_error_message:");
      if (this.last_refresh_error_message == null) {
        sb.append("null");
      } else {
        sb.append(this.last_refresh_error_message);
      }
      first = false;
    }
    if (isSetText()) {
      if (!first) sb.append(", ");
      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
    }
    if (isSetRows()) {
      if (!first) sb.append(", ");
      sb.append("rows:");
      if (this.rows == null) {
        sb.append("null");
      } else {
        sb.append(this.rows);
      }
      first = false;
    }
    if (isSetPartition_type()) {
      if (!first) sb.append(", ");
      sb.append("partition_type:");
      if (this.partition_type == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_type);
      }
      first = false;
    }
    if (isSetLast_refresh_force_refresh()) {
      if (!first) sb.append(", ");
      sb.append("last_refresh_force_refresh:");
      if (this.last_refresh_force_refresh == null) {
        sb.append("null");
      } else {
        sb.append(this.last_refresh_force_refresh);
      }
      first = false;
    }
    if (isSetLast_refresh_start_partition()) {
      if (!first) sb.append(", ");
      sb.append("last_refresh_start_partition:");
      if (this.last_refresh_start_partition == null) {
        sb.append("null");
      } else {
        sb.append(this.last_refresh_start_partition);
      }
      first = false;
    }
    if (isSetLast_refresh_end_partition()) {
      if (!first) sb.append(", ");
      sb.append("last_refresh_end_partition:");
      if (this.last_refresh_end_partition == null) {
        sb.append("null");
      } else {
        sb.append(this.last_refresh_end_partition);
      }
      first = false;
    }
    if (isSetLast_refresh_base_refresh_partitions()) {
      if (!first) sb.append(", ");
      sb.append("last_refresh_base_refresh_partitions:");
      if (this.last_refresh_base_refresh_partitions == null) {
        sb.append("null");
      } else {
        sb.append(this.last_refresh_base_refresh_partitions);
      }
      first = false;
    }
    if (isSetLast_refresh_mv_refresh_partitions()) {
      if (!first) sb.append(", ");
      sb.append("last_refresh_mv_refresh_partitions:");
      if (this.last_refresh_mv_refresh_partitions == null) {
        sb.append("null");
      } else {
        sb.append(this.last_refresh_mv_refresh_partitions);
      }
      first = false;
    }
    if (isSetLast_check_time()) {
      if (!first) sb.append(", ");
      sb.append("last_check_time:");
      sb.append(this.last_check_time);
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      sb.append(this.create_time);
      first = false;
    }
    if (isSetDdl_sql()) {
      if (!first) sb.append(", ");
      sb.append("ddl_sql:");
      if (this.ddl_sql == null) {
        sb.append("null");
      } else {
        sb.append(this.ddl_sql);
      }
      first = false;
    }
    if (isSetTask_id()) {
      if (!first) sb.append(", ");
      sb.append("task_id:");
      if (this.task_id == null) {
        sb.append("null");
      } else {
        sb.append(this.task_id);
      }
      first = false;
    }
    if (isSetTask_name()) {
      if (!first) sb.append(", ");
      sb.append("task_name:");
      if (this.task_name == null) {
        sb.append("null");
      } else {
        sb.append(this.task_name);
      }
      first = false;
    }
    if (isSetInactive_reason()) {
      if (!first) sb.append(", ");
      sb.append("inactive_reason:");
      if (this.inactive_reason == null) {
        sb.append("null");
      } else {
        sb.append(this.inactive_reason);
      }
      first = false;
    }
    if (isSetExtra_message()) {
      if (!first) sb.append(", ");
      sb.append("extra_message:");
      if (this.extra_message == null) {
        sb.append("null");
      } else {
        sb.append(this.extra_message);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMaterializedViewStatusStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMaterializedViewStatusStandardScheme getScheme() {
      return new TMaterializedViewStatusStandardScheme();
    }
  }

  private static class TMaterializedViewStatusStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMaterializedViewStatus> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TMaterializedViewStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATABASE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.database_name = iprot.readString();
              struct.setDatabase_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REFRESH_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refresh_type = iprot.readString();
              struct.setRefresh_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.is_active = iprot.readString();
              struct.setIs_activeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_REFRESH_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_refresh_start_time = iprot.readString();
              struct.setLast_refresh_start_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_REFRESH_FINISHED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_refresh_finished_time = iprot.readString();
              struct.setLast_refresh_finished_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_REFRESH_DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_refresh_duration = iprot.readString();
              struct.setLast_refresh_durationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_REFRESH_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_refresh_state = iprot.readString();
              struct.setLast_refresh_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LAST_REFRESH_ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_refresh_error_code = iprot.readString();
              struct.setLast_refresh_error_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAST_REFRESH_ERROR_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_refresh_error_message = iprot.readString();
              struct.setLast_refresh_error_messageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rows = iprot.readString();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PARTITION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partition_type = iprot.readString();
              struct.setPartition_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LAST_REFRESH_FORCE_REFRESH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_refresh_force_refresh = iprot.readString();
              struct.setLast_refresh_force_refreshIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LAST_REFRESH_START_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_refresh_start_partition = iprot.readString();
              struct.setLast_refresh_start_partitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LAST_REFRESH_END_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_refresh_end_partition = iprot.readString();
              struct.setLast_refresh_end_partitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LAST_REFRESH_BASE_REFRESH_PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_refresh_base_refresh_partitions = iprot.readString();
              struct.setLast_refresh_base_refresh_partitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LAST_REFRESH_MV_REFRESH_PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_refresh_mv_refresh_partitions = iprot.readString();
              struct.setLast_refresh_mv_refresh_partitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LAST_CHECK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.last_check_time = iprot.readI64();
              struct.setLast_check_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.create_time = iprot.readI64();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // DDL_SQL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ddl_sql = iprot.readString();
              struct.setDdl_sqlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.task_id = iprot.readString();
              struct.setTask_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TASK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.task_name = iprot.readString();
              struct.setTask_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // INACTIVE_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inactive_reason = iprot.readString();
              struct.setInactive_reasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // EXTRA_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extra_message = iprot.readString();
              struct.setExtra_messageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TMaterializedViewStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.database_name != null) {
        if (struct.isSetDatabase_name()) {
          oprot.writeFieldBegin(DATABASE_NAME_FIELD_DESC);
          oprot.writeString(struct.database_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.refresh_type != null) {
        if (struct.isSetRefresh_type()) {
          oprot.writeFieldBegin(REFRESH_TYPE_FIELD_DESC);
          oprot.writeString(struct.refresh_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.is_active != null) {
        if (struct.isSetIs_active()) {
          oprot.writeFieldBegin(IS_ACTIVE_FIELD_DESC);
          oprot.writeString(struct.is_active);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_refresh_start_time != null) {
        if (struct.isSetLast_refresh_start_time()) {
          oprot.writeFieldBegin(LAST_REFRESH_START_TIME_FIELD_DESC);
          oprot.writeString(struct.last_refresh_start_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_refresh_finished_time != null) {
        if (struct.isSetLast_refresh_finished_time()) {
          oprot.writeFieldBegin(LAST_REFRESH_FINISHED_TIME_FIELD_DESC);
          oprot.writeString(struct.last_refresh_finished_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_refresh_duration != null) {
        if (struct.isSetLast_refresh_duration()) {
          oprot.writeFieldBegin(LAST_REFRESH_DURATION_FIELD_DESC);
          oprot.writeString(struct.last_refresh_duration);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_refresh_state != null) {
        if (struct.isSetLast_refresh_state()) {
          oprot.writeFieldBegin(LAST_REFRESH_STATE_FIELD_DESC);
          oprot.writeString(struct.last_refresh_state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_refresh_error_code != null) {
        if (struct.isSetLast_refresh_error_code()) {
          oprot.writeFieldBegin(LAST_REFRESH_ERROR_CODE_FIELD_DESC);
          oprot.writeString(struct.last_refresh_error_code);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_refresh_error_message != null) {
        if (struct.isSetLast_refresh_error_message()) {
          oprot.writeFieldBegin(LAST_REFRESH_ERROR_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.last_refresh_error_message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.text != null) {
        if (struct.isSetText()) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rows != null) {
        if (struct.isSetRows()) {
          oprot.writeFieldBegin(ROWS_FIELD_DESC);
          oprot.writeString(struct.rows);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_type != null) {
        if (struct.isSetPartition_type()) {
          oprot.writeFieldBegin(PARTITION_TYPE_FIELD_DESC);
          oprot.writeString(struct.partition_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_refresh_force_refresh != null) {
        if (struct.isSetLast_refresh_force_refresh()) {
          oprot.writeFieldBegin(LAST_REFRESH_FORCE_REFRESH_FIELD_DESC);
          oprot.writeString(struct.last_refresh_force_refresh);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_refresh_start_partition != null) {
        if (struct.isSetLast_refresh_start_partition()) {
          oprot.writeFieldBegin(LAST_REFRESH_START_PARTITION_FIELD_DESC);
          oprot.writeString(struct.last_refresh_start_partition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_refresh_end_partition != null) {
        if (struct.isSetLast_refresh_end_partition()) {
          oprot.writeFieldBegin(LAST_REFRESH_END_PARTITION_FIELD_DESC);
          oprot.writeString(struct.last_refresh_end_partition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_refresh_base_refresh_partitions != null) {
        if (struct.isSetLast_refresh_base_refresh_partitions()) {
          oprot.writeFieldBegin(LAST_REFRESH_BASE_REFRESH_PARTITIONS_FIELD_DESC);
          oprot.writeString(struct.last_refresh_base_refresh_partitions);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_refresh_mv_refresh_partitions != null) {
        if (struct.isSetLast_refresh_mv_refresh_partitions()) {
          oprot.writeFieldBegin(LAST_REFRESH_MV_REFRESH_PARTITIONS_FIELD_DESC);
          oprot.writeString(struct.last_refresh_mv_refresh_partitions);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLast_check_time()) {
        oprot.writeFieldBegin(LAST_CHECK_TIME_FIELD_DESC);
        oprot.writeI64(struct.last_check_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreate_time()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.create_time);
        oprot.writeFieldEnd();
      }
      if (struct.ddl_sql != null) {
        if (struct.isSetDdl_sql()) {
          oprot.writeFieldBegin(DDL_SQL_FIELD_DESC);
          oprot.writeString(struct.ddl_sql);
          oprot.writeFieldEnd();
        }
      }
      if (struct.task_id != null) {
        if (struct.isSetTask_id()) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          oprot.writeString(struct.task_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.task_name != null) {
        if (struct.isSetTask_name()) {
          oprot.writeFieldBegin(TASK_NAME_FIELD_DESC);
          oprot.writeString(struct.task_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.inactive_reason != null) {
        if (struct.isSetInactive_reason()) {
          oprot.writeFieldBegin(INACTIVE_REASON_FIELD_DESC);
          oprot.writeString(struct.inactive_reason);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extra_message != null) {
        if (struct.isSetExtra_message()) {
          oprot.writeFieldBegin(EXTRA_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.extra_message);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMaterializedViewStatusTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMaterializedViewStatusTupleScheme getScheme() {
      return new TMaterializedViewStatusTupleScheme();
    }
  }

  private static class TMaterializedViewStatusTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMaterializedViewStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMaterializedViewStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDatabase_name()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetRefresh_type()) {
        optionals.set(3);
      }
      if (struct.isSetIs_active()) {
        optionals.set(4);
      }
      if (struct.isSetLast_refresh_start_time()) {
        optionals.set(5);
      }
      if (struct.isSetLast_refresh_finished_time()) {
        optionals.set(6);
      }
      if (struct.isSetLast_refresh_duration()) {
        optionals.set(7);
      }
      if (struct.isSetLast_refresh_state()) {
        optionals.set(8);
      }
      if (struct.isSetLast_refresh_error_code()) {
        optionals.set(9);
      }
      if (struct.isSetLast_refresh_error_message()) {
        optionals.set(10);
      }
      if (struct.isSetText()) {
        optionals.set(11);
      }
      if (struct.isSetRows()) {
        optionals.set(12);
      }
      if (struct.isSetPartition_type()) {
        optionals.set(13);
      }
      if (struct.isSetLast_refresh_force_refresh()) {
        optionals.set(14);
      }
      if (struct.isSetLast_refresh_start_partition()) {
        optionals.set(15);
      }
      if (struct.isSetLast_refresh_end_partition()) {
        optionals.set(16);
      }
      if (struct.isSetLast_refresh_base_refresh_partitions()) {
        optionals.set(17);
      }
      if (struct.isSetLast_refresh_mv_refresh_partitions()) {
        optionals.set(18);
      }
      if (struct.isSetLast_check_time()) {
        optionals.set(19);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(20);
      }
      if (struct.isSetDdl_sql()) {
        optionals.set(21);
      }
      if (struct.isSetTask_id()) {
        optionals.set(22);
      }
      if (struct.isSetTask_name()) {
        optionals.set(23);
      }
      if (struct.isSetInactive_reason()) {
        optionals.set(24);
      }
      if (struct.isSetExtra_message()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetDatabase_name()) {
        oprot.writeString(struct.database_name);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetRefresh_type()) {
        oprot.writeString(struct.refresh_type);
      }
      if (struct.isSetIs_active()) {
        oprot.writeString(struct.is_active);
      }
      if (struct.isSetLast_refresh_start_time()) {
        oprot.writeString(struct.last_refresh_start_time);
      }
      if (struct.isSetLast_refresh_finished_time()) {
        oprot.writeString(struct.last_refresh_finished_time);
      }
      if (struct.isSetLast_refresh_duration()) {
        oprot.writeString(struct.last_refresh_duration);
      }
      if (struct.isSetLast_refresh_state()) {
        oprot.writeString(struct.last_refresh_state);
      }
      if (struct.isSetLast_refresh_error_code()) {
        oprot.writeString(struct.last_refresh_error_code);
      }
      if (struct.isSetLast_refresh_error_message()) {
        oprot.writeString(struct.last_refresh_error_message);
      }
      if (struct.isSetText()) {
        oprot.writeString(struct.text);
      }
      if (struct.isSetRows()) {
        oprot.writeString(struct.rows);
      }
      if (struct.isSetPartition_type()) {
        oprot.writeString(struct.partition_type);
      }
      if (struct.isSetLast_refresh_force_refresh()) {
        oprot.writeString(struct.last_refresh_force_refresh);
      }
      if (struct.isSetLast_refresh_start_partition()) {
        oprot.writeString(struct.last_refresh_start_partition);
      }
      if (struct.isSetLast_refresh_end_partition()) {
        oprot.writeString(struct.last_refresh_end_partition);
      }
      if (struct.isSetLast_refresh_base_refresh_partitions()) {
        oprot.writeString(struct.last_refresh_base_refresh_partitions);
      }
      if (struct.isSetLast_refresh_mv_refresh_partitions()) {
        oprot.writeString(struct.last_refresh_mv_refresh_partitions);
      }
      if (struct.isSetLast_check_time()) {
        oprot.writeI64(struct.last_check_time);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeI64(struct.create_time);
      }
      if (struct.isSetDdl_sql()) {
        oprot.writeString(struct.ddl_sql);
      }
      if (struct.isSetTask_id()) {
        oprot.writeString(struct.task_id);
      }
      if (struct.isSetTask_name()) {
        oprot.writeString(struct.task_name);
      }
      if (struct.isSetInactive_reason()) {
        oprot.writeString(struct.inactive_reason);
      }
      if (struct.isSetExtra_message()) {
        oprot.writeString(struct.extra_message);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMaterializedViewStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.database_name = iprot.readString();
        struct.setDatabase_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.refresh_type = iprot.readString();
        struct.setRefresh_typeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.is_active = iprot.readString();
        struct.setIs_activeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.last_refresh_start_time = iprot.readString();
        struct.setLast_refresh_start_timeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.last_refresh_finished_time = iprot.readString();
        struct.setLast_refresh_finished_timeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.last_refresh_duration = iprot.readString();
        struct.setLast_refresh_durationIsSet(true);
      }
      if (incoming.get(8)) {
        struct.last_refresh_state = iprot.readString();
        struct.setLast_refresh_stateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.last_refresh_error_code = iprot.readString();
        struct.setLast_refresh_error_codeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.last_refresh_error_message = iprot.readString();
        struct.setLast_refresh_error_messageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.text = iprot.readString();
        struct.setTextIsSet(true);
      }
      if (incoming.get(12)) {
        struct.rows = iprot.readString();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.partition_type = iprot.readString();
        struct.setPartition_typeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.last_refresh_force_refresh = iprot.readString();
        struct.setLast_refresh_force_refreshIsSet(true);
      }
      if (incoming.get(15)) {
        struct.last_refresh_start_partition = iprot.readString();
        struct.setLast_refresh_start_partitionIsSet(true);
      }
      if (incoming.get(16)) {
        struct.last_refresh_end_partition = iprot.readString();
        struct.setLast_refresh_end_partitionIsSet(true);
      }
      if (incoming.get(17)) {
        struct.last_refresh_base_refresh_partitions = iprot.readString();
        struct.setLast_refresh_base_refresh_partitionsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.last_refresh_mv_refresh_partitions = iprot.readString();
        struct.setLast_refresh_mv_refresh_partitionsIsSet(true);
      }
      if (incoming.get(19)) {
        struct.last_check_time = iprot.readI64();
        struct.setLast_check_timeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.create_time = iprot.readI64();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.ddl_sql = iprot.readString();
        struct.setDdl_sqlIsSet(true);
      }
      if (incoming.get(22)) {
        struct.task_id = iprot.readString();
        struct.setTask_idIsSet(true);
      }
      if (incoming.get(23)) {
        struct.task_name = iprot.readString();
        struct.setTask_nameIsSet(true);
      }
      if (incoming.get(24)) {
        struct.inactive_reason = iprot.readString();
        struct.setInactive_reasonIsSet(true);
      }
      if (incoming.get(25)) {
        struct.extra_message = iprot.readString();
        struct.setExtra_messageIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

