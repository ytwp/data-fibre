/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TDictQueryExpr implements org.apache.thrift.TBase<TDictQueryExpr, TDictQueryExpr._Fields>, java.io.Serializable, Cloneable, Comparable<TDictQueryExpr> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDictQueryExpr");

  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TBL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tbl_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARTITION_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_version", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("key_fields", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("value_field", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STRICT_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("strict_mode", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDictQueryExprStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDictQueryExprTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tbl_name; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,java.lang.Long> partition_version; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> key_fields; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String value_field; // required
  public boolean strict_mode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DB_NAME((short)1, "db_name"),
    TBL_NAME((short)2, "tbl_name"),
    PARTITION_VERSION((short)3, "partition_version"),
    KEY_FIELDS((short)4, "key_fields"),
    VALUE_FIELD((short)5, "value_field"),
    STRICT_MODE((short)6, "strict_mode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DB_NAME
          return DB_NAME;
        case 2: // TBL_NAME
          return TBL_NAME;
        case 3: // PARTITION_VERSION
          return PARTITION_VERSION;
        case 4: // KEY_FIELDS
          return KEY_FIELDS;
        case 5: // VALUE_FIELD
          return VALUE_FIELD;
        case 6: // STRICT_MODE
          return STRICT_MODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STRICT_MODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TBL_NAME, new org.apache.thrift.meta_data.FieldMetaData("tbl_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION_VERSION, new org.apache.thrift.meta_data.FieldMetaData("partition_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.KEY_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("key_fields", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VALUE_FIELD, new org.apache.thrift.meta_data.FieldMetaData("value_field", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRICT_MODE, new org.apache.thrift.meta_data.FieldMetaData("strict_mode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDictQueryExpr.class, metaDataMap);
  }

  public TDictQueryExpr() {
  }

  public TDictQueryExpr(
    java.lang.String db_name,
    java.lang.String tbl_name,
    java.util.Map<java.lang.Long,java.lang.Long> partition_version,
    java.util.List<java.lang.String> key_fields,
    java.lang.String value_field,
    boolean strict_mode)
  {
    this();
    this.db_name = db_name;
    this.tbl_name = tbl_name;
    this.partition_version = partition_version;
    this.key_fields = key_fields;
    this.value_field = value_field;
    this.strict_mode = strict_mode;
    setStrict_modeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDictQueryExpr(TDictQueryExpr other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    if (other.isSetTbl_name()) {
      this.tbl_name = other.tbl_name;
    }
    if (other.isSetPartition_version()) {
      java.util.Map<java.lang.Long,java.lang.Long> __this__partition_version = new java.util.HashMap<java.lang.Long,java.lang.Long>(other.partition_version);
      this.partition_version = __this__partition_version;
    }
    if (other.isSetKey_fields()) {
      java.util.List<java.lang.String> __this__key_fields = new java.util.ArrayList<java.lang.String>(other.key_fields);
      this.key_fields = __this__key_fields;
    }
    if (other.isSetValue_field()) {
      this.value_field = other.value_field;
    }
    this.strict_mode = other.strict_mode;
  }

  @Override
  public TDictQueryExpr deepCopy() {
    return new TDictQueryExpr(this);
  }

  @Override
  public void clear() {
    this.db_name = null;
    this.tbl_name = null;
    this.partition_version = null;
    this.key_fields = null;
    this.value_field = null;
    setStrict_modeIsSet(false);
    this.strict_mode = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb_name() {
    return this.db_name;
  }

  public TDictQueryExpr setDb_name(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTbl_name() {
    return this.tbl_name;
  }

  public TDictQueryExpr setTbl_name(@org.apache.thrift.annotation.Nullable java.lang.String tbl_name) {
    this.tbl_name = tbl_name;
    return this;
  }

  public void unsetTbl_name() {
    this.tbl_name = null;
  }

  /** Returns true if field tbl_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTbl_name() {
    return this.tbl_name != null;
  }

  public void setTbl_nameIsSet(boolean value) {
    if (!value) {
      this.tbl_name = null;
    }
  }

  public int getPartition_versionSize() {
    return (this.partition_version == null) ? 0 : this.partition_version.size();
  }

  public void putToPartition_version(long key, long val) {
    if (this.partition_version == null) {
      this.partition_version = new java.util.HashMap<java.lang.Long,java.lang.Long>();
    }
    this.partition_version.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Long,java.lang.Long> getPartition_version() {
    return this.partition_version;
  }

  public TDictQueryExpr setPartition_version(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,java.lang.Long> partition_version) {
    this.partition_version = partition_version;
    return this;
  }

  public void unsetPartition_version() {
    this.partition_version = null;
  }

  /** Returns true if field partition_version is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_version() {
    return this.partition_version != null;
  }

  public void setPartition_versionIsSet(boolean value) {
    if (!value) {
      this.partition_version = null;
    }
  }

  public int getKey_fieldsSize() {
    return (this.key_fields == null) ? 0 : this.key_fields.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getKey_fieldsIterator() {
    return (this.key_fields == null) ? null : this.key_fields.iterator();
  }

  public void addToKey_fields(java.lang.String elem) {
    if (this.key_fields == null) {
      this.key_fields = new java.util.ArrayList<java.lang.String>();
    }
    this.key_fields.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getKey_fields() {
    return this.key_fields;
  }

  public TDictQueryExpr setKey_fields(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> key_fields) {
    this.key_fields = key_fields;
    return this;
  }

  public void unsetKey_fields() {
    this.key_fields = null;
  }

  /** Returns true if field key_fields is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_fields() {
    return this.key_fields != null;
  }

  public void setKey_fieldsIsSet(boolean value) {
    if (!value) {
      this.key_fields = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getValue_field() {
    return this.value_field;
  }

  public TDictQueryExpr setValue_field(@org.apache.thrift.annotation.Nullable java.lang.String value_field) {
    this.value_field = value_field;
    return this;
  }

  public void unsetValue_field() {
    this.value_field = null;
  }

  /** Returns true if field value_field is set (has been assigned a value) and false otherwise */
  public boolean isSetValue_field() {
    return this.value_field != null;
  }

  public void setValue_fieldIsSet(boolean value) {
    if (!value) {
      this.value_field = null;
    }
  }

  public boolean isStrict_mode() {
    return this.strict_mode;
  }

  public TDictQueryExpr setStrict_mode(boolean strict_mode) {
    this.strict_mode = strict_mode;
    setStrict_modeIsSet(true);
    return this;
  }

  public void unsetStrict_mode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRICT_MODE_ISSET_ID);
  }

  /** Returns true if field strict_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetStrict_mode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRICT_MODE_ISSET_ID);
  }

  public void setStrict_modeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRICT_MODE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((java.lang.String)value);
      }
      break;

    case TBL_NAME:
      if (value == null) {
        unsetTbl_name();
      } else {
        setTbl_name((java.lang.String)value);
      }
      break;

    case PARTITION_VERSION:
      if (value == null) {
        unsetPartition_version();
      } else {
        setPartition_version((java.util.Map<java.lang.Long,java.lang.Long>)value);
      }
      break;

    case KEY_FIELDS:
      if (value == null) {
        unsetKey_fields();
      } else {
        setKey_fields((java.util.List<java.lang.String>)value);
      }
      break;

    case VALUE_FIELD:
      if (value == null) {
        unsetValue_field();
      } else {
        setValue_field((java.lang.String)value);
      }
      break;

    case STRICT_MODE:
      if (value == null) {
        unsetStrict_mode();
      } else {
        setStrict_mode((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DB_NAME:
      return getDb_name();

    case TBL_NAME:
      return getTbl_name();

    case PARTITION_VERSION:
      return getPartition_version();

    case KEY_FIELDS:
      return getKey_fields();

    case VALUE_FIELD:
      return getValue_field();

    case STRICT_MODE:
      return isStrict_mode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DB_NAME:
      return isSetDb_name();
    case TBL_NAME:
      return isSetTbl_name();
    case PARTITION_VERSION:
      return isSetPartition_version();
    case KEY_FIELDS:
      return isSetKey_fields();
    case VALUE_FIELD:
      return isSetValue_field();
    case STRICT_MODE:
      return isSetStrict_mode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TDictQueryExpr)
      return this.equals((TDictQueryExpr)that);
    return false;
  }

  public boolean equals(TDictQueryExpr that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_tbl_name = true && this.isSetTbl_name();
    boolean that_present_tbl_name = true && that.isSetTbl_name();
    if (this_present_tbl_name || that_present_tbl_name) {
      if (!(this_present_tbl_name && that_present_tbl_name))
        return false;
      if (!this.tbl_name.equals(that.tbl_name))
        return false;
    }

    boolean this_present_partition_version = true && this.isSetPartition_version();
    boolean that_present_partition_version = true && that.isSetPartition_version();
    if (this_present_partition_version || that_present_partition_version) {
      if (!(this_present_partition_version && that_present_partition_version))
        return false;
      if (!this.partition_version.equals(that.partition_version))
        return false;
    }

    boolean this_present_key_fields = true && this.isSetKey_fields();
    boolean that_present_key_fields = true && that.isSetKey_fields();
    if (this_present_key_fields || that_present_key_fields) {
      if (!(this_present_key_fields && that_present_key_fields))
        return false;
      if (!this.key_fields.equals(that.key_fields))
        return false;
    }

    boolean this_present_value_field = true && this.isSetValue_field();
    boolean that_present_value_field = true && that.isSetValue_field();
    if (this_present_value_field || that_present_value_field) {
      if (!(this_present_value_field && that_present_value_field))
        return false;
      if (!this.value_field.equals(that.value_field))
        return false;
    }

    boolean this_present_strict_mode = true;
    boolean that_present_strict_mode = true;
    if (this_present_strict_mode || that_present_strict_mode) {
      if (!(this_present_strict_mode && that_present_strict_mode))
        return false;
      if (this.strict_mode != that.strict_mode)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDb_name()) ? 131071 : 524287);
    if (isSetDb_name())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTbl_name()) ? 131071 : 524287);
    if (isSetTbl_name())
      hashCode = hashCode * 8191 + tbl_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_version()) ? 131071 : 524287);
    if (isSetPartition_version())
      hashCode = hashCode * 8191 + partition_version.hashCode();

    hashCode = hashCode * 8191 + ((isSetKey_fields()) ? 131071 : 524287);
    if (isSetKey_fields())
      hashCode = hashCode * 8191 + key_fields.hashCode();

    hashCode = hashCode * 8191 + ((isSetValue_field()) ? 131071 : 524287);
    if (isSetValue_field())
      hashCode = hashCode * 8191 + value_field.hashCode();

    hashCode = hashCode * 8191 + ((strict_mode) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TDictQueryExpr other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetDb_name(), other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTbl_name(), other.isSetTbl_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTbl_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbl_name, other.tbl_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_version(), other.isSetPartition_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_version, other.partition_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKey_fields(), other.isSetKey_fields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_fields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_fields, other.key_fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValue_field(), other.isSetValue_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value_field, other.value_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStrict_mode(), other.isSetStrict_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrict_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strict_mode, other.strict_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDictQueryExpr(");
    boolean first = true;

    sb.append("db_name:");
    if (this.db_name == null) {
      sb.append("null");
    } else {
      sb.append(this.db_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tbl_name:");
    if (this.tbl_name == null) {
      sb.append("null");
    } else {
      sb.append(this.tbl_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partition_version:");
    if (this.partition_version == null) {
      sb.append("null");
    } else {
      sb.append(this.partition_version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key_fields:");
    if (this.key_fields == null) {
      sb.append("null");
    } else {
      sb.append(this.key_fields);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value_field:");
    if (this.value_field == null) {
      sb.append("null");
    } else {
      sb.append(this.value_field);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("strict_mode:");
    sb.append(this.strict_mode);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (db_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db_name' was not present! Struct: " + toString());
    }
    if (tbl_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tbl_name' was not present! Struct: " + toString());
    }
    if (partition_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_version' was not present! Struct: " + toString());
    }
    if (key_fields == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key_fields' was not present! Struct: " + toString());
    }
    if (value_field == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'value_field' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'strict_mode' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDictQueryExprStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDictQueryExprStandardScheme getScheme() {
      return new TDictQueryExprStandardScheme();
    }
  }

  private static class TDictQueryExprStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDictQueryExpr> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TDictQueryExpr struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TBL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tbl_name = iprot.readString();
              struct.setTbl_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTITION_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.partition_version = new java.util.HashMap<java.lang.Long,java.lang.Long>(2*_map8.size);
                long _key9;
                long _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readI64();
                  _val10 = iprot.readI64();
                  struct.partition_version.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setPartition_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.key_fields = new java.util.ArrayList<java.lang.String>(_list12.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = iprot.readString();
                  struct.key_fields.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setKey_fieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VALUE_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value_field = iprot.readString();
              struct.setValue_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STRICT_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.strict_mode = iprot.readBool();
              struct.setStrict_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStrict_mode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'strict_mode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TDictQueryExpr struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.db_name);
        oprot.writeFieldEnd();
      }
      if (struct.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(struct.tbl_name);
        oprot.writeFieldEnd();
      }
      if (struct.partition_version != null) {
        oprot.writeFieldBegin(PARTITION_VERSION_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I64, struct.partition_version.size()));
          for (java.util.Map.Entry<java.lang.Long, java.lang.Long> _iter15 : struct.partition_version.entrySet())
          {
            oprot.writeI64(_iter15.getKey());
            oprot.writeI64(_iter15.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.key_fields != null) {
        oprot.writeFieldBegin(KEY_FIELDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.key_fields.size()));
          for (java.lang.String _iter16 : struct.key_fields)
          {
            oprot.writeString(_iter16);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.value_field != null) {
        oprot.writeFieldBegin(VALUE_FIELD_FIELD_DESC);
        oprot.writeString(struct.value_field);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STRICT_MODE_FIELD_DESC);
      oprot.writeBool(struct.strict_mode);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDictQueryExprTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDictQueryExprTupleScheme getScheme() {
      return new TDictQueryExprTupleScheme();
    }
  }

  private static class TDictQueryExprTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDictQueryExpr> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDictQueryExpr struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.db_name);
      oprot.writeString(struct.tbl_name);
      {
        oprot.writeI32(struct.partition_version.size());
        for (java.util.Map.Entry<java.lang.Long, java.lang.Long> _iter17 : struct.partition_version.entrySet())
        {
          oprot.writeI64(_iter17.getKey());
          oprot.writeI64(_iter17.getValue());
        }
      }
      {
        oprot.writeI32(struct.key_fields.size());
        for (java.lang.String _iter18 : struct.key_fields)
        {
          oprot.writeString(_iter18);
        }
      }
      oprot.writeString(struct.value_field);
      oprot.writeBool(struct.strict_mode);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDictQueryExpr struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.db_name = iprot.readString();
      struct.setDb_nameIsSet(true);
      struct.tbl_name = iprot.readString();
      struct.setTbl_nameIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I64); 
        struct.partition_version = new java.util.HashMap<java.lang.Long,java.lang.Long>(2*_map19.size);
        long _key20;
        long _val21;
        for (int _i22 = 0; _i22 < _map19.size; ++_i22)
        {
          _key20 = iprot.readI64();
          _val21 = iprot.readI64();
          struct.partition_version.put(_key20, _val21);
        }
      }
      struct.setPartition_versionIsSet(true);
      {
        org.apache.thrift.protocol.TList _list23 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.key_fields = new java.util.ArrayList<java.lang.String>(_list23.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem24;
        for (int _i25 = 0; _i25 < _list23.size; ++_i25)
        {
          _elem24 = iprot.readString();
          struct.key_fields.add(_elem24);
        }
      }
      struct.setKey_fieldsIsSet(true);
      struct.value_field = iprot.readString();
      struct.setValue_fieldIsSet(true);
      struct.strict_mode = iprot.readBool();
      struct.setStrict_modeIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

