/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TReportRequest implements org.apache.thrift.TBase<TReportRequest, TReportRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TReportRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TReportRequest");

  private static final org.apache.thrift.protocol.TField BACKEND_FIELD_DESC = new org.apache.thrift.protocol.TField("backend", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField REPORT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("report_version", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("tasks", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField TABLETS_FIELD_DESC = new org.apache.thrift.protocol.TField("tablets", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField DISKS_FIELD_DESC = new org.apache.thrift.protocol.TField("disks", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField FORCE_RECOVERY_FIELD_DESC = new org.apache.thrift.protocol.TField("force_recovery", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField TABLET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_list", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField TABLET_MAX_COMPACTION_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_max_compaction_score", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField ACTIVE_WORKGROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("active_workgroups", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField RESOURCE_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_usage", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField DATACACHE_METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("datacache_metrics", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TReportRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TReportRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TBackend backend; // required
  public long report_version; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<io.datafibre.fibre.thrift.TTaskType,java.util.Set<java.lang.Long>> tasks; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,TTablet> tablets; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,TDisk> disks; // optional
  public boolean force_recovery; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TTablet> tablet_list; // optional
  public long tablet_max_compaction_score; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TWorkGroup> active_workgroups; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TResourceUsage resource_usage; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TDataCacheMetrics datacache_metrics; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BACKEND((short)1, "backend"),
    REPORT_VERSION((short)2, "report_version"),
    TASKS((short)3, "tasks"),
    TABLETS((short)4, "tablets"),
    DISKS((short)5, "disks"),
    FORCE_RECOVERY((short)6, "force_recovery"),
    TABLET_LIST((short)7, "tablet_list"),
    TABLET_MAX_COMPACTION_SCORE((short)8, "tablet_max_compaction_score"),
    ACTIVE_WORKGROUPS((short)9, "active_workgroups"),
    RESOURCE_USAGE((short)10, "resource_usage"),
    DATACACHE_METRICS((short)11, "datacache_metrics");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BACKEND
          return BACKEND;
        case 2: // REPORT_VERSION
          return REPORT_VERSION;
        case 3: // TASKS
          return TASKS;
        case 4: // TABLETS
          return TABLETS;
        case 5: // DISKS
          return DISKS;
        case 6: // FORCE_RECOVERY
          return FORCE_RECOVERY;
        case 7: // TABLET_LIST
          return TABLET_LIST;
        case 8: // TABLET_MAX_COMPACTION_SCORE
          return TABLET_MAX_COMPACTION_SCORE;
        case 9: // ACTIVE_WORKGROUPS
          return ACTIVE_WORKGROUPS;
        case 10: // RESOURCE_USAGE
          return RESOURCE_USAGE;
        case 11: // DATACACHE_METRICS
          return DATACACHE_METRICS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPORT_VERSION_ISSET_ID = 0;
  private static final int __FORCE_RECOVERY_ISSET_ID = 1;
  private static final int __TABLET_MAX_COMPACTION_SCORE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REPORT_VERSION,_Fields.TASKS,_Fields.TABLETS,_Fields.DISKS,_Fields.FORCE_RECOVERY,_Fields.TABLET_LIST,_Fields.TABLET_MAX_COMPACTION_SCORE,_Fields.ACTIVE_WORKGROUPS,_Fields.RESOURCE_USAGE,_Fields.DATACACHE_METRICS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BACKEND, new org.apache.thrift.meta_data.FieldMetaData("backend", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TBackend.class)));
    tmpMap.put(_Fields.REPORT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("report_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TASKS, new org.apache.thrift.meta_data.FieldMetaData("tasks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TTaskType.class),
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.TABLETS, new org.apache.thrift.meta_data.FieldMetaData("tablets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "TTabletId"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTablet.class))));
    tmpMap.put(_Fields.DISKS, new org.apache.thrift.meta_data.FieldMetaData("disks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDisk.class))));
    tmpMap.put(_Fields.FORCE_RECOVERY, new org.apache.thrift.meta_data.FieldMetaData("force_recovery", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TABLET_LIST, new org.apache.thrift.meta_data.FieldMetaData("tablet_list", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTablet.class))));
    tmpMap.put(_Fields.TABLET_MAX_COMPACTION_SCORE, new org.apache.thrift.meta_data.FieldMetaData("tablet_max_compaction_score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVE_WORKGROUPS, new org.apache.thrift.meta_data.FieldMetaData("active_workgroups", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TWorkGroup.class))));
    tmpMap.put(_Fields.RESOURCE_USAGE, new org.apache.thrift.meta_data.FieldMetaData("resource_usage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TResourceUsage.class)));
    tmpMap.put(_Fields.DATACACHE_METRICS, new org.apache.thrift.meta_data.FieldMetaData("datacache_metrics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TDataCacheMetrics.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TReportRequest.class, metaDataMap);
  }

  public TReportRequest() {
  }

  public TReportRequest(
    io.datafibre.fibre.thrift.TBackend backend)
  {
    this();
    this.backend = backend;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TReportRequest(TReportRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBackend()) {
      this.backend = new io.datafibre.fibre.thrift.TBackend(other.backend);
    }
    this.report_version = other.report_version;
    if (other.isSetTasks()) {
      java.util.Map<io.datafibre.fibre.thrift.TTaskType,java.util.Set<java.lang.Long>> __this__tasks = new java.util.EnumMap<io.datafibre.fibre.thrift.TTaskType,java.util.Set<java.lang.Long>>(io.datafibre.fibre.thrift.TTaskType.class);
      for (java.util.Map.Entry<io.datafibre.fibre.thrift.TTaskType, java.util.Set<java.lang.Long>> other_element : other.tasks.entrySet()) {

        io.datafibre.fibre.thrift.TTaskType other_element_key = other_element.getKey();
        java.util.Set<java.lang.Long> other_element_value = other_element.getValue();

        io.datafibre.fibre.thrift.TTaskType __this__tasks_copy_key = other_element_key;

        java.util.Set<java.lang.Long> __this__tasks_copy_value = new java.util.HashSet<java.lang.Long>(other_element_value);

        __this__tasks.put(__this__tasks_copy_key, __this__tasks_copy_value);
      }
      this.tasks = __this__tasks;
    }
    if (other.isSetTablets()) {
      java.util.Map<java.lang.Long,TTablet> __this__tablets = new java.util.HashMap<java.lang.Long,TTablet>(other.tablets.size());
      for (java.util.Map.Entry<java.lang.Long, TTablet> other_element : other.tablets.entrySet()) {

        java.lang.Long other_element_key = other_element.getKey();
        TTablet other_element_value = other_element.getValue();

        java.lang.Long __this__tablets_copy_key = other_element_key;

        TTablet __this__tablets_copy_value = new TTablet(other_element_value);

        __this__tablets.put(__this__tablets_copy_key, __this__tablets_copy_value);
      }
      this.tablets = __this__tablets;
    }
    if (other.isSetDisks()) {
      java.util.Map<java.lang.String,TDisk> __this__disks = new java.util.HashMap<java.lang.String,TDisk>(other.disks.size());
      for (java.util.Map.Entry<java.lang.String, TDisk> other_element : other.disks.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        TDisk other_element_value = other_element.getValue();

        java.lang.String __this__disks_copy_key = other_element_key;

        TDisk __this__disks_copy_value = new TDisk(other_element_value);

        __this__disks.put(__this__disks_copy_key, __this__disks_copy_value);
      }
      this.disks = __this__disks;
    }
    this.force_recovery = other.force_recovery;
    if (other.isSetTablet_list()) {
      java.util.List<TTablet> __this__tablet_list = new java.util.ArrayList<TTablet>(other.tablet_list.size());
      for (TTablet other_element : other.tablet_list) {
        __this__tablet_list.add(new TTablet(other_element));
      }
      this.tablet_list = __this__tablet_list;
    }
    this.tablet_max_compaction_score = other.tablet_max_compaction_score;
    if (other.isSetActive_workgroups()) {
      java.util.List<io.datafibre.fibre.thrift.TWorkGroup> __this__active_workgroups = new java.util.ArrayList<io.datafibre.fibre.thrift.TWorkGroup>(other.active_workgroups.size());
      for (io.datafibre.fibre.thrift.TWorkGroup other_element : other.active_workgroups) {
        __this__active_workgroups.add(new io.datafibre.fibre.thrift.TWorkGroup(other_element));
      }
      this.active_workgroups = __this__active_workgroups;
    }
    if (other.isSetResource_usage()) {
      this.resource_usage = new io.datafibre.fibre.thrift.TResourceUsage(other.resource_usage);
    }
    if (other.isSetDatacache_metrics()) {
      this.datacache_metrics = new io.datafibre.fibre.thrift.TDataCacheMetrics(other.datacache_metrics);
    }
  }

  @Override
  public TReportRequest deepCopy() {
    return new TReportRequest(this);
  }

  @Override
  public void clear() {
    this.backend = null;
    setReport_versionIsSet(false);
    this.report_version = 0;
    this.tasks = null;
    this.tablets = null;
    this.disks = null;
    setForce_recoveryIsSet(false);
    this.force_recovery = false;
    this.tablet_list = null;
    setTablet_max_compaction_scoreIsSet(false);
    this.tablet_max_compaction_score = 0;
    this.active_workgroups = null;
    this.resource_usage = null;
    this.datacache_metrics = null;
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TBackend getBackend() {
    return this.backend;
  }

  public TReportRequest setBackend(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TBackend backend) {
    this.backend = backend;
    return this;
  }

  public void unsetBackend() {
    this.backend = null;
  }

  /** Returns true if field backend is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend() {
    return this.backend != null;
  }

  public void setBackendIsSet(boolean value) {
    if (!value) {
      this.backend = null;
    }
  }

  public long getReport_version() {
    return this.report_version;
  }

  public TReportRequest setReport_version(long report_version) {
    this.report_version = report_version;
    setReport_versionIsSet(true);
    return this;
  }

  public void unsetReport_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPORT_VERSION_ISSET_ID);
  }

  /** Returns true if field report_version is set (has been assigned a value) and false otherwise */
  public boolean isSetReport_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPORT_VERSION_ISSET_ID);
  }

  public void setReport_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPORT_VERSION_ISSET_ID, value);
  }

  public int getTasksSize() {
    return (this.tasks == null) ? 0 : this.tasks.size();
  }

  public void putToTasks(io.datafibre.fibre.thrift.TTaskType key, java.util.Set<java.lang.Long> val) {
    if (this.tasks == null) {
      this.tasks = new java.util.EnumMap<io.datafibre.fibre.thrift.TTaskType,java.util.Set<java.lang.Long>>(io.datafibre.fibre.thrift.TTaskType.class);
    }
    this.tasks.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<io.datafibre.fibre.thrift.TTaskType,java.util.Set<java.lang.Long>> getTasks() {
    return this.tasks;
  }

  public TReportRequest setTasks(@org.apache.thrift.annotation.Nullable java.util.Map<io.datafibre.fibre.thrift.TTaskType,java.util.Set<java.lang.Long>> tasks) {
    this.tasks = tasks;
    return this;
  }

  public void unsetTasks() {
    this.tasks = null;
  }

  /** Returns true if field tasks is set (has been assigned a value) and false otherwise */
  public boolean isSetTasks() {
    return this.tasks != null;
  }

  public void setTasksIsSet(boolean value) {
    if (!value) {
      this.tasks = null;
    }
  }

  public int getTabletsSize() {
    return (this.tablets == null) ? 0 : this.tablets.size();
  }

  public void putToTablets(long key, TTablet val) {
    if (this.tablets == null) {
      this.tablets = new java.util.HashMap<java.lang.Long,TTablet>();
    }
    this.tablets.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Long,TTablet> getTablets() {
    return this.tablets;
  }

  public TReportRequest setTablets(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,TTablet> tablets) {
    this.tablets = tablets;
    return this;
  }

  public void unsetTablets() {
    this.tablets = null;
  }

  /** Returns true if field tablets is set (has been assigned a value) and false otherwise */
  public boolean isSetTablets() {
    return this.tablets != null;
  }

  public void setTabletsIsSet(boolean value) {
    if (!value) {
      this.tablets = null;
    }
  }

  public int getDisksSize() {
    return (this.disks == null) ? 0 : this.disks.size();
  }

  public void putToDisks(java.lang.String key, TDisk val) {
    if (this.disks == null) {
      this.disks = new java.util.HashMap<java.lang.String,TDisk>();
    }
    this.disks.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,TDisk> getDisks() {
    return this.disks;
  }

  public TReportRequest setDisks(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,TDisk> disks) {
    this.disks = disks;
    return this;
  }

  public void unsetDisks() {
    this.disks = null;
  }

  /** Returns true if field disks is set (has been assigned a value) and false otherwise */
  public boolean isSetDisks() {
    return this.disks != null;
  }

  public void setDisksIsSet(boolean value) {
    if (!value) {
      this.disks = null;
    }
  }

  public boolean isForce_recovery() {
    return this.force_recovery;
  }

  public TReportRequest setForce_recovery(boolean force_recovery) {
    this.force_recovery = force_recovery;
    setForce_recoveryIsSet(true);
    return this;
  }

  public void unsetForce_recovery() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FORCE_RECOVERY_ISSET_ID);
  }

  /** Returns true if field force_recovery is set (has been assigned a value) and false otherwise */
  public boolean isSetForce_recovery() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FORCE_RECOVERY_ISSET_ID);
  }

  public void setForce_recoveryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FORCE_RECOVERY_ISSET_ID, value);
  }

  public int getTablet_listSize() {
    return (this.tablet_list == null) ? 0 : this.tablet_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TTablet> getTablet_listIterator() {
    return (this.tablet_list == null) ? null : this.tablet_list.iterator();
  }

  public void addToTablet_list(TTablet elem) {
    if (this.tablet_list == null) {
      this.tablet_list = new java.util.ArrayList<TTablet>();
    }
    this.tablet_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TTablet> getTablet_list() {
    return this.tablet_list;
  }

  public TReportRequest setTablet_list(@org.apache.thrift.annotation.Nullable java.util.List<TTablet> tablet_list) {
    this.tablet_list = tablet_list;
    return this;
  }

  public void unsetTablet_list() {
    this.tablet_list = null;
  }

  /** Returns true if field tablet_list is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_list() {
    return this.tablet_list != null;
  }

  public void setTablet_listIsSet(boolean value) {
    if (!value) {
      this.tablet_list = null;
    }
  }

  public long getTablet_max_compaction_score() {
    return this.tablet_max_compaction_score;
  }

  public TReportRequest setTablet_max_compaction_score(long tablet_max_compaction_score) {
    this.tablet_max_compaction_score = tablet_max_compaction_score;
    setTablet_max_compaction_scoreIsSet(true);
    return this;
  }

  public void unsetTablet_max_compaction_score() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_MAX_COMPACTION_SCORE_ISSET_ID);
  }

  /** Returns true if field tablet_max_compaction_score is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_max_compaction_score() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_MAX_COMPACTION_SCORE_ISSET_ID);
  }

  public void setTablet_max_compaction_scoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_MAX_COMPACTION_SCORE_ISSET_ID, value);
  }

  public int getActive_workgroupsSize() {
    return (this.active_workgroups == null) ? 0 : this.active_workgroups.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TWorkGroup> getActive_workgroupsIterator() {
    return (this.active_workgroups == null) ? null : this.active_workgroups.iterator();
  }

  public void addToActive_workgroups(io.datafibre.fibre.thrift.TWorkGroup elem) {
    if (this.active_workgroups == null) {
      this.active_workgroups = new java.util.ArrayList<io.datafibre.fibre.thrift.TWorkGroup>();
    }
    this.active_workgroups.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TWorkGroup> getActive_workgroups() {
    return this.active_workgroups;
  }

  public TReportRequest setActive_workgroups(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TWorkGroup> active_workgroups) {
    this.active_workgroups = active_workgroups;
    return this;
  }

  public void unsetActive_workgroups() {
    this.active_workgroups = null;
  }

  /** Returns true if field active_workgroups is set (has been assigned a value) and false otherwise */
  public boolean isSetActive_workgroups() {
    return this.active_workgroups != null;
  }

  public void setActive_workgroupsIsSet(boolean value) {
    if (!value) {
      this.active_workgroups = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TResourceUsage getResource_usage() {
    return this.resource_usage;
  }

  public TReportRequest setResource_usage(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TResourceUsage resource_usage) {
    this.resource_usage = resource_usage;
    return this;
  }

  public void unsetResource_usage() {
    this.resource_usage = null;
  }

  /** Returns true if field resource_usage is set (has been assigned a value) and false otherwise */
  public boolean isSetResource_usage() {
    return this.resource_usage != null;
  }

  public void setResource_usageIsSet(boolean value) {
    if (!value) {
      this.resource_usage = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TDataCacheMetrics getDatacache_metrics() {
    return this.datacache_metrics;
  }

  public TReportRequest setDatacache_metrics(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TDataCacheMetrics datacache_metrics) {
    this.datacache_metrics = datacache_metrics;
    return this;
  }

  public void unsetDatacache_metrics() {
    this.datacache_metrics = null;
  }

  /** Returns true if field datacache_metrics is set (has been assigned a value) and false otherwise */
  public boolean isSetDatacache_metrics() {
    return this.datacache_metrics != null;
  }

  public void setDatacache_metricsIsSet(boolean value) {
    if (!value) {
      this.datacache_metrics = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case BACKEND:
      if (value == null) {
        unsetBackend();
      } else {
        setBackend((io.datafibre.fibre.thrift.TBackend)value);
      }
      break;

    case REPORT_VERSION:
      if (value == null) {
        unsetReport_version();
      } else {
        setReport_version((java.lang.Long)value);
      }
      break;

    case TASKS:
      if (value == null) {
        unsetTasks();
      } else {
        setTasks((java.util.Map<io.datafibre.fibre.thrift.TTaskType,java.util.Set<java.lang.Long>>)value);
      }
      break;

    case TABLETS:
      if (value == null) {
        unsetTablets();
      } else {
        setTablets((java.util.Map<java.lang.Long,TTablet>)value);
      }
      break;

    case DISKS:
      if (value == null) {
        unsetDisks();
      } else {
        setDisks((java.util.Map<java.lang.String,TDisk>)value);
      }
      break;

    case FORCE_RECOVERY:
      if (value == null) {
        unsetForce_recovery();
      } else {
        setForce_recovery((java.lang.Boolean)value);
      }
      break;

    case TABLET_LIST:
      if (value == null) {
        unsetTablet_list();
      } else {
        setTablet_list((java.util.List<TTablet>)value);
      }
      break;

    case TABLET_MAX_COMPACTION_SCORE:
      if (value == null) {
        unsetTablet_max_compaction_score();
      } else {
        setTablet_max_compaction_score((java.lang.Long)value);
      }
      break;

    case ACTIVE_WORKGROUPS:
      if (value == null) {
        unsetActive_workgroups();
      } else {
        setActive_workgroups((java.util.List<io.datafibre.fibre.thrift.TWorkGroup>)value);
      }
      break;

    case RESOURCE_USAGE:
      if (value == null) {
        unsetResource_usage();
      } else {
        setResource_usage((io.datafibre.fibre.thrift.TResourceUsage)value);
      }
      break;

    case DATACACHE_METRICS:
      if (value == null) {
        unsetDatacache_metrics();
      } else {
        setDatacache_metrics((io.datafibre.fibre.thrift.TDataCacheMetrics)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BACKEND:
      return getBackend();

    case REPORT_VERSION:
      return getReport_version();

    case TASKS:
      return getTasks();

    case TABLETS:
      return getTablets();

    case DISKS:
      return getDisks();

    case FORCE_RECOVERY:
      return isForce_recovery();

    case TABLET_LIST:
      return getTablet_list();

    case TABLET_MAX_COMPACTION_SCORE:
      return getTablet_max_compaction_score();

    case ACTIVE_WORKGROUPS:
      return getActive_workgroups();

    case RESOURCE_USAGE:
      return getResource_usage();

    case DATACACHE_METRICS:
      return getDatacache_metrics();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BACKEND:
      return isSetBackend();
    case REPORT_VERSION:
      return isSetReport_version();
    case TASKS:
      return isSetTasks();
    case TABLETS:
      return isSetTablets();
    case DISKS:
      return isSetDisks();
    case FORCE_RECOVERY:
      return isSetForce_recovery();
    case TABLET_LIST:
      return isSetTablet_list();
    case TABLET_MAX_COMPACTION_SCORE:
      return isSetTablet_max_compaction_score();
    case ACTIVE_WORKGROUPS:
      return isSetActive_workgroups();
    case RESOURCE_USAGE:
      return isSetResource_usage();
    case DATACACHE_METRICS:
      return isSetDatacache_metrics();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TReportRequest)
      return this.equals((TReportRequest)that);
    return false;
  }

  public boolean equals(TReportRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_backend = true && this.isSetBackend();
    boolean that_present_backend = true && that.isSetBackend();
    if (this_present_backend || that_present_backend) {
      if (!(this_present_backend && that_present_backend))
        return false;
      if (!this.backend.equals(that.backend))
        return false;
    }

    boolean this_present_report_version = true && this.isSetReport_version();
    boolean that_present_report_version = true && that.isSetReport_version();
    if (this_present_report_version || that_present_report_version) {
      if (!(this_present_report_version && that_present_report_version))
        return false;
      if (this.report_version != that.report_version)
        return false;
    }

    boolean this_present_tasks = true && this.isSetTasks();
    boolean that_present_tasks = true && that.isSetTasks();
    if (this_present_tasks || that_present_tasks) {
      if (!(this_present_tasks && that_present_tasks))
        return false;
      if (!this.tasks.equals(that.tasks))
        return false;
    }

    boolean this_present_tablets = true && this.isSetTablets();
    boolean that_present_tablets = true && that.isSetTablets();
    if (this_present_tablets || that_present_tablets) {
      if (!(this_present_tablets && that_present_tablets))
        return false;
      if (!this.tablets.equals(that.tablets))
        return false;
    }

    boolean this_present_disks = true && this.isSetDisks();
    boolean that_present_disks = true && that.isSetDisks();
    if (this_present_disks || that_present_disks) {
      if (!(this_present_disks && that_present_disks))
        return false;
      if (!this.disks.equals(that.disks))
        return false;
    }

    boolean this_present_force_recovery = true && this.isSetForce_recovery();
    boolean that_present_force_recovery = true && that.isSetForce_recovery();
    if (this_present_force_recovery || that_present_force_recovery) {
      if (!(this_present_force_recovery && that_present_force_recovery))
        return false;
      if (this.force_recovery != that.force_recovery)
        return false;
    }

    boolean this_present_tablet_list = true && this.isSetTablet_list();
    boolean that_present_tablet_list = true && that.isSetTablet_list();
    if (this_present_tablet_list || that_present_tablet_list) {
      if (!(this_present_tablet_list && that_present_tablet_list))
        return false;
      if (!this.tablet_list.equals(that.tablet_list))
        return false;
    }

    boolean this_present_tablet_max_compaction_score = true && this.isSetTablet_max_compaction_score();
    boolean that_present_tablet_max_compaction_score = true && that.isSetTablet_max_compaction_score();
    if (this_present_tablet_max_compaction_score || that_present_tablet_max_compaction_score) {
      if (!(this_present_tablet_max_compaction_score && that_present_tablet_max_compaction_score))
        return false;
      if (this.tablet_max_compaction_score != that.tablet_max_compaction_score)
        return false;
    }

    boolean this_present_active_workgroups = true && this.isSetActive_workgroups();
    boolean that_present_active_workgroups = true && that.isSetActive_workgroups();
    if (this_present_active_workgroups || that_present_active_workgroups) {
      if (!(this_present_active_workgroups && that_present_active_workgroups))
        return false;
      if (!this.active_workgroups.equals(that.active_workgroups))
        return false;
    }

    boolean this_present_resource_usage = true && this.isSetResource_usage();
    boolean that_present_resource_usage = true && that.isSetResource_usage();
    if (this_present_resource_usage || that_present_resource_usage) {
      if (!(this_present_resource_usage && that_present_resource_usage))
        return false;
      if (!this.resource_usage.equals(that.resource_usage))
        return false;
    }

    boolean this_present_datacache_metrics = true && this.isSetDatacache_metrics();
    boolean that_present_datacache_metrics = true && that.isSetDatacache_metrics();
    if (this_present_datacache_metrics || that_present_datacache_metrics) {
      if (!(this_present_datacache_metrics && that_present_datacache_metrics))
        return false;
      if (!this.datacache_metrics.equals(that.datacache_metrics))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBackend()) ? 131071 : 524287);
    if (isSetBackend())
      hashCode = hashCode * 8191 + backend.hashCode();

    hashCode = hashCode * 8191 + ((isSetReport_version()) ? 131071 : 524287);
    if (isSetReport_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(report_version);

    hashCode = hashCode * 8191 + ((isSetTasks()) ? 131071 : 524287);
    if (isSetTasks())
      hashCode = hashCode * 8191 + tasks.hashCode();

    hashCode = hashCode * 8191 + ((isSetTablets()) ? 131071 : 524287);
    if (isSetTablets())
      hashCode = hashCode * 8191 + tablets.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisks()) ? 131071 : 524287);
    if (isSetDisks())
      hashCode = hashCode * 8191 + disks.hashCode();

    hashCode = hashCode * 8191 + ((isSetForce_recovery()) ? 131071 : 524287);
    if (isSetForce_recovery())
      hashCode = hashCode * 8191 + ((force_recovery) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTablet_list()) ? 131071 : 524287);
    if (isSetTablet_list())
      hashCode = hashCode * 8191 + tablet_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetTablet_max_compaction_score()) ? 131071 : 524287);
    if (isSetTablet_max_compaction_score())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tablet_max_compaction_score);

    hashCode = hashCode * 8191 + ((isSetActive_workgroups()) ? 131071 : 524287);
    if (isSetActive_workgroups())
      hashCode = hashCode * 8191 + active_workgroups.hashCode();

    hashCode = hashCode * 8191 + ((isSetResource_usage()) ? 131071 : 524287);
    if (isSetResource_usage())
      hashCode = hashCode * 8191 + resource_usage.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatacache_metrics()) ? 131071 : 524287);
    if (isSetDatacache_metrics())
      hashCode = hashCode * 8191 + datacache_metrics.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TReportRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetBackend(), other.isSetBackend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend, other.backend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReport_version(), other.isSetReport_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReport_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.report_version, other.report_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTasks(), other.isSetTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tasks, other.tasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablets(), other.isSetTablets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablets, other.tablets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDisks(), other.isSetDisks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disks, other.disks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetForce_recovery(), other.isSetForce_recovery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForce_recovery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.force_recovery, other.force_recovery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_list(), other.isSetTablet_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_list, other.tablet_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_max_compaction_score(), other.isSetTablet_max_compaction_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_max_compaction_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_max_compaction_score, other.tablet_max_compaction_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetActive_workgroups(), other.isSetActive_workgroups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActive_workgroups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active_workgroups, other.active_workgroups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResource_usage(), other.isSetResource_usage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource_usage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_usage, other.resource_usage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDatacache_metrics(), other.isSetDatacache_metrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatacache_metrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datacache_metrics, other.datacache_metrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TReportRequest(");
    boolean first = true;

    sb.append("backend:");
    if (this.backend == null) {
      sb.append("null");
    } else {
      sb.append(this.backend);
    }
    first = false;
    if (isSetReport_version()) {
      if (!first) sb.append(", ");
      sb.append("report_version:");
      sb.append(this.report_version);
      first = false;
    }
    if (isSetTasks()) {
      if (!first) sb.append(", ");
      sb.append("tasks:");
      if (this.tasks == null) {
        sb.append("null");
      } else {
        sb.append(this.tasks);
      }
      first = false;
    }
    if (isSetTablets()) {
      if (!first) sb.append(", ");
      sb.append("tablets:");
      if (this.tablets == null) {
        sb.append("null");
      } else {
        sb.append(this.tablets);
      }
      first = false;
    }
    if (isSetDisks()) {
      if (!first) sb.append(", ");
      sb.append("disks:");
      if (this.disks == null) {
        sb.append("null");
      } else {
        sb.append(this.disks);
      }
      first = false;
    }
    if (isSetForce_recovery()) {
      if (!first) sb.append(", ");
      sb.append("force_recovery:");
      sb.append(this.force_recovery);
      first = false;
    }
    if (isSetTablet_list()) {
      if (!first) sb.append(", ");
      sb.append("tablet_list:");
      if (this.tablet_list == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet_list);
      }
      first = false;
    }
    if (isSetTablet_max_compaction_score()) {
      if (!first) sb.append(", ");
      sb.append("tablet_max_compaction_score:");
      sb.append(this.tablet_max_compaction_score);
      first = false;
    }
    if (isSetActive_workgroups()) {
      if (!first) sb.append(", ");
      sb.append("active_workgroups:");
      if (this.active_workgroups == null) {
        sb.append("null");
      } else {
        sb.append(this.active_workgroups);
      }
      first = false;
    }
    if (isSetResource_usage()) {
      if (!first) sb.append(", ");
      sb.append("resource_usage:");
      if (this.resource_usage == null) {
        sb.append("null");
      } else {
        sb.append(this.resource_usage);
      }
      first = false;
    }
    if (isSetDatacache_metrics()) {
      if (!first) sb.append(", ");
      sb.append("datacache_metrics:");
      if (this.datacache_metrics == null) {
        sb.append("null");
      } else {
        sb.append(this.datacache_metrics);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (backend == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'backend' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (backend != null) {
      backend.validate();
    }
    if (resource_usage != null) {
      resource_usage.validate();
    }
    if (datacache_metrics != null) {
      datacache_metrics.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TReportRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TReportRequestStandardScheme getScheme() {
      return new TReportRequestStandardScheme();
    }
  }

  private static class TReportRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TReportRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TReportRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BACKEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.backend = new io.datafibre.fibre.thrift.TBackend();
              struct.backend.read(iprot);
              struct.setBackendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPORT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.report_version = iprot.readI64();
              struct.setReport_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map82 = iprot.readMapBegin();
                struct.tasks = new java.util.EnumMap<io.datafibre.fibre.thrift.TTaskType,java.util.Set<java.lang.Long>>(io.datafibre.fibre.thrift.TTaskType.class);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTaskType _key83;
                @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Long> _val84;
                for (int _i85 = 0; _i85 < _map82.size; ++_i85)
                {
                  _key83 = io.datafibre.fibre.thrift.TTaskType.findByValue(iprot.readI32());
                  {
                    org.apache.thrift.protocol.TSet _set86 = iprot.readSetBegin();
                    _val84 = new java.util.HashSet<java.lang.Long>(2*_set86.size);
                    long _elem87;
                    for (int _i88 = 0; _i88 < _set86.size; ++_i88)
                    {
                      _elem87 = iprot.readI64();
                      _val84.add(_elem87);
                    }
                    iprot.readSetEnd();
                  }
                  if (_key83 != null)
                  {
                    struct.tasks.put(_key83, _val84);
                  }
                }
                iprot.readMapEnd();
              }
              struct.setTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLETS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map89 = iprot.readMapBegin();
                struct.tablets = new java.util.HashMap<java.lang.Long,TTablet>(2*_map89.size);
                long _key90;
                @org.apache.thrift.annotation.Nullable TTablet _val91;
                for (int _i92 = 0; _i92 < _map89.size; ++_i92)
                {
                  _key90 = iprot.readI64();
                  _val91 = new TTablet();
                  _val91.read(iprot);
                  struct.tablets.put(_key90, _val91);
                }
                iprot.readMapEnd();
              }
              struct.setTabletsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISKS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map93 = iprot.readMapBegin();
                struct.disks = new java.util.HashMap<java.lang.String,TDisk>(2*_map93.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key94;
                @org.apache.thrift.annotation.Nullable TDisk _val95;
                for (int _i96 = 0; _i96 < _map93.size; ++_i96)
                {
                  _key94 = iprot.readString();
                  _val95 = new TDisk();
                  _val95.read(iprot);
                  struct.disks.put(_key94, _val95);
                }
                iprot.readMapEnd();
              }
              struct.setDisksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FORCE_RECOVERY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.force_recovery = iprot.readBool();
              struct.setForce_recoveryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TABLET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list97 = iprot.readListBegin();
                struct.tablet_list = new java.util.ArrayList<TTablet>(_list97.size);
                @org.apache.thrift.annotation.Nullable TTablet _elem98;
                for (int _i99 = 0; _i99 < _list97.size; ++_i99)
                {
                  _elem98 = new TTablet();
                  _elem98.read(iprot);
                  struct.tablet_list.add(_elem98);
                }
                iprot.readListEnd();
              }
              struct.setTablet_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TABLET_MAX_COMPACTION_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_max_compaction_score = iprot.readI64();
              struct.setTablet_max_compaction_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTIVE_WORKGROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list100 = iprot.readListBegin();
                struct.active_workgroups = new java.util.ArrayList<io.datafibre.fibre.thrift.TWorkGroup>(_list100.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TWorkGroup _elem101;
                for (int _i102 = 0; _i102 < _list100.size; ++_i102)
                {
                  _elem101 = new io.datafibre.fibre.thrift.TWorkGroup();
                  _elem101.read(iprot);
                  struct.active_workgroups.add(_elem101);
                }
                iprot.readListEnd();
              }
              struct.setActive_workgroupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RESOURCE_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resource_usage = new io.datafibre.fibre.thrift.TResourceUsage();
              struct.resource_usage.read(iprot);
              struct.setResource_usageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DATACACHE_METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.datacache_metrics = new io.datafibre.fibre.thrift.TDataCacheMetrics();
              struct.datacache_metrics.read(iprot);
              struct.setDatacache_metricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TReportRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.backend != null) {
        oprot.writeFieldBegin(BACKEND_FIELD_DESC);
        struct.backend.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReport_version()) {
        oprot.writeFieldBegin(REPORT_VERSION_FIELD_DESC);
        oprot.writeI64(struct.report_version);
        oprot.writeFieldEnd();
      }
      if (struct.tasks != null) {
        if (struct.isSetTasks()) {
          oprot.writeFieldBegin(TASKS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, struct.tasks.size()));
            for (java.util.Map.Entry<io.datafibre.fibre.thrift.TTaskType, java.util.Set<java.lang.Long>> _iter103 : struct.tasks.entrySet())
            {
              oprot.writeI32(_iter103.getKey().getValue());
              {
                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, _iter103.getValue().size()));
                for (long _iter104 : _iter103.getValue())
                {
                  oprot.writeI64(_iter104);
                }
                oprot.writeSetEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tablets != null) {
        if (struct.isSetTablets()) {
          oprot.writeFieldBegin(TABLETS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.tablets.size()));
            for (java.util.Map.Entry<java.lang.Long, TTablet> _iter105 : struct.tablets.entrySet())
            {
              oprot.writeI64(_iter105.getKey());
              _iter105.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.disks != null) {
        if (struct.isSetDisks()) {
          oprot.writeFieldBegin(DISKS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.disks.size()));
            for (java.util.Map.Entry<java.lang.String, TDisk> _iter106 : struct.disks.entrySet())
            {
              oprot.writeString(_iter106.getKey());
              _iter106.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetForce_recovery()) {
        oprot.writeFieldBegin(FORCE_RECOVERY_FIELD_DESC);
        oprot.writeBool(struct.force_recovery);
        oprot.writeFieldEnd();
      }
      if (struct.tablet_list != null) {
        if (struct.isSetTablet_list()) {
          oprot.writeFieldBegin(TABLET_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tablet_list.size()));
            for (TTablet _iter107 : struct.tablet_list)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTablet_max_compaction_score()) {
        oprot.writeFieldBegin(TABLET_MAX_COMPACTION_SCORE_FIELD_DESC);
        oprot.writeI64(struct.tablet_max_compaction_score);
        oprot.writeFieldEnd();
      }
      if (struct.active_workgroups != null) {
        if (struct.isSetActive_workgroups()) {
          oprot.writeFieldBegin(ACTIVE_WORKGROUPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.active_workgroups.size()));
            for (io.datafibre.fibre.thrift.TWorkGroup _iter108 : struct.active_workgroups)
            {
              _iter108.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.resource_usage != null) {
        if (struct.isSetResource_usage()) {
          oprot.writeFieldBegin(RESOURCE_USAGE_FIELD_DESC);
          struct.resource_usage.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.datacache_metrics != null) {
        if (struct.isSetDatacache_metrics()) {
          oprot.writeFieldBegin(DATACACHE_METRICS_FIELD_DESC);
          struct.datacache_metrics.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TReportRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TReportRequestTupleScheme getScheme() {
      return new TReportRequestTupleScheme();
    }
  }

  private static class TReportRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TReportRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TReportRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.backend.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReport_version()) {
        optionals.set(0);
      }
      if (struct.isSetTasks()) {
        optionals.set(1);
      }
      if (struct.isSetTablets()) {
        optionals.set(2);
      }
      if (struct.isSetDisks()) {
        optionals.set(3);
      }
      if (struct.isSetForce_recovery()) {
        optionals.set(4);
      }
      if (struct.isSetTablet_list()) {
        optionals.set(5);
      }
      if (struct.isSetTablet_max_compaction_score()) {
        optionals.set(6);
      }
      if (struct.isSetActive_workgroups()) {
        optionals.set(7);
      }
      if (struct.isSetResource_usage()) {
        optionals.set(8);
      }
      if (struct.isSetDatacache_metrics()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetReport_version()) {
        oprot.writeI64(struct.report_version);
      }
      if (struct.isSetTasks()) {
        {
          oprot.writeI32(struct.tasks.size());
          for (java.util.Map.Entry<io.datafibre.fibre.thrift.TTaskType, java.util.Set<java.lang.Long>> _iter109 : struct.tasks.entrySet())
          {
            oprot.writeI32(_iter109.getKey().getValue());
            {
              oprot.writeI32(_iter109.getValue().size());
              for (long _iter110 : _iter109.getValue())
              {
                oprot.writeI64(_iter110);
              }
            }
          }
        }
      }
      if (struct.isSetTablets()) {
        {
          oprot.writeI32(struct.tablets.size());
          for (java.util.Map.Entry<java.lang.Long, TTablet> _iter111 : struct.tablets.entrySet())
          {
            oprot.writeI64(_iter111.getKey());
            _iter111.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetDisks()) {
        {
          oprot.writeI32(struct.disks.size());
          for (java.util.Map.Entry<java.lang.String, TDisk> _iter112 : struct.disks.entrySet())
          {
            oprot.writeString(_iter112.getKey());
            _iter112.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetForce_recovery()) {
        oprot.writeBool(struct.force_recovery);
      }
      if (struct.isSetTablet_list()) {
        {
          oprot.writeI32(struct.tablet_list.size());
          for (TTablet _iter113 : struct.tablet_list)
          {
            _iter113.write(oprot);
          }
        }
      }
      if (struct.isSetTablet_max_compaction_score()) {
        oprot.writeI64(struct.tablet_max_compaction_score);
      }
      if (struct.isSetActive_workgroups()) {
        {
          oprot.writeI32(struct.active_workgroups.size());
          for (io.datafibre.fibre.thrift.TWorkGroup _iter114 : struct.active_workgroups)
          {
            _iter114.write(oprot);
          }
        }
      }
      if (struct.isSetResource_usage()) {
        struct.resource_usage.write(oprot);
      }
      if (struct.isSetDatacache_metrics()) {
        struct.datacache_metrics.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TReportRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.backend = new io.datafibre.fibre.thrift.TBackend();
      struct.backend.read(iprot);
      struct.setBackendIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.report_version = iprot.readI64();
        struct.setReport_versionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map115 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET); 
          struct.tasks = new java.util.EnumMap<io.datafibre.fibre.thrift.TTaskType,java.util.Set<java.lang.Long>>(io.datafibre.fibre.thrift.TTaskType.class);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTaskType _key116;
          @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Long> _val117;
          for (int _i118 = 0; _i118 < _map115.size; ++_i118)
          {
            _key116 = io.datafibre.fibre.thrift.TTaskType.findByValue(iprot.readI32());
            {
              org.apache.thrift.protocol.TSet _set119 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I64);
              _val117 = new java.util.HashSet<java.lang.Long>(2*_set119.size);
              long _elem120;
              for (int _i121 = 0; _i121 < _set119.size; ++_i121)
              {
                _elem120 = iprot.readI64();
                _val117.add(_elem120);
              }
            }
            if (_key116 != null)
            {
              struct.tasks.put(_key116, _val117);
            }
          }
        }
        struct.setTasksIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map122 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT); 
          struct.tablets = new java.util.HashMap<java.lang.Long,TTablet>(2*_map122.size);
          long _key123;
          @org.apache.thrift.annotation.Nullable TTablet _val124;
          for (int _i125 = 0; _i125 < _map122.size; ++_i125)
          {
            _key123 = iprot.readI64();
            _val124 = new TTablet();
            _val124.read(iprot);
            struct.tablets.put(_key123, _val124);
          }
        }
        struct.setTabletsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map126 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
          struct.disks = new java.util.HashMap<java.lang.String,TDisk>(2*_map126.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key127;
          @org.apache.thrift.annotation.Nullable TDisk _val128;
          for (int _i129 = 0; _i129 < _map126.size; ++_i129)
          {
            _key127 = iprot.readString();
            _val128 = new TDisk();
            _val128.read(iprot);
            struct.disks.put(_key127, _val128);
          }
        }
        struct.setDisksIsSet(true);
      }
      if (incoming.get(4)) {
        struct.force_recovery = iprot.readBool();
        struct.setForce_recoveryIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list130 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.tablet_list = new java.util.ArrayList<TTablet>(_list130.size);
          @org.apache.thrift.annotation.Nullable TTablet _elem131;
          for (int _i132 = 0; _i132 < _list130.size; ++_i132)
          {
            _elem131 = new TTablet();
            _elem131.read(iprot);
            struct.tablet_list.add(_elem131);
          }
        }
        struct.setTablet_listIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tablet_max_compaction_score = iprot.readI64();
        struct.setTablet_max_compaction_scoreIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list133 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.active_workgroups = new java.util.ArrayList<io.datafibre.fibre.thrift.TWorkGroup>(_list133.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TWorkGroup _elem134;
          for (int _i135 = 0; _i135 < _list133.size; ++_i135)
          {
            _elem134 = new io.datafibre.fibre.thrift.TWorkGroup();
            _elem134.read(iprot);
            struct.active_workgroups.add(_elem134);
          }
        }
        struct.setActive_workgroupsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.resource_usage = new io.datafibre.fibre.thrift.TResourceUsage();
        struct.resource_usage.read(iprot);
        struct.setResource_usageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.datacache_metrics = new io.datafibre.fibre.thrift.TDataCacheMetrics();
        struct.datacache_metrics.read(iprot);
        struct.setDatacache_metricsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

