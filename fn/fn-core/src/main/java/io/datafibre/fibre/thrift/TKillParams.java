/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TKillParams implements org.apache.thrift.TBase<TKillParams, TKillParams._Fields>, java.io.Serializable, Cloneable, Comparable<TKillParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TKillParams");

  private static final org.apache.thrift.protocol.TField IS_KILL_CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("is_kill_connection", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField CONNECTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("connection_id", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TKillParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TKillParamsTupleSchemeFactory();

  public boolean is_kill_connection; // required
  public long connection_id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_KILL_CONNECTION((short)1, "is_kill_connection"),
    CONNECTION_ID((short)2, "connection_id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_KILL_CONNECTION
          return IS_KILL_CONNECTION;
        case 2: // CONNECTION_ID
          return CONNECTION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_KILL_CONNECTION_ISSET_ID = 0;
  private static final int __CONNECTION_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_KILL_CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("is_kill_connection", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CONNECTION_ID, new org.apache.thrift.meta_data.FieldMetaData("connection_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TKillParams.class, metaDataMap);
  }

  public TKillParams() {
  }

  public TKillParams(
    boolean is_kill_connection,
    long connection_id)
  {
    this();
    this.is_kill_connection = is_kill_connection;
    setIs_kill_connectionIsSet(true);
    this.connection_id = connection_id;
    setConnection_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TKillParams(TKillParams other) {
    __isset_bitfield = other.__isset_bitfield;
    this.is_kill_connection = other.is_kill_connection;
    this.connection_id = other.connection_id;
  }

  @Override
  public TKillParams deepCopy() {
    return new TKillParams(this);
  }

  @Override
  public void clear() {
    setIs_kill_connectionIsSet(false);
    this.is_kill_connection = false;
    setConnection_idIsSet(false);
    this.connection_id = 0;
  }

  public boolean isIs_kill_connection() {
    return this.is_kill_connection;
  }

  public TKillParams setIs_kill_connection(boolean is_kill_connection) {
    this.is_kill_connection = is_kill_connection;
    setIs_kill_connectionIsSet(true);
    return this;
  }

  public void unsetIs_kill_connection() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_KILL_CONNECTION_ISSET_ID);
  }

  /** Returns true if field is_kill_connection is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_kill_connection() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_KILL_CONNECTION_ISSET_ID);
  }

  public void setIs_kill_connectionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_KILL_CONNECTION_ISSET_ID, value);
  }

  public long getConnection_id() {
    return this.connection_id;
  }

  public TKillParams setConnection_id(long connection_id) {
    this.connection_id = connection_id;
    setConnection_idIsSet(true);
    return this;
  }

  public void unsetConnection_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNECTION_ID_ISSET_ID);
  }

  /** Returns true if field connection_id is set (has been assigned a value) and false otherwise */
  public boolean isSetConnection_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNECTION_ID_ISSET_ID);
  }

  public void setConnection_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNECTION_ID_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case IS_KILL_CONNECTION:
      if (value == null) {
        unsetIs_kill_connection();
      } else {
        setIs_kill_connection((java.lang.Boolean)value);
      }
      break;

    case CONNECTION_ID:
      if (value == null) {
        unsetConnection_id();
      } else {
        setConnection_id((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_KILL_CONNECTION:
      return isIs_kill_connection();

    case CONNECTION_ID:
      return getConnection_id();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IS_KILL_CONNECTION:
      return isSetIs_kill_connection();
    case CONNECTION_ID:
      return isSetConnection_id();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TKillParams)
      return this.equals((TKillParams)that);
    return false;
  }

  public boolean equals(TKillParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_is_kill_connection = true;
    boolean that_present_is_kill_connection = true;
    if (this_present_is_kill_connection || that_present_is_kill_connection) {
      if (!(this_present_is_kill_connection && that_present_is_kill_connection))
        return false;
      if (this.is_kill_connection != that.is_kill_connection)
        return false;
    }

    boolean this_present_connection_id = true;
    boolean that_present_connection_id = true;
    if (this_present_connection_id || that_present_connection_id) {
      if (!(this_present_connection_id && that_present_connection_id))
        return false;
      if (this.connection_id != that.connection_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((is_kill_connection) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(connection_id);

    return hashCode;
  }

  @Override
  public int compareTo(TKillParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetIs_kill_connection(), other.isSetIs_kill_connection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_kill_connection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_kill_connection, other.is_kill_connection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConnection_id(), other.isSetConnection_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnection_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection_id, other.connection_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TKillParams(");
    boolean first = true;

    sb.append("is_kill_connection:");
    sb.append(this.is_kill_connection);
    first = false;
    if (!first) sb.append(", ");
    sb.append("connection_id:");
    sb.append(this.connection_id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'is_kill_connection' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'connection_id' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TKillParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TKillParamsStandardScheme getScheme() {
      return new TKillParamsStandardScheme();
    }
  }

  private static class TKillParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TKillParams> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TKillParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_KILL_CONNECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_kill_connection = iprot.readBool();
              struct.setIs_kill_connectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONNECTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.connection_id = iprot.readI64();
              struct.setConnection_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIs_kill_connection()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_kill_connection' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetConnection_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'connection_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TKillParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_KILL_CONNECTION_FIELD_DESC);
      oprot.writeBool(struct.is_kill_connection);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONNECTION_ID_FIELD_DESC);
      oprot.writeI64(struct.connection_id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TKillParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TKillParamsTupleScheme getScheme() {
      return new TKillParamsTupleScheme();
    }
  }

  private static class TKillParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TKillParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TKillParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeBool(struct.is_kill_connection);
      oprot.writeI64(struct.connection_id);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TKillParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.is_kill_connection = iprot.readBool();
      struct.setIs_kill_connectionIsSet(true);
      struct.connection_id = iprot.readI64();
      struct.setConnection_idIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

