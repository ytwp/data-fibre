/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TUpdateResourceUsageRequest implements org.apache.thrift.TBase<TUpdateResourceUsageRequest, TUpdateResourceUsageRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TUpdateResourceUsageRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUpdateResourceUsageRequest");

  private static final org.apache.thrift.protocol.TField BACKEND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_usage", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TUpdateResourceUsageRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TUpdateResourceUsageRequestTupleSchemeFactory();

  public long backend_id; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TResourceUsage resource_usage; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BACKEND_ID((short)1, "backend_id"),
    RESOURCE_USAGE((short)2, "resource_usage");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BACKEND_ID
          return BACKEND_ID;
        case 2: // RESOURCE_USAGE
          return RESOURCE_USAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BACKEND_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BACKEND_ID,_Fields.RESOURCE_USAGE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BACKEND_ID, new org.apache.thrift.meta_data.FieldMetaData("backend_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESOURCE_USAGE, new org.apache.thrift.meta_data.FieldMetaData("resource_usage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TResourceUsage.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUpdateResourceUsageRequest.class, metaDataMap);
  }

  public TUpdateResourceUsageRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUpdateResourceUsageRequest(TUpdateResourceUsageRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.backend_id = other.backend_id;
    if (other.isSetResource_usage()) {
      this.resource_usage = new com.starrocks.thrift.TResourceUsage(other.resource_usage);
    }
  }

  @Override
  public TUpdateResourceUsageRequest deepCopy() {
    return new TUpdateResourceUsageRequest(this);
  }

  @Override
  public void clear() {
    setBackend_idIsSet(false);
    this.backend_id = 0;
    this.resource_usage = null;
  }

  public long getBackend_id() {
    return this.backend_id;
  }

  public TUpdateResourceUsageRequest setBackend_id(long backend_id) {
    this.backend_id = backend_id;
    setBackend_idIsSet(true);
    return this;
  }

  public void unsetBackend_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BACKEND_ID_ISSET_ID);
  }

  /** Returns true if field backend_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BACKEND_ID_ISSET_ID);
  }

  public void setBackend_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BACKEND_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TResourceUsage getResource_usage() {
    return this.resource_usage;
  }

  public TUpdateResourceUsageRequest setResource_usage(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TResourceUsage resource_usage) {
    this.resource_usage = resource_usage;
    return this;
  }

  public void unsetResource_usage() {
    this.resource_usage = null;
  }

  /** Returns true if field resource_usage is set (has been assigned a value) and false otherwise */
  public boolean isSetResource_usage() {
    return this.resource_usage != null;
  }

  public void setResource_usageIsSet(boolean value) {
    if (!value) {
      this.resource_usage = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case BACKEND_ID:
      if (value == null) {
        unsetBackend_id();
      } else {
        setBackend_id((java.lang.Long)value);
      }
      break;

    case RESOURCE_USAGE:
      if (value == null) {
        unsetResource_usage();
      } else {
        setResource_usage((com.starrocks.thrift.TResourceUsage)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BACKEND_ID:
      return getBackend_id();

    case RESOURCE_USAGE:
      return getResource_usage();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BACKEND_ID:
      return isSetBackend_id();
    case RESOURCE_USAGE:
      return isSetResource_usage();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TUpdateResourceUsageRequest)
      return this.equals((TUpdateResourceUsageRequest)that);
    return false;
  }

  public boolean equals(TUpdateResourceUsageRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_backend_id = true && this.isSetBackend_id();
    boolean that_present_backend_id = true && that.isSetBackend_id();
    if (this_present_backend_id || that_present_backend_id) {
      if (!(this_present_backend_id && that_present_backend_id))
        return false;
      if (this.backend_id != that.backend_id)
        return false;
    }

    boolean this_present_resource_usage = true && this.isSetResource_usage();
    boolean that_present_resource_usage = true && that.isSetResource_usage();
    if (this_present_resource_usage || that_present_resource_usage) {
      if (!(this_present_resource_usage && that_present_resource_usage))
        return false;
      if (!this.resource_usage.equals(that.resource_usage))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBackend_id()) ? 131071 : 524287);
    if (isSetBackend_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(backend_id);

    hashCode = hashCode * 8191 + ((isSetResource_usage()) ? 131071 : 524287);
    if (isSetResource_usage())
      hashCode = hashCode * 8191 + resource_usage.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TUpdateResourceUsageRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetBackend_id(), other.isSetBackend_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_id, other.backend_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResource_usage(), other.isSetResource_usage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource_usage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_usage, other.resource_usage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TUpdateResourceUsageRequest(");
    boolean first = true;

    if (isSetBackend_id()) {
      sb.append("backend_id:");
      sb.append(this.backend_id);
      first = false;
    }
    if (isSetResource_usage()) {
      if (!first) sb.append(", ");
      sb.append("resource_usage:");
      if (this.resource_usage == null) {
        sb.append("null");
      } else {
        sb.append(this.resource_usage);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (resource_usage != null) {
      resource_usage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUpdateResourceUsageRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TUpdateResourceUsageRequestStandardScheme getScheme() {
      return new TUpdateResourceUsageRequestStandardScheme();
    }
  }

  private static class TUpdateResourceUsageRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TUpdateResourceUsageRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TUpdateResourceUsageRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BACKEND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.backend_id = iprot.readI64();
              struct.setBackend_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCE_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resource_usage = new com.starrocks.thrift.TResourceUsage();
              struct.resource_usage.read(iprot);
              struct.setResource_usageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TUpdateResourceUsageRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetBackend_id()) {
        oprot.writeFieldBegin(BACKEND_ID_FIELD_DESC);
        oprot.writeI64(struct.backend_id);
        oprot.writeFieldEnd();
      }
      if (struct.resource_usage != null) {
        if (struct.isSetResource_usage()) {
          oprot.writeFieldBegin(RESOURCE_USAGE_FIELD_DESC);
          struct.resource_usage.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUpdateResourceUsageRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TUpdateResourceUsageRequestTupleScheme getScheme() {
      return new TUpdateResourceUsageRequestTupleScheme();
    }
  }

  private static class TUpdateResourceUsageRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TUpdateResourceUsageRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUpdateResourceUsageRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBackend_id()) {
        optionals.set(0);
      }
      if (struct.isSetResource_usage()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBackend_id()) {
        oprot.writeI64(struct.backend_id);
      }
      if (struct.isSetResource_usage()) {
        struct.resource_usage.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUpdateResourceUsageRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.backend_id = iprot.readI64();
        struct.setBackend_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resource_usage = new com.starrocks.thrift.TResourceUsage();
        struct.resource_usage.read(iprot);
        struct.setResource_usageIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

