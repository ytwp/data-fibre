/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TTabletSchedule implements org.apache.thrift.TBase<TTabletSchedule, TTabletSchedule._Fields>, java.io.Serializable, Cloneable, Comparable<TTabletSchedule> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTabletSchedule");

  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TABLET_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_status", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField SCHEDULE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("schedule_time", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("finish_time", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField CLONE_SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("clone_src", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField CLONE_DEST_FIELD_DESC = new org.apache.thrift.protocol.TField("clone_dest", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField CLONE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("clone_bytes", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField CLONE_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("clone_duration", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("error_msg", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTabletScheduleStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTabletScheduleTupleSchemeFactory();

  public long table_id; // optional
  public long partition_id; // optional
  public long tablet_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String type; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String priority; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String state; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String tablet_status; // optional
  public double create_time; // optional
  public double schedule_time; // optional
  public double finish_time; // optional
  public long clone_src; // optional
  public long clone_dest; // optional
  public long clone_bytes; // optional
  public double clone_duration; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String error_msg; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_ID((short)1, "table_id"),
    PARTITION_ID((short)2, "partition_id"),
    TABLET_ID((short)3, "tablet_id"),
    TYPE((short)4, "type"),
    PRIORITY((short)5, "priority"),
    STATE((short)6, "state"),
    TABLET_STATUS((short)7, "tablet_status"),
    CREATE_TIME((short)8, "create_time"),
    SCHEDULE_TIME((short)9, "schedule_time"),
    FINISH_TIME((short)10, "finish_time"),
    CLONE_SRC((short)11, "clone_src"),
    CLONE_DEST((short)12, "clone_dest"),
    CLONE_BYTES((short)13, "clone_bytes"),
    CLONE_DURATION((short)14, "clone_duration"),
    ERROR_MSG((short)15, "error_msg");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_ID
          return TABLE_ID;
        case 2: // PARTITION_ID
          return PARTITION_ID;
        case 3: // TABLET_ID
          return TABLET_ID;
        case 4: // TYPE
          return TYPE;
        case 5: // PRIORITY
          return PRIORITY;
        case 6: // STATE
          return STATE;
        case 7: // TABLET_STATUS
          return TABLET_STATUS;
        case 8: // CREATE_TIME
          return CREATE_TIME;
        case 9: // SCHEDULE_TIME
          return SCHEDULE_TIME;
        case 10: // FINISH_TIME
          return FINISH_TIME;
        case 11: // CLONE_SRC
          return CLONE_SRC;
        case 12: // CLONE_DEST
          return CLONE_DEST;
        case 13: // CLONE_BYTES
          return CLONE_BYTES;
        case 14: // CLONE_DURATION
          return CLONE_DURATION;
        case 15: // ERROR_MSG
          return ERROR_MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLE_ID_ISSET_ID = 0;
  private static final int __PARTITION_ID_ISSET_ID = 1;
  private static final int __TABLET_ID_ISSET_ID = 2;
  private static final int __CREATE_TIME_ISSET_ID = 3;
  private static final int __SCHEDULE_TIME_ISSET_ID = 4;
  private static final int __FINISH_TIME_ISSET_ID = 5;
  private static final int __CLONE_SRC_ISSET_ID = 6;
  private static final int __CLONE_DEST_ISSET_ID = 7;
  private static final int __CLONE_BYTES_ISSET_ID = 8;
  private static final int __CLONE_DURATION_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TABLE_ID,_Fields.PARTITION_ID,_Fields.TABLET_ID,_Fields.TYPE,_Fields.PRIORITY,_Fields.STATE,_Fields.TABLET_STATUS,_Fields.CREATE_TIME,_Fields.SCHEDULE_TIME,_Fields.FINISH_TIME,_Fields.CLONE_SRC,_Fields.CLONE_DEST,_Fields.CLONE_BYTES,_Fields.CLONE_DURATION,_Fields.ERROR_MSG};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLET_STATUS, new org.apache.thrift.meta_data.FieldMetaData("tablet_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SCHEDULE_TIME, new org.apache.thrift.meta_data.FieldMetaData("schedule_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("finish_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLONE_SRC, new org.apache.thrift.meta_data.FieldMetaData("clone_src", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLONE_DEST, new org.apache.thrift.meta_data.FieldMetaData("clone_dest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLONE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("clone_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLONE_DURATION, new org.apache.thrift.meta_data.FieldMetaData("clone_duration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("error_msg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTabletSchedule.class, metaDataMap);
  }

  public TTabletSchedule() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTabletSchedule(TTabletSchedule other) {
    __isset_bitfield = other.__isset_bitfield;
    this.table_id = other.table_id;
    this.partition_id = other.partition_id;
    this.tablet_id = other.tablet_id;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetPriority()) {
      this.priority = other.priority;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetTablet_status()) {
      this.tablet_status = other.tablet_status;
    }
    this.create_time = other.create_time;
    this.schedule_time = other.schedule_time;
    this.finish_time = other.finish_time;
    this.clone_src = other.clone_src;
    this.clone_dest = other.clone_dest;
    this.clone_bytes = other.clone_bytes;
    this.clone_duration = other.clone_duration;
    if (other.isSetError_msg()) {
      this.error_msg = other.error_msg;
    }
  }

  @Override
  public TTabletSchedule deepCopy() {
    return new TTabletSchedule(this);
  }

  @Override
  public void clear() {
    setTable_idIsSet(false);
    this.table_id = 0;
    setPartition_idIsSet(false);
    this.partition_id = 0;
    setTablet_idIsSet(false);
    this.tablet_id = 0;
    this.type = null;
    this.priority = null;
    this.state = null;
    this.tablet_status = null;
    setCreate_timeIsSet(false);
    this.create_time = 0.0;
    setSchedule_timeIsSet(false);
    this.schedule_time = 0.0;
    setFinish_timeIsSet(false);
    this.finish_time = 0.0;
    setClone_srcIsSet(false);
    this.clone_src = 0;
    setClone_destIsSet(false);
    this.clone_dest = 0;
    setClone_bytesIsSet(false);
    this.clone_bytes = 0;
    setClone_durationIsSet(false);
    this.clone_duration = 0.0;
    this.error_msg = null;
  }

  public long getTable_id() {
    return this.table_id;
  }

  public TTabletSchedule setTable_id(long table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public TTabletSchedule setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    return this;
  }

  public void unsetPartition_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  public long getTablet_id() {
    return this.tablet_id;
  }

  public TTabletSchedule setTablet_id(long tablet_id) {
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    return this;
  }

  public void unsetTablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getType() {
    return this.type;
  }

  public TTabletSchedule setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPriority() {
    return this.priority;
  }

  public TTabletSchedule setPriority(@org.apache.thrift.annotation.Nullable java.lang.String priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getState() {
    return this.state;
  }

  public TTabletSchedule setState(@org.apache.thrift.annotation.Nullable java.lang.String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTablet_status() {
    return this.tablet_status;
  }

  public TTabletSchedule setTablet_status(@org.apache.thrift.annotation.Nullable java.lang.String tablet_status) {
    this.tablet_status = tablet_status;
    return this;
  }

  public void unsetTablet_status() {
    this.tablet_status = null;
  }

  /** Returns true if field tablet_status is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_status() {
    return this.tablet_status != null;
  }

  public void setTablet_statusIsSet(boolean value) {
    if (!value) {
      this.tablet_status = null;
    }
  }

  public double getCreate_time() {
    return this.create_time;
  }

  public TTabletSchedule setCreate_time(double create_time) {
    this.create_time = create_time;
    setCreate_timeIsSet(true);
    return this;
  }

  public void unsetCreate_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  public void setCreate_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATE_TIME_ISSET_ID, value);
  }

  public double getSchedule_time() {
    return this.schedule_time;
  }

  public TTabletSchedule setSchedule_time(double schedule_time) {
    this.schedule_time = schedule_time;
    setSchedule_timeIsSet(true);
    return this;
  }

  public void unsetSchedule_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCHEDULE_TIME_ISSET_ID);
  }

  /** Returns true if field schedule_time is set (has been assigned a value) and false otherwise */
  public boolean isSetSchedule_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCHEDULE_TIME_ISSET_ID);
  }

  public void setSchedule_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCHEDULE_TIME_ISSET_ID, value);
  }

  public double getFinish_time() {
    return this.finish_time;
  }

  public TTabletSchedule setFinish_time(double finish_time) {
    this.finish_time = finish_time;
    setFinish_timeIsSet(true);
    return this;
  }

  public void unsetFinish_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FINISH_TIME_ISSET_ID);
  }

  /** Returns true if field finish_time is set (has been assigned a value) and false otherwise */
  public boolean isSetFinish_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FINISH_TIME_ISSET_ID);
  }

  public void setFinish_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FINISH_TIME_ISSET_ID, value);
  }

  public long getClone_src() {
    return this.clone_src;
  }

  public TTabletSchedule setClone_src(long clone_src) {
    this.clone_src = clone_src;
    setClone_srcIsSet(true);
    return this;
  }

  public void unsetClone_src() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLONE_SRC_ISSET_ID);
  }

  /** Returns true if field clone_src is set (has been assigned a value) and false otherwise */
  public boolean isSetClone_src() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLONE_SRC_ISSET_ID);
  }

  public void setClone_srcIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLONE_SRC_ISSET_ID, value);
  }

  public long getClone_dest() {
    return this.clone_dest;
  }

  public TTabletSchedule setClone_dest(long clone_dest) {
    this.clone_dest = clone_dest;
    setClone_destIsSet(true);
    return this;
  }

  public void unsetClone_dest() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLONE_DEST_ISSET_ID);
  }

  /** Returns true if field clone_dest is set (has been assigned a value) and false otherwise */
  public boolean isSetClone_dest() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLONE_DEST_ISSET_ID);
  }

  public void setClone_destIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLONE_DEST_ISSET_ID, value);
  }

  public long getClone_bytes() {
    return this.clone_bytes;
  }

  public TTabletSchedule setClone_bytes(long clone_bytes) {
    this.clone_bytes = clone_bytes;
    setClone_bytesIsSet(true);
    return this;
  }

  public void unsetClone_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLONE_BYTES_ISSET_ID);
  }

  /** Returns true if field clone_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetClone_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLONE_BYTES_ISSET_ID);
  }

  public void setClone_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLONE_BYTES_ISSET_ID, value);
  }

  public double getClone_duration() {
    return this.clone_duration;
  }

  public TTabletSchedule setClone_duration(double clone_duration) {
    this.clone_duration = clone_duration;
    setClone_durationIsSet(true);
    return this;
  }

  public void unsetClone_duration() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLONE_DURATION_ISSET_ID);
  }

  /** Returns true if field clone_duration is set (has been assigned a value) and false otherwise */
  public boolean isSetClone_duration() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLONE_DURATION_ISSET_ID);
  }

  public void setClone_durationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLONE_DURATION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getError_msg() {
    return this.error_msg;
  }

  public TTabletSchedule setError_msg(@org.apache.thrift.annotation.Nullable java.lang.String error_msg) {
    this.error_msg = error_msg;
    return this;
  }

  public void unsetError_msg() {
    this.error_msg = null;
  }

  /** Returns true if field error_msg is set (has been assigned a value) and false otherwise */
  public boolean isSetError_msg() {
    return this.error_msg != null;
  }

  public void setError_msgIsSet(boolean value) {
    if (!value) {
      this.error_msg = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((java.lang.Long)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((java.lang.Long)value);
      }
      break;

    case TABLET_ID:
      if (value == null) {
        unsetTablet_id();
      } else {
        setTablet_id((java.lang.Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((java.lang.String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.String)value);
      }
      break;

    case TABLET_STATUS:
      if (value == null) {
        unsetTablet_status();
      } else {
        setTablet_status((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((java.lang.Double)value);
      }
      break;

    case SCHEDULE_TIME:
      if (value == null) {
        unsetSchedule_time();
      } else {
        setSchedule_time((java.lang.Double)value);
      }
      break;

    case FINISH_TIME:
      if (value == null) {
        unsetFinish_time();
      } else {
        setFinish_time((java.lang.Double)value);
      }
      break;

    case CLONE_SRC:
      if (value == null) {
        unsetClone_src();
      } else {
        setClone_src((java.lang.Long)value);
      }
      break;

    case CLONE_DEST:
      if (value == null) {
        unsetClone_dest();
      } else {
        setClone_dest((java.lang.Long)value);
      }
      break;

    case CLONE_BYTES:
      if (value == null) {
        unsetClone_bytes();
      } else {
        setClone_bytes((java.lang.Long)value);
      }
      break;

    case CLONE_DURATION:
      if (value == null) {
        unsetClone_duration();
      } else {
        setClone_duration((java.lang.Double)value);
      }
      break;

    case ERROR_MSG:
      if (value == null) {
        unsetError_msg();
      } else {
        setError_msg((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_ID:
      return getTable_id();

    case PARTITION_ID:
      return getPartition_id();

    case TABLET_ID:
      return getTablet_id();

    case TYPE:
      return getType();

    case PRIORITY:
      return getPriority();

    case STATE:
      return getState();

    case TABLET_STATUS:
      return getTablet_status();

    case CREATE_TIME:
      return getCreate_time();

    case SCHEDULE_TIME:
      return getSchedule_time();

    case FINISH_TIME:
      return getFinish_time();

    case CLONE_SRC:
      return getClone_src();

    case CLONE_DEST:
      return getClone_dest();

    case CLONE_BYTES:
      return getClone_bytes();

    case CLONE_DURATION:
      return getClone_duration();

    case ERROR_MSG:
      return getError_msg();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLE_ID:
      return isSetTable_id();
    case PARTITION_ID:
      return isSetPartition_id();
    case TABLET_ID:
      return isSetTablet_id();
    case TYPE:
      return isSetType();
    case PRIORITY:
      return isSetPriority();
    case STATE:
      return isSetState();
    case TABLET_STATUS:
      return isSetTablet_status();
    case CREATE_TIME:
      return isSetCreate_time();
    case SCHEDULE_TIME:
      return isSetSchedule_time();
    case FINISH_TIME:
      return isSetFinish_time();
    case CLONE_SRC:
      return isSetClone_src();
    case CLONE_DEST:
      return isSetClone_dest();
    case CLONE_BYTES:
      return isSetClone_bytes();
    case CLONE_DURATION:
      return isSetClone_duration();
    case ERROR_MSG:
      return isSetError_msg();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTabletSchedule)
      return this.equals((TTabletSchedule)that);
    return false;
  }

  public boolean equals(TTabletSchedule that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_table_id = true && this.isSetTable_id();
    boolean that_present_table_id = true && that.isSetTable_id();
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    boolean this_present_partition_id = true && this.isSetPartition_id();
    boolean that_present_partition_id = true && that.isSetPartition_id();
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_tablet_id = true && this.isSetTablet_id();
    boolean that_present_tablet_id = true && that.isSetTablet_id();
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_tablet_status = true && this.isSetTablet_status();
    boolean that_present_tablet_status = true && that.isSetTablet_status();
    if (this_present_tablet_status || that_present_tablet_status) {
      if (!(this_present_tablet_status && that_present_tablet_status))
        return false;
      if (!this.tablet_status.equals(that.tablet_status))
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (this.create_time != that.create_time)
        return false;
    }

    boolean this_present_schedule_time = true && this.isSetSchedule_time();
    boolean that_present_schedule_time = true && that.isSetSchedule_time();
    if (this_present_schedule_time || that_present_schedule_time) {
      if (!(this_present_schedule_time && that_present_schedule_time))
        return false;
      if (this.schedule_time != that.schedule_time)
        return false;
    }

    boolean this_present_finish_time = true && this.isSetFinish_time();
    boolean that_present_finish_time = true && that.isSetFinish_time();
    if (this_present_finish_time || that_present_finish_time) {
      if (!(this_present_finish_time && that_present_finish_time))
        return false;
      if (this.finish_time != that.finish_time)
        return false;
    }

    boolean this_present_clone_src = true && this.isSetClone_src();
    boolean that_present_clone_src = true && that.isSetClone_src();
    if (this_present_clone_src || that_present_clone_src) {
      if (!(this_present_clone_src && that_present_clone_src))
        return false;
      if (this.clone_src != that.clone_src)
        return false;
    }

    boolean this_present_clone_dest = true && this.isSetClone_dest();
    boolean that_present_clone_dest = true && that.isSetClone_dest();
    if (this_present_clone_dest || that_present_clone_dest) {
      if (!(this_present_clone_dest && that_present_clone_dest))
        return false;
      if (this.clone_dest != that.clone_dest)
        return false;
    }

    boolean this_present_clone_bytes = true && this.isSetClone_bytes();
    boolean that_present_clone_bytes = true && that.isSetClone_bytes();
    if (this_present_clone_bytes || that_present_clone_bytes) {
      if (!(this_present_clone_bytes && that_present_clone_bytes))
        return false;
      if (this.clone_bytes != that.clone_bytes)
        return false;
    }

    boolean this_present_clone_duration = true && this.isSetClone_duration();
    boolean that_present_clone_duration = true && that.isSetClone_duration();
    if (this_present_clone_duration || that_present_clone_duration) {
      if (!(this_present_clone_duration && that_present_clone_duration))
        return false;
      if (this.clone_duration != that.clone_duration)
        return false;
    }

    boolean this_present_error_msg = true && this.isSetError_msg();
    boolean that_present_error_msg = true && that.isSetError_msg();
    if (this_present_error_msg || that_present_error_msg) {
      if (!(this_present_error_msg && that_present_error_msg))
        return false;
      if (!this.error_msg.equals(that.error_msg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTable_id()) ? 131071 : 524287);
    if (isSetTable_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_id);

    hashCode = hashCode * 8191 + ((isSetPartition_id()) ? 131071 : 524287);
    if (isSetPartition_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_id);

    hashCode = hashCode * 8191 + ((isSetTablet_id()) ? 131071 : 524287);
    if (isSetTablet_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tablet_id);

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
    if (isSetPriority())
      hashCode = hashCode * 8191 + priority.hashCode();

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.hashCode();

    hashCode = hashCode * 8191 + ((isSetTablet_status()) ? 131071 : 524287);
    if (isSetTablet_status())
      hashCode = hashCode * 8191 + tablet_status.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreate_time()) ? 131071 : 524287);
    if (isSetCreate_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(create_time);

    hashCode = hashCode * 8191 + ((isSetSchedule_time()) ? 131071 : 524287);
    if (isSetSchedule_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(schedule_time);

    hashCode = hashCode * 8191 + ((isSetFinish_time()) ? 131071 : 524287);
    if (isSetFinish_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(finish_time);

    hashCode = hashCode * 8191 + ((isSetClone_src()) ? 131071 : 524287);
    if (isSetClone_src())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(clone_src);

    hashCode = hashCode * 8191 + ((isSetClone_dest()) ? 131071 : 524287);
    if (isSetClone_dest())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(clone_dest);

    hashCode = hashCode * 8191 + ((isSetClone_bytes()) ? 131071 : 524287);
    if (isSetClone_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(clone_bytes);

    hashCode = hashCode * 8191 + ((isSetClone_duration()) ? 131071 : 524287);
    if (isSetClone_duration())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(clone_duration);

    hashCode = hashCode * 8191 + ((isSetError_msg()) ? 131071 : 524287);
    if (isSetError_msg())
      hashCode = hashCode * 8191 + error_msg.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TTabletSchedule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTable_id(), other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_id(), other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_id(), other.isSetTablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPriority(), other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_status(), other.isSetTablet_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_status, other.tablet_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreate_time(), other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchedule_time(), other.isSetSchedule_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchedule_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedule_time, other.schedule_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFinish_time(), other.isSetFinish_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinish_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish_time, other.finish_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClone_src(), other.isSetClone_src());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClone_src()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clone_src, other.clone_src);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClone_dest(), other.isSetClone_dest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClone_dest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clone_dest, other.clone_dest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClone_bytes(), other.isSetClone_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClone_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clone_bytes, other.clone_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClone_duration(), other.isSetClone_duration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClone_duration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clone_duration, other.clone_duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetError_msg(), other.isSetError_msg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_msg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_msg, other.error_msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTabletSchedule(");
    boolean first = true;

    if (isSetTable_id()) {
      sb.append("table_id:");
      sb.append(this.table_id);
      first = false;
    }
    if (isSetPartition_id()) {
      if (!first) sb.append(", ");
      sb.append("partition_id:");
      sb.append(this.partition_id);
      first = false;
    }
    if (isSetTablet_id()) {
      if (!first) sb.append(", ");
      sb.append("tablet_id:");
      sb.append(this.tablet_id);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      if (this.priority == null) {
        sb.append("null");
      } else {
        sb.append(this.priority);
      }
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetTablet_status()) {
      if (!first) sb.append(", ");
      sb.append("tablet_status:");
      if (this.tablet_status == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet_status);
      }
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      sb.append(this.create_time);
      first = false;
    }
    if (isSetSchedule_time()) {
      if (!first) sb.append(", ");
      sb.append("schedule_time:");
      sb.append(this.schedule_time);
      first = false;
    }
    if (isSetFinish_time()) {
      if (!first) sb.append(", ");
      sb.append("finish_time:");
      sb.append(this.finish_time);
      first = false;
    }
    if (isSetClone_src()) {
      if (!first) sb.append(", ");
      sb.append("clone_src:");
      sb.append(this.clone_src);
      first = false;
    }
    if (isSetClone_dest()) {
      if (!first) sb.append(", ");
      sb.append("clone_dest:");
      sb.append(this.clone_dest);
      first = false;
    }
    if (isSetClone_bytes()) {
      if (!first) sb.append(", ");
      sb.append("clone_bytes:");
      sb.append(this.clone_bytes);
      first = false;
    }
    if (isSetClone_duration()) {
      if (!first) sb.append(", ");
      sb.append("clone_duration:");
      sb.append(this.clone_duration);
      first = false;
    }
    if (isSetError_msg()) {
      if (!first) sb.append(", ");
      sb.append("error_msg:");
      if (this.error_msg == null) {
        sb.append("null");
      } else {
        sb.append(this.error_msg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTabletScheduleStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTabletScheduleStandardScheme getScheme() {
      return new TTabletScheduleStandardScheme();
    }
  }

  private static class TTabletScheduleStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTabletSchedule> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTabletSchedule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_id = iprot.readI64();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.priority = iprot.readString();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TABLET_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tablet_status = iprot.readString();
              struct.setTablet_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.create_time = iprot.readDouble();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SCHEDULE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.schedule_time = iprot.readDouble();
              struct.setSchedule_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.finish_time = iprot.readDouble();
              struct.setFinish_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CLONE_SRC
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.clone_src = iprot.readI64();
              struct.setClone_srcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CLONE_DEST
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.clone_dest = iprot.readI64();
              struct.setClone_destIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CLONE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.clone_bytes = iprot.readI64();
              struct.setClone_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CLONE_DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.clone_duration = iprot.readDouble();
              struct.setClone_durationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ERROR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error_msg = iprot.readString();
              struct.setError_msgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTabletSchedule struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTable_id()) {
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeI64(struct.table_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartition_id()) {
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI64(struct.partition_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTablet_id()) {
        oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
        oprot.writeI64(struct.tablet_id);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.priority != null) {
        if (struct.isSetPriority()) {
          oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
          oprot.writeString(struct.priority);
          oprot.writeFieldEnd();
        }
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tablet_status != null) {
        if (struct.isSetTablet_status()) {
          oprot.writeFieldBegin(TABLET_STATUS_FIELD_DESC);
          oprot.writeString(struct.tablet_status);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreate_time()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeDouble(struct.create_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSchedule_time()) {
        oprot.writeFieldBegin(SCHEDULE_TIME_FIELD_DESC);
        oprot.writeDouble(struct.schedule_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFinish_time()) {
        oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
        oprot.writeDouble(struct.finish_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClone_src()) {
        oprot.writeFieldBegin(CLONE_SRC_FIELD_DESC);
        oprot.writeI64(struct.clone_src);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClone_dest()) {
        oprot.writeFieldBegin(CLONE_DEST_FIELD_DESC);
        oprot.writeI64(struct.clone_dest);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClone_bytes()) {
        oprot.writeFieldBegin(CLONE_BYTES_FIELD_DESC);
        oprot.writeI64(struct.clone_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClone_duration()) {
        oprot.writeFieldBegin(CLONE_DURATION_FIELD_DESC);
        oprot.writeDouble(struct.clone_duration);
        oprot.writeFieldEnd();
      }
      if (struct.error_msg != null) {
        if (struct.isSetError_msg()) {
          oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
          oprot.writeString(struct.error_msg);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTabletScheduleTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTabletScheduleTupleScheme getScheme() {
      return new TTabletScheduleTupleScheme();
    }
  }

  private static class TTabletScheduleTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTabletSchedule> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTabletSchedule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTable_id()) {
        optionals.set(0);
      }
      if (struct.isSetPartition_id()) {
        optionals.set(1);
      }
      if (struct.isSetTablet_id()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetPriority()) {
        optionals.set(4);
      }
      if (struct.isSetState()) {
        optionals.set(5);
      }
      if (struct.isSetTablet_status()) {
        optionals.set(6);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(7);
      }
      if (struct.isSetSchedule_time()) {
        optionals.set(8);
      }
      if (struct.isSetFinish_time()) {
        optionals.set(9);
      }
      if (struct.isSetClone_src()) {
        optionals.set(10);
      }
      if (struct.isSetClone_dest()) {
        optionals.set(11);
      }
      if (struct.isSetClone_bytes()) {
        optionals.set(12);
      }
      if (struct.isSetClone_duration()) {
        optionals.set(13);
      }
      if (struct.isSetError_msg()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetTable_id()) {
        oprot.writeI64(struct.table_id);
      }
      if (struct.isSetPartition_id()) {
        oprot.writeI64(struct.partition_id);
      }
      if (struct.isSetTablet_id()) {
        oprot.writeI64(struct.tablet_id);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetPriority()) {
        oprot.writeString(struct.priority);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetTablet_status()) {
        oprot.writeString(struct.tablet_status);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeDouble(struct.create_time);
      }
      if (struct.isSetSchedule_time()) {
        oprot.writeDouble(struct.schedule_time);
      }
      if (struct.isSetFinish_time()) {
        oprot.writeDouble(struct.finish_time);
      }
      if (struct.isSetClone_src()) {
        oprot.writeI64(struct.clone_src);
      }
      if (struct.isSetClone_dest()) {
        oprot.writeI64(struct.clone_dest);
      }
      if (struct.isSetClone_bytes()) {
        oprot.writeI64(struct.clone_bytes);
      }
      if (struct.isSetClone_duration()) {
        oprot.writeDouble(struct.clone_duration);
      }
      if (struct.isSetError_msg()) {
        oprot.writeString(struct.error_msg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTabletSchedule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.table_id = iprot.readI64();
        struct.setTable_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partition_id = iprot.readI64();
        struct.setPartition_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tablet_id = iprot.readI64();
        struct.setTablet_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.priority = iprot.readString();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tablet_status = iprot.readString();
        struct.setTablet_statusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.create_time = iprot.readDouble();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.schedule_time = iprot.readDouble();
        struct.setSchedule_timeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.finish_time = iprot.readDouble();
        struct.setFinish_timeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.clone_src = iprot.readI64();
        struct.setClone_srcIsSet(true);
      }
      if (incoming.get(11)) {
        struct.clone_dest = iprot.readI64();
        struct.setClone_destIsSet(true);
      }
      if (incoming.get(12)) {
        struct.clone_bytes = iprot.readI64();
        struct.setClone_bytesIsSet(true);
      }
      if (incoming.get(13)) {
        struct.clone_duration = iprot.readDouble();
        struct.setClone_durationIsSet(true);
      }
      if (incoming.get(14)) {
        struct.error_msg = iprot.readString();
        struct.setError_msgIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

