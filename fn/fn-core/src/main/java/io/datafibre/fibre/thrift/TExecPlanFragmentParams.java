/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TExecPlanFragmentParams implements org.apache.thrift.TBase<TExecPlanFragmentParams, TExecPlanFragmentParams._Fields>, java.io.Serializable, Cloneable, Comparable<TExecPlanFragmentParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecPlanFragmentParams");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DESC_TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("desc_tbl", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField COORD_FIELD_DESC = new org.apache.thrift.protocol.TField("coord", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField BACKEND_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_num", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField QUERY_GLOBALS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_globals", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField QUERY_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_options", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField ENABLE_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_profile", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField RESOURCE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_info", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField IMPORT_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("import_label", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LOAD_JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("load_job_id", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField LOAD_ERROR_HUB_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("load_error_hub_info", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField IS_PIPELINE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_pipeline", org.apache.thrift.protocol.TType.BOOL, (short)50);
  private static final org.apache.thrift.protocol.TField PIPELINE_DOP_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeline_dop", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField PER_SCAN_NODE_DOP_FIELD_DESC = new org.apache.thrift.protocol.TField("per_scan_node_dop", org.apache.thrift.protocol.TType.MAP, (short)52);
  private static final org.apache.thrift.protocol.TField WORKGROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("workgroup", org.apache.thrift.protocol.TType.STRUCT, (short)53);
  private static final org.apache.thrift.protocol.TField ENABLE_RESOURCE_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_resource_group", org.apache.thrift.protocol.TType.BOOL, (short)54);
  private static final org.apache.thrift.protocol.TField FUNC_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("func_version", org.apache.thrift.protocol.TType.I32, (short)55);
  private static final org.apache.thrift.protocol.TField ENABLE_SHARED_SCAN_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_shared_scan", org.apache.thrift.protocol.TType.BOOL, (short)56);
  private static final org.apache.thrift.protocol.TField IS_STREAM_PIPELINE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_stream_pipeline", org.apache.thrift.protocol.TType.BOOL, (short)57);
  private static final org.apache.thrift.protocol.TField ADAPTIVE_DOP_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("adaptive_dop_param", org.apache.thrift.protocol.TType.STRUCT, (short)58);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TExecPlanFragmentParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TExecPlanFragmentParamsTupleSchemeFactory();

  /**
   * 
   * @see InternalServiceVersion
   */
  public @org.apache.thrift.annotation.Nullable InternalServiceVersion protocol_version; // required
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TPlanFragment fragment; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TDescriptorTable desc_tbl; // optional
  public @org.apache.thrift.annotation.Nullable TPlanFragmentExecParams params; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TNetworkAddress coord; // optional
  public int backend_num; // optional
  public @org.apache.thrift.annotation.Nullable TQueryGlobals query_globals; // optional
  public @org.apache.thrift.annotation.Nullable TQueryOptions query_options; // optional
  public boolean enable_profile; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TResourceInfo resource_info; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String import_label; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // optional
  public long load_job_id; // optional
  public @org.apache.thrift.annotation.Nullable TLoadErrorHubInfo load_error_hub_info; // optional
  public boolean is_pipeline; // optional
  public int pipeline_dop; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> per_scan_node_dop; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TWorkGroup workgroup; // optional
  public boolean enable_resource_group; // optional
  public int func_version; // optional
  public boolean enable_shared_scan; // optional
  public boolean is_stream_pipeline; // optional
  public @org.apache.thrift.annotation.Nullable TAdaptiveDopParam adaptive_dop_param; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see InternalServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    FRAGMENT((short)2, "fragment"),
    DESC_TBL((short)3, "desc_tbl"),
    PARAMS((short)4, "params"),
    COORD((short)5, "coord"),
    BACKEND_NUM((short)6, "backend_num"),
    QUERY_GLOBALS((short)7, "query_globals"),
    QUERY_OPTIONS((short)8, "query_options"),
    ENABLE_PROFILE((short)9, "enable_profile"),
    RESOURCE_INFO((short)10, "resource_info"),
    IMPORT_LABEL((short)11, "import_label"),
    DB_NAME((short)12, "db_name"),
    LOAD_JOB_ID((short)13, "load_job_id"),
    LOAD_ERROR_HUB_INFO((short)14, "load_error_hub_info"),
    IS_PIPELINE((short)50, "is_pipeline"),
    PIPELINE_DOP((short)51, "pipeline_dop"),
    PER_SCAN_NODE_DOP((short)52, "per_scan_node_dop"),
    WORKGROUP((short)53, "workgroup"),
    ENABLE_RESOURCE_GROUP((short)54, "enable_resource_group"),
    FUNC_VERSION((short)55, "func_version"),
    ENABLE_SHARED_SCAN((short)56, "enable_shared_scan"),
    IS_STREAM_PIPELINE((short)57, "is_stream_pipeline"),
    ADAPTIVE_DOP_PARAM((short)58, "adaptive_dop_param");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // FRAGMENT
          return FRAGMENT;
        case 3: // DESC_TBL
          return DESC_TBL;
        case 4: // PARAMS
          return PARAMS;
        case 5: // COORD
          return COORD;
        case 6: // BACKEND_NUM
          return BACKEND_NUM;
        case 7: // QUERY_GLOBALS
          return QUERY_GLOBALS;
        case 8: // QUERY_OPTIONS
          return QUERY_OPTIONS;
        case 9: // ENABLE_PROFILE
          return ENABLE_PROFILE;
        case 10: // RESOURCE_INFO
          return RESOURCE_INFO;
        case 11: // IMPORT_LABEL
          return IMPORT_LABEL;
        case 12: // DB_NAME
          return DB_NAME;
        case 13: // LOAD_JOB_ID
          return LOAD_JOB_ID;
        case 14: // LOAD_ERROR_HUB_INFO
          return LOAD_ERROR_HUB_INFO;
        case 50: // IS_PIPELINE
          return IS_PIPELINE;
        case 51: // PIPELINE_DOP
          return PIPELINE_DOP;
        case 52: // PER_SCAN_NODE_DOP
          return PER_SCAN_NODE_DOP;
        case 53: // WORKGROUP
          return WORKGROUP;
        case 54: // ENABLE_RESOURCE_GROUP
          return ENABLE_RESOURCE_GROUP;
        case 55: // FUNC_VERSION
          return FUNC_VERSION;
        case 56: // ENABLE_SHARED_SCAN
          return ENABLE_SHARED_SCAN;
        case 57: // IS_STREAM_PIPELINE
          return IS_STREAM_PIPELINE;
        case 58: // ADAPTIVE_DOP_PARAM
          return ADAPTIVE_DOP_PARAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BACKEND_NUM_ISSET_ID = 0;
  private static final int __ENABLE_PROFILE_ISSET_ID = 1;
  private static final int __LOAD_JOB_ID_ISSET_ID = 2;
  private static final int __IS_PIPELINE_ISSET_ID = 3;
  private static final int __PIPELINE_DOP_ISSET_ID = 4;
  private static final int __ENABLE_RESOURCE_GROUP_ISSET_ID = 5;
  private static final int __FUNC_VERSION_ISSET_ID = 6;
  private static final int __ENABLE_SHARED_SCAN_ISSET_ID = 7;
  private static final int __IS_STREAM_PIPELINE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FRAGMENT,_Fields.DESC_TBL,_Fields.PARAMS,_Fields.COORD,_Fields.BACKEND_NUM,_Fields.QUERY_GLOBALS,_Fields.QUERY_OPTIONS,_Fields.ENABLE_PROFILE,_Fields.RESOURCE_INFO,_Fields.IMPORT_LABEL,_Fields.DB_NAME,_Fields.LOAD_JOB_ID,_Fields.LOAD_ERROR_HUB_INFO,_Fields.IS_PIPELINE,_Fields.PIPELINE_DOP,_Fields.PER_SCAN_NODE_DOP,_Fields.WORKGROUP,_Fields.ENABLE_RESOURCE_GROUP,_Fields.FUNC_VERSION,_Fields.ENABLE_SHARED_SCAN,_Fields.IS_STREAM_PIPELINE,_Fields.ADAPTIVE_DOP_PARAM};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, InternalServiceVersion.class)));
    tmpMap.put(_Fields.FRAGMENT, new org.apache.thrift.meta_data.FieldMetaData("fragment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TPlanFragment.class)));
    tmpMap.put(_Fields.DESC_TBL, new org.apache.thrift.meta_data.FieldMetaData("desc_tbl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TDescriptorTable.class)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanFragmentExecParams.class)));
    tmpMap.put(_Fields.COORD, new org.apache.thrift.meta_data.FieldMetaData("coord", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.BACKEND_NUM, new org.apache.thrift.meta_data.FieldMetaData("backend_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY_GLOBALS, new org.apache.thrift.meta_data.FieldMetaData("query_globals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryGlobals.class)));
    tmpMap.put(_Fields.QUERY_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("query_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryOptions.class)));
    tmpMap.put(_Fields.ENABLE_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("enable_profile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESOURCE_INFO, new org.apache.thrift.meta_data.FieldMetaData("resource_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TResourceInfo.class)));
    tmpMap.put(_Fields.IMPORT_LABEL, new org.apache.thrift.meta_data.FieldMetaData("import_label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAD_JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("load_job_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOAD_ERROR_HUB_INFO, new org.apache.thrift.meta_data.FieldMetaData("load_error_hub_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLoadErrorHubInfo.class)));
    tmpMap.put(_Fields.IS_PIPELINE, new org.apache.thrift.meta_data.FieldMetaData("is_pipeline", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PIPELINE_DOP, new org.apache.thrift.meta_data.FieldMetaData("pipeline_dop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PER_SCAN_NODE_DOP, new org.apache.thrift.meta_data.FieldMetaData("per_scan_node_dop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.WORKGROUP, new org.apache.thrift.meta_data.FieldMetaData("workgroup", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TWorkGroup.class)));
    tmpMap.put(_Fields.ENABLE_RESOURCE_GROUP, new org.apache.thrift.meta_data.FieldMetaData("enable_resource_group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FUNC_VERSION, new org.apache.thrift.meta_data.FieldMetaData("func_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLE_SHARED_SCAN, new org.apache.thrift.meta_data.FieldMetaData("enable_shared_scan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_STREAM_PIPELINE, new org.apache.thrift.meta_data.FieldMetaData("is_stream_pipeline", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ADAPTIVE_DOP_PARAM, new org.apache.thrift.meta_data.FieldMetaData("adaptive_dop_param", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAdaptiveDopParam.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecPlanFragmentParams.class, metaDataMap);
  }

  public TExecPlanFragmentParams() {
  }

  public TExecPlanFragmentParams(
    InternalServiceVersion protocol_version)
  {
    this();
    this.protocol_version = protocol_version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecPlanFragmentParams(TExecPlanFragmentParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocol_version()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetFragment()) {
      this.fragment = new com.starrocks.thrift.TPlanFragment(other.fragment);
    }
    if (other.isSetDesc_tbl()) {
      this.desc_tbl = new com.starrocks.thrift.TDescriptorTable(other.desc_tbl);
    }
    if (other.isSetParams()) {
      this.params = new TPlanFragmentExecParams(other.params);
    }
    if (other.isSetCoord()) {
      this.coord = new com.starrocks.thrift.TNetworkAddress(other.coord);
    }
    this.backend_num = other.backend_num;
    if (other.isSetQuery_globals()) {
      this.query_globals = new TQueryGlobals(other.query_globals);
    }
    if (other.isSetQuery_options()) {
      this.query_options = new TQueryOptions(other.query_options);
    }
    this.enable_profile = other.enable_profile;
    if (other.isSetResource_info()) {
      this.resource_info = new com.starrocks.thrift.TResourceInfo(other.resource_info);
    }
    if (other.isSetImport_label()) {
      this.import_label = other.import_label;
    }
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    this.load_job_id = other.load_job_id;
    if (other.isSetLoad_error_hub_info()) {
      this.load_error_hub_info = new TLoadErrorHubInfo(other.load_error_hub_info);
    }
    this.is_pipeline = other.is_pipeline;
    this.pipeline_dop = other.pipeline_dop;
    if (other.isSetPer_scan_node_dop()) {
      java.util.Map<java.lang.Integer,java.lang.Integer> __this__per_scan_node_dop = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.per_scan_node_dop.size());
      for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> other_element : other.per_scan_node_dop.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.lang.Integer other_element_value = other_element.getValue();

        java.lang.Integer __this__per_scan_node_dop_copy_key = other_element_key;

        java.lang.Integer __this__per_scan_node_dop_copy_value = other_element_value;

        __this__per_scan_node_dop.put(__this__per_scan_node_dop_copy_key, __this__per_scan_node_dop_copy_value);
      }
      this.per_scan_node_dop = __this__per_scan_node_dop;
    }
    if (other.isSetWorkgroup()) {
      this.workgroup = new com.starrocks.thrift.TWorkGroup(other.workgroup);
    }
    this.enable_resource_group = other.enable_resource_group;
    this.func_version = other.func_version;
    this.enable_shared_scan = other.enable_shared_scan;
    this.is_stream_pipeline = other.is_stream_pipeline;
    if (other.isSetAdaptive_dop_param()) {
      this.adaptive_dop_param = new TAdaptiveDopParam(other.adaptive_dop_param);
    }
  }

  @Override
  public TExecPlanFragmentParams deepCopy() {
    return new TExecPlanFragmentParams(this);
  }

  @Override
  public void clear() {
    this.protocol_version = null;
    this.fragment = null;
    this.desc_tbl = null;
    this.params = null;
    this.coord = null;
    setBackend_numIsSet(false);
    this.backend_num = 0;
    this.query_globals = null;
    this.query_options = null;
    setEnable_profileIsSet(false);
    this.enable_profile = false;
    this.resource_info = null;
    this.import_label = null;
    this.db_name = null;
    setLoad_job_idIsSet(false);
    this.load_job_id = 0;
    this.load_error_hub_info = null;
    setIs_pipelineIsSet(false);
    this.is_pipeline = false;
    setPipeline_dopIsSet(false);
    this.pipeline_dop = 0;
    this.per_scan_node_dop = null;
    this.workgroup = null;
    setEnable_resource_groupIsSet(false);
    this.enable_resource_group = false;
    setFunc_versionIsSet(false);
    this.func_version = 0;
    setEnable_shared_scanIsSet(false);
    this.enable_shared_scan = false;
    setIs_stream_pipelineIsSet(false);
    this.is_stream_pipeline = false;
    this.adaptive_dop_param = null;
  }

  /**
   * 
   * @see InternalServiceVersion
   */
  @org.apache.thrift.annotation.Nullable
  public InternalServiceVersion getProtocol_version() {
    return this.protocol_version;
  }

  /**
   * 
   * @see InternalServiceVersion
   */
  public TExecPlanFragmentParams setProtocol_version(@org.apache.thrift.annotation.Nullable InternalServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocol_version() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol_version() {
    return this.protocol_version != null;
  }

  public void setProtocol_versionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TPlanFragment getFragment() {
    return this.fragment;
  }

  public TExecPlanFragmentParams setFragment(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TPlanFragment fragment) {
    this.fragment = fragment;
    return this;
  }

  public void unsetFragment() {
    this.fragment = null;
  }

  /** Returns true if field fragment is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment() {
    return this.fragment != null;
  }

  public void setFragmentIsSet(boolean value) {
    if (!value) {
      this.fragment = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TDescriptorTable getDesc_tbl() {
    return this.desc_tbl;
  }

  public TExecPlanFragmentParams setDesc_tbl(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TDescriptorTable desc_tbl) {
    this.desc_tbl = desc_tbl;
    return this;
  }

  public void unsetDesc_tbl() {
    this.desc_tbl = null;
  }

  /** Returns true if field desc_tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc_tbl() {
    return this.desc_tbl != null;
  }

  public void setDesc_tblIsSet(boolean value) {
    if (!value) {
      this.desc_tbl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TPlanFragmentExecParams getParams() {
    return this.params;
  }

  public TExecPlanFragmentParams setParams(@org.apache.thrift.annotation.Nullable TPlanFragmentExecParams params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TNetworkAddress getCoord() {
    return this.coord;
  }

  public TExecPlanFragmentParams setCoord(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TNetworkAddress coord) {
    this.coord = coord;
    return this;
  }

  public void unsetCoord() {
    this.coord = null;
  }

  /** Returns true if field coord is set (has been assigned a value) and false otherwise */
  public boolean isSetCoord() {
    return this.coord != null;
  }

  public void setCoordIsSet(boolean value) {
    if (!value) {
      this.coord = null;
    }
  }

  public int getBackend_num() {
    return this.backend_num;
  }

  public TExecPlanFragmentParams setBackend_num(int backend_num) {
    this.backend_num = backend_num;
    setBackend_numIsSet(true);
    return this;
  }

  public void unsetBackend_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  /** Returns true if field backend_num is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  public void setBackend_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TQueryGlobals getQuery_globals() {
    return this.query_globals;
  }

  public TExecPlanFragmentParams setQuery_globals(@org.apache.thrift.annotation.Nullable TQueryGlobals query_globals) {
    this.query_globals = query_globals;
    return this;
  }

  public void unsetQuery_globals() {
    this.query_globals = null;
  }

  /** Returns true if field query_globals is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_globals() {
    return this.query_globals != null;
  }

  public void setQuery_globalsIsSet(boolean value) {
    if (!value) {
      this.query_globals = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TQueryOptions getQuery_options() {
    return this.query_options;
  }

  public TExecPlanFragmentParams setQuery_options(@org.apache.thrift.annotation.Nullable TQueryOptions query_options) {
    this.query_options = query_options;
    return this;
  }

  public void unsetQuery_options() {
    this.query_options = null;
  }

  /** Returns true if field query_options is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_options() {
    return this.query_options != null;
  }

  public void setQuery_optionsIsSet(boolean value) {
    if (!value) {
      this.query_options = null;
    }
  }

  public boolean isEnable_profile() {
    return this.enable_profile;
  }

  public TExecPlanFragmentParams setEnable_profile(boolean enable_profile) {
    this.enable_profile = enable_profile;
    setEnable_profileIsSet(true);
    return this;
  }

  public void unsetEnable_profile() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_PROFILE_ISSET_ID);
  }

  /** Returns true if field enable_profile is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_profile() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_PROFILE_ISSET_ID);
  }

  public void setEnable_profileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_PROFILE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TResourceInfo getResource_info() {
    return this.resource_info;
  }

  public TExecPlanFragmentParams setResource_info(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TResourceInfo resource_info) {
    this.resource_info = resource_info;
    return this;
  }

  public void unsetResource_info() {
    this.resource_info = null;
  }

  /** Returns true if field resource_info is set (has been assigned a value) and false otherwise */
  public boolean isSetResource_info() {
    return this.resource_info != null;
  }

  public void setResource_infoIsSet(boolean value) {
    if (!value) {
      this.resource_info = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getImport_label() {
    return this.import_label;
  }

  public TExecPlanFragmentParams setImport_label(@org.apache.thrift.annotation.Nullable java.lang.String import_label) {
    this.import_label = import_label;
    return this;
  }

  public void unsetImport_label() {
    this.import_label = null;
  }

  /** Returns true if field import_label is set (has been assigned a value) and false otherwise */
  public boolean isSetImport_label() {
    return this.import_label != null;
  }

  public void setImport_labelIsSet(boolean value) {
    if (!value) {
      this.import_label = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb_name() {
    return this.db_name;
  }

  public TExecPlanFragmentParams setDb_name(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  public long getLoad_job_id() {
    return this.load_job_id;
  }

  public TExecPlanFragmentParams setLoad_job_id(long load_job_id) {
    this.load_job_id = load_job_id;
    setLoad_job_idIsSet(true);
    return this;
  }

  public void unsetLoad_job_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOAD_JOB_ID_ISSET_ID);
  }

  /** Returns true if field load_job_id is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_job_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOAD_JOB_ID_ISSET_ID);
  }

  public void setLoad_job_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOAD_JOB_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TLoadErrorHubInfo getLoad_error_hub_info() {
    return this.load_error_hub_info;
  }

  public TExecPlanFragmentParams setLoad_error_hub_info(@org.apache.thrift.annotation.Nullable TLoadErrorHubInfo load_error_hub_info) {
    this.load_error_hub_info = load_error_hub_info;
    return this;
  }

  public void unsetLoad_error_hub_info() {
    this.load_error_hub_info = null;
  }

  /** Returns true if field load_error_hub_info is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_error_hub_info() {
    return this.load_error_hub_info != null;
  }

  public void setLoad_error_hub_infoIsSet(boolean value) {
    if (!value) {
      this.load_error_hub_info = null;
    }
  }

  public boolean isIs_pipeline() {
    return this.is_pipeline;
  }

  public TExecPlanFragmentParams setIs_pipeline(boolean is_pipeline) {
    this.is_pipeline = is_pipeline;
    setIs_pipelineIsSet(true);
    return this;
  }

  public void unsetIs_pipeline() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_PIPELINE_ISSET_ID);
  }

  /** Returns true if field is_pipeline is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_pipeline() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_PIPELINE_ISSET_ID);
  }

  public void setIs_pipelineIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_PIPELINE_ISSET_ID, value);
  }

  public int getPipeline_dop() {
    return this.pipeline_dop;
  }

  public TExecPlanFragmentParams setPipeline_dop(int pipeline_dop) {
    this.pipeline_dop = pipeline_dop;
    setPipeline_dopIsSet(true);
    return this;
  }

  public void unsetPipeline_dop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PIPELINE_DOP_ISSET_ID);
  }

  /** Returns true if field pipeline_dop is set (has been assigned a value) and false otherwise */
  public boolean isSetPipeline_dop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PIPELINE_DOP_ISSET_ID);
  }

  public void setPipeline_dopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PIPELINE_DOP_ISSET_ID, value);
  }

  public int getPer_scan_node_dopSize() {
    return (this.per_scan_node_dop == null) ? 0 : this.per_scan_node_dop.size();
  }

  public void putToPer_scan_node_dop(int key, int val) {
    if (this.per_scan_node_dop == null) {
      this.per_scan_node_dop = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
    }
    this.per_scan_node_dop.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Integer> getPer_scan_node_dop() {
    return this.per_scan_node_dop;
  }

  public TExecPlanFragmentParams setPer_scan_node_dop(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> per_scan_node_dop) {
    this.per_scan_node_dop = per_scan_node_dop;
    return this;
  }

  public void unsetPer_scan_node_dop() {
    this.per_scan_node_dop = null;
  }

  /** Returns true if field per_scan_node_dop is set (has been assigned a value) and false otherwise */
  public boolean isSetPer_scan_node_dop() {
    return this.per_scan_node_dop != null;
  }

  public void setPer_scan_node_dopIsSet(boolean value) {
    if (!value) {
      this.per_scan_node_dop = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TWorkGroup getWorkgroup() {
    return this.workgroup;
  }

  public TExecPlanFragmentParams setWorkgroup(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TWorkGroup workgroup) {
    this.workgroup = workgroup;
    return this;
  }

  public void unsetWorkgroup() {
    this.workgroup = null;
  }

  /** Returns true if field workgroup is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkgroup() {
    return this.workgroup != null;
  }

  public void setWorkgroupIsSet(boolean value) {
    if (!value) {
      this.workgroup = null;
    }
  }

  public boolean isEnable_resource_group() {
    return this.enable_resource_group;
  }

  public TExecPlanFragmentParams setEnable_resource_group(boolean enable_resource_group) {
    this.enable_resource_group = enable_resource_group;
    setEnable_resource_groupIsSet(true);
    return this;
  }

  public void unsetEnable_resource_group() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_RESOURCE_GROUP_ISSET_ID);
  }

  /** Returns true if field enable_resource_group is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_resource_group() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_RESOURCE_GROUP_ISSET_ID);
  }

  public void setEnable_resource_groupIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_RESOURCE_GROUP_ISSET_ID, value);
  }

  public int getFunc_version() {
    return this.func_version;
  }

  public TExecPlanFragmentParams setFunc_version(int func_version) {
    this.func_version = func_version;
    setFunc_versionIsSet(true);
    return this;
  }

  public void unsetFunc_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FUNC_VERSION_ISSET_ID);
  }

  /** Returns true if field func_version is set (has been assigned a value) and false otherwise */
  public boolean isSetFunc_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FUNC_VERSION_ISSET_ID);
  }

  public void setFunc_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FUNC_VERSION_ISSET_ID, value);
  }

  public boolean isEnable_shared_scan() {
    return this.enable_shared_scan;
  }

  public TExecPlanFragmentParams setEnable_shared_scan(boolean enable_shared_scan) {
    this.enable_shared_scan = enable_shared_scan;
    setEnable_shared_scanIsSet(true);
    return this;
  }

  public void unsetEnable_shared_scan() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_SHARED_SCAN_ISSET_ID);
  }

  /** Returns true if field enable_shared_scan is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_shared_scan() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_SHARED_SCAN_ISSET_ID);
  }

  public void setEnable_shared_scanIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_SHARED_SCAN_ISSET_ID, value);
  }

  public boolean isIs_stream_pipeline() {
    return this.is_stream_pipeline;
  }

  public TExecPlanFragmentParams setIs_stream_pipeline(boolean is_stream_pipeline) {
    this.is_stream_pipeline = is_stream_pipeline;
    setIs_stream_pipelineIsSet(true);
    return this;
  }

  public void unsetIs_stream_pipeline() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_STREAM_PIPELINE_ISSET_ID);
  }

  /** Returns true if field is_stream_pipeline is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_stream_pipeline() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_STREAM_PIPELINE_ISSET_ID);
  }

  public void setIs_stream_pipelineIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_STREAM_PIPELINE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TAdaptiveDopParam getAdaptive_dop_param() {
    return this.adaptive_dop_param;
  }

  public TExecPlanFragmentParams setAdaptive_dop_param(@org.apache.thrift.annotation.Nullable TAdaptiveDopParam adaptive_dop_param) {
    this.adaptive_dop_param = adaptive_dop_param;
    return this;
  }

  public void unsetAdaptive_dop_param() {
    this.adaptive_dop_param = null;
  }

  /** Returns true if field adaptive_dop_param is set (has been assigned a value) and false otherwise */
  public boolean isSetAdaptive_dop_param() {
    return this.adaptive_dop_param != null;
  }

  public void setAdaptive_dop_paramIsSet(boolean value) {
    if (!value) {
      this.adaptive_dop_param = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocol_version();
      } else {
        setProtocol_version((InternalServiceVersion)value);
      }
      break;

    case FRAGMENT:
      if (value == null) {
        unsetFragment();
      } else {
        setFragment((com.starrocks.thrift.TPlanFragment)value);
      }
      break;

    case DESC_TBL:
      if (value == null) {
        unsetDesc_tbl();
      } else {
        setDesc_tbl((com.starrocks.thrift.TDescriptorTable)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((TPlanFragmentExecParams)value);
      }
      break;

    case COORD:
      if (value == null) {
        unsetCoord();
      } else {
        setCoord((com.starrocks.thrift.TNetworkAddress)value);
      }
      break;

    case BACKEND_NUM:
      if (value == null) {
        unsetBackend_num();
      } else {
        setBackend_num((java.lang.Integer)value);
      }
      break;

    case QUERY_GLOBALS:
      if (value == null) {
        unsetQuery_globals();
      } else {
        setQuery_globals((TQueryGlobals)value);
      }
      break;

    case QUERY_OPTIONS:
      if (value == null) {
        unsetQuery_options();
      } else {
        setQuery_options((TQueryOptions)value);
      }
      break;

    case ENABLE_PROFILE:
      if (value == null) {
        unsetEnable_profile();
      } else {
        setEnable_profile((java.lang.Boolean)value);
      }
      break;

    case RESOURCE_INFO:
      if (value == null) {
        unsetResource_info();
      } else {
        setResource_info((com.starrocks.thrift.TResourceInfo)value);
      }
      break;

    case IMPORT_LABEL:
      if (value == null) {
        unsetImport_label();
      } else {
        setImport_label((java.lang.String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((java.lang.String)value);
      }
      break;

    case LOAD_JOB_ID:
      if (value == null) {
        unsetLoad_job_id();
      } else {
        setLoad_job_id((java.lang.Long)value);
      }
      break;

    case LOAD_ERROR_HUB_INFO:
      if (value == null) {
        unsetLoad_error_hub_info();
      } else {
        setLoad_error_hub_info((TLoadErrorHubInfo)value);
      }
      break;

    case IS_PIPELINE:
      if (value == null) {
        unsetIs_pipeline();
      } else {
        setIs_pipeline((java.lang.Boolean)value);
      }
      break;

    case PIPELINE_DOP:
      if (value == null) {
        unsetPipeline_dop();
      } else {
        setPipeline_dop((java.lang.Integer)value);
      }
      break;

    case PER_SCAN_NODE_DOP:
      if (value == null) {
        unsetPer_scan_node_dop();
      } else {
        setPer_scan_node_dop((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
      }
      break;

    case WORKGROUP:
      if (value == null) {
        unsetWorkgroup();
      } else {
        setWorkgroup((com.starrocks.thrift.TWorkGroup)value);
      }
      break;

    case ENABLE_RESOURCE_GROUP:
      if (value == null) {
        unsetEnable_resource_group();
      } else {
        setEnable_resource_group((java.lang.Boolean)value);
      }
      break;

    case FUNC_VERSION:
      if (value == null) {
        unsetFunc_version();
      } else {
        setFunc_version((java.lang.Integer)value);
      }
      break;

    case ENABLE_SHARED_SCAN:
      if (value == null) {
        unsetEnable_shared_scan();
      } else {
        setEnable_shared_scan((java.lang.Boolean)value);
      }
      break;

    case IS_STREAM_PIPELINE:
      if (value == null) {
        unsetIs_stream_pipeline();
      } else {
        setIs_stream_pipeline((java.lang.Boolean)value);
      }
      break;

    case ADAPTIVE_DOP_PARAM:
      if (value == null) {
        unsetAdaptive_dop_param();
      } else {
        setAdaptive_dop_param((TAdaptiveDopParam)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocol_version();

    case FRAGMENT:
      return getFragment();

    case DESC_TBL:
      return getDesc_tbl();

    case PARAMS:
      return getParams();

    case COORD:
      return getCoord();

    case BACKEND_NUM:
      return getBackend_num();

    case QUERY_GLOBALS:
      return getQuery_globals();

    case QUERY_OPTIONS:
      return getQuery_options();

    case ENABLE_PROFILE:
      return isEnable_profile();

    case RESOURCE_INFO:
      return getResource_info();

    case IMPORT_LABEL:
      return getImport_label();

    case DB_NAME:
      return getDb_name();

    case LOAD_JOB_ID:
      return getLoad_job_id();

    case LOAD_ERROR_HUB_INFO:
      return getLoad_error_hub_info();

    case IS_PIPELINE:
      return isIs_pipeline();

    case PIPELINE_DOP:
      return getPipeline_dop();

    case PER_SCAN_NODE_DOP:
      return getPer_scan_node_dop();

    case WORKGROUP:
      return getWorkgroup();

    case ENABLE_RESOURCE_GROUP:
      return isEnable_resource_group();

    case FUNC_VERSION:
      return getFunc_version();

    case ENABLE_SHARED_SCAN:
      return isEnable_shared_scan();

    case IS_STREAM_PIPELINE:
      return isIs_stream_pipeline();

    case ADAPTIVE_DOP_PARAM:
      return getAdaptive_dop_param();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocol_version();
    case FRAGMENT:
      return isSetFragment();
    case DESC_TBL:
      return isSetDesc_tbl();
    case PARAMS:
      return isSetParams();
    case COORD:
      return isSetCoord();
    case BACKEND_NUM:
      return isSetBackend_num();
    case QUERY_GLOBALS:
      return isSetQuery_globals();
    case QUERY_OPTIONS:
      return isSetQuery_options();
    case ENABLE_PROFILE:
      return isSetEnable_profile();
    case RESOURCE_INFO:
      return isSetResource_info();
    case IMPORT_LABEL:
      return isSetImport_label();
    case DB_NAME:
      return isSetDb_name();
    case LOAD_JOB_ID:
      return isSetLoad_job_id();
    case LOAD_ERROR_HUB_INFO:
      return isSetLoad_error_hub_info();
    case IS_PIPELINE:
      return isSetIs_pipeline();
    case PIPELINE_DOP:
      return isSetPipeline_dop();
    case PER_SCAN_NODE_DOP:
      return isSetPer_scan_node_dop();
    case WORKGROUP:
      return isSetWorkgroup();
    case ENABLE_RESOURCE_GROUP:
      return isSetEnable_resource_group();
    case FUNC_VERSION:
      return isSetFunc_version();
    case ENABLE_SHARED_SCAN:
      return isSetEnable_shared_scan();
    case IS_STREAM_PIPELINE:
      return isSetIs_stream_pipeline();
    case ADAPTIVE_DOP_PARAM:
      return isSetAdaptive_dop_param();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TExecPlanFragmentParams)
      return this.equals((TExecPlanFragmentParams)that);
    return false;
  }

  public boolean equals(TExecPlanFragmentParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_protocol_version = true && this.isSetProtocol_version();
    boolean that_present_protocol_version = true && that.isSetProtocol_version();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_fragment = true && this.isSetFragment();
    boolean that_present_fragment = true && that.isSetFragment();
    if (this_present_fragment || that_present_fragment) {
      if (!(this_present_fragment && that_present_fragment))
        return false;
      if (!this.fragment.equals(that.fragment))
        return false;
    }

    boolean this_present_desc_tbl = true && this.isSetDesc_tbl();
    boolean that_present_desc_tbl = true && that.isSetDesc_tbl();
    if (this_present_desc_tbl || that_present_desc_tbl) {
      if (!(this_present_desc_tbl && that_present_desc_tbl))
        return false;
      if (!this.desc_tbl.equals(that.desc_tbl))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_coord = true && this.isSetCoord();
    boolean that_present_coord = true && that.isSetCoord();
    if (this_present_coord || that_present_coord) {
      if (!(this_present_coord && that_present_coord))
        return false;
      if (!this.coord.equals(that.coord))
        return false;
    }

    boolean this_present_backend_num = true && this.isSetBackend_num();
    boolean that_present_backend_num = true && that.isSetBackend_num();
    if (this_present_backend_num || that_present_backend_num) {
      if (!(this_present_backend_num && that_present_backend_num))
        return false;
      if (this.backend_num != that.backend_num)
        return false;
    }

    boolean this_present_query_globals = true && this.isSetQuery_globals();
    boolean that_present_query_globals = true && that.isSetQuery_globals();
    if (this_present_query_globals || that_present_query_globals) {
      if (!(this_present_query_globals && that_present_query_globals))
        return false;
      if (!this.query_globals.equals(that.query_globals))
        return false;
    }

    boolean this_present_query_options = true && this.isSetQuery_options();
    boolean that_present_query_options = true && that.isSetQuery_options();
    if (this_present_query_options || that_present_query_options) {
      if (!(this_present_query_options && that_present_query_options))
        return false;
      if (!this.query_options.equals(that.query_options))
        return false;
    }

    boolean this_present_enable_profile = true && this.isSetEnable_profile();
    boolean that_present_enable_profile = true && that.isSetEnable_profile();
    if (this_present_enable_profile || that_present_enable_profile) {
      if (!(this_present_enable_profile && that_present_enable_profile))
        return false;
      if (this.enable_profile != that.enable_profile)
        return false;
    }

    boolean this_present_resource_info = true && this.isSetResource_info();
    boolean that_present_resource_info = true && that.isSetResource_info();
    if (this_present_resource_info || that_present_resource_info) {
      if (!(this_present_resource_info && that_present_resource_info))
        return false;
      if (!this.resource_info.equals(that.resource_info))
        return false;
    }

    boolean this_present_import_label = true && this.isSetImport_label();
    boolean that_present_import_label = true && that.isSetImport_label();
    if (this_present_import_label || that_present_import_label) {
      if (!(this_present_import_label && that_present_import_label))
        return false;
      if (!this.import_label.equals(that.import_label))
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_load_job_id = true && this.isSetLoad_job_id();
    boolean that_present_load_job_id = true && that.isSetLoad_job_id();
    if (this_present_load_job_id || that_present_load_job_id) {
      if (!(this_present_load_job_id && that_present_load_job_id))
        return false;
      if (this.load_job_id != that.load_job_id)
        return false;
    }

    boolean this_present_load_error_hub_info = true && this.isSetLoad_error_hub_info();
    boolean that_present_load_error_hub_info = true && that.isSetLoad_error_hub_info();
    if (this_present_load_error_hub_info || that_present_load_error_hub_info) {
      if (!(this_present_load_error_hub_info && that_present_load_error_hub_info))
        return false;
      if (!this.load_error_hub_info.equals(that.load_error_hub_info))
        return false;
    }

    boolean this_present_is_pipeline = true && this.isSetIs_pipeline();
    boolean that_present_is_pipeline = true && that.isSetIs_pipeline();
    if (this_present_is_pipeline || that_present_is_pipeline) {
      if (!(this_present_is_pipeline && that_present_is_pipeline))
        return false;
      if (this.is_pipeline != that.is_pipeline)
        return false;
    }

    boolean this_present_pipeline_dop = true && this.isSetPipeline_dop();
    boolean that_present_pipeline_dop = true && that.isSetPipeline_dop();
    if (this_present_pipeline_dop || that_present_pipeline_dop) {
      if (!(this_present_pipeline_dop && that_present_pipeline_dop))
        return false;
      if (this.pipeline_dop != that.pipeline_dop)
        return false;
    }

    boolean this_present_per_scan_node_dop = true && this.isSetPer_scan_node_dop();
    boolean that_present_per_scan_node_dop = true && that.isSetPer_scan_node_dop();
    if (this_present_per_scan_node_dop || that_present_per_scan_node_dop) {
      if (!(this_present_per_scan_node_dop && that_present_per_scan_node_dop))
        return false;
      if (!this.per_scan_node_dop.equals(that.per_scan_node_dop))
        return false;
    }

    boolean this_present_workgroup = true && this.isSetWorkgroup();
    boolean that_present_workgroup = true && that.isSetWorkgroup();
    if (this_present_workgroup || that_present_workgroup) {
      if (!(this_present_workgroup && that_present_workgroup))
        return false;
      if (!this.workgroup.equals(that.workgroup))
        return false;
    }

    boolean this_present_enable_resource_group = true && this.isSetEnable_resource_group();
    boolean that_present_enable_resource_group = true && that.isSetEnable_resource_group();
    if (this_present_enable_resource_group || that_present_enable_resource_group) {
      if (!(this_present_enable_resource_group && that_present_enable_resource_group))
        return false;
      if (this.enable_resource_group != that.enable_resource_group)
        return false;
    }

    boolean this_present_func_version = true && this.isSetFunc_version();
    boolean that_present_func_version = true && that.isSetFunc_version();
    if (this_present_func_version || that_present_func_version) {
      if (!(this_present_func_version && that_present_func_version))
        return false;
      if (this.func_version != that.func_version)
        return false;
    }

    boolean this_present_enable_shared_scan = true && this.isSetEnable_shared_scan();
    boolean that_present_enable_shared_scan = true && that.isSetEnable_shared_scan();
    if (this_present_enable_shared_scan || that_present_enable_shared_scan) {
      if (!(this_present_enable_shared_scan && that_present_enable_shared_scan))
        return false;
      if (this.enable_shared_scan != that.enable_shared_scan)
        return false;
    }

    boolean this_present_is_stream_pipeline = true && this.isSetIs_stream_pipeline();
    boolean that_present_is_stream_pipeline = true && that.isSetIs_stream_pipeline();
    if (this_present_is_stream_pipeline || that_present_is_stream_pipeline) {
      if (!(this_present_is_stream_pipeline && that_present_is_stream_pipeline))
        return false;
      if (this.is_stream_pipeline != that.is_stream_pipeline)
        return false;
    }

    boolean this_present_adaptive_dop_param = true && this.isSetAdaptive_dop_param();
    boolean that_present_adaptive_dop_param = true && that.isSetAdaptive_dop_param();
    if (this_present_adaptive_dop_param || that_present_adaptive_dop_param) {
      if (!(this_present_adaptive_dop_param && that_present_adaptive_dop_param))
        return false;
      if (!this.adaptive_dop_param.equals(that.adaptive_dop_param))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProtocol_version()) ? 131071 : 524287);
    if (isSetProtocol_version())
      hashCode = hashCode * 8191 + protocol_version.getValue();

    hashCode = hashCode * 8191 + ((isSetFragment()) ? 131071 : 524287);
    if (isSetFragment())
      hashCode = hashCode * 8191 + fragment.hashCode();

    hashCode = hashCode * 8191 + ((isSetDesc_tbl()) ? 131071 : 524287);
    if (isSetDesc_tbl())
      hashCode = hashCode * 8191 + desc_tbl.hashCode();

    hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
    if (isSetParams())
      hashCode = hashCode * 8191 + params.hashCode();

    hashCode = hashCode * 8191 + ((isSetCoord()) ? 131071 : 524287);
    if (isSetCoord())
      hashCode = hashCode * 8191 + coord.hashCode();

    hashCode = hashCode * 8191 + ((isSetBackend_num()) ? 131071 : 524287);
    if (isSetBackend_num())
      hashCode = hashCode * 8191 + backend_num;

    hashCode = hashCode * 8191 + ((isSetQuery_globals()) ? 131071 : 524287);
    if (isSetQuery_globals())
      hashCode = hashCode * 8191 + query_globals.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuery_options()) ? 131071 : 524287);
    if (isSetQuery_options())
      hashCode = hashCode * 8191 + query_options.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnable_profile()) ? 131071 : 524287);
    if (isSetEnable_profile())
      hashCode = hashCode * 8191 + ((enable_profile) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetResource_info()) ? 131071 : 524287);
    if (isSetResource_info())
      hashCode = hashCode * 8191 + resource_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetImport_label()) ? 131071 : 524287);
    if (isSetImport_label())
      hashCode = hashCode * 8191 + import_label.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb_name()) ? 131071 : 524287);
    if (isSetDb_name())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoad_job_id()) ? 131071 : 524287);
    if (isSetLoad_job_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(load_job_id);

    hashCode = hashCode * 8191 + ((isSetLoad_error_hub_info()) ? 131071 : 524287);
    if (isSetLoad_error_hub_info())
      hashCode = hashCode * 8191 + load_error_hub_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_pipeline()) ? 131071 : 524287);
    if (isSetIs_pipeline())
      hashCode = hashCode * 8191 + ((is_pipeline) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPipeline_dop()) ? 131071 : 524287);
    if (isSetPipeline_dop())
      hashCode = hashCode * 8191 + pipeline_dop;

    hashCode = hashCode * 8191 + ((isSetPer_scan_node_dop()) ? 131071 : 524287);
    if (isSetPer_scan_node_dop())
      hashCode = hashCode * 8191 + per_scan_node_dop.hashCode();

    hashCode = hashCode * 8191 + ((isSetWorkgroup()) ? 131071 : 524287);
    if (isSetWorkgroup())
      hashCode = hashCode * 8191 + workgroup.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnable_resource_group()) ? 131071 : 524287);
    if (isSetEnable_resource_group())
      hashCode = hashCode * 8191 + ((enable_resource_group) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFunc_version()) ? 131071 : 524287);
    if (isSetFunc_version())
      hashCode = hashCode * 8191 + func_version;

    hashCode = hashCode * 8191 + ((isSetEnable_shared_scan()) ? 131071 : 524287);
    if (isSetEnable_shared_scan())
      hashCode = hashCode * 8191 + ((enable_shared_scan) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIs_stream_pipeline()) ? 131071 : 524287);
    if (isSetIs_stream_pipeline())
      hashCode = hashCode * 8191 + ((is_stream_pipeline) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAdaptive_dop_param()) ? 131071 : 524287);
    if (isSetAdaptive_dop_param())
      hashCode = hashCode * 8191 + adaptive_dop_param.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TExecPlanFragmentParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetProtocol_version(), other.isSetProtocol_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, other.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFragment(), other.isSetFragment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment, other.fragment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDesc_tbl(), other.isSetDesc_tbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc_tbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc_tbl, other.desc_tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetParams(), other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCoord(), other.isSetCoord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coord, other.coord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBackend_num(), other.isSetBackend_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_num, other.backend_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_globals(), other.isSetQuery_globals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_globals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_globals, other.query_globals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_options(), other.isSetQuery_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_options, other.query_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_profile(), other.isSetEnable_profile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_profile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_profile, other.enable_profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResource_info(), other.isSetResource_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_info, other.resource_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetImport_label(), other.isSetImport_label());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImport_label()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.import_label, other.import_label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb_name(), other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_job_id(), other.isSetLoad_job_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_job_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_job_id, other.load_job_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_error_hub_info(), other.isSetLoad_error_hub_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_error_hub_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_error_hub_info, other.load_error_hub_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_pipeline(), other.isSetIs_pipeline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_pipeline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_pipeline, other.is_pipeline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPipeline_dop(), other.isSetPipeline_dop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipeline_dop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeline_dop, other.pipeline_dop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPer_scan_node_dop(), other.isSetPer_scan_node_dop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPer_scan_node_dop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_scan_node_dop, other.per_scan_node_dop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWorkgroup(), other.isSetWorkgroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkgroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workgroup, other.workgroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_resource_group(), other.isSetEnable_resource_group());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_resource_group()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_resource_group, other.enable_resource_group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFunc_version(), other.isSetFunc_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunc_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.func_version, other.func_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_shared_scan(), other.isSetEnable_shared_scan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_shared_scan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_shared_scan, other.enable_shared_scan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_stream_pipeline(), other.isSetIs_stream_pipeline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_stream_pipeline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_stream_pipeline, other.is_stream_pipeline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAdaptive_dop_param(), other.isSetAdaptive_dop_param());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdaptive_dop_param()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adaptive_dop_param, other.adaptive_dop_param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TExecPlanFragmentParams(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (isSetFragment()) {
      if (!first) sb.append(", ");
      sb.append("fragment:");
      if (this.fragment == null) {
        sb.append("null");
      } else {
        sb.append(this.fragment);
      }
      first = false;
    }
    if (isSetDesc_tbl()) {
      if (!first) sb.append(", ");
      sb.append("desc_tbl:");
      if (this.desc_tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.desc_tbl);
      }
      first = false;
    }
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    if (isSetCoord()) {
      if (!first) sb.append(", ");
      sb.append("coord:");
      if (this.coord == null) {
        sb.append("null");
      } else {
        sb.append(this.coord);
      }
      first = false;
    }
    if (isSetBackend_num()) {
      if (!first) sb.append(", ");
      sb.append("backend_num:");
      sb.append(this.backend_num);
      first = false;
    }
    if (isSetQuery_globals()) {
      if (!first) sb.append(", ");
      sb.append("query_globals:");
      if (this.query_globals == null) {
        sb.append("null");
      } else {
        sb.append(this.query_globals);
      }
      first = false;
    }
    if (isSetQuery_options()) {
      if (!first) sb.append(", ");
      sb.append("query_options:");
      if (this.query_options == null) {
        sb.append("null");
      } else {
        sb.append(this.query_options);
      }
      first = false;
    }
    if (isSetEnable_profile()) {
      if (!first) sb.append(", ");
      sb.append("enable_profile:");
      sb.append(this.enable_profile);
      first = false;
    }
    if (isSetResource_info()) {
      if (!first) sb.append(", ");
      sb.append("resource_info:");
      if (this.resource_info == null) {
        sb.append("null");
      } else {
        sb.append(this.resource_info);
      }
      first = false;
    }
    if (isSetImport_label()) {
      if (!first) sb.append(", ");
      sb.append("import_label:");
      if (this.import_label == null) {
        sb.append("null");
      } else {
        sb.append(this.import_label);
      }
      first = false;
    }
    if (isSetDb_name()) {
      if (!first) sb.append(", ");
      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
    }
    if (isSetLoad_job_id()) {
      if (!first) sb.append(", ");
      sb.append("load_job_id:");
      sb.append(this.load_job_id);
      first = false;
    }
    if (isSetLoad_error_hub_info()) {
      if (!first) sb.append(", ");
      sb.append("load_error_hub_info:");
      if (this.load_error_hub_info == null) {
        sb.append("null");
      } else {
        sb.append(this.load_error_hub_info);
      }
      first = false;
    }
    if (isSetIs_pipeline()) {
      if (!first) sb.append(", ");
      sb.append("is_pipeline:");
      sb.append(this.is_pipeline);
      first = false;
    }
    if (isSetPipeline_dop()) {
      if (!first) sb.append(", ");
      sb.append("pipeline_dop:");
      sb.append(this.pipeline_dop);
      first = false;
    }
    if (isSetPer_scan_node_dop()) {
      if (!first) sb.append(", ");
      sb.append("per_scan_node_dop:");
      if (this.per_scan_node_dop == null) {
        sb.append("null");
      } else {
        sb.append(this.per_scan_node_dop);
      }
      first = false;
    }
    if (isSetWorkgroup()) {
      if (!first) sb.append(", ");
      sb.append("workgroup:");
      if (this.workgroup == null) {
        sb.append("null");
      } else {
        sb.append(this.workgroup);
      }
      first = false;
    }
    if (isSetEnable_resource_group()) {
      if (!first) sb.append(", ");
      sb.append("enable_resource_group:");
      sb.append(this.enable_resource_group);
      first = false;
    }
    if (isSetFunc_version()) {
      if (!first) sb.append(", ");
      sb.append("func_version:");
      sb.append(this.func_version);
      first = false;
    }
    if (isSetEnable_shared_scan()) {
      if (!first) sb.append(", ");
      sb.append("enable_shared_scan:");
      sb.append(this.enable_shared_scan);
      first = false;
    }
    if (isSetIs_stream_pipeline()) {
      if (!first) sb.append(", ");
      sb.append("is_stream_pipeline:");
      sb.append(this.is_stream_pipeline);
      first = false;
    }
    if (isSetAdaptive_dop_param()) {
      if (!first) sb.append(", ");
      sb.append("adaptive_dop_param:");
      if (this.adaptive_dop_param == null) {
        sb.append("null");
      } else {
        sb.append(this.adaptive_dop_param);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (fragment != null) {
      fragment.validate();
    }
    if (desc_tbl != null) {
      desc_tbl.validate();
    }
    if (params != null) {
      params.validate();
    }
    if (coord != null) {
      coord.validate();
    }
    if (query_globals != null) {
      query_globals.validate();
    }
    if (query_options != null) {
      query_options.validate();
    }
    if (resource_info != null) {
      resource_info.validate();
    }
    if (load_error_hub_info != null) {
      load_error_hub_info.validate();
    }
    if (workgroup != null) {
      workgroup.validate();
    }
    if (adaptive_dop_param != null) {
      adaptive_dop_param.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecPlanFragmentParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecPlanFragmentParamsStandardScheme getScheme() {
      return new TExecPlanFragmentParamsStandardScheme();
    }
  }

  private static class TExecPlanFragmentParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TExecPlanFragmentParams> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = com.starrocks.thrift.InternalServiceVersion.findByValue(iprot.readI32());
              struct.setProtocol_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment = new com.starrocks.thrift.TPlanFragment();
              struct.fragment.read(iprot);
              struct.setFragmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESC_TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.desc_tbl = new com.starrocks.thrift.TDescriptorTable();
              struct.desc_tbl.read(iprot);
              struct.setDesc_tblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.params = new TPlanFragmentExecParams();
              struct.params.read(iprot);
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.coord = new com.starrocks.thrift.TNetworkAddress();
              struct.coord.read(iprot);
              struct.setCoordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BACKEND_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.backend_num = iprot.readI32();
              struct.setBackend_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUERY_GLOBALS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_globals = new TQueryGlobals();
              struct.query_globals.read(iprot);
              struct.setQuery_globalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUERY_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_options = new TQueryOptions();
              struct.query_options.read(iprot);
              struct.setQuery_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ENABLE_PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_profile = iprot.readBool();
              struct.setEnable_profileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RESOURCE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resource_info = new com.starrocks.thrift.TResourceInfo();
              struct.resource_info.read(iprot);
              struct.setResource_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IMPORT_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.import_label = iprot.readString();
              struct.setImport_labelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LOAD_JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.load_job_id = iprot.readI64();
              struct.setLoad_job_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LOAD_ERROR_HUB_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.load_error_hub_info = new TLoadErrorHubInfo();
              struct.load_error_hub_info.read(iprot);
              struct.setLoad_error_hub_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // IS_PIPELINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_pipeline = iprot.readBool();
              struct.setIs_pipelineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // PIPELINE_DOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pipeline_dop = iprot.readI32();
              struct.setPipeline_dopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // PER_SCAN_NODE_DOP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map82 = iprot.readMapBegin();
                struct.per_scan_node_dop = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map82.size);
                int _key83;
                int _val84;
                for (int _i85 = 0; _i85 < _map82.size; ++_i85)
                {
                  _key83 = iprot.readI32();
                  _val84 = iprot.readI32();
                  struct.per_scan_node_dop.put(_key83, _val84);
                }
                iprot.readMapEnd();
              }
              struct.setPer_scan_node_dopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // WORKGROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.workgroup = new com.starrocks.thrift.TWorkGroup();
              struct.workgroup.read(iprot);
              struct.setWorkgroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // ENABLE_RESOURCE_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_resource_group = iprot.readBool();
              struct.setEnable_resource_groupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // FUNC_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.func_version = iprot.readI32();
              struct.setFunc_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // ENABLE_SHARED_SCAN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_shared_scan = iprot.readBool();
              struct.setEnable_shared_scanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // IS_STREAM_PIPELINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_stream_pipeline = iprot.readBool();
              struct.setIs_stream_pipelineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // ADAPTIVE_DOP_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.adaptive_dop_param = new TAdaptiveDopParam();
              struct.adaptive_dop_param.read(iprot);
              struct.setAdaptive_dop_paramIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.fragment != null) {
        if (struct.isSetFragment()) {
          oprot.writeFieldBegin(FRAGMENT_FIELD_DESC);
          struct.fragment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc_tbl != null) {
        if (struct.isSetDesc_tbl()) {
          oprot.writeFieldBegin(DESC_TBL_FIELD_DESC);
          struct.desc_tbl.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.coord != null) {
        if (struct.isSetCoord()) {
          oprot.writeFieldBegin(COORD_FIELD_DESC);
          struct.coord.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBackend_num()) {
        oprot.writeFieldBegin(BACKEND_NUM_FIELD_DESC);
        oprot.writeI32(struct.backend_num);
        oprot.writeFieldEnd();
      }
      if (struct.query_globals != null) {
        if (struct.isSetQuery_globals()) {
          oprot.writeFieldBegin(QUERY_GLOBALS_FIELD_DESC);
          struct.query_globals.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_options != null) {
        if (struct.isSetQuery_options()) {
          oprot.writeFieldBegin(QUERY_OPTIONS_FIELD_DESC);
          struct.query_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_profile()) {
        oprot.writeFieldBegin(ENABLE_PROFILE_FIELD_DESC);
        oprot.writeBool(struct.enable_profile);
        oprot.writeFieldEnd();
      }
      if (struct.resource_info != null) {
        if (struct.isSetResource_info()) {
          oprot.writeFieldBegin(RESOURCE_INFO_FIELD_DESC);
          struct.resource_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.import_label != null) {
        if (struct.isSetImport_label()) {
          oprot.writeFieldBegin(IMPORT_LABEL_FIELD_DESC);
          oprot.writeString(struct.import_label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db_name != null) {
        if (struct.isSetDb_name()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.db_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLoad_job_id()) {
        oprot.writeFieldBegin(LOAD_JOB_ID_FIELD_DESC);
        oprot.writeI64(struct.load_job_id);
        oprot.writeFieldEnd();
      }
      if (struct.load_error_hub_info != null) {
        if (struct.isSetLoad_error_hub_info()) {
          oprot.writeFieldBegin(LOAD_ERROR_HUB_INFO_FIELD_DESC);
          struct.load_error_hub_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_pipeline()) {
        oprot.writeFieldBegin(IS_PIPELINE_FIELD_DESC);
        oprot.writeBool(struct.is_pipeline);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPipeline_dop()) {
        oprot.writeFieldBegin(PIPELINE_DOP_FIELD_DESC);
        oprot.writeI32(struct.pipeline_dop);
        oprot.writeFieldEnd();
      }
      if (struct.per_scan_node_dop != null) {
        if (struct.isSetPer_scan_node_dop()) {
          oprot.writeFieldBegin(PER_SCAN_NODE_DOP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.per_scan_node_dop.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter86 : struct.per_scan_node_dop.entrySet())
            {
              oprot.writeI32(_iter86.getKey());
              oprot.writeI32(_iter86.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.workgroup != null) {
        if (struct.isSetWorkgroup()) {
          oprot.writeFieldBegin(WORKGROUP_FIELD_DESC);
          struct.workgroup.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_resource_group()) {
        oprot.writeFieldBegin(ENABLE_RESOURCE_GROUP_FIELD_DESC);
        oprot.writeBool(struct.enable_resource_group);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFunc_version()) {
        oprot.writeFieldBegin(FUNC_VERSION_FIELD_DESC);
        oprot.writeI32(struct.func_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_shared_scan()) {
        oprot.writeFieldBegin(ENABLE_SHARED_SCAN_FIELD_DESC);
        oprot.writeBool(struct.enable_shared_scan);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_stream_pipeline()) {
        oprot.writeFieldBegin(IS_STREAM_PIPELINE_FIELD_DESC);
        oprot.writeBool(struct.is_stream_pipeline);
        oprot.writeFieldEnd();
      }
      if (struct.adaptive_dop_param != null) {
        if (struct.isSetAdaptive_dop_param()) {
          oprot.writeFieldBegin(ADAPTIVE_DOP_PARAM_FIELD_DESC);
          struct.adaptive_dop_param.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecPlanFragmentParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecPlanFragmentParamsTupleScheme getScheme() {
      return new TExecPlanFragmentParamsTupleScheme();
    }
  }

  private static class TExecPlanFragmentParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TExecPlanFragmentParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFragment()) {
        optionals.set(0);
      }
      if (struct.isSetDesc_tbl()) {
        optionals.set(1);
      }
      if (struct.isSetParams()) {
        optionals.set(2);
      }
      if (struct.isSetCoord()) {
        optionals.set(3);
      }
      if (struct.isSetBackend_num()) {
        optionals.set(4);
      }
      if (struct.isSetQuery_globals()) {
        optionals.set(5);
      }
      if (struct.isSetQuery_options()) {
        optionals.set(6);
      }
      if (struct.isSetEnable_profile()) {
        optionals.set(7);
      }
      if (struct.isSetResource_info()) {
        optionals.set(8);
      }
      if (struct.isSetImport_label()) {
        optionals.set(9);
      }
      if (struct.isSetDb_name()) {
        optionals.set(10);
      }
      if (struct.isSetLoad_job_id()) {
        optionals.set(11);
      }
      if (struct.isSetLoad_error_hub_info()) {
        optionals.set(12);
      }
      if (struct.isSetIs_pipeline()) {
        optionals.set(13);
      }
      if (struct.isSetPipeline_dop()) {
        optionals.set(14);
      }
      if (struct.isSetPer_scan_node_dop()) {
        optionals.set(15);
      }
      if (struct.isSetWorkgroup()) {
        optionals.set(16);
      }
      if (struct.isSetEnable_resource_group()) {
        optionals.set(17);
      }
      if (struct.isSetFunc_version()) {
        optionals.set(18);
      }
      if (struct.isSetEnable_shared_scan()) {
        optionals.set(19);
      }
      if (struct.isSetIs_stream_pipeline()) {
        optionals.set(20);
      }
      if (struct.isSetAdaptive_dop_param()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetFragment()) {
        struct.fragment.write(oprot);
      }
      if (struct.isSetDesc_tbl()) {
        struct.desc_tbl.write(oprot);
      }
      if (struct.isSetParams()) {
        struct.params.write(oprot);
      }
      if (struct.isSetCoord()) {
        struct.coord.write(oprot);
      }
      if (struct.isSetBackend_num()) {
        oprot.writeI32(struct.backend_num);
      }
      if (struct.isSetQuery_globals()) {
        struct.query_globals.write(oprot);
      }
      if (struct.isSetQuery_options()) {
        struct.query_options.write(oprot);
      }
      if (struct.isSetEnable_profile()) {
        oprot.writeBool(struct.enable_profile);
      }
      if (struct.isSetResource_info()) {
        struct.resource_info.write(oprot);
      }
      if (struct.isSetImport_label()) {
        oprot.writeString(struct.import_label);
      }
      if (struct.isSetDb_name()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetLoad_job_id()) {
        oprot.writeI64(struct.load_job_id);
      }
      if (struct.isSetLoad_error_hub_info()) {
        struct.load_error_hub_info.write(oprot);
      }
      if (struct.isSetIs_pipeline()) {
        oprot.writeBool(struct.is_pipeline);
      }
      if (struct.isSetPipeline_dop()) {
        oprot.writeI32(struct.pipeline_dop);
      }
      if (struct.isSetPer_scan_node_dop()) {
        {
          oprot.writeI32(struct.per_scan_node_dop.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter87 : struct.per_scan_node_dop.entrySet())
          {
            oprot.writeI32(_iter87.getKey());
            oprot.writeI32(_iter87.getValue());
          }
        }
      }
      if (struct.isSetWorkgroup()) {
        struct.workgroup.write(oprot);
      }
      if (struct.isSetEnable_resource_group()) {
        oprot.writeBool(struct.enable_resource_group);
      }
      if (struct.isSetFunc_version()) {
        oprot.writeI32(struct.func_version);
      }
      if (struct.isSetEnable_shared_scan()) {
        oprot.writeBool(struct.enable_shared_scan);
      }
      if (struct.isSetIs_stream_pipeline()) {
        oprot.writeBool(struct.is_stream_pipeline);
      }
      if (struct.isSetAdaptive_dop_param()) {
        struct.adaptive_dop_param.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.protocol_version = com.starrocks.thrift.InternalServiceVersion.findByValue(iprot.readI32());
      struct.setProtocol_versionIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.fragment = new com.starrocks.thrift.TPlanFragment();
        struct.fragment.read(iprot);
        struct.setFragmentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.desc_tbl = new com.starrocks.thrift.TDescriptorTable();
        struct.desc_tbl.read(iprot);
        struct.setDesc_tblIsSet(true);
      }
      if (incoming.get(2)) {
        struct.params = new TPlanFragmentExecParams();
        struct.params.read(iprot);
        struct.setParamsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.coord = new com.starrocks.thrift.TNetworkAddress();
        struct.coord.read(iprot);
        struct.setCoordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.backend_num = iprot.readI32();
        struct.setBackend_numIsSet(true);
      }
      if (incoming.get(5)) {
        struct.query_globals = new TQueryGlobals();
        struct.query_globals.read(iprot);
        struct.setQuery_globalsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.query_options = new TQueryOptions();
        struct.query_options.read(iprot);
        struct.setQuery_optionsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.enable_profile = iprot.readBool();
        struct.setEnable_profileIsSet(true);
      }
      if (incoming.get(8)) {
        struct.resource_info = new com.starrocks.thrift.TResourceInfo();
        struct.resource_info.read(iprot);
        struct.setResource_infoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.import_label = iprot.readString();
        struct.setImport_labelIsSet(true);
      }
      if (incoming.get(10)) {
        struct.db_name = iprot.readString();
        struct.setDb_nameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.load_job_id = iprot.readI64();
        struct.setLoad_job_idIsSet(true);
      }
      if (incoming.get(12)) {
        struct.load_error_hub_info = new TLoadErrorHubInfo();
        struct.load_error_hub_info.read(iprot);
        struct.setLoad_error_hub_infoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.is_pipeline = iprot.readBool();
        struct.setIs_pipelineIsSet(true);
      }
      if (incoming.get(14)) {
        struct.pipeline_dop = iprot.readI32();
        struct.setPipeline_dopIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TMap _map88 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32); 
          struct.per_scan_node_dop = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map88.size);
          int _key89;
          int _val90;
          for (int _i91 = 0; _i91 < _map88.size; ++_i91)
          {
            _key89 = iprot.readI32();
            _val90 = iprot.readI32();
            struct.per_scan_node_dop.put(_key89, _val90);
          }
        }
        struct.setPer_scan_node_dopIsSet(true);
      }
      if (incoming.get(16)) {
        struct.workgroup = new com.starrocks.thrift.TWorkGroup();
        struct.workgroup.read(iprot);
        struct.setWorkgroupIsSet(true);
      }
      if (incoming.get(17)) {
        struct.enable_resource_group = iprot.readBool();
        struct.setEnable_resource_groupIsSet(true);
      }
      if (incoming.get(18)) {
        struct.func_version = iprot.readI32();
        struct.setFunc_versionIsSet(true);
      }
      if (incoming.get(19)) {
        struct.enable_shared_scan = iprot.readBool();
        struct.setEnable_shared_scanIsSet(true);
      }
      if (incoming.get(20)) {
        struct.is_stream_pipeline = iprot.readBool();
        struct.setIs_stream_pipelineIsSet(true);
      }
      if (incoming.get(21)) {
        struct.adaptive_dop_param = new TAdaptiveDopParam();
        struct.adaptive_dop_param.read(iprot);
        struct.setAdaptive_dop_paramIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

