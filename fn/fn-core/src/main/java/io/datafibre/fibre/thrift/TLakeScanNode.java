/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TLakeScanNode implements org.apache.thrift.TBase<TLakeScanNode, TLakeScanNode._Fields>, java.io.Serializable, Cloneable, Comparable<TLakeScanNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLakeScanNode");

  private static final org.apache.thrift.protocol.TField TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("key_column_name", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField KEY_COLUMN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("key_column_type", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField IS_PREAGGREGATION_FIELD_DESC = new org.apache.thrift.protocol.TField("is_preaggregation", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField SORT_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_column", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ROLLUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("rollup_name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SQL_PREDICATES_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_predicates", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ENABLE_COLUMN_EXPR_PREDICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_column_expr_predicate", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField DICT_STRING_ID_TO_INT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("dict_string_id_to_int_ids", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField UNUSED_OUTPUT_COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("unused_output_column_name", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField SORT_KEY_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_key_column_names", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField BUCKET_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("bucket_exprs", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField COLUMN_ACCESS_PATHS_FIELD_DESC = new org.apache.thrift.protocol.TField("column_access_paths", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TLakeScanNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TLakeScanNodeTupleSchemeFactory();

  public int tuple_id; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> key_column_name; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TPrimitiveType> key_column_type; // required
  public boolean is_preaggregation; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String sort_column; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String rollup_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sql_predicates; // optional
  public boolean enable_column_expr_predicate; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> dict_string_id_to_int_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> unused_output_column_name; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> sort_key_column_names; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> bucket_exprs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TColumnAccessPath> column_access_paths; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TUPLE_ID((short)1, "tuple_id"),
    KEY_COLUMN_NAME((short)2, "key_column_name"),
    KEY_COLUMN_TYPE((short)3, "key_column_type"),
    IS_PREAGGREGATION((short)4, "is_preaggregation"),
    SORT_COLUMN((short)5, "sort_column"),
    ROLLUP_NAME((short)6, "rollup_name"),
    SQL_PREDICATES((short)7, "sql_predicates"),
    ENABLE_COLUMN_EXPR_PREDICATE((short)8, "enable_column_expr_predicate"),
    DICT_STRING_ID_TO_INT_IDS((short)9, "dict_string_id_to_int_ids"),
    UNUSED_OUTPUT_COLUMN_NAME((short)10, "unused_output_column_name"),
    SORT_KEY_COLUMN_NAMES((short)11, "sort_key_column_names"),
    BUCKET_EXPRS((short)12, "bucket_exprs"),
    COLUMN_ACCESS_PATHS((short)13, "column_access_paths");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TUPLE_ID
          return TUPLE_ID;
        case 2: // KEY_COLUMN_NAME
          return KEY_COLUMN_NAME;
        case 3: // KEY_COLUMN_TYPE
          return KEY_COLUMN_TYPE;
        case 4: // IS_PREAGGREGATION
          return IS_PREAGGREGATION;
        case 5: // SORT_COLUMN
          return SORT_COLUMN;
        case 6: // ROLLUP_NAME
          return ROLLUP_NAME;
        case 7: // SQL_PREDICATES
          return SQL_PREDICATES;
        case 8: // ENABLE_COLUMN_EXPR_PREDICATE
          return ENABLE_COLUMN_EXPR_PREDICATE;
        case 9: // DICT_STRING_ID_TO_INT_IDS
          return DICT_STRING_ID_TO_INT_IDS;
        case 10: // UNUSED_OUTPUT_COLUMN_NAME
          return UNUSED_OUTPUT_COLUMN_NAME;
        case 11: // SORT_KEY_COLUMN_NAMES
          return SORT_KEY_COLUMN_NAMES;
        case 12: // BUCKET_EXPRS
          return BUCKET_EXPRS;
        case 13: // COLUMN_ACCESS_PATHS
          return COLUMN_ACCESS_PATHS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TUPLE_ID_ISSET_ID = 0;
  private static final int __IS_PREAGGREGATION_ISSET_ID = 1;
  private static final int __ENABLE_COLUMN_EXPR_PREDICATE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SORT_COLUMN,_Fields.ROLLUP_NAME,_Fields.SQL_PREDICATES,_Fields.ENABLE_COLUMN_EXPR_PREDICATE,_Fields.DICT_STRING_ID_TO_INT_IDS,_Fields.UNUSED_OUTPUT_COLUMN_NAME,_Fields.SORT_KEY_COLUMN_NAMES,_Fields.BUCKET_EXPRS,_Fields.COLUMN_ACCESS_PATHS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.KEY_COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("key_column_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.KEY_COLUMN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("key_column_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TPrimitiveType.class))));
    tmpMap.put(_Fields.IS_PREAGGREGATION, new org.apache.thrift.meta_data.FieldMetaData("is_preaggregation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SORT_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("sort_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLLUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("rollup_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SQL_PREDICATES, new org.apache.thrift.meta_data.FieldMetaData("sql_predicates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLE_COLUMN_EXPR_PREDICATE, new org.apache.thrift.meta_data.FieldMetaData("enable_column_expr_predicate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DICT_STRING_ID_TO_INT_IDS, new org.apache.thrift.meta_data.FieldMetaData("dict_string_id_to_int_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.UNUSED_OUTPUT_COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("unused_output_column_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SORT_KEY_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("sort_key_column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BUCKET_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("bucket_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class))));
    tmpMap.put(_Fields.COLUMN_ACCESS_PATHS, new org.apache.thrift.meta_data.FieldMetaData("column_access_paths", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumnAccessPath.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLakeScanNode.class, metaDataMap);
  }

  public TLakeScanNode() {
  }

  public TLakeScanNode(
    int tuple_id,
    java.util.List<java.lang.String> key_column_name,
    java.util.List<com.starrocks.thrift.TPrimitiveType> key_column_type,
    boolean is_preaggregation)
  {
    this();
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    this.key_column_name = key_column_name;
    this.key_column_type = key_column_type;
    this.is_preaggregation = is_preaggregation;
    setIs_preaggregationIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLakeScanNode(TLakeScanNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tuple_id = other.tuple_id;
    if (other.isSetKey_column_name()) {
      java.util.List<java.lang.String> __this__key_column_name = new java.util.ArrayList<java.lang.String>(other.key_column_name);
      this.key_column_name = __this__key_column_name;
    }
    if (other.isSetKey_column_type()) {
      java.util.List<com.starrocks.thrift.TPrimitiveType> __this__key_column_type = new java.util.ArrayList<com.starrocks.thrift.TPrimitiveType>(other.key_column_type.size());
      for (com.starrocks.thrift.TPrimitiveType other_element : other.key_column_type) {
        __this__key_column_type.add(other_element);
      }
      this.key_column_type = __this__key_column_type;
    }
    this.is_preaggregation = other.is_preaggregation;
    if (other.isSetSort_column()) {
      this.sort_column = other.sort_column;
    }
    if (other.isSetRollup_name()) {
      this.rollup_name = other.rollup_name;
    }
    if (other.isSetSql_predicates()) {
      this.sql_predicates = other.sql_predicates;
    }
    this.enable_column_expr_predicate = other.enable_column_expr_predicate;
    if (other.isSetDict_string_id_to_int_ids()) {
      java.util.Map<java.lang.Integer,java.lang.Integer> __this__dict_string_id_to_int_ids = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.dict_string_id_to_int_ids);
      this.dict_string_id_to_int_ids = __this__dict_string_id_to_int_ids;
    }
    if (other.isSetUnused_output_column_name()) {
      java.util.List<java.lang.String> __this__unused_output_column_name = new java.util.ArrayList<java.lang.String>(other.unused_output_column_name);
      this.unused_output_column_name = __this__unused_output_column_name;
    }
    if (other.isSetSort_key_column_names()) {
      java.util.List<java.lang.String> __this__sort_key_column_names = new java.util.ArrayList<java.lang.String>(other.sort_key_column_names);
      this.sort_key_column_names = __this__sort_key_column_names;
    }
    if (other.isSetBucket_exprs()) {
      java.util.List<com.starrocks.thrift.TExpr> __this__bucket_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>(other.bucket_exprs.size());
      for (com.starrocks.thrift.TExpr other_element : other.bucket_exprs) {
        __this__bucket_exprs.add(new com.starrocks.thrift.TExpr(other_element));
      }
      this.bucket_exprs = __this__bucket_exprs;
    }
    if (other.isSetColumn_access_paths()) {
      java.util.List<TColumnAccessPath> __this__column_access_paths = new java.util.ArrayList<TColumnAccessPath>(other.column_access_paths.size());
      for (TColumnAccessPath other_element : other.column_access_paths) {
        __this__column_access_paths.add(new TColumnAccessPath(other_element));
      }
      this.column_access_paths = __this__column_access_paths;
    }
  }

  @Override
  public TLakeScanNode deepCopy() {
    return new TLakeScanNode(this);
  }

  @Override
  public void clear() {
    setTuple_idIsSet(false);
    this.tuple_id = 0;
    this.key_column_name = null;
    this.key_column_type = null;
    setIs_preaggregationIsSet(false);
    this.is_preaggregation = false;
    this.sort_column = null;
    this.rollup_name = null;
    this.sql_predicates = null;
    setEnable_column_expr_predicateIsSet(false);
    this.enable_column_expr_predicate = false;
    this.dict_string_id_to_int_ids = null;
    this.unused_output_column_name = null;
    this.sort_key_column_names = null;
    this.bucket_exprs = null;
    this.column_access_paths = null;
  }

  public int getTuple_id() {
    return this.tuple_id;
  }

  public TLakeScanNode setTuple_id(int tuple_id) {
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    return this;
  }

  public void unsetTuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  public void setTuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TUPLE_ID_ISSET_ID, value);
  }

  public int getKey_column_nameSize() {
    return (this.key_column_name == null) ? 0 : this.key_column_name.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getKey_column_nameIterator() {
    return (this.key_column_name == null) ? null : this.key_column_name.iterator();
  }

  public void addToKey_column_name(java.lang.String elem) {
    if (this.key_column_name == null) {
      this.key_column_name = new java.util.ArrayList<java.lang.String>();
    }
    this.key_column_name.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getKey_column_name() {
    return this.key_column_name;
  }

  public TLakeScanNode setKey_column_name(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> key_column_name) {
    this.key_column_name = key_column_name;
    return this;
  }

  public void unsetKey_column_name() {
    this.key_column_name = null;
  }

  /** Returns true if field key_column_name is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_column_name() {
    return this.key_column_name != null;
  }

  public void setKey_column_nameIsSet(boolean value) {
    if (!value) {
      this.key_column_name = null;
    }
  }

  public int getKey_column_typeSize() {
    return (this.key_column_type == null) ? 0 : this.key_column_type.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TPrimitiveType> getKey_column_typeIterator() {
    return (this.key_column_type == null) ? null : this.key_column_type.iterator();
  }

  public void addToKey_column_type(com.starrocks.thrift.TPrimitiveType elem) {
    if (this.key_column_type == null) {
      this.key_column_type = new java.util.ArrayList<com.starrocks.thrift.TPrimitiveType>();
    }
    this.key_column_type.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TPrimitiveType> getKey_column_type() {
    return this.key_column_type;
  }

  public TLakeScanNode setKey_column_type(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TPrimitiveType> key_column_type) {
    this.key_column_type = key_column_type;
    return this;
  }

  public void unsetKey_column_type() {
    this.key_column_type = null;
  }

  /** Returns true if field key_column_type is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_column_type() {
    return this.key_column_type != null;
  }

  public void setKey_column_typeIsSet(boolean value) {
    if (!value) {
      this.key_column_type = null;
    }
  }

  public boolean isIs_preaggregation() {
    return this.is_preaggregation;
  }

  public TLakeScanNode setIs_preaggregation(boolean is_preaggregation) {
    this.is_preaggregation = is_preaggregation;
    setIs_preaggregationIsSet(true);
    return this;
  }

  public void unsetIs_preaggregation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_PREAGGREGATION_ISSET_ID);
  }

  /** Returns true if field is_preaggregation is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_preaggregation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_PREAGGREGATION_ISSET_ID);
  }

  public void setIs_preaggregationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_PREAGGREGATION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSort_column() {
    return this.sort_column;
  }

  public TLakeScanNode setSort_column(@org.apache.thrift.annotation.Nullable java.lang.String sort_column) {
    this.sort_column = sort_column;
    return this;
  }

  public void unsetSort_column() {
    this.sort_column = null;
  }

  /** Returns true if field sort_column is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_column() {
    return this.sort_column != null;
  }

  public void setSort_columnIsSet(boolean value) {
    if (!value) {
      this.sort_column = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRollup_name() {
    return this.rollup_name;
  }

  public TLakeScanNode setRollup_name(@org.apache.thrift.annotation.Nullable java.lang.String rollup_name) {
    this.rollup_name = rollup_name;
    return this;
  }

  public void unsetRollup_name() {
    this.rollup_name = null;
  }

  /** Returns true if field rollup_name is set (has been assigned a value) and false otherwise */
  public boolean isSetRollup_name() {
    return this.rollup_name != null;
  }

  public void setRollup_nameIsSet(boolean value) {
    if (!value) {
      this.rollup_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSql_predicates() {
    return this.sql_predicates;
  }

  public TLakeScanNode setSql_predicates(@org.apache.thrift.annotation.Nullable java.lang.String sql_predicates) {
    this.sql_predicates = sql_predicates;
    return this;
  }

  public void unsetSql_predicates() {
    this.sql_predicates = null;
  }

  /** Returns true if field sql_predicates is set (has been assigned a value) and false otherwise */
  public boolean isSetSql_predicates() {
    return this.sql_predicates != null;
  }

  public void setSql_predicatesIsSet(boolean value) {
    if (!value) {
      this.sql_predicates = null;
    }
  }

  public boolean isEnable_column_expr_predicate() {
    return this.enable_column_expr_predicate;
  }

  public TLakeScanNode setEnable_column_expr_predicate(boolean enable_column_expr_predicate) {
    this.enable_column_expr_predicate = enable_column_expr_predicate;
    setEnable_column_expr_predicateIsSet(true);
    return this;
  }

  public void unsetEnable_column_expr_predicate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_COLUMN_EXPR_PREDICATE_ISSET_ID);
  }

  /** Returns true if field enable_column_expr_predicate is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_column_expr_predicate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_COLUMN_EXPR_PREDICATE_ISSET_ID);
  }

  public void setEnable_column_expr_predicateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_COLUMN_EXPR_PREDICATE_ISSET_ID, value);
  }

  public int getDict_string_id_to_int_idsSize() {
    return (this.dict_string_id_to_int_ids == null) ? 0 : this.dict_string_id_to_int_ids.size();
  }

  public void putToDict_string_id_to_int_ids(int key, int val) {
    if (this.dict_string_id_to_int_ids == null) {
      this.dict_string_id_to_int_ids = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
    }
    this.dict_string_id_to_int_ids.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Integer> getDict_string_id_to_int_ids() {
    return this.dict_string_id_to_int_ids;
  }

  public TLakeScanNode setDict_string_id_to_int_ids(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> dict_string_id_to_int_ids) {
    this.dict_string_id_to_int_ids = dict_string_id_to_int_ids;
    return this;
  }

  public void unsetDict_string_id_to_int_ids() {
    this.dict_string_id_to_int_ids = null;
  }

  /** Returns true if field dict_string_id_to_int_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetDict_string_id_to_int_ids() {
    return this.dict_string_id_to_int_ids != null;
  }

  public void setDict_string_id_to_int_idsIsSet(boolean value) {
    if (!value) {
      this.dict_string_id_to_int_ids = null;
    }
  }

  public int getUnused_output_column_nameSize() {
    return (this.unused_output_column_name == null) ? 0 : this.unused_output_column_name.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getUnused_output_column_nameIterator() {
    return (this.unused_output_column_name == null) ? null : this.unused_output_column_name.iterator();
  }

  public void addToUnused_output_column_name(java.lang.String elem) {
    if (this.unused_output_column_name == null) {
      this.unused_output_column_name = new java.util.ArrayList<java.lang.String>();
    }
    this.unused_output_column_name.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getUnused_output_column_name() {
    return this.unused_output_column_name;
  }

  public TLakeScanNode setUnused_output_column_name(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> unused_output_column_name) {
    this.unused_output_column_name = unused_output_column_name;
    return this;
  }

  public void unsetUnused_output_column_name() {
    this.unused_output_column_name = null;
  }

  /** Returns true if field unused_output_column_name is set (has been assigned a value) and false otherwise */
  public boolean isSetUnused_output_column_name() {
    return this.unused_output_column_name != null;
  }

  public void setUnused_output_column_nameIsSet(boolean value) {
    if (!value) {
      this.unused_output_column_name = null;
    }
  }

  public int getSort_key_column_namesSize() {
    return (this.sort_key_column_names == null) ? 0 : this.sort_key_column_names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getSort_key_column_namesIterator() {
    return (this.sort_key_column_names == null) ? null : this.sort_key_column_names.iterator();
  }

  public void addToSort_key_column_names(java.lang.String elem) {
    if (this.sort_key_column_names == null) {
      this.sort_key_column_names = new java.util.ArrayList<java.lang.String>();
    }
    this.sort_key_column_names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getSort_key_column_names() {
    return this.sort_key_column_names;
  }

  public TLakeScanNode setSort_key_column_names(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> sort_key_column_names) {
    this.sort_key_column_names = sort_key_column_names;
    return this;
  }

  public void unsetSort_key_column_names() {
    this.sort_key_column_names = null;
  }

  /** Returns true if field sort_key_column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_key_column_names() {
    return this.sort_key_column_names != null;
  }

  public void setSort_key_column_namesIsSet(boolean value) {
    if (!value) {
      this.sort_key_column_names = null;
    }
  }

  public int getBucket_exprsSize() {
    return (this.bucket_exprs == null) ? 0 : this.bucket_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TExpr> getBucket_exprsIterator() {
    return (this.bucket_exprs == null) ? null : this.bucket_exprs.iterator();
  }

  public void addToBucket_exprs(com.starrocks.thrift.TExpr elem) {
    if (this.bucket_exprs == null) {
      this.bucket_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>();
    }
    this.bucket_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TExpr> getBucket_exprs() {
    return this.bucket_exprs;
  }

  public TLakeScanNode setBucket_exprs(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> bucket_exprs) {
    this.bucket_exprs = bucket_exprs;
    return this;
  }

  public void unsetBucket_exprs() {
    this.bucket_exprs = null;
  }

  /** Returns true if field bucket_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetBucket_exprs() {
    return this.bucket_exprs != null;
  }

  public void setBucket_exprsIsSet(boolean value) {
    if (!value) {
      this.bucket_exprs = null;
    }
  }

  public int getColumn_access_pathsSize() {
    return (this.column_access_paths == null) ? 0 : this.column_access_paths.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TColumnAccessPath> getColumn_access_pathsIterator() {
    return (this.column_access_paths == null) ? null : this.column_access_paths.iterator();
  }

  public void addToColumn_access_paths(TColumnAccessPath elem) {
    if (this.column_access_paths == null) {
      this.column_access_paths = new java.util.ArrayList<TColumnAccessPath>();
    }
    this.column_access_paths.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TColumnAccessPath> getColumn_access_paths() {
    return this.column_access_paths;
  }

  public TLakeScanNode setColumn_access_paths(@org.apache.thrift.annotation.Nullable java.util.List<TColumnAccessPath> column_access_paths) {
    this.column_access_paths = column_access_paths;
    return this;
  }

  public void unsetColumn_access_paths() {
    this.column_access_paths = null;
  }

  /** Returns true if field column_access_paths is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_access_paths() {
    return this.column_access_paths != null;
  }

  public void setColumn_access_pathsIsSet(boolean value) {
    if (!value) {
      this.column_access_paths = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TUPLE_ID:
      if (value == null) {
        unsetTuple_id();
      } else {
        setTuple_id((java.lang.Integer)value);
      }
      break;

    case KEY_COLUMN_NAME:
      if (value == null) {
        unsetKey_column_name();
      } else {
        setKey_column_name((java.util.List<java.lang.String>)value);
      }
      break;

    case KEY_COLUMN_TYPE:
      if (value == null) {
        unsetKey_column_type();
      } else {
        setKey_column_type((java.util.List<com.starrocks.thrift.TPrimitiveType>)value);
      }
      break;

    case IS_PREAGGREGATION:
      if (value == null) {
        unsetIs_preaggregation();
      } else {
        setIs_preaggregation((java.lang.Boolean)value);
      }
      break;

    case SORT_COLUMN:
      if (value == null) {
        unsetSort_column();
      } else {
        setSort_column((java.lang.String)value);
      }
      break;

    case ROLLUP_NAME:
      if (value == null) {
        unsetRollup_name();
      } else {
        setRollup_name((java.lang.String)value);
      }
      break;

    case SQL_PREDICATES:
      if (value == null) {
        unsetSql_predicates();
      } else {
        setSql_predicates((java.lang.String)value);
      }
      break;

    case ENABLE_COLUMN_EXPR_PREDICATE:
      if (value == null) {
        unsetEnable_column_expr_predicate();
      } else {
        setEnable_column_expr_predicate((java.lang.Boolean)value);
      }
      break;

    case DICT_STRING_ID_TO_INT_IDS:
      if (value == null) {
        unsetDict_string_id_to_int_ids();
      } else {
        setDict_string_id_to_int_ids((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
      }
      break;

    case UNUSED_OUTPUT_COLUMN_NAME:
      if (value == null) {
        unsetUnused_output_column_name();
      } else {
        setUnused_output_column_name((java.util.List<java.lang.String>)value);
      }
      break;

    case SORT_KEY_COLUMN_NAMES:
      if (value == null) {
        unsetSort_key_column_names();
      } else {
        setSort_key_column_names((java.util.List<java.lang.String>)value);
      }
      break;

    case BUCKET_EXPRS:
      if (value == null) {
        unsetBucket_exprs();
      } else {
        setBucket_exprs((java.util.List<com.starrocks.thrift.TExpr>)value);
      }
      break;

    case COLUMN_ACCESS_PATHS:
      if (value == null) {
        unsetColumn_access_paths();
      } else {
        setColumn_access_paths((java.util.List<TColumnAccessPath>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TUPLE_ID:
      return getTuple_id();

    case KEY_COLUMN_NAME:
      return getKey_column_name();

    case KEY_COLUMN_TYPE:
      return getKey_column_type();

    case IS_PREAGGREGATION:
      return isIs_preaggregation();

    case SORT_COLUMN:
      return getSort_column();

    case ROLLUP_NAME:
      return getRollup_name();

    case SQL_PREDICATES:
      return getSql_predicates();

    case ENABLE_COLUMN_EXPR_PREDICATE:
      return isEnable_column_expr_predicate();

    case DICT_STRING_ID_TO_INT_IDS:
      return getDict_string_id_to_int_ids();

    case UNUSED_OUTPUT_COLUMN_NAME:
      return getUnused_output_column_name();

    case SORT_KEY_COLUMN_NAMES:
      return getSort_key_column_names();

    case BUCKET_EXPRS:
      return getBucket_exprs();

    case COLUMN_ACCESS_PATHS:
      return getColumn_access_paths();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TUPLE_ID:
      return isSetTuple_id();
    case KEY_COLUMN_NAME:
      return isSetKey_column_name();
    case KEY_COLUMN_TYPE:
      return isSetKey_column_type();
    case IS_PREAGGREGATION:
      return isSetIs_preaggregation();
    case SORT_COLUMN:
      return isSetSort_column();
    case ROLLUP_NAME:
      return isSetRollup_name();
    case SQL_PREDICATES:
      return isSetSql_predicates();
    case ENABLE_COLUMN_EXPR_PREDICATE:
      return isSetEnable_column_expr_predicate();
    case DICT_STRING_ID_TO_INT_IDS:
      return isSetDict_string_id_to_int_ids();
    case UNUSED_OUTPUT_COLUMN_NAME:
      return isSetUnused_output_column_name();
    case SORT_KEY_COLUMN_NAMES:
      return isSetSort_key_column_names();
    case BUCKET_EXPRS:
      return isSetBucket_exprs();
    case COLUMN_ACCESS_PATHS:
      return isSetColumn_access_paths();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TLakeScanNode)
      return this.equals((TLakeScanNode)that);
    return false;
  }

  public boolean equals(TLakeScanNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tuple_id = true;
    boolean that_present_tuple_id = true;
    if (this_present_tuple_id || that_present_tuple_id) {
      if (!(this_present_tuple_id && that_present_tuple_id))
        return false;
      if (this.tuple_id != that.tuple_id)
        return false;
    }

    boolean this_present_key_column_name = true && this.isSetKey_column_name();
    boolean that_present_key_column_name = true && that.isSetKey_column_name();
    if (this_present_key_column_name || that_present_key_column_name) {
      if (!(this_present_key_column_name && that_present_key_column_name))
        return false;
      if (!this.key_column_name.equals(that.key_column_name))
        return false;
    }

    boolean this_present_key_column_type = true && this.isSetKey_column_type();
    boolean that_present_key_column_type = true && that.isSetKey_column_type();
    if (this_present_key_column_type || that_present_key_column_type) {
      if (!(this_present_key_column_type && that_present_key_column_type))
        return false;
      if (!this.key_column_type.equals(that.key_column_type))
        return false;
    }

    boolean this_present_is_preaggregation = true;
    boolean that_present_is_preaggregation = true;
    if (this_present_is_preaggregation || that_present_is_preaggregation) {
      if (!(this_present_is_preaggregation && that_present_is_preaggregation))
        return false;
      if (this.is_preaggregation != that.is_preaggregation)
        return false;
    }

    boolean this_present_sort_column = true && this.isSetSort_column();
    boolean that_present_sort_column = true && that.isSetSort_column();
    if (this_present_sort_column || that_present_sort_column) {
      if (!(this_present_sort_column && that_present_sort_column))
        return false;
      if (!this.sort_column.equals(that.sort_column))
        return false;
    }

    boolean this_present_rollup_name = true && this.isSetRollup_name();
    boolean that_present_rollup_name = true && that.isSetRollup_name();
    if (this_present_rollup_name || that_present_rollup_name) {
      if (!(this_present_rollup_name && that_present_rollup_name))
        return false;
      if (!this.rollup_name.equals(that.rollup_name))
        return false;
    }

    boolean this_present_sql_predicates = true && this.isSetSql_predicates();
    boolean that_present_sql_predicates = true && that.isSetSql_predicates();
    if (this_present_sql_predicates || that_present_sql_predicates) {
      if (!(this_present_sql_predicates && that_present_sql_predicates))
        return false;
      if (!this.sql_predicates.equals(that.sql_predicates))
        return false;
    }

    boolean this_present_enable_column_expr_predicate = true && this.isSetEnable_column_expr_predicate();
    boolean that_present_enable_column_expr_predicate = true && that.isSetEnable_column_expr_predicate();
    if (this_present_enable_column_expr_predicate || that_present_enable_column_expr_predicate) {
      if (!(this_present_enable_column_expr_predicate && that_present_enable_column_expr_predicate))
        return false;
      if (this.enable_column_expr_predicate != that.enable_column_expr_predicate)
        return false;
    }

    boolean this_present_dict_string_id_to_int_ids = true && this.isSetDict_string_id_to_int_ids();
    boolean that_present_dict_string_id_to_int_ids = true && that.isSetDict_string_id_to_int_ids();
    if (this_present_dict_string_id_to_int_ids || that_present_dict_string_id_to_int_ids) {
      if (!(this_present_dict_string_id_to_int_ids && that_present_dict_string_id_to_int_ids))
        return false;
      if (!this.dict_string_id_to_int_ids.equals(that.dict_string_id_to_int_ids))
        return false;
    }

    boolean this_present_unused_output_column_name = true && this.isSetUnused_output_column_name();
    boolean that_present_unused_output_column_name = true && that.isSetUnused_output_column_name();
    if (this_present_unused_output_column_name || that_present_unused_output_column_name) {
      if (!(this_present_unused_output_column_name && that_present_unused_output_column_name))
        return false;
      if (!this.unused_output_column_name.equals(that.unused_output_column_name))
        return false;
    }

    boolean this_present_sort_key_column_names = true && this.isSetSort_key_column_names();
    boolean that_present_sort_key_column_names = true && that.isSetSort_key_column_names();
    if (this_present_sort_key_column_names || that_present_sort_key_column_names) {
      if (!(this_present_sort_key_column_names && that_present_sort_key_column_names))
        return false;
      if (!this.sort_key_column_names.equals(that.sort_key_column_names))
        return false;
    }

    boolean this_present_bucket_exprs = true && this.isSetBucket_exprs();
    boolean that_present_bucket_exprs = true && that.isSetBucket_exprs();
    if (this_present_bucket_exprs || that_present_bucket_exprs) {
      if (!(this_present_bucket_exprs && that_present_bucket_exprs))
        return false;
      if (!this.bucket_exprs.equals(that.bucket_exprs))
        return false;
    }

    boolean this_present_column_access_paths = true && this.isSetColumn_access_paths();
    boolean that_present_column_access_paths = true && that.isSetColumn_access_paths();
    if (this_present_column_access_paths || that_present_column_access_paths) {
      if (!(this_present_column_access_paths && that_present_column_access_paths))
        return false;
      if (!this.column_access_paths.equals(that.column_access_paths))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + tuple_id;

    hashCode = hashCode * 8191 + ((isSetKey_column_name()) ? 131071 : 524287);
    if (isSetKey_column_name())
      hashCode = hashCode * 8191 + key_column_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetKey_column_type()) ? 131071 : 524287);
    if (isSetKey_column_type())
      hashCode = hashCode * 8191 + key_column_type.hashCode();

    hashCode = hashCode * 8191 + ((is_preaggregation) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSort_column()) ? 131071 : 524287);
    if (isSetSort_column())
      hashCode = hashCode * 8191 + sort_column.hashCode();

    hashCode = hashCode * 8191 + ((isSetRollup_name()) ? 131071 : 524287);
    if (isSetRollup_name())
      hashCode = hashCode * 8191 + rollup_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetSql_predicates()) ? 131071 : 524287);
    if (isSetSql_predicates())
      hashCode = hashCode * 8191 + sql_predicates.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnable_column_expr_predicate()) ? 131071 : 524287);
    if (isSetEnable_column_expr_predicate())
      hashCode = hashCode * 8191 + ((enable_column_expr_predicate) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDict_string_id_to_int_ids()) ? 131071 : 524287);
    if (isSetDict_string_id_to_int_ids())
      hashCode = hashCode * 8191 + dict_string_id_to_int_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnused_output_column_name()) ? 131071 : 524287);
    if (isSetUnused_output_column_name())
      hashCode = hashCode * 8191 + unused_output_column_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetSort_key_column_names()) ? 131071 : 524287);
    if (isSetSort_key_column_names())
      hashCode = hashCode * 8191 + sort_key_column_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetBucket_exprs()) ? 131071 : 524287);
    if (isSetBucket_exprs())
      hashCode = hashCode * 8191 + bucket_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumn_access_paths()) ? 131071 : 524287);
    if (isSetColumn_access_paths())
      hashCode = hashCode * 8191 + column_access_paths.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TLakeScanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTuple_id(), other.isSetTuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_id, other.tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKey_column_name(), other.isSetKey_column_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_column_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_column_name, other.key_column_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKey_column_type(), other.isSetKey_column_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_column_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_column_type, other.key_column_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_preaggregation(), other.isSetIs_preaggregation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_preaggregation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_preaggregation, other.is_preaggregation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSort_column(), other.isSetSort_column());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_column()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_column, other.sort_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRollup_name(), other.isSetRollup_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRollup_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rollup_name, other.rollup_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSql_predicates(), other.isSetSql_predicates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql_predicates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_predicates, other.sql_predicates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_column_expr_predicate(), other.isSetEnable_column_expr_predicate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_column_expr_predicate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_column_expr_predicate, other.enable_column_expr_predicate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDict_string_id_to_int_ids(), other.isSetDict_string_id_to_int_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDict_string_id_to_int_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dict_string_id_to_int_ids, other.dict_string_id_to_int_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUnused_output_column_name(), other.isSetUnused_output_column_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnused_output_column_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unused_output_column_name, other.unused_output_column_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSort_key_column_names(), other.isSetSort_key_column_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_key_column_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_key_column_names, other.sort_key_column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBucket_exprs(), other.isSetBucket_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucket_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucket_exprs, other.bucket_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumn_access_paths(), other.isSetColumn_access_paths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_access_paths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_access_paths, other.column_access_paths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TLakeScanNode(");
    boolean first = true;

    sb.append("tuple_id:");
    sb.append(this.tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("key_column_name:");
    if (this.key_column_name == null) {
      sb.append("null");
    } else {
      sb.append(this.key_column_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key_column_type:");
    if (this.key_column_type == null) {
      sb.append("null");
    } else {
      sb.append(this.key_column_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_preaggregation:");
    sb.append(this.is_preaggregation);
    first = false;
    if (isSetSort_column()) {
      if (!first) sb.append(", ");
      sb.append("sort_column:");
      if (this.sort_column == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_column);
      }
      first = false;
    }
    if (isSetRollup_name()) {
      if (!first) sb.append(", ");
      sb.append("rollup_name:");
      if (this.rollup_name == null) {
        sb.append("null");
      } else {
        sb.append(this.rollup_name);
      }
      first = false;
    }
    if (isSetSql_predicates()) {
      if (!first) sb.append(", ");
      sb.append("sql_predicates:");
      if (this.sql_predicates == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_predicates);
      }
      first = false;
    }
    if (isSetEnable_column_expr_predicate()) {
      if (!first) sb.append(", ");
      sb.append("enable_column_expr_predicate:");
      sb.append(this.enable_column_expr_predicate);
      first = false;
    }
    if (isSetDict_string_id_to_int_ids()) {
      if (!first) sb.append(", ");
      sb.append("dict_string_id_to_int_ids:");
      if (this.dict_string_id_to_int_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.dict_string_id_to_int_ids);
      }
      first = false;
    }
    if (isSetUnused_output_column_name()) {
      if (!first) sb.append(", ");
      sb.append("unused_output_column_name:");
      if (this.unused_output_column_name == null) {
        sb.append("null");
      } else {
        sb.append(this.unused_output_column_name);
      }
      first = false;
    }
    if (isSetSort_key_column_names()) {
      if (!first) sb.append(", ");
      sb.append("sort_key_column_names:");
      if (this.sort_key_column_names == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_key_column_names);
      }
      first = false;
    }
    if (isSetBucket_exprs()) {
      if (!first) sb.append(", ");
      sb.append("bucket_exprs:");
      if (this.bucket_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.bucket_exprs);
      }
      first = false;
    }
    if (isSetColumn_access_paths()) {
      if (!first) sb.append(", ");
      sb.append("column_access_paths:");
      if (this.column_access_paths == null) {
        sb.append("null");
      } else {
        sb.append(this.column_access_paths);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tuple_id' because it's a primitive and you chose the non-beans generator.
    if (key_column_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key_column_name' was not present! Struct: " + toString());
    }
    if (key_column_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key_column_type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'is_preaggregation' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLakeScanNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TLakeScanNodeStandardScheme getScheme() {
      return new TLakeScanNodeStandardScheme();
    }
  }

  private static class TLakeScanNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TLakeScanNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TLakeScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tuple_id = iprot.readI32();
              struct.setTuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY_COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list304 = iprot.readListBegin();
                struct.key_column_name = new java.util.ArrayList<java.lang.String>(_list304.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem305;
                for (int _i306 = 0; _i306 < _list304.size; ++_i306)
                {
                  _elem305 = iprot.readString();
                  struct.key_column_name.add(_elem305);
                }
                iprot.readListEnd();
              }
              struct.setKey_column_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEY_COLUMN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list307 = iprot.readListBegin();
                struct.key_column_type = new java.util.ArrayList<com.starrocks.thrift.TPrimitiveType>(_list307.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TPrimitiveType _elem308;
                for (int _i309 = 0; _i309 < _list307.size; ++_i309)
                {
                  _elem308 = com.starrocks.thrift.TPrimitiveType.findByValue(iprot.readI32());
                  if (_elem308 != null)
                  {
                    struct.key_column_type.add(_elem308);
                  }
                }
                iprot.readListEnd();
              }
              struct.setKey_column_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_PREAGGREGATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_preaggregation = iprot.readBool();
              struct.setIs_preaggregationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SORT_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sort_column = iprot.readString();
              struct.setSort_columnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ROLLUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rollup_name = iprot.readString();
              struct.setRollup_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SQL_PREDICATES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql_predicates = iprot.readString();
              struct.setSql_predicatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ENABLE_COLUMN_EXPR_PREDICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_column_expr_predicate = iprot.readBool();
              struct.setEnable_column_expr_predicateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DICT_STRING_ID_TO_INT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map310 = iprot.readMapBegin();
                struct.dict_string_id_to_int_ids = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map310.size);
                int _key311;
                int _val312;
                for (int _i313 = 0; _i313 < _map310.size; ++_i313)
                {
                  _key311 = iprot.readI32();
                  _val312 = iprot.readI32();
                  struct.dict_string_id_to_int_ids.put(_key311, _val312);
                }
                iprot.readMapEnd();
              }
              struct.setDict_string_id_to_int_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UNUSED_OUTPUT_COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list314 = iprot.readListBegin();
                struct.unused_output_column_name = new java.util.ArrayList<java.lang.String>(_list314.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem315;
                for (int _i316 = 0; _i316 < _list314.size; ++_i316)
                {
                  _elem315 = iprot.readString();
                  struct.unused_output_column_name.add(_elem315);
                }
                iprot.readListEnd();
              }
              struct.setUnused_output_column_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SORT_KEY_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list317 = iprot.readListBegin();
                struct.sort_key_column_names = new java.util.ArrayList<java.lang.String>(_list317.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem318;
                for (int _i319 = 0; _i319 < _list317.size; ++_i319)
                {
                  _elem318 = iprot.readString();
                  struct.sort_key_column_names.add(_elem318);
                }
                iprot.readListEnd();
              }
              struct.setSort_key_column_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BUCKET_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list320 = iprot.readListBegin();
                struct.bucket_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list320.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem321;
                for (int _i322 = 0; _i322 < _list320.size; ++_i322)
                {
                  _elem321 = new com.starrocks.thrift.TExpr();
                  _elem321.read(iprot);
                  struct.bucket_exprs.add(_elem321);
                }
                iprot.readListEnd();
              }
              struct.setBucket_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COLUMN_ACCESS_PATHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list323 = iprot.readListBegin();
                struct.column_access_paths = new java.util.ArrayList<TColumnAccessPath>(_list323.size);
                @org.apache.thrift.annotation.Nullable TColumnAccessPath _elem324;
                for (int _i325 = 0; _i325 < _list323.size; ++_i325)
                {
                  _elem324 = new TColumnAccessPath();
                  _elem324.read(iprot);
                  struct.column_access_paths.add(_elem324);
                }
                iprot.readListEnd();
              }
              struct.setColumn_access_pathsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tuple_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIs_preaggregation()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_preaggregation' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TLakeScanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.tuple_id);
      oprot.writeFieldEnd();
      if (struct.key_column_name != null) {
        oprot.writeFieldBegin(KEY_COLUMN_NAME_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.key_column_name.size()));
          for (java.lang.String _iter326 : struct.key_column_name)
          {
            oprot.writeString(_iter326);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.key_column_type != null) {
        oprot.writeFieldBegin(KEY_COLUMN_TYPE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.key_column_type.size()));
          for (com.starrocks.thrift.TPrimitiveType _iter327 : struct.key_column_type)
          {
            oprot.writeI32(_iter327.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_PREAGGREGATION_FIELD_DESC);
      oprot.writeBool(struct.is_preaggregation);
      oprot.writeFieldEnd();
      if (struct.sort_column != null) {
        if (struct.isSetSort_column()) {
          oprot.writeFieldBegin(SORT_COLUMN_FIELD_DESC);
          oprot.writeString(struct.sort_column);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rollup_name != null) {
        if (struct.isSetRollup_name()) {
          oprot.writeFieldBegin(ROLLUP_NAME_FIELD_DESC);
          oprot.writeString(struct.rollup_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sql_predicates != null) {
        if (struct.isSetSql_predicates()) {
          oprot.writeFieldBegin(SQL_PREDICATES_FIELD_DESC);
          oprot.writeString(struct.sql_predicates);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_column_expr_predicate()) {
        oprot.writeFieldBegin(ENABLE_COLUMN_EXPR_PREDICATE_FIELD_DESC);
        oprot.writeBool(struct.enable_column_expr_predicate);
        oprot.writeFieldEnd();
      }
      if (struct.dict_string_id_to_int_ids != null) {
        if (struct.isSetDict_string_id_to_int_ids()) {
          oprot.writeFieldBegin(DICT_STRING_ID_TO_INT_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.dict_string_id_to_int_ids.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter328 : struct.dict_string_id_to_int_ids.entrySet())
            {
              oprot.writeI32(_iter328.getKey());
              oprot.writeI32(_iter328.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.unused_output_column_name != null) {
        if (struct.isSetUnused_output_column_name()) {
          oprot.writeFieldBegin(UNUSED_OUTPUT_COLUMN_NAME_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.unused_output_column_name.size()));
            for (java.lang.String _iter329 : struct.unused_output_column_name)
            {
              oprot.writeString(_iter329);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sort_key_column_names != null) {
        if (struct.isSetSort_key_column_names()) {
          oprot.writeFieldBegin(SORT_KEY_COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sort_key_column_names.size()));
            for (java.lang.String _iter330 : struct.sort_key_column_names)
            {
              oprot.writeString(_iter330);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.bucket_exprs != null) {
        if (struct.isSetBucket_exprs()) {
          oprot.writeFieldBegin(BUCKET_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bucket_exprs.size()));
            for (com.starrocks.thrift.TExpr _iter331 : struct.bucket_exprs)
            {
              _iter331.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_access_paths != null) {
        if (struct.isSetColumn_access_paths()) {
          oprot.writeFieldBegin(COLUMN_ACCESS_PATHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.column_access_paths.size()));
            for (TColumnAccessPath _iter332 : struct.column_access_paths)
            {
              _iter332.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLakeScanNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TLakeScanNodeTupleScheme getScheme() {
      return new TLakeScanNodeTupleScheme();
    }
  }

  private static class TLakeScanNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TLakeScanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLakeScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.tuple_id);
      {
        oprot.writeI32(struct.key_column_name.size());
        for (java.lang.String _iter333 : struct.key_column_name)
        {
          oprot.writeString(_iter333);
        }
      }
      {
        oprot.writeI32(struct.key_column_type.size());
        for (com.starrocks.thrift.TPrimitiveType _iter334 : struct.key_column_type)
        {
          oprot.writeI32(_iter334.getValue());
        }
      }
      oprot.writeBool(struct.is_preaggregation);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSort_column()) {
        optionals.set(0);
      }
      if (struct.isSetRollup_name()) {
        optionals.set(1);
      }
      if (struct.isSetSql_predicates()) {
        optionals.set(2);
      }
      if (struct.isSetEnable_column_expr_predicate()) {
        optionals.set(3);
      }
      if (struct.isSetDict_string_id_to_int_ids()) {
        optionals.set(4);
      }
      if (struct.isSetUnused_output_column_name()) {
        optionals.set(5);
      }
      if (struct.isSetSort_key_column_names()) {
        optionals.set(6);
      }
      if (struct.isSetBucket_exprs()) {
        optionals.set(7);
      }
      if (struct.isSetColumn_access_paths()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetSort_column()) {
        oprot.writeString(struct.sort_column);
      }
      if (struct.isSetRollup_name()) {
        oprot.writeString(struct.rollup_name);
      }
      if (struct.isSetSql_predicates()) {
        oprot.writeString(struct.sql_predicates);
      }
      if (struct.isSetEnable_column_expr_predicate()) {
        oprot.writeBool(struct.enable_column_expr_predicate);
      }
      if (struct.isSetDict_string_id_to_int_ids()) {
        {
          oprot.writeI32(struct.dict_string_id_to_int_ids.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter335 : struct.dict_string_id_to_int_ids.entrySet())
          {
            oprot.writeI32(_iter335.getKey());
            oprot.writeI32(_iter335.getValue());
          }
        }
      }
      if (struct.isSetUnused_output_column_name()) {
        {
          oprot.writeI32(struct.unused_output_column_name.size());
          for (java.lang.String _iter336 : struct.unused_output_column_name)
          {
            oprot.writeString(_iter336);
          }
        }
      }
      if (struct.isSetSort_key_column_names()) {
        {
          oprot.writeI32(struct.sort_key_column_names.size());
          for (java.lang.String _iter337 : struct.sort_key_column_names)
          {
            oprot.writeString(_iter337);
          }
        }
      }
      if (struct.isSetBucket_exprs()) {
        {
          oprot.writeI32(struct.bucket_exprs.size());
          for (com.starrocks.thrift.TExpr _iter338 : struct.bucket_exprs)
          {
            _iter338.write(oprot);
          }
        }
      }
      if (struct.isSetColumn_access_paths()) {
        {
          oprot.writeI32(struct.column_access_paths.size());
          for (TColumnAccessPath _iter339 : struct.column_access_paths)
          {
            _iter339.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLakeScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tuple_id = iprot.readI32();
      struct.setTuple_idIsSet(true);
      {
        org.apache.thrift.protocol.TList _list340 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.key_column_name = new java.util.ArrayList<java.lang.String>(_list340.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem341;
        for (int _i342 = 0; _i342 < _list340.size; ++_i342)
        {
          _elem341 = iprot.readString();
          struct.key_column_name.add(_elem341);
        }
      }
      struct.setKey_column_nameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list343 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
        struct.key_column_type = new java.util.ArrayList<com.starrocks.thrift.TPrimitiveType>(_list343.size);
        @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TPrimitiveType _elem344;
        for (int _i345 = 0; _i345 < _list343.size; ++_i345)
        {
          _elem344 = com.starrocks.thrift.TPrimitiveType.findByValue(iprot.readI32());
          if (_elem344 != null)
          {
            struct.key_column_type.add(_elem344);
          }
        }
      }
      struct.setKey_column_typeIsSet(true);
      struct.is_preaggregation = iprot.readBool();
      struct.setIs_preaggregationIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.sort_column = iprot.readString();
        struct.setSort_columnIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rollup_name = iprot.readString();
        struct.setRollup_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sql_predicates = iprot.readString();
        struct.setSql_predicatesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.enable_column_expr_predicate = iprot.readBool();
        struct.setEnable_column_expr_predicateIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map346 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32); 
          struct.dict_string_id_to_int_ids = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map346.size);
          int _key347;
          int _val348;
          for (int _i349 = 0; _i349 < _map346.size; ++_i349)
          {
            _key347 = iprot.readI32();
            _val348 = iprot.readI32();
            struct.dict_string_id_to_int_ids.put(_key347, _val348);
          }
        }
        struct.setDict_string_id_to_int_idsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list350 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.unused_output_column_name = new java.util.ArrayList<java.lang.String>(_list350.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem351;
          for (int _i352 = 0; _i352 < _list350.size; ++_i352)
          {
            _elem351 = iprot.readString();
            struct.unused_output_column_name.add(_elem351);
          }
        }
        struct.setUnused_output_column_nameIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list353 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.sort_key_column_names = new java.util.ArrayList<java.lang.String>(_list353.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem354;
          for (int _i355 = 0; _i355 < _list353.size; ++_i355)
          {
            _elem354 = iprot.readString();
            struct.sort_key_column_names.add(_elem354);
          }
        }
        struct.setSort_key_column_namesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list356 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.bucket_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list356.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem357;
          for (int _i358 = 0; _i358 < _list356.size; ++_i358)
          {
            _elem357 = new com.starrocks.thrift.TExpr();
            _elem357.read(iprot);
            struct.bucket_exprs.add(_elem357);
          }
        }
        struct.setBucket_exprsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list359 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.column_access_paths = new java.util.ArrayList<TColumnAccessPath>(_list359.size);
          @org.apache.thrift.annotation.Nullable TColumnAccessPath _elem360;
          for (int _i361 = 0; _i361 < _list359.size; ++_i361)
          {
            _elem360 = new TColumnAccessPath();
            _elem360.read(iprot);
            struct.column_access_paths.add(_elem360);
          }
        }
        struct.setColumn_access_pathsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

