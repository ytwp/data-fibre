/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TIndexMeta implements org.apache.thrift.TBase<TIndexMeta, TIndexMeta._Fields>, java.io.Serializable, Cloneable, Comparable<TIndexMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIndexMeta");

  private static final org.apache.thrift.protocol.TField INDEX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("index_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField INDEX_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("index_state", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("row_count", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ROLLUP_INDEX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rollup_index_id", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ROLLUP_FINISHED_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("rollup_finished_version", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SCHEMA_META_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_meta", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField TABLETS_FIELD_DESC = new org.apache.thrift.protocol.TField("tablets", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TIndexMetaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TIndexMetaTupleSchemeFactory();

  public long index_id; // optional
  public long partition_id; // optional
  /**
   * 
   * @see TIndexState
   */
  public @org.apache.thrift.annotation.Nullable TIndexState index_state; // optional
  public long row_count; // optional
  public long rollup_index_id; // optional
  public long rollup_finished_version; // optional
  public @org.apache.thrift.annotation.Nullable TSchemaMeta schema_meta; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TTabletMeta> tablets; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX_ID((short)1, "index_id"),
    PARTITION_ID((short)2, "partition_id"),
    /**
     * 
     * @see TIndexState
     */
    INDEX_STATE((short)3, "index_state"),
    ROW_COUNT((short)4, "row_count"),
    ROLLUP_INDEX_ID((short)5, "rollup_index_id"),
    ROLLUP_FINISHED_VERSION((short)6, "rollup_finished_version"),
    SCHEMA_META((short)7, "schema_meta"),
    TABLETS((short)8, "tablets");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX_ID
          return INDEX_ID;
        case 2: // PARTITION_ID
          return PARTITION_ID;
        case 3: // INDEX_STATE
          return INDEX_STATE;
        case 4: // ROW_COUNT
          return ROW_COUNT;
        case 5: // ROLLUP_INDEX_ID
          return ROLLUP_INDEX_ID;
        case 6: // ROLLUP_FINISHED_VERSION
          return ROLLUP_FINISHED_VERSION;
        case 7: // SCHEMA_META
          return SCHEMA_META;
        case 8: // TABLETS
          return TABLETS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ID_ISSET_ID = 0;
  private static final int __PARTITION_ID_ISSET_ID = 1;
  private static final int __ROW_COUNT_ISSET_ID = 2;
  private static final int __ROLLUP_INDEX_ID_ISSET_ID = 3;
  private static final int __ROLLUP_FINISHED_VERSION_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INDEX_ID,_Fields.PARTITION_ID,_Fields.INDEX_STATE,_Fields.ROW_COUNT,_Fields.ROLLUP_INDEX_ID,_Fields.ROLLUP_FINISHED_VERSION,_Fields.SCHEMA_META,_Fields.TABLETS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX_ID, new org.apache.thrift.meta_data.FieldMetaData("index_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INDEX_STATE, new org.apache.thrift.meta_data.FieldMetaData("index_state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TIndexState.class)));
    tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("row_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROLLUP_INDEX_ID, new org.apache.thrift.meta_data.FieldMetaData("rollup_index_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROLLUP_FINISHED_VERSION, new org.apache.thrift.meta_data.FieldMetaData("rollup_finished_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCHEMA_META, new org.apache.thrift.meta_data.FieldMetaData("schema_meta", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSchemaMeta.class)));
    tmpMap.put(_Fields.TABLETS, new org.apache.thrift.meta_data.FieldMetaData("tablets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTabletMeta.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TIndexMeta.class, metaDataMap);
  }

  public TIndexMeta() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TIndexMeta(TIndexMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    this.index_id = other.index_id;
    this.partition_id = other.partition_id;
    if (other.isSetIndex_state()) {
      this.index_state = other.index_state;
    }
    this.row_count = other.row_count;
    this.rollup_index_id = other.rollup_index_id;
    this.rollup_finished_version = other.rollup_finished_version;
    if (other.isSetSchema_meta()) {
      this.schema_meta = new TSchemaMeta(other.schema_meta);
    }
    if (other.isSetTablets()) {
      java.util.List<TTabletMeta> __this__tablets = new java.util.ArrayList<TTabletMeta>(other.tablets.size());
      for (TTabletMeta other_element : other.tablets) {
        __this__tablets.add(new TTabletMeta(other_element));
      }
      this.tablets = __this__tablets;
    }
  }

  @Override
  public TIndexMeta deepCopy() {
    return new TIndexMeta(this);
  }

  @Override
  public void clear() {
    setIndex_idIsSet(false);
    this.index_id = 0;
    setPartition_idIsSet(false);
    this.partition_id = 0;
    this.index_state = null;
    setRow_countIsSet(false);
    this.row_count = 0;
    setRollup_index_idIsSet(false);
    this.rollup_index_id = 0;
    setRollup_finished_versionIsSet(false);
    this.rollup_finished_version = 0;
    this.schema_meta = null;
    this.tablets = null;
  }

  public long getIndex_id() {
    return this.index_id;
  }

  public TIndexMeta setIndex_id(long index_id) {
    this.index_id = index_id;
    setIndex_idIsSet(true);
    return this;
  }

  public void unsetIndex_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_ID_ISSET_ID);
  }

  /** Returns true if field index_id is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_ID_ISSET_ID);
  }

  public void setIndex_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_ID_ISSET_ID, value);
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public TIndexMeta setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    return this;
  }

  public void unsetPartition_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see TIndexState
   */
  @org.apache.thrift.annotation.Nullable
  public TIndexState getIndex_state() {
    return this.index_state;
  }

  /**
   * 
   * @see TIndexState
   */
  public TIndexMeta setIndex_state(@org.apache.thrift.annotation.Nullable TIndexState index_state) {
    this.index_state = index_state;
    return this;
  }

  public void unsetIndex_state() {
    this.index_state = null;
  }

  /** Returns true if field index_state is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_state() {
    return this.index_state != null;
  }

  public void setIndex_stateIsSet(boolean value) {
    if (!value) {
      this.index_state = null;
    }
  }

  public long getRow_count() {
    return this.row_count;
  }

  public TIndexMeta setRow_count(long row_count) {
    this.row_count = row_count;
    setRow_countIsSet(true);
    return this;
  }

  public void unsetRow_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROW_COUNT_ISSET_ID);
  }

  /** Returns true if field row_count is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROW_COUNT_ISSET_ID);
  }

  public void setRow_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROW_COUNT_ISSET_ID, value);
  }

  public long getRollup_index_id() {
    return this.rollup_index_id;
  }

  public TIndexMeta setRollup_index_id(long rollup_index_id) {
    this.rollup_index_id = rollup_index_id;
    setRollup_index_idIsSet(true);
    return this;
  }

  public void unsetRollup_index_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROLLUP_INDEX_ID_ISSET_ID);
  }

  /** Returns true if field rollup_index_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRollup_index_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROLLUP_INDEX_ID_ISSET_ID);
  }

  public void setRollup_index_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROLLUP_INDEX_ID_ISSET_ID, value);
  }

  public long getRollup_finished_version() {
    return this.rollup_finished_version;
  }

  public TIndexMeta setRollup_finished_version(long rollup_finished_version) {
    this.rollup_finished_version = rollup_finished_version;
    setRollup_finished_versionIsSet(true);
    return this;
  }

  public void unsetRollup_finished_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROLLUP_FINISHED_VERSION_ISSET_ID);
  }

  /** Returns true if field rollup_finished_version is set (has been assigned a value) and false otherwise */
  public boolean isSetRollup_finished_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROLLUP_FINISHED_VERSION_ISSET_ID);
  }

  public void setRollup_finished_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROLLUP_FINISHED_VERSION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TSchemaMeta getSchema_meta() {
    return this.schema_meta;
  }

  public TIndexMeta setSchema_meta(@org.apache.thrift.annotation.Nullable TSchemaMeta schema_meta) {
    this.schema_meta = schema_meta;
    return this;
  }

  public void unsetSchema_meta() {
    this.schema_meta = null;
  }

  /** Returns true if field schema_meta is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_meta() {
    return this.schema_meta != null;
  }

  public void setSchema_metaIsSet(boolean value) {
    if (!value) {
      this.schema_meta = null;
    }
  }

  public int getTabletsSize() {
    return (this.tablets == null) ? 0 : this.tablets.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TTabletMeta> getTabletsIterator() {
    return (this.tablets == null) ? null : this.tablets.iterator();
  }

  public void addToTablets(TTabletMeta elem) {
    if (this.tablets == null) {
      this.tablets = new java.util.ArrayList<TTabletMeta>();
    }
    this.tablets.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TTabletMeta> getTablets() {
    return this.tablets;
  }

  public TIndexMeta setTablets(@org.apache.thrift.annotation.Nullable java.util.List<TTabletMeta> tablets) {
    this.tablets = tablets;
    return this;
  }

  public void unsetTablets() {
    this.tablets = null;
  }

  /** Returns true if field tablets is set (has been assigned a value) and false otherwise */
  public boolean isSetTablets() {
    return this.tablets != null;
  }

  public void setTabletsIsSet(boolean value) {
    if (!value) {
      this.tablets = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case INDEX_ID:
      if (value == null) {
        unsetIndex_id();
      } else {
        setIndex_id((java.lang.Long)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((java.lang.Long)value);
      }
      break;

    case INDEX_STATE:
      if (value == null) {
        unsetIndex_state();
      } else {
        setIndex_state((TIndexState)value);
      }
      break;

    case ROW_COUNT:
      if (value == null) {
        unsetRow_count();
      } else {
        setRow_count((java.lang.Long)value);
      }
      break;

    case ROLLUP_INDEX_ID:
      if (value == null) {
        unsetRollup_index_id();
      } else {
        setRollup_index_id((java.lang.Long)value);
      }
      break;

    case ROLLUP_FINISHED_VERSION:
      if (value == null) {
        unsetRollup_finished_version();
      } else {
        setRollup_finished_version((java.lang.Long)value);
      }
      break;

    case SCHEMA_META:
      if (value == null) {
        unsetSchema_meta();
      } else {
        setSchema_meta((TSchemaMeta)value);
      }
      break;

    case TABLETS:
      if (value == null) {
        unsetTablets();
      } else {
        setTablets((java.util.List<TTabletMeta>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX_ID:
      return getIndex_id();

    case PARTITION_ID:
      return getPartition_id();

    case INDEX_STATE:
      return getIndex_state();

    case ROW_COUNT:
      return getRow_count();

    case ROLLUP_INDEX_ID:
      return getRollup_index_id();

    case ROLLUP_FINISHED_VERSION:
      return getRollup_finished_version();

    case SCHEMA_META:
      return getSchema_meta();

    case TABLETS:
      return getTablets();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INDEX_ID:
      return isSetIndex_id();
    case PARTITION_ID:
      return isSetPartition_id();
    case INDEX_STATE:
      return isSetIndex_state();
    case ROW_COUNT:
      return isSetRow_count();
    case ROLLUP_INDEX_ID:
      return isSetRollup_index_id();
    case ROLLUP_FINISHED_VERSION:
      return isSetRollup_finished_version();
    case SCHEMA_META:
      return isSetSchema_meta();
    case TABLETS:
      return isSetTablets();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TIndexMeta)
      return this.equals((TIndexMeta)that);
    return false;
  }

  public boolean equals(TIndexMeta that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_index_id = true && this.isSetIndex_id();
    boolean that_present_index_id = true && that.isSetIndex_id();
    if (this_present_index_id || that_present_index_id) {
      if (!(this_present_index_id && that_present_index_id))
        return false;
      if (this.index_id != that.index_id)
        return false;
    }

    boolean this_present_partition_id = true && this.isSetPartition_id();
    boolean that_present_partition_id = true && that.isSetPartition_id();
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_index_state = true && this.isSetIndex_state();
    boolean that_present_index_state = true && that.isSetIndex_state();
    if (this_present_index_state || that_present_index_state) {
      if (!(this_present_index_state && that_present_index_state))
        return false;
      if (!this.index_state.equals(that.index_state))
        return false;
    }

    boolean this_present_row_count = true && this.isSetRow_count();
    boolean that_present_row_count = true && that.isSetRow_count();
    if (this_present_row_count || that_present_row_count) {
      if (!(this_present_row_count && that_present_row_count))
        return false;
      if (this.row_count != that.row_count)
        return false;
    }

    boolean this_present_rollup_index_id = true && this.isSetRollup_index_id();
    boolean that_present_rollup_index_id = true && that.isSetRollup_index_id();
    if (this_present_rollup_index_id || that_present_rollup_index_id) {
      if (!(this_present_rollup_index_id && that_present_rollup_index_id))
        return false;
      if (this.rollup_index_id != that.rollup_index_id)
        return false;
    }

    boolean this_present_rollup_finished_version = true && this.isSetRollup_finished_version();
    boolean that_present_rollup_finished_version = true && that.isSetRollup_finished_version();
    if (this_present_rollup_finished_version || that_present_rollup_finished_version) {
      if (!(this_present_rollup_finished_version && that_present_rollup_finished_version))
        return false;
      if (this.rollup_finished_version != that.rollup_finished_version)
        return false;
    }

    boolean this_present_schema_meta = true && this.isSetSchema_meta();
    boolean that_present_schema_meta = true && that.isSetSchema_meta();
    if (this_present_schema_meta || that_present_schema_meta) {
      if (!(this_present_schema_meta && that_present_schema_meta))
        return false;
      if (!this.schema_meta.equals(that.schema_meta))
        return false;
    }

    boolean this_present_tablets = true && this.isSetTablets();
    boolean that_present_tablets = true && that.isSetTablets();
    if (this_present_tablets || that_present_tablets) {
      if (!(this_present_tablets && that_present_tablets))
        return false;
      if (!this.tablets.equals(that.tablets))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIndex_id()) ? 131071 : 524287);
    if (isSetIndex_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(index_id);

    hashCode = hashCode * 8191 + ((isSetPartition_id()) ? 131071 : 524287);
    if (isSetPartition_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_id);

    hashCode = hashCode * 8191 + ((isSetIndex_state()) ? 131071 : 524287);
    if (isSetIndex_state())
      hashCode = hashCode * 8191 + index_state.getValue();

    hashCode = hashCode * 8191 + ((isSetRow_count()) ? 131071 : 524287);
    if (isSetRow_count())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(row_count);

    hashCode = hashCode * 8191 + ((isSetRollup_index_id()) ? 131071 : 524287);
    if (isSetRollup_index_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rollup_index_id);

    hashCode = hashCode * 8191 + ((isSetRollup_finished_version()) ? 131071 : 524287);
    if (isSetRollup_finished_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rollup_finished_version);

    hashCode = hashCode * 8191 + ((isSetSchema_meta()) ? 131071 : 524287);
    if (isSetSchema_meta())
      hashCode = hashCode * 8191 + schema_meta.hashCode();

    hashCode = hashCode * 8191 + ((isSetTablets()) ? 131071 : 524287);
    if (isSetTablets())
      hashCode = hashCode * 8191 + tablets.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TIndexMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetIndex_id(), other.isSetIndex_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_id, other.index_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_id(), other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIndex_state(), other.isSetIndex_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_state, other.index_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRow_count(), other.isSetRow_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_count, other.row_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRollup_index_id(), other.isSetRollup_index_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRollup_index_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rollup_index_id, other.rollup_index_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRollup_finished_version(), other.isSetRollup_finished_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRollup_finished_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rollup_finished_version, other.rollup_finished_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchema_meta(), other.isSetSchema_meta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_meta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_meta, other.schema_meta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablets(), other.isSetTablets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablets, other.tablets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TIndexMeta(");
    boolean first = true;

    if (isSetIndex_id()) {
      sb.append("index_id:");
      sb.append(this.index_id);
      first = false;
    }
    if (isSetPartition_id()) {
      if (!first) sb.append(", ");
      sb.append("partition_id:");
      sb.append(this.partition_id);
      first = false;
    }
    if (isSetIndex_state()) {
      if (!first) sb.append(", ");
      sb.append("index_state:");
      if (this.index_state == null) {
        sb.append("null");
      } else {
        sb.append(this.index_state);
      }
      first = false;
    }
    if (isSetRow_count()) {
      if (!first) sb.append(", ");
      sb.append("row_count:");
      sb.append(this.row_count);
      first = false;
    }
    if (isSetRollup_index_id()) {
      if (!first) sb.append(", ");
      sb.append("rollup_index_id:");
      sb.append(this.rollup_index_id);
      first = false;
    }
    if (isSetRollup_finished_version()) {
      if (!first) sb.append(", ");
      sb.append("rollup_finished_version:");
      sb.append(this.rollup_finished_version);
      first = false;
    }
    if (isSetSchema_meta()) {
      if (!first) sb.append(", ");
      sb.append("schema_meta:");
      if (this.schema_meta == null) {
        sb.append("null");
      } else {
        sb.append(this.schema_meta);
      }
      first = false;
    }
    if (isSetTablets()) {
      if (!first) sb.append(", ");
      sb.append("tablets:");
      if (this.tablets == null) {
        sb.append("null");
      } else {
        sb.append(this.tablets);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (schema_meta != null) {
      schema_meta.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TIndexMetaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIndexMetaStandardScheme getScheme() {
      return new TIndexMetaStandardScheme();
    }
  }

  private static class TIndexMetaStandardScheme extends org.apache.thrift.scheme.StandardScheme<TIndexMeta> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TIndexMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INDEX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.index_id = iprot.readI64();
              struct.setIndex_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INDEX_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.index_state = io.datafibre.fibre.thrift.TIndexState.findByValue(iprot.readI32());
              struct.setIndex_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.row_count = iprot.readI64();
              struct.setRow_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROLLUP_INDEX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rollup_index_id = iprot.readI64();
              struct.setRollup_index_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ROLLUP_FINISHED_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rollup_finished_version = iprot.readI64();
              struct.setRollup_finished_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SCHEMA_META
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schema_meta = new TSchemaMeta();
              struct.schema_meta.read(iprot);
              struct.setSchema_metaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TABLETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list428 = iprot.readListBegin();
                struct.tablets = new java.util.ArrayList<TTabletMeta>(_list428.size);
                @org.apache.thrift.annotation.Nullable TTabletMeta _elem429;
                for (int _i430 = 0; _i430 < _list428.size; ++_i430)
                {
                  _elem429 = new TTabletMeta();
                  _elem429.read(iprot);
                  struct.tablets.add(_elem429);
                }
                iprot.readListEnd();
              }
              struct.setTabletsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TIndexMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetIndex_id()) {
        oprot.writeFieldBegin(INDEX_ID_FIELD_DESC);
        oprot.writeI64(struct.index_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartition_id()) {
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI64(struct.partition_id);
        oprot.writeFieldEnd();
      }
      if (struct.index_state != null) {
        if (struct.isSetIndex_state()) {
          oprot.writeFieldBegin(INDEX_STATE_FIELD_DESC);
          oprot.writeI32(struct.index_state.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRow_count()) {
        oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
        oprot.writeI64(struct.row_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRollup_index_id()) {
        oprot.writeFieldBegin(ROLLUP_INDEX_ID_FIELD_DESC);
        oprot.writeI64(struct.rollup_index_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRollup_finished_version()) {
        oprot.writeFieldBegin(ROLLUP_FINISHED_VERSION_FIELD_DESC);
        oprot.writeI64(struct.rollup_finished_version);
        oprot.writeFieldEnd();
      }
      if (struct.schema_meta != null) {
        if (struct.isSetSchema_meta()) {
          oprot.writeFieldBegin(SCHEMA_META_FIELD_DESC);
          struct.schema_meta.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tablets != null) {
        if (struct.isSetTablets()) {
          oprot.writeFieldBegin(TABLETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tablets.size()));
            for (TTabletMeta _iter431 : struct.tablets)
            {
              _iter431.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TIndexMetaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIndexMetaTupleScheme getScheme() {
      return new TIndexMetaTupleScheme();
    }
  }

  private static class TIndexMetaTupleScheme extends org.apache.thrift.scheme.TupleScheme<TIndexMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TIndexMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIndex_id()) {
        optionals.set(0);
      }
      if (struct.isSetPartition_id()) {
        optionals.set(1);
      }
      if (struct.isSetIndex_state()) {
        optionals.set(2);
      }
      if (struct.isSetRow_count()) {
        optionals.set(3);
      }
      if (struct.isSetRollup_index_id()) {
        optionals.set(4);
      }
      if (struct.isSetRollup_finished_version()) {
        optionals.set(5);
      }
      if (struct.isSetSchema_meta()) {
        optionals.set(6);
      }
      if (struct.isSetTablets()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetIndex_id()) {
        oprot.writeI64(struct.index_id);
      }
      if (struct.isSetPartition_id()) {
        oprot.writeI64(struct.partition_id);
      }
      if (struct.isSetIndex_state()) {
        oprot.writeI32(struct.index_state.getValue());
      }
      if (struct.isSetRow_count()) {
        oprot.writeI64(struct.row_count);
      }
      if (struct.isSetRollup_index_id()) {
        oprot.writeI64(struct.rollup_index_id);
      }
      if (struct.isSetRollup_finished_version()) {
        oprot.writeI64(struct.rollup_finished_version);
      }
      if (struct.isSetSchema_meta()) {
        struct.schema_meta.write(oprot);
      }
      if (struct.isSetTablets()) {
        {
          oprot.writeI32(struct.tablets.size());
          for (TTabletMeta _iter432 : struct.tablets)
          {
            _iter432.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TIndexMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.index_id = iprot.readI64();
        struct.setIndex_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partition_id = iprot.readI64();
        struct.setPartition_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.index_state = io.datafibre.fibre.thrift.TIndexState.findByValue(iprot.readI32());
        struct.setIndex_stateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.row_count = iprot.readI64();
        struct.setRow_countIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rollup_index_id = iprot.readI64();
        struct.setRollup_index_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rollup_finished_version = iprot.readI64();
        struct.setRollup_finished_versionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.schema_meta = new TSchemaMeta();
        struct.schema_meta.read(iprot);
        struct.setSchema_metaIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list433 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.tablets = new java.util.ArrayList<TTabletMeta>(_list433.size);
          @org.apache.thrift.annotation.Nullable TTabletMeta _elem434;
          for (int _i435 = 0; _i435 < _list433.size; ++_i435)
          {
            _elem434 = new TTabletMeta();
            _elem434.read(iprot);
            struct.tablets.add(_elem434);
          }
        }
        struct.setTabletsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

