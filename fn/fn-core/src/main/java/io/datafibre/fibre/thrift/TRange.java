/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TRange implements org.apache.thrift.TBase<TRange, TRange._Fields>, java.io.Serializable, Cloneable, Comparable<TRange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRange");

  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField BASE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("base_desc", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("start_key", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField END_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("end_key", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IS_TEMP_FIELD_DESC = new org.apache.thrift.protocol.TField("is_temp", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRangeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRangeTupleSchemeFactory();

  public long partition_id; // optional
  public @org.apache.thrift.annotation.Nullable TBasePartitionDesc base_desc; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer start_key; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer end_key; // optional
  public boolean is_temp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTITION_ID((short)1, "partition_id"),
    BASE_DESC((short)2, "base_desc"),
    START_KEY((short)3, "start_key"),
    END_KEY((short)4, "end_key"),
    IS_TEMP((short)5, "is_temp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTITION_ID
          return PARTITION_ID;
        case 2: // BASE_DESC
          return BASE_DESC;
        case 3: // START_KEY
          return START_KEY;
        case 4: // END_KEY
          return END_KEY;
        case 5: // IS_TEMP
          return IS_TEMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARTITION_ID_ISSET_ID = 0;
  private static final int __IS_TEMP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARTITION_ID,_Fields.BASE_DESC,_Fields.START_KEY,_Fields.END_KEY,_Fields.IS_TEMP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BASE_DESC, new org.apache.thrift.meta_data.FieldMetaData("base_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBasePartitionDesc.class)));
    tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("start_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.END_KEY, new org.apache.thrift.meta_data.FieldMetaData("end_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.IS_TEMP, new org.apache.thrift.meta_data.FieldMetaData("is_temp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRange.class, metaDataMap);
  }

  public TRange() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRange(TRange other) {
    __isset_bitfield = other.__isset_bitfield;
    this.partition_id = other.partition_id;
    if (other.isSetBase_desc()) {
      this.base_desc = new TBasePartitionDesc(other.base_desc);
    }
    if (other.isSetStart_key()) {
      this.start_key = org.apache.thrift.TBaseHelper.copyBinary(other.start_key);
    }
    if (other.isSetEnd_key()) {
      this.end_key = org.apache.thrift.TBaseHelper.copyBinary(other.end_key);
    }
    this.is_temp = other.is_temp;
  }

  @Override
  public TRange deepCopy() {
    return new TRange(this);
  }

  @Override
  public void clear() {
    setPartition_idIsSet(false);
    this.partition_id = 0;
    this.base_desc = null;
    this.start_key = null;
    this.end_key = null;
    setIs_tempIsSet(false);
    this.is_temp = false;
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public TRange setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    return this;
  }

  public void unsetPartition_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TBasePartitionDesc getBase_desc() {
    return this.base_desc;
  }

  public TRange setBase_desc(@org.apache.thrift.annotation.Nullable TBasePartitionDesc base_desc) {
    this.base_desc = base_desc;
    return this;
  }

  public void unsetBase_desc() {
    this.base_desc = null;
  }

  /** Returns true if field base_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetBase_desc() {
    return this.base_desc != null;
  }

  public void setBase_descIsSet(boolean value) {
    if (!value) {
      this.base_desc = null;
    }
  }

  public byte[] getStart_key() {
    setStart_key(org.apache.thrift.TBaseHelper.rightSize(start_key));
    return start_key == null ? null : start_key.array();
  }

  public java.nio.ByteBuffer bufferForStart_key() {
    return org.apache.thrift.TBaseHelper.copyBinary(start_key);
  }

  public TRange setStart_key(byte[] start_key) {
    this.start_key = start_key == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(start_key.clone());
    return this;
  }

  public TRange setStart_key(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer start_key) {
    this.start_key = org.apache.thrift.TBaseHelper.copyBinary(start_key);
    return this;
  }

  public void unsetStart_key() {
    this.start_key = null;
  }

  /** Returns true if field start_key is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_key() {
    return this.start_key != null;
  }

  public void setStart_keyIsSet(boolean value) {
    if (!value) {
      this.start_key = null;
    }
  }

  public byte[] getEnd_key() {
    setEnd_key(org.apache.thrift.TBaseHelper.rightSize(end_key));
    return end_key == null ? null : end_key.array();
  }

  public java.nio.ByteBuffer bufferForEnd_key() {
    return org.apache.thrift.TBaseHelper.copyBinary(end_key);
  }

  public TRange setEnd_key(byte[] end_key) {
    this.end_key = end_key == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(end_key.clone());
    return this;
  }

  public TRange setEnd_key(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer end_key) {
    this.end_key = org.apache.thrift.TBaseHelper.copyBinary(end_key);
    return this;
  }

  public void unsetEnd_key() {
    this.end_key = null;
  }

  /** Returns true if field end_key is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_key() {
    return this.end_key != null;
  }

  public void setEnd_keyIsSet(boolean value) {
    if (!value) {
      this.end_key = null;
    }
  }

  public boolean isIs_temp() {
    return this.is_temp;
  }

  public TRange setIs_temp(boolean is_temp) {
    this.is_temp = is_temp;
    setIs_tempIsSet(true);
    return this;
  }

  public void unsetIs_temp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_TEMP_ISSET_ID);
  }

  /** Returns true if field is_temp is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_temp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_TEMP_ISSET_ID);
  }

  public void setIs_tempIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_TEMP_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((java.lang.Long)value);
      }
      break;

    case BASE_DESC:
      if (value == null) {
        unsetBase_desc();
      } else {
        setBase_desc((TBasePartitionDesc)value);
      }
      break;

    case START_KEY:
      if (value == null) {
        unsetStart_key();
      } else {
        if (value instanceof byte[]) {
          setStart_key((byte[])value);
        } else {
          setStart_key((java.nio.ByteBuffer)value);
        }
      }
      break;

    case END_KEY:
      if (value == null) {
        unsetEnd_key();
      } else {
        if (value instanceof byte[]) {
          setEnd_key((byte[])value);
        } else {
          setEnd_key((java.nio.ByteBuffer)value);
        }
      }
      break;

    case IS_TEMP:
      if (value == null) {
        unsetIs_temp();
      } else {
        setIs_temp((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTITION_ID:
      return getPartition_id();

    case BASE_DESC:
      return getBase_desc();

    case START_KEY:
      return getStart_key();

    case END_KEY:
      return getEnd_key();

    case IS_TEMP:
      return isIs_temp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PARTITION_ID:
      return isSetPartition_id();
    case BASE_DESC:
      return isSetBase_desc();
    case START_KEY:
      return isSetStart_key();
    case END_KEY:
      return isSetEnd_key();
    case IS_TEMP:
      return isSetIs_temp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRange)
      return this.equals((TRange)that);
    return false;
  }

  public boolean equals(TRange that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_partition_id = true && this.isSetPartition_id();
    boolean that_present_partition_id = true && that.isSetPartition_id();
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_base_desc = true && this.isSetBase_desc();
    boolean that_present_base_desc = true && that.isSetBase_desc();
    if (this_present_base_desc || that_present_base_desc) {
      if (!(this_present_base_desc && that_present_base_desc))
        return false;
      if (!this.base_desc.equals(that.base_desc))
        return false;
    }

    boolean this_present_start_key = true && this.isSetStart_key();
    boolean that_present_start_key = true && that.isSetStart_key();
    if (this_present_start_key || that_present_start_key) {
      if (!(this_present_start_key && that_present_start_key))
        return false;
      if (!this.start_key.equals(that.start_key))
        return false;
    }

    boolean this_present_end_key = true && this.isSetEnd_key();
    boolean that_present_end_key = true && that.isSetEnd_key();
    if (this_present_end_key || that_present_end_key) {
      if (!(this_present_end_key && that_present_end_key))
        return false;
      if (!this.end_key.equals(that.end_key))
        return false;
    }

    boolean this_present_is_temp = true && this.isSetIs_temp();
    boolean that_present_is_temp = true && that.isSetIs_temp();
    if (this_present_is_temp || that_present_is_temp) {
      if (!(this_present_is_temp && that_present_is_temp))
        return false;
      if (this.is_temp != that.is_temp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPartition_id()) ? 131071 : 524287);
    if (isSetPartition_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_id);

    hashCode = hashCode * 8191 + ((isSetBase_desc()) ? 131071 : 524287);
    if (isSetBase_desc())
      hashCode = hashCode * 8191 + base_desc.hashCode();

    hashCode = hashCode * 8191 + ((isSetStart_key()) ? 131071 : 524287);
    if (isSetStart_key())
      hashCode = hashCode * 8191 + start_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnd_key()) ? 131071 : 524287);
    if (isSetEnd_key())
      hashCode = hashCode * 8191 + end_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_temp()) ? 131071 : 524287);
    if (isSetIs_temp())
      hashCode = hashCode * 8191 + ((is_temp) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TRange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPartition_id(), other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBase_desc(), other.isSetBase_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base_desc, other.base_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStart_key(), other.isSetStart_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_key, other.start_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnd_key(), other.isSetEnd_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_key, other.end_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_temp(), other.isSetIs_temp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_temp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_temp, other.is_temp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRange(");
    boolean first = true;

    if (isSetPartition_id()) {
      sb.append("partition_id:");
      sb.append(this.partition_id);
      first = false;
    }
    if (isSetBase_desc()) {
      if (!first) sb.append(", ");
      sb.append("base_desc:");
      if (this.base_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.base_desc);
      }
      first = false;
    }
    if (isSetStart_key()) {
      if (!first) sb.append(", ");
      sb.append("start_key:");
      if (this.start_key == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.start_key, sb);
      }
      first = false;
    }
    if (isSetEnd_key()) {
      if (!first) sb.append(", ");
      sb.append("end_key:");
      if (this.end_key == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.end_key, sb);
      }
      first = false;
    }
    if (isSetIs_temp()) {
      if (!first) sb.append(", ");
      sb.append("is_temp:");
      sb.append(this.is_temp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (base_desc != null) {
      base_desc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRangeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRangeStandardScheme getScheme() {
      return new TRangeStandardScheme();
    }
  }

  private static class TRangeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRange> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BASE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.base_desc = new TBasePartitionDesc();
              struct.base_desc.read(iprot);
              struct.setBase_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.start_key = iprot.readBinary();
              struct.setStart_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.end_key = iprot.readBinary();
              struct.setEnd_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_TEMP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_temp = iprot.readBool();
              struct.setIs_tempIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TRange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPartition_id()) {
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI64(struct.partition_id);
        oprot.writeFieldEnd();
      }
      if (struct.base_desc != null) {
        if (struct.isSetBase_desc()) {
          oprot.writeFieldBegin(BASE_DESC_FIELD_DESC);
          struct.base_desc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.start_key != null) {
        if (struct.isSetStart_key()) {
          oprot.writeFieldBegin(START_KEY_FIELD_DESC);
          oprot.writeBinary(struct.start_key);
          oprot.writeFieldEnd();
        }
      }
      if (struct.end_key != null) {
        if (struct.isSetEnd_key()) {
          oprot.writeFieldBegin(END_KEY_FIELD_DESC);
          oprot.writeBinary(struct.end_key);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_temp()) {
        oprot.writeFieldBegin(IS_TEMP_FIELD_DESC);
        oprot.writeBool(struct.is_temp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRangeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRangeTupleScheme getScheme() {
      return new TRangeTupleScheme();
    }
  }

  private static class TRangeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRange> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPartition_id()) {
        optionals.set(0);
      }
      if (struct.isSetBase_desc()) {
        optionals.set(1);
      }
      if (struct.isSetStart_key()) {
        optionals.set(2);
      }
      if (struct.isSetEnd_key()) {
        optionals.set(3);
      }
      if (struct.isSetIs_temp()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPartition_id()) {
        oprot.writeI64(struct.partition_id);
      }
      if (struct.isSetBase_desc()) {
        struct.base_desc.write(oprot);
      }
      if (struct.isSetStart_key()) {
        oprot.writeBinary(struct.start_key);
      }
      if (struct.isSetEnd_key()) {
        oprot.writeBinary(struct.end_key);
      }
      if (struct.isSetIs_temp()) {
        oprot.writeBool(struct.is_temp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.partition_id = iprot.readI64();
        struct.setPartition_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.base_desc = new TBasePartitionDesc();
        struct.base_desc.read(iprot);
        struct.setBase_descIsSet(true);
      }
      if (incoming.get(2)) {
        struct.start_key = iprot.readBinary();
        struct.setStart_keyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.end_key = iprot.readBinary();
        struct.setEnd_keyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.is_temp = iprot.readBool();
        struct.setIs_tempIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

