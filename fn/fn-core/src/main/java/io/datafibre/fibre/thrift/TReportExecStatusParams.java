/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TReportExecStatusParams implements org.apache.thrift.TBase<TReportExecStatusParams, TReportExecStatusParams._Fields>, java.io.Serializable, Cloneable, Comparable<TReportExecStatusParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TReportExecStatusParams");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("query_id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField BACKEND_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_num", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FRAGMENT_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_instance_id", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DONE_FIELD_DESC = new org.apache.thrift.protocol.TField("done", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField ERROR_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("error_log", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField DELTA_URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("delta_urls", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField LOAD_COUNTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("load_counters", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField TRACKING_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("tracking_url", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField EXPORT_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("export_files", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField COMMIT_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("commitInfos", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField LOADED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("loaded_rows", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField BACKEND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_id", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField SINK_LOAD_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("sink_load_bytes", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField SOURCE_LOAD_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("source_load_rows", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField SOURCE_LOAD_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("source_load_bytes", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField LOAD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("load_type", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField FAIL_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("failInfos", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField FILTERED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("filtered_rows", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField UNSELECTED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("unselected_rows", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField SOURCE_SCAN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("source_scan_bytes", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField SINK_COMMIT_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("sink_commit_infos", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField REJECTED_RECORD_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("rejected_record_path", org.apache.thrift.protocol.TType.STRING, (short)27);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TReportExecStatusParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TReportExecStatusParamsTupleSchemeFactory();

  /**
   * 
   * @see FrontendServiceVersion
   */
  public @org.apache.thrift.annotation.Nullable FrontendServiceVersion protocol_version; // required
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId query_id; // optional
  public int backend_num; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId fragment_instance_id; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TStatus status; // optional
  public boolean done; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TRuntimeProfileTree profile; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> error_log; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> delta_urls; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> load_counters; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String tracking_url; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> export_files; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TTabletCommitInfo> commitInfos; // optional
  public long loaded_rows; // optional
  public long backend_id; // optional
  public long sink_load_bytes; // optional
  public long source_load_rows; // optional
  public long source_load_bytes; // optional
  /**
   * 
   * @see com.starrocks.thrift.TLoadJobType
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TLoadJobType load_type; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TTabletFailInfo> failInfos; // optional
  public long filtered_rows; // optional
  public long unselected_rows; // optional
  public long source_scan_bytes; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TSinkCommitInfo> sink_commit_infos; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String rejected_record_path; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see FrontendServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    QUERY_ID((short)2, "query_id"),
    BACKEND_NUM((short)3, "backend_num"),
    FRAGMENT_INSTANCE_ID((short)4, "fragment_instance_id"),
    STATUS((short)5, "status"),
    DONE((short)6, "done"),
    PROFILE((short)7, "profile"),
    ERROR_LOG((short)9, "error_log"),
    DELTA_URLS((short)10, "delta_urls"),
    LOAD_COUNTERS((short)11, "load_counters"),
    TRACKING_URL((short)12, "tracking_url"),
    EXPORT_FILES((short)13, "export_files"),
    COMMIT_INFOS((short)14, "commitInfos"),
    LOADED_ROWS((short)15, "loaded_rows"),
    BACKEND_ID((short)16, "backend_id"),
    SINK_LOAD_BYTES((short)17, "sink_load_bytes"),
    SOURCE_LOAD_ROWS((short)18, "source_load_rows"),
    SOURCE_LOAD_BYTES((short)19, "source_load_bytes"),
    /**
     * 
     * @see com.starrocks.thrift.TLoadJobType
     */
    LOAD_TYPE((short)20, "load_type"),
    FAIL_INFOS((short)21, "failInfos"),
    FILTERED_ROWS((short)22, "filtered_rows"),
    UNSELECTED_ROWS((short)23, "unselected_rows"),
    SOURCE_SCAN_BYTES((short)24, "source_scan_bytes"),
    SINK_COMMIT_INFOS((short)25, "sink_commit_infos"),
    REJECTED_RECORD_PATH((short)27, "rejected_record_path");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // QUERY_ID
          return QUERY_ID;
        case 3: // BACKEND_NUM
          return BACKEND_NUM;
        case 4: // FRAGMENT_INSTANCE_ID
          return FRAGMENT_INSTANCE_ID;
        case 5: // STATUS
          return STATUS;
        case 6: // DONE
          return DONE;
        case 7: // PROFILE
          return PROFILE;
        case 9: // ERROR_LOG
          return ERROR_LOG;
        case 10: // DELTA_URLS
          return DELTA_URLS;
        case 11: // LOAD_COUNTERS
          return LOAD_COUNTERS;
        case 12: // TRACKING_URL
          return TRACKING_URL;
        case 13: // EXPORT_FILES
          return EXPORT_FILES;
        case 14: // COMMIT_INFOS
          return COMMIT_INFOS;
        case 15: // LOADED_ROWS
          return LOADED_ROWS;
        case 16: // BACKEND_ID
          return BACKEND_ID;
        case 17: // SINK_LOAD_BYTES
          return SINK_LOAD_BYTES;
        case 18: // SOURCE_LOAD_ROWS
          return SOURCE_LOAD_ROWS;
        case 19: // SOURCE_LOAD_BYTES
          return SOURCE_LOAD_BYTES;
        case 20: // LOAD_TYPE
          return LOAD_TYPE;
        case 21: // FAIL_INFOS
          return FAIL_INFOS;
        case 22: // FILTERED_ROWS
          return FILTERED_ROWS;
        case 23: // UNSELECTED_ROWS
          return UNSELECTED_ROWS;
        case 24: // SOURCE_SCAN_BYTES
          return SOURCE_SCAN_BYTES;
        case 25: // SINK_COMMIT_INFOS
          return SINK_COMMIT_INFOS;
        case 27: // REJECTED_RECORD_PATH
          return REJECTED_RECORD_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BACKEND_NUM_ISSET_ID = 0;
  private static final int __DONE_ISSET_ID = 1;
  private static final int __LOADED_ROWS_ISSET_ID = 2;
  private static final int __BACKEND_ID_ISSET_ID = 3;
  private static final int __SINK_LOAD_BYTES_ISSET_ID = 4;
  private static final int __SOURCE_LOAD_ROWS_ISSET_ID = 5;
  private static final int __SOURCE_LOAD_BYTES_ISSET_ID = 6;
  private static final int __FILTERED_ROWS_ISSET_ID = 7;
  private static final int __UNSELECTED_ROWS_ISSET_ID = 8;
  private static final int __SOURCE_SCAN_BYTES_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.QUERY_ID,_Fields.BACKEND_NUM,_Fields.FRAGMENT_INSTANCE_ID,_Fields.STATUS,_Fields.DONE,_Fields.PROFILE,_Fields.ERROR_LOG,_Fields.DELTA_URLS,_Fields.LOAD_COUNTERS,_Fields.TRACKING_URL,_Fields.EXPORT_FILES,_Fields.COMMIT_INFOS,_Fields.LOADED_ROWS,_Fields.BACKEND_ID,_Fields.SINK_LOAD_BYTES,_Fields.SOURCE_LOAD_ROWS,_Fields.SOURCE_LOAD_BYTES,_Fields.LOAD_TYPE,_Fields.FAIL_INFOS,_Fields.FILTERED_ROWS,_Fields.UNSELECTED_ROWS,_Fields.SOURCE_SCAN_BYTES,_Fields.SINK_COMMIT_INFOS,_Fields.REJECTED_RECORD_PATH};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FrontendServiceVersion.class)));
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("query_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.BACKEND_NUM, new org.apache.thrift.meta_data.FieldMetaData("backend_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRAGMENT_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("fragment_instance_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TStatus.class)));
    tmpMap.put(_Fields.DONE, new org.apache.thrift.meta_data.FieldMetaData("done", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TRuntimeProfileTree.class)));
    tmpMap.put(_Fields.ERROR_LOG, new org.apache.thrift.meta_data.FieldMetaData("error_log", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DELTA_URLS, new org.apache.thrift.meta_data.FieldMetaData("delta_urls", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LOAD_COUNTERS, new org.apache.thrift.meta_data.FieldMetaData("load_counters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TRACKING_URL, new org.apache.thrift.meta_data.FieldMetaData("tracking_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPORT_FILES, new org.apache.thrift.meta_data.FieldMetaData("export_files", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMMIT_INFOS, new org.apache.thrift.meta_data.FieldMetaData("commitInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TTabletCommitInfo.class))));
    tmpMap.put(_Fields.LOADED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("loaded_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BACKEND_ID, new org.apache.thrift.meta_data.FieldMetaData("backend_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SINK_LOAD_BYTES, new org.apache.thrift.meta_data.FieldMetaData("sink_load_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SOURCE_LOAD_ROWS, new org.apache.thrift.meta_data.FieldMetaData("source_load_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SOURCE_LOAD_BYTES, new org.apache.thrift.meta_data.FieldMetaData("source_load_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOAD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("load_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TLoadJobType.class)));
    tmpMap.put(_Fields.FAIL_INFOS, new org.apache.thrift.meta_data.FieldMetaData("failInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TTabletFailInfo.class))));
    tmpMap.put(_Fields.FILTERED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("filtered_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UNSELECTED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("unselected_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SOURCE_SCAN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("source_scan_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SINK_COMMIT_INFOS, new org.apache.thrift.meta_data.FieldMetaData("sink_commit_infos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TSinkCommitInfo.class))));
    tmpMap.put(_Fields.REJECTED_RECORD_PATH, new org.apache.thrift.meta_data.FieldMetaData("rejected_record_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TReportExecStatusParams.class, metaDataMap);
  }

  public TReportExecStatusParams() {
  }

  public TReportExecStatusParams(
    FrontendServiceVersion protocol_version)
  {
    this();
    this.protocol_version = protocol_version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TReportExecStatusParams(TReportExecStatusParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocol_version()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetQuery_id()) {
      this.query_id = new com.starrocks.thrift.TUniqueId(other.query_id);
    }
    this.backend_num = other.backend_num;
    if (other.isSetFragment_instance_id()) {
      this.fragment_instance_id = new com.starrocks.thrift.TUniqueId(other.fragment_instance_id);
    }
    if (other.isSetStatus()) {
      this.status = new com.starrocks.thrift.TStatus(other.status);
    }
    this.done = other.done;
    if (other.isSetProfile()) {
      this.profile = new com.starrocks.thrift.TRuntimeProfileTree(other.profile);
    }
    if (other.isSetError_log()) {
      java.util.List<java.lang.String> __this__error_log = new java.util.ArrayList<java.lang.String>(other.error_log);
      this.error_log = __this__error_log;
    }
    if (other.isSetDelta_urls()) {
      java.util.List<java.lang.String> __this__delta_urls = new java.util.ArrayList<java.lang.String>(other.delta_urls);
      this.delta_urls = __this__delta_urls;
    }
    if (other.isSetLoad_counters()) {
      java.util.Map<java.lang.String,java.lang.String> __this__load_counters = new java.util.HashMap<java.lang.String,java.lang.String>(other.load_counters);
      this.load_counters = __this__load_counters;
    }
    if (other.isSetTracking_url()) {
      this.tracking_url = other.tracking_url;
    }
    if (other.isSetExport_files()) {
      java.util.List<java.lang.String> __this__export_files = new java.util.ArrayList<java.lang.String>(other.export_files);
      this.export_files = __this__export_files;
    }
    if (other.isSetCommitInfos()) {
      java.util.List<com.starrocks.thrift.TTabletCommitInfo> __this__commitInfos = new java.util.ArrayList<com.starrocks.thrift.TTabletCommitInfo>(other.commitInfos.size());
      for (com.starrocks.thrift.TTabletCommitInfo other_element : other.commitInfos) {
        __this__commitInfos.add(new com.starrocks.thrift.TTabletCommitInfo(other_element));
      }
      this.commitInfos = __this__commitInfos;
    }
    this.loaded_rows = other.loaded_rows;
    this.backend_id = other.backend_id;
    this.sink_load_bytes = other.sink_load_bytes;
    this.source_load_rows = other.source_load_rows;
    this.source_load_bytes = other.source_load_bytes;
    if (other.isSetLoad_type()) {
      this.load_type = other.load_type;
    }
    if (other.isSetFailInfos()) {
      java.util.List<com.starrocks.thrift.TTabletFailInfo> __this__failInfos = new java.util.ArrayList<com.starrocks.thrift.TTabletFailInfo>(other.failInfos.size());
      for (com.starrocks.thrift.TTabletFailInfo other_element : other.failInfos) {
        __this__failInfos.add(new com.starrocks.thrift.TTabletFailInfo(other_element));
      }
      this.failInfos = __this__failInfos;
    }
    this.filtered_rows = other.filtered_rows;
    this.unselected_rows = other.unselected_rows;
    this.source_scan_bytes = other.source_scan_bytes;
    if (other.isSetSink_commit_infos()) {
      java.util.List<com.starrocks.thrift.TSinkCommitInfo> __this__sink_commit_infos = new java.util.ArrayList<com.starrocks.thrift.TSinkCommitInfo>(other.sink_commit_infos.size());
      for (com.starrocks.thrift.TSinkCommitInfo other_element : other.sink_commit_infos) {
        __this__sink_commit_infos.add(new com.starrocks.thrift.TSinkCommitInfo(other_element));
      }
      this.sink_commit_infos = __this__sink_commit_infos;
    }
    if (other.isSetRejected_record_path()) {
      this.rejected_record_path = other.rejected_record_path;
    }
  }

  @Override
  public TReportExecStatusParams deepCopy() {
    return new TReportExecStatusParams(this);
  }

  @Override
  public void clear() {
    this.protocol_version = null;
    this.query_id = null;
    setBackend_numIsSet(false);
    this.backend_num = 0;
    this.fragment_instance_id = null;
    this.status = null;
    setDoneIsSet(false);
    this.done = false;
    this.profile = null;
    this.error_log = null;
    this.delta_urls = null;
    this.load_counters = null;
    this.tracking_url = null;
    this.export_files = null;
    this.commitInfos = null;
    setLoaded_rowsIsSet(false);
    this.loaded_rows = 0;
    setBackend_idIsSet(false);
    this.backend_id = 0;
    setSink_load_bytesIsSet(false);
    this.sink_load_bytes = 0;
    setSource_load_rowsIsSet(false);
    this.source_load_rows = 0;
    setSource_load_bytesIsSet(false);
    this.source_load_bytes = 0;
    this.load_type = null;
    this.failInfos = null;
    setFiltered_rowsIsSet(false);
    this.filtered_rows = 0;
    setUnselected_rowsIsSet(false);
    this.unselected_rows = 0;
    setSource_scan_bytesIsSet(false);
    this.source_scan_bytes = 0;
    this.sink_commit_infos = null;
    this.rejected_record_path = null;
  }

  /**
   * 
   * @see FrontendServiceVersion
   */
  @org.apache.thrift.annotation.Nullable
  public FrontendServiceVersion getProtocol_version() {
    return this.protocol_version;
  }

  /**
   * 
   * @see FrontendServiceVersion
   */
  public TReportExecStatusParams setProtocol_version(@org.apache.thrift.annotation.Nullable FrontendServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocol_version() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol_version() {
    return this.protocol_version != null;
  }

  public void setProtocol_versionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TUniqueId getQuery_id() {
    return this.query_id;
  }

  public TReportExecStatusParams setQuery_id(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId query_id) {
    this.query_id = query_id;
    return this;
  }

  public void unsetQuery_id() {
    this.query_id = null;
  }

  /** Returns true if field query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_id() {
    return this.query_id != null;
  }

  public void setQuery_idIsSet(boolean value) {
    if (!value) {
      this.query_id = null;
    }
  }

  public int getBackend_num() {
    return this.backend_num;
  }

  public TReportExecStatusParams setBackend_num(int backend_num) {
    this.backend_num = backend_num;
    setBackend_numIsSet(true);
    return this;
  }

  public void unsetBackend_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  /** Returns true if field backend_num is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  public void setBackend_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TUniqueId getFragment_instance_id() {
    return this.fragment_instance_id;
  }

  public TReportExecStatusParams setFragment_instance_id(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId fragment_instance_id) {
    this.fragment_instance_id = fragment_instance_id;
    return this;
  }

  public void unsetFragment_instance_id() {
    this.fragment_instance_id = null;
  }

  /** Returns true if field fragment_instance_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment_instance_id() {
    return this.fragment_instance_id != null;
  }

  public void setFragment_instance_idIsSet(boolean value) {
    if (!value) {
      this.fragment_instance_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TStatus getStatus() {
    return this.status;
  }

  public TReportExecStatusParams setStatus(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public boolean isDone() {
    return this.done;
  }

  public TReportExecStatusParams setDone(boolean done) {
    this.done = done;
    setDoneIsSet(true);
    return this;
  }

  public void unsetDone() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DONE_ISSET_ID);
  }

  /** Returns true if field done is set (has been assigned a value) and false otherwise */
  public boolean isSetDone() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DONE_ISSET_ID);
  }

  public void setDoneIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DONE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TRuntimeProfileTree getProfile() {
    return this.profile;
  }

  public TReportExecStatusParams setProfile(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TRuntimeProfileTree profile) {
    this.profile = profile;
    return this;
  }

  public void unsetProfile() {
    this.profile = null;
  }

  /** Returns true if field profile is set (has been assigned a value) and false otherwise */
  public boolean isSetProfile() {
    return this.profile != null;
  }

  public void setProfileIsSet(boolean value) {
    if (!value) {
      this.profile = null;
    }
  }

  public int getError_logSize() {
    return (this.error_log == null) ? 0 : this.error_log.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getError_logIterator() {
    return (this.error_log == null) ? null : this.error_log.iterator();
  }

  public void addToError_log(java.lang.String elem) {
    if (this.error_log == null) {
      this.error_log = new java.util.ArrayList<java.lang.String>();
    }
    this.error_log.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getError_log() {
    return this.error_log;
  }

  public TReportExecStatusParams setError_log(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> error_log) {
    this.error_log = error_log;
    return this;
  }

  public void unsetError_log() {
    this.error_log = null;
  }

  /** Returns true if field error_log is set (has been assigned a value) and false otherwise */
  public boolean isSetError_log() {
    return this.error_log != null;
  }

  public void setError_logIsSet(boolean value) {
    if (!value) {
      this.error_log = null;
    }
  }

  public int getDelta_urlsSize() {
    return (this.delta_urls == null) ? 0 : this.delta_urls.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getDelta_urlsIterator() {
    return (this.delta_urls == null) ? null : this.delta_urls.iterator();
  }

  public void addToDelta_urls(java.lang.String elem) {
    if (this.delta_urls == null) {
      this.delta_urls = new java.util.ArrayList<java.lang.String>();
    }
    this.delta_urls.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getDelta_urls() {
    return this.delta_urls;
  }

  public TReportExecStatusParams setDelta_urls(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> delta_urls) {
    this.delta_urls = delta_urls;
    return this;
  }

  public void unsetDelta_urls() {
    this.delta_urls = null;
  }

  /** Returns true if field delta_urls is set (has been assigned a value) and false otherwise */
  public boolean isSetDelta_urls() {
    return this.delta_urls != null;
  }

  public void setDelta_urlsIsSet(boolean value) {
    if (!value) {
      this.delta_urls = null;
    }
  }

  public int getLoad_countersSize() {
    return (this.load_counters == null) ? 0 : this.load_counters.size();
  }

  public void putToLoad_counters(java.lang.String key, java.lang.String val) {
    if (this.load_counters == null) {
      this.load_counters = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.load_counters.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getLoad_counters() {
    return this.load_counters;
  }

  public TReportExecStatusParams setLoad_counters(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> load_counters) {
    this.load_counters = load_counters;
    return this;
  }

  public void unsetLoad_counters() {
    this.load_counters = null;
  }

  /** Returns true if field load_counters is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_counters() {
    return this.load_counters != null;
  }

  public void setLoad_countersIsSet(boolean value) {
    if (!value) {
      this.load_counters = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTracking_url() {
    return this.tracking_url;
  }

  public TReportExecStatusParams setTracking_url(@org.apache.thrift.annotation.Nullable java.lang.String tracking_url) {
    this.tracking_url = tracking_url;
    return this;
  }

  public void unsetTracking_url() {
    this.tracking_url = null;
  }

  /** Returns true if field tracking_url is set (has been assigned a value) and false otherwise */
  public boolean isSetTracking_url() {
    return this.tracking_url != null;
  }

  public void setTracking_urlIsSet(boolean value) {
    if (!value) {
      this.tracking_url = null;
    }
  }

  public int getExport_filesSize() {
    return (this.export_files == null) ? 0 : this.export_files.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getExport_filesIterator() {
    return (this.export_files == null) ? null : this.export_files.iterator();
  }

  public void addToExport_files(java.lang.String elem) {
    if (this.export_files == null) {
      this.export_files = new java.util.ArrayList<java.lang.String>();
    }
    this.export_files.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getExport_files() {
    return this.export_files;
  }

  public TReportExecStatusParams setExport_files(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> export_files) {
    this.export_files = export_files;
    return this;
  }

  public void unsetExport_files() {
    this.export_files = null;
  }

  /** Returns true if field export_files is set (has been assigned a value) and false otherwise */
  public boolean isSetExport_files() {
    return this.export_files != null;
  }

  public void setExport_filesIsSet(boolean value) {
    if (!value) {
      this.export_files = null;
    }
  }

  public int getCommitInfosSize() {
    return (this.commitInfos == null) ? 0 : this.commitInfos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TTabletCommitInfo> getCommitInfosIterator() {
    return (this.commitInfos == null) ? null : this.commitInfos.iterator();
  }

  public void addToCommitInfos(com.starrocks.thrift.TTabletCommitInfo elem) {
    if (this.commitInfos == null) {
      this.commitInfos = new java.util.ArrayList<com.starrocks.thrift.TTabletCommitInfo>();
    }
    this.commitInfos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TTabletCommitInfo> getCommitInfos() {
    return this.commitInfos;
  }

  public TReportExecStatusParams setCommitInfos(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TTabletCommitInfo> commitInfos) {
    this.commitInfos = commitInfos;
    return this;
  }

  public void unsetCommitInfos() {
    this.commitInfos = null;
  }

  /** Returns true if field commitInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitInfos() {
    return this.commitInfos != null;
  }

  public void setCommitInfosIsSet(boolean value) {
    if (!value) {
      this.commitInfos = null;
    }
  }

  public long getLoaded_rows() {
    return this.loaded_rows;
  }

  public TReportExecStatusParams setLoaded_rows(long loaded_rows) {
    this.loaded_rows = loaded_rows;
    setLoaded_rowsIsSet(true);
    return this;
  }

  public void unsetLoaded_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADED_ROWS_ISSET_ID);
  }

  /** Returns true if field loaded_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetLoaded_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADED_ROWS_ISSET_ID);
  }

  public void setLoaded_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADED_ROWS_ISSET_ID, value);
  }

  public long getBackend_id() {
    return this.backend_id;
  }

  public TReportExecStatusParams setBackend_id(long backend_id) {
    this.backend_id = backend_id;
    setBackend_idIsSet(true);
    return this;
  }

  public void unsetBackend_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BACKEND_ID_ISSET_ID);
  }

  /** Returns true if field backend_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BACKEND_ID_ISSET_ID);
  }

  public void setBackend_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BACKEND_ID_ISSET_ID, value);
  }

  public long getSink_load_bytes() {
    return this.sink_load_bytes;
  }

  public TReportExecStatusParams setSink_load_bytes(long sink_load_bytes) {
    this.sink_load_bytes = sink_load_bytes;
    setSink_load_bytesIsSet(true);
    return this;
  }

  public void unsetSink_load_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SINK_LOAD_BYTES_ISSET_ID);
  }

  /** Returns true if field sink_load_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSink_load_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SINK_LOAD_BYTES_ISSET_ID);
  }

  public void setSink_load_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SINK_LOAD_BYTES_ISSET_ID, value);
  }

  public long getSource_load_rows() {
    return this.source_load_rows;
  }

  public TReportExecStatusParams setSource_load_rows(long source_load_rows) {
    this.source_load_rows = source_load_rows;
    setSource_load_rowsIsSet(true);
    return this;
  }

  public void unsetSource_load_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCE_LOAD_ROWS_ISSET_ID);
  }

  /** Returns true if field source_load_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetSource_load_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCE_LOAD_ROWS_ISSET_ID);
  }

  public void setSource_load_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCE_LOAD_ROWS_ISSET_ID, value);
  }

  public long getSource_load_bytes() {
    return this.source_load_bytes;
  }

  public TReportExecStatusParams setSource_load_bytes(long source_load_bytes) {
    this.source_load_bytes = source_load_bytes;
    setSource_load_bytesIsSet(true);
    return this;
  }

  public void unsetSource_load_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCE_LOAD_BYTES_ISSET_ID);
  }

  /** Returns true if field source_load_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSource_load_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCE_LOAD_BYTES_ISSET_ID);
  }

  public void setSource_load_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCE_LOAD_BYTES_ISSET_ID, value);
  }

  /**
   * 
   * @see com.starrocks.thrift.TLoadJobType
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TLoadJobType getLoad_type() {
    return this.load_type;
  }

  /**
   * 
   * @see com.starrocks.thrift.TLoadJobType
   */
  public TReportExecStatusParams setLoad_type(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TLoadJobType load_type) {
    this.load_type = load_type;
    return this;
  }

  public void unsetLoad_type() {
    this.load_type = null;
  }

  /** Returns true if field load_type is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_type() {
    return this.load_type != null;
  }

  public void setLoad_typeIsSet(boolean value) {
    if (!value) {
      this.load_type = null;
    }
  }

  public int getFailInfosSize() {
    return (this.failInfos == null) ? 0 : this.failInfos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TTabletFailInfo> getFailInfosIterator() {
    return (this.failInfos == null) ? null : this.failInfos.iterator();
  }

  public void addToFailInfos(com.starrocks.thrift.TTabletFailInfo elem) {
    if (this.failInfos == null) {
      this.failInfos = new java.util.ArrayList<com.starrocks.thrift.TTabletFailInfo>();
    }
    this.failInfos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TTabletFailInfo> getFailInfos() {
    return this.failInfos;
  }

  public TReportExecStatusParams setFailInfos(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TTabletFailInfo> failInfos) {
    this.failInfos = failInfos;
    return this;
  }

  public void unsetFailInfos() {
    this.failInfos = null;
  }

  /** Returns true if field failInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetFailInfos() {
    return this.failInfos != null;
  }

  public void setFailInfosIsSet(boolean value) {
    if (!value) {
      this.failInfos = null;
    }
  }

  public long getFiltered_rows() {
    return this.filtered_rows;
  }

  public TReportExecStatusParams setFiltered_rows(long filtered_rows) {
    this.filtered_rows = filtered_rows;
    setFiltered_rowsIsSet(true);
    return this;
  }

  public void unsetFiltered_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILTERED_ROWS_ISSET_ID);
  }

  /** Returns true if field filtered_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetFiltered_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILTERED_ROWS_ISSET_ID);
  }

  public void setFiltered_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILTERED_ROWS_ISSET_ID, value);
  }

  public long getUnselected_rows() {
    return this.unselected_rows;
  }

  public TReportExecStatusParams setUnselected_rows(long unselected_rows) {
    this.unselected_rows = unselected_rows;
    setUnselected_rowsIsSet(true);
    return this;
  }

  public void unsetUnselected_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNSELECTED_ROWS_ISSET_ID);
  }

  /** Returns true if field unselected_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetUnselected_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNSELECTED_ROWS_ISSET_ID);
  }

  public void setUnselected_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNSELECTED_ROWS_ISSET_ID, value);
  }

  public long getSource_scan_bytes() {
    return this.source_scan_bytes;
  }

  public TReportExecStatusParams setSource_scan_bytes(long source_scan_bytes) {
    this.source_scan_bytes = source_scan_bytes;
    setSource_scan_bytesIsSet(true);
    return this;
  }

  public void unsetSource_scan_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCE_SCAN_BYTES_ISSET_ID);
  }

  /** Returns true if field source_scan_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSource_scan_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCE_SCAN_BYTES_ISSET_ID);
  }

  public void setSource_scan_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCE_SCAN_BYTES_ISSET_ID, value);
  }

  public int getSink_commit_infosSize() {
    return (this.sink_commit_infos == null) ? 0 : this.sink_commit_infos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TSinkCommitInfo> getSink_commit_infosIterator() {
    return (this.sink_commit_infos == null) ? null : this.sink_commit_infos.iterator();
  }

  public void addToSink_commit_infos(com.starrocks.thrift.TSinkCommitInfo elem) {
    if (this.sink_commit_infos == null) {
      this.sink_commit_infos = new java.util.ArrayList<com.starrocks.thrift.TSinkCommitInfo>();
    }
    this.sink_commit_infos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TSinkCommitInfo> getSink_commit_infos() {
    return this.sink_commit_infos;
  }

  public TReportExecStatusParams setSink_commit_infos(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TSinkCommitInfo> sink_commit_infos) {
    this.sink_commit_infos = sink_commit_infos;
    return this;
  }

  public void unsetSink_commit_infos() {
    this.sink_commit_infos = null;
  }

  /** Returns true if field sink_commit_infos is set (has been assigned a value) and false otherwise */
  public boolean isSetSink_commit_infos() {
    return this.sink_commit_infos != null;
  }

  public void setSink_commit_infosIsSet(boolean value) {
    if (!value) {
      this.sink_commit_infos = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRejected_record_path() {
    return this.rejected_record_path;
  }

  public TReportExecStatusParams setRejected_record_path(@org.apache.thrift.annotation.Nullable java.lang.String rejected_record_path) {
    this.rejected_record_path = rejected_record_path;
    return this;
  }

  public void unsetRejected_record_path() {
    this.rejected_record_path = null;
  }

  /** Returns true if field rejected_record_path is set (has been assigned a value) and false otherwise */
  public boolean isSetRejected_record_path() {
    return this.rejected_record_path != null;
  }

  public void setRejected_record_pathIsSet(boolean value) {
    if (!value) {
      this.rejected_record_path = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocol_version();
      } else {
        setProtocol_version((FrontendServiceVersion)value);
      }
      break;

    case QUERY_ID:
      if (value == null) {
        unsetQuery_id();
      } else {
        setQuery_id((com.starrocks.thrift.TUniqueId)value);
      }
      break;

    case BACKEND_NUM:
      if (value == null) {
        unsetBackend_num();
      } else {
        setBackend_num((java.lang.Integer)value);
      }
      break;

    case FRAGMENT_INSTANCE_ID:
      if (value == null) {
        unsetFragment_instance_id();
      } else {
        setFragment_instance_id((com.starrocks.thrift.TUniqueId)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.starrocks.thrift.TStatus)value);
      }
      break;

    case DONE:
      if (value == null) {
        unsetDone();
      } else {
        setDone((java.lang.Boolean)value);
      }
      break;

    case PROFILE:
      if (value == null) {
        unsetProfile();
      } else {
        setProfile((com.starrocks.thrift.TRuntimeProfileTree)value);
      }
      break;

    case ERROR_LOG:
      if (value == null) {
        unsetError_log();
      } else {
        setError_log((java.util.List<java.lang.String>)value);
      }
      break;

    case DELTA_URLS:
      if (value == null) {
        unsetDelta_urls();
      } else {
        setDelta_urls((java.util.List<java.lang.String>)value);
      }
      break;

    case LOAD_COUNTERS:
      if (value == null) {
        unsetLoad_counters();
      } else {
        setLoad_counters((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case TRACKING_URL:
      if (value == null) {
        unsetTracking_url();
      } else {
        setTracking_url((java.lang.String)value);
      }
      break;

    case EXPORT_FILES:
      if (value == null) {
        unsetExport_files();
      } else {
        setExport_files((java.util.List<java.lang.String>)value);
      }
      break;

    case COMMIT_INFOS:
      if (value == null) {
        unsetCommitInfos();
      } else {
        setCommitInfos((java.util.List<com.starrocks.thrift.TTabletCommitInfo>)value);
      }
      break;

    case LOADED_ROWS:
      if (value == null) {
        unsetLoaded_rows();
      } else {
        setLoaded_rows((java.lang.Long)value);
      }
      break;

    case BACKEND_ID:
      if (value == null) {
        unsetBackend_id();
      } else {
        setBackend_id((java.lang.Long)value);
      }
      break;

    case SINK_LOAD_BYTES:
      if (value == null) {
        unsetSink_load_bytes();
      } else {
        setSink_load_bytes((java.lang.Long)value);
      }
      break;

    case SOURCE_LOAD_ROWS:
      if (value == null) {
        unsetSource_load_rows();
      } else {
        setSource_load_rows((java.lang.Long)value);
      }
      break;

    case SOURCE_LOAD_BYTES:
      if (value == null) {
        unsetSource_load_bytes();
      } else {
        setSource_load_bytes((java.lang.Long)value);
      }
      break;

    case LOAD_TYPE:
      if (value == null) {
        unsetLoad_type();
      } else {
        setLoad_type((com.starrocks.thrift.TLoadJobType)value);
      }
      break;

    case FAIL_INFOS:
      if (value == null) {
        unsetFailInfos();
      } else {
        setFailInfos((java.util.List<com.starrocks.thrift.TTabletFailInfo>)value);
      }
      break;

    case FILTERED_ROWS:
      if (value == null) {
        unsetFiltered_rows();
      } else {
        setFiltered_rows((java.lang.Long)value);
      }
      break;

    case UNSELECTED_ROWS:
      if (value == null) {
        unsetUnselected_rows();
      } else {
        setUnselected_rows((java.lang.Long)value);
      }
      break;

    case SOURCE_SCAN_BYTES:
      if (value == null) {
        unsetSource_scan_bytes();
      } else {
        setSource_scan_bytes((java.lang.Long)value);
      }
      break;

    case SINK_COMMIT_INFOS:
      if (value == null) {
        unsetSink_commit_infos();
      } else {
        setSink_commit_infos((java.util.List<com.starrocks.thrift.TSinkCommitInfo>)value);
      }
      break;

    case REJECTED_RECORD_PATH:
      if (value == null) {
        unsetRejected_record_path();
      } else {
        setRejected_record_path((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocol_version();

    case QUERY_ID:
      return getQuery_id();

    case BACKEND_NUM:
      return getBackend_num();

    case FRAGMENT_INSTANCE_ID:
      return getFragment_instance_id();

    case STATUS:
      return getStatus();

    case DONE:
      return isDone();

    case PROFILE:
      return getProfile();

    case ERROR_LOG:
      return getError_log();

    case DELTA_URLS:
      return getDelta_urls();

    case LOAD_COUNTERS:
      return getLoad_counters();

    case TRACKING_URL:
      return getTracking_url();

    case EXPORT_FILES:
      return getExport_files();

    case COMMIT_INFOS:
      return getCommitInfos();

    case LOADED_ROWS:
      return getLoaded_rows();

    case BACKEND_ID:
      return getBackend_id();

    case SINK_LOAD_BYTES:
      return getSink_load_bytes();

    case SOURCE_LOAD_ROWS:
      return getSource_load_rows();

    case SOURCE_LOAD_BYTES:
      return getSource_load_bytes();

    case LOAD_TYPE:
      return getLoad_type();

    case FAIL_INFOS:
      return getFailInfos();

    case FILTERED_ROWS:
      return getFiltered_rows();

    case UNSELECTED_ROWS:
      return getUnselected_rows();

    case SOURCE_SCAN_BYTES:
      return getSource_scan_bytes();

    case SINK_COMMIT_INFOS:
      return getSink_commit_infos();

    case REJECTED_RECORD_PATH:
      return getRejected_record_path();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocol_version();
    case QUERY_ID:
      return isSetQuery_id();
    case BACKEND_NUM:
      return isSetBackend_num();
    case FRAGMENT_INSTANCE_ID:
      return isSetFragment_instance_id();
    case STATUS:
      return isSetStatus();
    case DONE:
      return isSetDone();
    case PROFILE:
      return isSetProfile();
    case ERROR_LOG:
      return isSetError_log();
    case DELTA_URLS:
      return isSetDelta_urls();
    case LOAD_COUNTERS:
      return isSetLoad_counters();
    case TRACKING_URL:
      return isSetTracking_url();
    case EXPORT_FILES:
      return isSetExport_files();
    case COMMIT_INFOS:
      return isSetCommitInfos();
    case LOADED_ROWS:
      return isSetLoaded_rows();
    case BACKEND_ID:
      return isSetBackend_id();
    case SINK_LOAD_BYTES:
      return isSetSink_load_bytes();
    case SOURCE_LOAD_ROWS:
      return isSetSource_load_rows();
    case SOURCE_LOAD_BYTES:
      return isSetSource_load_bytes();
    case LOAD_TYPE:
      return isSetLoad_type();
    case FAIL_INFOS:
      return isSetFailInfos();
    case FILTERED_ROWS:
      return isSetFiltered_rows();
    case UNSELECTED_ROWS:
      return isSetUnselected_rows();
    case SOURCE_SCAN_BYTES:
      return isSetSource_scan_bytes();
    case SINK_COMMIT_INFOS:
      return isSetSink_commit_infos();
    case REJECTED_RECORD_PATH:
      return isSetRejected_record_path();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TReportExecStatusParams)
      return this.equals((TReportExecStatusParams)that);
    return false;
  }

  public boolean equals(TReportExecStatusParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_protocol_version = true && this.isSetProtocol_version();
    boolean that_present_protocol_version = true && that.isSetProtocol_version();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_query_id = true && this.isSetQuery_id();
    boolean that_present_query_id = true && that.isSetQuery_id();
    if (this_present_query_id || that_present_query_id) {
      if (!(this_present_query_id && that_present_query_id))
        return false;
      if (!this.query_id.equals(that.query_id))
        return false;
    }

    boolean this_present_backend_num = true && this.isSetBackend_num();
    boolean that_present_backend_num = true && that.isSetBackend_num();
    if (this_present_backend_num || that_present_backend_num) {
      if (!(this_present_backend_num && that_present_backend_num))
        return false;
      if (this.backend_num != that.backend_num)
        return false;
    }

    boolean this_present_fragment_instance_id = true && this.isSetFragment_instance_id();
    boolean that_present_fragment_instance_id = true && that.isSetFragment_instance_id();
    if (this_present_fragment_instance_id || that_present_fragment_instance_id) {
      if (!(this_present_fragment_instance_id && that_present_fragment_instance_id))
        return false;
      if (!this.fragment_instance_id.equals(that.fragment_instance_id))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_done = true && this.isSetDone();
    boolean that_present_done = true && that.isSetDone();
    if (this_present_done || that_present_done) {
      if (!(this_present_done && that_present_done))
        return false;
      if (this.done != that.done)
        return false;
    }

    boolean this_present_profile = true && this.isSetProfile();
    boolean that_present_profile = true && that.isSetProfile();
    if (this_present_profile || that_present_profile) {
      if (!(this_present_profile && that_present_profile))
        return false;
      if (!this.profile.equals(that.profile))
        return false;
    }

    boolean this_present_error_log = true && this.isSetError_log();
    boolean that_present_error_log = true && that.isSetError_log();
    if (this_present_error_log || that_present_error_log) {
      if (!(this_present_error_log && that_present_error_log))
        return false;
      if (!this.error_log.equals(that.error_log))
        return false;
    }

    boolean this_present_delta_urls = true && this.isSetDelta_urls();
    boolean that_present_delta_urls = true && that.isSetDelta_urls();
    if (this_present_delta_urls || that_present_delta_urls) {
      if (!(this_present_delta_urls && that_present_delta_urls))
        return false;
      if (!this.delta_urls.equals(that.delta_urls))
        return false;
    }

    boolean this_present_load_counters = true && this.isSetLoad_counters();
    boolean that_present_load_counters = true && that.isSetLoad_counters();
    if (this_present_load_counters || that_present_load_counters) {
      if (!(this_present_load_counters && that_present_load_counters))
        return false;
      if (!this.load_counters.equals(that.load_counters))
        return false;
    }

    boolean this_present_tracking_url = true && this.isSetTracking_url();
    boolean that_present_tracking_url = true && that.isSetTracking_url();
    if (this_present_tracking_url || that_present_tracking_url) {
      if (!(this_present_tracking_url && that_present_tracking_url))
        return false;
      if (!this.tracking_url.equals(that.tracking_url))
        return false;
    }

    boolean this_present_export_files = true && this.isSetExport_files();
    boolean that_present_export_files = true && that.isSetExport_files();
    if (this_present_export_files || that_present_export_files) {
      if (!(this_present_export_files && that_present_export_files))
        return false;
      if (!this.export_files.equals(that.export_files))
        return false;
    }

    boolean this_present_commitInfos = true && this.isSetCommitInfos();
    boolean that_present_commitInfos = true && that.isSetCommitInfos();
    if (this_present_commitInfos || that_present_commitInfos) {
      if (!(this_present_commitInfos && that_present_commitInfos))
        return false;
      if (!this.commitInfos.equals(that.commitInfos))
        return false;
    }

    boolean this_present_loaded_rows = true && this.isSetLoaded_rows();
    boolean that_present_loaded_rows = true && that.isSetLoaded_rows();
    if (this_present_loaded_rows || that_present_loaded_rows) {
      if (!(this_present_loaded_rows && that_present_loaded_rows))
        return false;
      if (this.loaded_rows != that.loaded_rows)
        return false;
    }

    boolean this_present_backend_id = true && this.isSetBackend_id();
    boolean that_present_backend_id = true && that.isSetBackend_id();
    if (this_present_backend_id || that_present_backend_id) {
      if (!(this_present_backend_id && that_present_backend_id))
        return false;
      if (this.backend_id != that.backend_id)
        return false;
    }

    boolean this_present_sink_load_bytes = true && this.isSetSink_load_bytes();
    boolean that_present_sink_load_bytes = true && that.isSetSink_load_bytes();
    if (this_present_sink_load_bytes || that_present_sink_load_bytes) {
      if (!(this_present_sink_load_bytes && that_present_sink_load_bytes))
        return false;
      if (this.sink_load_bytes != that.sink_load_bytes)
        return false;
    }

    boolean this_present_source_load_rows = true && this.isSetSource_load_rows();
    boolean that_present_source_load_rows = true && that.isSetSource_load_rows();
    if (this_present_source_load_rows || that_present_source_load_rows) {
      if (!(this_present_source_load_rows && that_present_source_load_rows))
        return false;
      if (this.source_load_rows != that.source_load_rows)
        return false;
    }

    boolean this_present_source_load_bytes = true && this.isSetSource_load_bytes();
    boolean that_present_source_load_bytes = true && that.isSetSource_load_bytes();
    if (this_present_source_load_bytes || that_present_source_load_bytes) {
      if (!(this_present_source_load_bytes && that_present_source_load_bytes))
        return false;
      if (this.source_load_bytes != that.source_load_bytes)
        return false;
    }

    boolean this_present_load_type = true && this.isSetLoad_type();
    boolean that_present_load_type = true && that.isSetLoad_type();
    if (this_present_load_type || that_present_load_type) {
      if (!(this_present_load_type && that_present_load_type))
        return false;
      if (!this.load_type.equals(that.load_type))
        return false;
    }

    boolean this_present_failInfos = true && this.isSetFailInfos();
    boolean that_present_failInfos = true && that.isSetFailInfos();
    if (this_present_failInfos || that_present_failInfos) {
      if (!(this_present_failInfos && that_present_failInfos))
        return false;
      if (!this.failInfos.equals(that.failInfos))
        return false;
    }

    boolean this_present_filtered_rows = true && this.isSetFiltered_rows();
    boolean that_present_filtered_rows = true && that.isSetFiltered_rows();
    if (this_present_filtered_rows || that_present_filtered_rows) {
      if (!(this_present_filtered_rows && that_present_filtered_rows))
        return false;
      if (this.filtered_rows != that.filtered_rows)
        return false;
    }

    boolean this_present_unselected_rows = true && this.isSetUnselected_rows();
    boolean that_present_unselected_rows = true && that.isSetUnselected_rows();
    if (this_present_unselected_rows || that_present_unselected_rows) {
      if (!(this_present_unselected_rows && that_present_unselected_rows))
        return false;
      if (this.unselected_rows != that.unselected_rows)
        return false;
    }

    boolean this_present_source_scan_bytes = true && this.isSetSource_scan_bytes();
    boolean that_present_source_scan_bytes = true && that.isSetSource_scan_bytes();
    if (this_present_source_scan_bytes || that_present_source_scan_bytes) {
      if (!(this_present_source_scan_bytes && that_present_source_scan_bytes))
        return false;
      if (this.source_scan_bytes != that.source_scan_bytes)
        return false;
    }

    boolean this_present_sink_commit_infos = true && this.isSetSink_commit_infos();
    boolean that_present_sink_commit_infos = true && that.isSetSink_commit_infos();
    if (this_present_sink_commit_infos || that_present_sink_commit_infos) {
      if (!(this_present_sink_commit_infos && that_present_sink_commit_infos))
        return false;
      if (!this.sink_commit_infos.equals(that.sink_commit_infos))
        return false;
    }

    boolean this_present_rejected_record_path = true && this.isSetRejected_record_path();
    boolean that_present_rejected_record_path = true && that.isSetRejected_record_path();
    if (this_present_rejected_record_path || that_present_rejected_record_path) {
      if (!(this_present_rejected_record_path && that_present_rejected_record_path))
        return false;
      if (!this.rejected_record_path.equals(that.rejected_record_path))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProtocol_version()) ? 131071 : 524287);
    if (isSetProtocol_version())
      hashCode = hashCode * 8191 + protocol_version.getValue();

    hashCode = hashCode * 8191 + ((isSetQuery_id()) ? 131071 : 524287);
    if (isSetQuery_id())
      hashCode = hashCode * 8191 + query_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetBackend_num()) ? 131071 : 524287);
    if (isSetBackend_num())
      hashCode = hashCode * 8191 + backend_num;

    hashCode = hashCode * 8191 + ((isSetFragment_instance_id()) ? 131071 : 524287);
    if (isSetFragment_instance_id())
      hashCode = hashCode * 8191 + fragment_instance_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetDone()) ? 131071 : 524287);
    if (isSetDone())
      hashCode = hashCode * 8191 + ((done) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
    if (isSetProfile())
      hashCode = hashCode * 8191 + profile.hashCode();

    hashCode = hashCode * 8191 + ((isSetError_log()) ? 131071 : 524287);
    if (isSetError_log())
      hashCode = hashCode * 8191 + error_log.hashCode();

    hashCode = hashCode * 8191 + ((isSetDelta_urls()) ? 131071 : 524287);
    if (isSetDelta_urls())
      hashCode = hashCode * 8191 + delta_urls.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoad_counters()) ? 131071 : 524287);
    if (isSetLoad_counters())
      hashCode = hashCode * 8191 + load_counters.hashCode();

    hashCode = hashCode * 8191 + ((isSetTracking_url()) ? 131071 : 524287);
    if (isSetTracking_url())
      hashCode = hashCode * 8191 + tracking_url.hashCode();

    hashCode = hashCode * 8191 + ((isSetExport_files()) ? 131071 : 524287);
    if (isSetExport_files())
      hashCode = hashCode * 8191 + export_files.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommitInfos()) ? 131071 : 524287);
    if (isSetCommitInfos())
      hashCode = hashCode * 8191 + commitInfos.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoaded_rows()) ? 131071 : 524287);
    if (isSetLoaded_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loaded_rows);

    hashCode = hashCode * 8191 + ((isSetBackend_id()) ? 131071 : 524287);
    if (isSetBackend_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(backend_id);

    hashCode = hashCode * 8191 + ((isSetSink_load_bytes()) ? 131071 : 524287);
    if (isSetSink_load_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sink_load_bytes);

    hashCode = hashCode * 8191 + ((isSetSource_load_rows()) ? 131071 : 524287);
    if (isSetSource_load_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(source_load_rows);

    hashCode = hashCode * 8191 + ((isSetSource_load_bytes()) ? 131071 : 524287);
    if (isSetSource_load_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(source_load_bytes);

    hashCode = hashCode * 8191 + ((isSetLoad_type()) ? 131071 : 524287);
    if (isSetLoad_type())
      hashCode = hashCode * 8191 + load_type.getValue();

    hashCode = hashCode * 8191 + ((isSetFailInfos()) ? 131071 : 524287);
    if (isSetFailInfos())
      hashCode = hashCode * 8191 + failInfos.hashCode();

    hashCode = hashCode * 8191 + ((isSetFiltered_rows()) ? 131071 : 524287);
    if (isSetFiltered_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(filtered_rows);

    hashCode = hashCode * 8191 + ((isSetUnselected_rows()) ? 131071 : 524287);
    if (isSetUnselected_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(unselected_rows);

    hashCode = hashCode * 8191 + ((isSetSource_scan_bytes()) ? 131071 : 524287);
    if (isSetSource_scan_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(source_scan_bytes);

    hashCode = hashCode * 8191 + ((isSetSink_commit_infos()) ? 131071 : 524287);
    if (isSetSink_commit_infos())
      hashCode = hashCode * 8191 + sink_commit_infos.hashCode();

    hashCode = hashCode * 8191 + ((isSetRejected_record_path()) ? 131071 : 524287);
    if (isSetRejected_record_path())
      hashCode = hashCode * 8191 + rejected_record_path.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TReportExecStatusParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetProtocol_version(), other.isSetProtocol_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, other.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_id(), other.isSetQuery_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_id, other.query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBackend_num(), other.isSetBackend_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_num, other.backend_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFragment_instance_id(), other.isSetFragment_instance_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment_instance_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_instance_id, other.fragment_instance_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDone(), other.isSetDone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.done, other.done);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProfile(), other.isSetProfile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetError_log(), other.isSetError_log());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_log()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_log, other.error_log);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDelta_urls(), other.isSetDelta_urls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelta_urls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delta_urls, other.delta_urls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_counters(), other.isSetLoad_counters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_counters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_counters, other.load_counters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTracking_url(), other.isSetTracking_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTracking_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracking_url, other.tracking_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExport_files(), other.isSetExport_files());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExport_files()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.export_files, other.export_files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCommitInfos(), other.isSetCommitInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitInfos, other.commitInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoaded_rows(), other.isSetLoaded_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoaded_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loaded_rows, other.loaded_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBackend_id(), other.isSetBackend_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_id, other.backend_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSink_load_bytes(), other.isSetSink_load_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSink_load_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sink_load_bytes, other.sink_load_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSource_load_rows(), other.isSetSource_load_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource_load_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source_load_rows, other.source_load_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSource_load_bytes(), other.isSetSource_load_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource_load_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source_load_bytes, other.source_load_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_type(), other.isSetLoad_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_type, other.load_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFailInfos(), other.isSetFailInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failInfos, other.failInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFiltered_rows(), other.isSetFiltered_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFiltered_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filtered_rows, other.filtered_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUnselected_rows(), other.isSetUnselected_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnselected_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unselected_rows, other.unselected_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSource_scan_bytes(), other.isSetSource_scan_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource_scan_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source_scan_bytes, other.source_scan_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSink_commit_infos(), other.isSetSink_commit_infos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSink_commit_infos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sink_commit_infos, other.sink_commit_infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRejected_record_path(), other.isSetRejected_record_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRejected_record_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rejected_record_path, other.rejected_record_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TReportExecStatusParams(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (isSetQuery_id()) {
      if (!first) sb.append(", ");
      sb.append("query_id:");
      if (this.query_id == null) {
        sb.append("null");
      } else {
        sb.append(this.query_id);
      }
      first = false;
    }
    if (isSetBackend_num()) {
      if (!first) sb.append(", ");
      sb.append("backend_num:");
      sb.append(this.backend_num);
      first = false;
    }
    if (isSetFragment_instance_id()) {
      if (!first) sb.append(", ");
      sb.append("fragment_instance_id:");
      if (this.fragment_instance_id == null) {
        sb.append("null");
      } else {
        sb.append(this.fragment_instance_id);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetDone()) {
      if (!first) sb.append(", ");
      sb.append("done:");
      sb.append(this.done);
      first = false;
    }
    if (isSetProfile()) {
      if (!first) sb.append(", ");
      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
    }
    if (isSetError_log()) {
      if (!first) sb.append(", ");
      sb.append("error_log:");
      if (this.error_log == null) {
        sb.append("null");
      } else {
        sb.append(this.error_log);
      }
      first = false;
    }
    if (isSetDelta_urls()) {
      if (!first) sb.append(", ");
      sb.append("delta_urls:");
      if (this.delta_urls == null) {
        sb.append("null");
      } else {
        sb.append(this.delta_urls);
      }
      first = false;
    }
    if (isSetLoad_counters()) {
      if (!first) sb.append(", ");
      sb.append("load_counters:");
      if (this.load_counters == null) {
        sb.append("null");
      } else {
        sb.append(this.load_counters);
      }
      first = false;
    }
    if (isSetTracking_url()) {
      if (!first) sb.append(", ");
      sb.append("tracking_url:");
      if (this.tracking_url == null) {
        sb.append("null");
      } else {
        sb.append(this.tracking_url);
      }
      first = false;
    }
    if (isSetExport_files()) {
      if (!first) sb.append(", ");
      sb.append("export_files:");
      if (this.export_files == null) {
        sb.append("null");
      } else {
        sb.append(this.export_files);
      }
      first = false;
    }
    if (isSetCommitInfos()) {
      if (!first) sb.append(", ");
      sb.append("commitInfos:");
      if (this.commitInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.commitInfos);
      }
      first = false;
    }
    if (isSetLoaded_rows()) {
      if (!first) sb.append(", ");
      sb.append("loaded_rows:");
      sb.append(this.loaded_rows);
      first = false;
    }
    if (isSetBackend_id()) {
      if (!first) sb.append(", ");
      sb.append("backend_id:");
      sb.append(this.backend_id);
      first = false;
    }
    if (isSetSink_load_bytes()) {
      if (!first) sb.append(", ");
      sb.append("sink_load_bytes:");
      sb.append(this.sink_load_bytes);
      first = false;
    }
    if (isSetSource_load_rows()) {
      if (!first) sb.append(", ");
      sb.append("source_load_rows:");
      sb.append(this.source_load_rows);
      first = false;
    }
    if (isSetSource_load_bytes()) {
      if (!first) sb.append(", ");
      sb.append("source_load_bytes:");
      sb.append(this.source_load_bytes);
      first = false;
    }
    if (isSetLoad_type()) {
      if (!first) sb.append(", ");
      sb.append("load_type:");
      if (this.load_type == null) {
        sb.append("null");
      } else {
        sb.append(this.load_type);
      }
      first = false;
    }
    if (isSetFailInfos()) {
      if (!first) sb.append(", ");
      sb.append("failInfos:");
      if (this.failInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.failInfos);
      }
      first = false;
    }
    if (isSetFiltered_rows()) {
      if (!first) sb.append(", ");
      sb.append("filtered_rows:");
      sb.append(this.filtered_rows);
      first = false;
    }
    if (isSetUnselected_rows()) {
      if (!first) sb.append(", ");
      sb.append("unselected_rows:");
      sb.append(this.unselected_rows);
      first = false;
    }
    if (isSetSource_scan_bytes()) {
      if (!first) sb.append(", ");
      sb.append("source_scan_bytes:");
      sb.append(this.source_scan_bytes);
      first = false;
    }
    if (isSetSink_commit_infos()) {
      if (!first) sb.append(", ");
      sb.append("sink_commit_infos:");
      if (this.sink_commit_infos == null) {
        sb.append("null");
      } else {
        sb.append(this.sink_commit_infos);
      }
      first = false;
    }
    if (isSetRejected_record_path()) {
      if (!first) sb.append(", ");
      sb.append("rejected_record_path:");
      if (this.rejected_record_path == null) {
        sb.append("null");
      } else {
        sb.append(this.rejected_record_path);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (query_id != null) {
      query_id.validate();
    }
    if (fragment_instance_id != null) {
      fragment_instance_id.validate();
    }
    if (status != null) {
      status.validate();
    }
    if (profile != null) {
      profile.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TReportExecStatusParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TReportExecStatusParamsStandardScheme getScheme() {
      return new TReportExecStatusParamsStandardScheme();
    }
  }

  private static class TReportExecStatusParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TReportExecStatusParams> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = com.starrocks.thrift.FrontendServiceVersion.findByValue(iprot.readI32());
              struct.setProtocol_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_id = new com.starrocks.thrift.TUniqueId();
              struct.query_id.read(iprot);
              struct.setQuery_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BACKEND_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.backend_num = iprot.readI32();
              struct.setBackend_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FRAGMENT_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment_instance_id = new com.starrocks.thrift.TUniqueId();
              struct.fragment_instance_id.read(iprot);
              struct.setFragment_instance_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new com.starrocks.thrift.TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DONE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.done = iprot.readBool();
              struct.setDoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.profile = new com.starrocks.thrift.TRuntimeProfileTree();
              struct.profile.read(iprot);
              struct.setProfileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ERROR_LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list212 = iprot.readListBegin();
                struct.error_log = new java.util.ArrayList<java.lang.String>(_list212.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem213;
                for (int _i214 = 0; _i214 < _list212.size; ++_i214)
                {
                  _elem213 = iprot.readString();
                  struct.error_log.add(_elem213);
                }
                iprot.readListEnd();
              }
              struct.setError_logIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DELTA_URLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list215 = iprot.readListBegin();
                struct.delta_urls = new java.util.ArrayList<java.lang.String>(_list215.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem216;
                for (int _i217 = 0; _i217 < _list215.size; ++_i217)
                {
                  _elem216 = iprot.readString();
                  struct.delta_urls.add(_elem216);
                }
                iprot.readListEnd();
              }
              struct.setDelta_urlsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOAD_COUNTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map218 = iprot.readMapBegin();
                struct.load_counters = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map218.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key219;
                @org.apache.thrift.annotation.Nullable java.lang.String _val220;
                for (int _i221 = 0; _i221 < _map218.size; ++_i221)
                {
                  _key219 = iprot.readString();
                  _val220 = iprot.readString();
                  struct.load_counters.put(_key219, _val220);
                }
                iprot.readMapEnd();
              }
              struct.setLoad_countersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRACKING_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tracking_url = iprot.readString();
              struct.setTracking_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EXPORT_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list222 = iprot.readListBegin();
                struct.export_files = new java.util.ArrayList<java.lang.String>(_list222.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem223;
                for (int _i224 = 0; _i224 < _list222.size; ++_i224)
                {
                  _elem223 = iprot.readString();
                  struct.export_files.add(_elem223);
                }
                iprot.readListEnd();
              }
              struct.setExport_filesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COMMIT_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list225 = iprot.readListBegin();
                struct.commitInfos = new java.util.ArrayList<com.starrocks.thrift.TTabletCommitInfo>(_list225.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTabletCommitInfo _elem226;
                for (int _i227 = 0; _i227 < _list225.size; ++_i227)
                {
                  _elem226 = new com.starrocks.thrift.TTabletCommitInfo();
                  _elem226.read(iprot);
                  struct.commitInfos.add(_elem226);
                }
                iprot.readListEnd();
              }
              struct.setCommitInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LOADED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loaded_rows = iprot.readI64();
              struct.setLoaded_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BACKEND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.backend_id = iprot.readI64();
              struct.setBackend_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SINK_LOAD_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sink_load_bytes = iprot.readI64();
              struct.setSink_load_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SOURCE_LOAD_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.source_load_rows = iprot.readI64();
              struct.setSource_load_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SOURCE_LOAD_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.source_load_bytes = iprot.readI64();
              struct.setSource_load_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LOAD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.load_type = com.starrocks.thrift.TLoadJobType.findByValue(iprot.readI32());
              struct.setLoad_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // FAIL_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list228 = iprot.readListBegin();
                struct.failInfos = new java.util.ArrayList<com.starrocks.thrift.TTabletFailInfo>(_list228.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTabletFailInfo _elem229;
                for (int _i230 = 0; _i230 < _list228.size; ++_i230)
                {
                  _elem229 = new com.starrocks.thrift.TTabletFailInfo();
                  _elem229.read(iprot);
                  struct.failInfos.add(_elem229);
                }
                iprot.readListEnd();
              }
              struct.setFailInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // FILTERED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.filtered_rows = iprot.readI64();
              struct.setFiltered_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // UNSELECTED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.unselected_rows = iprot.readI64();
              struct.setUnselected_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SOURCE_SCAN_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.source_scan_bytes = iprot.readI64();
              struct.setSource_scan_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SINK_COMMIT_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list231 = iprot.readListBegin();
                struct.sink_commit_infos = new java.util.ArrayList<com.starrocks.thrift.TSinkCommitInfo>(_list231.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TSinkCommitInfo _elem232;
                for (int _i233 = 0; _i233 < _list231.size; ++_i233)
                {
                  _elem232 = new com.starrocks.thrift.TSinkCommitInfo();
                  _elem232.read(iprot);
                  struct.sink_commit_infos.add(_elem232);
                }
                iprot.readListEnd();
              }
              struct.setSink_commit_infosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // REJECTED_RECORD_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rejected_record_path = iprot.readString();
              struct.setRejected_record_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.query_id != null) {
        if (struct.isSetQuery_id()) {
          oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
          struct.query_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBackend_num()) {
        oprot.writeFieldBegin(BACKEND_NUM_FIELD_DESC);
        oprot.writeI32(struct.backend_num);
        oprot.writeFieldEnd();
      }
      if (struct.fragment_instance_id != null) {
        if (struct.isSetFragment_instance_id()) {
          oprot.writeFieldBegin(FRAGMENT_INSTANCE_ID_FIELD_DESC);
          struct.fragment_instance_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          struct.status.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDone()) {
        oprot.writeFieldBegin(DONE_FIELD_DESC);
        oprot.writeBool(struct.done);
        oprot.writeFieldEnd();
      }
      if (struct.profile != null) {
        if (struct.isSetProfile()) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          struct.profile.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.error_log != null) {
        if (struct.isSetError_log()) {
          oprot.writeFieldBegin(ERROR_LOG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.error_log.size()));
            for (java.lang.String _iter234 : struct.error_log)
            {
              oprot.writeString(_iter234);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.delta_urls != null) {
        if (struct.isSetDelta_urls()) {
          oprot.writeFieldBegin(DELTA_URLS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.delta_urls.size()));
            for (java.lang.String _iter235 : struct.delta_urls)
            {
              oprot.writeString(_iter235);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.load_counters != null) {
        if (struct.isSetLoad_counters()) {
          oprot.writeFieldBegin(LOAD_COUNTERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.load_counters.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter236 : struct.load_counters.entrySet())
            {
              oprot.writeString(_iter236.getKey());
              oprot.writeString(_iter236.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tracking_url != null) {
        if (struct.isSetTracking_url()) {
          oprot.writeFieldBegin(TRACKING_URL_FIELD_DESC);
          oprot.writeString(struct.tracking_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.export_files != null) {
        if (struct.isSetExport_files()) {
          oprot.writeFieldBegin(EXPORT_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.export_files.size()));
            for (java.lang.String _iter237 : struct.export_files)
            {
              oprot.writeString(_iter237);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.commitInfos != null) {
        if (struct.isSetCommitInfos()) {
          oprot.writeFieldBegin(COMMIT_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.commitInfos.size()));
            for (com.starrocks.thrift.TTabletCommitInfo _iter238 : struct.commitInfos)
            {
              _iter238.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLoaded_rows()) {
        oprot.writeFieldBegin(LOADED_ROWS_FIELD_DESC);
        oprot.writeI64(struct.loaded_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBackend_id()) {
        oprot.writeFieldBegin(BACKEND_ID_FIELD_DESC);
        oprot.writeI64(struct.backend_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSink_load_bytes()) {
        oprot.writeFieldBegin(SINK_LOAD_BYTES_FIELD_DESC);
        oprot.writeI64(struct.sink_load_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSource_load_rows()) {
        oprot.writeFieldBegin(SOURCE_LOAD_ROWS_FIELD_DESC);
        oprot.writeI64(struct.source_load_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSource_load_bytes()) {
        oprot.writeFieldBegin(SOURCE_LOAD_BYTES_FIELD_DESC);
        oprot.writeI64(struct.source_load_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.load_type != null) {
        if (struct.isSetLoad_type()) {
          oprot.writeFieldBegin(LOAD_TYPE_FIELD_DESC);
          oprot.writeI32(struct.load_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.failInfos != null) {
        if (struct.isSetFailInfos()) {
          oprot.writeFieldBegin(FAIL_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.failInfos.size()));
            for (com.starrocks.thrift.TTabletFailInfo _iter239 : struct.failInfos)
            {
              _iter239.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFiltered_rows()) {
        oprot.writeFieldBegin(FILTERED_ROWS_FIELD_DESC);
        oprot.writeI64(struct.filtered_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUnselected_rows()) {
        oprot.writeFieldBegin(UNSELECTED_ROWS_FIELD_DESC);
        oprot.writeI64(struct.unselected_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSource_scan_bytes()) {
        oprot.writeFieldBegin(SOURCE_SCAN_BYTES_FIELD_DESC);
        oprot.writeI64(struct.source_scan_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.sink_commit_infos != null) {
        if (struct.isSetSink_commit_infos()) {
          oprot.writeFieldBegin(SINK_COMMIT_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sink_commit_infos.size()));
            for (com.starrocks.thrift.TSinkCommitInfo _iter240 : struct.sink_commit_infos)
            {
              _iter240.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.rejected_record_path != null) {
        if (struct.isSetRejected_record_path()) {
          oprot.writeFieldBegin(REJECTED_RECORD_PATH_FIELD_DESC);
          oprot.writeString(struct.rejected_record_path);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TReportExecStatusParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TReportExecStatusParamsTupleScheme getScheme() {
      return new TReportExecStatusParamsTupleScheme();
    }
  }

  private static class TReportExecStatusParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TReportExecStatusParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetQuery_id()) {
        optionals.set(0);
      }
      if (struct.isSetBackend_num()) {
        optionals.set(1);
      }
      if (struct.isSetFragment_instance_id()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetDone()) {
        optionals.set(4);
      }
      if (struct.isSetProfile()) {
        optionals.set(5);
      }
      if (struct.isSetError_log()) {
        optionals.set(6);
      }
      if (struct.isSetDelta_urls()) {
        optionals.set(7);
      }
      if (struct.isSetLoad_counters()) {
        optionals.set(8);
      }
      if (struct.isSetTracking_url()) {
        optionals.set(9);
      }
      if (struct.isSetExport_files()) {
        optionals.set(10);
      }
      if (struct.isSetCommitInfos()) {
        optionals.set(11);
      }
      if (struct.isSetLoaded_rows()) {
        optionals.set(12);
      }
      if (struct.isSetBackend_id()) {
        optionals.set(13);
      }
      if (struct.isSetSink_load_bytes()) {
        optionals.set(14);
      }
      if (struct.isSetSource_load_rows()) {
        optionals.set(15);
      }
      if (struct.isSetSource_load_bytes()) {
        optionals.set(16);
      }
      if (struct.isSetLoad_type()) {
        optionals.set(17);
      }
      if (struct.isSetFailInfos()) {
        optionals.set(18);
      }
      if (struct.isSetFiltered_rows()) {
        optionals.set(19);
      }
      if (struct.isSetUnselected_rows()) {
        optionals.set(20);
      }
      if (struct.isSetSource_scan_bytes()) {
        optionals.set(21);
      }
      if (struct.isSetSink_commit_infos()) {
        optionals.set(22);
      }
      if (struct.isSetRejected_record_path()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetQuery_id()) {
        struct.query_id.write(oprot);
      }
      if (struct.isSetBackend_num()) {
        oprot.writeI32(struct.backend_num);
      }
      if (struct.isSetFragment_instance_id()) {
        struct.fragment_instance_id.write(oprot);
      }
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
      if (struct.isSetDone()) {
        oprot.writeBool(struct.done);
      }
      if (struct.isSetProfile()) {
        struct.profile.write(oprot);
      }
      if (struct.isSetError_log()) {
        {
          oprot.writeI32(struct.error_log.size());
          for (java.lang.String _iter241 : struct.error_log)
          {
            oprot.writeString(_iter241);
          }
        }
      }
      if (struct.isSetDelta_urls()) {
        {
          oprot.writeI32(struct.delta_urls.size());
          for (java.lang.String _iter242 : struct.delta_urls)
          {
            oprot.writeString(_iter242);
          }
        }
      }
      if (struct.isSetLoad_counters()) {
        {
          oprot.writeI32(struct.load_counters.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter243 : struct.load_counters.entrySet())
          {
            oprot.writeString(_iter243.getKey());
            oprot.writeString(_iter243.getValue());
          }
        }
      }
      if (struct.isSetTracking_url()) {
        oprot.writeString(struct.tracking_url);
      }
      if (struct.isSetExport_files()) {
        {
          oprot.writeI32(struct.export_files.size());
          for (java.lang.String _iter244 : struct.export_files)
          {
            oprot.writeString(_iter244);
          }
        }
      }
      if (struct.isSetCommitInfos()) {
        {
          oprot.writeI32(struct.commitInfos.size());
          for (com.starrocks.thrift.TTabletCommitInfo _iter245 : struct.commitInfos)
          {
            _iter245.write(oprot);
          }
        }
      }
      if (struct.isSetLoaded_rows()) {
        oprot.writeI64(struct.loaded_rows);
      }
      if (struct.isSetBackend_id()) {
        oprot.writeI64(struct.backend_id);
      }
      if (struct.isSetSink_load_bytes()) {
        oprot.writeI64(struct.sink_load_bytes);
      }
      if (struct.isSetSource_load_rows()) {
        oprot.writeI64(struct.source_load_rows);
      }
      if (struct.isSetSource_load_bytes()) {
        oprot.writeI64(struct.source_load_bytes);
      }
      if (struct.isSetLoad_type()) {
        oprot.writeI32(struct.load_type.getValue());
      }
      if (struct.isSetFailInfos()) {
        {
          oprot.writeI32(struct.failInfos.size());
          for (com.starrocks.thrift.TTabletFailInfo _iter246 : struct.failInfos)
          {
            _iter246.write(oprot);
          }
        }
      }
      if (struct.isSetFiltered_rows()) {
        oprot.writeI64(struct.filtered_rows);
      }
      if (struct.isSetUnselected_rows()) {
        oprot.writeI64(struct.unselected_rows);
      }
      if (struct.isSetSource_scan_bytes()) {
        oprot.writeI64(struct.source_scan_bytes);
      }
      if (struct.isSetSink_commit_infos()) {
        {
          oprot.writeI32(struct.sink_commit_infos.size());
          for (com.starrocks.thrift.TSinkCommitInfo _iter247 : struct.sink_commit_infos)
          {
            _iter247.write(oprot);
          }
        }
      }
      if (struct.isSetRejected_record_path()) {
        oprot.writeString(struct.rejected_record_path);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.protocol_version = com.starrocks.thrift.FrontendServiceVersion.findByValue(iprot.readI32());
      struct.setProtocol_versionIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.query_id = new com.starrocks.thrift.TUniqueId();
        struct.query_id.read(iprot);
        struct.setQuery_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.backend_num = iprot.readI32();
        struct.setBackend_numIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fragment_instance_id = new com.starrocks.thrift.TUniqueId();
        struct.fragment_instance_id.read(iprot);
        struct.setFragment_instance_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = new com.starrocks.thrift.TStatus();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.done = iprot.readBool();
        struct.setDoneIsSet(true);
      }
      if (incoming.get(5)) {
        struct.profile = new com.starrocks.thrift.TRuntimeProfileTree();
        struct.profile.read(iprot);
        struct.setProfileIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list248 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.error_log = new java.util.ArrayList<java.lang.String>(_list248.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem249;
          for (int _i250 = 0; _i250 < _list248.size; ++_i250)
          {
            _elem249 = iprot.readString();
            struct.error_log.add(_elem249);
          }
        }
        struct.setError_logIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list251 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.delta_urls = new java.util.ArrayList<java.lang.String>(_list251.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem252;
          for (int _i253 = 0; _i253 < _list251.size; ++_i253)
          {
            _elem252 = iprot.readString();
            struct.delta_urls.add(_elem252);
          }
        }
        struct.setDelta_urlsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map254 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.load_counters = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map254.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key255;
          @org.apache.thrift.annotation.Nullable java.lang.String _val256;
          for (int _i257 = 0; _i257 < _map254.size; ++_i257)
          {
            _key255 = iprot.readString();
            _val256 = iprot.readString();
            struct.load_counters.put(_key255, _val256);
          }
        }
        struct.setLoad_countersIsSet(true);
      }
      if (incoming.get(9)) {
        struct.tracking_url = iprot.readString();
        struct.setTracking_urlIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list258 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.export_files = new java.util.ArrayList<java.lang.String>(_list258.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem259;
          for (int _i260 = 0; _i260 < _list258.size; ++_i260)
          {
            _elem259 = iprot.readString();
            struct.export_files.add(_elem259);
          }
        }
        struct.setExport_filesIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list261 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.commitInfos = new java.util.ArrayList<com.starrocks.thrift.TTabletCommitInfo>(_list261.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTabletCommitInfo _elem262;
          for (int _i263 = 0; _i263 < _list261.size; ++_i263)
          {
            _elem262 = new com.starrocks.thrift.TTabletCommitInfo();
            _elem262.read(iprot);
            struct.commitInfos.add(_elem262);
          }
        }
        struct.setCommitInfosIsSet(true);
      }
      if (incoming.get(12)) {
        struct.loaded_rows = iprot.readI64();
        struct.setLoaded_rowsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.backend_id = iprot.readI64();
        struct.setBackend_idIsSet(true);
      }
      if (incoming.get(14)) {
        struct.sink_load_bytes = iprot.readI64();
        struct.setSink_load_bytesIsSet(true);
      }
      if (incoming.get(15)) {
        struct.source_load_rows = iprot.readI64();
        struct.setSource_load_rowsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.source_load_bytes = iprot.readI64();
        struct.setSource_load_bytesIsSet(true);
      }
      if (incoming.get(17)) {
        struct.load_type = com.starrocks.thrift.TLoadJobType.findByValue(iprot.readI32());
        struct.setLoad_typeIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list264 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.failInfos = new java.util.ArrayList<com.starrocks.thrift.TTabletFailInfo>(_list264.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTabletFailInfo _elem265;
          for (int _i266 = 0; _i266 < _list264.size; ++_i266)
          {
            _elem265 = new com.starrocks.thrift.TTabletFailInfo();
            _elem265.read(iprot);
            struct.failInfos.add(_elem265);
          }
        }
        struct.setFailInfosIsSet(true);
      }
      if (incoming.get(19)) {
        struct.filtered_rows = iprot.readI64();
        struct.setFiltered_rowsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.unselected_rows = iprot.readI64();
        struct.setUnselected_rowsIsSet(true);
      }
      if (incoming.get(21)) {
        struct.source_scan_bytes = iprot.readI64();
        struct.setSource_scan_bytesIsSet(true);
      }
      if (incoming.get(22)) {
        {
          org.apache.thrift.protocol.TList _list267 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.sink_commit_infos = new java.util.ArrayList<com.starrocks.thrift.TSinkCommitInfo>(_list267.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TSinkCommitInfo _elem268;
          for (int _i269 = 0; _i269 < _list267.size; ++_i269)
          {
            _elem268 = new com.starrocks.thrift.TSinkCommitInfo();
            _elem268.read(iprot);
            struct.sink_commit_infos.add(_elem268);
          }
        }
        struct.setSink_commit_infosIsSet(true);
      }
      if (incoming.get(23)) {
        struct.rejected_record_path = iprot.readString();
        struct.setRejected_record_pathIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

