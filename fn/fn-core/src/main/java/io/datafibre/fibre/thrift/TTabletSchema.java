/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TTabletSchema implements org.apache.thrift.TBase<TTabletSchema, TTabletSchema._Fields>, java.io.Serializable, Cloneable, Comparable<TTabletSchema> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTabletSchema");

  private static final org.apache.thrift.protocol.TField SHORT_KEY_COLUMN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("short_key_column_count", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_hash", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField KEYS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("keys_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STORAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField BLOOM_FILTER_FPP_FIELD_DESC = new org.apache.thrift.protocol.TField("bloom_filter_fpp", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField INDEXES_FIELD_DESC = new org.apache.thrift.protocol.TField("indexes", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField IS_IN_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_in_memory", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SORT_KEY_IDXES_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_key_idxes", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField SORT_KEY_UNIQUE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_key_unique_ids", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField SCHEMA_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_version", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTabletSchemaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTabletSchemaTupleSchemeFactory();

  public short short_key_column_count; // required
  public int schema_hash; // required
  /**
   * 
   * @see com.starrocks.thrift.TKeysType
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TKeysType keys_type; // required
  /**
   * 
   * @see com.starrocks.thrift.TStorageType
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TStorageType storage_type; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TColumn> columns; // required
  public double bloom_filter_fpp; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TOlapTableIndex> indexes; // optional
  public boolean is_in_memory; // optional
  public long id; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> sort_key_idxes; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> sort_key_unique_ids; // optional
  public int schema_version; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SHORT_KEY_COLUMN_COUNT((short)1, "short_key_column_count"),
    SCHEMA_HASH((short)2, "schema_hash"),
    /**
     * 
     * @see com.starrocks.thrift.TKeysType
     */
    KEYS_TYPE((short)3, "keys_type"),
    /**
     * 
     * @see com.starrocks.thrift.TStorageType
     */
    STORAGE_TYPE((short)4, "storage_type"),
    COLUMNS((short)5, "columns"),
    BLOOM_FILTER_FPP((short)6, "bloom_filter_fpp"),
    INDEXES((short)7, "indexes"),
    IS_IN_MEMORY((short)8, "is_in_memory"),
    ID((short)9, "id"),
    SORT_KEY_IDXES((short)10, "sort_key_idxes"),
    SORT_KEY_UNIQUE_IDS((short)11, "sort_key_unique_ids"),
    SCHEMA_VERSION((short)12, "schema_version");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SHORT_KEY_COLUMN_COUNT
          return SHORT_KEY_COLUMN_COUNT;
        case 2: // SCHEMA_HASH
          return SCHEMA_HASH;
        case 3: // KEYS_TYPE
          return KEYS_TYPE;
        case 4: // STORAGE_TYPE
          return STORAGE_TYPE;
        case 5: // COLUMNS
          return COLUMNS;
        case 6: // BLOOM_FILTER_FPP
          return BLOOM_FILTER_FPP;
        case 7: // INDEXES
          return INDEXES;
        case 8: // IS_IN_MEMORY
          return IS_IN_MEMORY;
        case 9: // ID
          return ID;
        case 10: // SORT_KEY_IDXES
          return SORT_KEY_IDXES;
        case 11: // SORT_KEY_UNIQUE_IDS
          return SORT_KEY_UNIQUE_IDS;
        case 12: // SCHEMA_VERSION
          return SCHEMA_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHORT_KEY_COLUMN_COUNT_ISSET_ID = 0;
  private static final int __SCHEMA_HASH_ISSET_ID = 1;
  private static final int __BLOOM_FILTER_FPP_ISSET_ID = 2;
  private static final int __IS_IN_MEMORY_ISSET_ID = 3;
  private static final int __ID_ISSET_ID = 4;
  private static final int __SCHEMA_VERSION_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BLOOM_FILTER_FPP,_Fields.INDEXES,_Fields.IS_IN_MEMORY,_Fields.ID,_Fields.SORT_KEY_IDXES,_Fields.SORT_KEY_UNIQUE_IDS,_Fields.SCHEMA_VERSION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SHORT_KEY_COLUMN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("short_key_column_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("schema_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSchemaHash")));
    tmpMap.put(_Fields.KEYS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("keys_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TKeysType.class)));
    tmpMap.put(_Fields.STORAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("storage_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TStorageType.class)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TColumn.class))));
    tmpMap.put(_Fields.BLOOM_FILTER_FPP, new org.apache.thrift.meta_data.FieldMetaData("bloom_filter_fpp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INDEXES, new org.apache.thrift.meta_data.FieldMetaData("indexes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TOlapTableIndex.class))));
    tmpMap.put(_Fields.IS_IN_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("is_in_memory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SORT_KEY_IDXES, new org.apache.thrift.meta_data.FieldMetaData("sort_key_idxes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SORT_KEY_UNIQUE_IDS, new org.apache.thrift.meta_data.FieldMetaData("sort_key_unique_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SCHEMA_VERSION, new org.apache.thrift.meta_data.FieldMetaData("schema_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTabletSchema.class, metaDataMap);
  }

  public TTabletSchema() {
  }

  public TTabletSchema(
    short short_key_column_count,
    int schema_hash,
    com.starrocks.thrift.TKeysType keys_type,
    com.starrocks.thrift.TStorageType storage_type,
    java.util.List<com.starrocks.thrift.TColumn> columns)
  {
    this();
    this.short_key_column_count = short_key_column_count;
    setShort_key_column_countIsSet(true);
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    this.keys_type = keys_type;
    this.storage_type = storage_type;
    this.columns = columns;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTabletSchema(TTabletSchema other) {
    __isset_bitfield = other.__isset_bitfield;
    this.short_key_column_count = other.short_key_column_count;
    this.schema_hash = other.schema_hash;
    if (other.isSetKeys_type()) {
      this.keys_type = other.keys_type;
    }
    if (other.isSetStorage_type()) {
      this.storage_type = other.storage_type;
    }
    if (other.isSetColumns()) {
      java.util.List<com.starrocks.thrift.TColumn> __this__columns = new java.util.ArrayList<com.starrocks.thrift.TColumn>(other.columns.size());
      for (com.starrocks.thrift.TColumn other_element : other.columns) {
        __this__columns.add(new com.starrocks.thrift.TColumn(other_element));
      }
      this.columns = __this__columns;
    }
    this.bloom_filter_fpp = other.bloom_filter_fpp;
    if (other.isSetIndexes()) {
      java.util.List<com.starrocks.thrift.TOlapTableIndex> __this__indexes = new java.util.ArrayList<com.starrocks.thrift.TOlapTableIndex>(other.indexes.size());
      for (com.starrocks.thrift.TOlapTableIndex other_element : other.indexes) {
        __this__indexes.add(new com.starrocks.thrift.TOlapTableIndex(other_element));
      }
      this.indexes = __this__indexes;
    }
    this.is_in_memory = other.is_in_memory;
    this.id = other.id;
    if (other.isSetSort_key_idxes()) {
      java.util.List<java.lang.Integer> __this__sort_key_idxes = new java.util.ArrayList<java.lang.Integer>(other.sort_key_idxes);
      this.sort_key_idxes = __this__sort_key_idxes;
    }
    if (other.isSetSort_key_unique_ids()) {
      java.util.List<java.lang.Integer> __this__sort_key_unique_ids = new java.util.ArrayList<java.lang.Integer>(other.sort_key_unique_ids);
      this.sort_key_unique_ids = __this__sort_key_unique_ids;
    }
    this.schema_version = other.schema_version;
  }

  @Override
  public TTabletSchema deepCopy() {
    return new TTabletSchema(this);
  }

  @Override
  public void clear() {
    setShort_key_column_countIsSet(false);
    this.short_key_column_count = 0;
    setSchema_hashIsSet(false);
    this.schema_hash = 0;
    this.keys_type = null;
    this.storage_type = null;
    this.columns = null;
    setBloom_filter_fppIsSet(false);
    this.bloom_filter_fpp = 0.0;
    this.indexes = null;
    setIs_in_memoryIsSet(false);
    this.is_in_memory = false;
    setIdIsSet(false);
    this.id = 0;
    this.sort_key_idxes = null;
    this.sort_key_unique_ids = null;
    setSchema_versionIsSet(false);
    this.schema_version = 0;
  }

  public short getShort_key_column_count() {
    return this.short_key_column_count;
  }

  public TTabletSchema setShort_key_column_count(short short_key_column_count) {
    this.short_key_column_count = short_key_column_count;
    setShort_key_column_countIsSet(true);
    return this;
  }

  public void unsetShort_key_column_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHORT_KEY_COLUMN_COUNT_ISSET_ID);
  }

  /** Returns true if field short_key_column_count is set (has been assigned a value) and false otherwise */
  public boolean isSetShort_key_column_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHORT_KEY_COLUMN_COUNT_ISSET_ID);
  }

  public void setShort_key_column_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHORT_KEY_COLUMN_COUNT_ISSET_ID, value);
  }

  public int getSchema_hash() {
    return this.schema_hash;
  }

  public TTabletSchema setSchema_hash(int schema_hash) {
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    return this;
  }

  public void unsetSchema_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  public void setSchema_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID, value);
  }

  /**
   * 
   * @see com.starrocks.thrift.TKeysType
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TKeysType getKeys_type() {
    return this.keys_type;
  }

  /**
   * 
   * @see com.starrocks.thrift.TKeysType
   */
  public TTabletSchema setKeys_type(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TKeysType keys_type) {
    this.keys_type = keys_type;
    return this;
  }

  public void unsetKeys_type() {
    this.keys_type = null;
  }

  /** Returns true if field keys_type is set (has been assigned a value) and false otherwise */
  public boolean isSetKeys_type() {
    return this.keys_type != null;
  }

  public void setKeys_typeIsSet(boolean value) {
    if (!value) {
      this.keys_type = null;
    }
  }

  /**
   * 
   * @see com.starrocks.thrift.TStorageType
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TStorageType getStorage_type() {
    return this.storage_type;
  }

  /**
   * 
   * @see com.starrocks.thrift.TStorageType
   */
  public TTabletSchema setStorage_type(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TStorageType storage_type) {
    this.storage_type = storage_type;
    return this;
  }

  public void unsetStorage_type() {
    this.storage_type = null;
  }

  /** Returns true if field storage_type is set (has been assigned a value) and false otherwise */
  public boolean isSetStorage_type() {
    return this.storage_type != null;
  }

  public void setStorage_typeIsSet(boolean value) {
    if (!value) {
      this.storage_type = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(com.starrocks.thrift.TColumn elem) {
    if (this.columns == null) {
      this.columns = new java.util.ArrayList<com.starrocks.thrift.TColumn>();
    }
    this.columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TColumn> getColumns() {
    return this.columns;
  }

  public TTabletSchema setColumns(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TColumn> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public double getBloom_filter_fpp() {
    return this.bloom_filter_fpp;
  }

  public TTabletSchema setBloom_filter_fpp(double bloom_filter_fpp) {
    this.bloom_filter_fpp = bloom_filter_fpp;
    setBloom_filter_fppIsSet(true);
    return this;
  }

  public void unsetBloom_filter_fpp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOOM_FILTER_FPP_ISSET_ID);
  }

  /** Returns true if field bloom_filter_fpp is set (has been assigned a value) and false otherwise */
  public boolean isSetBloom_filter_fpp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOOM_FILTER_FPP_ISSET_ID);
  }

  public void setBloom_filter_fppIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOOM_FILTER_FPP_ISSET_ID, value);
  }

  public int getIndexesSize() {
    return (this.indexes == null) ? 0 : this.indexes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TOlapTableIndex> getIndexesIterator() {
    return (this.indexes == null) ? null : this.indexes.iterator();
  }

  public void addToIndexes(com.starrocks.thrift.TOlapTableIndex elem) {
    if (this.indexes == null) {
      this.indexes = new java.util.ArrayList<com.starrocks.thrift.TOlapTableIndex>();
    }
    this.indexes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TOlapTableIndex> getIndexes() {
    return this.indexes;
  }

  public TTabletSchema setIndexes(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TOlapTableIndex> indexes) {
    this.indexes = indexes;
    return this;
  }

  public void unsetIndexes() {
    this.indexes = null;
  }

  /** Returns true if field indexes is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexes() {
    return this.indexes != null;
  }

  public void setIndexesIsSet(boolean value) {
    if (!value) {
      this.indexes = null;
    }
  }

  public boolean isIs_in_memory() {
    return this.is_in_memory;
  }

  public TTabletSchema setIs_in_memory(boolean is_in_memory) {
    this.is_in_memory = is_in_memory;
    setIs_in_memoryIsSet(true);
    return this;
  }

  public void unsetIs_in_memory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_IN_MEMORY_ISSET_ID);
  }

  /** Returns true if field is_in_memory is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_in_memory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_IN_MEMORY_ISSET_ID);
  }

  public void setIs_in_memoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_IN_MEMORY_ISSET_ID, value);
  }

  public long getId() {
    return this.id;
  }

  public TTabletSchema setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getSort_key_idxesSize() {
    return (this.sort_key_idxes == null) ? 0 : this.sort_key_idxes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getSort_key_idxesIterator() {
    return (this.sort_key_idxes == null) ? null : this.sort_key_idxes.iterator();
  }

  public void addToSort_key_idxes(int elem) {
    if (this.sort_key_idxes == null) {
      this.sort_key_idxes = new java.util.ArrayList<java.lang.Integer>();
    }
    this.sort_key_idxes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getSort_key_idxes() {
    return this.sort_key_idxes;
  }

  public TTabletSchema setSort_key_idxes(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> sort_key_idxes) {
    this.sort_key_idxes = sort_key_idxes;
    return this;
  }

  public void unsetSort_key_idxes() {
    this.sort_key_idxes = null;
  }

  /** Returns true if field sort_key_idxes is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_key_idxes() {
    return this.sort_key_idxes != null;
  }

  public void setSort_key_idxesIsSet(boolean value) {
    if (!value) {
      this.sort_key_idxes = null;
    }
  }

  public int getSort_key_unique_idsSize() {
    return (this.sort_key_unique_ids == null) ? 0 : this.sort_key_unique_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getSort_key_unique_idsIterator() {
    return (this.sort_key_unique_ids == null) ? null : this.sort_key_unique_ids.iterator();
  }

  public void addToSort_key_unique_ids(int elem) {
    if (this.sort_key_unique_ids == null) {
      this.sort_key_unique_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.sort_key_unique_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getSort_key_unique_ids() {
    return this.sort_key_unique_ids;
  }

  public TTabletSchema setSort_key_unique_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> sort_key_unique_ids) {
    this.sort_key_unique_ids = sort_key_unique_ids;
    return this;
  }

  public void unsetSort_key_unique_ids() {
    this.sort_key_unique_ids = null;
  }

  /** Returns true if field sort_key_unique_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_key_unique_ids() {
    return this.sort_key_unique_ids != null;
  }

  public void setSort_key_unique_idsIsSet(boolean value) {
    if (!value) {
      this.sort_key_unique_ids = null;
    }
  }

  public int getSchema_version() {
    return this.schema_version;
  }

  public TTabletSchema setSchema_version(int schema_version) {
    this.schema_version = schema_version;
    setSchema_versionIsSet(true);
    return this;
  }

  public void unsetSchema_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_VERSION_ISSET_ID);
  }

  /** Returns true if field schema_version is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCHEMA_VERSION_ISSET_ID);
  }

  public void setSchema_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCHEMA_VERSION_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SHORT_KEY_COLUMN_COUNT:
      if (value == null) {
        unsetShort_key_column_count();
      } else {
        setShort_key_column_count((java.lang.Short)value);
      }
      break;

    case SCHEMA_HASH:
      if (value == null) {
        unsetSchema_hash();
      } else {
        setSchema_hash((java.lang.Integer)value);
      }
      break;

    case KEYS_TYPE:
      if (value == null) {
        unsetKeys_type();
      } else {
        setKeys_type((com.starrocks.thrift.TKeysType)value);
      }
      break;

    case STORAGE_TYPE:
      if (value == null) {
        unsetStorage_type();
      } else {
        setStorage_type((com.starrocks.thrift.TStorageType)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((java.util.List<com.starrocks.thrift.TColumn>)value);
      }
      break;

    case BLOOM_FILTER_FPP:
      if (value == null) {
        unsetBloom_filter_fpp();
      } else {
        setBloom_filter_fpp((java.lang.Double)value);
      }
      break;

    case INDEXES:
      if (value == null) {
        unsetIndexes();
      } else {
        setIndexes((java.util.List<com.starrocks.thrift.TOlapTableIndex>)value);
      }
      break;

    case IS_IN_MEMORY:
      if (value == null) {
        unsetIs_in_memory();
      } else {
        setIs_in_memory((java.lang.Boolean)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case SORT_KEY_IDXES:
      if (value == null) {
        unsetSort_key_idxes();
      } else {
        setSort_key_idxes((java.util.List<java.lang.Integer>)value);
      }
      break;

    case SORT_KEY_UNIQUE_IDS:
      if (value == null) {
        unsetSort_key_unique_ids();
      } else {
        setSort_key_unique_ids((java.util.List<java.lang.Integer>)value);
      }
      break;

    case SCHEMA_VERSION:
      if (value == null) {
        unsetSchema_version();
      } else {
        setSchema_version((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SHORT_KEY_COLUMN_COUNT:
      return getShort_key_column_count();

    case SCHEMA_HASH:
      return getSchema_hash();

    case KEYS_TYPE:
      return getKeys_type();

    case STORAGE_TYPE:
      return getStorage_type();

    case COLUMNS:
      return getColumns();

    case BLOOM_FILTER_FPP:
      return getBloom_filter_fpp();

    case INDEXES:
      return getIndexes();

    case IS_IN_MEMORY:
      return isIs_in_memory();

    case ID:
      return getId();

    case SORT_KEY_IDXES:
      return getSort_key_idxes();

    case SORT_KEY_UNIQUE_IDS:
      return getSort_key_unique_ids();

    case SCHEMA_VERSION:
      return getSchema_version();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SHORT_KEY_COLUMN_COUNT:
      return isSetShort_key_column_count();
    case SCHEMA_HASH:
      return isSetSchema_hash();
    case KEYS_TYPE:
      return isSetKeys_type();
    case STORAGE_TYPE:
      return isSetStorage_type();
    case COLUMNS:
      return isSetColumns();
    case BLOOM_FILTER_FPP:
      return isSetBloom_filter_fpp();
    case INDEXES:
      return isSetIndexes();
    case IS_IN_MEMORY:
      return isSetIs_in_memory();
    case ID:
      return isSetId();
    case SORT_KEY_IDXES:
      return isSetSort_key_idxes();
    case SORT_KEY_UNIQUE_IDS:
      return isSetSort_key_unique_ids();
    case SCHEMA_VERSION:
      return isSetSchema_version();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTabletSchema)
      return this.equals((TTabletSchema)that);
    return false;
  }

  public boolean equals(TTabletSchema that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_short_key_column_count = true;
    boolean that_present_short_key_column_count = true;
    if (this_present_short_key_column_count || that_present_short_key_column_count) {
      if (!(this_present_short_key_column_count && that_present_short_key_column_count))
        return false;
      if (this.short_key_column_count != that.short_key_column_count)
        return false;
    }

    boolean this_present_schema_hash = true;
    boolean that_present_schema_hash = true;
    if (this_present_schema_hash || that_present_schema_hash) {
      if (!(this_present_schema_hash && that_present_schema_hash))
        return false;
      if (this.schema_hash != that.schema_hash)
        return false;
    }

    boolean this_present_keys_type = true && this.isSetKeys_type();
    boolean that_present_keys_type = true && that.isSetKeys_type();
    if (this_present_keys_type || that_present_keys_type) {
      if (!(this_present_keys_type && that_present_keys_type))
        return false;
      if (!this.keys_type.equals(that.keys_type))
        return false;
    }

    boolean this_present_storage_type = true && this.isSetStorage_type();
    boolean that_present_storage_type = true && that.isSetStorage_type();
    if (this_present_storage_type || that_present_storage_type) {
      if (!(this_present_storage_type && that_present_storage_type))
        return false;
      if (!this.storage_type.equals(that.storage_type))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_bloom_filter_fpp = true && this.isSetBloom_filter_fpp();
    boolean that_present_bloom_filter_fpp = true && that.isSetBloom_filter_fpp();
    if (this_present_bloom_filter_fpp || that_present_bloom_filter_fpp) {
      if (!(this_present_bloom_filter_fpp && that_present_bloom_filter_fpp))
        return false;
      if (this.bloom_filter_fpp != that.bloom_filter_fpp)
        return false;
    }

    boolean this_present_indexes = true && this.isSetIndexes();
    boolean that_present_indexes = true && that.isSetIndexes();
    if (this_present_indexes || that_present_indexes) {
      if (!(this_present_indexes && that_present_indexes))
        return false;
      if (!this.indexes.equals(that.indexes))
        return false;
    }

    boolean this_present_is_in_memory = true && this.isSetIs_in_memory();
    boolean that_present_is_in_memory = true && that.isSetIs_in_memory();
    if (this_present_is_in_memory || that_present_is_in_memory) {
      if (!(this_present_is_in_memory && that_present_is_in_memory))
        return false;
      if (this.is_in_memory != that.is_in_memory)
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_sort_key_idxes = true && this.isSetSort_key_idxes();
    boolean that_present_sort_key_idxes = true && that.isSetSort_key_idxes();
    if (this_present_sort_key_idxes || that_present_sort_key_idxes) {
      if (!(this_present_sort_key_idxes && that_present_sort_key_idxes))
        return false;
      if (!this.sort_key_idxes.equals(that.sort_key_idxes))
        return false;
    }

    boolean this_present_sort_key_unique_ids = true && this.isSetSort_key_unique_ids();
    boolean that_present_sort_key_unique_ids = true && that.isSetSort_key_unique_ids();
    if (this_present_sort_key_unique_ids || that_present_sort_key_unique_ids) {
      if (!(this_present_sort_key_unique_ids && that_present_sort_key_unique_ids))
        return false;
      if (!this.sort_key_unique_ids.equals(that.sort_key_unique_ids))
        return false;
    }

    boolean this_present_schema_version = true && this.isSetSchema_version();
    boolean that_present_schema_version = true && that.isSetSchema_version();
    if (this_present_schema_version || that_present_schema_version) {
      if (!(this_present_schema_version && that_present_schema_version))
        return false;
      if (this.schema_version != that.schema_version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + short_key_column_count;

    hashCode = hashCode * 8191 + schema_hash;

    hashCode = hashCode * 8191 + ((isSetKeys_type()) ? 131071 : 524287);
    if (isSetKeys_type())
      hashCode = hashCode * 8191 + keys_type.getValue();

    hashCode = hashCode * 8191 + ((isSetStorage_type()) ? 131071 : 524287);
    if (isSetStorage_type())
      hashCode = hashCode * 8191 + storage_type.getValue();

    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
    if (isSetColumns())
      hashCode = hashCode * 8191 + columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetBloom_filter_fpp()) ? 131071 : 524287);
    if (isSetBloom_filter_fpp())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bloom_filter_fpp);

    hashCode = hashCode * 8191 + ((isSetIndexes()) ? 131071 : 524287);
    if (isSetIndexes())
      hashCode = hashCode * 8191 + indexes.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_in_memory()) ? 131071 : 524287);
    if (isSetIs_in_memory())
      hashCode = hashCode * 8191 + ((is_in_memory) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetSort_key_idxes()) ? 131071 : 524287);
    if (isSetSort_key_idxes())
      hashCode = hashCode * 8191 + sort_key_idxes.hashCode();

    hashCode = hashCode * 8191 + ((isSetSort_key_unique_ids()) ? 131071 : 524287);
    if (isSetSort_key_unique_ids())
      hashCode = hashCode * 8191 + sort_key_unique_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchema_version()) ? 131071 : 524287);
    if (isSetSchema_version())
      hashCode = hashCode * 8191 + schema_version;

    return hashCode;
  }

  @Override
  public int compareTo(TTabletSchema other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetShort_key_column_count(), other.isSetShort_key_column_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShort_key_column_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.short_key_column_count, other.short_key_column_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchema_hash(), other.isSetSchema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_hash, other.schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKeys_type(), other.isSetKeys_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeys_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys_type, other.keys_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStorage_type(), other.isSetStorage_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorage_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_type, other.storage_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBloom_filter_fpp(), other.isSetBloom_filter_fpp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBloom_filter_fpp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloom_filter_fpp, other.bloom_filter_fpp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIndexes(), other.isSetIndexes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexes, other.indexes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_in_memory(), other.isSetIs_in_memory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_in_memory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_in_memory, other.is_in_memory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSort_key_idxes(), other.isSetSort_key_idxes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_key_idxes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_key_idxes, other.sort_key_idxes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSort_key_unique_ids(), other.isSetSort_key_unique_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_key_unique_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_key_unique_ids, other.sort_key_unique_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchema_version(), other.isSetSchema_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_version, other.schema_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTabletSchema(");
    boolean first = true;

    sb.append("short_key_column_count:");
    sb.append(this.short_key_column_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("schema_hash:");
    sb.append(this.schema_hash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("keys_type:");
    if (this.keys_type == null) {
      sb.append("null");
    } else {
      sb.append(this.keys_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("storage_type:");
    if (this.storage_type == null) {
      sb.append("null");
    } else {
      sb.append(this.storage_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columns:");
    if (this.columns == null) {
      sb.append("null");
    } else {
      sb.append(this.columns);
    }
    first = false;
    if (isSetBloom_filter_fpp()) {
      if (!first) sb.append(", ");
      sb.append("bloom_filter_fpp:");
      sb.append(this.bloom_filter_fpp);
      first = false;
    }
    if (isSetIndexes()) {
      if (!first) sb.append(", ");
      sb.append("indexes:");
      if (this.indexes == null) {
        sb.append("null");
      } else {
        sb.append(this.indexes);
      }
      first = false;
    }
    if (isSetIs_in_memory()) {
      if (!first) sb.append(", ");
      sb.append("is_in_memory:");
      sb.append(this.is_in_memory);
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetSort_key_idxes()) {
      if (!first) sb.append(", ");
      sb.append("sort_key_idxes:");
      if (this.sort_key_idxes == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_key_idxes);
      }
      first = false;
    }
    if (isSetSort_key_unique_ids()) {
      if (!first) sb.append(", ");
      sb.append("sort_key_unique_ids:");
      if (this.sort_key_unique_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_key_unique_ids);
      }
      first = false;
    }
    if (isSetSchema_version()) {
      if (!first) sb.append(", ");
      sb.append("schema_version:");
      sb.append(this.schema_version);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'short_key_column_count' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'schema_hash' because it's a primitive and you chose the non-beans generator.
    if (keys_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'keys_type' was not present! Struct: " + toString());
    }
    if (storage_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'storage_type' was not present! Struct: " + toString());
    }
    if (columns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTabletSchemaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTabletSchemaStandardScheme getScheme() {
      return new TTabletSchemaStandardScheme();
    }
  }

  private static class TTabletSchemaStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTabletSchema> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTabletSchema struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SHORT_KEY_COLUMN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.short_key_column_count = iprot.readI16();
              struct.setShort_key_column_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schema_hash = iprot.readI32();
              struct.setSchema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEYS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.keys_type = com.starrocks.thrift.TKeysType.findByValue(iprot.readI32());
              struct.setKeys_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STORAGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.storage_type = com.starrocks.thrift.TStorageType.findByValue(iprot.readI32());
              struct.setStorage_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.columns = new java.util.ArrayList<com.starrocks.thrift.TColumn>(_list0.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TColumn _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.starrocks.thrift.TColumn();
                  _elem1.read(iprot);
                  struct.columns.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BLOOM_FILTER_FPP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bloom_filter_fpp = iprot.readDouble();
              struct.setBloom_filter_fppIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INDEXES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.indexes = new java.util.ArrayList<com.starrocks.thrift.TOlapTableIndex>(_list3.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TOlapTableIndex _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new com.starrocks.thrift.TOlapTableIndex();
                  _elem4.read(iprot);
                  struct.indexes.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setIndexesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_IN_MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_in_memory = iprot.readBool();
              struct.setIs_in_memoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SORT_KEY_IDXES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.sort_key_idxes = new java.util.ArrayList<java.lang.Integer>(_list6.size);
                int _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI32();
                  struct.sort_key_idxes.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setSort_key_idxesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SORT_KEY_UNIQUE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.sort_key_unique_ids = new java.util.ArrayList<java.lang.Integer>(_list9.size);
                int _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readI32();
                  struct.sort_key_unique_ids.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setSort_key_unique_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SCHEMA_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schema_version = iprot.readI32();
              struct.setSchema_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetShort_key_column_count()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'short_key_column_count' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSchema_hash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'schema_hash' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTabletSchema struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SHORT_KEY_COLUMN_COUNT_FIELD_DESC);
      oprot.writeI16(struct.short_key_column_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHEMA_HASH_FIELD_DESC);
      oprot.writeI32(struct.schema_hash);
      oprot.writeFieldEnd();
      if (struct.keys_type != null) {
        oprot.writeFieldBegin(KEYS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.keys_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.storage_type != null) {
        oprot.writeFieldBegin(STORAGE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.storage_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.columns != null) {
        oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
          for (com.starrocks.thrift.TColumn _iter12 : struct.columns)
          {
            _iter12.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetBloom_filter_fpp()) {
        oprot.writeFieldBegin(BLOOM_FILTER_FPP_FIELD_DESC);
        oprot.writeDouble(struct.bloom_filter_fpp);
        oprot.writeFieldEnd();
      }
      if (struct.indexes != null) {
        if (struct.isSetIndexes()) {
          oprot.writeFieldBegin(INDEXES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.indexes.size()));
            for (com.starrocks.thrift.TOlapTableIndex _iter13 : struct.indexes)
            {
              _iter13.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_in_memory()) {
        oprot.writeFieldBegin(IS_IN_MEMORY_FIELD_DESC);
        oprot.writeBool(struct.is_in_memory);
        oprot.writeFieldEnd();
      }
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.sort_key_idxes != null) {
        if (struct.isSetSort_key_idxes()) {
          oprot.writeFieldBegin(SORT_KEY_IDXES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sort_key_idxes.size()));
            for (int _iter14 : struct.sort_key_idxes)
            {
              oprot.writeI32(_iter14);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sort_key_unique_ids != null) {
        if (struct.isSetSort_key_unique_ids()) {
          oprot.writeFieldBegin(SORT_KEY_UNIQUE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sort_key_unique_ids.size()));
            for (int _iter15 : struct.sort_key_unique_ids)
            {
              oprot.writeI32(_iter15);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSchema_version()) {
        oprot.writeFieldBegin(SCHEMA_VERSION_FIELD_DESC);
        oprot.writeI32(struct.schema_version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTabletSchemaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTabletSchemaTupleScheme getScheme() {
      return new TTabletSchemaTupleScheme();
    }
  }

  private static class TTabletSchemaTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTabletSchema> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTabletSchema struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI16(struct.short_key_column_count);
      oprot.writeI32(struct.schema_hash);
      oprot.writeI32(struct.keys_type.getValue());
      oprot.writeI32(struct.storage_type.getValue());
      {
        oprot.writeI32(struct.columns.size());
        for (com.starrocks.thrift.TColumn _iter16 : struct.columns)
        {
          _iter16.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBloom_filter_fpp()) {
        optionals.set(0);
      }
      if (struct.isSetIndexes()) {
        optionals.set(1);
      }
      if (struct.isSetIs_in_memory()) {
        optionals.set(2);
      }
      if (struct.isSetId()) {
        optionals.set(3);
      }
      if (struct.isSetSort_key_idxes()) {
        optionals.set(4);
      }
      if (struct.isSetSort_key_unique_ids()) {
        optionals.set(5);
      }
      if (struct.isSetSchema_version()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetBloom_filter_fpp()) {
        oprot.writeDouble(struct.bloom_filter_fpp);
      }
      if (struct.isSetIndexes()) {
        {
          oprot.writeI32(struct.indexes.size());
          for (com.starrocks.thrift.TOlapTableIndex _iter17 : struct.indexes)
          {
            _iter17.write(oprot);
          }
        }
      }
      if (struct.isSetIs_in_memory()) {
        oprot.writeBool(struct.is_in_memory);
      }
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetSort_key_idxes()) {
        {
          oprot.writeI32(struct.sort_key_idxes.size());
          for (int _iter18 : struct.sort_key_idxes)
          {
            oprot.writeI32(_iter18);
          }
        }
      }
      if (struct.isSetSort_key_unique_ids()) {
        {
          oprot.writeI32(struct.sort_key_unique_ids.size());
          for (int _iter19 : struct.sort_key_unique_ids)
          {
            oprot.writeI32(_iter19);
          }
        }
      }
      if (struct.isSetSchema_version()) {
        oprot.writeI32(struct.schema_version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTabletSchema struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.short_key_column_count = iprot.readI16();
      struct.setShort_key_column_countIsSet(true);
      struct.schema_hash = iprot.readI32();
      struct.setSchema_hashIsSet(true);
      struct.keys_type = com.starrocks.thrift.TKeysType.findByValue(iprot.readI32());
      struct.setKeys_typeIsSet(true);
      struct.storage_type = com.starrocks.thrift.TStorageType.findByValue(iprot.readI32());
      struct.setStorage_typeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list20 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.columns = new java.util.ArrayList<com.starrocks.thrift.TColumn>(_list20.size);
        @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TColumn _elem21;
        for (int _i22 = 0; _i22 < _list20.size; ++_i22)
        {
          _elem21 = new com.starrocks.thrift.TColumn();
          _elem21.read(iprot);
          struct.columns.add(_elem21);
        }
      }
      struct.setColumnsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.bloom_filter_fpp = iprot.readDouble();
        struct.setBloom_filter_fppIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list23 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.indexes = new java.util.ArrayList<com.starrocks.thrift.TOlapTableIndex>(_list23.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TOlapTableIndex _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = new com.starrocks.thrift.TOlapTableIndex();
            _elem24.read(iprot);
            struct.indexes.add(_elem24);
          }
        }
        struct.setIndexesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.is_in_memory = iprot.readBool();
        struct.setIs_in_memoryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list26 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.sort_key_idxes = new java.util.ArrayList<java.lang.Integer>(_list26.size);
          int _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = iprot.readI32();
            struct.sort_key_idxes.add(_elem27);
          }
        }
        struct.setSort_key_idxesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.sort_key_unique_ids = new java.util.ArrayList<java.lang.Integer>(_list29.size);
          int _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readI32();
            struct.sort_key_unique_ids.add(_elem30);
          }
        }
        struct.setSort_key_unique_idsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.schema_version = iprot.readI32();
        struct.setSchema_versionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

