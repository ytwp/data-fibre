/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields>, java.io.Serializable, Cloneable, Comparable<TColumn> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumn");

  private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("column_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("column_type", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregation_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_key", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_ALLOW_NULL_FIELD_DESC = new org.apache.thrift.protocol.TField("is_allow_null", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField DEFAULT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("default_value", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IS_BLOOM_FILTER_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("is_bloom_filter_column", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField DEFINE_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("define_expr", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField IS_AUTO_INCREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_auto_increment", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField COL_UNIQUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("col_unique_id", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField HAS_BITMAP_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("has_bitmap_index", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField INDEX_LEN_FIELD_DESC = new org.apache.thrift.protocol.TField("index_len", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField TYPE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("type_desc", org.apache.thrift.protocol.TType.STRUCT, (short)21);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TColumnStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TColumnTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String column_name; // required
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TColumnType column_type; // optional
  /**
   * 
   * @see com.starrocks.thrift.TAggregationType
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TAggregationType aggregation_type; // optional
  public boolean is_key; // optional
  public boolean is_allow_null; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String default_value; // optional
  public boolean is_bloom_filter_column; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr define_expr; // optional
  public boolean is_auto_increment; // optional
  public int col_unique_id; // optional
  public boolean has_bitmap_index; // optional
  public int index_len; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTypeDesc type_desc; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_NAME((short)1, "column_name"),
    COLUMN_TYPE((short)2, "column_type"),
    /**
     * 
     * @see com.starrocks.thrift.TAggregationType
     */
    AGGREGATION_TYPE((short)3, "aggregation_type"),
    IS_KEY((short)4, "is_key"),
    IS_ALLOW_NULL((short)5, "is_allow_null"),
    DEFAULT_VALUE((short)6, "default_value"),
    IS_BLOOM_FILTER_COLUMN((short)7, "is_bloom_filter_column"),
    DEFINE_EXPR((short)8, "define_expr"),
    IS_AUTO_INCREMENT((short)9, "is_auto_increment"),
    COL_UNIQUE_ID((short)10, "col_unique_id"),
    HAS_BITMAP_INDEX((short)11, "has_bitmap_index"),
    INDEX_LEN((short)20, "index_len"),
    TYPE_DESC((short)21, "type_desc");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_NAME
          return COLUMN_NAME;
        case 2: // COLUMN_TYPE
          return COLUMN_TYPE;
        case 3: // AGGREGATION_TYPE
          return AGGREGATION_TYPE;
        case 4: // IS_KEY
          return IS_KEY;
        case 5: // IS_ALLOW_NULL
          return IS_ALLOW_NULL;
        case 6: // DEFAULT_VALUE
          return DEFAULT_VALUE;
        case 7: // IS_BLOOM_FILTER_COLUMN
          return IS_BLOOM_FILTER_COLUMN;
        case 8: // DEFINE_EXPR
          return DEFINE_EXPR;
        case 9: // IS_AUTO_INCREMENT
          return IS_AUTO_INCREMENT;
        case 10: // COL_UNIQUE_ID
          return COL_UNIQUE_ID;
        case 11: // HAS_BITMAP_INDEX
          return HAS_BITMAP_INDEX;
        case 20: // INDEX_LEN
          return INDEX_LEN;
        case 21: // TYPE_DESC
          return TYPE_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_KEY_ISSET_ID = 0;
  private static final int __IS_ALLOW_NULL_ISSET_ID = 1;
  private static final int __IS_BLOOM_FILTER_COLUMN_ISSET_ID = 2;
  private static final int __IS_AUTO_INCREMENT_ISSET_ID = 3;
  private static final int __COL_UNIQUE_ID_ISSET_ID = 4;
  private static final int __HAS_BITMAP_INDEX_ISSET_ID = 5;
  private static final int __INDEX_LEN_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COLUMN_TYPE,_Fields.AGGREGATION_TYPE,_Fields.IS_KEY,_Fields.IS_ALLOW_NULL,_Fields.DEFAULT_VALUE,_Fields.IS_BLOOM_FILTER_COLUMN,_Fields.DEFINE_EXPR,_Fields.IS_AUTO_INCREMENT,_Fields.COL_UNIQUE_ID,_Fields.HAS_BITMAP_INDEX,_Fields.INDEX_LEN,_Fields.TYPE_DESC};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("column_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("column_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TColumnType.class)));
    tmpMap.put(_Fields.AGGREGATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aggregation_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TAggregationType.class)));
    tmpMap.put(_Fields.IS_KEY, new org.apache.thrift.meta_data.FieldMetaData("is_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ALLOW_NULL, new org.apache.thrift.meta_data.FieldMetaData("is_allow_null", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("default_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_BLOOM_FILTER_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("is_bloom_filter_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFINE_EXPR, new org.apache.thrift.meta_data.FieldMetaData("define_expr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class)));
    tmpMap.put(_Fields.IS_AUTO_INCREMENT, new org.apache.thrift.meta_data.FieldMetaData("is_auto_increment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COL_UNIQUE_ID, new org.apache.thrift.meta_data.FieldMetaData("col_unique_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_BITMAP_INDEX, new org.apache.thrift.meta_data.FieldMetaData("has_bitmap_index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INDEX_LEN, new org.apache.thrift.meta_data.FieldMetaData("index_len", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE_DESC, new org.apache.thrift.meta_data.FieldMetaData("type_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TTypeDesc.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumn.class, metaDataMap);
  }

  public TColumn() {
    this.col_unique_id = -1;

    this.has_bitmap_index = false;

  }

  public TColumn(
    java.lang.String column_name)
  {
    this();
    this.column_name = column_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TColumn(TColumn other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetColumn_name()) {
      this.column_name = other.column_name;
    }
    if (other.isSetColumn_type()) {
      this.column_type = new com.starrocks.thrift.TColumnType(other.column_type);
    }
    if (other.isSetAggregation_type()) {
      this.aggregation_type = other.aggregation_type;
    }
    this.is_key = other.is_key;
    this.is_allow_null = other.is_allow_null;
    if (other.isSetDefault_value()) {
      this.default_value = other.default_value;
    }
    this.is_bloom_filter_column = other.is_bloom_filter_column;
    if (other.isSetDefine_expr()) {
      this.define_expr = new com.starrocks.thrift.TExpr(other.define_expr);
    }
    this.is_auto_increment = other.is_auto_increment;
    this.col_unique_id = other.col_unique_id;
    this.has_bitmap_index = other.has_bitmap_index;
    this.index_len = other.index_len;
    if (other.isSetType_desc()) {
      this.type_desc = new com.starrocks.thrift.TTypeDesc(other.type_desc);
    }
  }

  @Override
  public TColumn deepCopy() {
    return new TColumn(this);
  }

  @Override
  public void clear() {
    this.column_name = null;
    this.column_type = null;
    this.aggregation_type = null;
    setIs_keyIsSet(false);
    this.is_key = false;
    setIs_allow_nullIsSet(false);
    this.is_allow_null = false;
    this.default_value = null;
    setIs_bloom_filter_columnIsSet(false);
    this.is_bloom_filter_column = false;
    this.define_expr = null;
    setIs_auto_incrementIsSet(false);
    this.is_auto_increment = false;
    this.col_unique_id = -1;

    this.has_bitmap_index = false;

    setIndex_lenIsSet(false);
    this.index_len = 0;
    this.type_desc = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumn_name() {
    return this.column_name;
  }

  public TColumn setColumn_name(@org.apache.thrift.annotation.Nullable java.lang.String column_name) {
    this.column_name = column_name;
    return this;
  }

  public void unsetColumn_name() {
    this.column_name = null;
  }

  /** Returns true if field column_name is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_name() {
    return this.column_name != null;
  }

  public void setColumn_nameIsSet(boolean value) {
    if (!value) {
      this.column_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TColumnType getColumn_type() {
    return this.column_type;
  }

  public TColumn setColumn_type(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TColumnType column_type) {
    this.column_type = column_type;
    return this;
  }

  public void unsetColumn_type() {
    this.column_type = null;
  }

  /** Returns true if field column_type is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_type() {
    return this.column_type != null;
  }

  public void setColumn_typeIsSet(boolean value) {
    if (!value) {
      this.column_type = null;
    }
  }

  /**
   * 
   * @see com.starrocks.thrift.TAggregationType
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TAggregationType getAggregation_type() {
    return this.aggregation_type;
  }

  /**
   * 
   * @see com.starrocks.thrift.TAggregationType
   */
  public TColumn setAggregation_type(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TAggregationType aggregation_type) {
    this.aggregation_type = aggregation_type;
    return this;
  }

  public void unsetAggregation_type() {
    this.aggregation_type = null;
  }

  /** Returns true if field aggregation_type is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregation_type() {
    return this.aggregation_type != null;
  }

  public void setAggregation_typeIsSet(boolean value) {
    if (!value) {
      this.aggregation_type = null;
    }
  }

  public boolean isIs_key() {
    return this.is_key;
  }

  public TColumn setIs_key(boolean is_key) {
    this.is_key = is_key;
    setIs_keyIsSet(true);
    return this;
  }

  public void unsetIs_key() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_KEY_ISSET_ID);
  }

  /** Returns true if field is_key is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_key() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_KEY_ISSET_ID);
  }

  public void setIs_keyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_KEY_ISSET_ID, value);
  }

  public boolean isIs_allow_null() {
    return this.is_allow_null;
  }

  public TColumn setIs_allow_null(boolean is_allow_null) {
    this.is_allow_null = is_allow_null;
    setIs_allow_nullIsSet(true);
    return this;
  }

  public void unsetIs_allow_null() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_ALLOW_NULL_ISSET_ID);
  }

  /** Returns true if field is_allow_null is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_allow_null() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_ALLOW_NULL_ISSET_ID);
  }

  public void setIs_allow_nullIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_ALLOW_NULL_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDefault_value() {
    return this.default_value;
  }

  public TColumn setDefault_value(@org.apache.thrift.annotation.Nullable java.lang.String default_value) {
    this.default_value = default_value;
    return this;
  }

  public void unsetDefault_value() {
    this.default_value = null;
  }

  /** Returns true if field default_value is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_value() {
    return this.default_value != null;
  }

  public void setDefault_valueIsSet(boolean value) {
    if (!value) {
      this.default_value = null;
    }
  }

  public boolean isIs_bloom_filter_column() {
    return this.is_bloom_filter_column;
  }

  public TColumn setIs_bloom_filter_column(boolean is_bloom_filter_column) {
    this.is_bloom_filter_column = is_bloom_filter_column;
    setIs_bloom_filter_columnIsSet(true);
    return this;
  }

  public void unsetIs_bloom_filter_column() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_BLOOM_FILTER_COLUMN_ISSET_ID);
  }

  /** Returns true if field is_bloom_filter_column is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_bloom_filter_column() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_BLOOM_FILTER_COLUMN_ISSET_ID);
  }

  public void setIs_bloom_filter_columnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_BLOOM_FILTER_COLUMN_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TExpr getDefine_expr() {
    return this.define_expr;
  }

  public TColumn setDefine_expr(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr define_expr) {
    this.define_expr = define_expr;
    return this;
  }

  public void unsetDefine_expr() {
    this.define_expr = null;
  }

  /** Returns true if field define_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetDefine_expr() {
    return this.define_expr != null;
  }

  public void setDefine_exprIsSet(boolean value) {
    if (!value) {
      this.define_expr = null;
    }
  }

  public boolean isIs_auto_increment() {
    return this.is_auto_increment;
  }

  public TColumn setIs_auto_increment(boolean is_auto_increment) {
    this.is_auto_increment = is_auto_increment;
    setIs_auto_incrementIsSet(true);
    return this;
  }

  public void unsetIs_auto_increment() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_AUTO_INCREMENT_ISSET_ID);
  }

  /** Returns true if field is_auto_increment is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_auto_increment() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_AUTO_INCREMENT_ISSET_ID);
  }

  public void setIs_auto_incrementIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_AUTO_INCREMENT_ISSET_ID, value);
  }

  public int getCol_unique_id() {
    return this.col_unique_id;
  }

  public TColumn setCol_unique_id(int col_unique_id) {
    this.col_unique_id = col_unique_id;
    setCol_unique_idIsSet(true);
    return this;
  }

  public void unsetCol_unique_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COL_UNIQUE_ID_ISSET_ID);
  }

  /** Returns true if field col_unique_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCol_unique_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COL_UNIQUE_ID_ISSET_ID);
  }

  public void setCol_unique_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COL_UNIQUE_ID_ISSET_ID, value);
  }

  public boolean isHas_bitmap_index() {
    return this.has_bitmap_index;
  }

  public TColumn setHas_bitmap_index(boolean has_bitmap_index) {
    this.has_bitmap_index = has_bitmap_index;
    setHas_bitmap_indexIsSet(true);
    return this;
  }

  public void unsetHas_bitmap_index() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HAS_BITMAP_INDEX_ISSET_ID);
  }

  /** Returns true if field has_bitmap_index is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_bitmap_index() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HAS_BITMAP_INDEX_ISSET_ID);
  }

  public void setHas_bitmap_indexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HAS_BITMAP_INDEX_ISSET_ID, value);
  }

  public int getIndex_len() {
    return this.index_len;
  }

  public TColumn setIndex_len(int index_len) {
    this.index_len = index_len;
    setIndex_lenIsSet(true);
    return this;
  }

  public void unsetIndex_len() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_LEN_ISSET_ID);
  }

  /** Returns true if field index_len is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_len() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_LEN_ISSET_ID);
  }

  public void setIndex_lenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_LEN_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TTypeDesc getType_desc() {
    return this.type_desc;
  }

  public TColumn setType_desc(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTypeDesc type_desc) {
    this.type_desc = type_desc;
    return this;
  }

  public void unsetType_desc() {
    this.type_desc = null;
  }

  /** Returns true if field type_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetType_desc() {
    return this.type_desc != null;
  }

  public void setType_descIsSet(boolean value) {
    if (!value) {
      this.type_desc = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COLUMN_NAME:
      if (value == null) {
        unsetColumn_name();
      } else {
        setColumn_name((java.lang.String)value);
      }
      break;

    case COLUMN_TYPE:
      if (value == null) {
        unsetColumn_type();
      } else {
        setColumn_type((com.starrocks.thrift.TColumnType)value);
      }
      break;

    case AGGREGATION_TYPE:
      if (value == null) {
        unsetAggregation_type();
      } else {
        setAggregation_type((com.starrocks.thrift.TAggregationType)value);
      }
      break;

    case IS_KEY:
      if (value == null) {
        unsetIs_key();
      } else {
        setIs_key((java.lang.Boolean)value);
      }
      break;

    case IS_ALLOW_NULL:
      if (value == null) {
        unsetIs_allow_null();
      } else {
        setIs_allow_null((java.lang.Boolean)value);
      }
      break;

    case DEFAULT_VALUE:
      if (value == null) {
        unsetDefault_value();
      } else {
        setDefault_value((java.lang.String)value);
      }
      break;

    case IS_BLOOM_FILTER_COLUMN:
      if (value == null) {
        unsetIs_bloom_filter_column();
      } else {
        setIs_bloom_filter_column((java.lang.Boolean)value);
      }
      break;

    case DEFINE_EXPR:
      if (value == null) {
        unsetDefine_expr();
      } else {
        setDefine_expr((com.starrocks.thrift.TExpr)value);
      }
      break;

    case IS_AUTO_INCREMENT:
      if (value == null) {
        unsetIs_auto_increment();
      } else {
        setIs_auto_increment((java.lang.Boolean)value);
      }
      break;

    case COL_UNIQUE_ID:
      if (value == null) {
        unsetCol_unique_id();
      } else {
        setCol_unique_id((java.lang.Integer)value);
      }
      break;

    case HAS_BITMAP_INDEX:
      if (value == null) {
        unsetHas_bitmap_index();
      } else {
        setHas_bitmap_index((java.lang.Boolean)value);
      }
      break;

    case INDEX_LEN:
      if (value == null) {
        unsetIndex_len();
      } else {
        setIndex_len((java.lang.Integer)value);
      }
      break;

    case TYPE_DESC:
      if (value == null) {
        unsetType_desc();
      } else {
        setType_desc((com.starrocks.thrift.TTypeDesc)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_NAME:
      return getColumn_name();

    case COLUMN_TYPE:
      return getColumn_type();

    case AGGREGATION_TYPE:
      return getAggregation_type();

    case IS_KEY:
      return isIs_key();

    case IS_ALLOW_NULL:
      return isIs_allow_null();

    case DEFAULT_VALUE:
      return getDefault_value();

    case IS_BLOOM_FILTER_COLUMN:
      return isIs_bloom_filter_column();

    case DEFINE_EXPR:
      return getDefine_expr();

    case IS_AUTO_INCREMENT:
      return isIs_auto_increment();

    case COL_UNIQUE_ID:
      return getCol_unique_id();

    case HAS_BITMAP_INDEX:
      return isHas_bitmap_index();

    case INDEX_LEN:
      return getIndex_len();

    case TYPE_DESC:
      return getType_desc();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_NAME:
      return isSetColumn_name();
    case COLUMN_TYPE:
      return isSetColumn_type();
    case AGGREGATION_TYPE:
      return isSetAggregation_type();
    case IS_KEY:
      return isSetIs_key();
    case IS_ALLOW_NULL:
      return isSetIs_allow_null();
    case DEFAULT_VALUE:
      return isSetDefault_value();
    case IS_BLOOM_FILTER_COLUMN:
      return isSetIs_bloom_filter_column();
    case DEFINE_EXPR:
      return isSetDefine_expr();
    case IS_AUTO_INCREMENT:
      return isSetIs_auto_increment();
    case COL_UNIQUE_ID:
      return isSetCol_unique_id();
    case HAS_BITMAP_INDEX:
      return isSetHas_bitmap_index();
    case INDEX_LEN:
      return isSetIndex_len();
    case TYPE_DESC:
      return isSetType_desc();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TColumn)
      return this.equals((TColumn)that);
    return false;
  }

  public boolean equals(TColumn that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_column_name = true && this.isSetColumn_name();
    boolean that_present_column_name = true && that.isSetColumn_name();
    if (this_present_column_name || that_present_column_name) {
      if (!(this_present_column_name && that_present_column_name))
        return false;
      if (!this.column_name.equals(that.column_name))
        return false;
    }

    boolean this_present_column_type = true && this.isSetColumn_type();
    boolean that_present_column_type = true && that.isSetColumn_type();
    if (this_present_column_type || that_present_column_type) {
      if (!(this_present_column_type && that_present_column_type))
        return false;
      if (!this.column_type.equals(that.column_type))
        return false;
    }

    boolean this_present_aggregation_type = true && this.isSetAggregation_type();
    boolean that_present_aggregation_type = true && that.isSetAggregation_type();
    if (this_present_aggregation_type || that_present_aggregation_type) {
      if (!(this_present_aggregation_type && that_present_aggregation_type))
        return false;
      if (!this.aggregation_type.equals(that.aggregation_type))
        return false;
    }

    boolean this_present_is_key = true && this.isSetIs_key();
    boolean that_present_is_key = true && that.isSetIs_key();
    if (this_present_is_key || that_present_is_key) {
      if (!(this_present_is_key && that_present_is_key))
        return false;
      if (this.is_key != that.is_key)
        return false;
    }

    boolean this_present_is_allow_null = true && this.isSetIs_allow_null();
    boolean that_present_is_allow_null = true && that.isSetIs_allow_null();
    if (this_present_is_allow_null || that_present_is_allow_null) {
      if (!(this_present_is_allow_null && that_present_is_allow_null))
        return false;
      if (this.is_allow_null != that.is_allow_null)
        return false;
    }

    boolean this_present_default_value = true && this.isSetDefault_value();
    boolean that_present_default_value = true && that.isSetDefault_value();
    if (this_present_default_value || that_present_default_value) {
      if (!(this_present_default_value && that_present_default_value))
        return false;
      if (!this.default_value.equals(that.default_value))
        return false;
    }

    boolean this_present_is_bloom_filter_column = true && this.isSetIs_bloom_filter_column();
    boolean that_present_is_bloom_filter_column = true && that.isSetIs_bloom_filter_column();
    if (this_present_is_bloom_filter_column || that_present_is_bloom_filter_column) {
      if (!(this_present_is_bloom_filter_column && that_present_is_bloom_filter_column))
        return false;
      if (this.is_bloom_filter_column != that.is_bloom_filter_column)
        return false;
    }

    boolean this_present_define_expr = true && this.isSetDefine_expr();
    boolean that_present_define_expr = true && that.isSetDefine_expr();
    if (this_present_define_expr || that_present_define_expr) {
      if (!(this_present_define_expr && that_present_define_expr))
        return false;
      if (!this.define_expr.equals(that.define_expr))
        return false;
    }

    boolean this_present_is_auto_increment = true && this.isSetIs_auto_increment();
    boolean that_present_is_auto_increment = true && that.isSetIs_auto_increment();
    if (this_present_is_auto_increment || that_present_is_auto_increment) {
      if (!(this_present_is_auto_increment && that_present_is_auto_increment))
        return false;
      if (this.is_auto_increment != that.is_auto_increment)
        return false;
    }

    boolean this_present_col_unique_id = true && this.isSetCol_unique_id();
    boolean that_present_col_unique_id = true && that.isSetCol_unique_id();
    if (this_present_col_unique_id || that_present_col_unique_id) {
      if (!(this_present_col_unique_id && that_present_col_unique_id))
        return false;
      if (this.col_unique_id != that.col_unique_id)
        return false;
    }

    boolean this_present_has_bitmap_index = true && this.isSetHas_bitmap_index();
    boolean that_present_has_bitmap_index = true && that.isSetHas_bitmap_index();
    if (this_present_has_bitmap_index || that_present_has_bitmap_index) {
      if (!(this_present_has_bitmap_index && that_present_has_bitmap_index))
        return false;
      if (this.has_bitmap_index != that.has_bitmap_index)
        return false;
    }

    boolean this_present_index_len = true && this.isSetIndex_len();
    boolean that_present_index_len = true && that.isSetIndex_len();
    if (this_present_index_len || that_present_index_len) {
      if (!(this_present_index_len && that_present_index_len))
        return false;
      if (this.index_len != that.index_len)
        return false;
    }

    boolean this_present_type_desc = true && this.isSetType_desc();
    boolean that_present_type_desc = true && that.isSetType_desc();
    if (this_present_type_desc || that_present_type_desc) {
      if (!(this_present_type_desc && that_present_type_desc))
        return false;
      if (!this.type_desc.equals(that.type_desc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetColumn_name()) ? 131071 : 524287);
    if (isSetColumn_name())
      hashCode = hashCode * 8191 + column_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumn_type()) ? 131071 : 524287);
    if (isSetColumn_type())
      hashCode = hashCode * 8191 + column_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetAggregation_type()) ? 131071 : 524287);
    if (isSetAggregation_type())
      hashCode = hashCode * 8191 + aggregation_type.getValue();

    hashCode = hashCode * 8191 + ((isSetIs_key()) ? 131071 : 524287);
    if (isSetIs_key())
      hashCode = hashCode * 8191 + ((is_key) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIs_allow_null()) ? 131071 : 524287);
    if (isSetIs_allow_null())
      hashCode = hashCode * 8191 + ((is_allow_null) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDefault_value()) ? 131071 : 524287);
    if (isSetDefault_value())
      hashCode = hashCode * 8191 + default_value.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_bloom_filter_column()) ? 131071 : 524287);
    if (isSetIs_bloom_filter_column())
      hashCode = hashCode * 8191 + ((is_bloom_filter_column) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDefine_expr()) ? 131071 : 524287);
    if (isSetDefine_expr())
      hashCode = hashCode * 8191 + define_expr.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_auto_increment()) ? 131071 : 524287);
    if (isSetIs_auto_increment())
      hashCode = hashCode * 8191 + ((is_auto_increment) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCol_unique_id()) ? 131071 : 524287);
    if (isSetCol_unique_id())
      hashCode = hashCode * 8191 + col_unique_id;

    hashCode = hashCode * 8191 + ((isSetHas_bitmap_index()) ? 131071 : 524287);
    if (isSetHas_bitmap_index())
      hashCode = hashCode * 8191 + ((has_bitmap_index) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIndex_len()) ? 131071 : 524287);
    if (isSetIndex_len())
      hashCode = hashCode * 8191 + index_len;

    hashCode = hashCode * 8191 + ((isSetType_desc()) ? 131071 : 524287);
    if (isSetType_desc())
      hashCode = hashCode * 8191 + type_desc.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TColumn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetColumn_name(), other.isSetColumn_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_name, other.column_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumn_type(), other.isSetColumn_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_type, other.column_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAggregation_type(), other.isSetAggregation_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregation_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregation_type, other.aggregation_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_key(), other.isSetIs_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_key, other.is_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_allow_null(), other.isSetIs_allow_null());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_allow_null()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_allow_null, other.is_allow_null);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDefault_value(), other.isSetDefault_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_value, other.default_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_bloom_filter_column(), other.isSetIs_bloom_filter_column());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_bloom_filter_column()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_bloom_filter_column, other.is_bloom_filter_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDefine_expr(), other.isSetDefine_expr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefine_expr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.define_expr, other.define_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_auto_increment(), other.isSetIs_auto_increment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_auto_increment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_auto_increment, other.is_auto_increment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCol_unique_id(), other.isSetCol_unique_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol_unique_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col_unique_id, other.col_unique_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHas_bitmap_index(), other.isSetHas_bitmap_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_bitmap_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_bitmap_index, other.has_bitmap_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIndex_len(), other.isSetIndex_len());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_len()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_len, other.index_len);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetType_desc(), other.isSetType_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_desc, other.type_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TColumn(");
    boolean first = true;

    sb.append("column_name:");
    if (this.column_name == null) {
      sb.append("null");
    } else {
      sb.append(this.column_name);
    }
    first = false;
    if (isSetColumn_type()) {
      if (!first) sb.append(", ");
      sb.append("column_type:");
      if (this.column_type == null) {
        sb.append("null");
      } else {
        sb.append(this.column_type);
      }
      first = false;
    }
    if (isSetAggregation_type()) {
      if (!first) sb.append(", ");
      sb.append("aggregation_type:");
      if (this.aggregation_type == null) {
        sb.append("null");
      } else {
        sb.append(this.aggregation_type);
      }
      first = false;
    }
    if (isSetIs_key()) {
      if (!first) sb.append(", ");
      sb.append("is_key:");
      sb.append(this.is_key);
      first = false;
    }
    if (isSetIs_allow_null()) {
      if (!first) sb.append(", ");
      sb.append("is_allow_null:");
      sb.append(this.is_allow_null);
      first = false;
    }
    if (isSetDefault_value()) {
      if (!first) sb.append(", ");
      sb.append("default_value:");
      if (this.default_value == null) {
        sb.append("null");
      } else {
        sb.append(this.default_value);
      }
      first = false;
    }
    if (isSetIs_bloom_filter_column()) {
      if (!first) sb.append(", ");
      sb.append("is_bloom_filter_column:");
      sb.append(this.is_bloom_filter_column);
      first = false;
    }
    if (isSetDefine_expr()) {
      if (!first) sb.append(", ");
      sb.append("define_expr:");
      if (this.define_expr == null) {
        sb.append("null");
      } else {
        sb.append(this.define_expr);
      }
      first = false;
    }
    if (isSetIs_auto_increment()) {
      if (!first) sb.append(", ");
      sb.append("is_auto_increment:");
      sb.append(this.is_auto_increment);
      first = false;
    }
    if (isSetCol_unique_id()) {
      if (!first) sb.append(", ");
      sb.append("col_unique_id:");
      sb.append(this.col_unique_id);
      first = false;
    }
    if (isSetHas_bitmap_index()) {
      if (!first) sb.append(", ");
      sb.append("has_bitmap_index:");
      sb.append(this.has_bitmap_index);
      first = false;
    }
    if (isSetIndex_len()) {
      if (!first) sb.append(", ");
      sb.append("index_len:");
      sb.append(this.index_len);
      first = false;
    }
    if (isSetType_desc()) {
      if (!first) sb.append(", ");
      sb.append("type_desc:");
      if (this.type_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.type_desc);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (column_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (column_type != null) {
      column_type.validate();
    }
    if (define_expr != null) {
      define_expr.validate();
    }
    if (type_desc != null) {
      type_desc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TColumnStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TColumnStandardScheme getScheme() {
      return new TColumnStandardScheme();
    }
  }

  private static class TColumnStandardScheme extends org.apache.thrift.scheme.StandardScheme<TColumn> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TColumn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_name = iprot.readString();
              struct.setColumn_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.column_type = new com.starrocks.thrift.TColumnType();
              struct.column_type.read(iprot);
              struct.setColumn_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGGREGATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.aggregation_type = com.starrocks.thrift.TAggregationType.findByValue(iprot.readI32());
              struct.setAggregation_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_key = iprot.readBool();
              struct.setIs_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_ALLOW_NULL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_allow_null = iprot.readBool();
              struct.setIs_allow_nullIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEFAULT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.default_value = iprot.readString();
              struct.setDefault_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_BLOOM_FILTER_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_bloom_filter_column = iprot.readBool();
              struct.setIs_bloom_filter_columnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEFINE_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.define_expr = new com.starrocks.thrift.TExpr();
              struct.define_expr.read(iprot);
              struct.setDefine_exprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_AUTO_INCREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_auto_increment = iprot.readBool();
              struct.setIs_auto_incrementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COL_UNIQUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.col_unique_id = iprot.readI32();
              struct.setCol_unique_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HAS_BITMAP_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_bitmap_index = iprot.readBool();
              struct.setHas_bitmap_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // INDEX_LEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.index_len = iprot.readI32();
              struct.setIndex_lenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TYPE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.type_desc = new com.starrocks.thrift.TTypeDesc();
              struct.type_desc.read(iprot);
              struct.setType_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TColumn struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.column_name != null) {
        oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
        oprot.writeString(struct.column_name);
        oprot.writeFieldEnd();
      }
      if (struct.column_type != null) {
        if (struct.isSetColumn_type()) {
          oprot.writeFieldBegin(COLUMN_TYPE_FIELD_DESC);
          struct.column_type.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.aggregation_type != null) {
        if (struct.isSetAggregation_type()) {
          oprot.writeFieldBegin(AGGREGATION_TYPE_FIELD_DESC);
          oprot.writeI32(struct.aggregation_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_key()) {
        oprot.writeFieldBegin(IS_KEY_FIELD_DESC);
        oprot.writeBool(struct.is_key);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_allow_null()) {
        oprot.writeFieldBegin(IS_ALLOW_NULL_FIELD_DESC);
        oprot.writeBool(struct.is_allow_null);
        oprot.writeFieldEnd();
      }
      if (struct.default_value != null) {
        if (struct.isSetDefault_value()) {
          oprot.writeFieldBegin(DEFAULT_VALUE_FIELD_DESC);
          oprot.writeString(struct.default_value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_bloom_filter_column()) {
        oprot.writeFieldBegin(IS_BLOOM_FILTER_COLUMN_FIELD_DESC);
        oprot.writeBool(struct.is_bloom_filter_column);
        oprot.writeFieldEnd();
      }
      if (struct.define_expr != null) {
        if (struct.isSetDefine_expr()) {
          oprot.writeFieldBegin(DEFINE_EXPR_FIELD_DESC);
          struct.define_expr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_auto_increment()) {
        oprot.writeFieldBegin(IS_AUTO_INCREMENT_FIELD_DESC);
        oprot.writeBool(struct.is_auto_increment);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCol_unique_id()) {
        oprot.writeFieldBegin(COL_UNIQUE_ID_FIELD_DESC);
        oprot.writeI32(struct.col_unique_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHas_bitmap_index()) {
        oprot.writeFieldBegin(HAS_BITMAP_INDEX_FIELD_DESC);
        oprot.writeBool(struct.has_bitmap_index);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIndex_len()) {
        oprot.writeFieldBegin(INDEX_LEN_FIELD_DESC);
        oprot.writeI32(struct.index_len);
        oprot.writeFieldEnd();
      }
      if (struct.type_desc != null) {
        if (struct.isSetType_desc()) {
          oprot.writeFieldBegin(TYPE_DESC_FIELD_DESC);
          struct.type_desc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TColumnTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TColumnTupleScheme getScheme() {
      return new TColumnTupleScheme();
    }
  }

  private static class TColumnTupleScheme extends org.apache.thrift.scheme.TupleScheme<TColumn> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TColumn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.column_name);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetColumn_type()) {
        optionals.set(0);
      }
      if (struct.isSetAggregation_type()) {
        optionals.set(1);
      }
      if (struct.isSetIs_key()) {
        optionals.set(2);
      }
      if (struct.isSetIs_allow_null()) {
        optionals.set(3);
      }
      if (struct.isSetDefault_value()) {
        optionals.set(4);
      }
      if (struct.isSetIs_bloom_filter_column()) {
        optionals.set(5);
      }
      if (struct.isSetDefine_expr()) {
        optionals.set(6);
      }
      if (struct.isSetIs_auto_increment()) {
        optionals.set(7);
      }
      if (struct.isSetCol_unique_id()) {
        optionals.set(8);
      }
      if (struct.isSetHas_bitmap_index()) {
        optionals.set(9);
      }
      if (struct.isSetIndex_len()) {
        optionals.set(10);
      }
      if (struct.isSetType_desc()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetColumn_type()) {
        struct.column_type.write(oprot);
      }
      if (struct.isSetAggregation_type()) {
        oprot.writeI32(struct.aggregation_type.getValue());
      }
      if (struct.isSetIs_key()) {
        oprot.writeBool(struct.is_key);
      }
      if (struct.isSetIs_allow_null()) {
        oprot.writeBool(struct.is_allow_null);
      }
      if (struct.isSetDefault_value()) {
        oprot.writeString(struct.default_value);
      }
      if (struct.isSetIs_bloom_filter_column()) {
        oprot.writeBool(struct.is_bloom_filter_column);
      }
      if (struct.isSetDefine_expr()) {
        struct.define_expr.write(oprot);
      }
      if (struct.isSetIs_auto_increment()) {
        oprot.writeBool(struct.is_auto_increment);
      }
      if (struct.isSetCol_unique_id()) {
        oprot.writeI32(struct.col_unique_id);
      }
      if (struct.isSetHas_bitmap_index()) {
        oprot.writeBool(struct.has_bitmap_index);
      }
      if (struct.isSetIndex_len()) {
        oprot.writeI32(struct.index_len);
      }
      if (struct.isSetType_desc()) {
        struct.type_desc.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TColumn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.column_name = iprot.readString();
      struct.setColumn_nameIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.column_type = new com.starrocks.thrift.TColumnType();
        struct.column_type.read(iprot);
        struct.setColumn_typeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.aggregation_type = com.starrocks.thrift.TAggregationType.findByValue(iprot.readI32());
        struct.setAggregation_typeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.is_key = iprot.readBool();
        struct.setIs_keyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_allow_null = iprot.readBool();
        struct.setIs_allow_nullIsSet(true);
      }
      if (incoming.get(4)) {
        struct.default_value = iprot.readString();
        struct.setDefault_valueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.is_bloom_filter_column = iprot.readBool();
        struct.setIs_bloom_filter_columnIsSet(true);
      }
      if (incoming.get(6)) {
        struct.define_expr = new com.starrocks.thrift.TExpr();
        struct.define_expr.read(iprot);
        struct.setDefine_exprIsSet(true);
      }
      if (incoming.get(7)) {
        struct.is_auto_increment = iprot.readBool();
        struct.setIs_auto_incrementIsSet(true);
      }
      if (incoming.get(8)) {
        struct.col_unique_id = iprot.readI32();
        struct.setCol_unique_idIsSet(true);
      }
      if (incoming.get(9)) {
        struct.has_bitmap_index = iprot.readBool();
        struct.setHas_bitmap_indexIsSet(true);
      }
      if (incoming.get(10)) {
        struct.index_len = iprot.readI32();
        struct.setIndex_lenIsSet(true);
      }
      if (incoming.get(11)) {
        struct.type_desc = new com.starrocks.thrift.TTypeDesc();
        struct.type_desc.read(iprot);
        struct.setType_descIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

