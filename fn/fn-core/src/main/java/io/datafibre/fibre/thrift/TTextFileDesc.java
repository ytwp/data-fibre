/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TTextFileDesc implements org.apache.thrift.TBase<TTextFileDesc, TTextFileDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TTextFileDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTextFileDesc");

  private static final org.apache.thrift.protocol.TField FIELD_DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("field_delim", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LINE_DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("line_delim", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COLLECTION_DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("collection_delim", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MAPKEY_DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("mapkey_delim", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COMPRESSION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("compression_type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TRIM_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("trim_space", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField ENCLOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("enclose", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField ESCAPE_FIELD_DESC = new org.apache.thrift.protocol.TField("escape", org.apache.thrift.protocol.TType.BYTE, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTextFileDescStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTextFileDescTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String field_delim; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String line_delim; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String collection_delim; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String mapkey_delim; // optional
  /**
   * 
   * @see com.starrocks.thrift.TCompressionType
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TCompressionType compression_type; // optional
  public boolean trim_space; // optional
  public byte enclose; // optional
  public byte escape; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELD_DELIM((short)1, "field_delim"),
    LINE_DELIM((short)2, "line_delim"),
    COLLECTION_DELIM((short)3, "collection_delim"),
    MAPKEY_DELIM((short)4, "mapkey_delim"),
    /**
     * 
     * @see com.starrocks.thrift.TCompressionType
     */
    COMPRESSION_TYPE((short)5, "compression_type"),
    TRIM_SPACE((short)6, "trim_space"),
    ENCLOSE((short)7, "enclose"),
    ESCAPE((short)8, "escape");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD_DELIM
          return FIELD_DELIM;
        case 2: // LINE_DELIM
          return LINE_DELIM;
        case 3: // COLLECTION_DELIM
          return COLLECTION_DELIM;
        case 4: // MAPKEY_DELIM
          return MAPKEY_DELIM;
        case 5: // COMPRESSION_TYPE
          return COMPRESSION_TYPE;
        case 6: // TRIM_SPACE
          return TRIM_SPACE;
        case 7: // ENCLOSE
          return ENCLOSE;
        case 8: // ESCAPE
          return ESCAPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRIM_SPACE_ISSET_ID = 0;
  private static final int __ENCLOSE_ISSET_ID = 1;
  private static final int __ESCAPE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FIELD_DELIM,_Fields.LINE_DELIM,_Fields.COLLECTION_DELIM,_Fields.MAPKEY_DELIM,_Fields.COMPRESSION_TYPE,_Fields.TRIM_SPACE,_Fields.ENCLOSE,_Fields.ESCAPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD_DELIM, new org.apache.thrift.meta_data.FieldMetaData("field_delim", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINE_DELIM, new org.apache.thrift.meta_data.FieldMetaData("line_delim", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLLECTION_DELIM, new org.apache.thrift.meta_data.FieldMetaData("collection_delim", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAPKEY_DELIM, new org.apache.thrift.meta_data.FieldMetaData("mapkey_delim", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPRESSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("compression_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TCompressionType.class)));
    tmpMap.put(_Fields.TRIM_SPACE, new org.apache.thrift.meta_data.FieldMetaData("trim_space", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENCLOSE, new org.apache.thrift.meta_data.FieldMetaData("enclose", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ESCAPE, new org.apache.thrift.meta_data.FieldMetaData("escape", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTextFileDesc.class, metaDataMap);
  }

  public TTextFileDesc() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTextFileDesc(TTextFileDesc other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetField_delim()) {
      this.field_delim = other.field_delim;
    }
    if (other.isSetLine_delim()) {
      this.line_delim = other.line_delim;
    }
    if (other.isSetCollection_delim()) {
      this.collection_delim = other.collection_delim;
    }
    if (other.isSetMapkey_delim()) {
      this.mapkey_delim = other.mapkey_delim;
    }
    if (other.isSetCompression_type()) {
      this.compression_type = other.compression_type;
    }
    this.trim_space = other.trim_space;
    this.enclose = other.enclose;
    this.escape = other.escape;
  }

  @Override
  public TTextFileDesc deepCopy() {
    return new TTextFileDesc(this);
  }

  @Override
  public void clear() {
    this.field_delim = null;
    this.line_delim = null;
    this.collection_delim = null;
    this.mapkey_delim = null;
    this.compression_type = null;
    setTrim_spaceIsSet(false);
    this.trim_space = false;
    setEncloseIsSet(false);
    this.enclose = 0;
    setEscapeIsSet(false);
    this.escape = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getField_delim() {
    return this.field_delim;
  }

  public TTextFileDesc setField_delim(@org.apache.thrift.annotation.Nullable java.lang.String field_delim) {
    this.field_delim = field_delim;
    return this;
  }

  public void unsetField_delim() {
    this.field_delim = null;
  }

  /** Returns true if field field_delim is set (has been assigned a value) and false otherwise */
  public boolean isSetField_delim() {
    return this.field_delim != null;
  }

  public void setField_delimIsSet(boolean value) {
    if (!value) {
      this.field_delim = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLine_delim() {
    return this.line_delim;
  }

  public TTextFileDesc setLine_delim(@org.apache.thrift.annotation.Nullable java.lang.String line_delim) {
    this.line_delim = line_delim;
    return this;
  }

  public void unsetLine_delim() {
    this.line_delim = null;
  }

  /** Returns true if field line_delim is set (has been assigned a value) and false otherwise */
  public boolean isSetLine_delim() {
    return this.line_delim != null;
  }

  public void setLine_delimIsSet(boolean value) {
    if (!value) {
      this.line_delim = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCollection_delim() {
    return this.collection_delim;
  }

  public TTextFileDesc setCollection_delim(@org.apache.thrift.annotation.Nullable java.lang.String collection_delim) {
    this.collection_delim = collection_delim;
    return this;
  }

  public void unsetCollection_delim() {
    this.collection_delim = null;
  }

  /** Returns true if field collection_delim is set (has been assigned a value) and false otherwise */
  public boolean isSetCollection_delim() {
    return this.collection_delim != null;
  }

  public void setCollection_delimIsSet(boolean value) {
    if (!value) {
      this.collection_delim = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMapkey_delim() {
    return this.mapkey_delim;
  }

  public TTextFileDesc setMapkey_delim(@org.apache.thrift.annotation.Nullable java.lang.String mapkey_delim) {
    this.mapkey_delim = mapkey_delim;
    return this;
  }

  public void unsetMapkey_delim() {
    this.mapkey_delim = null;
  }

  /** Returns true if field mapkey_delim is set (has been assigned a value) and false otherwise */
  public boolean isSetMapkey_delim() {
    return this.mapkey_delim != null;
  }

  public void setMapkey_delimIsSet(boolean value) {
    if (!value) {
      this.mapkey_delim = null;
    }
  }

  /**
   * 
   * @see com.starrocks.thrift.TCompressionType
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TCompressionType getCompression_type() {
    return this.compression_type;
  }

  /**
   * 
   * @see com.starrocks.thrift.TCompressionType
   */
  public TTextFileDesc setCompression_type(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TCompressionType compression_type) {
    this.compression_type = compression_type;
    return this;
  }

  public void unsetCompression_type() {
    this.compression_type = null;
  }

  /** Returns true if field compression_type is set (has been assigned a value) and false otherwise */
  public boolean isSetCompression_type() {
    return this.compression_type != null;
  }

  public void setCompression_typeIsSet(boolean value) {
    if (!value) {
      this.compression_type = null;
    }
  }

  public boolean isTrim_space() {
    return this.trim_space;
  }

  public TTextFileDesc setTrim_space(boolean trim_space) {
    this.trim_space = trim_space;
    setTrim_spaceIsSet(true);
    return this;
  }

  public void unsetTrim_space() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRIM_SPACE_ISSET_ID);
  }

  /** Returns true if field trim_space is set (has been assigned a value) and false otherwise */
  public boolean isSetTrim_space() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRIM_SPACE_ISSET_ID);
  }

  public void setTrim_spaceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRIM_SPACE_ISSET_ID, value);
  }

  public byte getEnclose() {
    return this.enclose;
  }

  public TTextFileDesc setEnclose(byte enclose) {
    this.enclose = enclose;
    setEncloseIsSet(true);
    return this;
  }

  public void unsetEnclose() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENCLOSE_ISSET_ID);
  }

  /** Returns true if field enclose is set (has been assigned a value) and false otherwise */
  public boolean isSetEnclose() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENCLOSE_ISSET_ID);
  }

  public void setEncloseIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENCLOSE_ISSET_ID, value);
  }

  public byte getEscape() {
    return this.escape;
  }

  public TTextFileDesc setEscape(byte escape) {
    this.escape = escape;
    setEscapeIsSet(true);
    return this;
  }

  public void unsetEscape() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ESCAPE_ISSET_ID);
  }

  /** Returns true if field escape is set (has been assigned a value) and false otherwise */
  public boolean isSetEscape() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ESCAPE_ISSET_ID);
  }

  public void setEscapeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ESCAPE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FIELD_DELIM:
      if (value == null) {
        unsetField_delim();
      } else {
        setField_delim((java.lang.String)value);
      }
      break;

    case LINE_DELIM:
      if (value == null) {
        unsetLine_delim();
      } else {
        setLine_delim((java.lang.String)value);
      }
      break;

    case COLLECTION_DELIM:
      if (value == null) {
        unsetCollection_delim();
      } else {
        setCollection_delim((java.lang.String)value);
      }
      break;

    case MAPKEY_DELIM:
      if (value == null) {
        unsetMapkey_delim();
      } else {
        setMapkey_delim((java.lang.String)value);
      }
      break;

    case COMPRESSION_TYPE:
      if (value == null) {
        unsetCompression_type();
      } else {
        setCompression_type((com.starrocks.thrift.TCompressionType)value);
      }
      break;

    case TRIM_SPACE:
      if (value == null) {
        unsetTrim_space();
      } else {
        setTrim_space((java.lang.Boolean)value);
      }
      break;

    case ENCLOSE:
      if (value == null) {
        unsetEnclose();
      } else {
        setEnclose((java.lang.Byte)value);
      }
      break;

    case ESCAPE:
      if (value == null) {
        unsetEscape();
      } else {
        setEscape((java.lang.Byte)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD_DELIM:
      return getField_delim();

    case LINE_DELIM:
      return getLine_delim();

    case COLLECTION_DELIM:
      return getCollection_delim();

    case MAPKEY_DELIM:
      return getMapkey_delim();

    case COMPRESSION_TYPE:
      return getCompression_type();

    case TRIM_SPACE:
      return isTrim_space();

    case ENCLOSE:
      return getEnclose();

    case ESCAPE:
      return getEscape();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FIELD_DELIM:
      return isSetField_delim();
    case LINE_DELIM:
      return isSetLine_delim();
    case COLLECTION_DELIM:
      return isSetCollection_delim();
    case MAPKEY_DELIM:
      return isSetMapkey_delim();
    case COMPRESSION_TYPE:
      return isSetCompression_type();
    case TRIM_SPACE:
      return isSetTrim_space();
    case ENCLOSE:
      return isSetEnclose();
    case ESCAPE:
      return isSetEscape();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTextFileDesc)
      return this.equals((TTextFileDesc)that);
    return false;
  }

  public boolean equals(TTextFileDesc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_field_delim = true && this.isSetField_delim();
    boolean that_present_field_delim = true && that.isSetField_delim();
    if (this_present_field_delim || that_present_field_delim) {
      if (!(this_present_field_delim && that_present_field_delim))
        return false;
      if (!this.field_delim.equals(that.field_delim))
        return false;
    }

    boolean this_present_line_delim = true && this.isSetLine_delim();
    boolean that_present_line_delim = true && that.isSetLine_delim();
    if (this_present_line_delim || that_present_line_delim) {
      if (!(this_present_line_delim && that_present_line_delim))
        return false;
      if (!this.line_delim.equals(that.line_delim))
        return false;
    }

    boolean this_present_collection_delim = true && this.isSetCollection_delim();
    boolean that_present_collection_delim = true && that.isSetCollection_delim();
    if (this_present_collection_delim || that_present_collection_delim) {
      if (!(this_present_collection_delim && that_present_collection_delim))
        return false;
      if (!this.collection_delim.equals(that.collection_delim))
        return false;
    }

    boolean this_present_mapkey_delim = true && this.isSetMapkey_delim();
    boolean that_present_mapkey_delim = true && that.isSetMapkey_delim();
    if (this_present_mapkey_delim || that_present_mapkey_delim) {
      if (!(this_present_mapkey_delim && that_present_mapkey_delim))
        return false;
      if (!this.mapkey_delim.equals(that.mapkey_delim))
        return false;
    }

    boolean this_present_compression_type = true && this.isSetCompression_type();
    boolean that_present_compression_type = true && that.isSetCompression_type();
    if (this_present_compression_type || that_present_compression_type) {
      if (!(this_present_compression_type && that_present_compression_type))
        return false;
      if (!this.compression_type.equals(that.compression_type))
        return false;
    }

    boolean this_present_trim_space = true && this.isSetTrim_space();
    boolean that_present_trim_space = true && that.isSetTrim_space();
    if (this_present_trim_space || that_present_trim_space) {
      if (!(this_present_trim_space && that_present_trim_space))
        return false;
      if (this.trim_space != that.trim_space)
        return false;
    }

    boolean this_present_enclose = true && this.isSetEnclose();
    boolean that_present_enclose = true && that.isSetEnclose();
    if (this_present_enclose || that_present_enclose) {
      if (!(this_present_enclose && that_present_enclose))
        return false;
      if (this.enclose != that.enclose)
        return false;
    }

    boolean this_present_escape = true && this.isSetEscape();
    boolean that_present_escape = true && that.isSetEscape();
    if (this_present_escape || that_present_escape) {
      if (!(this_present_escape && that_present_escape))
        return false;
      if (this.escape != that.escape)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetField_delim()) ? 131071 : 524287);
    if (isSetField_delim())
      hashCode = hashCode * 8191 + field_delim.hashCode();

    hashCode = hashCode * 8191 + ((isSetLine_delim()) ? 131071 : 524287);
    if (isSetLine_delim())
      hashCode = hashCode * 8191 + line_delim.hashCode();

    hashCode = hashCode * 8191 + ((isSetCollection_delim()) ? 131071 : 524287);
    if (isSetCollection_delim())
      hashCode = hashCode * 8191 + collection_delim.hashCode();

    hashCode = hashCode * 8191 + ((isSetMapkey_delim()) ? 131071 : 524287);
    if (isSetMapkey_delim())
      hashCode = hashCode * 8191 + mapkey_delim.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompression_type()) ? 131071 : 524287);
    if (isSetCompression_type())
      hashCode = hashCode * 8191 + compression_type.getValue();

    hashCode = hashCode * 8191 + ((isSetTrim_space()) ? 131071 : 524287);
    if (isSetTrim_space())
      hashCode = hashCode * 8191 + ((trim_space) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnclose()) ? 131071 : 524287);
    if (isSetEnclose())
      hashCode = hashCode * 8191 + (int) (enclose);

    hashCode = hashCode * 8191 + ((isSetEscape()) ? 131071 : 524287);
    if (isSetEscape())
      hashCode = hashCode * 8191 + (int) (escape);

    return hashCode;
  }

  @Override
  public int compareTo(TTextFileDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetField_delim(), other.isSetField_delim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField_delim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field_delim, other.field_delim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLine_delim(), other.isSetLine_delim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLine_delim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line_delim, other.line_delim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCollection_delim(), other.isSetCollection_delim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollection_delim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection_delim, other.collection_delim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMapkey_delim(), other.isSetMapkey_delim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapkey_delim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapkey_delim, other.mapkey_delim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCompression_type(), other.isSetCompression_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompression_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compression_type, other.compression_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrim_space(), other.isSetTrim_space());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrim_space()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trim_space, other.trim_space);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnclose(), other.isSetEnclose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnclose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enclose, other.enclose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEscape(), other.isSetEscape());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEscape()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.escape, other.escape);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTextFileDesc(");
    boolean first = true;

    if (isSetField_delim()) {
      sb.append("field_delim:");
      if (this.field_delim == null) {
        sb.append("null");
      } else {
        sb.append(this.field_delim);
      }
      first = false;
    }
    if (isSetLine_delim()) {
      if (!first) sb.append(", ");
      sb.append("line_delim:");
      if (this.line_delim == null) {
        sb.append("null");
      } else {
        sb.append(this.line_delim);
      }
      first = false;
    }
    if (isSetCollection_delim()) {
      if (!first) sb.append(", ");
      sb.append("collection_delim:");
      if (this.collection_delim == null) {
        sb.append("null");
      } else {
        sb.append(this.collection_delim);
      }
      first = false;
    }
    if (isSetMapkey_delim()) {
      if (!first) sb.append(", ");
      sb.append("mapkey_delim:");
      if (this.mapkey_delim == null) {
        sb.append("null");
      } else {
        sb.append(this.mapkey_delim);
      }
      first = false;
    }
    if (isSetCompression_type()) {
      if (!first) sb.append(", ");
      sb.append("compression_type:");
      if (this.compression_type == null) {
        sb.append("null");
      } else {
        sb.append(this.compression_type);
      }
      first = false;
    }
    if (isSetTrim_space()) {
      if (!first) sb.append(", ");
      sb.append("trim_space:");
      sb.append(this.trim_space);
      first = false;
    }
    if (isSetEnclose()) {
      if (!first) sb.append(", ");
      sb.append("enclose:");
      sb.append(this.enclose);
      first = false;
    }
    if (isSetEscape()) {
      if (!first) sb.append(", ");
      sb.append("escape:");
      sb.append(this.escape);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTextFileDescStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTextFileDescStandardScheme getScheme() {
      return new TTextFileDescStandardScheme();
    }
  }

  private static class TTextFileDescStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTextFileDesc> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTextFileDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD_DELIM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field_delim = iprot.readString();
              struct.setField_delimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LINE_DELIM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.line_delim = iprot.readString();
              struct.setLine_delimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLLECTION_DELIM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collection_delim = iprot.readString();
              struct.setCollection_delimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAPKEY_DELIM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mapkey_delim = iprot.readString();
              struct.setMapkey_delimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPRESSION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compression_type = com.starrocks.thrift.TCompressionType.findByValue(iprot.readI32());
              struct.setCompression_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRIM_SPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.trim_space = iprot.readBool();
              struct.setTrim_spaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENCLOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.enclose = iprot.readByte();
              struct.setEncloseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ESCAPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.escape = iprot.readByte();
              struct.setEscapeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTextFileDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.field_delim != null) {
        if (struct.isSetField_delim()) {
          oprot.writeFieldBegin(FIELD_DELIM_FIELD_DESC);
          oprot.writeString(struct.field_delim);
          oprot.writeFieldEnd();
        }
      }
      if (struct.line_delim != null) {
        if (struct.isSetLine_delim()) {
          oprot.writeFieldBegin(LINE_DELIM_FIELD_DESC);
          oprot.writeString(struct.line_delim);
          oprot.writeFieldEnd();
        }
      }
      if (struct.collection_delim != null) {
        if (struct.isSetCollection_delim()) {
          oprot.writeFieldBegin(COLLECTION_DELIM_FIELD_DESC);
          oprot.writeString(struct.collection_delim);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mapkey_delim != null) {
        if (struct.isSetMapkey_delim()) {
          oprot.writeFieldBegin(MAPKEY_DELIM_FIELD_DESC);
          oprot.writeString(struct.mapkey_delim);
          oprot.writeFieldEnd();
        }
      }
      if (struct.compression_type != null) {
        if (struct.isSetCompression_type()) {
          oprot.writeFieldBegin(COMPRESSION_TYPE_FIELD_DESC);
          oprot.writeI32(struct.compression_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTrim_space()) {
        oprot.writeFieldBegin(TRIM_SPACE_FIELD_DESC);
        oprot.writeBool(struct.trim_space);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnclose()) {
        oprot.writeFieldBegin(ENCLOSE_FIELD_DESC);
        oprot.writeByte(struct.enclose);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEscape()) {
        oprot.writeFieldBegin(ESCAPE_FIELD_DESC);
        oprot.writeByte(struct.escape);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTextFileDescTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTextFileDescTupleScheme getScheme() {
      return new TTextFileDescTupleScheme();
    }
  }

  private static class TTextFileDescTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTextFileDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTextFileDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetField_delim()) {
        optionals.set(0);
      }
      if (struct.isSetLine_delim()) {
        optionals.set(1);
      }
      if (struct.isSetCollection_delim()) {
        optionals.set(2);
      }
      if (struct.isSetMapkey_delim()) {
        optionals.set(3);
      }
      if (struct.isSetCompression_type()) {
        optionals.set(4);
      }
      if (struct.isSetTrim_space()) {
        optionals.set(5);
      }
      if (struct.isSetEnclose()) {
        optionals.set(6);
      }
      if (struct.isSetEscape()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetField_delim()) {
        oprot.writeString(struct.field_delim);
      }
      if (struct.isSetLine_delim()) {
        oprot.writeString(struct.line_delim);
      }
      if (struct.isSetCollection_delim()) {
        oprot.writeString(struct.collection_delim);
      }
      if (struct.isSetMapkey_delim()) {
        oprot.writeString(struct.mapkey_delim);
      }
      if (struct.isSetCompression_type()) {
        oprot.writeI32(struct.compression_type.getValue());
      }
      if (struct.isSetTrim_space()) {
        oprot.writeBool(struct.trim_space);
      }
      if (struct.isSetEnclose()) {
        oprot.writeByte(struct.enclose);
      }
      if (struct.isSetEscape()) {
        oprot.writeByte(struct.escape);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTextFileDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.field_delim = iprot.readString();
        struct.setField_delimIsSet(true);
      }
      if (incoming.get(1)) {
        struct.line_delim = iprot.readString();
        struct.setLine_delimIsSet(true);
      }
      if (incoming.get(2)) {
        struct.collection_delim = iprot.readString();
        struct.setCollection_delimIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mapkey_delim = iprot.readString();
        struct.setMapkey_delimIsSet(true);
      }
      if (incoming.get(4)) {
        struct.compression_type = com.starrocks.thrift.TCompressionType.findByValue(iprot.readI32());
        struct.setCompression_typeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.trim_space = iprot.readBool();
        struct.setTrim_spaceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.enclose = iprot.readByte();
        struct.setEncloseIsSet(true);
      }
      if (incoming.get(7)) {
        struct.escape = iprot.readByte();
        struct.setEscapeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

