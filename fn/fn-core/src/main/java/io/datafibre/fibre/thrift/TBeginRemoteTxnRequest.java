/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TBeginRemoteTxnRequest implements org.apache.thrift.TBase<TBeginRemoteTxnRequest, TBeginRemoteTxnRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TBeginRemoteTxnRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBeginRemoteTxnRequest");

  private static final org.apache.thrift.protocol.TField DB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("db_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("table_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("source_type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TIMEOUT_SECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout_second", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField AUTH_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("auth_info", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TBeginRemoteTxnRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TBeginRemoteTxnRequestTupleSchemeFactory();

  public long db_id; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> table_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String label; // optional
  public int source_type; // optional
  public long timeout_second; // optional
  public @org.apache.thrift.annotation.Nullable TAuthenticateParams auth_info; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DB_ID((short)1, "db_id"),
    TABLE_IDS((short)2, "table_ids"),
    LABEL((short)3, "label"),
    SOURCE_TYPE((short)4, "source_type"),
    TIMEOUT_SECOND((short)5, "timeout_second"),
    AUTH_INFO((short)6, "auth_info");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DB_ID
          return DB_ID;
        case 2: // TABLE_IDS
          return TABLE_IDS;
        case 3: // LABEL
          return LABEL;
        case 4: // SOURCE_TYPE
          return SOURCE_TYPE;
        case 5: // TIMEOUT_SECOND
          return TIMEOUT_SECOND;
        case 6: // AUTH_INFO
          return AUTH_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DB_ID_ISSET_ID = 0;
  private static final int __SOURCE_TYPE_ISSET_ID = 1;
  private static final int __TIMEOUT_SECOND_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DB_ID,_Fields.TABLE_IDS,_Fields.LABEL,_Fields.SOURCE_TYPE,_Fields.TIMEOUT_SECOND,_Fields.AUTH_INFO};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DB_ID, new org.apache.thrift.meta_data.FieldMetaData("db_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLE_IDS, new org.apache.thrift.meta_data.FieldMetaData("table_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("source_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMEOUT_SECOND, new org.apache.thrift.meta_data.FieldMetaData("timeout_second", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUTH_INFO, new org.apache.thrift.meta_data.FieldMetaData("auth_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAuthenticateParams.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBeginRemoteTxnRequest.class, metaDataMap);
  }

  public TBeginRemoteTxnRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBeginRemoteTxnRequest(TBeginRemoteTxnRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.db_id = other.db_id;
    if (other.isSetTable_ids()) {
      java.util.List<java.lang.Long> __this__table_ids = new java.util.ArrayList<java.lang.Long>(other.table_ids);
      this.table_ids = __this__table_ids;
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    this.source_type = other.source_type;
    this.timeout_second = other.timeout_second;
    if (other.isSetAuth_info()) {
      this.auth_info = new TAuthenticateParams(other.auth_info);
    }
  }

  @Override
  public TBeginRemoteTxnRequest deepCopy() {
    return new TBeginRemoteTxnRequest(this);
  }

  @Override
  public void clear() {
    setDb_idIsSet(false);
    this.db_id = 0;
    this.table_ids = null;
    this.label = null;
    setSource_typeIsSet(false);
    this.source_type = 0;
    setTimeout_secondIsSet(false);
    this.timeout_second = 0;
    this.auth_info = null;
  }

  public long getDb_id() {
    return this.db_id;
  }

  public TBeginRemoteTxnRequest setDb_id(long db_id) {
    this.db_id = db_id;
    setDb_idIsSet(true);
    return this;
  }

  public void unsetDb_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  /** Returns true if field db_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  public void setDb_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DB_ID_ISSET_ID, value);
  }

  public int getTable_idsSize() {
    return (this.table_ids == null) ? 0 : this.table_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getTable_idsIterator() {
    return (this.table_ids == null) ? null : this.table_ids.iterator();
  }

  public void addToTable_ids(long elem) {
    if (this.table_ids == null) {
      this.table_ids = new java.util.ArrayList<java.lang.Long>();
    }
    this.table_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getTable_ids() {
    return this.table_ids;
  }

  public TBeginRemoteTxnRequest setTable_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> table_ids) {
    this.table_ids = table_ids;
    return this;
  }

  public void unsetTable_ids() {
    this.table_ids = null;
  }

  /** Returns true if field table_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_ids() {
    return this.table_ids != null;
  }

  public void setTable_idsIsSet(boolean value) {
    if (!value) {
      this.table_ids = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLabel() {
    return this.label;
  }

  public TBeginRemoteTxnRequest setLabel(@org.apache.thrift.annotation.Nullable java.lang.String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public int getSource_type() {
    return this.source_type;
  }

  public TBeginRemoteTxnRequest setSource_type(int source_type) {
    this.source_type = source_type;
    setSource_typeIsSet(true);
    return this;
  }

  public void unsetSource_type() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCE_TYPE_ISSET_ID);
  }

  /** Returns true if field source_type is set (has been assigned a value) and false otherwise */
  public boolean isSetSource_type() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCE_TYPE_ISSET_ID);
  }

  public void setSource_typeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCE_TYPE_ISSET_ID, value);
  }

  public long getTimeout_second() {
    return this.timeout_second;
  }

  public TBeginRemoteTxnRequest setTimeout_second(long timeout_second) {
    this.timeout_second = timeout_second;
    setTimeout_secondIsSet(true);
    return this;
  }

  public void unsetTimeout_second() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_SECOND_ISSET_ID);
  }

  /** Returns true if field timeout_second is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout_second() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_SECOND_ISSET_ID);
  }

  public void setTimeout_secondIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_SECOND_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TAuthenticateParams getAuth_info() {
    return this.auth_info;
  }

  public TBeginRemoteTxnRequest setAuth_info(@org.apache.thrift.annotation.Nullable TAuthenticateParams auth_info) {
    this.auth_info = auth_info;
    return this;
  }

  public void unsetAuth_info() {
    this.auth_info = null;
  }

  /** Returns true if field auth_info is set (has been assigned a value) and false otherwise */
  public boolean isSetAuth_info() {
    return this.auth_info != null;
  }

  public void setAuth_infoIsSet(boolean value) {
    if (!value) {
      this.auth_info = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DB_ID:
      if (value == null) {
        unsetDb_id();
      } else {
        setDb_id((java.lang.Long)value);
      }
      break;

    case TABLE_IDS:
      if (value == null) {
        unsetTable_ids();
      } else {
        setTable_ids((java.util.List<java.lang.Long>)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((java.lang.String)value);
      }
      break;

    case SOURCE_TYPE:
      if (value == null) {
        unsetSource_type();
      } else {
        setSource_type((java.lang.Integer)value);
      }
      break;

    case TIMEOUT_SECOND:
      if (value == null) {
        unsetTimeout_second();
      } else {
        setTimeout_second((java.lang.Long)value);
      }
      break;

    case AUTH_INFO:
      if (value == null) {
        unsetAuth_info();
      } else {
        setAuth_info((TAuthenticateParams)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DB_ID:
      return getDb_id();

    case TABLE_IDS:
      return getTable_ids();

    case LABEL:
      return getLabel();

    case SOURCE_TYPE:
      return getSource_type();

    case TIMEOUT_SECOND:
      return getTimeout_second();

    case AUTH_INFO:
      return getAuth_info();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DB_ID:
      return isSetDb_id();
    case TABLE_IDS:
      return isSetTable_ids();
    case LABEL:
      return isSetLabel();
    case SOURCE_TYPE:
      return isSetSource_type();
    case TIMEOUT_SECOND:
      return isSetTimeout_second();
    case AUTH_INFO:
      return isSetAuth_info();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TBeginRemoteTxnRequest)
      return this.equals((TBeginRemoteTxnRequest)that);
    return false;
  }

  public boolean equals(TBeginRemoteTxnRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_db_id = true && this.isSetDb_id();
    boolean that_present_db_id = true && that.isSetDb_id();
    if (this_present_db_id || that_present_db_id) {
      if (!(this_present_db_id && that_present_db_id))
        return false;
      if (this.db_id != that.db_id)
        return false;
    }

    boolean this_present_table_ids = true && this.isSetTable_ids();
    boolean that_present_table_ids = true && that.isSetTable_ids();
    if (this_present_table_ids || that_present_table_ids) {
      if (!(this_present_table_ids && that_present_table_ids))
        return false;
      if (!this.table_ids.equals(that.table_ids))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_source_type = true && this.isSetSource_type();
    boolean that_present_source_type = true && that.isSetSource_type();
    if (this_present_source_type || that_present_source_type) {
      if (!(this_present_source_type && that_present_source_type))
        return false;
      if (this.source_type != that.source_type)
        return false;
    }

    boolean this_present_timeout_second = true && this.isSetTimeout_second();
    boolean that_present_timeout_second = true && that.isSetTimeout_second();
    if (this_present_timeout_second || that_present_timeout_second) {
      if (!(this_present_timeout_second && that_present_timeout_second))
        return false;
      if (this.timeout_second != that.timeout_second)
        return false;
    }

    boolean this_present_auth_info = true && this.isSetAuth_info();
    boolean that_present_auth_info = true && that.isSetAuth_info();
    if (this_present_auth_info || that_present_auth_info) {
      if (!(this_present_auth_info && that_present_auth_info))
        return false;
      if (!this.auth_info.equals(that.auth_info))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDb_id()) ? 131071 : 524287);
    if (isSetDb_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(db_id);

    hashCode = hashCode * 8191 + ((isSetTable_ids()) ? 131071 : 524287);
    if (isSetTable_ids())
      hashCode = hashCode * 8191 + table_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetLabel()) ? 131071 : 524287);
    if (isSetLabel())
      hashCode = hashCode * 8191 + label.hashCode();

    hashCode = hashCode * 8191 + ((isSetSource_type()) ? 131071 : 524287);
    if (isSetSource_type())
      hashCode = hashCode * 8191 + source_type;

    hashCode = hashCode * 8191 + ((isSetTimeout_second()) ? 131071 : 524287);
    if (isSetTimeout_second())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeout_second);

    hashCode = hashCode * 8191 + ((isSetAuth_info()) ? 131071 : 524287);
    if (isSetAuth_info())
      hashCode = hashCode * 8191 + auth_info.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TBeginRemoteTxnRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetDb_id(), other.isSetDb_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_id, other.db_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_ids(), other.isSetTable_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_ids, other.table_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLabel(), other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSource_type(), other.isSetSource_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source_type, other.source_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimeout_second(), other.isSetTimeout_second());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout_second()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout_second, other.timeout_second);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAuth_info(), other.isSetAuth_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuth_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth_info, other.auth_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TBeginRemoteTxnRequest(");
    boolean first = true;

    if (isSetDb_id()) {
      sb.append("db_id:");
      sb.append(this.db_id);
      first = false;
    }
    if (isSetTable_ids()) {
      if (!first) sb.append(", ");
      sb.append("table_ids:");
      if (this.table_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.table_ids);
      }
      first = false;
    }
    if (isSetLabel()) {
      if (!first) sb.append(", ");
      sb.append("label:");
      if (this.label == null) {
        sb.append("null");
      } else {
        sb.append(this.label);
      }
      first = false;
    }
    if (isSetSource_type()) {
      if (!first) sb.append(", ");
      sb.append("source_type:");
      sb.append(this.source_type);
      first = false;
    }
    if (isSetTimeout_second()) {
      if (!first) sb.append(", ");
      sb.append("timeout_second:");
      sb.append(this.timeout_second);
      first = false;
    }
    if (isSetAuth_info()) {
      if (!first) sb.append(", ");
      sb.append("auth_info:");
      if (this.auth_info == null) {
        sb.append("null");
      } else {
        sb.append(this.auth_info);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (auth_info != null) {
      auth_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBeginRemoteTxnRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TBeginRemoteTxnRequestStandardScheme getScheme() {
      return new TBeginRemoteTxnRequestStandardScheme();
    }
  }

  private static class TBeginRemoteTxnRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TBeginRemoteTxnRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TBeginRemoteTxnRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.db_id = iprot.readI64();
              struct.setDb_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list542 = iprot.readListBegin();
                struct.table_ids = new java.util.ArrayList<java.lang.Long>(_list542.size);
                long _elem543;
                for (int _i544 = 0; _i544 < _list542.size; ++_i544)
                {
                  _elem543 = iprot.readI64();
                  struct.table_ids.add(_elem543);
                }
                iprot.readListEnd();
              }
              struct.setTable_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source_type = iprot.readI32();
              struct.setSource_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMEOUT_SECOND
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeout_second = iprot.readI64();
              struct.setTimeout_secondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AUTH_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.auth_info = new TAuthenticateParams();
              struct.auth_info.read(iprot);
              struct.setAuth_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TBeginRemoteTxnRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDb_id()) {
        oprot.writeFieldBegin(DB_ID_FIELD_DESC);
        oprot.writeI64(struct.db_id);
        oprot.writeFieldEnd();
      }
      if (struct.table_ids != null) {
        if (struct.isSetTable_ids()) {
          oprot.writeFieldBegin(TABLE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.table_ids.size()));
            for (long _iter545 : struct.table_ids)
            {
              oprot.writeI64(_iter545);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.label != null) {
        if (struct.isSetLabel()) {
          oprot.writeFieldBegin(LABEL_FIELD_DESC);
          oprot.writeString(struct.label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSource_type()) {
        oprot.writeFieldBegin(SOURCE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.source_type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeout_second()) {
        oprot.writeFieldBegin(TIMEOUT_SECOND_FIELD_DESC);
        oprot.writeI64(struct.timeout_second);
        oprot.writeFieldEnd();
      }
      if (struct.auth_info != null) {
        if (struct.isSetAuth_info()) {
          oprot.writeFieldBegin(AUTH_INFO_FIELD_DESC);
          struct.auth_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBeginRemoteTxnRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TBeginRemoteTxnRequestTupleScheme getScheme() {
      return new TBeginRemoteTxnRequestTupleScheme();
    }
  }

  private static class TBeginRemoteTxnRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TBeginRemoteTxnRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBeginRemoteTxnRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDb_id()) {
        optionals.set(0);
      }
      if (struct.isSetTable_ids()) {
        optionals.set(1);
      }
      if (struct.isSetLabel()) {
        optionals.set(2);
      }
      if (struct.isSetSource_type()) {
        optionals.set(3);
      }
      if (struct.isSetTimeout_second()) {
        optionals.set(4);
      }
      if (struct.isSetAuth_info()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetDb_id()) {
        oprot.writeI64(struct.db_id);
      }
      if (struct.isSetTable_ids()) {
        {
          oprot.writeI32(struct.table_ids.size());
          for (long _iter546 : struct.table_ids)
          {
            oprot.writeI64(_iter546);
          }
        }
      }
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
      if (struct.isSetSource_type()) {
        oprot.writeI32(struct.source_type);
      }
      if (struct.isSetTimeout_second()) {
        oprot.writeI64(struct.timeout_second);
      }
      if (struct.isSetAuth_info()) {
        struct.auth_info.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBeginRemoteTxnRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.db_id = iprot.readI64();
        struct.setDb_idIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list547 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.table_ids = new java.util.ArrayList<java.lang.Long>(_list547.size);
          long _elem548;
          for (int _i549 = 0; _i549 < _list547.size; ++_i549)
          {
            _elem548 = iprot.readI64();
            struct.table_ids.add(_elem548);
          }
        }
        struct.setTable_idsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.source_type = iprot.readI32();
        struct.setSource_typeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.timeout_second = iprot.readI64();
        struct.setTimeout_secondIsSet(true);
      }
      if (incoming.get(5)) {
        struct.auth_info = new TAuthenticateParams();
        struct.auth_info.read(iprot);
        struct.setAuth_infoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

