/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TPlanFragmentExecParams implements org.apache.thrift.TBase<TPlanFragmentExecParams, TPlanFragmentExecParams._Fields>, java.io.Serializable, Cloneable, Comparable<TPlanFragmentExecParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlanFragmentExecParams");

  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("query_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENT_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_instance_id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PER_NODE_SCAN_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("per_node_scan_ranges", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField PER_EXCH_NUM_SENDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("per_exch_num_senders", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField DESTINATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("destinations", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField DEBUG_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_node_id", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DEBUG_PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_phase", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DEBUG_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_action", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SENDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sender_id", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField NUM_SENDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_senders", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SEND_QUERY_STATISTICS_WITH_EVERY_BATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("send_query_statistics_with_every_batch", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField USE_VECTORIZED_FIELD_DESC = new org.apache.thrift.protocol.TField("use_vectorized", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_params", org.apache.thrift.protocol.TType.STRUCT, (short)50);
  private static final org.apache.thrift.protocol.TField INSTANCES_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("instances_number", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField ENABLE_EXCHANGE_PASS_THROUGH_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_exchange_pass_through", org.apache.thrift.protocol.TType.BOOL, (short)52);
  private static final org.apache.thrift.protocol.TField NODE_TO_PER_DRIVER_SEQ_SCAN_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("node_to_per_driver_seq_scan_ranges", org.apache.thrift.protocol.TType.MAP, (short)53);
  private static final org.apache.thrift.protocol.TField ENABLE_EXCHANGE_PERF_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_exchange_perf", org.apache.thrift.protocol.TType.BOOL, (short)54);
  private static final org.apache.thrift.protocol.TField PIPELINE_SINK_DOP_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeline_sink_dop", org.apache.thrift.protocol.TType.I32, (short)70);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPlanFragmentExecParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPlanFragmentExecParamsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId query_id; // required
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId fragment_instance_id; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>> per_node_scan_ranges; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> per_exch_num_senders; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TPlanFragmentDestination> destinations; // required
  public int debug_node_id; // optional
  /**
   * 
   * @see com.starrocks.thrift.TExecNodePhase
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExecNodePhase debug_phase; // optional
  /**
   * 
   * @see com.starrocks.thrift.TDebugAction
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TDebugAction debug_action; // optional
  public int sender_id; // optional
  public int num_senders; // optional
  public boolean send_query_statistics_with_every_batch; // optional
  public boolean use_vectorized; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TRuntimeFilterParams runtime_filter_params; // optional
  public int instances_number; // optional
  public boolean enable_exchange_pass_through; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>>> node_to_per_driver_seq_scan_ranges; // optional
  public boolean enable_exchange_perf; // optional
  public int pipeline_sink_dop; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY_ID((short)1, "query_id"),
    FRAGMENT_INSTANCE_ID((short)2, "fragment_instance_id"),
    PER_NODE_SCAN_RANGES((short)3, "per_node_scan_ranges"),
    PER_EXCH_NUM_SENDERS((short)4, "per_exch_num_senders"),
    DESTINATIONS((short)5, "destinations"),
    DEBUG_NODE_ID((short)6, "debug_node_id"),
    /**
     * 
     * @see com.starrocks.thrift.TExecNodePhase
     */
    DEBUG_PHASE((short)7, "debug_phase"),
    /**
     * 
     * @see com.starrocks.thrift.TDebugAction
     */
    DEBUG_ACTION((short)8, "debug_action"),
    SENDER_ID((short)9, "sender_id"),
    NUM_SENDERS((short)10, "num_senders"),
    SEND_QUERY_STATISTICS_WITH_EVERY_BATCH((short)11, "send_query_statistics_with_every_batch"),
    USE_VECTORIZED((short)12, "use_vectorized"),
    RUNTIME_FILTER_PARAMS((short)50, "runtime_filter_params"),
    INSTANCES_NUMBER((short)51, "instances_number"),
    ENABLE_EXCHANGE_PASS_THROUGH((short)52, "enable_exchange_pass_through"),
    NODE_TO_PER_DRIVER_SEQ_SCAN_RANGES((short)53, "node_to_per_driver_seq_scan_ranges"),
    ENABLE_EXCHANGE_PERF((short)54, "enable_exchange_perf"),
    PIPELINE_SINK_DOP((short)70, "pipeline_sink_dop");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_ID
          return QUERY_ID;
        case 2: // FRAGMENT_INSTANCE_ID
          return FRAGMENT_INSTANCE_ID;
        case 3: // PER_NODE_SCAN_RANGES
          return PER_NODE_SCAN_RANGES;
        case 4: // PER_EXCH_NUM_SENDERS
          return PER_EXCH_NUM_SENDERS;
        case 5: // DESTINATIONS
          return DESTINATIONS;
        case 6: // DEBUG_NODE_ID
          return DEBUG_NODE_ID;
        case 7: // DEBUG_PHASE
          return DEBUG_PHASE;
        case 8: // DEBUG_ACTION
          return DEBUG_ACTION;
        case 9: // SENDER_ID
          return SENDER_ID;
        case 10: // NUM_SENDERS
          return NUM_SENDERS;
        case 11: // SEND_QUERY_STATISTICS_WITH_EVERY_BATCH
          return SEND_QUERY_STATISTICS_WITH_EVERY_BATCH;
        case 12: // USE_VECTORIZED
          return USE_VECTORIZED;
        case 50: // RUNTIME_FILTER_PARAMS
          return RUNTIME_FILTER_PARAMS;
        case 51: // INSTANCES_NUMBER
          return INSTANCES_NUMBER;
        case 52: // ENABLE_EXCHANGE_PASS_THROUGH
          return ENABLE_EXCHANGE_PASS_THROUGH;
        case 53: // NODE_TO_PER_DRIVER_SEQ_SCAN_RANGES
          return NODE_TO_PER_DRIVER_SEQ_SCAN_RANGES;
        case 54: // ENABLE_EXCHANGE_PERF
          return ENABLE_EXCHANGE_PERF;
        case 70: // PIPELINE_SINK_DOP
          return PIPELINE_SINK_DOP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEBUG_NODE_ID_ISSET_ID = 0;
  private static final int __SENDER_ID_ISSET_ID = 1;
  private static final int __NUM_SENDERS_ISSET_ID = 2;
  private static final int __SEND_QUERY_STATISTICS_WITH_EVERY_BATCH_ISSET_ID = 3;
  private static final int __USE_VECTORIZED_ISSET_ID = 4;
  private static final int __INSTANCES_NUMBER_ISSET_ID = 5;
  private static final int __ENABLE_EXCHANGE_PASS_THROUGH_ISSET_ID = 6;
  private static final int __ENABLE_EXCHANGE_PERF_ISSET_ID = 7;
  private static final int __PIPELINE_SINK_DOP_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DEBUG_NODE_ID,_Fields.DEBUG_PHASE,_Fields.DEBUG_ACTION,_Fields.SENDER_ID,_Fields.NUM_SENDERS,_Fields.SEND_QUERY_STATISTICS_WITH_EVERY_BATCH,_Fields.USE_VECTORIZED,_Fields.RUNTIME_FILTER_PARAMS,_Fields.INSTANCES_NUMBER,_Fields.ENABLE_EXCHANGE_PASS_THROUGH,_Fields.NODE_TO_PER_DRIVER_SEQ_SCAN_RANGES,_Fields.ENABLE_EXCHANGE_PERF,_Fields.PIPELINE_SINK_DOP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("query_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.FRAGMENT_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("fragment_instance_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.PER_NODE_SCAN_RANGES, new org.apache.thrift.meta_data.FieldMetaData("per_node_scan_ranges", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TScanRangeParams.class)))));
    tmpMap.put(_Fields.PER_EXCH_NUM_SENDERS, new org.apache.thrift.meta_data.FieldMetaData("per_exch_num_senders", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DESTINATIONS, new org.apache.thrift.meta_data.FieldMetaData("destinations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TPlanFragmentDestination.class))));
    tmpMap.put(_Fields.DEBUG_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("debug_node_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TPlanNodeId")));
    tmpMap.put(_Fields.DEBUG_PHASE, new org.apache.thrift.meta_data.FieldMetaData("debug_phase", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TExecNodePhase.class)));
    tmpMap.put(_Fields.DEBUG_ACTION, new org.apache.thrift.meta_data.FieldMetaData("debug_action", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TDebugAction.class)));
    tmpMap.put(_Fields.SENDER_ID, new org.apache.thrift.meta_data.FieldMetaData("sender_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_SENDERS, new org.apache.thrift.meta_data.FieldMetaData("num_senders", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEND_QUERY_STATISTICS_WITH_EVERY_BATCH, new org.apache.thrift.meta_data.FieldMetaData("send_query_statistics_with_every_batch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USE_VECTORIZED, new org.apache.thrift.meta_data.FieldMetaData("use_vectorized", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RUNTIME_FILTER_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TRuntimeFilterParams.class)));
    tmpMap.put(_Fields.INSTANCES_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("instances_number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLE_EXCHANGE_PASS_THROUGH, new org.apache.thrift.meta_data.FieldMetaData("enable_exchange_pass_through", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NODE_TO_PER_DRIVER_SEQ_SCAN_RANGES, new org.apache.thrift.meta_data.FieldMetaData("node_to_per_driver_seq_scan_ranges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TScanRangeParams.class))))));
    tmpMap.put(_Fields.ENABLE_EXCHANGE_PERF, new org.apache.thrift.meta_data.FieldMetaData("enable_exchange_perf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PIPELINE_SINK_DOP, new org.apache.thrift.meta_data.FieldMetaData("pipeline_sink_dop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlanFragmentExecParams.class, metaDataMap);
  }

  public TPlanFragmentExecParams() {
  }

  public TPlanFragmentExecParams(
    com.starrocks.thrift.TUniqueId query_id,
    com.starrocks.thrift.TUniqueId fragment_instance_id,
    java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>> per_node_scan_ranges,
    java.util.Map<java.lang.Integer,java.lang.Integer> per_exch_num_senders,
    java.util.List<com.starrocks.thrift.TPlanFragmentDestination> destinations)
  {
    this();
    this.query_id = query_id;
    this.fragment_instance_id = fragment_instance_id;
    this.per_node_scan_ranges = per_node_scan_ranges;
    this.per_exch_num_senders = per_exch_num_senders;
    this.destinations = destinations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlanFragmentExecParams(TPlanFragmentExecParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQuery_id()) {
      this.query_id = new com.starrocks.thrift.TUniqueId(other.query_id);
    }
    if (other.isSetFragment_instance_id()) {
      this.fragment_instance_id = new com.starrocks.thrift.TUniqueId(other.fragment_instance_id);
    }
    if (other.isSetPer_node_scan_ranges()) {
      java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>> __this__per_node_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.List<TScanRangeParams>>(other.per_node_scan_ranges.size());
      for (java.util.Map.Entry<java.lang.Integer, java.util.List<TScanRangeParams>> other_element : other.per_node_scan_ranges.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.util.List<TScanRangeParams> other_element_value = other_element.getValue();

        java.lang.Integer __this__per_node_scan_ranges_copy_key = other_element_key;

        java.util.List<TScanRangeParams> __this__per_node_scan_ranges_copy_value = new java.util.ArrayList<TScanRangeParams>(other_element_value.size());
        for (TScanRangeParams other_element_value_element : other_element_value) {
          __this__per_node_scan_ranges_copy_value.add(new TScanRangeParams(other_element_value_element));
        }

        __this__per_node_scan_ranges.put(__this__per_node_scan_ranges_copy_key, __this__per_node_scan_ranges_copy_value);
      }
      this.per_node_scan_ranges = __this__per_node_scan_ranges;
    }
    if (other.isSetPer_exch_num_senders()) {
      java.util.Map<java.lang.Integer,java.lang.Integer> __this__per_exch_num_senders = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.per_exch_num_senders.size());
      for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> other_element : other.per_exch_num_senders.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.lang.Integer other_element_value = other_element.getValue();

        java.lang.Integer __this__per_exch_num_senders_copy_key = other_element_key;

        java.lang.Integer __this__per_exch_num_senders_copy_value = other_element_value;

        __this__per_exch_num_senders.put(__this__per_exch_num_senders_copy_key, __this__per_exch_num_senders_copy_value);
      }
      this.per_exch_num_senders = __this__per_exch_num_senders;
    }
    if (other.isSetDestinations()) {
      java.util.List<com.starrocks.thrift.TPlanFragmentDestination> __this__destinations = new java.util.ArrayList<com.starrocks.thrift.TPlanFragmentDestination>(other.destinations.size());
      for (com.starrocks.thrift.TPlanFragmentDestination other_element : other.destinations) {
        __this__destinations.add(new com.starrocks.thrift.TPlanFragmentDestination(other_element));
      }
      this.destinations = __this__destinations;
    }
    this.debug_node_id = other.debug_node_id;
    if (other.isSetDebug_phase()) {
      this.debug_phase = other.debug_phase;
    }
    if (other.isSetDebug_action()) {
      this.debug_action = other.debug_action;
    }
    this.sender_id = other.sender_id;
    this.num_senders = other.num_senders;
    this.send_query_statistics_with_every_batch = other.send_query_statistics_with_every_batch;
    this.use_vectorized = other.use_vectorized;
    if (other.isSetRuntime_filter_params()) {
      this.runtime_filter_params = new com.starrocks.thrift.TRuntimeFilterParams(other.runtime_filter_params);
    }
    this.instances_number = other.instances_number;
    this.enable_exchange_pass_through = other.enable_exchange_pass_through;
    if (other.isSetNode_to_per_driver_seq_scan_ranges()) {
      java.util.Map<java.lang.Integer,java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>>> __this__node_to_per_driver_seq_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>>>(other.node_to_per_driver_seq_scan_ranges.size());
      for (java.util.Map.Entry<java.lang.Integer, java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>>> other_element : other.node_to_per_driver_seq_scan_ranges.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>> other_element_value = other_element.getValue();

        java.lang.Integer __this__node_to_per_driver_seq_scan_ranges_copy_key = other_element_key;

        java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>> __this__node_to_per_driver_seq_scan_ranges_copy_value = new java.util.HashMap<java.lang.Integer,java.util.List<TScanRangeParams>>(other_element_value.size());
        for (java.util.Map.Entry<java.lang.Integer, java.util.List<TScanRangeParams>> other_element_value_element : other_element_value.entrySet()) {

          java.lang.Integer other_element_value_element_key = other_element_value_element.getKey();
          java.util.List<TScanRangeParams> other_element_value_element_value = other_element_value_element.getValue();

          java.lang.Integer __this__node_to_per_driver_seq_scan_ranges_copy_value_copy_key = other_element_value_element_key;

          java.util.List<TScanRangeParams> __this__node_to_per_driver_seq_scan_ranges_copy_value_copy_value = new java.util.ArrayList<TScanRangeParams>(other_element_value_element_value.size());
          for (TScanRangeParams other_element_value_element_value_element : other_element_value_element_value) {
            __this__node_to_per_driver_seq_scan_ranges_copy_value_copy_value.add(new TScanRangeParams(other_element_value_element_value_element));
          }

          __this__node_to_per_driver_seq_scan_ranges_copy_value.put(__this__node_to_per_driver_seq_scan_ranges_copy_value_copy_key, __this__node_to_per_driver_seq_scan_ranges_copy_value_copy_value);
        }

        __this__node_to_per_driver_seq_scan_ranges.put(__this__node_to_per_driver_seq_scan_ranges_copy_key, __this__node_to_per_driver_seq_scan_ranges_copy_value);
      }
      this.node_to_per_driver_seq_scan_ranges = __this__node_to_per_driver_seq_scan_ranges;
    }
    this.enable_exchange_perf = other.enable_exchange_perf;
    this.pipeline_sink_dop = other.pipeline_sink_dop;
  }

  @Override
  public TPlanFragmentExecParams deepCopy() {
    return new TPlanFragmentExecParams(this);
  }

  @Override
  public void clear() {
    this.query_id = null;
    this.fragment_instance_id = null;
    this.per_node_scan_ranges = null;
    this.per_exch_num_senders = null;
    this.destinations = null;
    setDebug_node_idIsSet(false);
    this.debug_node_id = 0;
    this.debug_phase = null;
    this.debug_action = null;
    setSender_idIsSet(false);
    this.sender_id = 0;
    setNum_sendersIsSet(false);
    this.num_senders = 0;
    setSend_query_statistics_with_every_batchIsSet(false);
    this.send_query_statistics_with_every_batch = false;
    setUse_vectorizedIsSet(false);
    this.use_vectorized = false;
    this.runtime_filter_params = null;
    setInstances_numberIsSet(false);
    this.instances_number = 0;
    setEnable_exchange_pass_throughIsSet(false);
    this.enable_exchange_pass_through = false;
    this.node_to_per_driver_seq_scan_ranges = null;
    setEnable_exchange_perfIsSet(false);
    this.enable_exchange_perf = false;
    setPipeline_sink_dopIsSet(false);
    this.pipeline_sink_dop = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TUniqueId getQuery_id() {
    return this.query_id;
  }

  public TPlanFragmentExecParams setQuery_id(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId query_id) {
    this.query_id = query_id;
    return this;
  }

  public void unsetQuery_id() {
    this.query_id = null;
  }

  /** Returns true if field query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_id() {
    return this.query_id != null;
  }

  public void setQuery_idIsSet(boolean value) {
    if (!value) {
      this.query_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TUniqueId getFragment_instance_id() {
    return this.fragment_instance_id;
  }

  public TPlanFragmentExecParams setFragment_instance_id(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId fragment_instance_id) {
    this.fragment_instance_id = fragment_instance_id;
    return this;
  }

  public void unsetFragment_instance_id() {
    this.fragment_instance_id = null;
  }

  /** Returns true if field fragment_instance_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment_instance_id() {
    return this.fragment_instance_id != null;
  }

  public void setFragment_instance_idIsSet(boolean value) {
    if (!value) {
      this.fragment_instance_id = null;
    }
  }

  public int getPer_node_scan_rangesSize() {
    return (this.per_node_scan_ranges == null) ? 0 : this.per_node_scan_ranges.size();
  }

  public void putToPer_node_scan_ranges(int key, java.util.List<TScanRangeParams> val) {
    if (this.per_node_scan_ranges == null) {
      this.per_node_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.List<TScanRangeParams>>();
    }
    this.per_node_scan_ranges.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>> getPer_node_scan_ranges() {
    return this.per_node_scan_ranges;
  }

  public TPlanFragmentExecParams setPer_node_scan_ranges(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>> per_node_scan_ranges) {
    this.per_node_scan_ranges = per_node_scan_ranges;
    return this;
  }

  public void unsetPer_node_scan_ranges() {
    this.per_node_scan_ranges = null;
  }

  /** Returns true if field per_node_scan_ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetPer_node_scan_ranges() {
    return this.per_node_scan_ranges != null;
  }

  public void setPer_node_scan_rangesIsSet(boolean value) {
    if (!value) {
      this.per_node_scan_ranges = null;
    }
  }

  public int getPer_exch_num_sendersSize() {
    return (this.per_exch_num_senders == null) ? 0 : this.per_exch_num_senders.size();
  }

  public void putToPer_exch_num_senders(int key, int val) {
    if (this.per_exch_num_senders == null) {
      this.per_exch_num_senders = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
    }
    this.per_exch_num_senders.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Integer> getPer_exch_num_senders() {
    return this.per_exch_num_senders;
  }

  public TPlanFragmentExecParams setPer_exch_num_senders(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> per_exch_num_senders) {
    this.per_exch_num_senders = per_exch_num_senders;
    return this;
  }

  public void unsetPer_exch_num_senders() {
    this.per_exch_num_senders = null;
  }

  /** Returns true if field per_exch_num_senders is set (has been assigned a value) and false otherwise */
  public boolean isSetPer_exch_num_senders() {
    return this.per_exch_num_senders != null;
  }

  public void setPer_exch_num_sendersIsSet(boolean value) {
    if (!value) {
      this.per_exch_num_senders = null;
    }
  }

  public int getDestinationsSize() {
    return (this.destinations == null) ? 0 : this.destinations.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TPlanFragmentDestination> getDestinationsIterator() {
    return (this.destinations == null) ? null : this.destinations.iterator();
  }

  public void addToDestinations(com.starrocks.thrift.TPlanFragmentDestination elem) {
    if (this.destinations == null) {
      this.destinations = new java.util.ArrayList<com.starrocks.thrift.TPlanFragmentDestination>();
    }
    this.destinations.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TPlanFragmentDestination> getDestinations() {
    return this.destinations;
  }

  public TPlanFragmentExecParams setDestinations(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TPlanFragmentDestination> destinations) {
    this.destinations = destinations;
    return this;
  }

  public void unsetDestinations() {
    this.destinations = null;
  }

  /** Returns true if field destinations is set (has been assigned a value) and false otherwise */
  public boolean isSetDestinations() {
    return this.destinations != null;
  }

  public void setDestinationsIsSet(boolean value) {
    if (!value) {
      this.destinations = null;
    }
  }

  public int getDebug_node_id() {
    return this.debug_node_id;
  }

  public TPlanFragmentExecParams setDebug_node_id(int debug_node_id) {
    this.debug_node_id = debug_node_id;
    setDebug_node_idIsSet(true);
    return this;
  }

  public void unsetDebug_node_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEBUG_NODE_ID_ISSET_ID);
  }

  /** Returns true if field debug_node_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_node_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEBUG_NODE_ID_ISSET_ID);
  }

  public void setDebug_node_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEBUG_NODE_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.starrocks.thrift.TExecNodePhase
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TExecNodePhase getDebug_phase() {
    return this.debug_phase;
  }

  /**
   * 
   * @see com.starrocks.thrift.TExecNodePhase
   */
  public TPlanFragmentExecParams setDebug_phase(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExecNodePhase debug_phase) {
    this.debug_phase = debug_phase;
    return this;
  }

  public void unsetDebug_phase() {
    this.debug_phase = null;
  }

  /** Returns true if field debug_phase is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_phase() {
    return this.debug_phase != null;
  }

  public void setDebug_phaseIsSet(boolean value) {
    if (!value) {
      this.debug_phase = null;
    }
  }

  /**
   * 
   * @see com.starrocks.thrift.TDebugAction
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TDebugAction getDebug_action() {
    return this.debug_action;
  }

  /**
   * 
   * @see com.starrocks.thrift.TDebugAction
   */
  public TPlanFragmentExecParams setDebug_action(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TDebugAction debug_action) {
    this.debug_action = debug_action;
    return this;
  }

  public void unsetDebug_action() {
    this.debug_action = null;
  }

  /** Returns true if field debug_action is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_action() {
    return this.debug_action != null;
  }

  public void setDebug_actionIsSet(boolean value) {
    if (!value) {
      this.debug_action = null;
    }
  }

  public int getSender_id() {
    return this.sender_id;
  }

  public TPlanFragmentExecParams setSender_id(int sender_id) {
    this.sender_id = sender_id;
    setSender_idIsSet(true);
    return this;
  }

  public void unsetSender_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SENDER_ID_ISSET_ID);
  }

  /** Returns true if field sender_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSender_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SENDER_ID_ISSET_ID);
  }

  public void setSender_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SENDER_ID_ISSET_ID, value);
  }

  public int getNum_senders() {
    return this.num_senders;
  }

  public TPlanFragmentExecParams setNum_senders(int num_senders) {
    this.num_senders = num_senders;
    setNum_sendersIsSet(true);
    return this;
  }

  public void unsetNum_senders() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_SENDERS_ISSET_ID);
  }

  /** Returns true if field num_senders is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_senders() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_SENDERS_ISSET_ID);
  }

  public void setNum_sendersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_SENDERS_ISSET_ID, value);
  }

  public boolean isSend_query_statistics_with_every_batch() {
    return this.send_query_statistics_with_every_batch;
  }

  public TPlanFragmentExecParams setSend_query_statistics_with_every_batch(boolean send_query_statistics_with_every_batch) {
    this.send_query_statistics_with_every_batch = send_query_statistics_with_every_batch;
    setSend_query_statistics_with_every_batchIsSet(true);
    return this;
  }

  public void unsetSend_query_statistics_with_every_batch() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEND_QUERY_STATISTICS_WITH_EVERY_BATCH_ISSET_ID);
  }

  /** Returns true if field send_query_statistics_with_every_batch is set (has been assigned a value) and false otherwise */
  public boolean isSetSend_query_statistics_with_every_batch() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEND_QUERY_STATISTICS_WITH_EVERY_BATCH_ISSET_ID);
  }

  public void setSend_query_statistics_with_every_batchIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEND_QUERY_STATISTICS_WITH_EVERY_BATCH_ISSET_ID, value);
  }

  public boolean isUse_vectorized() {
    return this.use_vectorized;
  }

  public TPlanFragmentExecParams setUse_vectorized(boolean use_vectorized) {
    this.use_vectorized = use_vectorized;
    setUse_vectorizedIsSet(true);
    return this;
  }

  public void unsetUse_vectorized() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_VECTORIZED_ISSET_ID);
  }

  /** Returns true if field use_vectorized is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_vectorized() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_VECTORIZED_ISSET_ID);
  }

  public void setUse_vectorizedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_VECTORIZED_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TRuntimeFilterParams getRuntime_filter_params() {
    return this.runtime_filter_params;
  }

  public TPlanFragmentExecParams setRuntime_filter_params(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TRuntimeFilterParams runtime_filter_params) {
    this.runtime_filter_params = runtime_filter_params;
    return this;
  }

  public void unsetRuntime_filter_params() {
    this.runtime_filter_params = null;
  }

  /** Returns true if field runtime_filter_params is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_filter_params() {
    return this.runtime_filter_params != null;
  }

  public void setRuntime_filter_paramsIsSet(boolean value) {
    if (!value) {
      this.runtime_filter_params = null;
    }
  }

  public int getInstances_number() {
    return this.instances_number;
  }

  public TPlanFragmentExecParams setInstances_number(int instances_number) {
    this.instances_number = instances_number;
    setInstances_numberIsSet(true);
    return this;
  }

  public void unsetInstances_number() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INSTANCES_NUMBER_ISSET_ID);
  }

  /** Returns true if field instances_number is set (has been assigned a value) and false otherwise */
  public boolean isSetInstances_number() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INSTANCES_NUMBER_ISSET_ID);
  }

  public void setInstances_numberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INSTANCES_NUMBER_ISSET_ID, value);
  }

  public boolean isEnable_exchange_pass_through() {
    return this.enable_exchange_pass_through;
  }

  public TPlanFragmentExecParams setEnable_exchange_pass_through(boolean enable_exchange_pass_through) {
    this.enable_exchange_pass_through = enable_exchange_pass_through;
    setEnable_exchange_pass_throughIsSet(true);
    return this;
  }

  public void unsetEnable_exchange_pass_through() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_EXCHANGE_PASS_THROUGH_ISSET_ID);
  }

  /** Returns true if field enable_exchange_pass_through is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_exchange_pass_through() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_EXCHANGE_PASS_THROUGH_ISSET_ID);
  }

  public void setEnable_exchange_pass_throughIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_EXCHANGE_PASS_THROUGH_ISSET_ID, value);
  }

  public int getNode_to_per_driver_seq_scan_rangesSize() {
    return (this.node_to_per_driver_seq_scan_ranges == null) ? 0 : this.node_to_per_driver_seq_scan_ranges.size();
  }

  public void putToNode_to_per_driver_seq_scan_ranges(int key, java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>> val) {
    if (this.node_to_per_driver_seq_scan_ranges == null) {
      this.node_to_per_driver_seq_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>>>();
    }
    this.node_to_per_driver_seq_scan_ranges.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>>> getNode_to_per_driver_seq_scan_ranges() {
    return this.node_to_per_driver_seq_scan_ranges;
  }

  public TPlanFragmentExecParams setNode_to_per_driver_seq_scan_ranges(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>>> node_to_per_driver_seq_scan_ranges) {
    this.node_to_per_driver_seq_scan_ranges = node_to_per_driver_seq_scan_ranges;
    return this;
  }

  public void unsetNode_to_per_driver_seq_scan_ranges() {
    this.node_to_per_driver_seq_scan_ranges = null;
  }

  /** Returns true if field node_to_per_driver_seq_scan_ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_to_per_driver_seq_scan_ranges() {
    return this.node_to_per_driver_seq_scan_ranges != null;
  }

  public void setNode_to_per_driver_seq_scan_rangesIsSet(boolean value) {
    if (!value) {
      this.node_to_per_driver_seq_scan_ranges = null;
    }
  }

  public boolean isEnable_exchange_perf() {
    return this.enable_exchange_perf;
  }

  public TPlanFragmentExecParams setEnable_exchange_perf(boolean enable_exchange_perf) {
    this.enable_exchange_perf = enable_exchange_perf;
    setEnable_exchange_perfIsSet(true);
    return this;
  }

  public void unsetEnable_exchange_perf() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_EXCHANGE_PERF_ISSET_ID);
  }

  /** Returns true if field enable_exchange_perf is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_exchange_perf() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_EXCHANGE_PERF_ISSET_ID);
  }

  public void setEnable_exchange_perfIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_EXCHANGE_PERF_ISSET_ID, value);
  }

  public int getPipeline_sink_dop() {
    return this.pipeline_sink_dop;
  }

  public TPlanFragmentExecParams setPipeline_sink_dop(int pipeline_sink_dop) {
    this.pipeline_sink_dop = pipeline_sink_dop;
    setPipeline_sink_dopIsSet(true);
    return this;
  }

  public void unsetPipeline_sink_dop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PIPELINE_SINK_DOP_ISSET_ID);
  }

  /** Returns true if field pipeline_sink_dop is set (has been assigned a value) and false otherwise */
  public boolean isSetPipeline_sink_dop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PIPELINE_SINK_DOP_ISSET_ID);
  }

  public void setPipeline_sink_dopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PIPELINE_SINK_DOP_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case QUERY_ID:
      if (value == null) {
        unsetQuery_id();
      } else {
        setQuery_id((com.starrocks.thrift.TUniqueId)value);
      }
      break;

    case FRAGMENT_INSTANCE_ID:
      if (value == null) {
        unsetFragment_instance_id();
      } else {
        setFragment_instance_id((com.starrocks.thrift.TUniqueId)value);
      }
      break;

    case PER_NODE_SCAN_RANGES:
      if (value == null) {
        unsetPer_node_scan_ranges();
      } else {
        setPer_node_scan_ranges((java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>>)value);
      }
      break;

    case PER_EXCH_NUM_SENDERS:
      if (value == null) {
        unsetPer_exch_num_senders();
      } else {
        setPer_exch_num_senders((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
      }
      break;

    case DESTINATIONS:
      if (value == null) {
        unsetDestinations();
      } else {
        setDestinations((java.util.List<com.starrocks.thrift.TPlanFragmentDestination>)value);
      }
      break;

    case DEBUG_NODE_ID:
      if (value == null) {
        unsetDebug_node_id();
      } else {
        setDebug_node_id((java.lang.Integer)value);
      }
      break;

    case DEBUG_PHASE:
      if (value == null) {
        unsetDebug_phase();
      } else {
        setDebug_phase((com.starrocks.thrift.TExecNodePhase)value);
      }
      break;

    case DEBUG_ACTION:
      if (value == null) {
        unsetDebug_action();
      } else {
        setDebug_action((com.starrocks.thrift.TDebugAction)value);
      }
      break;

    case SENDER_ID:
      if (value == null) {
        unsetSender_id();
      } else {
        setSender_id((java.lang.Integer)value);
      }
      break;

    case NUM_SENDERS:
      if (value == null) {
        unsetNum_senders();
      } else {
        setNum_senders((java.lang.Integer)value);
      }
      break;

    case SEND_QUERY_STATISTICS_WITH_EVERY_BATCH:
      if (value == null) {
        unsetSend_query_statistics_with_every_batch();
      } else {
        setSend_query_statistics_with_every_batch((java.lang.Boolean)value);
      }
      break;

    case USE_VECTORIZED:
      if (value == null) {
        unsetUse_vectorized();
      } else {
        setUse_vectorized((java.lang.Boolean)value);
      }
      break;

    case RUNTIME_FILTER_PARAMS:
      if (value == null) {
        unsetRuntime_filter_params();
      } else {
        setRuntime_filter_params((com.starrocks.thrift.TRuntimeFilterParams)value);
      }
      break;

    case INSTANCES_NUMBER:
      if (value == null) {
        unsetInstances_number();
      } else {
        setInstances_number((java.lang.Integer)value);
      }
      break;

    case ENABLE_EXCHANGE_PASS_THROUGH:
      if (value == null) {
        unsetEnable_exchange_pass_through();
      } else {
        setEnable_exchange_pass_through((java.lang.Boolean)value);
      }
      break;

    case NODE_TO_PER_DRIVER_SEQ_SCAN_RANGES:
      if (value == null) {
        unsetNode_to_per_driver_seq_scan_ranges();
      } else {
        setNode_to_per_driver_seq_scan_ranges((java.util.Map<java.lang.Integer,java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>>>)value);
      }
      break;

    case ENABLE_EXCHANGE_PERF:
      if (value == null) {
        unsetEnable_exchange_perf();
      } else {
        setEnable_exchange_perf((java.lang.Boolean)value);
      }
      break;

    case PIPELINE_SINK_DOP:
      if (value == null) {
        unsetPipeline_sink_dop();
      } else {
        setPipeline_sink_dop((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_ID:
      return getQuery_id();

    case FRAGMENT_INSTANCE_ID:
      return getFragment_instance_id();

    case PER_NODE_SCAN_RANGES:
      return getPer_node_scan_ranges();

    case PER_EXCH_NUM_SENDERS:
      return getPer_exch_num_senders();

    case DESTINATIONS:
      return getDestinations();

    case DEBUG_NODE_ID:
      return getDebug_node_id();

    case DEBUG_PHASE:
      return getDebug_phase();

    case DEBUG_ACTION:
      return getDebug_action();

    case SENDER_ID:
      return getSender_id();

    case NUM_SENDERS:
      return getNum_senders();

    case SEND_QUERY_STATISTICS_WITH_EVERY_BATCH:
      return isSend_query_statistics_with_every_batch();

    case USE_VECTORIZED:
      return isUse_vectorized();

    case RUNTIME_FILTER_PARAMS:
      return getRuntime_filter_params();

    case INSTANCES_NUMBER:
      return getInstances_number();

    case ENABLE_EXCHANGE_PASS_THROUGH:
      return isEnable_exchange_pass_through();

    case NODE_TO_PER_DRIVER_SEQ_SCAN_RANGES:
      return getNode_to_per_driver_seq_scan_ranges();

    case ENABLE_EXCHANGE_PERF:
      return isEnable_exchange_perf();

    case PIPELINE_SINK_DOP:
      return getPipeline_sink_dop();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case QUERY_ID:
      return isSetQuery_id();
    case FRAGMENT_INSTANCE_ID:
      return isSetFragment_instance_id();
    case PER_NODE_SCAN_RANGES:
      return isSetPer_node_scan_ranges();
    case PER_EXCH_NUM_SENDERS:
      return isSetPer_exch_num_senders();
    case DESTINATIONS:
      return isSetDestinations();
    case DEBUG_NODE_ID:
      return isSetDebug_node_id();
    case DEBUG_PHASE:
      return isSetDebug_phase();
    case DEBUG_ACTION:
      return isSetDebug_action();
    case SENDER_ID:
      return isSetSender_id();
    case NUM_SENDERS:
      return isSetNum_senders();
    case SEND_QUERY_STATISTICS_WITH_EVERY_BATCH:
      return isSetSend_query_statistics_with_every_batch();
    case USE_VECTORIZED:
      return isSetUse_vectorized();
    case RUNTIME_FILTER_PARAMS:
      return isSetRuntime_filter_params();
    case INSTANCES_NUMBER:
      return isSetInstances_number();
    case ENABLE_EXCHANGE_PASS_THROUGH:
      return isSetEnable_exchange_pass_through();
    case NODE_TO_PER_DRIVER_SEQ_SCAN_RANGES:
      return isSetNode_to_per_driver_seq_scan_ranges();
    case ENABLE_EXCHANGE_PERF:
      return isSetEnable_exchange_perf();
    case PIPELINE_SINK_DOP:
      return isSetPipeline_sink_dop();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TPlanFragmentExecParams)
      return this.equals((TPlanFragmentExecParams)that);
    return false;
  }

  public boolean equals(TPlanFragmentExecParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_query_id = true && this.isSetQuery_id();
    boolean that_present_query_id = true && that.isSetQuery_id();
    if (this_present_query_id || that_present_query_id) {
      if (!(this_present_query_id && that_present_query_id))
        return false;
      if (!this.query_id.equals(that.query_id))
        return false;
    }

    boolean this_present_fragment_instance_id = true && this.isSetFragment_instance_id();
    boolean that_present_fragment_instance_id = true && that.isSetFragment_instance_id();
    if (this_present_fragment_instance_id || that_present_fragment_instance_id) {
      if (!(this_present_fragment_instance_id && that_present_fragment_instance_id))
        return false;
      if (!this.fragment_instance_id.equals(that.fragment_instance_id))
        return false;
    }

    boolean this_present_per_node_scan_ranges = true && this.isSetPer_node_scan_ranges();
    boolean that_present_per_node_scan_ranges = true && that.isSetPer_node_scan_ranges();
    if (this_present_per_node_scan_ranges || that_present_per_node_scan_ranges) {
      if (!(this_present_per_node_scan_ranges && that_present_per_node_scan_ranges))
        return false;
      if (!this.per_node_scan_ranges.equals(that.per_node_scan_ranges))
        return false;
    }

    boolean this_present_per_exch_num_senders = true && this.isSetPer_exch_num_senders();
    boolean that_present_per_exch_num_senders = true && that.isSetPer_exch_num_senders();
    if (this_present_per_exch_num_senders || that_present_per_exch_num_senders) {
      if (!(this_present_per_exch_num_senders && that_present_per_exch_num_senders))
        return false;
      if (!this.per_exch_num_senders.equals(that.per_exch_num_senders))
        return false;
    }

    boolean this_present_destinations = true && this.isSetDestinations();
    boolean that_present_destinations = true && that.isSetDestinations();
    if (this_present_destinations || that_present_destinations) {
      if (!(this_present_destinations && that_present_destinations))
        return false;
      if (!this.destinations.equals(that.destinations))
        return false;
    }

    boolean this_present_debug_node_id = true && this.isSetDebug_node_id();
    boolean that_present_debug_node_id = true && that.isSetDebug_node_id();
    if (this_present_debug_node_id || that_present_debug_node_id) {
      if (!(this_present_debug_node_id && that_present_debug_node_id))
        return false;
      if (this.debug_node_id != that.debug_node_id)
        return false;
    }

    boolean this_present_debug_phase = true && this.isSetDebug_phase();
    boolean that_present_debug_phase = true && that.isSetDebug_phase();
    if (this_present_debug_phase || that_present_debug_phase) {
      if (!(this_present_debug_phase && that_present_debug_phase))
        return false;
      if (!this.debug_phase.equals(that.debug_phase))
        return false;
    }

    boolean this_present_debug_action = true && this.isSetDebug_action();
    boolean that_present_debug_action = true && that.isSetDebug_action();
    if (this_present_debug_action || that_present_debug_action) {
      if (!(this_present_debug_action && that_present_debug_action))
        return false;
      if (!this.debug_action.equals(that.debug_action))
        return false;
    }

    boolean this_present_sender_id = true && this.isSetSender_id();
    boolean that_present_sender_id = true && that.isSetSender_id();
    if (this_present_sender_id || that_present_sender_id) {
      if (!(this_present_sender_id && that_present_sender_id))
        return false;
      if (this.sender_id != that.sender_id)
        return false;
    }

    boolean this_present_num_senders = true && this.isSetNum_senders();
    boolean that_present_num_senders = true && that.isSetNum_senders();
    if (this_present_num_senders || that_present_num_senders) {
      if (!(this_present_num_senders && that_present_num_senders))
        return false;
      if (this.num_senders != that.num_senders)
        return false;
    }

    boolean this_present_send_query_statistics_with_every_batch = true && this.isSetSend_query_statistics_with_every_batch();
    boolean that_present_send_query_statistics_with_every_batch = true && that.isSetSend_query_statistics_with_every_batch();
    if (this_present_send_query_statistics_with_every_batch || that_present_send_query_statistics_with_every_batch) {
      if (!(this_present_send_query_statistics_with_every_batch && that_present_send_query_statistics_with_every_batch))
        return false;
      if (this.send_query_statistics_with_every_batch != that.send_query_statistics_with_every_batch)
        return false;
    }

    boolean this_present_use_vectorized = true && this.isSetUse_vectorized();
    boolean that_present_use_vectorized = true && that.isSetUse_vectorized();
    if (this_present_use_vectorized || that_present_use_vectorized) {
      if (!(this_present_use_vectorized && that_present_use_vectorized))
        return false;
      if (this.use_vectorized != that.use_vectorized)
        return false;
    }

    boolean this_present_runtime_filter_params = true && this.isSetRuntime_filter_params();
    boolean that_present_runtime_filter_params = true && that.isSetRuntime_filter_params();
    if (this_present_runtime_filter_params || that_present_runtime_filter_params) {
      if (!(this_present_runtime_filter_params && that_present_runtime_filter_params))
        return false;
      if (!this.runtime_filter_params.equals(that.runtime_filter_params))
        return false;
    }

    boolean this_present_instances_number = true && this.isSetInstances_number();
    boolean that_present_instances_number = true && that.isSetInstances_number();
    if (this_present_instances_number || that_present_instances_number) {
      if (!(this_present_instances_number && that_present_instances_number))
        return false;
      if (this.instances_number != that.instances_number)
        return false;
    }

    boolean this_present_enable_exchange_pass_through = true && this.isSetEnable_exchange_pass_through();
    boolean that_present_enable_exchange_pass_through = true && that.isSetEnable_exchange_pass_through();
    if (this_present_enable_exchange_pass_through || that_present_enable_exchange_pass_through) {
      if (!(this_present_enable_exchange_pass_through && that_present_enable_exchange_pass_through))
        return false;
      if (this.enable_exchange_pass_through != that.enable_exchange_pass_through)
        return false;
    }

    boolean this_present_node_to_per_driver_seq_scan_ranges = true && this.isSetNode_to_per_driver_seq_scan_ranges();
    boolean that_present_node_to_per_driver_seq_scan_ranges = true && that.isSetNode_to_per_driver_seq_scan_ranges();
    if (this_present_node_to_per_driver_seq_scan_ranges || that_present_node_to_per_driver_seq_scan_ranges) {
      if (!(this_present_node_to_per_driver_seq_scan_ranges && that_present_node_to_per_driver_seq_scan_ranges))
        return false;
      if (!this.node_to_per_driver_seq_scan_ranges.equals(that.node_to_per_driver_seq_scan_ranges))
        return false;
    }

    boolean this_present_enable_exchange_perf = true && this.isSetEnable_exchange_perf();
    boolean that_present_enable_exchange_perf = true && that.isSetEnable_exchange_perf();
    if (this_present_enable_exchange_perf || that_present_enable_exchange_perf) {
      if (!(this_present_enable_exchange_perf && that_present_enable_exchange_perf))
        return false;
      if (this.enable_exchange_perf != that.enable_exchange_perf)
        return false;
    }

    boolean this_present_pipeline_sink_dop = true && this.isSetPipeline_sink_dop();
    boolean that_present_pipeline_sink_dop = true && that.isSetPipeline_sink_dop();
    if (this_present_pipeline_sink_dop || that_present_pipeline_sink_dop) {
      if (!(this_present_pipeline_sink_dop && that_present_pipeline_sink_dop))
        return false;
      if (this.pipeline_sink_dop != that.pipeline_sink_dop)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetQuery_id()) ? 131071 : 524287);
    if (isSetQuery_id())
      hashCode = hashCode * 8191 + query_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetFragment_instance_id()) ? 131071 : 524287);
    if (isSetFragment_instance_id())
      hashCode = hashCode * 8191 + fragment_instance_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetPer_node_scan_ranges()) ? 131071 : 524287);
    if (isSetPer_node_scan_ranges())
      hashCode = hashCode * 8191 + per_node_scan_ranges.hashCode();

    hashCode = hashCode * 8191 + ((isSetPer_exch_num_senders()) ? 131071 : 524287);
    if (isSetPer_exch_num_senders())
      hashCode = hashCode * 8191 + per_exch_num_senders.hashCode();

    hashCode = hashCode * 8191 + ((isSetDestinations()) ? 131071 : 524287);
    if (isSetDestinations())
      hashCode = hashCode * 8191 + destinations.hashCode();

    hashCode = hashCode * 8191 + ((isSetDebug_node_id()) ? 131071 : 524287);
    if (isSetDebug_node_id())
      hashCode = hashCode * 8191 + debug_node_id;

    hashCode = hashCode * 8191 + ((isSetDebug_phase()) ? 131071 : 524287);
    if (isSetDebug_phase())
      hashCode = hashCode * 8191 + debug_phase.getValue();

    hashCode = hashCode * 8191 + ((isSetDebug_action()) ? 131071 : 524287);
    if (isSetDebug_action())
      hashCode = hashCode * 8191 + debug_action.getValue();

    hashCode = hashCode * 8191 + ((isSetSender_id()) ? 131071 : 524287);
    if (isSetSender_id())
      hashCode = hashCode * 8191 + sender_id;

    hashCode = hashCode * 8191 + ((isSetNum_senders()) ? 131071 : 524287);
    if (isSetNum_senders())
      hashCode = hashCode * 8191 + num_senders;

    hashCode = hashCode * 8191 + ((isSetSend_query_statistics_with_every_batch()) ? 131071 : 524287);
    if (isSetSend_query_statistics_with_every_batch())
      hashCode = hashCode * 8191 + ((send_query_statistics_with_every_batch) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetUse_vectorized()) ? 131071 : 524287);
    if (isSetUse_vectorized())
      hashCode = hashCode * 8191 + ((use_vectorized) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetRuntime_filter_params()) ? 131071 : 524287);
    if (isSetRuntime_filter_params())
      hashCode = hashCode * 8191 + runtime_filter_params.hashCode();

    hashCode = hashCode * 8191 + ((isSetInstances_number()) ? 131071 : 524287);
    if (isSetInstances_number())
      hashCode = hashCode * 8191 + instances_number;

    hashCode = hashCode * 8191 + ((isSetEnable_exchange_pass_through()) ? 131071 : 524287);
    if (isSetEnable_exchange_pass_through())
      hashCode = hashCode * 8191 + ((enable_exchange_pass_through) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetNode_to_per_driver_seq_scan_ranges()) ? 131071 : 524287);
    if (isSetNode_to_per_driver_seq_scan_ranges())
      hashCode = hashCode * 8191 + node_to_per_driver_seq_scan_ranges.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnable_exchange_perf()) ? 131071 : 524287);
    if (isSetEnable_exchange_perf())
      hashCode = hashCode * 8191 + ((enable_exchange_perf) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPipeline_sink_dop()) ? 131071 : 524287);
    if (isSetPipeline_sink_dop())
      hashCode = hashCode * 8191 + pipeline_sink_dop;

    return hashCode;
  }

  @Override
  public int compareTo(TPlanFragmentExecParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetQuery_id(), other.isSetQuery_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_id, other.query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFragment_instance_id(), other.isSetFragment_instance_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment_instance_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_instance_id, other.fragment_instance_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPer_node_scan_ranges(), other.isSetPer_node_scan_ranges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPer_node_scan_ranges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_node_scan_ranges, other.per_node_scan_ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPer_exch_num_senders(), other.isSetPer_exch_num_senders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPer_exch_num_senders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_exch_num_senders, other.per_exch_num_senders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDestinations(), other.isSetDestinations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestinations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destinations, other.destinations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDebug_node_id(), other.isSetDebug_node_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_node_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_node_id, other.debug_node_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDebug_phase(), other.isSetDebug_phase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_phase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_phase, other.debug_phase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDebug_action(), other.isSetDebug_action());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_action()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_action, other.debug_action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSender_id(), other.isSetSender_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSender_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sender_id, other.sender_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_senders(), other.isSetNum_senders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_senders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_senders, other.num_senders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSend_query_statistics_with_every_batch(), other.isSetSend_query_statistics_with_every_batch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSend_query_statistics_with_every_batch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.send_query_statistics_with_every_batch, other.send_query_statistics_with_every_batch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_vectorized(), other.isSetUse_vectorized());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_vectorized()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_vectorized, other.use_vectorized);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntime_filter_params(), other.isSetRuntime_filter_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_filter_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_params, other.runtime_filter_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInstances_number(), other.isSetInstances_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstances_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instances_number, other.instances_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_exchange_pass_through(), other.isSetEnable_exchange_pass_through());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_exchange_pass_through()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_exchange_pass_through, other.enable_exchange_pass_through);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNode_to_per_driver_seq_scan_ranges(), other.isSetNode_to_per_driver_seq_scan_ranges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_to_per_driver_seq_scan_ranges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_to_per_driver_seq_scan_ranges, other.node_to_per_driver_seq_scan_ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_exchange_perf(), other.isSetEnable_exchange_perf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_exchange_perf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_exchange_perf, other.enable_exchange_perf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPipeline_sink_dop(), other.isSetPipeline_sink_dop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipeline_sink_dop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeline_sink_dop, other.pipeline_sink_dop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPlanFragmentExecParams(");
    boolean first = true;

    sb.append("query_id:");
    if (this.query_id == null) {
      sb.append("null");
    } else {
      sb.append(this.query_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fragment_instance_id:");
    if (this.fragment_instance_id == null) {
      sb.append("null");
    } else {
      sb.append(this.fragment_instance_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("per_node_scan_ranges:");
    if (this.per_node_scan_ranges == null) {
      sb.append("null");
    } else {
      sb.append(this.per_node_scan_ranges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("per_exch_num_senders:");
    if (this.per_exch_num_senders == null) {
      sb.append("null");
    } else {
      sb.append(this.per_exch_num_senders);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("destinations:");
    if (this.destinations == null) {
      sb.append("null");
    } else {
      sb.append(this.destinations);
    }
    first = false;
    if (isSetDebug_node_id()) {
      if (!first) sb.append(", ");
      sb.append("debug_node_id:");
      sb.append(this.debug_node_id);
      first = false;
    }
    if (isSetDebug_phase()) {
      if (!first) sb.append(", ");
      sb.append("debug_phase:");
      if (this.debug_phase == null) {
        sb.append("null");
      } else {
        sb.append(this.debug_phase);
      }
      first = false;
    }
    if (isSetDebug_action()) {
      if (!first) sb.append(", ");
      sb.append("debug_action:");
      if (this.debug_action == null) {
        sb.append("null");
      } else {
        sb.append(this.debug_action);
      }
      first = false;
    }
    if (isSetSender_id()) {
      if (!first) sb.append(", ");
      sb.append("sender_id:");
      sb.append(this.sender_id);
      first = false;
    }
    if (isSetNum_senders()) {
      if (!first) sb.append(", ");
      sb.append("num_senders:");
      sb.append(this.num_senders);
      first = false;
    }
    if (isSetSend_query_statistics_with_every_batch()) {
      if (!first) sb.append(", ");
      sb.append("send_query_statistics_with_every_batch:");
      sb.append(this.send_query_statistics_with_every_batch);
      first = false;
    }
    if (isSetUse_vectorized()) {
      if (!first) sb.append(", ");
      sb.append("use_vectorized:");
      sb.append(this.use_vectorized);
      first = false;
    }
    if (isSetRuntime_filter_params()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_params:");
      if (this.runtime_filter_params == null) {
        sb.append("null");
      } else {
        sb.append(this.runtime_filter_params);
      }
      first = false;
    }
    if (isSetInstances_number()) {
      if (!first) sb.append(", ");
      sb.append("instances_number:");
      sb.append(this.instances_number);
      first = false;
    }
    if (isSetEnable_exchange_pass_through()) {
      if (!first) sb.append(", ");
      sb.append("enable_exchange_pass_through:");
      sb.append(this.enable_exchange_pass_through);
      first = false;
    }
    if (isSetNode_to_per_driver_seq_scan_ranges()) {
      if (!first) sb.append(", ");
      sb.append("node_to_per_driver_seq_scan_ranges:");
      if (this.node_to_per_driver_seq_scan_ranges == null) {
        sb.append("null");
      } else {
        sb.append(this.node_to_per_driver_seq_scan_ranges);
      }
      first = false;
    }
    if (isSetEnable_exchange_perf()) {
      if (!first) sb.append(", ");
      sb.append("enable_exchange_perf:");
      sb.append(this.enable_exchange_perf);
      first = false;
    }
    if (isSetPipeline_sink_dop()) {
      if (!first) sb.append(", ");
      sb.append("pipeline_sink_dop:");
      sb.append(this.pipeline_sink_dop);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (query_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query_id' was not present! Struct: " + toString());
    }
    if (fragment_instance_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fragment_instance_id' was not present! Struct: " + toString());
    }
    if (per_node_scan_ranges == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'per_node_scan_ranges' was not present! Struct: " + toString());
    }
    if (per_exch_num_senders == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'per_exch_num_senders' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (query_id != null) {
      query_id.validate();
    }
    if (fragment_instance_id != null) {
      fragment_instance_id.validate();
    }
    if (runtime_filter_params != null) {
      runtime_filter_params.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlanFragmentExecParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPlanFragmentExecParamsStandardScheme getScheme() {
      return new TPlanFragmentExecParamsStandardScheme();
    }
  }

  private static class TPlanFragmentExecParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPlanFragmentExecParams> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlanFragmentExecParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_id = new com.starrocks.thrift.TUniqueId();
              struct.query_id.read(iprot);
              struct.setQuery_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENT_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment_instance_id = new com.starrocks.thrift.TUniqueId();
              struct.fragment_instance_id.read(iprot);
              struct.setFragment_instance_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PER_NODE_SCAN_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                struct.per_node_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.List<TScanRangeParams>>(2*_map18.size);
                int _key19;
                @org.apache.thrift.annotation.Nullable java.util.List<TScanRangeParams> _val20;
                for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                {
                  _key19 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                    _val20 = new java.util.ArrayList<TScanRangeParams>(_list22.size);
                    @org.apache.thrift.annotation.Nullable TScanRangeParams _elem23;
                    for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                    {
                      _elem23 = new TScanRangeParams();
                      _elem23.read(iprot);
                      _val20.add(_elem23);
                    }
                    iprot.readListEnd();
                  }
                  struct.per_node_scan_ranges.put(_key19, _val20);
                }
                iprot.readMapEnd();
              }
              struct.setPer_node_scan_rangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PER_EXCH_NUM_SENDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map25 = iprot.readMapBegin();
                struct.per_exch_num_senders = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map25.size);
                int _key26;
                int _val27;
                for (int _i28 = 0; _i28 < _map25.size; ++_i28)
                {
                  _key26 = iprot.readI32();
                  _val27 = iprot.readI32();
                  struct.per_exch_num_senders.put(_key26, _val27);
                }
                iprot.readMapEnd();
              }
              struct.setPer_exch_num_sendersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESTINATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list29 = iprot.readListBegin();
                struct.destinations = new java.util.ArrayList<com.starrocks.thrift.TPlanFragmentDestination>(_list29.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TPlanFragmentDestination _elem30;
                for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                {
                  _elem30 = new com.starrocks.thrift.TPlanFragmentDestination();
                  _elem30.read(iprot);
                  struct.destinations.add(_elem30);
                }
                iprot.readListEnd();
              }
              struct.setDestinationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEBUG_NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.debug_node_id = iprot.readI32();
              struct.setDebug_node_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEBUG_PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.debug_phase = com.starrocks.thrift.TExecNodePhase.findByValue(iprot.readI32());
              struct.setDebug_phaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEBUG_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.debug_action = com.starrocks.thrift.TDebugAction.findByValue(iprot.readI32());
              struct.setDebug_actionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SENDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sender_id = iprot.readI32();
              struct.setSender_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NUM_SENDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_senders = iprot.readI32();
              struct.setNum_sendersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SEND_QUERY_STATISTICS_WITH_EVERY_BATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.send_query_statistics_with_every_batch = iprot.readBool();
              struct.setSend_query_statistics_with_every_batchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // USE_VECTORIZED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_vectorized = iprot.readBool();
              struct.setUse_vectorizedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // RUNTIME_FILTER_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.runtime_filter_params = new com.starrocks.thrift.TRuntimeFilterParams();
              struct.runtime_filter_params.read(iprot);
              struct.setRuntime_filter_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // INSTANCES_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.instances_number = iprot.readI32();
              struct.setInstances_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // ENABLE_EXCHANGE_PASS_THROUGH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_exchange_pass_through = iprot.readBool();
              struct.setEnable_exchange_pass_throughIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // NODE_TO_PER_DRIVER_SEQ_SCAN_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
                struct.node_to_per_driver_seq_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>>>(2*_map32.size);
                int _key33;
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>> _val34;
                for (int _i35 = 0; _i35 < _map32.size; ++_i35)
                {
                  _key33 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TMap _map36 = iprot.readMapBegin();
                    _val34 = new java.util.HashMap<java.lang.Integer,java.util.List<TScanRangeParams>>(2*_map36.size);
                    int _key37;
                    @org.apache.thrift.annotation.Nullable java.util.List<TScanRangeParams> _val38;
                    for (int _i39 = 0; _i39 < _map36.size; ++_i39)
                    {
                      _key37 = iprot.readI32();
                      {
                        org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                        _val38 = new java.util.ArrayList<TScanRangeParams>(_list40.size);
                        @org.apache.thrift.annotation.Nullable TScanRangeParams _elem41;
                        for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                        {
                          _elem41 = new TScanRangeParams();
                          _elem41.read(iprot);
                          _val38.add(_elem41);
                        }
                        iprot.readListEnd();
                      }
                      _val34.put(_key37, _val38);
                    }
                    iprot.readMapEnd();
                  }
                  struct.node_to_per_driver_seq_scan_ranges.put(_key33, _val34);
                }
                iprot.readMapEnd();
              }
              struct.setNode_to_per_driver_seq_scan_rangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // ENABLE_EXCHANGE_PERF
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_exchange_perf = iprot.readBool();
              struct.setEnable_exchange_perfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // PIPELINE_SINK_DOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pipeline_sink_dop = iprot.readI32();
              struct.setPipeline_sink_dopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlanFragmentExecParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query_id != null) {
        oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
        struct.query_id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.fragment_instance_id != null) {
        oprot.writeFieldBegin(FRAGMENT_INSTANCE_ID_FIELD_DESC);
        struct.fragment_instance_id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.per_node_scan_ranges != null) {
        oprot.writeFieldBegin(PER_NODE_SCAN_RANGES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.per_node_scan_ranges.size()));
          for (java.util.Map.Entry<java.lang.Integer, java.util.List<TScanRangeParams>> _iter43 : struct.per_node_scan_ranges.entrySet())
          {
            oprot.writeI32(_iter43.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter43.getValue().size()));
              for (TScanRangeParams _iter44 : _iter43.getValue())
              {
                _iter44.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.per_exch_num_senders != null) {
        oprot.writeFieldBegin(PER_EXCH_NUM_SENDERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.per_exch_num_senders.size()));
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter45 : struct.per_exch_num_senders.entrySet())
          {
            oprot.writeI32(_iter45.getKey());
            oprot.writeI32(_iter45.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.destinations != null) {
        oprot.writeFieldBegin(DESTINATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.destinations.size()));
          for (com.starrocks.thrift.TPlanFragmentDestination _iter46 : struct.destinations)
          {
            _iter46.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetDebug_node_id()) {
        oprot.writeFieldBegin(DEBUG_NODE_ID_FIELD_DESC);
        oprot.writeI32(struct.debug_node_id);
        oprot.writeFieldEnd();
      }
      if (struct.debug_phase != null) {
        if (struct.isSetDebug_phase()) {
          oprot.writeFieldBegin(DEBUG_PHASE_FIELD_DESC);
          oprot.writeI32(struct.debug_phase.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.debug_action != null) {
        if (struct.isSetDebug_action()) {
          oprot.writeFieldBegin(DEBUG_ACTION_FIELD_DESC);
          oprot.writeI32(struct.debug_action.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSender_id()) {
        oprot.writeFieldBegin(SENDER_ID_FIELD_DESC);
        oprot.writeI32(struct.sender_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_senders()) {
        oprot.writeFieldBegin(NUM_SENDERS_FIELD_DESC);
        oprot.writeI32(struct.num_senders);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSend_query_statistics_with_every_batch()) {
        oprot.writeFieldBegin(SEND_QUERY_STATISTICS_WITH_EVERY_BATCH_FIELD_DESC);
        oprot.writeBool(struct.send_query_statistics_with_every_batch);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUse_vectorized()) {
        oprot.writeFieldBegin(USE_VECTORIZED_FIELD_DESC);
        oprot.writeBool(struct.use_vectorized);
        oprot.writeFieldEnd();
      }
      if (struct.runtime_filter_params != null) {
        if (struct.isSetRuntime_filter_params()) {
          oprot.writeFieldBegin(RUNTIME_FILTER_PARAMS_FIELD_DESC);
          struct.runtime_filter_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInstances_number()) {
        oprot.writeFieldBegin(INSTANCES_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.instances_number);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_exchange_pass_through()) {
        oprot.writeFieldBegin(ENABLE_EXCHANGE_PASS_THROUGH_FIELD_DESC);
        oprot.writeBool(struct.enable_exchange_pass_through);
        oprot.writeFieldEnd();
      }
      if (struct.node_to_per_driver_seq_scan_ranges != null) {
        if (struct.isSetNode_to_per_driver_seq_scan_ranges()) {
          oprot.writeFieldBegin(NODE_TO_PER_DRIVER_SEQ_SCAN_RANGES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, struct.node_to_per_driver_seq_scan_ranges.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>>> _iter47 : struct.node_to_per_driver_seq_scan_ranges.entrySet())
            {
              oprot.writeI32(_iter47.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, _iter47.getValue().size()));
                for (java.util.Map.Entry<java.lang.Integer, java.util.List<TScanRangeParams>> _iter48 : _iter47.getValue().entrySet())
                {
                  oprot.writeI32(_iter48.getKey());
                  {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter48.getValue().size()));
                    for (TScanRangeParams _iter49 : _iter48.getValue())
                    {
                      _iter49.write(oprot);
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_exchange_perf()) {
        oprot.writeFieldBegin(ENABLE_EXCHANGE_PERF_FIELD_DESC);
        oprot.writeBool(struct.enable_exchange_perf);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPipeline_sink_dop()) {
        oprot.writeFieldBegin(PIPELINE_SINK_DOP_FIELD_DESC);
        oprot.writeI32(struct.pipeline_sink_dop);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlanFragmentExecParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPlanFragmentExecParamsTupleScheme getScheme() {
      return new TPlanFragmentExecParamsTupleScheme();
    }
  }

  private static class TPlanFragmentExecParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPlanFragmentExecParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentExecParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.query_id.write(oprot);
      struct.fragment_instance_id.write(oprot);
      {
        oprot.writeI32(struct.per_node_scan_ranges.size());
        for (java.util.Map.Entry<java.lang.Integer, java.util.List<TScanRangeParams>> _iter50 : struct.per_node_scan_ranges.entrySet())
        {
          oprot.writeI32(_iter50.getKey());
          {
            oprot.writeI32(_iter50.getValue().size());
            for (TScanRangeParams _iter51 : _iter50.getValue())
            {
              _iter51.write(oprot);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.per_exch_num_senders.size());
        for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter52 : struct.per_exch_num_senders.entrySet())
        {
          oprot.writeI32(_iter52.getKey());
          oprot.writeI32(_iter52.getValue());
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDestinations()) {
        optionals.set(0);
      }
      if (struct.isSetDebug_node_id()) {
        optionals.set(1);
      }
      if (struct.isSetDebug_phase()) {
        optionals.set(2);
      }
      if (struct.isSetDebug_action()) {
        optionals.set(3);
      }
      if (struct.isSetSender_id()) {
        optionals.set(4);
      }
      if (struct.isSetNum_senders()) {
        optionals.set(5);
      }
      if (struct.isSetSend_query_statistics_with_every_batch()) {
        optionals.set(6);
      }
      if (struct.isSetUse_vectorized()) {
        optionals.set(7);
      }
      if (struct.isSetRuntime_filter_params()) {
        optionals.set(8);
      }
      if (struct.isSetInstances_number()) {
        optionals.set(9);
      }
      if (struct.isSetEnable_exchange_pass_through()) {
        optionals.set(10);
      }
      if (struct.isSetNode_to_per_driver_seq_scan_ranges()) {
        optionals.set(11);
      }
      if (struct.isSetEnable_exchange_perf()) {
        optionals.set(12);
      }
      if (struct.isSetPipeline_sink_dop()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetDestinations()) {
        {
          oprot.writeI32(struct.destinations.size());
          for (com.starrocks.thrift.TPlanFragmentDestination _iter53 : struct.destinations)
          {
            _iter53.write(oprot);
          }
        }
      }
      if (struct.isSetDebug_node_id()) {
        oprot.writeI32(struct.debug_node_id);
      }
      if (struct.isSetDebug_phase()) {
        oprot.writeI32(struct.debug_phase.getValue());
      }
      if (struct.isSetDebug_action()) {
        oprot.writeI32(struct.debug_action.getValue());
      }
      if (struct.isSetSender_id()) {
        oprot.writeI32(struct.sender_id);
      }
      if (struct.isSetNum_senders()) {
        oprot.writeI32(struct.num_senders);
      }
      if (struct.isSetSend_query_statistics_with_every_batch()) {
        oprot.writeBool(struct.send_query_statistics_with_every_batch);
      }
      if (struct.isSetUse_vectorized()) {
        oprot.writeBool(struct.use_vectorized);
      }
      if (struct.isSetRuntime_filter_params()) {
        struct.runtime_filter_params.write(oprot);
      }
      if (struct.isSetInstances_number()) {
        oprot.writeI32(struct.instances_number);
      }
      if (struct.isSetEnable_exchange_pass_through()) {
        oprot.writeBool(struct.enable_exchange_pass_through);
      }
      if (struct.isSetNode_to_per_driver_seq_scan_ranges()) {
        {
          oprot.writeI32(struct.node_to_per_driver_seq_scan_ranges.size());
          for (java.util.Map.Entry<java.lang.Integer, java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>>> _iter54 : struct.node_to_per_driver_seq_scan_ranges.entrySet())
          {
            oprot.writeI32(_iter54.getKey());
            {
              oprot.writeI32(_iter54.getValue().size());
              for (java.util.Map.Entry<java.lang.Integer, java.util.List<TScanRangeParams>> _iter55 : _iter54.getValue().entrySet())
              {
                oprot.writeI32(_iter55.getKey());
                {
                  oprot.writeI32(_iter55.getValue().size());
                  for (TScanRangeParams _iter56 : _iter55.getValue())
                  {
                    _iter56.write(oprot);
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetEnable_exchange_perf()) {
        oprot.writeBool(struct.enable_exchange_perf);
      }
      if (struct.isSetPipeline_sink_dop()) {
        oprot.writeI32(struct.pipeline_sink_dop);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentExecParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.query_id = new com.starrocks.thrift.TUniqueId();
      struct.query_id.read(iprot);
      struct.setQuery_idIsSet(true);
      struct.fragment_instance_id = new com.starrocks.thrift.TUniqueId();
      struct.fragment_instance_id.read(iprot);
      struct.setFragment_instance_idIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map57 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST); 
        struct.per_node_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.List<TScanRangeParams>>(2*_map57.size);
        int _key58;
        @org.apache.thrift.annotation.Nullable java.util.List<TScanRangeParams> _val59;
        for (int _i60 = 0; _i60 < _map57.size; ++_i60)
        {
          _key58 = iprot.readI32();
          {
            org.apache.thrift.protocol.TList _list61 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            _val59 = new java.util.ArrayList<TScanRangeParams>(_list61.size);
            @org.apache.thrift.annotation.Nullable TScanRangeParams _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new TScanRangeParams();
              _elem62.read(iprot);
              _val59.add(_elem62);
            }
          }
          struct.per_node_scan_ranges.put(_key58, _val59);
        }
      }
      struct.setPer_node_scan_rangesIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32); 
        struct.per_exch_num_senders = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map64.size);
        int _key65;
        int _val66;
        for (int _i67 = 0; _i67 < _map64.size; ++_i67)
        {
          _key65 = iprot.readI32();
          _val66 = iprot.readI32();
          struct.per_exch_num_senders.put(_key65, _val66);
        }
      }
      struct.setPer_exch_num_sendersIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list68 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.destinations = new java.util.ArrayList<com.starrocks.thrift.TPlanFragmentDestination>(_list68.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TPlanFragmentDestination _elem69;
          for (int _i70 = 0; _i70 < _list68.size; ++_i70)
          {
            _elem69 = new com.starrocks.thrift.TPlanFragmentDestination();
            _elem69.read(iprot);
            struct.destinations.add(_elem69);
          }
        }
        struct.setDestinationsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.debug_node_id = iprot.readI32();
        struct.setDebug_node_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.debug_phase = com.starrocks.thrift.TExecNodePhase.findByValue(iprot.readI32());
        struct.setDebug_phaseIsSet(true);
      }
      if (incoming.get(3)) {
        struct.debug_action = com.starrocks.thrift.TDebugAction.findByValue(iprot.readI32());
        struct.setDebug_actionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sender_id = iprot.readI32();
        struct.setSender_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.num_senders = iprot.readI32();
        struct.setNum_sendersIsSet(true);
      }
      if (incoming.get(6)) {
        struct.send_query_statistics_with_every_batch = iprot.readBool();
        struct.setSend_query_statistics_with_every_batchIsSet(true);
      }
      if (incoming.get(7)) {
        struct.use_vectorized = iprot.readBool();
        struct.setUse_vectorizedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.runtime_filter_params = new com.starrocks.thrift.TRuntimeFilterParams();
        struct.runtime_filter_params.read(iprot);
        struct.setRuntime_filter_paramsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.instances_number = iprot.readI32();
        struct.setInstances_numberIsSet(true);
      }
      if (incoming.get(10)) {
        struct.enable_exchange_pass_through = iprot.readBool();
        struct.setEnable_exchange_pass_throughIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TMap _map71 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP); 
          struct.node_to_per_driver_seq_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>>>(2*_map71.size);
          int _key72;
          @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>> _val73;
          for (int _i74 = 0; _i74 < _map71.size; ++_i74)
          {
            _key72 = iprot.readI32();
            {
              org.apache.thrift.protocol.TMap _map75 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST); 
              _val73 = new java.util.HashMap<java.lang.Integer,java.util.List<TScanRangeParams>>(2*_map75.size);
              int _key76;
              @org.apache.thrift.annotation.Nullable java.util.List<TScanRangeParams> _val77;
              for (int _i78 = 0; _i78 < _map75.size; ++_i78)
              {
                _key76 = iprot.readI32();
                {
                  org.apache.thrift.protocol.TList _list79 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
                  _val77 = new java.util.ArrayList<TScanRangeParams>(_list79.size);
                  @org.apache.thrift.annotation.Nullable TScanRangeParams _elem80;
                  for (int _i81 = 0; _i81 < _list79.size; ++_i81)
                  {
                    _elem80 = new TScanRangeParams();
                    _elem80.read(iprot);
                    _val77.add(_elem80);
                  }
                }
                _val73.put(_key76, _val77);
              }
            }
            struct.node_to_per_driver_seq_scan_ranges.put(_key72, _val73);
          }
        }
        struct.setNode_to_per_driver_seq_scan_rangesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.enable_exchange_perf = iprot.readBool();
        struct.setEnable_exchange_perfIsSet(true);
      }
      if (incoming.get(13)) {
        struct.pipeline_sink_dop = iprot.readI32();
        struct.setPipeline_sink_dopIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

