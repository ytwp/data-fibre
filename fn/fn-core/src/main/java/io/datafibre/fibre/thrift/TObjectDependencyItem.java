/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TObjectDependencyItem implements org.apache.thrift.TBase<TObjectDependencyItem, TObjectDependencyItem._Fields>, java.io.Serializable, Cloneable, Comparable<TObjectDependencyItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TObjectDependencyItem");

  private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("object_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField OBJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("object_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OBJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("object_type", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REF_OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ref_object_id", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField REF_OBJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ref_object_name", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField REF_DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ref_database", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField REF_CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("ref_catalog", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField REF_OBJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ref_object_type", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TObjectDependencyItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TObjectDependencyItemTupleSchemeFactory();

  public long object_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String object_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String database; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String catalog; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String object_type; // optional
  public long ref_object_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String ref_object_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String ref_database; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String ref_catalog; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String ref_object_type; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OBJECT_ID((short)1, "object_id"),
    OBJECT_NAME((short)2, "object_name"),
    DATABASE((short)3, "database"),
    CATALOG((short)4, "catalog"),
    OBJECT_TYPE((short)5, "object_type"),
    REF_OBJECT_ID((short)11, "ref_object_id"),
    REF_OBJECT_NAME((short)12, "ref_object_name"),
    REF_DATABASE((short)13, "ref_database"),
    REF_CATALOG((short)14, "ref_catalog"),
    REF_OBJECT_TYPE((short)15, "ref_object_type");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OBJECT_ID
          return OBJECT_ID;
        case 2: // OBJECT_NAME
          return OBJECT_NAME;
        case 3: // DATABASE
          return DATABASE;
        case 4: // CATALOG
          return CATALOG;
        case 5: // OBJECT_TYPE
          return OBJECT_TYPE;
        case 11: // REF_OBJECT_ID
          return REF_OBJECT_ID;
        case 12: // REF_OBJECT_NAME
          return REF_OBJECT_NAME;
        case 13: // REF_DATABASE
          return REF_DATABASE;
        case 14: // REF_CATALOG
          return REF_CATALOG;
        case 15: // REF_OBJECT_TYPE
          return REF_OBJECT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OBJECT_ID_ISSET_ID = 0;
  private static final int __REF_OBJECT_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OBJECT_ID,_Fields.OBJECT_NAME,_Fields.DATABASE,_Fields.CATALOG,_Fields.OBJECT_TYPE,_Fields.REF_OBJECT_ID,_Fields.REF_OBJECT_NAME,_Fields.REF_DATABASE,_Fields.REF_CATALOG,_Fields.REF_OBJECT_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("object_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OBJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("object_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATALOG, new org.apache.thrift.meta_data.FieldMetaData("catalog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("object_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("ref_object_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REF_OBJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("ref_object_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_DATABASE, new org.apache.thrift.meta_data.FieldMetaData("ref_database", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_CATALOG, new org.apache.thrift.meta_data.FieldMetaData("ref_catalog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_OBJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ref_object_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TObjectDependencyItem.class, metaDataMap);
  }

  public TObjectDependencyItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TObjectDependencyItem(TObjectDependencyItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.object_id = other.object_id;
    if (other.isSetObject_name()) {
      this.object_name = other.object_name;
    }
    if (other.isSetDatabase()) {
      this.database = other.database;
    }
    if (other.isSetCatalog()) {
      this.catalog = other.catalog;
    }
    if (other.isSetObject_type()) {
      this.object_type = other.object_type;
    }
    this.ref_object_id = other.ref_object_id;
    if (other.isSetRef_object_name()) {
      this.ref_object_name = other.ref_object_name;
    }
    if (other.isSetRef_database()) {
      this.ref_database = other.ref_database;
    }
    if (other.isSetRef_catalog()) {
      this.ref_catalog = other.ref_catalog;
    }
    if (other.isSetRef_object_type()) {
      this.ref_object_type = other.ref_object_type;
    }
  }

  @Override
  public TObjectDependencyItem deepCopy() {
    return new TObjectDependencyItem(this);
  }

  @Override
  public void clear() {
    setObject_idIsSet(false);
    this.object_id = 0;
    this.object_name = null;
    this.database = null;
    this.catalog = null;
    this.object_type = null;
    setRef_object_idIsSet(false);
    this.ref_object_id = 0;
    this.ref_object_name = null;
    this.ref_database = null;
    this.ref_catalog = null;
    this.ref_object_type = null;
  }

  public long getObject_id() {
    return this.object_id;
  }

  public TObjectDependencyItem setObject_id(long object_id) {
    this.object_id = object_id;
    setObject_idIsSet(true);
    return this;
  }

  public void unsetObject_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OBJECT_ID_ISSET_ID);
  }

  /** Returns true if field object_id is set (has been assigned a value) and false otherwise */
  public boolean isSetObject_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OBJECT_ID_ISSET_ID);
  }

  public void setObject_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OBJECT_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getObject_name() {
    return this.object_name;
  }

  public TObjectDependencyItem setObject_name(@org.apache.thrift.annotation.Nullable java.lang.String object_name) {
    this.object_name = object_name;
    return this;
  }

  public void unsetObject_name() {
    this.object_name = null;
  }

  /** Returns true if field object_name is set (has been assigned a value) and false otherwise */
  public boolean isSetObject_name() {
    return this.object_name != null;
  }

  public void setObject_nameIsSet(boolean value) {
    if (!value) {
      this.object_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDatabase() {
    return this.database;
  }

  public TObjectDependencyItem setDatabase(@org.apache.thrift.annotation.Nullable java.lang.String database) {
    this.database = database;
    return this;
  }

  public void unsetDatabase() {
    this.database = null;
  }

  /** Returns true if field database is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabase() {
    return this.database != null;
  }

  public void setDatabaseIsSet(boolean value) {
    if (!value) {
      this.database = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCatalog() {
    return this.catalog;
  }

  public TObjectDependencyItem setCatalog(@org.apache.thrift.annotation.Nullable java.lang.String catalog) {
    this.catalog = catalog;
    return this;
  }

  public void unsetCatalog() {
    this.catalog = null;
  }

  /** Returns true if field catalog is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog() {
    return this.catalog != null;
  }

  public void setCatalogIsSet(boolean value) {
    if (!value) {
      this.catalog = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getObject_type() {
    return this.object_type;
  }

  public TObjectDependencyItem setObject_type(@org.apache.thrift.annotation.Nullable java.lang.String object_type) {
    this.object_type = object_type;
    return this;
  }

  public void unsetObject_type() {
    this.object_type = null;
  }

  /** Returns true if field object_type is set (has been assigned a value) and false otherwise */
  public boolean isSetObject_type() {
    return this.object_type != null;
  }

  public void setObject_typeIsSet(boolean value) {
    if (!value) {
      this.object_type = null;
    }
  }

  public long getRef_object_id() {
    return this.ref_object_id;
  }

  public TObjectDependencyItem setRef_object_id(long ref_object_id) {
    this.ref_object_id = ref_object_id;
    setRef_object_idIsSet(true);
    return this;
  }

  public void unsetRef_object_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REF_OBJECT_ID_ISSET_ID);
  }

  /** Returns true if field ref_object_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRef_object_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REF_OBJECT_ID_ISSET_ID);
  }

  public void setRef_object_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REF_OBJECT_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRef_object_name() {
    return this.ref_object_name;
  }

  public TObjectDependencyItem setRef_object_name(@org.apache.thrift.annotation.Nullable java.lang.String ref_object_name) {
    this.ref_object_name = ref_object_name;
    return this;
  }

  public void unsetRef_object_name() {
    this.ref_object_name = null;
  }

  /** Returns true if field ref_object_name is set (has been assigned a value) and false otherwise */
  public boolean isSetRef_object_name() {
    return this.ref_object_name != null;
  }

  public void setRef_object_nameIsSet(boolean value) {
    if (!value) {
      this.ref_object_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRef_database() {
    return this.ref_database;
  }

  public TObjectDependencyItem setRef_database(@org.apache.thrift.annotation.Nullable java.lang.String ref_database) {
    this.ref_database = ref_database;
    return this;
  }

  public void unsetRef_database() {
    this.ref_database = null;
  }

  /** Returns true if field ref_database is set (has been assigned a value) and false otherwise */
  public boolean isSetRef_database() {
    return this.ref_database != null;
  }

  public void setRef_databaseIsSet(boolean value) {
    if (!value) {
      this.ref_database = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRef_catalog() {
    return this.ref_catalog;
  }

  public TObjectDependencyItem setRef_catalog(@org.apache.thrift.annotation.Nullable java.lang.String ref_catalog) {
    this.ref_catalog = ref_catalog;
    return this;
  }

  public void unsetRef_catalog() {
    this.ref_catalog = null;
  }

  /** Returns true if field ref_catalog is set (has been assigned a value) and false otherwise */
  public boolean isSetRef_catalog() {
    return this.ref_catalog != null;
  }

  public void setRef_catalogIsSet(boolean value) {
    if (!value) {
      this.ref_catalog = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRef_object_type() {
    return this.ref_object_type;
  }

  public TObjectDependencyItem setRef_object_type(@org.apache.thrift.annotation.Nullable java.lang.String ref_object_type) {
    this.ref_object_type = ref_object_type;
    return this;
  }

  public void unsetRef_object_type() {
    this.ref_object_type = null;
  }

  /** Returns true if field ref_object_type is set (has been assigned a value) and false otherwise */
  public boolean isSetRef_object_type() {
    return this.ref_object_type != null;
  }

  public void setRef_object_typeIsSet(boolean value) {
    if (!value) {
      this.ref_object_type = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case OBJECT_ID:
      if (value == null) {
        unsetObject_id();
      } else {
        setObject_id((java.lang.Long)value);
      }
      break;

    case OBJECT_NAME:
      if (value == null) {
        unsetObject_name();
      } else {
        setObject_name((java.lang.String)value);
      }
      break;

    case DATABASE:
      if (value == null) {
        unsetDatabase();
      } else {
        setDatabase((java.lang.String)value);
      }
      break;

    case CATALOG:
      if (value == null) {
        unsetCatalog();
      } else {
        setCatalog((java.lang.String)value);
      }
      break;

    case OBJECT_TYPE:
      if (value == null) {
        unsetObject_type();
      } else {
        setObject_type((java.lang.String)value);
      }
      break;

    case REF_OBJECT_ID:
      if (value == null) {
        unsetRef_object_id();
      } else {
        setRef_object_id((java.lang.Long)value);
      }
      break;

    case REF_OBJECT_NAME:
      if (value == null) {
        unsetRef_object_name();
      } else {
        setRef_object_name((java.lang.String)value);
      }
      break;

    case REF_DATABASE:
      if (value == null) {
        unsetRef_database();
      } else {
        setRef_database((java.lang.String)value);
      }
      break;

    case REF_CATALOG:
      if (value == null) {
        unsetRef_catalog();
      } else {
        setRef_catalog((java.lang.String)value);
      }
      break;

    case REF_OBJECT_TYPE:
      if (value == null) {
        unsetRef_object_type();
      } else {
        setRef_object_type((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OBJECT_ID:
      return getObject_id();

    case OBJECT_NAME:
      return getObject_name();

    case DATABASE:
      return getDatabase();

    case CATALOG:
      return getCatalog();

    case OBJECT_TYPE:
      return getObject_type();

    case REF_OBJECT_ID:
      return getRef_object_id();

    case REF_OBJECT_NAME:
      return getRef_object_name();

    case REF_DATABASE:
      return getRef_database();

    case REF_CATALOG:
      return getRef_catalog();

    case REF_OBJECT_TYPE:
      return getRef_object_type();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OBJECT_ID:
      return isSetObject_id();
    case OBJECT_NAME:
      return isSetObject_name();
    case DATABASE:
      return isSetDatabase();
    case CATALOG:
      return isSetCatalog();
    case OBJECT_TYPE:
      return isSetObject_type();
    case REF_OBJECT_ID:
      return isSetRef_object_id();
    case REF_OBJECT_NAME:
      return isSetRef_object_name();
    case REF_DATABASE:
      return isSetRef_database();
    case REF_CATALOG:
      return isSetRef_catalog();
    case REF_OBJECT_TYPE:
      return isSetRef_object_type();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TObjectDependencyItem)
      return this.equals((TObjectDependencyItem)that);
    return false;
  }

  public boolean equals(TObjectDependencyItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_object_id = true && this.isSetObject_id();
    boolean that_present_object_id = true && that.isSetObject_id();
    if (this_present_object_id || that_present_object_id) {
      if (!(this_present_object_id && that_present_object_id))
        return false;
      if (this.object_id != that.object_id)
        return false;
    }

    boolean this_present_object_name = true && this.isSetObject_name();
    boolean that_present_object_name = true && that.isSetObject_name();
    if (this_present_object_name || that_present_object_name) {
      if (!(this_present_object_name && that_present_object_name))
        return false;
      if (!this.object_name.equals(that.object_name))
        return false;
    }

    boolean this_present_database = true && this.isSetDatabase();
    boolean that_present_database = true && that.isSetDatabase();
    if (this_present_database || that_present_database) {
      if (!(this_present_database && that_present_database))
        return false;
      if (!this.database.equals(that.database))
        return false;
    }

    boolean this_present_catalog = true && this.isSetCatalog();
    boolean that_present_catalog = true && that.isSetCatalog();
    if (this_present_catalog || that_present_catalog) {
      if (!(this_present_catalog && that_present_catalog))
        return false;
      if (!this.catalog.equals(that.catalog))
        return false;
    }

    boolean this_present_object_type = true && this.isSetObject_type();
    boolean that_present_object_type = true && that.isSetObject_type();
    if (this_present_object_type || that_present_object_type) {
      if (!(this_present_object_type && that_present_object_type))
        return false;
      if (!this.object_type.equals(that.object_type))
        return false;
    }

    boolean this_present_ref_object_id = true && this.isSetRef_object_id();
    boolean that_present_ref_object_id = true && that.isSetRef_object_id();
    if (this_present_ref_object_id || that_present_ref_object_id) {
      if (!(this_present_ref_object_id && that_present_ref_object_id))
        return false;
      if (this.ref_object_id != that.ref_object_id)
        return false;
    }

    boolean this_present_ref_object_name = true && this.isSetRef_object_name();
    boolean that_present_ref_object_name = true && that.isSetRef_object_name();
    if (this_present_ref_object_name || that_present_ref_object_name) {
      if (!(this_present_ref_object_name && that_present_ref_object_name))
        return false;
      if (!this.ref_object_name.equals(that.ref_object_name))
        return false;
    }

    boolean this_present_ref_database = true && this.isSetRef_database();
    boolean that_present_ref_database = true && that.isSetRef_database();
    if (this_present_ref_database || that_present_ref_database) {
      if (!(this_present_ref_database && that_present_ref_database))
        return false;
      if (!this.ref_database.equals(that.ref_database))
        return false;
    }

    boolean this_present_ref_catalog = true && this.isSetRef_catalog();
    boolean that_present_ref_catalog = true && that.isSetRef_catalog();
    if (this_present_ref_catalog || that_present_ref_catalog) {
      if (!(this_present_ref_catalog && that_present_ref_catalog))
        return false;
      if (!this.ref_catalog.equals(that.ref_catalog))
        return false;
    }

    boolean this_present_ref_object_type = true && this.isSetRef_object_type();
    boolean that_present_ref_object_type = true && that.isSetRef_object_type();
    if (this_present_ref_object_type || that_present_ref_object_type) {
      if (!(this_present_ref_object_type && that_present_ref_object_type))
        return false;
      if (!this.ref_object_type.equals(that.ref_object_type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetObject_id()) ? 131071 : 524287);
    if (isSetObject_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(object_id);

    hashCode = hashCode * 8191 + ((isSetObject_name()) ? 131071 : 524287);
    if (isSetObject_name())
      hashCode = hashCode * 8191 + object_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatabase()) ? 131071 : 524287);
    if (isSetDatabase())
      hashCode = hashCode * 8191 + database.hashCode();

    hashCode = hashCode * 8191 + ((isSetCatalog()) ? 131071 : 524287);
    if (isSetCatalog())
      hashCode = hashCode * 8191 + catalog.hashCode();

    hashCode = hashCode * 8191 + ((isSetObject_type()) ? 131071 : 524287);
    if (isSetObject_type())
      hashCode = hashCode * 8191 + object_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetRef_object_id()) ? 131071 : 524287);
    if (isSetRef_object_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ref_object_id);

    hashCode = hashCode * 8191 + ((isSetRef_object_name()) ? 131071 : 524287);
    if (isSetRef_object_name())
      hashCode = hashCode * 8191 + ref_object_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetRef_database()) ? 131071 : 524287);
    if (isSetRef_database())
      hashCode = hashCode * 8191 + ref_database.hashCode();

    hashCode = hashCode * 8191 + ((isSetRef_catalog()) ? 131071 : 524287);
    if (isSetRef_catalog())
      hashCode = hashCode * 8191 + ref_catalog.hashCode();

    hashCode = hashCode * 8191 + ((isSetRef_object_type()) ? 131071 : 524287);
    if (isSetRef_object_type())
      hashCode = hashCode * 8191 + ref_object_type.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TObjectDependencyItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetObject_id(), other.isSetObject_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_id, other.object_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetObject_name(), other.isSetObject_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_name, other.object_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDatabase(), other.isSetDatabase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCatalog(), other.isSetCatalog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog, other.catalog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetObject_type(), other.isSetObject_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_type, other.object_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRef_object_id(), other.isSetRef_object_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRef_object_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_object_id, other.ref_object_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRef_object_name(), other.isSetRef_object_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRef_object_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_object_name, other.ref_object_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRef_database(), other.isSetRef_database());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRef_database()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_database, other.ref_database);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRef_catalog(), other.isSetRef_catalog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRef_catalog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_catalog, other.ref_catalog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRef_object_type(), other.isSetRef_object_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRef_object_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_object_type, other.ref_object_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TObjectDependencyItem(");
    boolean first = true;

    if (isSetObject_id()) {
      sb.append("object_id:");
      sb.append(this.object_id);
      first = false;
    }
    if (isSetObject_name()) {
      if (!first) sb.append(", ");
      sb.append("object_name:");
      if (this.object_name == null) {
        sb.append("null");
      } else {
        sb.append(this.object_name);
      }
      first = false;
    }
    if (isSetDatabase()) {
      if (!first) sb.append(", ");
      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
    }
    if (isSetCatalog()) {
      if (!first) sb.append(", ");
      sb.append("catalog:");
      if (this.catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog);
      }
      first = false;
    }
    if (isSetObject_type()) {
      if (!first) sb.append(", ");
      sb.append("object_type:");
      if (this.object_type == null) {
        sb.append("null");
      } else {
        sb.append(this.object_type);
      }
      first = false;
    }
    if (isSetRef_object_id()) {
      if (!first) sb.append(", ");
      sb.append("ref_object_id:");
      sb.append(this.ref_object_id);
      first = false;
    }
    if (isSetRef_object_name()) {
      if (!first) sb.append(", ");
      sb.append("ref_object_name:");
      if (this.ref_object_name == null) {
        sb.append("null");
      } else {
        sb.append(this.ref_object_name);
      }
      first = false;
    }
    if (isSetRef_database()) {
      if (!first) sb.append(", ");
      sb.append("ref_database:");
      if (this.ref_database == null) {
        sb.append("null");
      } else {
        sb.append(this.ref_database);
      }
      first = false;
    }
    if (isSetRef_catalog()) {
      if (!first) sb.append(", ");
      sb.append("ref_catalog:");
      if (this.ref_catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.ref_catalog);
      }
      first = false;
    }
    if (isSetRef_object_type()) {
      if (!first) sb.append(", ");
      sb.append("ref_object_type:");
      if (this.ref_object_type == null) {
        sb.append("null");
      } else {
        sb.append(this.ref_object_type);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TObjectDependencyItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TObjectDependencyItemStandardScheme getScheme() {
      return new TObjectDependencyItemStandardScheme();
    }
  }

  private static class TObjectDependencyItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<TObjectDependencyItem> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TObjectDependencyItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.object_id = iprot.readI64();
              struct.setObject_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OBJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.object_name = iprot.readString();
              struct.setObject_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.database = iprot.readString();
              struct.setDatabaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CATALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catalog = iprot.readString();
              struct.setCatalogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OBJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.object_type = iprot.readString();
              struct.setObject_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REF_OBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ref_object_id = iprot.readI64();
              struct.setRef_object_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REF_OBJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ref_object_name = iprot.readString();
              struct.setRef_object_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REF_DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ref_database = iprot.readString();
              struct.setRef_databaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REF_CATALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ref_catalog = iprot.readString();
              struct.setRef_catalogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // REF_OBJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ref_object_type = iprot.readString();
              struct.setRef_object_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TObjectDependencyItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetObject_id()) {
        oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.object_id);
        oprot.writeFieldEnd();
      }
      if (struct.object_name != null) {
        if (struct.isSetObject_name()) {
          oprot.writeFieldBegin(OBJECT_NAME_FIELD_DESC);
          oprot.writeString(struct.object_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.database != null) {
        if (struct.isSetDatabase()) {
          oprot.writeFieldBegin(DATABASE_FIELD_DESC);
          oprot.writeString(struct.database);
          oprot.writeFieldEnd();
        }
      }
      if (struct.catalog != null) {
        if (struct.isSetCatalog()) {
          oprot.writeFieldBegin(CATALOG_FIELD_DESC);
          oprot.writeString(struct.catalog);
          oprot.writeFieldEnd();
        }
      }
      if (struct.object_type != null) {
        if (struct.isSetObject_type()) {
          oprot.writeFieldBegin(OBJECT_TYPE_FIELD_DESC);
          oprot.writeString(struct.object_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRef_object_id()) {
        oprot.writeFieldBegin(REF_OBJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.ref_object_id);
        oprot.writeFieldEnd();
      }
      if (struct.ref_object_name != null) {
        if (struct.isSetRef_object_name()) {
          oprot.writeFieldBegin(REF_OBJECT_NAME_FIELD_DESC);
          oprot.writeString(struct.ref_object_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ref_database != null) {
        if (struct.isSetRef_database()) {
          oprot.writeFieldBegin(REF_DATABASE_FIELD_DESC);
          oprot.writeString(struct.ref_database);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ref_catalog != null) {
        if (struct.isSetRef_catalog()) {
          oprot.writeFieldBegin(REF_CATALOG_FIELD_DESC);
          oprot.writeString(struct.ref_catalog);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ref_object_type != null) {
        if (struct.isSetRef_object_type()) {
          oprot.writeFieldBegin(REF_OBJECT_TYPE_FIELD_DESC);
          oprot.writeString(struct.ref_object_type);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TObjectDependencyItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TObjectDependencyItemTupleScheme getScheme() {
      return new TObjectDependencyItemTupleScheme();
    }
  }

  private static class TObjectDependencyItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<TObjectDependencyItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TObjectDependencyItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetObject_id()) {
        optionals.set(0);
      }
      if (struct.isSetObject_name()) {
        optionals.set(1);
      }
      if (struct.isSetDatabase()) {
        optionals.set(2);
      }
      if (struct.isSetCatalog()) {
        optionals.set(3);
      }
      if (struct.isSetObject_type()) {
        optionals.set(4);
      }
      if (struct.isSetRef_object_id()) {
        optionals.set(5);
      }
      if (struct.isSetRef_object_name()) {
        optionals.set(6);
      }
      if (struct.isSetRef_database()) {
        optionals.set(7);
      }
      if (struct.isSetRef_catalog()) {
        optionals.set(8);
      }
      if (struct.isSetRef_object_type()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetObject_id()) {
        oprot.writeI64(struct.object_id);
      }
      if (struct.isSetObject_name()) {
        oprot.writeString(struct.object_name);
      }
      if (struct.isSetDatabase()) {
        oprot.writeString(struct.database);
      }
      if (struct.isSetCatalog()) {
        oprot.writeString(struct.catalog);
      }
      if (struct.isSetObject_type()) {
        oprot.writeString(struct.object_type);
      }
      if (struct.isSetRef_object_id()) {
        oprot.writeI64(struct.ref_object_id);
      }
      if (struct.isSetRef_object_name()) {
        oprot.writeString(struct.ref_object_name);
      }
      if (struct.isSetRef_database()) {
        oprot.writeString(struct.ref_database);
      }
      if (struct.isSetRef_catalog()) {
        oprot.writeString(struct.ref_catalog);
      }
      if (struct.isSetRef_object_type()) {
        oprot.writeString(struct.ref_object_type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TObjectDependencyItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.object_id = iprot.readI64();
        struct.setObject_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.object_name = iprot.readString();
        struct.setObject_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.database = iprot.readString();
        struct.setDatabaseIsSet(true);
      }
      if (incoming.get(3)) {
        struct.catalog = iprot.readString();
        struct.setCatalogIsSet(true);
      }
      if (incoming.get(4)) {
        struct.object_type = iprot.readString();
        struct.setObject_typeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ref_object_id = iprot.readI64();
        struct.setRef_object_idIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ref_object_name = iprot.readString();
        struct.setRef_object_nameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ref_database = iprot.readString();
        struct.setRef_databaseIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ref_catalog = iprot.readString();
        struct.setRef_catalogIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ref_object_type = iprot.readString();
        struct.setRef_object_typeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

