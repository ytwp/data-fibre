/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TNormalSortNode implements org.apache.thrift.TBase<TNormalSortNode, TNormalSortNode._Fields>, java.io.Serializable, Cloneable, Comparable<TNormalSortNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNormalSortNode");

  private static final org.apache.thrift.protocol.TField SORT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_info", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField USE_TOP_N_FIELD_DESC = new org.apache.thrift.protocol.TField("use_top_n", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField IS_DEFAULT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_default_limit", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField HAS_OUTER_JOIN_CHILD_FIELD_DESC = new org.apache.thrift.protocol.TField("has_outer_join_child", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField ANALYTIC_PARTITION_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("analytic_partition_exprs", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField PARTITION_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_exprs", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField PARTITION_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_limit", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField TOPN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("topn_type", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TNormalSortNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TNormalSortNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TNormalSortInfo sort_info; // optional
  public boolean use_top_n; // optional
  public long offset; // optional
  public boolean is_default_limit; // optional
  public boolean has_outer_join_child; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> analytic_partition_exprs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> partition_exprs; // optional
  public long partition_limit; // optional
  /**
   * 
   * @see io.datafibre.fibre.thrift.TTopNType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTopNType topn_type; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SORT_INFO((short)1, "sort_info"),
    USE_TOP_N((short)2, "use_top_n"),
    OFFSET((short)3, "offset"),
    IS_DEFAULT_LIMIT((short)4, "is_default_limit"),
    HAS_OUTER_JOIN_CHILD((short)5, "has_outer_join_child"),
    ANALYTIC_PARTITION_EXPRS((short)6, "analytic_partition_exprs"),
    PARTITION_EXPRS((short)7, "partition_exprs"),
    PARTITION_LIMIT((short)8, "partition_limit"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TTopNType
     */
    TOPN_TYPE((short)9, "topn_type");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SORT_INFO
          return SORT_INFO;
        case 2: // USE_TOP_N
          return USE_TOP_N;
        case 3: // OFFSET
          return OFFSET;
        case 4: // IS_DEFAULT_LIMIT
          return IS_DEFAULT_LIMIT;
        case 5: // HAS_OUTER_JOIN_CHILD
          return HAS_OUTER_JOIN_CHILD;
        case 6: // ANALYTIC_PARTITION_EXPRS
          return ANALYTIC_PARTITION_EXPRS;
        case 7: // PARTITION_EXPRS
          return PARTITION_EXPRS;
        case 8: // PARTITION_LIMIT
          return PARTITION_LIMIT;
        case 9: // TOPN_TYPE
          return TOPN_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USE_TOP_N_ISSET_ID = 0;
  private static final int __OFFSET_ISSET_ID = 1;
  private static final int __IS_DEFAULT_LIMIT_ISSET_ID = 2;
  private static final int __HAS_OUTER_JOIN_CHILD_ISSET_ID = 3;
  private static final int __PARTITION_LIMIT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SORT_INFO,_Fields.USE_TOP_N,_Fields.OFFSET,_Fields.IS_DEFAULT_LIMIT,_Fields.HAS_OUTER_JOIN_CHILD,_Fields.ANALYTIC_PARTITION_EXPRS,_Fields.PARTITION_EXPRS,_Fields.PARTITION_LIMIT,_Fields.TOPN_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SORT_INFO, new org.apache.thrift.meta_data.FieldMetaData("sort_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNormalSortInfo.class)));
    tmpMap.put(_Fields.USE_TOP_N, new org.apache.thrift.meta_data.FieldMetaData("use_top_n", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_DEFAULT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("is_default_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_OUTER_JOIN_CHILD, new org.apache.thrift.meta_data.FieldMetaData("has_outer_join_child", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ANALYTIC_PARTITION_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("analytic_partition_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.PARTITION_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("partition_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.PARTITION_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("partition_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOPN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("topn_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TTopNType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNormalSortNode.class, metaDataMap);
  }

  public TNormalSortNode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNormalSortNode(TNormalSortNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSort_info()) {
      this.sort_info = new TNormalSortInfo(other.sort_info);
    }
    this.use_top_n = other.use_top_n;
    this.offset = other.offset;
    this.is_default_limit = other.is_default_limit;
    this.has_outer_join_child = other.has_outer_join_child;
    if (other.isSetAnalytic_partition_exprs()) {
      java.util.List<java.nio.ByteBuffer> __this__analytic_partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(other.analytic_partition_exprs);
      this.analytic_partition_exprs = __this__analytic_partition_exprs;
    }
    if (other.isSetPartition_exprs()) {
      java.util.List<java.nio.ByteBuffer> __this__partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(other.partition_exprs);
      this.partition_exprs = __this__partition_exprs;
    }
    this.partition_limit = other.partition_limit;
    if (other.isSetTopn_type()) {
      this.topn_type = other.topn_type;
    }
  }

  @Override
  public TNormalSortNode deepCopy() {
    return new TNormalSortNode(this);
  }

  @Override
  public void clear() {
    this.sort_info = null;
    setUse_top_nIsSet(false);
    this.use_top_n = false;
    setOffsetIsSet(false);
    this.offset = 0;
    setIs_default_limitIsSet(false);
    this.is_default_limit = false;
    setHas_outer_join_childIsSet(false);
    this.has_outer_join_child = false;
    this.analytic_partition_exprs = null;
    this.partition_exprs = null;
    setPartition_limitIsSet(false);
    this.partition_limit = 0;
    this.topn_type = null;
  }

  @org.apache.thrift.annotation.Nullable
  public TNormalSortInfo getSort_info() {
    return this.sort_info;
  }

  public TNormalSortNode setSort_info(@org.apache.thrift.annotation.Nullable TNormalSortInfo sort_info) {
    this.sort_info = sort_info;
    return this;
  }

  public void unsetSort_info() {
    this.sort_info = null;
  }

  /** Returns true if field sort_info is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_info() {
    return this.sort_info != null;
  }

  public void setSort_infoIsSet(boolean value) {
    if (!value) {
      this.sort_info = null;
    }
  }

  public boolean isUse_top_n() {
    return this.use_top_n;
  }

  public TNormalSortNode setUse_top_n(boolean use_top_n) {
    this.use_top_n = use_top_n;
    setUse_top_nIsSet(true);
    return this;
  }

  public void unsetUse_top_n() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_TOP_N_ISSET_ID);
  }

  /** Returns true if field use_top_n is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_top_n() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_TOP_N_ISSET_ID);
  }

  public void setUse_top_nIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_TOP_N_ISSET_ID, value);
  }

  public long getOffset() {
    return this.offset;
  }

  public TNormalSortNode setOffset(long offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public boolean isIs_default_limit() {
    return this.is_default_limit;
  }

  public TNormalSortNode setIs_default_limit(boolean is_default_limit) {
    this.is_default_limit = is_default_limit;
    setIs_default_limitIsSet(true);
    return this;
  }

  public void unsetIs_default_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_DEFAULT_LIMIT_ISSET_ID);
  }

  /** Returns true if field is_default_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_default_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_DEFAULT_LIMIT_ISSET_ID);
  }

  public void setIs_default_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_DEFAULT_LIMIT_ISSET_ID, value);
  }

  public boolean isHas_outer_join_child() {
    return this.has_outer_join_child;
  }

  public TNormalSortNode setHas_outer_join_child(boolean has_outer_join_child) {
    this.has_outer_join_child = has_outer_join_child;
    setHas_outer_join_childIsSet(true);
    return this;
  }

  public void unsetHas_outer_join_child() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HAS_OUTER_JOIN_CHILD_ISSET_ID);
  }

  /** Returns true if field has_outer_join_child is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_outer_join_child() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HAS_OUTER_JOIN_CHILD_ISSET_ID);
  }

  public void setHas_outer_join_childIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HAS_OUTER_JOIN_CHILD_ISSET_ID, value);
  }

  public int getAnalytic_partition_exprsSize() {
    return (this.analytic_partition_exprs == null) ? 0 : this.analytic_partition_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getAnalytic_partition_exprsIterator() {
    return (this.analytic_partition_exprs == null) ? null : this.analytic_partition_exprs.iterator();
  }

  public void addToAnalytic_partition_exprs(java.nio.ByteBuffer elem) {
    if (this.analytic_partition_exprs == null) {
      this.analytic_partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.analytic_partition_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getAnalytic_partition_exprs() {
    return this.analytic_partition_exprs;
  }

  public TNormalSortNode setAnalytic_partition_exprs(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> analytic_partition_exprs) {
    this.analytic_partition_exprs = analytic_partition_exprs;
    return this;
  }

  public void unsetAnalytic_partition_exprs() {
    this.analytic_partition_exprs = null;
  }

  /** Returns true if field analytic_partition_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalytic_partition_exprs() {
    return this.analytic_partition_exprs != null;
  }

  public void setAnalytic_partition_exprsIsSet(boolean value) {
    if (!value) {
      this.analytic_partition_exprs = null;
    }
  }

  public int getPartition_exprsSize() {
    return (this.partition_exprs == null) ? 0 : this.partition_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getPartition_exprsIterator() {
    return (this.partition_exprs == null) ? null : this.partition_exprs.iterator();
  }

  public void addToPartition_exprs(java.nio.ByteBuffer elem) {
    if (this.partition_exprs == null) {
      this.partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.partition_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getPartition_exprs() {
    return this.partition_exprs;
  }

  public TNormalSortNode setPartition_exprs(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> partition_exprs) {
    this.partition_exprs = partition_exprs;
    return this;
  }

  public void unsetPartition_exprs() {
    this.partition_exprs = null;
  }

  /** Returns true if field partition_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_exprs() {
    return this.partition_exprs != null;
  }

  public void setPartition_exprsIsSet(boolean value) {
    if (!value) {
      this.partition_exprs = null;
    }
  }

  public long getPartition_limit() {
    return this.partition_limit;
  }

  public TNormalSortNode setPartition_limit(long partition_limit) {
    this.partition_limit = partition_limit;
    setPartition_limitIsSet(true);
    return this;
  }

  public void unsetPartition_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_LIMIT_ISSET_ID);
  }

  /** Returns true if field partition_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_LIMIT_ISSET_ID);
  }

  public void setPartition_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_LIMIT_ISSET_ID, value);
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TTopNType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TTopNType getTopn_type() {
    return this.topn_type;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TTopNType
   */
  public TNormalSortNode setTopn_type(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTopNType topn_type) {
    this.topn_type = topn_type;
    return this;
  }

  public void unsetTopn_type() {
    this.topn_type = null;
  }

  /** Returns true if field topn_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTopn_type() {
    return this.topn_type != null;
  }

  public void setTopn_typeIsSet(boolean value) {
    if (!value) {
      this.topn_type = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SORT_INFO:
      if (value == null) {
        unsetSort_info();
      } else {
        setSort_info((TNormalSortInfo)value);
      }
      break;

    case USE_TOP_N:
      if (value == null) {
        unsetUse_top_n();
      } else {
        setUse_top_n((java.lang.Boolean)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((java.lang.Long)value);
      }
      break;

    case IS_DEFAULT_LIMIT:
      if (value == null) {
        unsetIs_default_limit();
      } else {
        setIs_default_limit((java.lang.Boolean)value);
      }
      break;

    case HAS_OUTER_JOIN_CHILD:
      if (value == null) {
        unsetHas_outer_join_child();
      } else {
        setHas_outer_join_child((java.lang.Boolean)value);
      }
      break;

    case ANALYTIC_PARTITION_EXPRS:
      if (value == null) {
        unsetAnalytic_partition_exprs();
      } else {
        setAnalytic_partition_exprs((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case PARTITION_EXPRS:
      if (value == null) {
        unsetPartition_exprs();
      } else {
        setPartition_exprs((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case PARTITION_LIMIT:
      if (value == null) {
        unsetPartition_limit();
      } else {
        setPartition_limit((java.lang.Long)value);
      }
      break;

    case TOPN_TYPE:
      if (value == null) {
        unsetTopn_type();
      } else {
        setTopn_type((io.datafibre.fibre.thrift.TTopNType)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SORT_INFO:
      return getSort_info();

    case USE_TOP_N:
      return isUse_top_n();

    case OFFSET:
      return getOffset();

    case IS_DEFAULT_LIMIT:
      return isIs_default_limit();

    case HAS_OUTER_JOIN_CHILD:
      return isHas_outer_join_child();

    case ANALYTIC_PARTITION_EXPRS:
      return getAnalytic_partition_exprs();

    case PARTITION_EXPRS:
      return getPartition_exprs();

    case PARTITION_LIMIT:
      return getPartition_limit();

    case TOPN_TYPE:
      return getTopn_type();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SORT_INFO:
      return isSetSort_info();
    case USE_TOP_N:
      return isSetUse_top_n();
    case OFFSET:
      return isSetOffset();
    case IS_DEFAULT_LIMIT:
      return isSetIs_default_limit();
    case HAS_OUTER_JOIN_CHILD:
      return isSetHas_outer_join_child();
    case ANALYTIC_PARTITION_EXPRS:
      return isSetAnalytic_partition_exprs();
    case PARTITION_EXPRS:
      return isSetPartition_exprs();
    case PARTITION_LIMIT:
      return isSetPartition_limit();
    case TOPN_TYPE:
      return isSetTopn_type();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TNormalSortNode)
      return this.equals((TNormalSortNode)that);
    return false;
  }

  public boolean equals(TNormalSortNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sort_info = true && this.isSetSort_info();
    boolean that_present_sort_info = true && that.isSetSort_info();
    if (this_present_sort_info || that_present_sort_info) {
      if (!(this_present_sort_info && that_present_sort_info))
        return false;
      if (!this.sort_info.equals(that.sort_info))
        return false;
    }

    boolean this_present_use_top_n = true && this.isSetUse_top_n();
    boolean that_present_use_top_n = true && that.isSetUse_top_n();
    if (this_present_use_top_n || that_present_use_top_n) {
      if (!(this_present_use_top_n && that_present_use_top_n))
        return false;
      if (this.use_top_n != that.use_top_n)
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_is_default_limit = true && this.isSetIs_default_limit();
    boolean that_present_is_default_limit = true && that.isSetIs_default_limit();
    if (this_present_is_default_limit || that_present_is_default_limit) {
      if (!(this_present_is_default_limit && that_present_is_default_limit))
        return false;
      if (this.is_default_limit != that.is_default_limit)
        return false;
    }

    boolean this_present_has_outer_join_child = true && this.isSetHas_outer_join_child();
    boolean that_present_has_outer_join_child = true && that.isSetHas_outer_join_child();
    if (this_present_has_outer_join_child || that_present_has_outer_join_child) {
      if (!(this_present_has_outer_join_child && that_present_has_outer_join_child))
        return false;
      if (this.has_outer_join_child != that.has_outer_join_child)
        return false;
    }

    boolean this_present_analytic_partition_exprs = true && this.isSetAnalytic_partition_exprs();
    boolean that_present_analytic_partition_exprs = true && that.isSetAnalytic_partition_exprs();
    if (this_present_analytic_partition_exprs || that_present_analytic_partition_exprs) {
      if (!(this_present_analytic_partition_exprs && that_present_analytic_partition_exprs))
        return false;
      if (!this.analytic_partition_exprs.equals(that.analytic_partition_exprs))
        return false;
    }

    boolean this_present_partition_exprs = true && this.isSetPartition_exprs();
    boolean that_present_partition_exprs = true && that.isSetPartition_exprs();
    if (this_present_partition_exprs || that_present_partition_exprs) {
      if (!(this_present_partition_exprs && that_present_partition_exprs))
        return false;
      if (!this.partition_exprs.equals(that.partition_exprs))
        return false;
    }

    boolean this_present_partition_limit = true && this.isSetPartition_limit();
    boolean that_present_partition_limit = true && that.isSetPartition_limit();
    if (this_present_partition_limit || that_present_partition_limit) {
      if (!(this_present_partition_limit && that_present_partition_limit))
        return false;
      if (this.partition_limit != that.partition_limit)
        return false;
    }

    boolean this_present_topn_type = true && this.isSetTopn_type();
    boolean that_present_topn_type = true && that.isSetTopn_type();
    if (this_present_topn_type || that_present_topn_type) {
      if (!(this_present_topn_type && that_present_topn_type))
        return false;
      if (!this.topn_type.equals(that.topn_type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSort_info()) ? 131071 : 524287);
    if (isSetSort_info())
      hashCode = hashCode * 8191 + sort_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetUse_top_n()) ? 131071 : 524287);
    if (isSetUse_top_n())
      hashCode = hashCode * 8191 + ((use_top_n) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetOffset()) ? 131071 : 524287);
    if (isSetOffset())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(offset);

    hashCode = hashCode * 8191 + ((isSetIs_default_limit()) ? 131071 : 524287);
    if (isSetIs_default_limit())
      hashCode = hashCode * 8191 + ((is_default_limit) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetHas_outer_join_child()) ? 131071 : 524287);
    if (isSetHas_outer_join_child())
      hashCode = hashCode * 8191 + ((has_outer_join_child) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAnalytic_partition_exprs()) ? 131071 : 524287);
    if (isSetAnalytic_partition_exprs())
      hashCode = hashCode * 8191 + analytic_partition_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_exprs()) ? 131071 : 524287);
    if (isSetPartition_exprs())
      hashCode = hashCode * 8191 + partition_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_limit()) ? 131071 : 524287);
    if (isSetPartition_limit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_limit);

    hashCode = hashCode * 8191 + ((isSetTopn_type()) ? 131071 : 524287);
    if (isSetTopn_type())
      hashCode = hashCode * 8191 + topn_type.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TNormalSortNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSort_info(), other.isSetSort_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_info, other.sort_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_top_n(), other.isSetUse_top_n());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_top_n()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_top_n, other.use_top_n);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOffset(), other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_default_limit(), other.isSetIs_default_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_default_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_default_limit, other.is_default_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHas_outer_join_child(), other.isSetHas_outer_join_child());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_outer_join_child()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_outer_join_child, other.has_outer_join_child);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAnalytic_partition_exprs(), other.isSetAnalytic_partition_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalytic_partition_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analytic_partition_exprs, other.analytic_partition_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_exprs(), other.isSetPartition_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_exprs, other.partition_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_limit(), other.isSetPartition_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_limit, other.partition_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTopn_type(), other.isSetTopn_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopn_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topn_type, other.topn_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TNormalSortNode(");
    boolean first = true;

    if (isSetSort_info()) {
      sb.append("sort_info:");
      if (this.sort_info == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_info);
      }
      first = false;
    }
    if (isSetUse_top_n()) {
      if (!first) sb.append(", ");
      sb.append("use_top_n:");
      sb.append(this.use_top_n);
      first = false;
    }
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetIs_default_limit()) {
      if (!first) sb.append(", ");
      sb.append("is_default_limit:");
      sb.append(this.is_default_limit);
      first = false;
    }
    if (isSetHas_outer_join_child()) {
      if (!first) sb.append(", ");
      sb.append("has_outer_join_child:");
      sb.append(this.has_outer_join_child);
      first = false;
    }
    if (isSetAnalytic_partition_exprs()) {
      if (!first) sb.append(", ");
      sb.append("analytic_partition_exprs:");
      if (this.analytic_partition_exprs == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.analytic_partition_exprs, sb);
      }
      first = false;
    }
    if (isSetPartition_exprs()) {
      if (!first) sb.append(", ");
      sb.append("partition_exprs:");
      if (this.partition_exprs == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.partition_exprs, sb);
      }
      first = false;
    }
    if (isSetPartition_limit()) {
      if (!first) sb.append(", ");
      sb.append("partition_limit:");
      sb.append(this.partition_limit);
      first = false;
    }
    if (isSetTopn_type()) {
      if (!first) sb.append(", ");
      sb.append("topn_type:");
      if (this.topn_type == null) {
        sb.append("null");
      } else {
        sb.append(this.topn_type);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (sort_info != null) {
      sort_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNormalSortNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalSortNodeStandardScheme getScheme() {
      return new TNormalSortNodeStandardScheme();
    }
  }

  private static class TNormalSortNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TNormalSortNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TNormalSortNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SORT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sort_info = new TNormalSortInfo();
              struct.sort_info.read(iprot);
              struct.setSort_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USE_TOP_N
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_top_n = iprot.readBool();
              struct.setUse_top_nIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset = iprot.readI64();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_DEFAULT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_default_limit = iprot.readBool();
              struct.setIs_default_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HAS_OUTER_JOIN_CHILD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_outer_join_child = iprot.readBool();
              struct.setHas_outer_join_childIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ANALYTIC_PARTITION_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list328 = iprot.readListBegin();
                struct.analytic_partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list328.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem329;
                for (int _i330 = 0; _i330 < _list328.size; ++_i330)
                {
                  _elem329 = iprot.readBinary();
                  struct.analytic_partition_exprs.add(_elem329);
                }
                iprot.readListEnd();
              }
              struct.setAnalytic_partition_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARTITION_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list331 = iprot.readListBegin();
                struct.partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list331.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem332;
                for (int _i333 = 0; _i333 < _list331.size; ++_i333)
                {
                  _elem332 = iprot.readBinary();
                  struct.partition_exprs.add(_elem332);
                }
                iprot.readListEnd();
              }
              struct.setPartition_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARTITION_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_limit = iprot.readI64();
              struct.setPartition_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOPN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.topn_type = io.datafibre.fibre.thrift.TTopNType.findByValue(iprot.readI32());
              struct.setTopn_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TNormalSortNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sort_info != null) {
        if (struct.isSetSort_info()) {
          oprot.writeFieldBegin(SORT_INFO_FIELD_DESC);
          struct.sort_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUse_top_n()) {
        oprot.writeFieldBegin(USE_TOP_N_FIELD_DESC);
        oprot.writeBool(struct.use_top_n);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI64(struct.offset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_default_limit()) {
        oprot.writeFieldBegin(IS_DEFAULT_LIMIT_FIELD_DESC);
        oprot.writeBool(struct.is_default_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHas_outer_join_child()) {
        oprot.writeFieldBegin(HAS_OUTER_JOIN_CHILD_FIELD_DESC);
        oprot.writeBool(struct.has_outer_join_child);
        oprot.writeFieldEnd();
      }
      if (struct.analytic_partition_exprs != null) {
        if (struct.isSetAnalytic_partition_exprs()) {
          oprot.writeFieldBegin(ANALYTIC_PARTITION_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.analytic_partition_exprs.size()));
            for (java.nio.ByteBuffer _iter334 : struct.analytic_partition_exprs)
            {
              oprot.writeBinary(_iter334);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_exprs != null) {
        if (struct.isSetPartition_exprs()) {
          oprot.writeFieldBegin(PARTITION_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.partition_exprs.size()));
            for (java.nio.ByteBuffer _iter335 : struct.partition_exprs)
            {
              oprot.writeBinary(_iter335);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPartition_limit()) {
        oprot.writeFieldBegin(PARTITION_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.partition_limit);
        oprot.writeFieldEnd();
      }
      if (struct.topn_type != null) {
        if (struct.isSetTopn_type()) {
          oprot.writeFieldBegin(TOPN_TYPE_FIELD_DESC);
          oprot.writeI32(struct.topn_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNormalSortNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalSortNodeTupleScheme getScheme() {
      return new TNormalSortNodeTupleScheme();
    }
  }

  private static class TNormalSortNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TNormalSortNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNormalSortNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSort_info()) {
        optionals.set(0);
      }
      if (struct.isSetUse_top_n()) {
        optionals.set(1);
      }
      if (struct.isSetOffset()) {
        optionals.set(2);
      }
      if (struct.isSetIs_default_limit()) {
        optionals.set(3);
      }
      if (struct.isSetHas_outer_join_child()) {
        optionals.set(4);
      }
      if (struct.isSetAnalytic_partition_exprs()) {
        optionals.set(5);
      }
      if (struct.isSetPartition_exprs()) {
        optionals.set(6);
      }
      if (struct.isSetPartition_limit()) {
        optionals.set(7);
      }
      if (struct.isSetTopn_type()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetSort_info()) {
        struct.sort_info.write(oprot);
      }
      if (struct.isSetUse_top_n()) {
        oprot.writeBool(struct.use_top_n);
      }
      if (struct.isSetOffset()) {
        oprot.writeI64(struct.offset);
      }
      if (struct.isSetIs_default_limit()) {
        oprot.writeBool(struct.is_default_limit);
      }
      if (struct.isSetHas_outer_join_child()) {
        oprot.writeBool(struct.has_outer_join_child);
      }
      if (struct.isSetAnalytic_partition_exprs()) {
        {
          oprot.writeI32(struct.analytic_partition_exprs.size());
          for (java.nio.ByteBuffer _iter336 : struct.analytic_partition_exprs)
          {
            oprot.writeBinary(_iter336);
          }
        }
      }
      if (struct.isSetPartition_exprs()) {
        {
          oprot.writeI32(struct.partition_exprs.size());
          for (java.nio.ByteBuffer _iter337 : struct.partition_exprs)
          {
            oprot.writeBinary(_iter337);
          }
        }
      }
      if (struct.isSetPartition_limit()) {
        oprot.writeI64(struct.partition_limit);
      }
      if (struct.isSetTopn_type()) {
        oprot.writeI32(struct.topn_type.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNormalSortNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.sort_info = new TNormalSortInfo();
        struct.sort_info.read(iprot);
        struct.setSort_infoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.use_top_n = iprot.readBool();
        struct.setUse_top_nIsSet(true);
      }
      if (incoming.get(2)) {
        struct.offset = iprot.readI64();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_default_limit = iprot.readBool();
        struct.setIs_default_limitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.has_outer_join_child = iprot.readBool();
        struct.setHas_outer_join_childIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list338 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.analytic_partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list338.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem339;
          for (int _i340 = 0; _i340 < _list338.size; ++_i340)
          {
            _elem339 = iprot.readBinary();
            struct.analytic_partition_exprs.add(_elem339);
          }
        }
        struct.setAnalytic_partition_exprsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list341 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.partition_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list341.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem342;
          for (int _i343 = 0; _i343 < _list341.size; ++_i343)
          {
            _elem342 = iprot.readBinary();
            struct.partition_exprs.add(_elem342);
          }
        }
        struct.setPartition_exprsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.partition_limit = iprot.readI64();
        struct.setPartition_limitIsSet(true);
      }
      if (incoming.get(8)) {
        struct.topn_type = io.datafibre.fibre.thrift.TTopNType.findByValue(iprot.readI32());
        struct.setTopn_typeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

