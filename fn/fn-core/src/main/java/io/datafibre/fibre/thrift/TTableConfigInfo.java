/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TTableConfigInfo implements org.apache.thrift.TBase<TTableConfigInfo, TTableConfigInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TTableConfigInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableConfigInfo");

  private static final org.apache.thrift.protocol.TField TABLE_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("table_schema", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_ENGINE_FIELD_DESC = new org.apache.thrift.protocol.TField("table_engine", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TABLE_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("table_model", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRIMARY_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("primary_key", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PARTITION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_key", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DISTRIBUTE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("distribute_key", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DISTRIBUTE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("distribute_type", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DISTRIBUTE_BUCKET_FIELD_DESC = new org.apache.thrift.protocol.TField("distribute_bucket", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SORT_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_key", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I64, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTableConfigInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTableConfigInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String table_schema; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_engine; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_model; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String primary_key; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String partition_key; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String distribute_key; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String distribute_type; // optional
  public int distribute_bucket; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sort_key; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String properties; // optional
  public long table_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_SCHEMA((short)1, "table_schema"),
    TABLE_NAME((short)2, "table_name"),
    TABLE_ENGINE((short)3, "table_engine"),
    TABLE_MODEL((short)4, "table_model"),
    PRIMARY_KEY((short)5, "primary_key"),
    PARTITION_KEY((short)6, "partition_key"),
    DISTRIBUTE_KEY((short)7, "distribute_key"),
    DISTRIBUTE_TYPE((short)8, "distribute_type"),
    DISTRIBUTE_BUCKET((short)9, "distribute_bucket"),
    SORT_KEY((short)10, "sort_key"),
    PROPERTIES((short)11, "properties"),
    TABLE_ID((short)12, "table_id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_SCHEMA
          return TABLE_SCHEMA;
        case 2: // TABLE_NAME
          return TABLE_NAME;
        case 3: // TABLE_ENGINE
          return TABLE_ENGINE;
        case 4: // TABLE_MODEL
          return TABLE_MODEL;
        case 5: // PRIMARY_KEY
          return PRIMARY_KEY;
        case 6: // PARTITION_KEY
          return PARTITION_KEY;
        case 7: // DISTRIBUTE_KEY
          return DISTRIBUTE_KEY;
        case 8: // DISTRIBUTE_TYPE
          return DISTRIBUTE_TYPE;
        case 9: // DISTRIBUTE_BUCKET
          return DISTRIBUTE_BUCKET;
        case 10: // SORT_KEY
          return SORT_KEY;
        case 11: // PROPERTIES
          return PROPERTIES;
        case 12: // TABLE_ID
          return TABLE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DISTRIBUTE_BUCKET_ISSET_ID = 0;
  private static final int __TABLE_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TABLE_SCHEMA,_Fields.TABLE_NAME,_Fields.TABLE_ENGINE,_Fields.TABLE_MODEL,_Fields.PRIMARY_KEY,_Fields.PARTITION_KEY,_Fields.DISTRIBUTE_KEY,_Fields.DISTRIBUTE_TYPE,_Fields.DISTRIBUTE_BUCKET,_Fields.SORT_KEY,_Fields.PROPERTIES,_Fields.TABLE_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("table_schema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_ENGINE, new org.apache.thrift.meta_data.FieldMetaData("table_engine", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_MODEL, new org.apache.thrift.meta_data.FieldMetaData("table_model", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIMARY_KEY, new org.apache.thrift.meta_data.FieldMetaData("primary_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION_KEY, new org.apache.thrift.meta_data.FieldMetaData("partition_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTRIBUTE_KEY, new org.apache.thrift.meta_data.FieldMetaData("distribute_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTRIBUTE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("distribute_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTRIBUTE_BUCKET, new org.apache.thrift.meta_data.FieldMetaData("distribute_bucket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SORT_KEY, new org.apache.thrift.meta_data.FieldMetaData("sort_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableConfigInfo.class, metaDataMap);
  }

  public TTableConfigInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableConfigInfo(TTableConfigInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTable_schema()) {
      this.table_schema = other.table_schema;
    }
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    if (other.isSetTable_engine()) {
      this.table_engine = other.table_engine;
    }
    if (other.isSetTable_model()) {
      this.table_model = other.table_model;
    }
    if (other.isSetPrimary_key()) {
      this.primary_key = other.primary_key;
    }
    if (other.isSetPartition_key()) {
      this.partition_key = other.partition_key;
    }
    if (other.isSetDistribute_key()) {
      this.distribute_key = other.distribute_key;
    }
    if (other.isSetDistribute_type()) {
      this.distribute_type = other.distribute_type;
    }
    this.distribute_bucket = other.distribute_bucket;
    if (other.isSetSort_key()) {
      this.sort_key = other.sort_key;
    }
    if (other.isSetProperties()) {
      this.properties = other.properties;
    }
    this.table_id = other.table_id;
  }

  @Override
  public TTableConfigInfo deepCopy() {
    return new TTableConfigInfo(this);
  }

  @Override
  public void clear() {
    this.table_schema = null;
    this.table_name = null;
    this.table_engine = null;
    this.table_model = null;
    this.primary_key = null;
    this.partition_key = null;
    this.distribute_key = null;
    this.distribute_type = null;
    setDistribute_bucketIsSet(false);
    this.distribute_bucket = 0;
    this.sort_key = null;
    this.properties = null;
    setTable_idIsSet(false);
    this.table_id = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_schema() {
    return this.table_schema;
  }

  public TTableConfigInfo setTable_schema(@org.apache.thrift.annotation.Nullable java.lang.String table_schema) {
    this.table_schema = table_schema;
    return this;
  }

  public void unsetTable_schema() {
    this.table_schema = null;
  }

  /** Returns true if field table_schema is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_schema() {
    return this.table_schema != null;
  }

  public void setTable_schemaIsSet(boolean value) {
    if (!value) {
      this.table_schema = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_name() {
    return this.table_name;
  }

  public TTableConfigInfo setTable_name(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_engine() {
    return this.table_engine;
  }

  public TTableConfigInfo setTable_engine(@org.apache.thrift.annotation.Nullable java.lang.String table_engine) {
    this.table_engine = table_engine;
    return this;
  }

  public void unsetTable_engine() {
    this.table_engine = null;
  }

  /** Returns true if field table_engine is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_engine() {
    return this.table_engine != null;
  }

  public void setTable_engineIsSet(boolean value) {
    if (!value) {
      this.table_engine = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_model() {
    return this.table_model;
  }

  public TTableConfigInfo setTable_model(@org.apache.thrift.annotation.Nullable java.lang.String table_model) {
    this.table_model = table_model;
    return this;
  }

  public void unsetTable_model() {
    this.table_model = null;
  }

  /** Returns true if field table_model is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_model() {
    return this.table_model != null;
  }

  public void setTable_modelIsSet(boolean value) {
    if (!value) {
      this.table_model = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPrimary_key() {
    return this.primary_key;
  }

  public TTableConfigInfo setPrimary_key(@org.apache.thrift.annotation.Nullable java.lang.String primary_key) {
    this.primary_key = primary_key;
    return this;
  }

  public void unsetPrimary_key() {
    this.primary_key = null;
  }

  /** Returns true if field primary_key is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimary_key() {
    return this.primary_key != null;
  }

  public void setPrimary_keyIsSet(boolean value) {
    if (!value) {
      this.primary_key = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartition_key() {
    return this.partition_key;
  }

  public TTableConfigInfo setPartition_key(@org.apache.thrift.annotation.Nullable java.lang.String partition_key) {
    this.partition_key = partition_key;
    return this;
  }

  public void unsetPartition_key() {
    this.partition_key = null;
  }

  /** Returns true if field partition_key is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_key() {
    return this.partition_key != null;
  }

  public void setPartition_keyIsSet(boolean value) {
    if (!value) {
      this.partition_key = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDistribute_key() {
    return this.distribute_key;
  }

  public TTableConfigInfo setDistribute_key(@org.apache.thrift.annotation.Nullable java.lang.String distribute_key) {
    this.distribute_key = distribute_key;
    return this;
  }

  public void unsetDistribute_key() {
    this.distribute_key = null;
  }

  /** Returns true if field distribute_key is set (has been assigned a value) and false otherwise */
  public boolean isSetDistribute_key() {
    return this.distribute_key != null;
  }

  public void setDistribute_keyIsSet(boolean value) {
    if (!value) {
      this.distribute_key = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDistribute_type() {
    return this.distribute_type;
  }

  public TTableConfigInfo setDistribute_type(@org.apache.thrift.annotation.Nullable java.lang.String distribute_type) {
    this.distribute_type = distribute_type;
    return this;
  }

  public void unsetDistribute_type() {
    this.distribute_type = null;
  }

  /** Returns true if field distribute_type is set (has been assigned a value) and false otherwise */
  public boolean isSetDistribute_type() {
    return this.distribute_type != null;
  }

  public void setDistribute_typeIsSet(boolean value) {
    if (!value) {
      this.distribute_type = null;
    }
  }

  public int getDistribute_bucket() {
    return this.distribute_bucket;
  }

  public TTableConfigInfo setDistribute_bucket(int distribute_bucket) {
    this.distribute_bucket = distribute_bucket;
    setDistribute_bucketIsSet(true);
    return this;
  }

  public void unsetDistribute_bucket() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISTRIBUTE_BUCKET_ISSET_ID);
  }

  /** Returns true if field distribute_bucket is set (has been assigned a value) and false otherwise */
  public boolean isSetDistribute_bucket() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISTRIBUTE_BUCKET_ISSET_ID);
  }

  public void setDistribute_bucketIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISTRIBUTE_BUCKET_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSort_key() {
    return this.sort_key;
  }

  public TTableConfigInfo setSort_key(@org.apache.thrift.annotation.Nullable java.lang.String sort_key) {
    this.sort_key = sort_key;
    return this;
  }

  public void unsetSort_key() {
    this.sort_key = null;
  }

  /** Returns true if field sort_key is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_key() {
    return this.sort_key != null;
  }

  public void setSort_keyIsSet(boolean value) {
    if (!value) {
      this.sort_key = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getProperties() {
    return this.properties;
  }

  public TTableConfigInfo setProperties(@org.apache.thrift.annotation.Nullable java.lang.String properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public long getTable_id() {
    return this.table_id;
  }

  public TTableConfigInfo setTable_id(long table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLE_SCHEMA:
      if (value == null) {
        unsetTable_schema();
      } else {
        setTable_schema((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((java.lang.String)value);
      }
      break;

    case TABLE_ENGINE:
      if (value == null) {
        unsetTable_engine();
      } else {
        setTable_engine((java.lang.String)value);
      }
      break;

    case TABLE_MODEL:
      if (value == null) {
        unsetTable_model();
      } else {
        setTable_model((java.lang.String)value);
      }
      break;

    case PRIMARY_KEY:
      if (value == null) {
        unsetPrimary_key();
      } else {
        setPrimary_key((java.lang.String)value);
      }
      break;

    case PARTITION_KEY:
      if (value == null) {
        unsetPartition_key();
      } else {
        setPartition_key((java.lang.String)value);
      }
      break;

    case DISTRIBUTE_KEY:
      if (value == null) {
        unsetDistribute_key();
      } else {
        setDistribute_key((java.lang.String)value);
      }
      break;

    case DISTRIBUTE_TYPE:
      if (value == null) {
        unsetDistribute_type();
      } else {
        setDistribute_type((java.lang.String)value);
      }
      break;

    case DISTRIBUTE_BUCKET:
      if (value == null) {
        unsetDistribute_bucket();
      } else {
        setDistribute_bucket((java.lang.Integer)value);
      }
      break;

    case SORT_KEY:
      if (value == null) {
        unsetSort_key();
      } else {
        setSort_key((java.lang.String)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.lang.String)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_SCHEMA:
      return getTable_schema();

    case TABLE_NAME:
      return getTable_name();

    case TABLE_ENGINE:
      return getTable_engine();

    case TABLE_MODEL:
      return getTable_model();

    case PRIMARY_KEY:
      return getPrimary_key();

    case PARTITION_KEY:
      return getPartition_key();

    case DISTRIBUTE_KEY:
      return getDistribute_key();

    case DISTRIBUTE_TYPE:
      return getDistribute_type();

    case DISTRIBUTE_BUCKET:
      return getDistribute_bucket();

    case SORT_KEY:
      return getSort_key();

    case PROPERTIES:
      return getProperties();

    case TABLE_ID:
      return getTable_id();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLE_SCHEMA:
      return isSetTable_schema();
    case TABLE_NAME:
      return isSetTable_name();
    case TABLE_ENGINE:
      return isSetTable_engine();
    case TABLE_MODEL:
      return isSetTable_model();
    case PRIMARY_KEY:
      return isSetPrimary_key();
    case PARTITION_KEY:
      return isSetPartition_key();
    case DISTRIBUTE_KEY:
      return isSetDistribute_key();
    case DISTRIBUTE_TYPE:
      return isSetDistribute_type();
    case DISTRIBUTE_BUCKET:
      return isSetDistribute_bucket();
    case SORT_KEY:
      return isSetSort_key();
    case PROPERTIES:
      return isSetProperties();
    case TABLE_ID:
      return isSetTable_id();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTableConfigInfo)
      return this.equals((TTableConfigInfo)that);
    return false;
  }

  public boolean equals(TTableConfigInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_table_schema = true && this.isSetTable_schema();
    boolean that_present_table_schema = true && that.isSetTable_schema();
    if (this_present_table_schema || that_present_table_schema) {
      if (!(this_present_table_schema && that_present_table_schema))
        return false;
      if (!this.table_schema.equals(that.table_schema))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_table_engine = true && this.isSetTable_engine();
    boolean that_present_table_engine = true && that.isSetTable_engine();
    if (this_present_table_engine || that_present_table_engine) {
      if (!(this_present_table_engine && that_present_table_engine))
        return false;
      if (!this.table_engine.equals(that.table_engine))
        return false;
    }

    boolean this_present_table_model = true && this.isSetTable_model();
    boolean that_present_table_model = true && that.isSetTable_model();
    if (this_present_table_model || that_present_table_model) {
      if (!(this_present_table_model && that_present_table_model))
        return false;
      if (!this.table_model.equals(that.table_model))
        return false;
    }

    boolean this_present_primary_key = true && this.isSetPrimary_key();
    boolean that_present_primary_key = true && that.isSetPrimary_key();
    if (this_present_primary_key || that_present_primary_key) {
      if (!(this_present_primary_key && that_present_primary_key))
        return false;
      if (!this.primary_key.equals(that.primary_key))
        return false;
    }

    boolean this_present_partition_key = true && this.isSetPartition_key();
    boolean that_present_partition_key = true && that.isSetPartition_key();
    if (this_present_partition_key || that_present_partition_key) {
      if (!(this_present_partition_key && that_present_partition_key))
        return false;
      if (!this.partition_key.equals(that.partition_key))
        return false;
    }

    boolean this_present_distribute_key = true && this.isSetDistribute_key();
    boolean that_present_distribute_key = true && that.isSetDistribute_key();
    if (this_present_distribute_key || that_present_distribute_key) {
      if (!(this_present_distribute_key && that_present_distribute_key))
        return false;
      if (!this.distribute_key.equals(that.distribute_key))
        return false;
    }

    boolean this_present_distribute_type = true && this.isSetDistribute_type();
    boolean that_present_distribute_type = true && that.isSetDistribute_type();
    if (this_present_distribute_type || that_present_distribute_type) {
      if (!(this_present_distribute_type && that_present_distribute_type))
        return false;
      if (!this.distribute_type.equals(that.distribute_type))
        return false;
    }

    boolean this_present_distribute_bucket = true && this.isSetDistribute_bucket();
    boolean that_present_distribute_bucket = true && that.isSetDistribute_bucket();
    if (this_present_distribute_bucket || that_present_distribute_bucket) {
      if (!(this_present_distribute_bucket && that_present_distribute_bucket))
        return false;
      if (this.distribute_bucket != that.distribute_bucket)
        return false;
    }

    boolean this_present_sort_key = true && this.isSetSort_key();
    boolean that_present_sort_key = true && that.isSetSort_key();
    if (this_present_sort_key || that_present_sort_key) {
      if (!(this_present_sort_key && that_present_sort_key))
        return false;
      if (!this.sort_key.equals(that.sort_key))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_table_id = true && this.isSetTable_id();
    boolean that_present_table_id = true && that.isSetTable_id();
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTable_schema()) ? 131071 : 524287);
    if (isSetTable_schema())
      hashCode = hashCode * 8191 + table_schema.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_engine()) ? 131071 : 524287);
    if (isSetTable_engine())
      hashCode = hashCode * 8191 + table_engine.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_model()) ? 131071 : 524287);
    if (isSetTable_model())
      hashCode = hashCode * 8191 + table_model.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrimary_key()) ? 131071 : 524287);
    if (isSetPrimary_key())
      hashCode = hashCode * 8191 + primary_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_key()) ? 131071 : 524287);
    if (isSetPartition_key())
      hashCode = hashCode * 8191 + partition_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetDistribute_key()) ? 131071 : 524287);
    if (isSetDistribute_key())
      hashCode = hashCode * 8191 + distribute_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetDistribute_type()) ? 131071 : 524287);
    if (isSetDistribute_type())
      hashCode = hashCode * 8191 + distribute_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetDistribute_bucket()) ? 131071 : 524287);
    if (isSetDistribute_bucket())
      hashCode = hashCode * 8191 + distribute_bucket;

    hashCode = hashCode * 8191 + ((isSetSort_key()) ? 131071 : 524287);
    if (isSetSort_key())
      hashCode = hashCode * 8191 + sort_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_id()) ? 131071 : 524287);
    if (isSetTable_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_id);

    return hashCode;
  }

  @Override
  public int compareTo(TTableConfigInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTable_schema(), other.isSetTable_schema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_schema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_schema, other.table_schema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_name(), other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_engine(), other.isSetTable_engine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_engine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_engine, other.table_engine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_model(), other.isSetTable_model());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_model()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_model, other.table_model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPrimary_key(), other.isSetPrimary_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimary_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primary_key, other.primary_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_key(), other.isSetPartition_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_key, other.partition_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDistribute_key(), other.isSetDistribute_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistribute_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distribute_key, other.distribute_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDistribute_type(), other.isSetDistribute_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistribute_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distribute_type, other.distribute_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDistribute_bucket(), other.isSetDistribute_bucket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistribute_bucket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distribute_bucket, other.distribute_bucket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSort_key(), other.isSetSort_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_key, other.sort_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProperties(), other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_id(), other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTableConfigInfo(");
    boolean first = true;

    if (isSetTable_schema()) {
      sb.append("table_schema:");
      if (this.table_schema == null) {
        sb.append("null");
      } else {
        sb.append(this.table_schema);
      }
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetTable_engine()) {
      if (!first) sb.append(", ");
      sb.append("table_engine:");
      if (this.table_engine == null) {
        sb.append("null");
      } else {
        sb.append(this.table_engine);
      }
      first = false;
    }
    if (isSetTable_model()) {
      if (!first) sb.append(", ");
      sb.append("table_model:");
      if (this.table_model == null) {
        sb.append("null");
      } else {
        sb.append(this.table_model);
      }
      first = false;
    }
    if (isSetPrimary_key()) {
      if (!first) sb.append(", ");
      sb.append("primary_key:");
      if (this.primary_key == null) {
        sb.append("null");
      } else {
        sb.append(this.primary_key);
      }
      first = false;
    }
    if (isSetPartition_key()) {
      if (!first) sb.append(", ");
      sb.append("partition_key:");
      if (this.partition_key == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_key);
      }
      first = false;
    }
    if (isSetDistribute_key()) {
      if (!first) sb.append(", ");
      sb.append("distribute_key:");
      if (this.distribute_key == null) {
        sb.append("null");
      } else {
        sb.append(this.distribute_key);
      }
      first = false;
    }
    if (isSetDistribute_type()) {
      if (!first) sb.append(", ");
      sb.append("distribute_type:");
      if (this.distribute_type == null) {
        sb.append("null");
      } else {
        sb.append(this.distribute_type);
      }
      first = false;
    }
    if (isSetDistribute_bucket()) {
      if (!first) sb.append(", ");
      sb.append("distribute_bucket:");
      sb.append(this.distribute_bucket);
      first = false;
    }
    if (isSetSort_key()) {
      if (!first) sb.append(", ");
      sb.append("sort_key:");
      if (this.sort_key == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_key);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    if (isSetTable_id()) {
      if (!first) sb.append(", ");
      sb.append("table_id:");
      sb.append(this.table_id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableConfigInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTableConfigInfoStandardScheme getScheme() {
      return new TTableConfigInfoStandardScheme();
    }
  }

  private static class TTableConfigInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTableConfigInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableConfigInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_schema = iprot.readString();
              struct.setTable_schemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_ENGINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_engine = iprot.readString();
              struct.setTable_engineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLE_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_model = iprot.readString();
              struct.setTable_modelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRIMARY_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.primary_key = iprot.readString();
              struct.setPrimary_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARTITION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partition_key = iprot.readString();
              struct.setPartition_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DISTRIBUTE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.distribute_key = iprot.readString();
              struct.setDistribute_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DISTRIBUTE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.distribute_type = iprot.readString();
              struct.setDistribute_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DISTRIBUTE_BUCKET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.distribute_bucket = iprot.readI32();
              struct.setDistribute_bucketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SORT_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sort_key = iprot.readString();
              struct.setSort_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.properties = iprot.readString();
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_id = iprot.readI64();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableConfigInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_schema != null) {
        if (struct.isSetTable_schema()) {
          oprot.writeFieldBegin(TABLE_SCHEMA_FIELD_DESC);
          oprot.writeString(struct.table_schema);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_engine != null) {
        if (struct.isSetTable_engine()) {
          oprot.writeFieldBegin(TABLE_ENGINE_FIELD_DESC);
          oprot.writeString(struct.table_engine);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_model != null) {
        if (struct.isSetTable_model()) {
          oprot.writeFieldBegin(TABLE_MODEL_FIELD_DESC);
          oprot.writeString(struct.table_model);
          oprot.writeFieldEnd();
        }
      }
      if (struct.primary_key != null) {
        if (struct.isSetPrimary_key()) {
          oprot.writeFieldBegin(PRIMARY_KEY_FIELD_DESC);
          oprot.writeString(struct.primary_key);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_key != null) {
        if (struct.isSetPartition_key()) {
          oprot.writeFieldBegin(PARTITION_KEY_FIELD_DESC);
          oprot.writeString(struct.partition_key);
          oprot.writeFieldEnd();
        }
      }
      if (struct.distribute_key != null) {
        if (struct.isSetDistribute_key()) {
          oprot.writeFieldBegin(DISTRIBUTE_KEY_FIELD_DESC);
          oprot.writeString(struct.distribute_key);
          oprot.writeFieldEnd();
        }
      }
      if (struct.distribute_type != null) {
        if (struct.isSetDistribute_type()) {
          oprot.writeFieldBegin(DISTRIBUTE_TYPE_FIELD_DESC);
          oprot.writeString(struct.distribute_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDistribute_bucket()) {
        oprot.writeFieldBegin(DISTRIBUTE_BUCKET_FIELD_DESC);
        oprot.writeI32(struct.distribute_bucket);
        oprot.writeFieldEnd();
      }
      if (struct.sort_key != null) {
        if (struct.isSetSort_key()) {
          oprot.writeFieldBegin(SORT_KEY_FIELD_DESC);
          oprot.writeString(struct.sort_key);
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          oprot.writeString(struct.properties);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTable_id()) {
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeI64(struct.table_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableConfigInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTableConfigInfoTupleScheme getScheme() {
      return new TTableConfigInfoTupleScheme();
    }
  }

  private static class TTableConfigInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTableConfigInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableConfigInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTable_schema()) {
        optionals.set(0);
      }
      if (struct.isSetTable_name()) {
        optionals.set(1);
      }
      if (struct.isSetTable_engine()) {
        optionals.set(2);
      }
      if (struct.isSetTable_model()) {
        optionals.set(3);
      }
      if (struct.isSetPrimary_key()) {
        optionals.set(4);
      }
      if (struct.isSetPartition_key()) {
        optionals.set(5);
      }
      if (struct.isSetDistribute_key()) {
        optionals.set(6);
      }
      if (struct.isSetDistribute_type()) {
        optionals.set(7);
      }
      if (struct.isSetDistribute_bucket()) {
        optionals.set(8);
      }
      if (struct.isSetSort_key()) {
        optionals.set(9);
      }
      if (struct.isSetProperties()) {
        optionals.set(10);
      }
      if (struct.isSetTable_id()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetTable_schema()) {
        oprot.writeString(struct.table_schema);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetTable_engine()) {
        oprot.writeString(struct.table_engine);
      }
      if (struct.isSetTable_model()) {
        oprot.writeString(struct.table_model);
      }
      if (struct.isSetPrimary_key()) {
        oprot.writeString(struct.primary_key);
      }
      if (struct.isSetPartition_key()) {
        oprot.writeString(struct.partition_key);
      }
      if (struct.isSetDistribute_key()) {
        oprot.writeString(struct.distribute_key);
      }
      if (struct.isSetDistribute_type()) {
        oprot.writeString(struct.distribute_type);
      }
      if (struct.isSetDistribute_bucket()) {
        oprot.writeI32(struct.distribute_bucket);
      }
      if (struct.isSetSort_key()) {
        oprot.writeString(struct.sort_key);
      }
      if (struct.isSetProperties()) {
        oprot.writeString(struct.properties);
      }
      if (struct.isSetTable_id()) {
        oprot.writeI64(struct.table_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableConfigInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.table_schema = iprot.readString();
        struct.setTable_schemaIsSet(true);
      }
      if (incoming.get(1)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.table_engine = iprot.readString();
        struct.setTable_engineIsSet(true);
      }
      if (incoming.get(3)) {
        struct.table_model = iprot.readString();
        struct.setTable_modelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.primary_key = iprot.readString();
        struct.setPrimary_keyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.partition_key = iprot.readString();
        struct.setPartition_keyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.distribute_key = iprot.readString();
        struct.setDistribute_keyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.distribute_type = iprot.readString();
        struct.setDistribute_typeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.distribute_bucket = iprot.readI32();
        struct.setDistribute_bucketIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sort_key = iprot.readString();
        struct.setSort_keyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.properties = iprot.readString();
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.table_id = iprot.readI64();
        struct.setTable_idIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

