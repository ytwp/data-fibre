/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TBatchReportExecStatusParams implements org.apache.thrift.TBase<TBatchReportExecStatusParams, TBatchReportExecStatusParams._Fields>, java.io.Serializable, Cloneable, Comparable<TBatchReportExecStatusParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBatchReportExecStatusParams");

  private static final org.apache.thrift.protocol.TField PARAMS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("params_list", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TBatchReportExecStatusParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TBatchReportExecStatusParamsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<TReportExecStatusParams> params_list; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARAMS_LIST((short)1, "params_list");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARAMS_LIST
          return PARAMS_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARAMS_LIST, new org.apache.thrift.meta_data.FieldMetaData("params_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TReportExecStatusParams.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBatchReportExecStatusParams.class, metaDataMap);
  }

  public TBatchReportExecStatusParams() {
  }

  public TBatchReportExecStatusParams(
    java.util.List<TReportExecStatusParams> params_list)
  {
    this();
    this.params_list = params_list;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBatchReportExecStatusParams(TBatchReportExecStatusParams other) {
    if (other.isSetParams_list()) {
      java.util.List<TReportExecStatusParams> __this__params_list = new java.util.ArrayList<TReportExecStatusParams>(other.params_list.size());
      for (TReportExecStatusParams other_element : other.params_list) {
        __this__params_list.add(new TReportExecStatusParams(other_element));
      }
      this.params_list = __this__params_list;
    }
  }

  @Override
  public TBatchReportExecStatusParams deepCopy() {
    return new TBatchReportExecStatusParams(this);
  }

  @Override
  public void clear() {
    this.params_list = null;
  }

  public int getParams_listSize() {
    return (this.params_list == null) ? 0 : this.params_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TReportExecStatusParams> getParams_listIterator() {
    return (this.params_list == null) ? null : this.params_list.iterator();
  }

  public void addToParams_list(TReportExecStatusParams elem) {
    if (this.params_list == null) {
      this.params_list = new java.util.ArrayList<TReportExecStatusParams>();
    }
    this.params_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TReportExecStatusParams> getParams_list() {
    return this.params_list;
  }

  public TBatchReportExecStatusParams setParams_list(@org.apache.thrift.annotation.Nullable java.util.List<TReportExecStatusParams> params_list) {
    this.params_list = params_list;
    return this;
  }

  public void unsetParams_list() {
    this.params_list = null;
  }

  /** Returns true if field params_list is set (has been assigned a value) and false otherwise */
  public boolean isSetParams_list() {
    return this.params_list != null;
  }

  public void setParams_listIsSet(boolean value) {
    if (!value) {
      this.params_list = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PARAMS_LIST:
      if (value == null) {
        unsetParams_list();
      } else {
        setParams_list((java.util.List<TReportExecStatusParams>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PARAMS_LIST:
      return getParams_list();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PARAMS_LIST:
      return isSetParams_list();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TBatchReportExecStatusParams)
      return this.equals((TBatchReportExecStatusParams)that);
    return false;
  }

  public boolean equals(TBatchReportExecStatusParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_params_list = true && this.isSetParams_list();
    boolean that_present_params_list = true && that.isSetParams_list();
    if (this_present_params_list || that_present_params_list) {
      if (!(this_present_params_list && that_present_params_list))
        return false;
      if (!this.params_list.equals(that.params_list))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetParams_list()) ? 131071 : 524287);
    if (isSetParams_list())
      hashCode = hashCode * 8191 + params_list.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TBatchReportExecStatusParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetParams_list(), other.isSetParams_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params_list, other.params_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TBatchReportExecStatusParams(");
    boolean first = true;

    sb.append("params_list:");
    if (this.params_list == null) {
      sb.append("null");
    } else {
      sb.append(this.params_list);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (params_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'params_list' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBatchReportExecStatusParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TBatchReportExecStatusParamsStandardScheme getScheme() {
      return new TBatchReportExecStatusParamsStandardScheme();
    }
  }

  private static class TBatchReportExecStatusParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TBatchReportExecStatusParams> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TBatchReportExecStatusParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARAMS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list204 = iprot.readListBegin();
                struct.params_list = new java.util.ArrayList<TReportExecStatusParams>(_list204.size);
                @org.apache.thrift.annotation.Nullable TReportExecStatusParams _elem205;
                for (int _i206 = 0; _i206 < _list204.size; ++_i206)
                {
                  _elem205 = new TReportExecStatusParams();
                  _elem205.read(iprot);
                  struct.params_list.add(_elem205);
                }
                iprot.readListEnd();
              }
              struct.setParams_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TBatchReportExecStatusParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.params_list != null) {
        oprot.writeFieldBegin(PARAMS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.params_list.size()));
          for (TReportExecStatusParams _iter207 : struct.params_list)
          {
            _iter207.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBatchReportExecStatusParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TBatchReportExecStatusParamsTupleScheme getScheme() {
      return new TBatchReportExecStatusParamsTupleScheme();
    }
  }

  private static class TBatchReportExecStatusParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TBatchReportExecStatusParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBatchReportExecStatusParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.params_list.size());
        for (TReportExecStatusParams _iter208 : struct.params_list)
        {
          _iter208.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBatchReportExecStatusParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list209 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.params_list = new java.util.ArrayList<TReportExecStatusParams>(_list209.size);
        @org.apache.thrift.annotation.Nullable TReportExecStatusParams _elem210;
        for (int _i211 = 0; _i211 < _list209.size; ++_i211)
        {
          _elem210 = new TReportExecStatusParams();
          _elem210.read(iprot);
          struct.params_list.add(_elem210);
        }
      }
      struct.setParams_listIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

