/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TGetTaskRunInfoResult implements org.apache.thrift.TBase<TGetTaskRunInfoResult, TGetTaskRunInfoResult._Fields>, java.io.Serializable, Cloneable, Comparable<TGetTaskRunInfoResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGetTaskRunInfoResult");

  private static final org.apache.thrift.protocol.TField TASK_RUNS_FIELD_DESC = new org.apache.thrift.protocol.TField("task_runs", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TGetTaskRunInfoResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TGetTaskRunInfoResultTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<TTaskRunInfo> task_runs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_RUNS((short)1, "task_runs");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_RUNS
          return TASK_RUNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TASK_RUNS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_RUNS, new org.apache.thrift.meta_data.FieldMetaData("task_runs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTaskRunInfo.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGetTaskRunInfoResult.class, metaDataMap);
  }

  public TGetTaskRunInfoResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGetTaskRunInfoResult(TGetTaskRunInfoResult other) {
    if (other.isSetTask_runs()) {
      java.util.List<TTaskRunInfo> __this__task_runs = new java.util.ArrayList<TTaskRunInfo>(other.task_runs.size());
      for (TTaskRunInfo other_element : other.task_runs) {
        __this__task_runs.add(new TTaskRunInfo(other_element));
      }
      this.task_runs = __this__task_runs;
    }
  }

  @Override
  public TGetTaskRunInfoResult deepCopy() {
    return new TGetTaskRunInfoResult(this);
  }

  @Override
  public void clear() {
    this.task_runs = null;
  }

  public int getTask_runsSize() {
    return (this.task_runs == null) ? 0 : this.task_runs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TTaskRunInfo> getTask_runsIterator() {
    return (this.task_runs == null) ? null : this.task_runs.iterator();
  }

  public void addToTask_runs(TTaskRunInfo elem) {
    if (this.task_runs == null) {
      this.task_runs = new java.util.ArrayList<TTaskRunInfo>();
    }
    this.task_runs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TTaskRunInfo> getTask_runs() {
    return this.task_runs;
  }

  public TGetTaskRunInfoResult setTask_runs(@org.apache.thrift.annotation.Nullable java.util.List<TTaskRunInfo> task_runs) {
    this.task_runs = task_runs;
    return this;
  }

  public void unsetTask_runs() {
    this.task_runs = null;
  }

  /** Returns true if field task_runs is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_runs() {
    return this.task_runs != null;
  }

  public void setTask_runsIsSet(boolean value) {
    if (!value) {
      this.task_runs = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TASK_RUNS:
      if (value == null) {
        unsetTask_runs();
      } else {
        setTask_runs((java.util.List<TTaskRunInfo>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_RUNS:
      return getTask_runs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TASK_RUNS:
      return isSetTask_runs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TGetTaskRunInfoResult)
      return this.equals((TGetTaskRunInfoResult)that);
    return false;
  }

  public boolean equals(TGetTaskRunInfoResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_task_runs = true && this.isSetTask_runs();
    boolean that_present_task_runs = true && that.isSetTask_runs();
    if (this_present_task_runs || that_present_task_runs) {
      if (!(this_present_task_runs && that_present_task_runs))
        return false;
      if (!this.task_runs.equals(that.task_runs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTask_runs()) ? 131071 : 524287);
    if (isSetTask_runs())
      hashCode = hashCode * 8191 + task_runs.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TGetTaskRunInfoResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTask_runs(), other.isSetTask_runs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_runs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_runs, other.task_runs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TGetTaskRunInfoResult(");
    boolean first = true;

    if (isSetTask_runs()) {
      sb.append("task_runs:");
      if (this.task_runs == null) {
        sb.append("null");
      } else {
        sb.append(this.task_runs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetTaskRunInfoResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGetTaskRunInfoResultStandardScheme getScheme() {
      return new TGetTaskRunInfoResultStandardScheme();
    }
  }

  private static class TGetTaskRunInfoResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TGetTaskRunInfoResult> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetTaskRunInfoResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_RUNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list140 = iprot.readListBegin();
                struct.task_runs = new java.util.ArrayList<TTaskRunInfo>(_list140.size);
                @org.apache.thrift.annotation.Nullable TTaskRunInfo _elem141;
                for (int _i142 = 0; _i142 < _list140.size; ++_i142)
                {
                  _elem141 = new TTaskRunInfo();
                  _elem141.read(iprot);
                  struct.task_runs.add(_elem141);
                }
                iprot.readListEnd();
              }
              struct.setTask_runsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetTaskRunInfoResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.task_runs != null) {
        if (struct.isSetTask_runs()) {
          oprot.writeFieldBegin(TASK_RUNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.task_runs.size()));
            for (TTaskRunInfo _iter143 : struct.task_runs)
            {
              _iter143.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGetTaskRunInfoResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGetTaskRunInfoResultTupleScheme getScheme() {
      return new TGetTaskRunInfoResultTupleScheme();
    }
  }

  private static class TGetTaskRunInfoResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TGetTaskRunInfoResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetTaskRunInfoResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTask_runs()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetTask_runs()) {
        {
          oprot.writeI32(struct.task_runs.size());
          for (TTaskRunInfo _iter144 : struct.task_runs)
          {
            _iter144.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetTaskRunInfoResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list145 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.task_runs = new java.util.ArrayList<TTaskRunInfo>(_list145.size);
          @org.apache.thrift.annotation.Nullable TTaskRunInfo _elem146;
          for (int _i147 = 0; _i147 < _list145.size; ++_i147)
          {
            _elem146 = new TTaskRunInfo();
            _elem146.read(iprot);
            struct.task_runs.add(_elem146);
          }
        }
        struct.setTask_runsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

