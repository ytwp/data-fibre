/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TExecShortCircuitParams implements org.apache.thrift.TBase<TExecShortCircuitParams, TExecShortCircuitParams._Fields>, java.io.Serializable, Cloneable, Comparable<TExecShortCircuitParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecShortCircuitParams");

  private static final org.apache.thrift.protocol.TField DESC_TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("desc_tbl", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("plan", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField OUTPUT_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("output_exprs", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField DATA_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("data_sink", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField IS_BINARY_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("is_binary_row", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField ENABLE_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_profile", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField SCAN_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_range", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField KEY_LITERAL_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("key_literal_exprs", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField TABLET_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_ids", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("versions", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TExecShortCircuitParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TExecShortCircuitParamsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TDescriptorTable desc_tbl; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPlan plan; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> output_exprs; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TDataSink data_sink; // optional
  public boolean is_binary_row; // optional
  public boolean enable_profile; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TScanRange scan_range; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TKeyLiteralExpr> key_literal_exprs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> tablet_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> versions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DESC_TBL((short)1, "desc_tbl"),
    PLAN((short)2, "plan"),
    OUTPUT_EXPRS((short)3, "output_exprs"),
    DATA_SINK((short)4, "data_sink"),
    IS_BINARY_ROW((short)5, "is_binary_row"),
    ENABLE_PROFILE((short)6, "enable_profile"),
    SCAN_RANGE((short)7, "scan_range"),
    KEY_LITERAL_EXPRS((short)8, "key_literal_exprs"),
    TABLET_IDS((short)9, "tablet_ids"),
    VERSIONS((short)10, "versions");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DESC_TBL
          return DESC_TBL;
        case 2: // PLAN
          return PLAN;
        case 3: // OUTPUT_EXPRS
          return OUTPUT_EXPRS;
        case 4: // DATA_SINK
          return DATA_SINK;
        case 5: // IS_BINARY_ROW
          return IS_BINARY_ROW;
        case 6: // ENABLE_PROFILE
          return ENABLE_PROFILE;
        case 7: // SCAN_RANGE
          return SCAN_RANGE;
        case 8: // KEY_LITERAL_EXPRS
          return KEY_LITERAL_EXPRS;
        case 9: // TABLET_IDS
          return TABLET_IDS;
        case 10: // VERSIONS
          return VERSIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_BINARY_ROW_ISSET_ID = 0;
  private static final int __ENABLE_PROFILE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DESC_TBL,_Fields.PLAN,_Fields.OUTPUT_EXPRS,_Fields.DATA_SINK,_Fields.IS_BINARY_ROW,_Fields.ENABLE_PROFILE,_Fields.SCAN_RANGE,_Fields.KEY_LITERAL_EXPRS,_Fields.TABLET_IDS,_Fields.VERSIONS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DESC_TBL, new org.apache.thrift.meta_data.FieldMetaData("desc_tbl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TDescriptorTable.class)));
    tmpMap.put(_Fields.PLAN, new org.apache.thrift.meta_data.FieldMetaData("plan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TPlan.class)));
    tmpMap.put(_Fields.OUTPUT_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("output_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TExpr.class))));
    tmpMap.put(_Fields.DATA_SINK, new org.apache.thrift.meta_data.FieldMetaData("data_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TDataSink.class)));
    tmpMap.put(_Fields.IS_BINARY_ROW, new org.apache.thrift.meta_data.FieldMetaData("is_binary_row", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("enable_profile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SCAN_RANGE, new org.apache.thrift.meta_data.FieldMetaData("scan_range", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TScanRange.class)));
    tmpMap.put(_Fields.KEY_LITERAL_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("key_literal_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKeyLiteralExpr.class))));
    tmpMap.put(_Fields.TABLET_IDS, new org.apache.thrift.meta_data.FieldMetaData("tablet_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.VERSIONS, new org.apache.thrift.meta_data.FieldMetaData("versions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecShortCircuitParams.class, metaDataMap);
  }

  public TExecShortCircuitParams() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecShortCircuitParams(TExecShortCircuitParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDesc_tbl()) {
      this.desc_tbl = new io.datafibre.fibre.thrift.TDescriptorTable(other.desc_tbl);
    }
    if (other.isSetPlan()) {
      this.plan = new io.datafibre.fibre.thrift.TPlan(other.plan);
    }
    if (other.isSetOutput_exprs()) {
      java.util.List<io.datafibre.fibre.thrift.TExpr> __this__output_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(other.output_exprs.size());
      for (io.datafibre.fibre.thrift.TExpr other_element : other.output_exprs) {
        __this__output_exprs.add(new io.datafibre.fibre.thrift.TExpr(other_element));
      }
      this.output_exprs = __this__output_exprs;
    }
    if (other.isSetData_sink()) {
      this.data_sink = new io.datafibre.fibre.thrift.TDataSink(other.data_sink);
    }
    this.is_binary_row = other.is_binary_row;
    this.enable_profile = other.enable_profile;
    if (other.isSetScan_range()) {
      this.scan_range = new io.datafibre.fibre.thrift.TScanRange(other.scan_range);
    }
    if (other.isSetKey_literal_exprs()) {
      java.util.List<TKeyLiteralExpr> __this__key_literal_exprs = new java.util.ArrayList<TKeyLiteralExpr>(other.key_literal_exprs.size());
      for (TKeyLiteralExpr other_element : other.key_literal_exprs) {
        __this__key_literal_exprs.add(new TKeyLiteralExpr(other_element));
      }
      this.key_literal_exprs = __this__key_literal_exprs;
    }
    if (other.isSetTablet_ids()) {
      java.util.List<java.lang.Long> __this__tablet_ids = new java.util.ArrayList<java.lang.Long>(other.tablet_ids);
      this.tablet_ids = __this__tablet_ids;
    }
    if (other.isSetVersions()) {
      java.util.List<java.lang.String> __this__versions = new java.util.ArrayList<java.lang.String>(other.versions);
      this.versions = __this__versions;
    }
  }

  @Override
  public TExecShortCircuitParams deepCopy() {
    return new TExecShortCircuitParams(this);
  }

  @Override
  public void clear() {
    this.desc_tbl = null;
    this.plan = null;
    this.output_exprs = null;
    this.data_sink = null;
    setIs_binary_rowIsSet(false);
    this.is_binary_row = false;
    setEnable_profileIsSet(false);
    this.enable_profile = false;
    this.scan_range = null;
    this.key_literal_exprs = null;
    this.tablet_ids = null;
    this.versions = null;
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TDescriptorTable getDesc_tbl() {
    return this.desc_tbl;
  }

  public TExecShortCircuitParams setDesc_tbl(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TDescriptorTable desc_tbl) {
    this.desc_tbl = desc_tbl;
    return this;
  }

  public void unsetDesc_tbl() {
    this.desc_tbl = null;
  }

  /** Returns true if field desc_tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc_tbl() {
    return this.desc_tbl != null;
  }

  public void setDesc_tblIsSet(boolean value) {
    if (!value) {
      this.desc_tbl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TPlan getPlan() {
    return this.plan;
  }

  public TExecShortCircuitParams setPlan(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPlan plan) {
    this.plan = plan;
    return this;
  }

  public void unsetPlan() {
    this.plan = null;
  }

  /** Returns true if field plan is set (has been assigned a value) and false otherwise */
  public boolean isSetPlan() {
    return this.plan != null;
  }

  public void setPlanIsSet(boolean value) {
    if (!value) {
      this.plan = null;
    }
  }

  public int getOutput_exprsSize() {
    return (this.output_exprs == null) ? 0 : this.output_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TExpr> getOutput_exprsIterator() {
    return (this.output_exprs == null) ? null : this.output_exprs.iterator();
  }

  public void addToOutput_exprs(io.datafibre.fibre.thrift.TExpr elem) {
    if (this.output_exprs == null) {
      this.output_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>();
    }
    this.output_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TExpr> getOutput_exprs() {
    return this.output_exprs;
  }

  public TExecShortCircuitParams setOutput_exprs(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> output_exprs) {
    this.output_exprs = output_exprs;
    return this;
  }

  public void unsetOutput_exprs() {
    this.output_exprs = null;
  }

  /** Returns true if field output_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_exprs() {
    return this.output_exprs != null;
  }

  public void setOutput_exprsIsSet(boolean value) {
    if (!value) {
      this.output_exprs = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TDataSink getData_sink() {
    return this.data_sink;
  }

  public TExecShortCircuitParams setData_sink(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TDataSink data_sink) {
    this.data_sink = data_sink;
    return this;
  }

  public void unsetData_sink() {
    this.data_sink = null;
  }

  /** Returns true if field data_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetData_sink() {
    return this.data_sink != null;
  }

  public void setData_sinkIsSet(boolean value) {
    if (!value) {
      this.data_sink = null;
    }
  }

  public boolean isIs_binary_row() {
    return this.is_binary_row;
  }

  public TExecShortCircuitParams setIs_binary_row(boolean is_binary_row) {
    this.is_binary_row = is_binary_row;
    setIs_binary_rowIsSet(true);
    return this;
  }

  public void unsetIs_binary_row() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_BINARY_ROW_ISSET_ID);
  }

  /** Returns true if field is_binary_row is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_binary_row() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_BINARY_ROW_ISSET_ID);
  }

  public void setIs_binary_rowIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_BINARY_ROW_ISSET_ID, value);
  }

  public boolean isEnable_profile() {
    return this.enable_profile;
  }

  public TExecShortCircuitParams setEnable_profile(boolean enable_profile) {
    this.enable_profile = enable_profile;
    setEnable_profileIsSet(true);
    return this;
  }

  public void unsetEnable_profile() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_PROFILE_ISSET_ID);
  }

  /** Returns true if field enable_profile is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_profile() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_PROFILE_ISSET_ID);
  }

  public void setEnable_profileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_PROFILE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TScanRange getScan_range() {
    return this.scan_range;
  }

  public TExecShortCircuitParams setScan_range(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TScanRange scan_range) {
    this.scan_range = scan_range;
    return this;
  }

  public void unsetScan_range() {
    this.scan_range = null;
  }

  /** Returns true if field scan_range is set (has been assigned a value) and false otherwise */
  public boolean isSetScan_range() {
    return this.scan_range != null;
  }

  public void setScan_rangeIsSet(boolean value) {
    if (!value) {
      this.scan_range = null;
    }
  }

  public int getKey_literal_exprsSize() {
    return (this.key_literal_exprs == null) ? 0 : this.key_literal_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TKeyLiteralExpr> getKey_literal_exprsIterator() {
    return (this.key_literal_exprs == null) ? null : this.key_literal_exprs.iterator();
  }

  public void addToKey_literal_exprs(TKeyLiteralExpr elem) {
    if (this.key_literal_exprs == null) {
      this.key_literal_exprs = new java.util.ArrayList<TKeyLiteralExpr>();
    }
    this.key_literal_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TKeyLiteralExpr> getKey_literal_exprs() {
    return this.key_literal_exprs;
  }

  public TExecShortCircuitParams setKey_literal_exprs(@org.apache.thrift.annotation.Nullable java.util.List<TKeyLiteralExpr> key_literal_exprs) {
    this.key_literal_exprs = key_literal_exprs;
    return this;
  }

  public void unsetKey_literal_exprs() {
    this.key_literal_exprs = null;
  }

  /** Returns true if field key_literal_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_literal_exprs() {
    return this.key_literal_exprs != null;
  }

  public void setKey_literal_exprsIsSet(boolean value) {
    if (!value) {
      this.key_literal_exprs = null;
    }
  }

  public int getTablet_idsSize() {
    return (this.tablet_ids == null) ? 0 : this.tablet_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getTablet_idsIterator() {
    return (this.tablet_ids == null) ? null : this.tablet_ids.iterator();
  }

  public void addToTablet_ids(long elem) {
    if (this.tablet_ids == null) {
      this.tablet_ids = new java.util.ArrayList<java.lang.Long>();
    }
    this.tablet_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getTablet_ids() {
    return this.tablet_ids;
  }

  public TExecShortCircuitParams setTablet_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> tablet_ids) {
    this.tablet_ids = tablet_ids;
    return this;
  }

  public void unsetTablet_ids() {
    this.tablet_ids = null;
  }

  /** Returns true if field tablet_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_ids() {
    return this.tablet_ids != null;
  }

  public void setTablet_idsIsSet(boolean value) {
    if (!value) {
      this.tablet_ids = null;
    }
  }

  public int getVersionsSize() {
    return (this.versions == null) ? 0 : this.versions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getVersionsIterator() {
    return (this.versions == null) ? null : this.versions.iterator();
  }

  public void addToVersions(java.lang.String elem) {
    if (this.versions == null) {
      this.versions = new java.util.ArrayList<java.lang.String>();
    }
    this.versions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getVersions() {
    return this.versions;
  }

  public TExecShortCircuitParams setVersions(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> versions) {
    this.versions = versions;
    return this;
  }

  public void unsetVersions() {
    this.versions = null;
  }

  /** Returns true if field versions is set (has been assigned a value) and false otherwise */
  public boolean isSetVersions() {
    return this.versions != null;
  }

  public void setVersionsIsSet(boolean value) {
    if (!value) {
      this.versions = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DESC_TBL:
      if (value == null) {
        unsetDesc_tbl();
      } else {
        setDesc_tbl((io.datafibre.fibre.thrift.TDescriptorTable)value);
      }
      break;

    case PLAN:
      if (value == null) {
        unsetPlan();
      } else {
        setPlan((io.datafibre.fibre.thrift.TPlan)value);
      }
      break;

    case OUTPUT_EXPRS:
      if (value == null) {
        unsetOutput_exprs();
      } else {
        setOutput_exprs((java.util.List<io.datafibre.fibre.thrift.TExpr>)value);
      }
      break;

    case DATA_SINK:
      if (value == null) {
        unsetData_sink();
      } else {
        setData_sink((io.datafibre.fibre.thrift.TDataSink)value);
      }
      break;

    case IS_BINARY_ROW:
      if (value == null) {
        unsetIs_binary_row();
      } else {
        setIs_binary_row((java.lang.Boolean)value);
      }
      break;

    case ENABLE_PROFILE:
      if (value == null) {
        unsetEnable_profile();
      } else {
        setEnable_profile((java.lang.Boolean)value);
      }
      break;

    case SCAN_RANGE:
      if (value == null) {
        unsetScan_range();
      } else {
        setScan_range((io.datafibre.fibre.thrift.TScanRange)value);
      }
      break;

    case KEY_LITERAL_EXPRS:
      if (value == null) {
        unsetKey_literal_exprs();
      } else {
        setKey_literal_exprs((java.util.List<TKeyLiteralExpr>)value);
      }
      break;

    case TABLET_IDS:
      if (value == null) {
        unsetTablet_ids();
      } else {
        setTablet_ids((java.util.List<java.lang.Long>)value);
      }
      break;

    case VERSIONS:
      if (value == null) {
        unsetVersions();
      } else {
        setVersions((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DESC_TBL:
      return getDesc_tbl();

    case PLAN:
      return getPlan();

    case OUTPUT_EXPRS:
      return getOutput_exprs();

    case DATA_SINK:
      return getData_sink();

    case IS_BINARY_ROW:
      return isIs_binary_row();

    case ENABLE_PROFILE:
      return isEnable_profile();

    case SCAN_RANGE:
      return getScan_range();

    case KEY_LITERAL_EXPRS:
      return getKey_literal_exprs();

    case TABLET_IDS:
      return getTablet_ids();

    case VERSIONS:
      return getVersions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DESC_TBL:
      return isSetDesc_tbl();
    case PLAN:
      return isSetPlan();
    case OUTPUT_EXPRS:
      return isSetOutput_exprs();
    case DATA_SINK:
      return isSetData_sink();
    case IS_BINARY_ROW:
      return isSetIs_binary_row();
    case ENABLE_PROFILE:
      return isSetEnable_profile();
    case SCAN_RANGE:
      return isSetScan_range();
    case KEY_LITERAL_EXPRS:
      return isSetKey_literal_exprs();
    case TABLET_IDS:
      return isSetTablet_ids();
    case VERSIONS:
      return isSetVersions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TExecShortCircuitParams)
      return this.equals((TExecShortCircuitParams)that);
    return false;
  }

  public boolean equals(TExecShortCircuitParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_desc_tbl = true && this.isSetDesc_tbl();
    boolean that_present_desc_tbl = true && that.isSetDesc_tbl();
    if (this_present_desc_tbl || that_present_desc_tbl) {
      if (!(this_present_desc_tbl && that_present_desc_tbl))
        return false;
      if (!this.desc_tbl.equals(that.desc_tbl))
        return false;
    }

    boolean this_present_plan = true && this.isSetPlan();
    boolean that_present_plan = true && that.isSetPlan();
    if (this_present_plan || that_present_plan) {
      if (!(this_present_plan && that_present_plan))
        return false;
      if (!this.plan.equals(that.plan))
        return false;
    }

    boolean this_present_output_exprs = true && this.isSetOutput_exprs();
    boolean that_present_output_exprs = true && that.isSetOutput_exprs();
    if (this_present_output_exprs || that_present_output_exprs) {
      if (!(this_present_output_exprs && that_present_output_exprs))
        return false;
      if (!this.output_exprs.equals(that.output_exprs))
        return false;
    }

    boolean this_present_data_sink = true && this.isSetData_sink();
    boolean that_present_data_sink = true && that.isSetData_sink();
    if (this_present_data_sink || that_present_data_sink) {
      if (!(this_present_data_sink && that_present_data_sink))
        return false;
      if (!this.data_sink.equals(that.data_sink))
        return false;
    }

    boolean this_present_is_binary_row = true && this.isSetIs_binary_row();
    boolean that_present_is_binary_row = true && that.isSetIs_binary_row();
    if (this_present_is_binary_row || that_present_is_binary_row) {
      if (!(this_present_is_binary_row && that_present_is_binary_row))
        return false;
      if (this.is_binary_row != that.is_binary_row)
        return false;
    }

    boolean this_present_enable_profile = true && this.isSetEnable_profile();
    boolean that_present_enable_profile = true && that.isSetEnable_profile();
    if (this_present_enable_profile || that_present_enable_profile) {
      if (!(this_present_enable_profile && that_present_enable_profile))
        return false;
      if (this.enable_profile != that.enable_profile)
        return false;
    }

    boolean this_present_scan_range = true && this.isSetScan_range();
    boolean that_present_scan_range = true && that.isSetScan_range();
    if (this_present_scan_range || that_present_scan_range) {
      if (!(this_present_scan_range && that_present_scan_range))
        return false;
      if (!this.scan_range.equals(that.scan_range))
        return false;
    }

    boolean this_present_key_literal_exprs = true && this.isSetKey_literal_exprs();
    boolean that_present_key_literal_exprs = true && that.isSetKey_literal_exprs();
    if (this_present_key_literal_exprs || that_present_key_literal_exprs) {
      if (!(this_present_key_literal_exprs && that_present_key_literal_exprs))
        return false;
      if (!this.key_literal_exprs.equals(that.key_literal_exprs))
        return false;
    }

    boolean this_present_tablet_ids = true && this.isSetTablet_ids();
    boolean that_present_tablet_ids = true && that.isSetTablet_ids();
    if (this_present_tablet_ids || that_present_tablet_ids) {
      if (!(this_present_tablet_ids && that_present_tablet_ids))
        return false;
      if (!this.tablet_ids.equals(that.tablet_ids))
        return false;
    }

    boolean this_present_versions = true && this.isSetVersions();
    boolean that_present_versions = true && that.isSetVersions();
    if (this_present_versions || that_present_versions) {
      if (!(this_present_versions && that_present_versions))
        return false;
      if (!this.versions.equals(that.versions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDesc_tbl()) ? 131071 : 524287);
    if (isSetDesc_tbl())
      hashCode = hashCode * 8191 + desc_tbl.hashCode();

    hashCode = hashCode * 8191 + ((isSetPlan()) ? 131071 : 524287);
    if (isSetPlan())
      hashCode = hashCode * 8191 + plan.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutput_exprs()) ? 131071 : 524287);
    if (isSetOutput_exprs())
      hashCode = hashCode * 8191 + output_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetData_sink()) ? 131071 : 524287);
    if (isSetData_sink())
      hashCode = hashCode * 8191 + data_sink.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_binary_row()) ? 131071 : 524287);
    if (isSetIs_binary_row())
      hashCode = hashCode * 8191 + ((is_binary_row) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnable_profile()) ? 131071 : 524287);
    if (isSetEnable_profile())
      hashCode = hashCode * 8191 + ((enable_profile) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetScan_range()) ? 131071 : 524287);
    if (isSetScan_range())
      hashCode = hashCode * 8191 + scan_range.hashCode();

    hashCode = hashCode * 8191 + ((isSetKey_literal_exprs()) ? 131071 : 524287);
    if (isSetKey_literal_exprs())
      hashCode = hashCode * 8191 + key_literal_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetTablet_ids()) ? 131071 : 524287);
    if (isSetTablet_ids())
      hashCode = hashCode * 8191 + tablet_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersions()) ? 131071 : 524287);
    if (isSetVersions())
      hashCode = hashCode * 8191 + versions.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TExecShortCircuitParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetDesc_tbl(), other.isSetDesc_tbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc_tbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc_tbl, other.desc_tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPlan(), other.isSetPlan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan, other.plan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutput_exprs(), other.isSetOutput_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_exprs, other.output_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetData_sink(), other.isSetData_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_sink, other.data_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_binary_row(), other.isSetIs_binary_row());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_binary_row()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_binary_row, other.is_binary_row);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_profile(), other.isSetEnable_profile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_profile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_profile, other.enable_profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetScan_range(), other.isSetScan_range());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScan_range()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_range, other.scan_range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKey_literal_exprs(), other.isSetKey_literal_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_literal_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_literal_exprs, other.key_literal_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_ids(), other.isSetTablet_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_ids, other.tablet_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersions(), other.isSetVersions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versions, other.versions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TExecShortCircuitParams(");
    boolean first = true;

    if (isSetDesc_tbl()) {
      sb.append("desc_tbl:");
      if (this.desc_tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.desc_tbl);
      }
      first = false;
    }
    if (isSetPlan()) {
      if (!first) sb.append(", ");
      sb.append("plan:");
      if (this.plan == null) {
        sb.append("null");
      } else {
        sb.append(this.plan);
      }
      first = false;
    }
    if (isSetOutput_exprs()) {
      if (!first) sb.append(", ");
      sb.append("output_exprs:");
      if (this.output_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.output_exprs);
      }
      first = false;
    }
    if (isSetData_sink()) {
      if (!first) sb.append(", ");
      sb.append("data_sink:");
      if (this.data_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.data_sink);
      }
      first = false;
    }
    if (isSetIs_binary_row()) {
      if (!first) sb.append(", ");
      sb.append("is_binary_row:");
      sb.append(this.is_binary_row);
      first = false;
    }
    if (isSetEnable_profile()) {
      if (!first) sb.append(", ");
      sb.append("enable_profile:");
      sb.append(this.enable_profile);
      first = false;
    }
    if (isSetScan_range()) {
      if (!first) sb.append(", ");
      sb.append("scan_range:");
      if (this.scan_range == null) {
        sb.append("null");
      } else {
        sb.append(this.scan_range);
      }
      first = false;
    }
    if (isSetKey_literal_exprs()) {
      if (!first) sb.append(", ");
      sb.append("key_literal_exprs:");
      if (this.key_literal_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.key_literal_exprs);
      }
      first = false;
    }
    if (isSetTablet_ids()) {
      if (!first) sb.append(", ");
      sb.append("tablet_ids:");
      if (this.tablet_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet_ids);
      }
      first = false;
    }
    if (isSetVersions()) {
      if (!first) sb.append(", ");
      sb.append("versions:");
      if (this.versions == null) {
        sb.append("null");
      } else {
        sb.append(this.versions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (desc_tbl != null) {
      desc_tbl.validate();
    }
    if (plan != null) {
      plan.validate();
    }
    if (data_sink != null) {
      data_sink.validate();
    }
    if (scan_range != null) {
      scan_range.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecShortCircuitParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecShortCircuitParamsStandardScheme getScheme() {
      return new TExecShortCircuitParamsStandardScheme();
    }
  }

  private static class TExecShortCircuitParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TExecShortCircuitParams> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecShortCircuitParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DESC_TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.desc_tbl = new io.datafibre.fibre.thrift.TDescriptorTable();
              struct.desc_tbl.read(iprot);
              struct.setDesc_tblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.plan = new io.datafibre.fibre.thrift.TPlan();
              struct.plan.read(iprot);
              struct.setPlanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OUTPUT_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.output_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list8.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new io.datafibre.fibre.thrift.TExpr();
                  _elem9.read(iprot);
                  struct.output_exprs.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setOutput_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATA_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.data_sink = new io.datafibre.fibre.thrift.TDataSink();
              struct.data_sink.read(iprot);
              struct.setData_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_BINARY_ROW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_binary_row = iprot.readBool();
              struct.setIs_binary_rowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ENABLE_PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_profile = iprot.readBool();
              struct.setEnable_profileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SCAN_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.scan_range = new io.datafibre.fibre.thrift.TScanRange();
              struct.scan_range.read(iprot);
              struct.setScan_rangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // KEY_LITERAL_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.key_literal_exprs = new java.util.ArrayList<TKeyLiteralExpr>(_list11.size);
                @org.apache.thrift.annotation.Nullable TKeyLiteralExpr _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new TKeyLiteralExpr();
                  _elem12.read(iprot);
                  struct.key_literal_exprs.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setKey_literal_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TABLET_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.tablet_ids = new java.util.ArrayList<java.lang.Long>(_list14.size);
                long _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = iprot.readI64();
                  struct.tablet_ids.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setTablet_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VERSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list17 = iprot.readListBegin();
                struct.versions = new java.util.ArrayList<java.lang.String>(_list17.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem18;
                for (int _i19 = 0; _i19 < _list17.size; ++_i19)
                {
                  _elem18 = iprot.readString();
                  struct.versions.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setVersionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecShortCircuitParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.desc_tbl != null) {
        if (struct.isSetDesc_tbl()) {
          oprot.writeFieldBegin(DESC_TBL_FIELD_DESC);
          struct.desc_tbl.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.plan != null) {
        if (struct.isSetPlan()) {
          oprot.writeFieldBegin(PLAN_FIELD_DESC);
          struct.plan.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.output_exprs != null) {
        if (struct.isSetOutput_exprs()) {
          oprot.writeFieldBegin(OUTPUT_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.output_exprs.size()));
            for (io.datafibre.fibre.thrift.TExpr _iter20 : struct.output_exprs)
            {
              _iter20.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.data_sink != null) {
        if (struct.isSetData_sink()) {
          oprot.writeFieldBegin(DATA_SINK_FIELD_DESC);
          struct.data_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_binary_row()) {
        oprot.writeFieldBegin(IS_BINARY_ROW_FIELD_DESC);
        oprot.writeBool(struct.is_binary_row);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_profile()) {
        oprot.writeFieldBegin(ENABLE_PROFILE_FIELD_DESC);
        oprot.writeBool(struct.enable_profile);
        oprot.writeFieldEnd();
      }
      if (struct.scan_range != null) {
        if (struct.isSetScan_range()) {
          oprot.writeFieldBegin(SCAN_RANGE_FIELD_DESC);
          struct.scan_range.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.key_literal_exprs != null) {
        if (struct.isSetKey_literal_exprs()) {
          oprot.writeFieldBegin(KEY_LITERAL_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.key_literal_exprs.size()));
            for (TKeyLiteralExpr _iter21 : struct.key_literal_exprs)
            {
              _iter21.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tablet_ids != null) {
        if (struct.isSetTablet_ids()) {
          oprot.writeFieldBegin(TABLET_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.tablet_ids.size()));
            for (long _iter22 : struct.tablet_ids)
            {
              oprot.writeI64(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.versions != null) {
        if (struct.isSetVersions()) {
          oprot.writeFieldBegin(VERSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.versions.size()));
            for (java.lang.String _iter23 : struct.versions)
            {
              oprot.writeString(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecShortCircuitParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecShortCircuitParamsTupleScheme getScheme() {
      return new TExecShortCircuitParamsTupleScheme();
    }
  }

  private static class TExecShortCircuitParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TExecShortCircuitParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecShortCircuitParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDesc_tbl()) {
        optionals.set(0);
      }
      if (struct.isSetPlan()) {
        optionals.set(1);
      }
      if (struct.isSetOutput_exprs()) {
        optionals.set(2);
      }
      if (struct.isSetData_sink()) {
        optionals.set(3);
      }
      if (struct.isSetIs_binary_row()) {
        optionals.set(4);
      }
      if (struct.isSetEnable_profile()) {
        optionals.set(5);
      }
      if (struct.isSetScan_range()) {
        optionals.set(6);
      }
      if (struct.isSetKey_literal_exprs()) {
        optionals.set(7);
      }
      if (struct.isSetTablet_ids()) {
        optionals.set(8);
      }
      if (struct.isSetVersions()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetDesc_tbl()) {
        struct.desc_tbl.write(oprot);
      }
      if (struct.isSetPlan()) {
        struct.plan.write(oprot);
      }
      if (struct.isSetOutput_exprs()) {
        {
          oprot.writeI32(struct.output_exprs.size());
          for (io.datafibre.fibre.thrift.TExpr _iter24 : struct.output_exprs)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetData_sink()) {
        struct.data_sink.write(oprot);
      }
      if (struct.isSetIs_binary_row()) {
        oprot.writeBool(struct.is_binary_row);
      }
      if (struct.isSetEnable_profile()) {
        oprot.writeBool(struct.enable_profile);
      }
      if (struct.isSetScan_range()) {
        struct.scan_range.write(oprot);
      }
      if (struct.isSetKey_literal_exprs()) {
        {
          oprot.writeI32(struct.key_literal_exprs.size());
          for (TKeyLiteralExpr _iter25 : struct.key_literal_exprs)
          {
            _iter25.write(oprot);
          }
        }
      }
      if (struct.isSetTablet_ids()) {
        {
          oprot.writeI32(struct.tablet_ids.size());
          for (long _iter26 : struct.tablet_ids)
          {
            oprot.writeI64(_iter26);
          }
        }
      }
      if (struct.isSetVersions()) {
        {
          oprot.writeI32(struct.versions.size());
          for (java.lang.String _iter27 : struct.versions)
          {
            oprot.writeString(_iter27);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecShortCircuitParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.desc_tbl = new io.datafibre.fibre.thrift.TDescriptorTable();
        struct.desc_tbl.read(iprot);
        struct.setDesc_tblIsSet(true);
      }
      if (incoming.get(1)) {
        struct.plan = new io.datafibre.fibre.thrift.TPlan();
        struct.plan.read(iprot);
        struct.setPlanIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list28 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.output_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list28.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem29;
          for (int _i30 = 0; _i30 < _list28.size; ++_i30)
          {
            _elem29 = new io.datafibre.fibre.thrift.TExpr();
            _elem29.read(iprot);
            struct.output_exprs.add(_elem29);
          }
        }
        struct.setOutput_exprsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.data_sink = new io.datafibre.fibre.thrift.TDataSink();
        struct.data_sink.read(iprot);
        struct.setData_sinkIsSet(true);
      }
      if (incoming.get(4)) {
        struct.is_binary_row = iprot.readBool();
        struct.setIs_binary_rowIsSet(true);
      }
      if (incoming.get(5)) {
        struct.enable_profile = iprot.readBool();
        struct.setEnable_profileIsSet(true);
      }
      if (incoming.get(6)) {
        struct.scan_range = new io.datafibre.fibre.thrift.TScanRange();
        struct.scan_range.read(iprot);
        struct.setScan_rangeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list31 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.key_literal_exprs = new java.util.ArrayList<TKeyLiteralExpr>(_list31.size);
          @org.apache.thrift.annotation.Nullable TKeyLiteralExpr _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new TKeyLiteralExpr();
            _elem32.read(iprot);
            struct.key_literal_exprs.add(_elem32);
          }
        }
        struct.setKey_literal_exprsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list34 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.tablet_ids = new java.util.ArrayList<java.lang.Long>(_list34.size);
          long _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = iprot.readI64();
            struct.tablet_ids.add(_elem35);
          }
        }
        struct.setTablet_idsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list37 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.versions = new java.util.ArrayList<java.lang.String>(_list37.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = iprot.readString();
            struct.versions.add(_elem38);
          }
        }
        struct.setVersionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

