/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TIndexReplicationInfo implements org.apache.thrift.TBase<TIndexReplicationInfo, TIndexReplicationInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TIndexReplicationInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIndexReplicationInfo");

  private static final org.apache.thrift.protocol.TField INDEX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("index_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SRC_SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("src_schema_hash", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TABLET_REPLICATION_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_replication_infos", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TIndexReplicationInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TIndexReplicationInfoTupleSchemeFactory();

  public long index_id; // optional
  public int src_schema_hash; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,TTabletReplicationInfo> tablet_replication_infos; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX_ID((short)1, "index_id"),
    SRC_SCHEMA_HASH((short)2, "src_schema_hash"),
    TABLET_REPLICATION_INFOS((short)3, "tablet_replication_infos");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX_ID
          return INDEX_ID;
        case 2: // SRC_SCHEMA_HASH
          return SRC_SCHEMA_HASH;
        case 3: // TABLET_REPLICATION_INFOS
          return TABLET_REPLICATION_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ID_ISSET_ID = 0;
  private static final int __SRC_SCHEMA_HASH_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INDEX_ID,_Fields.SRC_SCHEMA_HASH,_Fields.TABLET_REPLICATION_INFOS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX_ID, new org.apache.thrift.meta_data.FieldMetaData("index_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SRC_SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("src_schema_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TABLET_REPLICATION_INFOS, new org.apache.thrift.meta_data.FieldMetaData("tablet_replication_infos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTabletReplicationInfo.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TIndexReplicationInfo.class, metaDataMap);
  }

  public TIndexReplicationInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TIndexReplicationInfo(TIndexReplicationInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.index_id = other.index_id;
    this.src_schema_hash = other.src_schema_hash;
    if (other.isSetTablet_replication_infos()) {
      java.util.Map<java.lang.Long,TTabletReplicationInfo> __this__tablet_replication_infos = new java.util.HashMap<java.lang.Long,TTabletReplicationInfo>(other.tablet_replication_infos.size());
      for (java.util.Map.Entry<java.lang.Long, TTabletReplicationInfo> other_element : other.tablet_replication_infos.entrySet()) {

        java.lang.Long other_element_key = other_element.getKey();
        TTabletReplicationInfo other_element_value = other_element.getValue();

        java.lang.Long __this__tablet_replication_infos_copy_key = other_element_key;

        TTabletReplicationInfo __this__tablet_replication_infos_copy_value = new TTabletReplicationInfo(other_element_value);

        __this__tablet_replication_infos.put(__this__tablet_replication_infos_copy_key, __this__tablet_replication_infos_copy_value);
      }
      this.tablet_replication_infos = __this__tablet_replication_infos;
    }
  }

  @Override
  public TIndexReplicationInfo deepCopy() {
    return new TIndexReplicationInfo(this);
  }

  @Override
  public void clear() {
    setIndex_idIsSet(false);
    this.index_id = 0;
    setSrc_schema_hashIsSet(false);
    this.src_schema_hash = 0;
    this.tablet_replication_infos = null;
  }

  public long getIndex_id() {
    return this.index_id;
  }

  public TIndexReplicationInfo setIndex_id(long index_id) {
    this.index_id = index_id;
    setIndex_idIsSet(true);
    return this;
  }

  public void unsetIndex_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_ID_ISSET_ID);
  }

  /** Returns true if field index_id is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_ID_ISSET_ID);
  }

  public void setIndex_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_ID_ISSET_ID, value);
  }

  public int getSrc_schema_hash() {
    return this.src_schema_hash;
  }

  public TIndexReplicationInfo setSrc_schema_hash(int src_schema_hash) {
    this.src_schema_hash = src_schema_hash;
    setSrc_schema_hashIsSet(true);
    return this;
  }

  public void unsetSrc_schema_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRC_SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field src_schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_schema_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRC_SCHEMA_HASH_ISSET_ID);
  }

  public void setSrc_schema_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRC_SCHEMA_HASH_ISSET_ID, value);
  }

  public int getTablet_replication_infosSize() {
    return (this.tablet_replication_infos == null) ? 0 : this.tablet_replication_infos.size();
  }

  public void putToTablet_replication_infos(long key, TTabletReplicationInfo val) {
    if (this.tablet_replication_infos == null) {
      this.tablet_replication_infos = new java.util.HashMap<java.lang.Long,TTabletReplicationInfo>();
    }
    this.tablet_replication_infos.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Long,TTabletReplicationInfo> getTablet_replication_infos() {
    return this.tablet_replication_infos;
  }

  public TIndexReplicationInfo setTablet_replication_infos(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,TTabletReplicationInfo> tablet_replication_infos) {
    this.tablet_replication_infos = tablet_replication_infos;
    return this;
  }

  public void unsetTablet_replication_infos() {
    this.tablet_replication_infos = null;
  }

  /** Returns true if field tablet_replication_infos is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_replication_infos() {
    return this.tablet_replication_infos != null;
  }

  public void setTablet_replication_infosIsSet(boolean value) {
    if (!value) {
      this.tablet_replication_infos = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case INDEX_ID:
      if (value == null) {
        unsetIndex_id();
      } else {
        setIndex_id((java.lang.Long)value);
      }
      break;

    case SRC_SCHEMA_HASH:
      if (value == null) {
        unsetSrc_schema_hash();
      } else {
        setSrc_schema_hash((java.lang.Integer)value);
      }
      break;

    case TABLET_REPLICATION_INFOS:
      if (value == null) {
        unsetTablet_replication_infos();
      } else {
        setTablet_replication_infos((java.util.Map<java.lang.Long,TTabletReplicationInfo>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX_ID:
      return getIndex_id();

    case SRC_SCHEMA_HASH:
      return getSrc_schema_hash();

    case TABLET_REPLICATION_INFOS:
      return getTablet_replication_infos();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INDEX_ID:
      return isSetIndex_id();
    case SRC_SCHEMA_HASH:
      return isSetSrc_schema_hash();
    case TABLET_REPLICATION_INFOS:
      return isSetTablet_replication_infos();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TIndexReplicationInfo)
      return this.equals((TIndexReplicationInfo)that);
    return false;
  }

  public boolean equals(TIndexReplicationInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_index_id = true && this.isSetIndex_id();
    boolean that_present_index_id = true && that.isSetIndex_id();
    if (this_present_index_id || that_present_index_id) {
      if (!(this_present_index_id && that_present_index_id))
        return false;
      if (this.index_id != that.index_id)
        return false;
    }

    boolean this_present_src_schema_hash = true && this.isSetSrc_schema_hash();
    boolean that_present_src_schema_hash = true && that.isSetSrc_schema_hash();
    if (this_present_src_schema_hash || that_present_src_schema_hash) {
      if (!(this_present_src_schema_hash && that_present_src_schema_hash))
        return false;
      if (this.src_schema_hash != that.src_schema_hash)
        return false;
    }

    boolean this_present_tablet_replication_infos = true && this.isSetTablet_replication_infos();
    boolean that_present_tablet_replication_infos = true && that.isSetTablet_replication_infos();
    if (this_present_tablet_replication_infos || that_present_tablet_replication_infos) {
      if (!(this_present_tablet_replication_infos && that_present_tablet_replication_infos))
        return false;
      if (!this.tablet_replication_infos.equals(that.tablet_replication_infos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIndex_id()) ? 131071 : 524287);
    if (isSetIndex_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(index_id);

    hashCode = hashCode * 8191 + ((isSetSrc_schema_hash()) ? 131071 : 524287);
    if (isSetSrc_schema_hash())
      hashCode = hashCode * 8191 + src_schema_hash;

    hashCode = hashCode * 8191 + ((isSetTablet_replication_infos()) ? 131071 : 524287);
    if (isSetTablet_replication_infos())
      hashCode = hashCode * 8191 + tablet_replication_infos.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TIndexReplicationInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetIndex_id(), other.isSetIndex_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_id, other.index_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrc_schema_hash(), other.isSetSrc_schema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_schema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_schema_hash, other.src_schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_replication_infos(), other.isSetTablet_replication_infos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_replication_infos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_replication_infos, other.tablet_replication_infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TIndexReplicationInfo(");
    boolean first = true;

    if (isSetIndex_id()) {
      sb.append("index_id:");
      sb.append(this.index_id);
      first = false;
    }
    if (isSetSrc_schema_hash()) {
      if (!first) sb.append(", ");
      sb.append("src_schema_hash:");
      sb.append(this.src_schema_hash);
      first = false;
    }
    if (isSetTablet_replication_infos()) {
      if (!first) sb.append(", ");
      sb.append("tablet_replication_infos:");
      if (this.tablet_replication_infos == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet_replication_infos);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TIndexReplicationInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIndexReplicationInfoStandardScheme getScheme() {
      return new TIndexReplicationInfoStandardScheme();
    }
  }

  private static class TIndexReplicationInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TIndexReplicationInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TIndexReplicationInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INDEX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.index_id = iprot.readI64();
              struct.setIndex_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SRC_SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.src_schema_hash = iprot.readI32();
              struct.setSrc_schema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLET_REPLICATION_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map774 = iprot.readMapBegin();
                struct.tablet_replication_infos = new java.util.HashMap<java.lang.Long,TTabletReplicationInfo>(2*_map774.size);
                long _key775;
                @org.apache.thrift.annotation.Nullable TTabletReplicationInfo _val776;
                for (int _i777 = 0; _i777 < _map774.size; ++_i777)
                {
                  _key775 = iprot.readI64();
                  _val776 = new TTabletReplicationInfo();
                  _val776.read(iprot);
                  struct.tablet_replication_infos.put(_key775, _val776);
                }
                iprot.readMapEnd();
              }
              struct.setTablet_replication_infosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TIndexReplicationInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetIndex_id()) {
        oprot.writeFieldBegin(INDEX_ID_FIELD_DESC);
        oprot.writeI64(struct.index_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSrc_schema_hash()) {
        oprot.writeFieldBegin(SRC_SCHEMA_HASH_FIELD_DESC);
        oprot.writeI32(struct.src_schema_hash);
        oprot.writeFieldEnd();
      }
      if (struct.tablet_replication_infos != null) {
        if (struct.isSetTablet_replication_infos()) {
          oprot.writeFieldBegin(TABLET_REPLICATION_INFOS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.tablet_replication_infos.size()));
            for (java.util.Map.Entry<java.lang.Long, TTabletReplicationInfo> _iter778 : struct.tablet_replication_infos.entrySet())
            {
              oprot.writeI64(_iter778.getKey());
              _iter778.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TIndexReplicationInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIndexReplicationInfoTupleScheme getScheme() {
      return new TIndexReplicationInfoTupleScheme();
    }
  }

  private static class TIndexReplicationInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TIndexReplicationInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TIndexReplicationInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIndex_id()) {
        optionals.set(0);
      }
      if (struct.isSetSrc_schema_hash()) {
        optionals.set(1);
      }
      if (struct.isSetTablet_replication_infos()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetIndex_id()) {
        oprot.writeI64(struct.index_id);
      }
      if (struct.isSetSrc_schema_hash()) {
        oprot.writeI32(struct.src_schema_hash);
      }
      if (struct.isSetTablet_replication_infos()) {
        {
          oprot.writeI32(struct.tablet_replication_infos.size());
          for (java.util.Map.Entry<java.lang.Long, TTabletReplicationInfo> _iter779 : struct.tablet_replication_infos.entrySet())
          {
            oprot.writeI64(_iter779.getKey());
            _iter779.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TIndexReplicationInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.index_id = iprot.readI64();
        struct.setIndex_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.src_schema_hash = iprot.readI32();
        struct.setSrc_schema_hashIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map780 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT); 
          struct.tablet_replication_infos = new java.util.HashMap<java.lang.Long,TTabletReplicationInfo>(2*_map780.size);
          long _key781;
          @org.apache.thrift.annotation.Nullable TTabletReplicationInfo _val782;
          for (int _i783 = 0; _i783 < _map780.size; ++_i783)
          {
            _key781 = iprot.readI64();
            _val782 = new TTabletReplicationInfo();
            _val782.read(iprot);
            struct.tablet_replication_infos.put(_key781, _val782);
          }
        }
        struct.setTablet_replication_infosIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

