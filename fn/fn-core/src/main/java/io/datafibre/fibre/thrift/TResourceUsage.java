/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TResourceUsage implements org.apache.thrift.TBase<TResourceUsage, TResourceUsage._Fields>, java.io.Serializable, Cloneable, Comparable<TResourceUsage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResourceUsage");

  private static final org.apache.thrift.protocol.TField NUM_RUNNING_QUERIES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_running_queries", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MEM_LIMIT_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_limit_bytes", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MEM_USED_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_used_bytes", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CPU_USED_PERMILLE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu_used_permille", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField GROUP_USAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("group_usages", org.apache.thrift.protocol.TType.LIST, (short)100);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TResourceUsageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TResourceUsageTupleSchemeFactory();

  public int num_running_queries; // optional
  public long mem_limit_bytes; // optional
  public long mem_used_bytes; // optional
  public int cpu_used_permille; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TResourceGroupUsage> group_usages; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_RUNNING_QUERIES((short)1, "num_running_queries"),
    MEM_LIMIT_BYTES((short)2, "mem_limit_bytes"),
    MEM_USED_BYTES((short)3, "mem_used_bytes"),
    CPU_USED_PERMILLE((short)4, "cpu_used_permille"),
    GROUP_USAGES((short)100, "group_usages");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_RUNNING_QUERIES
          return NUM_RUNNING_QUERIES;
        case 2: // MEM_LIMIT_BYTES
          return MEM_LIMIT_BYTES;
        case 3: // MEM_USED_BYTES
          return MEM_USED_BYTES;
        case 4: // CPU_USED_PERMILLE
          return CPU_USED_PERMILLE;
        case 100: // GROUP_USAGES
          return GROUP_USAGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_RUNNING_QUERIES_ISSET_ID = 0;
  private static final int __MEM_LIMIT_BYTES_ISSET_ID = 1;
  private static final int __MEM_USED_BYTES_ISSET_ID = 2;
  private static final int __CPU_USED_PERMILLE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NUM_RUNNING_QUERIES,_Fields.MEM_LIMIT_BYTES,_Fields.MEM_USED_BYTES,_Fields.CPU_USED_PERMILLE,_Fields.GROUP_USAGES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_RUNNING_QUERIES, new org.apache.thrift.meta_data.FieldMetaData("num_running_queries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEM_LIMIT_BYTES, new org.apache.thrift.meta_data.FieldMetaData("mem_limit_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEM_USED_BYTES, new org.apache.thrift.meta_data.FieldMetaData("mem_used_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CPU_USED_PERMILLE, new org.apache.thrift.meta_data.FieldMetaData("cpu_used_permille", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_USAGES, new org.apache.thrift.meta_data.FieldMetaData("group_usages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResourceGroupUsage.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResourceUsage.class, metaDataMap);
  }

  public TResourceUsage() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResourceUsage(TResourceUsage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.num_running_queries = other.num_running_queries;
    this.mem_limit_bytes = other.mem_limit_bytes;
    this.mem_used_bytes = other.mem_used_bytes;
    this.cpu_used_permille = other.cpu_used_permille;
    if (other.isSetGroup_usages()) {
      java.util.List<TResourceGroupUsage> __this__group_usages = new java.util.ArrayList<TResourceGroupUsage>(other.group_usages.size());
      for (TResourceGroupUsage other_element : other.group_usages) {
        __this__group_usages.add(new TResourceGroupUsage(other_element));
      }
      this.group_usages = __this__group_usages;
    }
  }

  @Override
  public TResourceUsage deepCopy() {
    return new TResourceUsage(this);
  }

  @Override
  public void clear() {
    setNum_running_queriesIsSet(false);
    this.num_running_queries = 0;
    setMem_limit_bytesIsSet(false);
    this.mem_limit_bytes = 0;
    setMem_used_bytesIsSet(false);
    this.mem_used_bytes = 0;
    setCpu_used_permilleIsSet(false);
    this.cpu_used_permille = 0;
    this.group_usages = null;
  }

  public int getNum_running_queries() {
    return this.num_running_queries;
  }

  public TResourceUsage setNum_running_queries(int num_running_queries) {
    this.num_running_queries = num_running_queries;
    setNum_running_queriesIsSet(true);
    return this;
  }

  public void unsetNum_running_queries() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_RUNNING_QUERIES_ISSET_ID);
  }

  /** Returns true if field num_running_queries is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_running_queries() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_RUNNING_QUERIES_ISSET_ID);
  }

  public void setNum_running_queriesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_RUNNING_QUERIES_ISSET_ID, value);
  }

  public long getMem_limit_bytes() {
    return this.mem_limit_bytes;
  }

  public TResourceUsage setMem_limit_bytes(long mem_limit_bytes) {
    this.mem_limit_bytes = mem_limit_bytes;
    setMem_limit_bytesIsSet(true);
    return this;
  }

  public void unsetMem_limit_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEM_LIMIT_BYTES_ISSET_ID);
  }

  /** Returns true if field mem_limit_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_limit_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEM_LIMIT_BYTES_ISSET_ID);
  }

  public void setMem_limit_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEM_LIMIT_BYTES_ISSET_ID, value);
  }

  public long getMem_used_bytes() {
    return this.mem_used_bytes;
  }

  public TResourceUsage setMem_used_bytes(long mem_used_bytes) {
    this.mem_used_bytes = mem_used_bytes;
    setMem_used_bytesIsSet(true);
    return this;
  }

  public void unsetMem_used_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEM_USED_BYTES_ISSET_ID);
  }

  /** Returns true if field mem_used_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_used_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEM_USED_BYTES_ISSET_ID);
  }

  public void setMem_used_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEM_USED_BYTES_ISSET_ID, value);
  }

  public int getCpu_used_permille() {
    return this.cpu_used_permille;
  }

  public TResourceUsage setCpu_used_permille(int cpu_used_permille) {
    this.cpu_used_permille = cpu_used_permille;
    setCpu_used_permilleIsSet(true);
    return this;
  }

  public void unsetCpu_used_permille() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPU_USED_PERMILLE_ISSET_ID);
  }

  /** Returns true if field cpu_used_permille is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu_used_permille() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPU_USED_PERMILLE_ISSET_ID);
  }

  public void setCpu_used_permilleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPU_USED_PERMILLE_ISSET_ID, value);
  }

  public int getGroup_usagesSize() {
    return (this.group_usages == null) ? 0 : this.group_usages.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TResourceGroupUsage> getGroup_usagesIterator() {
    return (this.group_usages == null) ? null : this.group_usages.iterator();
  }

  public void addToGroup_usages(TResourceGroupUsage elem) {
    if (this.group_usages == null) {
      this.group_usages = new java.util.ArrayList<TResourceGroupUsage>();
    }
    this.group_usages.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TResourceGroupUsage> getGroup_usages() {
    return this.group_usages;
  }

  public TResourceUsage setGroup_usages(@org.apache.thrift.annotation.Nullable java.util.List<TResourceGroupUsage> group_usages) {
    this.group_usages = group_usages;
    return this;
  }

  public void unsetGroup_usages() {
    this.group_usages = null;
  }

  /** Returns true if field group_usages is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_usages() {
    return this.group_usages != null;
  }

  public void setGroup_usagesIsSet(boolean value) {
    if (!value) {
      this.group_usages = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NUM_RUNNING_QUERIES:
      if (value == null) {
        unsetNum_running_queries();
      } else {
        setNum_running_queries((java.lang.Integer)value);
      }
      break;

    case MEM_LIMIT_BYTES:
      if (value == null) {
        unsetMem_limit_bytes();
      } else {
        setMem_limit_bytes((java.lang.Long)value);
      }
      break;

    case MEM_USED_BYTES:
      if (value == null) {
        unsetMem_used_bytes();
      } else {
        setMem_used_bytes((java.lang.Long)value);
      }
      break;

    case CPU_USED_PERMILLE:
      if (value == null) {
        unsetCpu_used_permille();
      } else {
        setCpu_used_permille((java.lang.Integer)value);
      }
      break;

    case GROUP_USAGES:
      if (value == null) {
        unsetGroup_usages();
      } else {
        setGroup_usages((java.util.List<TResourceGroupUsage>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_RUNNING_QUERIES:
      return getNum_running_queries();

    case MEM_LIMIT_BYTES:
      return getMem_limit_bytes();

    case MEM_USED_BYTES:
      return getMem_used_bytes();

    case CPU_USED_PERMILLE:
      return getCpu_used_permille();

    case GROUP_USAGES:
      return getGroup_usages();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NUM_RUNNING_QUERIES:
      return isSetNum_running_queries();
    case MEM_LIMIT_BYTES:
      return isSetMem_limit_bytes();
    case MEM_USED_BYTES:
      return isSetMem_used_bytes();
    case CPU_USED_PERMILLE:
      return isSetCpu_used_permille();
    case GROUP_USAGES:
      return isSetGroup_usages();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TResourceUsage)
      return this.equals((TResourceUsage)that);
    return false;
  }

  public boolean equals(TResourceUsage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_num_running_queries = true && this.isSetNum_running_queries();
    boolean that_present_num_running_queries = true && that.isSetNum_running_queries();
    if (this_present_num_running_queries || that_present_num_running_queries) {
      if (!(this_present_num_running_queries && that_present_num_running_queries))
        return false;
      if (this.num_running_queries != that.num_running_queries)
        return false;
    }

    boolean this_present_mem_limit_bytes = true && this.isSetMem_limit_bytes();
    boolean that_present_mem_limit_bytes = true && that.isSetMem_limit_bytes();
    if (this_present_mem_limit_bytes || that_present_mem_limit_bytes) {
      if (!(this_present_mem_limit_bytes && that_present_mem_limit_bytes))
        return false;
      if (this.mem_limit_bytes != that.mem_limit_bytes)
        return false;
    }

    boolean this_present_mem_used_bytes = true && this.isSetMem_used_bytes();
    boolean that_present_mem_used_bytes = true && that.isSetMem_used_bytes();
    if (this_present_mem_used_bytes || that_present_mem_used_bytes) {
      if (!(this_present_mem_used_bytes && that_present_mem_used_bytes))
        return false;
      if (this.mem_used_bytes != that.mem_used_bytes)
        return false;
    }

    boolean this_present_cpu_used_permille = true && this.isSetCpu_used_permille();
    boolean that_present_cpu_used_permille = true && that.isSetCpu_used_permille();
    if (this_present_cpu_used_permille || that_present_cpu_used_permille) {
      if (!(this_present_cpu_used_permille && that_present_cpu_used_permille))
        return false;
      if (this.cpu_used_permille != that.cpu_used_permille)
        return false;
    }

    boolean this_present_group_usages = true && this.isSetGroup_usages();
    boolean that_present_group_usages = true && that.isSetGroup_usages();
    if (this_present_group_usages || that_present_group_usages) {
      if (!(this_present_group_usages && that_present_group_usages))
        return false;
      if (!this.group_usages.equals(that.group_usages))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNum_running_queries()) ? 131071 : 524287);
    if (isSetNum_running_queries())
      hashCode = hashCode * 8191 + num_running_queries;

    hashCode = hashCode * 8191 + ((isSetMem_limit_bytes()) ? 131071 : 524287);
    if (isSetMem_limit_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mem_limit_bytes);

    hashCode = hashCode * 8191 + ((isSetMem_used_bytes()) ? 131071 : 524287);
    if (isSetMem_used_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mem_used_bytes);

    hashCode = hashCode * 8191 + ((isSetCpu_used_permille()) ? 131071 : 524287);
    if (isSetCpu_used_permille())
      hashCode = hashCode * 8191 + cpu_used_permille;

    hashCode = hashCode * 8191 + ((isSetGroup_usages()) ? 131071 : 524287);
    if (isSetGroup_usages())
      hashCode = hashCode * 8191 + group_usages.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TResourceUsage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNum_running_queries(), other.isSetNum_running_queries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_running_queries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_running_queries, other.num_running_queries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMem_limit_bytes(), other.isSetMem_limit_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_limit_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_limit_bytes, other.mem_limit_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMem_used_bytes(), other.isSetMem_used_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_used_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_used_bytes, other.mem_used_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCpu_used_permille(), other.isSetCpu_used_permille());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu_used_permille()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu_used_permille, other.cpu_used_permille);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGroup_usages(), other.isSetGroup_usages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_usages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_usages, other.group_usages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TResourceUsage(");
    boolean first = true;

    if (isSetNum_running_queries()) {
      sb.append("num_running_queries:");
      sb.append(this.num_running_queries);
      first = false;
    }
    if (isSetMem_limit_bytes()) {
      if (!first) sb.append(", ");
      sb.append("mem_limit_bytes:");
      sb.append(this.mem_limit_bytes);
      first = false;
    }
    if (isSetMem_used_bytes()) {
      if (!first) sb.append(", ");
      sb.append("mem_used_bytes:");
      sb.append(this.mem_used_bytes);
      first = false;
    }
    if (isSetCpu_used_permille()) {
      if (!first) sb.append(", ");
      sb.append("cpu_used_permille:");
      sb.append(this.cpu_used_permille);
      first = false;
    }
    if (isSetGroup_usages()) {
      if (!first) sb.append(", ");
      sb.append("group_usages:");
      if (this.group_usages == null) {
        sb.append("null");
      } else {
        sb.append(this.group_usages);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResourceUsageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TResourceUsageStandardScheme getScheme() {
      return new TResourceUsageStandardScheme();
    }
  }

  private static class TResourceUsageStandardScheme extends org.apache.thrift.scheme.StandardScheme<TResourceUsage> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TResourceUsage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_RUNNING_QUERIES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_running_queries = iprot.readI32();
              struct.setNum_running_queriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEM_LIMIT_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem_limit_bytes = iprot.readI64();
              struct.setMem_limit_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEM_USED_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem_used_bytes = iprot.readI64();
              struct.setMem_used_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CPU_USED_PERMILLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpu_used_permille = iprot.readI32();
              struct.setCpu_used_permilleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // GROUP_USAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.group_usages = new java.util.ArrayList<TResourceGroupUsage>(_list0.size);
                @org.apache.thrift.annotation.Nullable TResourceGroupUsage _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TResourceGroupUsage();
                  _elem1.read(iprot);
                  struct.group_usages.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setGroup_usagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TResourceUsage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetNum_running_queries()) {
        oprot.writeFieldBegin(NUM_RUNNING_QUERIES_FIELD_DESC);
        oprot.writeI32(struct.num_running_queries);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMem_limit_bytes()) {
        oprot.writeFieldBegin(MEM_LIMIT_BYTES_FIELD_DESC);
        oprot.writeI64(struct.mem_limit_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMem_used_bytes()) {
        oprot.writeFieldBegin(MEM_USED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.mem_used_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCpu_used_permille()) {
        oprot.writeFieldBegin(CPU_USED_PERMILLE_FIELD_DESC);
        oprot.writeI32(struct.cpu_used_permille);
        oprot.writeFieldEnd();
      }
      if (struct.group_usages != null) {
        if (struct.isSetGroup_usages()) {
          oprot.writeFieldBegin(GROUP_USAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.group_usages.size()));
            for (TResourceGroupUsage _iter3 : struct.group_usages)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResourceUsageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TResourceUsageTupleScheme getScheme() {
      return new TResourceUsageTupleScheme();
    }
  }

  private static class TResourceUsageTupleScheme extends org.apache.thrift.scheme.TupleScheme<TResourceUsage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResourceUsage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNum_running_queries()) {
        optionals.set(0);
      }
      if (struct.isSetMem_limit_bytes()) {
        optionals.set(1);
      }
      if (struct.isSetMem_used_bytes()) {
        optionals.set(2);
      }
      if (struct.isSetCpu_used_permille()) {
        optionals.set(3);
      }
      if (struct.isSetGroup_usages()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetNum_running_queries()) {
        oprot.writeI32(struct.num_running_queries);
      }
      if (struct.isSetMem_limit_bytes()) {
        oprot.writeI64(struct.mem_limit_bytes);
      }
      if (struct.isSetMem_used_bytes()) {
        oprot.writeI64(struct.mem_used_bytes);
      }
      if (struct.isSetCpu_used_permille()) {
        oprot.writeI32(struct.cpu_used_permille);
      }
      if (struct.isSetGroup_usages()) {
        {
          oprot.writeI32(struct.group_usages.size());
          for (TResourceGroupUsage _iter4 : struct.group_usages)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResourceUsage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.num_running_queries = iprot.readI32();
        struct.setNum_running_queriesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mem_limit_bytes = iprot.readI64();
        struct.setMem_limit_bytesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mem_used_bytes = iprot.readI64();
        struct.setMem_used_bytesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cpu_used_permille = iprot.readI32();
        struct.setCpu_used_permilleIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.group_usages = new java.util.ArrayList<TResourceGroupUsage>(_list5.size);
          @org.apache.thrift.annotation.Nullable TResourceGroupUsage _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new TResourceGroupUsage();
            _elem6.read(iprot);
            struct.group_usages.add(_elem6);
          }
        }
        struct.setGroup_usagesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

