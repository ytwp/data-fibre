/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class THashJoinNode implements org.apache.thrift.TBase<THashJoinNode, THashJoinNode._Fields>, java.io.Serializable, Cloneable, Comparable<THashJoinNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THashJoinNode");

  private static final org.apache.thrift.protocol.TField JOIN_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("join_op", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EQ_JOIN_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("eq_join_conjuncts", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField OTHER_JOIN_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("other_join_conjuncts", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField IS_PUSH_DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("is_push_down", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField ADD_PROBE_FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("add_probe_filters", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField IS_REWRITTEN_FROM_NOT_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("is_rewritten_from_not_in", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField SQL_JOIN_PREDICATES_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_join_predicates", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SQL_PREDICATES_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_predicates", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField BUILD_RUNTIME_FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("build_runtime_filters", org.apache.thrift.protocol.TType.LIST, (short)50);
  private static final org.apache.thrift.protocol.TField BUILD_RUNTIME_FILTERS_FROM_PLANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("build_runtime_filters_from_planner", org.apache.thrift.protocol.TType.BOOL, (short)51);
  private static final org.apache.thrift.protocol.TField DISTRIBUTION_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("distribution_mode", org.apache.thrift.protocol.TType.I32, (short)52);
  private static final org.apache.thrift.protocol.TField PARTITION_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_exprs", org.apache.thrift.protocol.TType.LIST, (short)53);
  private static final org.apache.thrift.protocol.TField OUTPUT_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("output_columns", org.apache.thrift.protocol.TType.LIST, (short)54);
  private static final org.apache.thrift.protocol.TField INTERPOLATE_PASSTHROUGH_FIELD_DESC = new org.apache.thrift.protocol.TField("interpolate_passthrough", org.apache.thrift.protocol.TType.BOOL, (short)55);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new THashJoinNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new THashJoinNodeTupleSchemeFactory();

  /**
   * 
   * @see TJoinOp
   */
  public @org.apache.thrift.annotation.Nullable TJoinOp join_op; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<TEqJoinCondition> eq_join_conjuncts; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> other_join_conjuncts; // optional
  public boolean is_push_down; // optional
  public boolean add_probe_filters; // optional
  public boolean is_rewritten_from_not_in; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sql_join_predicates; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sql_predicates; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TRuntimeFilterDescription> build_runtime_filters; // optional
  public boolean build_runtime_filters_from_planner; // optional
  /**
   * 
   * @see TJoinDistributionMode
   */
  public @org.apache.thrift.annotation.Nullable TJoinDistributionMode distribution_mode; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> partition_exprs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> output_columns; // optional
  public boolean interpolate_passthrough; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TJoinOp
     */
    JOIN_OP((short)1, "join_op"),
    EQ_JOIN_CONJUNCTS((short)2, "eq_join_conjuncts"),
    OTHER_JOIN_CONJUNCTS((short)3, "other_join_conjuncts"),
    IS_PUSH_DOWN((short)4, "is_push_down"),
    ADD_PROBE_FILTERS((short)5, "add_probe_filters"),
    IS_REWRITTEN_FROM_NOT_IN((short)20, "is_rewritten_from_not_in"),
    SQL_JOIN_PREDICATES((short)21, "sql_join_predicates"),
    SQL_PREDICATES((short)22, "sql_predicates"),
    BUILD_RUNTIME_FILTERS((short)50, "build_runtime_filters"),
    BUILD_RUNTIME_FILTERS_FROM_PLANNER((short)51, "build_runtime_filters_from_planner"),
    /**
     * 
     * @see TJoinDistributionMode
     */
    DISTRIBUTION_MODE((short)52, "distribution_mode"),
    PARTITION_EXPRS((short)53, "partition_exprs"),
    OUTPUT_COLUMNS((short)54, "output_columns"),
    INTERPOLATE_PASSTHROUGH((short)55, "interpolate_passthrough");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOIN_OP
          return JOIN_OP;
        case 2: // EQ_JOIN_CONJUNCTS
          return EQ_JOIN_CONJUNCTS;
        case 3: // OTHER_JOIN_CONJUNCTS
          return OTHER_JOIN_CONJUNCTS;
        case 4: // IS_PUSH_DOWN
          return IS_PUSH_DOWN;
        case 5: // ADD_PROBE_FILTERS
          return ADD_PROBE_FILTERS;
        case 20: // IS_REWRITTEN_FROM_NOT_IN
          return IS_REWRITTEN_FROM_NOT_IN;
        case 21: // SQL_JOIN_PREDICATES
          return SQL_JOIN_PREDICATES;
        case 22: // SQL_PREDICATES
          return SQL_PREDICATES;
        case 50: // BUILD_RUNTIME_FILTERS
          return BUILD_RUNTIME_FILTERS;
        case 51: // BUILD_RUNTIME_FILTERS_FROM_PLANNER
          return BUILD_RUNTIME_FILTERS_FROM_PLANNER;
        case 52: // DISTRIBUTION_MODE
          return DISTRIBUTION_MODE;
        case 53: // PARTITION_EXPRS
          return PARTITION_EXPRS;
        case 54: // OUTPUT_COLUMNS
          return OUTPUT_COLUMNS;
        case 55: // INTERPOLATE_PASSTHROUGH
          return INTERPOLATE_PASSTHROUGH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_PUSH_DOWN_ISSET_ID = 0;
  private static final int __ADD_PROBE_FILTERS_ISSET_ID = 1;
  private static final int __IS_REWRITTEN_FROM_NOT_IN_ISSET_ID = 2;
  private static final int __BUILD_RUNTIME_FILTERS_FROM_PLANNER_ISSET_ID = 3;
  private static final int __INTERPOLATE_PASSTHROUGH_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OTHER_JOIN_CONJUNCTS,_Fields.IS_PUSH_DOWN,_Fields.ADD_PROBE_FILTERS,_Fields.IS_REWRITTEN_FROM_NOT_IN,_Fields.SQL_JOIN_PREDICATES,_Fields.SQL_PREDICATES,_Fields.BUILD_RUNTIME_FILTERS,_Fields.BUILD_RUNTIME_FILTERS_FROM_PLANNER,_Fields.DISTRIBUTION_MODE,_Fields.PARTITION_EXPRS,_Fields.OUTPUT_COLUMNS,_Fields.INTERPOLATE_PASSTHROUGH};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOIN_OP, new org.apache.thrift.meta_data.FieldMetaData("join_op", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TJoinOp.class)));
    tmpMap.put(_Fields.EQ_JOIN_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("eq_join_conjuncts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEqJoinCondition.class))));
    tmpMap.put(_Fields.OTHER_JOIN_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("other_join_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class))));
    tmpMap.put(_Fields.IS_PUSH_DOWN, new org.apache.thrift.meta_data.FieldMetaData("is_push_down", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ADD_PROBE_FILTERS, new org.apache.thrift.meta_data.FieldMetaData("add_probe_filters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_REWRITTEN_FROM_NOT_IN, new org.apache.thrift.meta_data.FieldMetaData("is_rewritten_from_not_in", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SQL_JOIN_PREDICATES, new org.apache.thrift.meta_data.FieldMetaData("sql_join_predicates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SQL_PREDICATES, new org.apache.thrift.meta_data.FieldMetaData("sql_predicates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUILD_RUNTIME_FILTERS, new org.apache.thrift.meta_data.FieldMetaData("build_runtime_filters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TRuntimeFilterDescription.class))));
    tmpMap.put(_Fields.BUILD_RUNTIME_FILTERS_FROM_PLANNER, new org.apache.thrift.meta_data.FieldMetaData("build_runtime_filters_from_planner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISTRIBUTION_MODE, new org.apache.thrift.meta_data.FieldMetaData("distribution_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TJoinDistributionMode.class)));
    tmpMap.put(_Fields.PARTITION_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("partition_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class))));
    tmpMap.put(_Fields.OUTPUT_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("output_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    tmpMap.put(_Fields.INTERPOLATE_PASSTHROUGH, new org.apache.thrift.meta_data.FieldMetaData("interpolate_passthrough", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THashJoinNode.class, metaDataMap);
  }

  public THashJoinNode() {
    this.interpolate_passthrough = false;

  }

  public THashJoinNode(
    TJoinOp join_op,
    java.util.List<TEqJoinCondition> eq_join_conjuncts)
  {
    this();
    this.join_op = join_op;
    this.eq_join_conjuncts = eq_join_conjuncts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THashJoinNode(THashJoinNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJoin_op()) {
      this.join_op = other.join_op;
    }
    if (other.isSetEq_join_conjuncts()) {
      java.util.List<TEqJoinCondition> __this__eq_join_conjuncts = new java.util.ArrayList<TEqJoinCondition>(other.eq_join_conjuncts.size());
      for (TEqJoinCondition other_element : other.eq_join_conjuncts) {
        __this__eq_join_conjuncts.add(new TEqJoinCondition(other_element));
      }
      this.eq_join_conjuncts = __this__eq_join_conjuncts;
    }
    if (other.isSetOther_join_conjuncts()) {
      java.util.List<com.starrocks.thrift.TExpr> __this__other_join_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>(other.other_join_conjuncts.size());
      for (com.starrocks.thrift.TExpr other_element : other.other_join_conjuncts) {
        __this__other_join_conjuncts.add(new com.starrocks.thrift.TExpr(other_element));
      }
      this.other_join_conjuncts = __this__other_join_conjuncts;
    }
    this.is_push_down = other.is_push_down;
    this.add_probe_filters = other.add_probe_filters;
    this.is_rewritten_from_not_in = other.is_rewritten_from_not_in;
    if (other.isSetSql_join_predicates()) {
      this.sql_join_predicates = other.sql_join_predicates;
    }
    if (other.isSetSql_predicates()) {
      this.sql_predicates = other.sql_predicates;
    }
    if (other.isSetBuild_runtime_filters()) {
      java.util.List<com.starrocks.thrift.TRuntimeFilterDescription> __this__build_runtime_filters = new java.util.ArrayList<com.starrocks.thrift.TRuntimeFilterDescription>(other.build_runtime_filters.size());
      for (com.starrocks.thrift.TRuntimeFilterDescription other_element : other.build_runtime_filters) {
        __this__build_runtime_filters.add(new com.starrocks.thrift.TRuntimeFilterDescription(other_element));
      }
      this.build_runtime_filters = __this__build_runtime_filters;
    }
    this.build_runtime_filters_from_planner = other.build_runtime_filters_from_planner;
    if (other.isSetDistribution_mode()) {
      this.distribution_mode = other.distribution_mode;
    }
    if (other.isSetPartition_exprs()) {
      java.util.List<com.starrocks.thrift.TExpr> __this__partition_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>(other.partition_exprs.size());
      for (com.starrocks.thrift.TExpr other_element : other.partition_exprs) {
        __this__partition_exprs.add(new com.starrocks.thrift.TExpr(other_element));
      }
      this.partition_exprs = __this__partition_exprs;
    }
    if (other.isSetOutput_columns()) {
      java.util.List<java.lang.Integer> __this__output_columns = new java.util.ArrayList<java.lang.Integer>(other.output_columns.size());
      for (java.lang.Integer other_element : other.output_columns) {
        __this__output_columns.add(other_element);
      }
      this.output_columns = __this__output_columns;
    }
    this.interpolate_passthrough = other.interpolate_passthrough;
  }

  @Override
  public THashJoinNode deepCopy() {
    return new THashJoinNode(this);
  }

  @Override
  public void clear() {
    this.join_op = null;
    this.eq_join_conjuncts = null;
    this.other_join_conjuncts = null;
    setIs_push_downIsSet(false);
    this.is_push_down = false;
    setAdd_probe_filtersIsSet(false);
    this.add_probe_filters = false;
    setIs_rewritten_from_not_inIsSet(false);
    this.is_rewritten_from_not_in = false;
    this.sql_join_predicates = null;
    this.sql_predicates = null;
    this.build_runtime_filters = null;
    setBuild_runtime_filters_from_plannerIsSet(false);
    this.build_runtime_filters_from_planner = false;
    this.distribution_mode = null;
    this.partition_exprs = null;
    this.output_columns = null;
    this.interpolate_passthrough = false;

  }

  /**
   * 
   * @see TJoinOp
   */
  @org.apache.thrift.annotation.Nullable
  public TJoinOp getJoin_op() {
    return this.join_op;
  }

  /**
   * 
   * @see TJoinOp
   */
  public THashJoinNode setJoin_op(@org.apache.thrift.annotation.Nullable TJoinOp join_op) {
    this.join_op = join_op;
    return this;
  }

  public void unsetJoin_op() {
    this.join_op = null;
  }

  /** Returns true if field join_op is set (has been assigned a value) and false otherwise */
  public boolean isSetJoin_op() {
    return this.join_op != null;
  }

  public void setJoin_opIsSet(boolean value) {
    if (!value) {
      this.join_op = null;
    }
  }

  public int getEq_join_conjunctsSize() {
    return (this.eq_join_conjuncts == null) ? 0 : this.eq_join_conjuncts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TEqJoinCondition> getEq_join_conjunctsIterator() {
    return (this.eq_join_conjuncts == null) ? null : this.eq_join_conjuncts.iterator();
  }

  public void addToEq_join_conjuncts(TEqJoinCondition elem) {
    if (this.eq_join_conjuncts == null) {
      this.eq_join_conjuncts = new java.util.ArrayList<TEqJoinCondition>();
    }
    this.eq_join_conjuncts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TEqJoinCondition> getEq_join_conjuncts() {
    return this.eq_join_conjuncts;
  }

  public THashJoinNode setEq_join_conjuncts(@org.apache.thrift.annotation.Nullable java.util.List<TEqJoinCondition> eq_join_conjuncts) {
    this.eq_join_conjuncts = eq_join_conjuncts;
    return this;
  }

  public void unsetEq_join_conjuncts() {
    this.eq_join_conjuncts = null;
  }

  /** Returns true if field eq_join_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetEq_join_conjuncts() {
    return this.eq_join_conjuncts != null;
  }

  public void setEq_join_conjunctsIsSet(boolean value) {
    if (!value) {
      this.eq_join_conjuncts = null;
    }
  }

  public int getOther_join_conjunctsSize() {
    return (this.other_join_conjuncts == null) ? 0 : this.other_join_conjuncts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TExpr> getOther_join_conjunctsIterator() {
    return (this.other_join_conjuncts == null) ? null : this.other_join_conjuncts.iterator();
  }

  public void addToOther_join_conjuncts(com.starrocks.thrift.TExpr elem) {
    if (this.other_join_conjuncts == null) {
      this.other_join_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>();
    }
    this.other_join_conjuncts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TExpr> getOther_join_conjuncts() {
    return this.other_join_conjuncts;
  }

  public THashJoinNode setOther_join_conjuncts(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> other_join_conjuncts) {
    this.other_join_conjuncts = other_join_conjuncts;
    return this;
  }

  public void unsetOther_join_conjuncts() {
    this.other_join_conjuncts = null;
  }

  /** Returns true if field other_join_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetOther_join_conjuncts() {
    return this.other_join_conjuncts != null;
  }

  public void setOther_join_conjunctsIsSet(boolean value) {
    if (!value) {
      this.other_join_conjuncts = null;
    }
  }

  public boolean isIs_push_down() {
    return this.is_push_down;
  }

  public THashJoinNode setIs_push_down(boolean is_push_down) {
    this.is_push_down = is_push_down;
    setIs_push_downIsSet(true);
    return this;
  }

  public void unsetIs_push_down() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_PUSH_DOWN_ISSET_ID);
  }

  /** Returns true if field is_push_down is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_push_down() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_PUSH_DOWN_ISSET_ID);
  }

  public void setIs_push_downIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_PUSH_DOWN_ISSET_ID, value);
  }

  public boolean isAdd_probe_filters() {
    return this.add_probe_filters;
  }

  public THashJoinNode setAdd_probe_filters(boolean add_probe_filters) {
    this.add_probe_filters = add_probe_filters;
    setAdd_probe_filtersIsSet(true);
    return this;
  }

  public void unsetAdd_probe_filters() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ADD_PROBE_FILTERS_ISSET_ID);
  }

  /** Returns true if field add_probe_filters is set (has been assigned a value) and false otherwise */
  public boolean isSetAdd_probe_filters() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ADD_PROBE_FILTERS_ISSET_ID);
  }

  public void setAdd_probe_filtersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ADD_PROBE_FILTERS_ISSET_ID, value);
  }

  public boolean isIs_rewritten_from_not_in() {
    return this.is_rewritten_from_not_in;
  }

  public THashJoinNode setIs_rewritten_from_not_in(boolean is_rewritten_from_not_in) {
    this.is_rewritten_from_not_in = is_rewritten_from_not_in;
    setIs_rewritten_from_not_inIsSet(true);
    return this;
  }

  public void unsetIs_rewritten_from_not_in() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_REWRITTEN_FROM_NOT_IN_ISSET_ID);
  }

  /** Returns true if field is_rewritten_from_not_in is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_rewritten_from_not_in() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_REWRITTEN_FROM_NOT_IN_ISSET_ID);
  }

  public void setIs_rewritten_from_not_inIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_REWRITTEN_FROM_NOT_IN_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSql_join_predicates() {
    return this.sql_join_predicates;
  }

  public THashJoinNode setSql_join_predicates(@org.apache.thrift.annotation.Nullable java.lang.String sql_join_predicates) {
    this.sql_join_predicates = sql_join_predicates;
    return this;
  }

  public void unsetSql_join_predicates() {
    this.sql_join_predicates = null;
  }

  /** Returns true if field sql_join_predicates is set (has been assigned a value) and false otherwise */
  public boolean isSetSql_join_predicates() {
    return this.sql_join_predicates != null;
  }

  public void setSql_join_predicatesIsSet(boolean value) {
    if (!value) {
      this.sql_join_predicates = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSql_predicates() {
    return this.sql_predicates;
  }

  public THashJoinNode setSql_predicates(@org.apache.thrift.annotation.Nullable java.lang.String sql_predicates) {
    this.sql_predicates = sql_predicates;
    return this;
  }

  public void unsetSql_predicates() {
    this.sql_predicates = null;
  }

  /** Returns true if field sql_predicates is set (has been assigned a value) and false otherwise */
  public boolean isSetSql_predicates() {
    return this.sql_predicates != null;
  }

  public void setSql_predicatesIsSet(boolean value) {
    if (!value) {
      this.sql_predicates = null;
    }
  }

  public int getBuild_runtime_filtersSize() {
    return (this.build_runtime_filters == null) ? 0 : this.build_runtime_filters.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TRuntimeFilterDescription> getBuild_runtime_filtersIterator() {
    return (this.build_runtime_filters == null) ? null : this.build_runtime_filters.iterator();
  }

  public void addToBuild_runtime_filters(com.starrocks.thrift.TRuntimeFilterDescription elem) {
    if (this.build_runtime_filters == null) {
      this.build_runtime_filters = new java.util.ArrayList<com.starrocks.thrift.TRuntimeFilterDescription>();
    }
    this.build_runtime_filters.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TRuntimeFilterDescription> getBuild_runtime_filters() {
    return this.build_runtime_filters;
  }

  public THashJoinNode setBuild_runtime_filters(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TRuntimeFilterDescription> build_runtime_filters) {
    this.build_runtime_filters = build_runtime_filters;
    return this;
  }

  public void unsetBuild_runtime_filters() {
    this.build_runtime_filters = null;
  }

  /** Returns true if field build_runtime_filters is set (has been assigned a value) and false otherwise */
  public boolean isSetBuild_runtime_filters() {
    return this.build_runtime_filters != null;
  }

  public void setBuild_runtime_filtersIsSet(boolean value) {
    if (!value) {
      this.build_runtime_filters = null;
    }
  }

  public boolean isBuild_runtime_filters_from_planner() {
    return this.build_runtime_filters_from_planner;
  }

  public THashJoinNode setBuild_runtime_filters_from_planner(boolean build_runtime_filters_from_planner) {
    this.build_runtime_filters_from_planner = build_runtime_filters_from_planner;
    setBuild_runtime_filters_from_plannerIsSet(true);
    return this;
  }

  public void unsetBuild_runtime_filters_from_planner() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUILD_RUNTIME_FILTERS_FROM_PLANNER_ISSET_ID);
  }

  /** Returns true if field build_runtime_filters_from_planner is set (has been assigned a value) and false otherwise */
  public boolean isSetBuild_runtime_filters_from_planner() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUILD_RUNTIME_FILTERS_FROM_PLANNER_ISSET_ID);
  }

  public void setBuild_runtime_filters_from_plannerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUILD_RUNTIME_FILTERS_FROM_PLANNER_ISSET_ID, value);
  }

  /**
   * 
   * @see TJoinDistributionMode
   */
  @org.apache.thrift.annotation.Nullable
  public TJoinDistributionMode getDistribution_mode() {
    return this.distribution_mode;
  }

  /**
   * 
   * @see TJoinDistributionMode
   */
  public THashJoinNode setDistribution_mode(@org.apache.thrift.annotation.Nullable TJoinDistributionMode distribution_mode) {
    this.distribution_mode = distribution_mode;
    return this;
  }

  public void unsetDistribution_mode() {
    this.distribution_mode = null;
  }

  /** Returns true if field distribution_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetDistribution_mode() {
    return this.distribution_mode != null;
  }

  public void setDistribution_modeIsSet(boolean value) {
    if (!value) {
      this.distribution_mode = null;
    }
  }

  public int getPartition_exprsSize() {
    return (this.partition_exprs == null) ? 0 : this.partition_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TExpr> getPartition_exprsIterator() {
    return (this.partition_exprs == null) ? null : this.partition_exprs.iterator();
  }

  public void addToPartition_exprs(com.starrocks.thrift.TExpr elem) {
    if (this.partition_exprs == null) {
      this.partition_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>();
    }
    this.partition_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TExpr> getPartition_exprs() {
    return this.partition_exprs;
  }

  public THashJoinNode setPartition_exprs(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> partition_exprs) {
    this.partition_exprs = partition_exprs;
    return this;
  }

  public void unsetPartition_exprs() {
    this.partition_exprs = null;
  }

  /** Returns true if field partition_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_exprs() {
    return this.partition_exprs != null;
  }

  public void setPartition_exprsIsSet(boolean value) {
    if (!value) {
      this.partition_exprs = null;
    }
  }

  public int getOutput_columnsSize() {
    return (this.output_columns == null) ? 0 : this.output_columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getOutput_columnsIterator() {
    return (this.output_columns == null) ? null : this.output_columns.iterator();
  }

  public void addToOutput_columns(int elem) {
    if (this.output_columns == null) {
      this.output_columns = new java.util.ArrayList<java.lang.Integer>();
    }
    this.output_columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getOutput_columns() {
    return this.output_columns;
  }

  public THashJoinNode setOutput_columns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> output_columns) {
    this.output_columns = output_columns;
    return this;
  }

  public void unsetOutput_columns() {
    this.output_columns = null;
  }

  /** Returns true if field output_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_columns() {
    return this.output_columns != null;
  }

  public void setOutput_columnsIsSet(boolean value) {
    if (!value) {
      this.output_columns = null;
    }
  }

  public boolean isInterpolate_passthrough() {
    return this.interpolate_passthrough;
  }

  public THashJoinNode setInterpolate_passthrough(boolean interpolate_passthrough) {
    this.interpolate_passthrough = interpolate_passthrough;
    setInterpolate_passthroughIsSet(true);
    return this;
  }

  public void unsetInterpolate_passthrough() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERPOLATE_PASSTHROUGH_ISSET_ID);
  }

  /** Returns true if field interpolate_passthrough is set (has been assigned a value) and false otherwise */
  public boolean isSetInterpolate_passthrough() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERPOLATE_PASSTHROUGH_ISSET_ID);
  }

  public void setInterpolate_passthroughIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERPOLATE_PASSTHROUGH_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case JOIN_OP:
      if (value == null) {
        unsetJoin_op();
      } else {
        setJoin_op((TJoinOp)value);
      }
      break;

    case EQ_JOIN_CONJUNCTS:
      if (value == null) {
        unsetEq_join_conjuncts();
      } else {
        setEq_join_conjuncts((java.util.List<TEqJoinCondition>)value);
      }
      break;

    case OTHER_JOIN_CONJUNCTS:
      if (value == null) {
        unsetOther_join_conjuncts();
      } else {
        setOther_join_conjuncts((java.util.List<com.starrocks.thrift.TExpr>)value);
      }
      break;

    case IS_PUSH_DOWN:
      if (value == null) {
        unsetIs_push_down();
      } else {
        setIs_push_down((java.lang.Boolean)value);
      }
      break;

    case ADD_PROBE_FILTERS:
      if (value == null) {
        unsetAdd_probe_filters();
      } else {
        setAdd_probe_filters((java.lang.Boolean)value);
      }
      break;

    case IS_REWRITTEN_FROM_NOT_IN:
      if (value == null) {
        unsetIs_rewritten_from_not_in();
      } else {
        setIs_rewritten_from_not_in((java.lang.Boolean)value);
      }
      break;

    case SQL_JOIN_PREDICATES:
      if (value == null) {
        unsetSql_join_predicates();
      } else {
        setSql_join_predicates((java.lang.String)value);
      }
      break;

    case SQL_PREDICATES:
      if (value == null) {
        unsetSql_predicates();
      } else {
        setSql_predicates((java.lang.String)value);
      }
      break;

    case BUILD_RUNTIME_FILTERS:
      if (value == null) {
        unsetBuild_runtime_filters();
      } else {
        setBuild_runtime_filters((java.util.List<com.starrocks.thrift.TRuntimeFilterDescription>)value);
      }
      break;

    case BUILD_RUNTIME_FILTERS_FROM_PLANNER:
      if (value == null) {
        unsetBuild_runtime_filters_from_planner();
      } else {
        setBuild_runtime_filters_from_planner((java.lang.Boolean)value);
      }
      break;

    case DISTRIBUTION_MODE:
      if (value == null) {
        unsetDistribution_mode();
      } else {
        setDistribution_mode((TJoinDistributionMode)value);
      }
      break;

    case PARTITION_EXPRS:
      if (value == null) {
        unsetPartition_exprs();
      } else {
        setPartition_exprs((java.util.List<com.starrocks.thrift.TExpr>)value);
      }
      break;

    case OUTPUT_COLUMNS:
      if (value == null) {
        unsetOutput_columns();
      } else {
        setOutput_columns((java.util.List<java.lang.Integer>)value);
      }
      break;

    case INTERPOLATE_PASSTHROUGH:
      if (value == null) {
        unsetInterpolate_passthrough();
      } else {
        setInterpolate_passthrough((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case JOIN_OP:
      return getJoin_op();

    case EQ_JOIN_CONJUNCTS:
      return getEq_join_conjuncts();

    case OTHER_JOIN_CONJUNCTS:
      return getOther_join_conjuncts();

    case IS_PUSH_DOWN:
      return isIs_push_down();

    case ADD_PROBE_FILTERS:
      return isAdd_probe_filters();

    case IS_REWRITTEN_FROM_NOT_IN:
      return isIs_rewritten_from_not_in();

    case SQL_JOIN_PREDICATES:
      return getSql_join_predicates();

    case SQL_PREDICATES:
      return getSql_predicates();

    case BUILD_RUNTIME_FILTERS:
      return getBuild_runtime_filters();

    case BUILD_RUNTIME_FILTERS_FROM_PLANNER:
      return isBuild_runtime_filters_from_planner();

    case DISTRIBUTION_MODE:
      return getDistribution_mode();

    case PARTITION_EXPRS:
      return getPartition_exprs();

    case OUTPUT_COLUMNS:
      return getOutput_columns();

    case INTERPOLATE_PASSTHROUGH:
      return isInterpolate_passthrough();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case JOIN_OP:
      return isSetJoin_op();
    case EQ_JOIN_CONJUNCTS:
      return isSetEq_join_conjuncts();
    case OTHER_JOIN_CONJUNCTS:
      return isSetOther_join_conjuncts();
    case IS_PUSH_DOWN:
      return isSetIs_push_down();
    case ADD_PROBE_FILTERS:
      return isSetAdd_probe_filters();
    case IS_REWRITTEN_FROM_NOT_IN:
      return isSetIs_rewritten_from_not_in();
    case SQL_JOIN_PREDICATES:
      return isSetSql_join_predicates();
    case SQL_PREDICATES:
      return isSetSql_predicates();
    case BUILD_RUNTIME_FILTERS:
      return isSetBuild_runtime_filters();
    case BUILD_RUNTIME_FILTERS_FROM_PLANNER:
      return isSetBuild_runtime_filters_from_planner();
    case DISTRIBUTION_MODE:
      return isSetDistribution_mode();
    case PARTITION_EXPRS:
      return isSetPartition_exprs();
    case OUTPUT_COLUMNS:
      return isSetOutput_columns();
    case INTERPOLATE_PASSTHROUGH:
      return isSetInterpolate_passthrough();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof THashJoinNode)
      return this.equals((THashJoinNode)that);
    return false;
  }

  public boolean equals(THashJoinNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_join_op = true && this.isSetJoin_op();
    boolean that_present_join_op = true && that.isSetJoin_op();
    if (this_present_join_op || that_present_join_op) {
      if (!(this_present_join_op && that_present_join_op))
        return false;
      if (!this.join_op.equals(that.join_op))
        return false;
    }

    boolean this_present_eq_join_conjuncts = true && this.isSetEq_join_conjuncts();
    boolean that_present_eq_join_conjuncts = true && that.isSetEq_join_conjuncts();
    if (this_present_eq_join_conjuncts || that_present_eq_join_conjuncts) {
      if (!(this_present_eq_join_conjuncts && that_present_eq_join_conjuncts))
        return false;
      if (!this.eq_join_conjuncts.equals(that.eq_join_conjuncts))
        return false;
    }

    boolean this_present_other_join_conjuncts = true && this.isSetOther_join_conjuncts();
    boolean that_present_other_join_conjuncts = true && that.isSetOther_join_conjuncts();
    if (this_present_other_join_conjuncts || that_present_other_join_conjuncts) {
      if (!(this_present_other_join_conjuncts && that_present_other_join_conjuncts))
        return false;
      if (!this.other_join_conjuncts.equals(that.other_join_conjuncts))
        return false;
    }

    boolean this_present_is_push_down = true && this.isSetIs_push_down();
    boolean that_present_is_push_down = true && that.isSetIs_push_down();
    if (this_present_is_push_down || that_present_is_push_down) {
      if (!(this_present_is_push_down && that_present_is_push_down))
        return false;
      if (this.is_push_down != that.is_push_down)
        return false;
    }

    boolean this_present_add_probe_filters = true && this.isSetAdd_probe_filters();
    boolean that_present_add_probe_filters = true && that.isSetAdd_probe_filters();
    if (this_present_add_probe_filters || that_present_add_probe_filters) {
      if (!(this_present_add_probe_filters && that_present_add_probe_filters))
        return false;
      if (this.add_probe_filters != that.add_probe_filters)
        return false;
    }

    boolean this_present_is_rewritten_from_not_in = true && this.isSetIs_rewritten_from_not_in();
    boolean that_present_is_rewritten_from_not_in = true && that.isSetIs_rewritten_from_not_in();
    if (this_present_is_rewritten_from_not_in || that_present_is_rewritten_from_not_in) {
      if (!(this_present_is_rewritten_from_not_in && that_present_is_rewritten_from_not_in))
        return false;
      if (this.is_rewritten_from_not_in != that.is_rewritten_from_not_in)
        return false;
    }

    boolean this_present_sql_join_predicates = true && this.isSetSql_join_predicates();
    boolean that_present_sql_join_predicates = true && that.isSetSql_join_predicates();
    if (this_present_sql_join_predicates || that_present_sql_join_predicates) {
      if (!(this_present_sql_join_predicates && that_present_sql_join_predicates))
        return false;
      if (!this.sql_join_predicates.equals(that.sql_join_predicates))
        return false;
    }

    boolean this_present_sql_predicates = true && this.isSetSql_predicates();
    boolean that_present_sql_predicates = true && that.isSetSql_predicates();
    if (this_present_sql_predicates || that_present_sql_predicates) {
      if (!(this_present_sql_predicates && that_present_sql_predicates))
        return false;
      if (!this.sql_predicates.equals(that.sql_predicates))
        return false;
    }

    boolean this_present_build_runtime_filters = true && this.isSetBuild_runtime_filters();
    boolean that_present_build_runtime_filters = true && that.isSetBuild_runtime_filters();
    if (this_present_build_runtime_filters || that_present_build_runtime_filters) {
      if (!(this_present_build_runtime_filters && that_present_build_runtime_filters))
        return false;
      if (!this.build_runtime_filters.equals(that.build_runtime_filters))
        return false;
    }

    boolean this_present_build_runtime_filters_from_planner = true && this.isSetBuild_runtime_filters_from_planner();
    boolean that_present_build_runtime_filters_from_planner = true && that.isSetBuild_runtime_filters_from_planner();
    if (this_present_build_runtime_filters_from_planner || that_present_build_runtime_filters_from_planner) {
      if (!(this_present_build_runtime_filters_from_planner && that_present_build_runtime_filters_from_planner))
        return false;
      if (this.build_runtime_filters_from_planner != that.build_runtime_filters_from_planner)
        return false;
    }

    boolean this_present_distribution_mode = true && this.isSetDistribution_mode();
    boolean that_present_distribution_mode = true && that.isSetDistribution_mode();
    if (this_present_distribution_mode || that_present_distribution_mode) {
      if (!(this_present_distribution_mode && that_present_distribution_mode))
        return false;
      if (!this.distribution_mode.equals(that.distribution_mode))
        return false;
    }

    boolean this_present_partition_exprs = true && this.isSetPartition_exprs();
    boolean that_present_partition_exprs = true && that.isSetPartition_exprs();
    if (this_present_partition_exprs || that_present_partition_exprs) {
      if (!(this_present_partition_exprs && that_present_partition_exprs))
        return false;
      if (!this.partition_exprs.equals(that.partition_exprs))
        return false;
    }

    boolean this_present_output_columns = true && this.isSetOutput_columns();
    boolean that_present_output_columns = true && that.isSetOutput_columns();
    if (this_present_output_columns || that_present_output_columns) {
      if (!(this_present_output_columns && that_present_output_columns))
        return false;
      if (!this.output_columns.equals(that.output_columns))
        return false;
    }

    boolean this_present_interpolate_passthrough = true && this.isSetInterpolate_passthrough();
    boolean that_present_interpolate_passthrough = true && that.isSetInterpolate_passthrough();
    if (this_present_interpolate_passthrough || that_present_interpolate_passthrough) {
      if (!(this_present_interpolate_passthrough && that_present_interpolate_passthrough))
        return false;
      if (this.interpolate_passthrough != that.interpolate_passthrough)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetJoin_op()) ? 131071 : 524287);
    if (isSetJoin_op())
      hashCode = hashCode * 8191 + join_op.getValue();

    hashCode = hashCode * 8191 + ((isSetEq_join_conjuncts()) ? 131071 : 524287);
    if (isSetEq_join_conjuncts())
      hashCode = hashCode * 8191 + eq_join_conjuncts.hashCode();

    hashCode = hashCode * 8191 + ((isSetOther_join_conjuncts()) ? 131071 : 524287);
    if (isSetOther_join_conjuncts())
      hashCode = hashCode * 8191 + other_join_conjuncts.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_push_down()) ? 131071 : 524287);
    if (isSetIs_push_down())
      hashCode = hashCode * 8191 + ((is_push_down) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAdd_probe_filters()) ? 131071 : 524287);
    if (isSetAdd_probe_filters())
      hashCode = hashCode * 8191 + ((add_probe_filters) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIs_rewritten_from_not_in()) ? 131071 : 524287);
    if (isSetIs_rewritten_from_not_in())
      hashCode = hashCode * 8191 + ((is_rewritten_from_not_in) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSql_join_predicates()) ? 131071 : 524287);
    if (isSetSql_join_predicates())
      hashCode = hashCode * 8191 + sql_join_predicates.hashCode();

    hashCode = hashCode * 8191 + ((isSetSql_predicates()) ? 131071 : 524287);
    if (isSetSql_predicates())
      hashCode = hashCode * 8191 + sql_predicates.hashCode();

    hashCode = hashCode * 8191 + ((isSetBuild_runtime_filters()) ? 131071 : 524287);
    if (isSetBuild_runtime_filters())
      hashCode = hashCode * 8191 + build_runtime_filters.hashCode();

    hashCode = hashCode * 8191 + ((isSetBuild_runtime_filters_from_planner()) ? 131071 : 524287);
    if (isSetBuild_runtime_filters_from_planner())
      hashCode = hashCode * 8191 + ((build_runtime_filters_from_planner) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDistribution_mode()) ? 131071 : 524287);
    if (isSetDistribution_mode())
      hashCode = hashCode * 8191 + distribution_mode.getValue();

    hashCode = hashCode * 8191 + ((isSetPartition_exprs()) ? 131071 : 524287);
    if (isSetPartition_exprs())
      hashCode = hashCode * 8191 + partition_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutput_columns()) ? 131071 : 524287);
    if (isSetOutput_columns())
      hashCode = hashCode * 8191 + output_columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetInterpolate_passthrough()) ? 131071 : 524287);
    if (isSetInterpolate_passthrough())
      hashCode = hashCode * 8191 + ((interpolate_passthrough) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(THashJoinNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetJoin_op(), other.isSetJoin_op());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoin_op()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.join_op, other.join_op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEq_join_conjuncts(), other.isSetEq_join_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEq_join_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eq_join_conjuncts, other.eq_join_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOther_join_conjuncts(), other.isSetOther_join_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOther_join_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.other_join_conjuncts, other.other_join_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_push_down(), other.isSetIs_push_down());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_push_down()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_push_down, other.is_push_down);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAdd_probe_filters(), other.isSetAdd_probe_filters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdd_probe_filters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.add_probe_filters, other.add_probe_filters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_rewritten_from_not_in(), other.isSetIs_rewritten_from_not_in());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_rewritten_from_not_in()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_rewritten_from_not_in, other.is_rewritten_from_not_in);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSql_join_predicates(), other.isSetSql_join_predicates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql_join_predicates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_join_predicates, other.sql_join_predicates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSql_predicates(), other.isSetSql_predicates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql_predicates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_predicates, other.sql_predicates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBuild_runtime_filters(), other.isSetBuild_runtime_filters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuild_runtime_filters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.build_runtime_filters, other.build_runtime_filters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBuild_runtime_filters_from_planner(), other.isSetBuild_runtime_filters_from_planner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuild_runtime_filters_from_planner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.build_runtime_filters_from_planner, other.build_runtime_filters_from_planner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDistribution_mode(), other.isSetDistribution_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistribution_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distribution_mode, other.distribution_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_exprs(), other.isSetPartition_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_exprs, other.partition_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutput_columns(), other.isSetOutput_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_columns, other.output_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInterpolate_passthrough(), other.isSetInterpolate_passthrough());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterpolate_passthrough()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interpolate_passthrough, other.interpolate_passthrough);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("THashJoinNode(");
    boolean first = true;

    sb.append("join_op:");
    if (this.join_op == null) {
      sb.append("null");
    } else {
      sb.append(this.join_op);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eq_join_conjuncts:");
    if (this.eq_join_conjuncts == null) {
      sb.append("null");
    } else {
      sb.append(this.eq_join_conjuncts);
    }
    first = false;
    if (isSetOther_join_conjuncts()) {
      if (!first) sb.append(", ");
      sb.append("other_join_conjuncts:");
      if (this.other_join_conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.other_join_conjuncts);
      }
      first = false;
    }
    if (isSetIs_push_down()) {
      if (!first) sb.append(", ");
      sb.append("is_push_down:");
      sb.append(this.is_push_down);
      first = false;
    }
    if (isSetAdd_probe_filters()) {
      if (!first) sb.append(", ");
      sb.append("add_probe_filters:");
      sb.append(this.add_probe_filters);
      first = false;
    }
    if (isSetIs_rewritten_from_not_in()) {
      if (!first) sb.append(", ");
      sb.append("is_rewritten_from_not_in:");
      sb.append(this.is_rewritten_from_not_in);
      first = false;
    }
    if (isSetSql_join_predicates()) {
      if (!first) sb.append(", ");
      sb.append("sql_join_predicates:");
      if (this.sql_join_predicates == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_join_predicates);
      }
      first = false;
    }
    if (isSetSql_predicates()) {
      if (!first) sb.append(", ");
      sb.append("sql_predicates:");
      if (this.sql_predicates == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_predicates);
      }
      first = false;
    }
    if (isSetBuild_runtime_filters()) {
      if (!first) sb.append(", ");
      sb.append("build_runtime_filters:");
      if (this.build_runtime_filters == null) {
        sb.append("null");
      } else {
        sb.append(this.build_runtime_filters);
      }
      first = false;
    }
    if (isSetBuild_runtime_filters_from_planner()) {
      if (!first) sb.append(", ");
      sb.append("build_runtime_filters_from_planner:");
      sb.append(this.build_runtime_filters_from_planner);
      first = false;
    }
    if (isSetDistribution_mode()) {
      if (!first) sb.append(", ");
      sb.append("distribution_mode:");
      if (this.distribution_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.distribution_mode);
      }
      first = false;
    }
    if (isSetPartition_exprs()) {
      if (!first) sb.append(", ");
      sb.append("partition_exprs:");
      if (this.partition_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_exprs);
      }
      first = false;
    }
    if (isSetOutput_columns()) {
      if (!first) sb.append(", ");
      sb.append("output_columns:");
      if (this.output_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.output_columns);
      }
      first = false;
    }
    if (isSetInterpolate_passthrough()) {
      if (!first) sb.append(", ");
      sb.append("interpolate_passthrough:");
      sb.append(this.interpolate_passthrough);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (join_op == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'join_op' was not present! Struct: " + toString());
    }
    if (eq_join_conjuncts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eq_join_conjuncts' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THashJoinNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THashJoinNodeStandardScheme getScheme() {
      return new THashJoinNodeStandardScheme();
    }
  }

  private static class THashJoinNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<THashJoinNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, THashJoinNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOIN_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.join_op = com.starrocks.thrift.TJoinOp.findByValue(iprot.readI32());
              struct.setJoin_opIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EQ_JOIN_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list362 = iprot.readListBegin();
                struct.eq_join_conjuncts = new java.util.ArrayList<TEqJoinCondition>(_list362.size);
                @org.apache.thrift.annotation.Nullable TEqJoinCondition _elem363;
                for (int _i364 = 0; _i364 < _list362.size; ++_i364)
                {
                  _elem363 = new TEqJoinCondition();
                  _elem363.read(iprot);
                  struct.eq_join_conjuncts.add(_elem363);
                }
                iprot.readListEnd();
              }
              struct.setEq_join_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OTHER_JOIN_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list365 = iprot.readListBegin();
                struct.other_join_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list365.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem366;
                for (int _i367 = 0; _i367 < _list365.size; ++_i367)
                {
                  _elem366 = new com.starrocks.thrift.TExpr();
                  _elem366.read(iprot);
                  struct.other_join_conjuncts.add(_elem366);
                }
                iprot.readListEnd();
              }
              struct.setOther_join_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_PUSH_DOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_push_down = iprot.readBool();
              struct.setIs_push_downIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ADD_PROBE_FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.add_probe_filters = iprot.readBool();
              struct.setAdd_probe_filtersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // IS_REWRITTEN_FROM_NOT_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_rewritten_from_not_in = iprot.readBool();
              struct.setIs_rewritten_from_not_inIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SQL_JOIN_PREDICATES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql_join_predicates = iprot.readString();
              struct.setSql_join_predicatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SQL_PREDICATES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql_predicates = iprot.readString();
              struct.setSql_predicatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // BUILD_RUNTIME_FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list368 = iprot.readListBegin();
                struct.build_runtime_filters = new java.util.ArrayList<com.starrocks.thrift.TRuntimeFilterDescription>(_list368.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TRuntimeFilterDescription _elem369;
                for (int _i370 = 0; _i370 < _list368.size; ++_i370)
                {
                  _elem369 = new com.starrocks.thrift.TRuntimeFilterDescription();
                  _elem369.read(iprot);
                  struct.build_runtime_filters.add(_elem369);
                }
                iprot.readListEnd();
              }
              struct.setBuild_runtime_filtersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // BUILD_RUNTIME_FILTERS_FROM_PLANNER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.build_runtime_filters_from_planner = iprot.readBool();
              struct.setBuild_runtime_filters_from_plannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // DISTRIBUTION_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.distribution_mode = com.starrocks.thrift.TJoinDistributionMode.findByValue(iprot.readI32());
              struct.setDistribution_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // PARTITION_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list371 = iprot.readListBegin();
                struct.partition_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list371.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem372;
                for (int _i373 = 0; _i373 < _list371.size; ++_i373)
                {
                  _elem372 = new com.starrocks.thrift.TExpr();
                  _elem372.read(iprot);
                  struct.partition_exprs.add(_elem372);
                }
                iprot.readListEnd();
              }
              struct.setPartition_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // OUTPUT_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list374 = iprot.readListBegin();
                struct.output_columns = new java.util.ArrayList<java.lang.Integer>(_list374.size);
                int _elem375;
                for (int _i376 = 0; _i376 < _list374.size; ++_i376)
                {
                  _elem375 = iprot.readI32();
                  struct.output_columns.add(_elem375);
                }
                iprot.readListEnd();
              }
              struct.setOutput_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // INTERPOLATE_PASSTHROUGH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.interpolate_passthrough = iprot.readBool();
              struct.setInterpolate_passthroughIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, THashJoinNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.join_op != null) {
        oprot.writeFieldBegin(JOIN_OP_FIELD_DESC);
        oprot.writeI32(struct.join_op.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.eq_join_conjuncts != null) {
        oprot.writeFieldBegin(EQ_JOIN_CONJUNCTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.eq_join_conjuncts.size()));
          for (TEqJoinCondition _iter377 : struct.eq_join_conjuncts)
          {
            _iter377.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.other_join_conjuncts != null) {
        if (struct.isSetOther_join_conjuncts()) {
          oprot.writeFieldBegin(OTHER_JOIN_CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.other_join_conjuncts.size()));
            for (com.starrocks.thrift.TExpr _iter378 : struct.other_join_conjuncts)
            {
              _iter378.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_push_down()) {
        oprot.writeFieldBegin(IS_PUSH_DOWN_FIELD_DESC);
        oprot.writeBool(struct.is_push_down);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAdd_probe_filters()) {
        oprot.writeFieldBegin(ADD_PROBE_FILTERS_FIELD_DESC);
        oprot.writeBool(struct.add_probe_filters);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_rewritten_from_not_in()) {
        oprot.writeFieldBegin(IS_REWRITTEN_FROM_NOT_IN_FIELD_DESC);
        oprot.writeBool(struct.is_rewritten_from_not_in);
        oprot.writeFieldEnd();
      }
      if (struct.sql_join_predicates != null) {
        if (struct.isSetSql_join_predicates()) {
          oprot.writeFieldBegin(SQL_JOIN_PREDICATES_FIELD_DESC);
          oprot.writeString(struct.sql_join_predicates);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sql_predicates != null) {
        if (struct.isSetSql_predicates()) {
          oprot.writeFieldBegin(SQL_PREDICATES_FIELD_DESC);
          oprot.writeString(struct.sql_predicates);
          oprot.writeFieldEnd();
        }
      }
      if (struct.build_runtime_filters != null) {
        if (struct.isSetBuild_runtime_filters()) {
          oprot.writeFieldBegin(BUILD_RUNTIME_FILTERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.build_runtime_filters.size()));
            for (com.starrocks.thrift.TRuntimeFilterDescription _iter379 : struct.build_runtime_filters)
            {
              _iter379.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBuild_runtime_filters_from_planner()) {
        oprot.writeFieldBegin(BUILD_RUNTIME_FILTERS_FROM_PLANNER_FIELD_DESC);
        oprot.writeBool(struct.build_runtime_filters_from_planner);
        oprot.writeFieldEnd();
      }
      if (struct.distribution_mode != null) {
        if (struct.isSetDistribution_mode()) {
          oprot.writeFieldBegin(DISTRIBUTION_MODE_FIELD_DESC);
          oprot.writeI32(struct.distribution_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_exprs != null) {
        if (struct.isSetPartition_exprs()) {
          oprot.writeFieldBegin(PARTITION_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_exprs.size()));
            for (com.starrocks.thrift.TExpr _iter380 : struct.partition_exprs)
            {
              _iter380.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.output_columns != null) {
        if (struct.isSetOutput_columns()) {
          oprot.writeFieldBegin(OUTPUT_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.output_columns.size()));
            for (int _iter381 : struct.output_columns)
            {
              oprot.writeI32(_iter381);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInterpolate_passthrough()) {
        oprot.writeFieldBegin(INTERPOLATE_PASSTHROUGH_FIELD_DESC);
        oprot.writeBool(struct.interpolate_passthrough);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THashJoinNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THashJoinNodeTupleScheme getScheme() {
      return new THashJoinNodeTupleScheme();
    }
  }

  private static class THashJoinNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<THashJoinNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THashJoinNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.join_op.getValue());
      {
        oprot.writeI32(struct.eq_join_conjuncts.size());
        for (TEqJoinCondition _iter382 : struct.eq_join_conjuncts)
        {
          _iter382.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOther_join_conjuncts()) {
        optionals.set(0);
      }
      if (struct.isSetIs_push_down()) {
        optionals.set(1);
      }
      if (struct.isSetAdd_probe_filters()) {
        optionals.set(2);
      }
      if (struct.isSetIs_rewritten_from_not_in()) {
        optionals.set(3);
      }
      if (struct.isSetSql_join_predicates()) {
        optionals.set(4);
      }
      if (struct.isSetSql_predicates()) {
        optionals.set(5);
      }
      if (struct.isSetBuild_runtime_filters()) {
        optionals.set(6);
      }
      if (struct.isSetBuild_runtime_filters_from_planner()) {
        optionals.set(7);
      }
      if (struct.isSetDistribution_mode()) {
        optionals.set(8);
      }
      if (struct.isSetPartition_exprs()) {
        optionals.set(9);
      }
      if (struct.isSetOutput_columns()) {
        optionals.set(10);
      }
      if (struct.isSetInterpolate_passthrough()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetOther_join_conjuncts()) {
        {
          oprot.writeI32(struct.other_join_conjuncts.size());
          for (com.starrocks.thrift.TExpr _iter383 : struct.other_join_conjuncts)
          {
            _iter383.write(oprot);
          }
        }
      }
      if (struct.isSetIs_push_down()) {
        oprot.writeBool(struct.is_push_down);
      }
      if (struct.isSetAdd_probe_filters()) {
        oprot.writeBool(struct.add_probe_filters);
      }
      if (struct.isSetIs_rewritten_from_not_in()) {
        oprot.writeBool(struct.is_rewritten_from_not_in);
      }
      if (struct.isSetSql_join_predicates()) {
        oprot.writeString(struct.sql_join_predicates);
      }
      if (struct.isSetSql_predicates()) {
        oprot.writeString(struct.sql_predicates);
      }
      if (struct.isSetBuild_runtime_filters()) {
        {
          oprot.writeI32(struct.build_runtime_filters.size());
          for (com.starrocks.thrift.TRuntimeFilterDescription _iter384 : struct.build_runtime_filters)
          {
            _iter384.write(oprot);
          }
        }
      }
      if (struct.isSetBuild_runtime_filters_from_planner()) {
        oprot.writeBool(struct.build_runtime_filters_from_planner);
      }
      if (struct.isSetDistribution_mode()) {
        oprot.writeI32(struct.distribution_mode.getValue());
      }
      if (struct.isSetPartition_exprs()) {
        {
          oprot.writeI32(struct.partition_exprs.size());
          for (com.starrocks.thrift.TExpr _iter385 : struct.partition_exprs)
          {
            _iter385.write(oprot);
          }
        }
      }
      if (struct.isSetOutput_columns()) {
        {
          oprot.writeI32(struct.output_columns.size());
          for (int _iter386 : struct.output_columns)
          {
            oprot.writeI32(_iter386);
          }
        }
      }
      if (struct.isSetInterpolate_passthrough()) {
        oprot.writeBool(struct.interpolate_passthrough);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THashJoinNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.join_op = com.starrocks.thrift.TJoinOp.findByValue(iprot.readI32());
      struct.setJoin_opIsSet(true);
      {
        org.apache.thrift.protocol.TList _list387 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.eq_join_conjuncts = new java.util.ArrayList<TEqJoinCondition>(_list387.size);
        @org.apache.thrift.annotation.Nullable TEqJoinCondition _elem388;
        for (int _i389 = 0; _i389 < _list387.size; ++_i389)
        {
          _elem388 = new TEqJoinCondition();
          _elem388.read(iprot);
          struct.eq_join_conjuncts.add(_elem388);
        }
      }
      struct.setEq_join_conjunctsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list390 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.other_join_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list390.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem391;
          for (int _i392 = 0; _i392 < _list390.size; ++_i392)
          {
            _elem391 = new com.starrocks.thrift.TExpr();
            _elem391.read(iprot);
            struct.other_join_conjuncts.add(_elem391);
          }
        }
        struct.setOther_join_conjunctsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.is_push_down = iprot.readBool();
        struct.setIs_push_downIsSet(true);
      }
      if (incoming.get(2)) {
        struct.add_probe_filters = iprot.readBool();
        struct.setAdd_probe_filtersIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_rewritten_from_not_in = iprot.readBool();
        struct.setIs_rewritten_from_not_inIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sql_join_predicates = iprot.readString();
        struct.setSql_join_predicatesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sql_predicates = iprot.readString();
        struct.setSql_predicatesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list393 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.build_runtime_filters = new java.util.ArrayList<com.starrocks.thrift.TRuntimeFilterDescription>(_list393.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TRuntimeFilterDescription _elem394;
          for (int _i395 = 0; _i395 < _list393.size; ++_i395)
          {
            _elem394 = new com.starrocks.thrift.TRuntimeFilterDescription();
            _elem394.read(iprot);
            struct.build_runtime_filters.add(_elem394);
          }
        }
        struct.setBuild_runtime_filtersIsSet(true);
      }
      if (incoming.get(7)) {
        struct.build_runtime_filters_from_planner = iprot.readBool();
        struct.setBuild_runtime_filters_from_plannerIsSet(true);
      }
      if (incoming.get(8)) {
        struct.distribution_mode = com.starrocks.thrift.TJoinDistributionMode.findByValue(iprot.readI32());
        struct.setDistribution_modeIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list396 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.partition_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list396.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem397;
          for (int _i398 = 0; _i398 < _list396.size; ++_i398)
          {
            _elem397 = new com.starrocks.thrift.TExpr();
            _elem397.read(iprot);
            struct.partition_exprs.add(_elem397);
          }
        }
        struct.setPartition_exprsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list399 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.output_columns = new java.util.ArrayList<java.lang.Integer>(_list399.size);
          int _elem400;
          for (int _i401 = 0; _i401 < _list399.size; ++_i401)
          {
            _elem400 = iprot.readI32();
            struct.output_columns.add(_elem400);
          }
        }
        struct.setOutput_columnsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.interpolate_passthrough = iprot.readBool();
        struct.setInterpolate_passthroughIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

