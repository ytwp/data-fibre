/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TVerboseVariableRecord implements org.apache.thrift.TBase<TVerboseVariableRecord, TVerboseVariableRecord._Fields>, java.io.Serializable, Cloneable, Comparable<TVerboseVariableRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TVerboseVariableRecord");

  private static final org.apache.thrift.protocol.TField VARIABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("variable_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEFAULT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("default_value", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_changed", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TVerboseVariableRecordStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TVerboseVariableRecordTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String variable_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String value; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String default_value; // optional
  public boolean is_changed; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VARIABLE_NAME((short)1, "variable_name"),
    VALUE((short)2, "value"),
    DEFAULT_VALUE((short)3, "default_value"),
    IS_CHANGED((short)4, "is_changed");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VARIABLE_NAME
          return VARIABLE_NAME;
        case 2: // VALUE
          return VALUE;
        case 3: // DEFAULT_VALUE
          return DEFAULT_VALUE;
        case 4: // IS_CHANGED
          return IS_CHANGED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_CHANGED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.VARIABLE_NAME,_Fields.VALUE,_Fields.DEFAULT_VALUE,_Fields.IS_CHANGED};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VARIABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("variable_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFAULT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("default_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("is_changed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TVerboseVariableRecord.class, metaDataMap);
  }

  public TVerboseVariableRecord() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TVerboseVariableRecord(TVerboseVariableRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetVariable_name()) {
      this.variable_name = other.variable_name;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetDefault_value()) {
      this.default_value = other.default_value;
    }
    this.is_changed = other.is_changed;
  }

  @Override
  public TVerboseVariableRecord deepCopy() {
    return new TVerboseVariableRecord(this);
  }

  @Override
  public void clear() {
    this.variable_name = null;
    this.value = null;
    this.default_value = null;
    setIs_changedIsSet(false);
    this.is_changed = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVariable_name() {
    return this.variable_name;
  }

  public TVerboseVariableRecord setVariable_name(@org.apache.thrift.annotation.Nullable java.lang.String variable_name) {
    this.variable_name = variable_name;
    return this;
  }

  public void unsetVariable_name() {
    this.variable_name = null;
  }

  /** Returns true if field variable_name is set (has been assigned a value) and false otherwise */
  public boolean isSetVariable_name() {
    return this.variable_name != null;
  }

  public void setVariable_nameIsSet(boolean value) {
    if (!value) {
      this.variable_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getValue() {
    return this.value;
  }

  public TVerboseVariableRecord setValue(@org.apache.thrift.annotation.Nullable java.lang.String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDefault_value() {
    return this.default_value;
  }

  public TVerboseVariableRecord setDefault_value(@org.apache.thrift.annotation.Nullable java.lang.String default_value) {
    this.default_value = default_value;
    return this;
  }

  public void unsetDefault_value() {
    this.default_value = null;
  }

  /** Returns true if field default_value is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_value() {
    return this.default_value != null;
  }

  public void setDefault_valueIsSet(boolean value) {
    if (!value) {
      this.default_value = null;
    }
  }

  public boolean isIs_changed() {
    return this.is_changed;
  }

  public TVerboseVariableRecord setIs_changed(boolean is_changed) {
    this.is_changed = is_changed;
    setIs_changedIsSet(true);
    return this;
  }

  public void unsetIs_changed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_CHANGED_ISSET_ID);
  }

  /** Returns true if field is_changed is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_changed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_CHANGED_ISSET_ID);
  }

  public void setIs_changedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_CHANGED_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case VARIABLE_NAME:
      if (value == null) {
        unsetVariable_name();
      } else {
        setVariable_name((java.lang.String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((java.lang.String)value);
      }
      break;

    case DEFAULT_VALUE:
      if (value == null) {
        unsetDefault_value();
      } else {
        setDefault_value((java.lang.String)value);
      }
      break;

    case IS_CHANGED:
      if (value == null) {
        unsetIs_changed();
      } else {
        setIs_changed((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case VARIABLE_NAME:
      return getVariable_name();

    case VALUE:
      return getValue();

    case DEFAULT_VALUE:
      return getDefault_value();

    case IS_CHANGED:
      return isIs_changed();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case VARIABLE_NAME:
      return isSetVariable_name();
    case VALUE:
      return isSetValue();
    case DEFAULT_VALUE:
      return isSetDefault_value();
    case IS_CHANGED:
      return isSetIs_changed();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TVerboseVariableRecord)
      return this.equals((TVerboseVariableRecord)that);
    return false;
  }

  public boolean equals(TVerboseVariableRecord that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_variable_name = true && this.isSetVariable_name();
    boolean that_present_variable_name = true && that.isSetVariable_name();
    if (this_present_variable_name || that_present_variable_name) {
      if (!(this_present_variable_name && that_present_variable_name))
        return false;
      if (!this.variable_name.equals(that.variable_name))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_default_value = true && this.isSetDefault_value();
    boolean that_present_default_value = true && that.isSetDefault_value();
    if (this_present_default_value || that_present_default_value) {
      if (!(this_present_default_value && that_present_default_value))
        return false;
      if (!this.default_value.equals(that.default_value))
        return false;
    }

    boolean this_present_is_changed = true && this.isSetIs_changed();
    boolean that_present_is_changed = true && that.isSetIs_changed();
    if (this_present_is_changed || that_present_is_changed) {
      if (!(this_present_is_changed && that_present_is_changed))
        return false;
      if (this.is_changed != that.is_changed)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetVariable_name()) ? 131071 : 524287);
    if (isSetVariable_name())
      hashCode = hashCode * 8191 + variable_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
    if (isSetValue())
      hashCode = hashCode * 8191 + value.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefault_value()) ? 131071 : 524287);
    if (isSetDefault_value())
      hashCode = hashCode * 8191 + default_value.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_changed()) ? 131071 : 524287);
    if (isSetIs_changed())
      hashCode = hashCode * 8191 + ((is_changed) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TVerboseVariableRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetVariable_name(), other.isSetVariable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variable_name, other.variable_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValue(), other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDefault_value(), other.isSetDefault_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_value, other.default_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_changed(), other.isSetIs_changed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_changed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_changed, other.is_changed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TVerboseVariableRecord(");
    boolean first = true;

    if (isSetVariable_name()) {
      sb.append("variable_name:");
      if (this.variable_name == null) {
        sb.append("null");
      } else {
        sb.append(this.variable_name);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetDefault_value()) {
      if (!first) sb.append(", ");
      sb.append("default_value:");
      if (this.default_value == null) {
        sb.append("null");
      } else {
        sb.append(this.default_value);
      }
      first = false;
    }
    if (isSetIs_changed()) {
      if (!first) sb.append(", ");
      sb.append("is_changed:");
      sb.append(this.is_changed);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TVerboseVariableRecordStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TVerboseVariableRecordStandardScheme getScheme() {
      return new TVerboseVariableRecordStandardScheme();
    }
  }

  private static class TVerboseVariableRecordStandardScheme extends org.apache.thrift.scheme.StandardScheme<TVerboseVariableRecord> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TVerboseVariableRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VARIABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.variable_name = iprot.readString();
              struct.setVariable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEFAULT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.default_value = iprot.readString();
              struct.setDefault_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_changed = iprot.readBool();
              struct.setIs_changedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TVerboseVariableRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.variable_name != null) {
        if (struct.isSetVariable_name()) {
          oprot.writeFieldBegin(VARIABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.variable_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.default_value != null) {
        if (struct.isSetDefault_value()) {
          oprot.writeFieldBegin(DEFAULT_VALUE_FIELD_DESC);
          oprot.writeString(struct.default_value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_changed()) {
        oprot.writeFieldBegin(IS_CHANGED_FIELD_DESC);
        oprot.writeBool(struct.is_changed);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TVerboseVariableRecordTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TVerboseVariableRecordTupleScheme getScheme() {
      return new TVerboseVariableRecordTupleScheme();
    }
  }

  private static class TVerboseVariableRecordTupleScheme extends org.apache.thrift.scheme.TupleScheme<TVerboseVariableRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TVerboseVariableRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetVariable_name()) {
        optionals.set(0);
      }
      if (struct.isSetValue()) {
        optionals.set(1);
      }
      if (struct.isSetDefault_value()) {
        optionals.set(2);
      }
      if (struct.isSetIs_changed()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetVariable_name()) {
        oprot.writeString(struct.variable_name);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetDefault_value()) {
        oprot.writeString(struct.default_value);
      }
      if (struct.isSetIs_changed()) {
        oprot.writeBool(struct.is_changed);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TVerboseVariableRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.variable_name = iprot.readString();
        struct.setVariable_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.default_value = iprot.readString();
        struct.setDefault_valueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_changed = iprot.readBool();
        struct.setIs_changedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

