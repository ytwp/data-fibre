/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TDistributionDesc implements org.apache.thrift.TBase<TDistributionDesc, TDistributionDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TDistributionDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDistributionDesc");

  private static final org.apache.thrift.protocol.TField DISTRIBUTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("distribution_type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HASH_DISTRIBUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("hash_distribution", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RANDOM_DISTRIBUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("random_distribution", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDistributionDescStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDistributionDescTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String distribution_type; // optional
  public @org.apache.thrift.annotation.Nullable THashDistributionInfo hash_distribution; // optional
  public @org.apache.thrift.annotation.Nullable TRandomDistributionInfo random_distribution; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DISTRIBUTION_TYPE((short)1, "distribution_type"),
    HASH_DISTRIBUTION((short)2, "hash_distribution"),
    RANDOM_DISTRIBUTION((short)3, "random_distribution");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DISTRIBUTION_TYPE
          return DISTRIBUTION_TYPE;
        case 2: // HASH_DISTRIBUTION
          return HASH_DISTRIBUTION;
        case 3: // RANDOM_DISTRIBUTION
          return RANDOM_DISTRIBUTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DISTRIBUTION_TYPE,_Fields.HASH_DISTRIBUTION,_Fields.RANDOM_DISTRIBUTION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DISTRIBUTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("distribution_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HASH_DISTRIBUTION, new org.apache.thrift.meta_data.FieldMetaData("hash_distribution", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THashDistributionInfo.class)));
    tmpMap.put(_Fields.RANDOM_DISTRIBUTION, new org.apache.thrift.meta_data.FieldMetaData("random_distribution", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRandomDistributionInfo.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDistributionDesc.class, metaDataMap);
  }

  public TDistributionDesc() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDistributionDesc(TDistributionDesc other) {
    if (other.isSetDistribution_type()) {
      this.distribution_type = other.distribution_type;
    }
    if (other.isSetHash_distribution()) {
      this.hash_distribution = new THashDistributionInfo(other.hash_distribution);
    }
    if (other.isSetRandom_distribution()) {
      this.random_distribution = new TRandomDistributionInfo(other.random_distribution);
    }
  }

  @Override
  public TDistributionDesc deepCopy() {
    return new TDistributionDesc(this);
  }

  @Override
  public void clear() {
    this.distribution_type = null;
    this.hash_distribution = null;
    this.random_distribution = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDistribution_type() {
    return this.distribution_type;
  }

  public TDistributionDesc setDistribution_type(@org.apache.thrift.annotation.Nullable java.lang.String distribution_type) {
    this.distribution_type = distribution_type;
    return this;
  }

  public void unsetDistribution_type() {
    this.distribution_type = null;
  }

  /** Returns true if field distribution_type is set (has been assigned a value) and false otherwise */
  public boolean isSetDistribution_type() {
    return this.distribution_type != null;
  }

  public void setDistribution_typeIsSet(boolean value) {
    if (!value) {
      this.distribution_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public THashDistributionInfo getHash_distribution() {
    return this.hash_distribution;
  }

  public TDistributionDesc setHash_distribution(@org.apache.thrift.annotation.Nullable THashDistributionInfo hash_distribution) {
    this.hash_distribution = hash_distribution;
    return this;
  }

  public void unsetHash_distribution() {
    this.hash_distribution = null;
  }

  /** Returns true if field hash_distribution is set (has been assigned a value) and false otherwise */
  public boolean isSetHash_distribution() {
    return this.hash_distribution != null;
  }

  public void setHash_distributionIsSet(boolean value) {
    if (!value) {
      this.hash_distribution = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TRandomDistributionInfo getRandom_distribution() {
    return this.random_distribution;
  }

  public TDistributionDesc setRandom_distribution(@org.apache.thrift.annotation.Nullable TRandomDistributionInfo random_distribution) {
    this.random_distribution = random_distribution;
    return this;
  }

  public void unsetRandom_distribution() {
    this.random_distribution = null;
  }

  /** Returns true if field random_distribution is set (has been assigned a value) and false otherwise */
  public boolean isSetRandom_distribution() {
    return this.random_distribution != null;
  }

  public void setRandom_distributionIsSet(boolean value) {
    if (!value) {
      this.random_distribution = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DISTRIBUTION_TYPE:
      if (value == null) {
        unsetDistribution_type();
      } else {
        setDistribution_type((java.lang.String)value);
      }
      break;

    case HASH_DISTRIBUTION:
      if (value == null) {
        unsetHash_distribution();
      } else {
        setHash_distribution((THashDistributionInfo)value);
      }
      break;

    case RANDOM_DISTRIBUTION:
      if (value == null) {
        unsetRandom_distribution();
      } else {
        setRandom_distribution((TRandomDistributionInfo)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DISTRIBUTION_TYPE:
      return getDistribution_type();

    case HASH_DISTRIBUTION:
      return getHash_distribution();

    case RANDOM_DISTRIBUTION:
      return getRandom_distribution();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DISTRIBUTION_TYPE:
      return isSetDistribution_type();
    case HASH_DISTRIBUTION:
      return isSetHash_distribution();
    case RANDOM_DISTRIBUTION:
      return isSetRandom_distribution();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TDistributionDesc)
      return this.equals((TDistributionDesc)that);
    return false;
  }

  public boolean equals(TDistributionDesc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_distribution_type = true && this.isSetDistribution_type();
    boolean that_present_distribution_type = true && that.isSetDistribution_type();
    if (this_present_distribution_type || that_present_distribution_type) {
      if (!(this_present_distribution_type && that_present_distribution_type))
        return false;
      if (!this.distribution_type.equals(that.distribution_type))
        return false;
    }

    boolean this_present_hash_distribution = true && this.isSetHash_distribution();
    boolean that_present_hash_distribution = true && that.isSetHash_distribution();
    if (this_present_hash_distribution || that_present_hash_distribution) {
      if (!(this_present_hash_distribution && that_present_hash_distribution))
        return false;
      if (!this.hash_distribution.equals(that.hash_distribution))
        return false;
    }

    boolean this_present_random_distribution = true && this.isSetRandom_distribution();
    boolean that_present_random_distribution = true && that.isSetRandom_distribution();
    if (this_present_random_distribution || that_present_random_distribution) {
      if (!(this_present_random_distribution && that_present_random_distribution))
        return false;
      if (!this.random_distribution.equals(that.random_distribution))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDistribution_type()) ? 131071 : 524287);
    if (isSetDistribution_type())
      hashCode = hashCode * 8191 + distribution_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetHash_distribution()) ? 131071 : 524287);
    if (isSetHash_distribution())
      hashCode = hashCode * 8191 + hash_distribution.hashCode();

    hashCode = hashCode * 8191 + ((isSetRandom_distribution()) ? 131071 : 524287);
    if (isSetRandom_distribution())
      hashCode = hashCode * 8191 + random_distribution.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDistributionDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetDistribution_type(), other.isSetDistribution_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistribution_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distribution_type, other.distribution_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHash_distribution(), other.isSetHash_distribution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHash_distribution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash_distribution, other.hash_distribution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRandom_distribution(), other.isSetRandom_distribution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRandom_distribution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.random_distribution, other.random_distribution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDistributionDesc(");
    boolean first = true;

    if (isSetDistribution_type()) {
      sb.append("distribution_type:");
      if (this.distribution_type == null) {
        sb.append("null");
      } else {
        sb.append(this.distribution_type);
      }
      first = false;
    }
    if (isSetHash_distribution()) {
      if (!first) sb.append(", ");
      sb.append("hash_distribution:");
      if (this.hash_distribution == null) {
        sb.append("null");
      } else {
        sb.append(this.hash_distribution);
      }
      first = false;
    }
    if (isSetRandom_distribution()) {
      if (!first) sb.append(", ");
      sb.append("random_distribution:");
      if (this.random_distribution == null) {
        sb.append("null");
      } else {
        sb.append(this.random_distribution);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (hash_distribution != null) {
      hash_distribution.validate();
    }
    if (random_distribution != null) {
      random_distribution.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDistributionDescStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDistributionDescStandardScheme getScheme() {
      return new TDistributionDescStandardScheme();
    }
  }

  private static class TDistributionDescStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDistributionDesc> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TDistributionDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DISTRIBUTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.distribution_type = iprot.readString();
              struct.setDistribution_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HASH_DISTRIBUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hash_distribution = new THashDistributionInfo();
              struct.hash_distribution.read(iprot);
              struct.setHash_distributionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RANDOM_DISTRIBUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.random_distribution = new TRandomDistributionInfo();
              struct.random_distribution.read(iprot);
              struct.setRandom_distributionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TDistributionDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.distribution_type != null) {
        if (struct.isSetDistribution_type()) {
          oprot.writeFieldBegin(DISTRIBUTION_TYPE_FIELD_DESC);
          oprot.writeString(struct.distribution_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hash_distribution != null) {
        if (struct.isSetHash_distribution()) {
          oprot.writeFieldBegin(HASH_DISTRIBUTION_FIELD_DESC);
          struct.hash_distribution.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.random_distribution != null) {
        if (struct.isSetRandom_distribution()) {
          oprot.writeFieldBegin(RANDOM_DISTRIBUTION_FIELD_DESC);
          struct.random_distribution.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDistributionDescTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDistributionDescTupleScheme getScheme() {
      return new TDistributionDescTupleScheme();
    }
  }

  private static class TDistributionDescTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDistributionDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDistributionDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDistribution_type()) {
        optionals.set(0);
      }
      if (struct.isSetHash_distribution()) {
        optionals.set(1);
      }
      if (struct.isSetRandom_distribution()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDistribution_type()) {
        oprot.writeString(struct.distribution_type);
      }
      if (struct.isSetHash_distribution()) {
        struct.hash_distribution.write(oprot);
      }
      if (struct.isSetRandom_distribution()) {
        struct.random_distribution.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDistributionDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.distribution_type = iprot.readString();
        struct.setDistribution_typeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hash_distribution = new THashDistributionInfo();
        struct.hash_distribution.read(iprot);
        struct.setHash_distributionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.random_distribution = new TRandomDistributionInfo();
        struct.random_distribution.read(iprot);
        struct.setRandom_distributionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

