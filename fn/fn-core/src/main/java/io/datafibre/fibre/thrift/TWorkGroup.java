/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TWorkGroup implements org.apache.thrift.TBase<TWorkGroup, TWorkGroup._Fields>, java.io.Serializable, Cloneable, Comparable<TWorkGroup> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TWorkGroup");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CPU_CORE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu_core_limit", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_limit", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField CONCURRENCY_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("concurrency_limit", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField WORKGROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("workgroup_type", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField NUM_DRIVERS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_drivers", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField BIG_QUERY_MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("big_query_mem_limit", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField BIG_QUERY_SCAN_ROWS_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("big_query_scan_rows_limit", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField BIG_QUERY_CPU_SECOND_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("big_query_cpu_second_limit", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField SPILL_MEM_LIMIT_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_mem_limit_threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField MAX_CPU_CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("max_cpu_cores", org.apache.thrift.protocol.TType.I32, (short)100);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TWorkGroupStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TWorkGroupTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // optional
  public long id; // optional
  public int cpu_core_limit; // optional
  public double mem_limit; // optional
  public int concurrency_limit; // optional
  /**
   * 
   * @see TWorkGroupType
   */
  public @org.apache.thrift.annotation.Nullable TWorkGroupType workgroup_type; // optional
  public long version; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String state; // optional
  public long num_drivers; // optional
  public long big_query_mem_limit; // optional
  public long big_query_scan_rows_limit; // optional
  public long big_query_cpu_second_limit; // optional
  public double spill_mem_limit_threshold; // optional
  public int max_cpu_cores; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    ID((short)2, "id"),
    CPU_CORE_LIMIT((short)3, "cpu_core_limit"),
    MEM_LIMIT((short)4, "mem_limit"),
    CONCURRENCY_LIMIT((short)5, "concurrency_limit"),
    /**
     * 
     * @see TWorkGroupType
     */
    WORKGROUP_TYPE((short)6, "workgroup_type"),
    VERSION((short)7, "version"),
    STATE((short)9, "state"),
    NUM_DRIVERS((short)10, "num_drivers"),
    BIG_QUERY_MEM_LIMIT((short)11, "big_query_mem_limit"),
    BIG_QUERY_SCAN_ROWS_LIMIT((short)12, "big_query_scan_rows_limit"),
    BIG_QUERY_CPU_SECOND_LIMIT((short)13, "big_query_cpu_second_limit"),
    SPILL_MEM_LIMIT_THRESHOLD((short)14, "spill_mem_limit_threshold"),
    MAX_CPU_CORES((short)100, "max_cpu_cores");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // ID
          return ID;
        case 3: // CPU_CORE_LIMIT
          return CPU_CORE_LIMIT;
        case 4: // MEM_LIMIT
          return MEM_LIMIT;
        case 5: // CONCURRENCY_LIMIT
          return CONCURRENCY_LIMIT;
        case 6: // WORKGROUP_TYPE
          return WORKGROUP_TYPE;
        case 7: // VERSION
          return VERSION;
        case 9: // STATE
          return STATE;
        case 10: // NUM_DRIVERS
          return NUM_DRIVERS;
        case 11: // BIG_QUERY_MEM_LIMIT
          return BIG_QUERY_MEM_LIMIT;
        case 12: // BIG_QUERY_SCAN_ROWS_LIMIT
          return BIG_QUERY_SCAN_ROWS_LIMIT;
        case 13: // BIG_QUERY_CPU_SECOND_LIMIT
          return BIG_QUERY_CPU_SECOND_LIMIT;
        case 14: // SPILL_MEM_LIMIT_THRESHOLD
          return SPILL_MEM_LIMIT_THRESHOLD;
        case 100: // MAX_CPU_CORES
          return MAX_CPU_CORES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CPU_CORE_LIMIT_ISSET_ID = 1;
  private static final int __MEM_LIMIT_ISSET_ID = 2;
  private static final int __CONCURRENCY_LIMIT_ISSET_ID = 3;
  private static final int __VERSION_ISSET_ID = 4;
  private static final int __NUM_DRIVERS_ISSET_ID = 5;
  private static final int __BIG_QUERY_MEM_LIMIT_ISSET_ID = 6;
  private static final int __BIG_QUERY_SCAN_ROWS_LIMIT_ISSET_ID = 7;
  private static final int __BIG_QUERY_CPU_SECOND_LIMIT_ISSET_ID = 8;
  private static final int __SPILL_MEM_LIMIT_THRESHOLD_ISSET_ID = 9;
  private static final int __MAX_CPU_CORES_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.ID,_Fields.CPU_CORE_LIMIT,_Fields.MEM_LIMIT,_Fields.CONCURRENCY_LIMIT,_Fields.WORKGROUP_TYPE,_Fields.VERSION,_Fields.STATE,_Fields.NUM_DRIVERS,_Fields.BIG_QUERY_MEM_LIMIT,_Fields.BIG_QUERY_SCAN_ROWS_LIMIT,_Fields.BIG_QUERY_CPU_SECOND_LIMIT,_Fields.SPILL_MEM_LIMIT_THRESHOLD,_Fields.MAX_CPU_CORES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CPU_CORE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("cpu_core_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("mem_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONCURRENCY_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("concurrency_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKGROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("workgroup_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TWorkGroupType.class)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_DRIVERS, new org.apache.thrift.meta_data.FieldMetaData("num_drivers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BIG_QUERY_MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("big_query_mem_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BIG_QUERY_SCAN_ROWS_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("big_query_scan_rows_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BIG_QUERY_CPU_SECOND_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("big_query_cpu_second_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPILL_MEM_LIMIT_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("spill_mem_limit_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_CPU_CORES, new org.apache.thrift.meta_data.FieldMetaData("max_cpu_cores", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TWorkGroup.class, metaDataMap);
  }

  public TWorkGroup() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TWorkGroup(TWorkGroup other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.id = other.id;
    this.cpu_core_limit = other.cpu_core_limit;
    this.mem_limit = other.mem_limit;
    this.concurrency_limit = other.concurrency_limit;
    if (other.isSetWorkgroup_type()) {
      this.workgroup_type = other.workgroup_type;
    }
    this.version = other.version;
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.num_drivers = other.num_drivers;
    this.big_query_mem_limit = other.big_query_mem_limit;
    this.big_query_scan_rows_limit = other.big_query_scan_rows_limit;
    this.big_query_cpu_second_limit = other.big_query_cpu_second_limit;
    this.spill_mem_limit_threshold = other.spill_mem_limit_threshold;
    this.max_cpu_cores = other.max_cpu_cores;
  }

  @Override
  public TWorkGroup deepCopy() {
    return new TWorkGroup(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setIdIsSet(false);
    this.id = 0;
    setCpu_core_limitIsSet(false);
    this.cpu_core_limit = 0;
    setMem_limitIsSet(false);
    this.mem_limit = 0.0;
    setConcurrency_limitIsSet(false);
    this.concurrency_limit = 0;
    this.workgroup_type = null;
    setVersionIsSet(false);
    this.version = 0;
    this.state = null;
    setNum_driversIsSet(false);
    this.num_drivers = 0;
    setBig_query_mem_limitIsSet(false);
    this.big_query_mem_limit = 0;
    setBig_query_scan_rows_limitIsSet(false);
    this.big_query_scan_rows_limit = 0;
    setBig_query_cpu_second_limitIsSet(false);
    this.big_query_cpu_second_limit = 0;
    setSpill_mem_limit_thresholdIsSet(false);
    this.spill_mem_limit_threshold = 0.0;
    setMax_cpu_coresIsSet(false);
    this.max_cpu_cores = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public TWorkGroup setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getId() {
    return this.id;
  }

  public TWorkGroup setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getCpu_core_limit() {
    return this.cpu_core_limit;
  }

  public TWorkGroup setCpu_core_limit(int cpu_core_limit) {
    this.cpu_core_limit = cpu_core_limit;
    setCpu_core_limitIsSet(true);
    return this;
  }

  public void unsetCpu_core_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPU_CORE_LIMIT_ISSET_ID);
  }

  /** Returns true if field cpu_core_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu_core_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPU_CORE_LIMIT_ISSET_ID);
  }

  public void setCpu_core_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPU_CORE_LIMIT_ISSET_ID, value);
  }

  public double getMem_limit() {
    return this.mem_limit;
  }

  public TWorkGroup setMem_limit(double mem_limit) {
    this.mem_limit = mem_limit;
    setMem_limitIsSet(true);
    return this;
  }

  public void unsetMem_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEM_LIMIT_ISSET_ID);
  }

  /** Returns true if field mem_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEM_LIMIT_ISSET_ID);
  }

  public void setMem_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEM_LIMIT_ISSET_ID, value);
  }

  public int getConcurrency_limit() {
    return this.concurrency_limit;
  }

  public TWorkGroup setConcurrency_limit(int concurrency_limit) {
    this.concurrency_limit = concurrency_limit;
    setConcurrency_limitIsSet(true);
    return this;
  }

  public void unsetConcurrency_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONCURRENCY_LIMIT_ISSET_ID);
  }

  /** Returns true if field concurrency_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetConcurrency_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONCURRENCY_LIMIT_ISSET_ID);
  }

  public void setConcurrency_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONCURRENCY_LIMIT_ISSET_ID, value);
  }

  /**
   * 
   * @see TWorkGroupType
   */
  @org.apache.thrift.annotation.Nullable
  public TWorkGroupType getWorkgroup_type() {
    return this.workgroup_type;
  }

  /**
   * 
   * @see TWorkGroupType
   */
  public TWorkGroup setWorkgroup_type(@org.apache.thrift.annotation.Nullable TWorkGroupType workgroup_type) {
    this.workgroup_type = workgroup_type;
    return this;
  }

  public void unsetWorkgroup_type() {
    this.workgroup_type = null;
  }

  /** Returns true if field workgroup_type is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkgroup_type() {
    return this.workgroup_type != null;
  }

  public void setWorkgroup_typeIsSet(boolean value) {
    if (!value) {
      this.workgroup_type = null;
    }
  }

  public long getVersion() {
    return this.version;
  }

  public TWorkGroup setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getState() {
    return this.state;
  }

  public TWorkGroup setState(@org.apache.thrift.annotation.Nullable java.lang.String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public long getNum_drivers() {
    return this.num_drivers;
  }

  public TWorkGroup setNum_drivers(long num_drivers) {
    this.num_drivers = num_drivers;
    setNum_driversIsSet(true);
    return this;
  }

  public void unsetNum_drivers() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_DRIVERS_ISSET_ID);
  }

  /** Returns true if field num_drivers is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_drivers() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_DRIVERS_ISSET_ID);
  }

  public void setNum_driversIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_DRIVERS_ISSET_ID, value);
  }

  public long getBig_query_mem_limit() {
    return this.big_query_mem_limit;
  }

  public TWorkGroup setBig_query_mem_limit(long big_query_mem_limit) {
    this.big_query_mem_limit = big_query_mem_limit;
    setBig_query_mem_limitIsSet(true);
    return this;
  }

  public void unsetBig_query_mem_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIG_QUERY_MEM_LIMIT_ISSET_ID);
  }

  /** Returns true if field big_query_mem_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetBig_query_mem_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIG_QUERY_MEM_LIMIT_ISSET_ID);
  }

  public void setBig_query_mem_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIG_QUERY_MEM_LIMIT_ISSET_ID, value);
  }

  public long getBig_query_scan_rows_limit() {
    return this.big_query_scan_rows_limit;
  }

  public TWorkGroup setBig_query_scan_rows_limit(long big_query_scan_rows_limit) {
    this.big_query_scan_rows_limit = big_query_scan_rows_limit;
    setBig_query_scan_rows_limitIsSet(true);
    return this;
  }

  public void unsetBig_query_scan_rows_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIG_QUERY_SCAN_ROWS_LIMIT_ISSET_ID);
  }

  /** Returns true if field big_query_scan_rows_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetBig_query_scan_rows_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIG_QUERY_SCAN_ROWS_LIMIT_ISSET_ID);
  }

  public void setBig_query_scan_rows_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIG_QUERY_SCAN_ROWS_LIMIT_ISSET_ID, value);
  }

  public long getBig_query_cpu_second_limit() {
    return this.big_query_cpu_second_limit;
  }

  public TWorkGroup setBig_query_cpu_second_limit(long big_query_cpu_second_limit) {
    this.big_query_cpu_second_limit = big_query_cpu_second_limit;
    setBig_query_cpu_second_limitIsSet(true);
    return this;
  }

  public void unsetBig_query_cpu_second_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIG_QUERY_CPU_SECOND_LIMIT_ISSET_ID);
  }

  /** Returns true if field big_query_cpu_second_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetBig_query_cpu_second_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIG_QUERY_CPU_SECOND_LIMIT_ISSET_ID);
  }

  public void setBig_query_cpu_second_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIG_QUERY_CPU_SECOND_LIMIT_ISSET_ID, value);
  }

  public double getSpill_mem_limit_threshold() {
    return this.spill_mem_limit_threshold;
  }

  public TWorkGroup setSpill_mem_limit_threshold(double spill_mem_limit_threshold) {
    this.spill_mem_limit_threshold = spill_mem_limit_threshold;
    setSpill_mem_limit_thresholdIsSet(true);
    return this;
  }

  public void unsetSpill_mem_limit_threshold() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_MEM_LIMIT_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field spill_mem_limit_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_mem_limit_threshold() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_MEM_LIMIT_THRESHOLD_ISSET_ID);
  }

  public void setSpill_mem_limit_thresholdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_MEM_LIMIT_THRESHOLD_ISSET_ID, value);
  }

  public int getMax_cpu_cores() {
    return this.max_cpu_cores;
  }

  public TWorkGroup setMax_cpu_cores(int max_cpu_cores) {
    this.max_cpu_cores = max_cpu_cores;
    setMax_cpu_coresIsSet(true);
    return this;
  }

  public void unsetMax_cpu_cores() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_CPU_CORES_ISSET_ID);
  }

  /** Returns true if field max_cpu_cores is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_cpu_cores() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_CPU_CORES_ISSET_ID);
  }

  public void setMax_cpu_coresIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_CPU_CORES_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case CPU_CORE_LIMIT:
      if (value == null) {
        unsetCpu_core_limit();
      } else {
        setCpu_core_limit((java.lang.Integer)value);
      }
      break;

    case MEM_LIMIT:
      if (value == null) {
        unsetMem_limit();
      } else {
        setMem_limit((java.lang.Double)value);
      }
      break;

    case CONCURRENCY_LIMIT:
      if (value == null) {
        unsetConcurrency_limit();
      } else {
        setConcurrency_limit((java.lang.Integer)value);
      }
      break;

    case WORKGROUP_TYPE:
      if (value == null) {
        unsetWorkgroup_type();
      } else {
        setWorkgroup_type((TWorkGroupType)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Long)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.String)value);
      }
      break;

    case NUM_DRIVERS:
      if (value == null) {
        unsetNum_drivers();
      } else {
        setNum_drivers((java.lang.Long)value);
      }
      break;

    case BIG_QUERY_MEM_LIMIT:
      if (value == null) {
        unsetBig_query_mem_limit();
      } else {
        setBig_query_mem_limit((java.lang.Long)value);
      }
      break;

    case BIG_QUERY_SCAN_ROWS_LIMIT:
      if (value == null) {
        unsetBig_query_scan_rows_limit();
      } else {
        setBig_query_scan_rows_limit((java.lang.Long)value);
      }
      break;

    case BIG_QUERY_CPU_SECOND_LIMIT:
      if (value == null) {
        unsetBig_query_cpu_second_limit();
      } else {
        setBig_query_cpu_second_limit((java.lang.Long)value);
      }
      break;

    case SPILL_MEM_LIMIT_THRESHOLD:
      if (value == null) {
        unsetSpill_mem_limit_threshold();
      } else {
        setSpill_mem_limit_threshold((java.lang.Double)value);
      }
      break;

    case MAX_CPU_CORES:
      if (value == null) {
        unsetMax_cpu_cores();
      } else {
        setMax_cpu_cores((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case ID:
      return getId();

    case CPU_CORE_LIMIT:
      return getCpu_core_limit();

    case MEM_LIMIT:
      return getMem_limit();

    case CONCURRENCY_LIMIT:
      return getConcurrency_limit();

    case WORKGROUP_TYPE:
      return getWorkgroup_type();

    case VERSION:
      return getVersion();

    case STATE:
      return getState();

    case NUM_DRIVERS:
      return getNum_drivers();

    case BIG_QUERY_MEM_LIMIT:
      return getBig_query_mem_limit();

    case BIG_QUERY_SCAN_ROWS_LIMIT:
      return getBig_query_scan_rows_limit();

    case BIG_QUERY_CPU_SECOND_LIMIT:
      return getBig_query_cpu_second_limit();

    case SPILL_MEM_LIMIT_THRESHOLD:
      return getSpill_mem_limit_threshold();

    case MAX_CPU_CORES:
      return getMax_cpu_cores();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case ID:
      return isSetId();
    case CPU_CORE_LIMIT:
      return isSetCpu_core_limit();
    case MEM_LIMIT:
      return isSetMem_limit();
    case CONCURRENCY_LIMIT:
      return isSetConcurrency_limit();
    case WORKGROUP_TYPE:
      return isSetWorkgroup_type();
    case VERSION:
      return isSetVersion();
    case STATE:
      return isSetState();
    case NUM_DRIVERS:
      return isSetNum_drivers();
    case BIG_QUERY_MEM_LIMIT:
      return isSetBig_query_mem_limit();
    case BIG_QUERY_SCAN_ROWS_LIMIT:
      return isSetBig_query_scan_rows_limit();
    case BIG_QUERY_CPU_SECOND_LIMIT:
      return isSetBig_query_cpu_second_limit();
    case SPILL_MEM_LIMIT_THRESHOLD:
      return isSetSpill_mem_limit_threshold();
    case MAX_CPU_CORES:
      return isSetMax_cpu_cores();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TWorkGroup)
      return this.equals((TWorkGroup)that);
    return false;
  }

  public boolean equals(TWorkGroup that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_cpu_core_limit = true && this.isSetCpu_core_limit();
    boolean that_present_cpu_core_limit = true && that.isSetCpu_core_limit();
    if (this_present_cpu_core_limit || that_present_cpu_core_limit) {
      if (!(this_present_cpu_core_limit && that_present_cpu_core_limit))
        return false;
      if (this.cpu_core_limit != that.cpu_core_limit)
        return false;
    }

    boolean this_present_mem_limit = true && this.isSetMem_limit();
    boolean that_present_mem_limit = true && that.isSetMem_limit();
    if (this_present_mem_limit || that_present_mem_limit) {
      if (!(this_present_mem_limit && that_present_mem_limit))
        return false;
      if (this.mem_limit != that.mem_limit)
        return false;
    }

    boolean this_present_concurrency_limit = true && this.isSetConcurrency_limit();
    boolean that_present_concurrency_limit = true && that.isSetConcurrency_limit();
    if (this_present_concurrency_limit || that_present_concurrency_limit) {
      if (!(this_present_concurrency_limit && that_present_concurrency_limit))
        return false;
      if (this.concurrency_limit != that.concurrency_limit)
        return false;
    }

    boolean this_present_workgroup_type = true && this.isSetWorkgroup_type();
    boolean that_present_workgroup_type = true && that.isSetWorkgroup_type();
    if (this_present_workgroup_type || that_present_workgroup_type) {
      if (!(this_present_workgroup_type && that_present_workgroup_type))
        return false;
      if (!this.workgroup_type.equals(that.workgroup_type))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_num_drivers = true && this.isSetNum_drivers();
    boolean that_present_num_drivers = true && that.isSetNum_drivers();
    if (this_present_num_drivers || that_present_num_drivers) {
      if (!(this_present_num_drivers && that_present_num_drivers))
        return false;
      if (this.num_drivers != that.num_drivers)
        return false;
    }

    boolean this_present_big_query_mem_limit = true && this.isSetBig_query_mem_limit();
    boolean that_present_big_query_mem_limit = true && that.isSetBig_query_mem_limit();
    if (this_present_big_query_mem_limit || that_present_big_query_mem_limit) {
      if (!(this_present_big_query_mem_limit && that_present_big_query_mem_limit))
        return false;
      if (this.big_query_mem_limit != that.big_query_mem_limit)
        return false;
    }

    boolean this_present_big_query_scan_rows_limit = true && this.isSetBig_query_scan_rows_limit();
    boolean that_present_big_query_scan_rows_limit = true && that.isSetBig_query_scan_rows_limit();
    if (this_present_big_query_scan_rows_limit || that_present_big_query_scan_rows_limit) {
      if (!(this_present_big_query_scan_rows_limit && that_present_big_query_scan_rows_limit))
        return false;
      if (this.big_query_scan_rows_limit != that.big_query_scan_rows_limit)
        return false;
    }

    boolean this_present_big_query_cpu_second_limit = true && this.isSetBig_query_cpu_second_limit();
    boolean that_present_big_query_cpu_second_limit = true && that.isSetBig_query_cpu_second_limit();
    if (this_present_big_query_cpu_second_limit || that_present_big_query_cpu_second_limit) {
      if (!(this_present_big_query_cpu_second_limit && that_present_big_query_cpu_second_limit))
        return false;
      if (this.big_query_cpu_second_limit != that.big_query_cpu_second_limit)
        return false;
    }

    boolean this_present_spill_mem_limit_threshold = true && this.isSetSpill_mem_limit_threshold();
    boolean that_present_spill_mem_limit_threshold = true && that.isSetSpill_mem_limit_threshold();
    if (this_present_spill_mem_limit_threshold || that_present_spill_mem_limit_threshold) {
      if (!(this_present_spill_mem_limit_threshold && that_present_spill_mem_limit_threshold))
        return false;
      if (this.spill_mem_limit_threshold != that.spill_mem_limit_threshold)
        return false;
    }

    boolean this_present_max_cpu_cores = true && this.isSetMax_cpu_cores();
    boolean that_present_max_cpu_cores = true && that.isSetMax_cpu_cores();
    if (this_present_max_cpu_cores || that_present_max_cpu_cores) {
      if (!(this_present_max_cpu_cores && that_present_max_cpu_cores))
        return false;
      if (this.max_cpu_cores != that.max_cpu_cores)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetCpu_core_limit()) ? 131071 : 524287);
    if (isSetCpu_core_limit())
      hashCode = hashCode * 8191 + cpu_core_limit;

    hashCode = hashCode * 8191 + ((isSetMem_limit()) ? 131071 : 524287);
    if (isSetMem_limit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mem_limit);

    hashCode = hashCode * 8191 + ((isSetConcurrency_limit()) ? 131071 : 524287);
    if (isSetConcurrency_limit())
      hashCode = hashCode * 8191 + concurrency_limit;

    hashCode = hashCode * 8191 + ((isSetWorkgroup_type()) ? 131071 : 524287);
    if (isSetWorkgroup_type())
      hashCode = hashCode * 8191 + workgroup_type.getValue();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.hashCode();

    hashCode = hashCode * 8191 + ((isSetNum_drivers()) ? 131071 : 524287);
    if (isSetNum_drivers())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(num_drivers);

    hashCode = hashCode * 8191 + ((isSetBig_query_mem_limit()) ? 131071 : 524287);
    if (isSetBig_query_mem_limit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(big_query_mem_limit);

    hashCode = hashCode * 8191 + ((isSetBig_query_scan_rows_limit()) ? 131071 : 524287);
    if (isSetBig_query_scan_rows_limit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(big_query_scan_rows_limit);

    hashCode = hashCode * 8191 + ((isSetBig_query_cpu_second_limit()) ? 131071 : 524287);
    if (isSetBig_query_cpu_second_limit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(big_query_cpu_second_limit);

    hashCode = hashCode * 8191 + ((isSetSpill_mem_limit_threshold()) ? 131071 : 524287);
    if (isSetSpill_mem_limit_threshold())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spill_mem_limit_threshold);

    hashCode = hashCode * 8191 + ((isSetMax_cpu_cores()) ? 131071 : 524287);
    if (isSetMax_cpu_cores())
      hashCode = hashCode * 8191 + max_cpu_cores;

    return hashCode;
  }

  @Override
  public int compareTo(TWorkGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCpu_core_limit(), other.isSetCpu_core_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu_core_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu_core_limit, other.cpu_core_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMem_limit(), other.isSetMem_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_limit, other.mem_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConcurrency_limit(), other.isSetConcurrency_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConcurrency_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.concurrency_limit, other.concurrency_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWorkgroup_type(), other.isSetWorkgroup_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkgroup_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workgroup_type, other.workgroup_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_drivers(), other.isSetNum_drivers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_drivers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_drivers, other.num_drivers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBig_query_mem_limit(), other.isSetBig_query_mem_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBig_query_mem_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.big_query_mem_limit, other.big_query_mem_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBig_query_scan_rows_limit(), other.isSetBig_query_scan_rows_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBig_query_scan_rows_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.big_query_scan_rows_limit, other.big_query_scan_rows_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBig_query_cpu_second_limit(), other.isSetBig_query_cpu_second_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBig_query_cpu_second_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.big_query_cpu_second_limit, other.big_query_cpu_second_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_mem_limit_threshold(), other.isSetSpill_mem_limit_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_mem_limit_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_mem_limit_threshold, other.spill_mem_limit_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_cpu_cores(), other.isSetMax_cpu_cores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_cpu_cores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_cpu_cores, other.max_cpu_cores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TWorkGroup(");
    boolean first = true;

    if (isSetName()) {
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCpu_core_limit()) {
      if (!first) sb.append(", ");
      sb.append("cpu_core_limit:");
      sb.append(this.cpu_core_limit);
      first = false;
    }
    if (isSetMem_limit()) {
      if (!first) sb.append(", ");
      sb.append("mem_limit:");
      sb.append(this.mem_limit);
      first = false;
    }
    if (isSetConcurrency_limit()) {
      if (!first) sb.append(", ");
      sb.append("concurrency_limit:");
      sb.append(this.concurrency_limit);
      first = false;
    }
    if (isSetWorkgroup_type()) {
      if (!first) sb.append(", ");
      sb.append("workgroup_type:");
      if (this.workgroup_type == null) {
        sb.append("null");
      } else {
        sb.append(this.workgroup_type);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetNum_drivers()) {
      if (!first) sb.append(", ");
      sb.append("num_drivers:");
      sb.append(this.num_drivers);
      first = false;
    }
    if (isSetBig_query_mem_limit()) {
      if (!first) sb.append(", ");
      sb.append("big_query_mem_limit:");
      sb.append(this.big_query_mem_limit);
      first = false;
    }
    if (isSetBig_query_scan_rows_limit()) {
      if (!first) sb.append(", ");
      sb.append("big_query_scan_rows_limit:");
      sb.append(this.big_query_scan_rows_limit);
      first = false;
    }
    if (isSetBig_query_cpu_second_limit()) {
      if (!first) sb.append(", ");
      sb.append("big_query_cpu_second_limit:");
      sb.append(this.big_query_cpu_second_limit);
      first = false;
    }
    if (isSetSpill_mem_limit_threshold()) {
      if (!first) sb.append(", ");
      sb.append("spill_mem_limit_threshold:");
      sb.append(this.spill_mem_limit_threshold);
      first = false;
    }
    if (isSetMax_cpu_cores()) {
      if (!first) sb.append(", ");
      sb.append("max_cpu_cores:");
      sb.append(this.max_cpu_cores);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TWorkGroupStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TWorkGroupStandardScheme getScheme() {
      return new TWorkGroupStandardScheme();
    }
  }

  private static class TWorkGroupStandardScheme extends org.apache.thrift.scheme.StandardScheme<TWorkGroup> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TWorkGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CPU_CORE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpu_core_limit = iprot.readI32();
              struct.setCpu_core_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mem_limit = iprot.readDouble();
              struct.setMem_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONCURRENCY_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.concurrency_limit = iprot.readI32();
              struct.setConcurrency_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WORKGROUP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.workgroup_type = io.datafibre.fibre.thrift.TWorkGroupType.findByValue(iprot.readI32());
              struct.setWorkgroup_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NUM_DRIVERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_drivers = iprot.readI64();
              struct.setNum_driversIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BIG_QUERY_MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.big_query_mem_limit = iprot.readI64();
              struct.setBig_query_mem_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BIG_QUERY_SCAN_ROWS_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.big_query_scan_rows_limit = iprot.readI64();
              struct.setBig_query_scan_rows_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BIG_QUERY_CPU_SECOND_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.big_query_cpu_second_limit = iprot.readI64();
              struct.setBig_query_cpu_second_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SPILL_MEM_LIMIT_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.spill_mem_limit_threshold = iprot.readDouble();
              struct.setSpill_mem_limit_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // MAX_CPU_CORES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_cpu_cores = iprot.readI32();
              struct.setMax_cpu_coresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TWorkGroup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCpu_core_limit()) {
        oprot.writeFieldBegin(CPU_CORE_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.cpu_core_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMem_limit()) {
        oprot.writeFieldBegin(MEM_LIMIT_FIELD_DESC);
        oprot.writeDouble(struct.mem_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetConcurrency_limit()) {
        oprot.writeFieldBegin(CONCURRENCY_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.concurrency_limit);
        oprot.writeFieldEnd();
      }
      if (struct.workgroup_type != null) {
        if (struct.isSetWorkgroup_type()) {
          oprot.writeFieldBegin(WORKGROUP_TYPE_FIELD_DESC);
          oprot.writeI32(struct.workgroup_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI64(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNum_drivers()) {
        oprot.writeFieldBegin(NUM_DRIVERS_FIELD_DESC);
        oprot.writeI64(struct.num_drivers);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBig_query_mem_limit()) {
        oprot.writeFieldBegin(BIG_QUERY_MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.big_query_mem_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBig_query_scan_rows_limit()) {
        oprot.writeFieldBegin(BIG_QUERY_SCAN_ROWS_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.big_query_scan_rows_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBig_query_cpu_second_limit()) {
        oprot.writeFieldBegin(BIG_QUERY_CPU_SECOND_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.big_query_cpu_second_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_mem_limit_threshold()) {
        oprot.writeFieldBegin(SPILL_MEM_LIMIT_THRESHOLD_FIELD_DESC);
        oprot.writeDouble(struct.spill_mem_limit_threshold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_cpu_cores()) {
        oprot.writeFieldBegin(MAX_CPU_CORES_FIELD_DESC);
        oprot.writeI32(struct.max_cpu_cores);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TWorkGroupTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TWorkGroupTupleScheme getScheme() {
      return new TWorkGroupTupleScheme();
    }
  }

  private static class TWorkGroupTupleScheme extends org.apache.thrift.scheme.TupleScheme<TWorkGroup> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TWorkGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetCpu_core_limit()) {
        optionals.set(2);
      }
      if (struct.isSetMem_limit()) {
        optionals.set(3);
      }
      if (struct.isSetConcurrency_limit()) {
        optionals.set(4);
      }
      if (struct.isSetWorkgroup_type()) {
        optionals.set(5);
      }
      if (struct.isSetVersion()) {
        optionals.set(6);
      }
      if (struct.isSetState()) {
        optionals.set(7);
      }
      if (struct.isSetNum_drivers()) {
        optionals.set(8);
      }
      if (struct.isSetBig_query_mem_limit()) {
        optionals.set(9);
      }
      if (struct.isSetBig_query_scan_rows_limit()) {
        optionals.set(10);
      }
      if (struct.isSetBig_query_cpu_second_limit()) {
        optionals.set(11);
      }
      if (struct.isSetSpill_mem_limit_threshold()) {
        optionals.set(12);
      }
      if (struct.isSetMax_cpu_cores()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCpu_core_limit()) {
        oprot.writeI32(struct.cpu_core_limit);
      }
      if (struct.isSetMem_limit()) {
        oprot.writeDouble(struct.mem_limit);
      }
      if (struct.isSetConcurrency_limit()) {
        oprot.writeI32(struct.concurrency_limit);
      }
      if (struct.isSetWorkgroup_type()) {
        oprot.writeI32(struct.workgroup_type.getValue());
      }
      if (struct.isSetVersion()) {
        oprot.writeI64(struct.version);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetNum_drivers()) {
        oprot.writeI64(struct.num_drivers);
      }
      if (struct.isSetBig_query_mem_limit()) {
        oprot.writeI64(struct.big_query_mem_limit);
      }
      if (struct.isSetBig_query_scan_rows_limit()) {
        oprot.writeI64(struct.big_query_scan_rows_limit);
      }
      if (struct.isSetBig_query_cpu_second_limit()) {
        oprot.writeI64(struct.big_query_cpu_second_limit);
      }
      if (struct.isSetSpill_mem_limit_threshold()) {
        oprot.writeDouble(struct.spill_mem_limit_threshold);
      }
      if (struct.isSetMax_cpu_cores()) {
        oprot.writeI32(struct.max_cpu_cores);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TWorkGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cpu_core_limit = iprot.readI32();
        struct.setCpu_core_limitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mem_limit = iprot.readDouble();
        struct.setMem_limitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.concurrency_limit = iprot.readI32();
        struct.setConcurrency_limitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.workgroup_type = io.datafibre.fibre.thrift.TWorkGroupType.findByValue(iprot.readI32());
        struct.setWorkgroup_typeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.version = iprot.readI64();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.num_drivers = iprot.readI64();
        struct.setNum_driversIsSet(true);
      }
      if (incoming.get(9)) {
        struct.big_query_mem_limit = iprot.readI64();
        struct.setBig_query_mem_limitIsSet(true);
      }
      if (incoming.get(10)) {
        struct.big_query_scan_rows_limit = iprot.readI64();
        struct.setBig_query_scan_rows_limitIsSet(true);
      }
      if (incoming.get(11)) {
        struct.big_query_cpu_second_limit = iprot.readI64();
        struct.setBig_query_cpu_second_limitIsSet(true);
      }
      if (incoming.get(12)) {
        struct.spill_mem_limit_threshold = iprot.readDouble();
        struct.setSpill_mem_limit_thresholdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.max_cpu_cores = iprot.readI32();
        struct.setMax_cpu_coresIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

