/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TOlapTableRouteInfo implements org.apache.thrift.TBase<TOlapTableRouteInfo, TOlapTableRouteInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TOlapTableRouteInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOlapTableRouteInfo");

  private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("partition", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_REPLICAS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_replicas", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField NODES_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("nodes_info", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField KEYS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("keys_type", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TOlapTableRouteInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TOlapTableRouteInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TOlapTableSchemaParam schema; // optional
  public @org.apache.thrift.annotation.Nullable TOlapTablePartitionParam partition; // optional
  public @org.apache.thrift.annotation.Nullable TOlapTableLocationParam location; // optional
  public int num_replicas; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional
  public @org.apache.thrift.annotation.Nullable TNodesInfo nodes_info; // optional
  /**
   * 
   * @see com.starrocks.thrift.TKeysType
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TKeysType keys_type; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCHEMA((short)1, "schema"),
    PARTITION((short)2, "partition"),
    LOCATION((short)3, "location"),
    NUM_REPLICAS((short)5, "num_replicas"),
    DB_NAME((short)6, "db_name"),
    TABLE_NAME((short)7, "table_name"),
    NODES_INFO((short)8, "nodes_info"),
    /**
     * 
     * @see com.starrocks.thrift.TKeysType
     */
    KEYS_TYPE((short)9, "keys_type");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCHEMA
          return SCHEMA;
        case 2: // PARTITION
          return PARTITION;
        case 3: // LOCATION
          return LOCATION;
        case 5: // NUM_REPLICAS
          return NUM_REPLICAS;
        case 6: // DB_NAME
          return DB_NAME;
        case 7: // TABLE_NAME
          return TABLE_NAME;
        case 8: // NODES_INFO
          return NODES_INFO;
        case 9: // KEYS_TYPE
          return KEYS_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_REPLICAS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SCHEMA,_Fields.PARTITION,_Fields.LOCATION,_Fields.NUM_REPLICAS,_Fields.DB_NAME,_Fields.TABLE_NAME,_Fields.NODES_INFO,_Fields.KEYS_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlapTableSchemaParam.class)));
    tmpMap.put(_Fields.PARTITION, new org.apache.thrift.meta_data.FieldMetaData("partition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlapTablePartitionParam.class)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlapTableLocationParam.class)));
    tmpMap.put(_Fields.NUM_REPLICAS, new org.apache.thrift.meta_data.FieldMetaData("num_replicas", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODES_INFO, new org.apache.thrift.meta_data.FieldMetaData("nodes_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNodesInfo.class)));
    tmpMap.put(_Fields.KEYS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("keys_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TKeysType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOlapTableRouteInfo.class, metaDataMap);
  }

  public TOlapTableRouteInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOlapTableRouteInfo(TOlapTableRouteInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSchema()) {
      this.schema = new TOlapTableSchemaParam(other.schema);
    }
    if (other.isSetPartition()) {
      this.partition = new TOlapTablePartitionParam(other.partition);
    }
    if (other.isSetLocation()) {
      this.location = new TOlapTableLocationParam(other.location);
    }
    this.num_replicas = other.num_replicas;
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    if (other.isSetNodes_info()) {
      this.nodes_info = new TNodesInfo(other.nodes_info);
    }
    if (other.isSetKeys_type()) {
      this.keys_type = other.keys_type;
    }
  }

  @Override
  public TOlapTableRouteInfo deepCopy() {
    return new TOlapTableRouteInfo(this);
  }

  @Override
  public void clear() {
    this.schema = null;
    this.partition = null;
    this.location = null;
    setNum_replicasIsSet(false);
    this.num_replicas = 0;
    this.db_name = null;
    this.table_name = null;
    this.nodes_info = null;
    this.keys_type = null;
  }

  @org.apache.thrift.annotation.Nullable
  public TOlapTableSchemaParam getSchema() {
    return this.schema;
  }

  public TOlapTableRouteInfo setSchema(@org.apache.thrift.annotation.Nullable TOlapTableSchemaParam schema) {
    this.schema = schema;
    return this;
  }

  public void unsetSchema() {
    this.schema = null;
  }

  /** Returns true if field schema is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema() {
    return this.schema != null;
  }

  public void setSchemaIsSet(boolean value) {
    if (!value) {
      this.schema = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TOlapTablePartitionParam getPartition() {
    return this.partition;
  }

  public TOlapTableRouteInfo setPartition(@org.apache.thrift.annotation.Nullable TOlapTablePartitionParam partition) {
    this.partition = partition;
    return this;
  }

  public void unsetPartition() {
    this.partition = null;
  }

  /** Returns true if field partition is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition() {
    return this.partition != null;
  }

  public void setPartitionIsSet(boolean value) {
    if (!value) {
      this.partition = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TOlapTableLocationParam getLocation() {
    return this.location;
  }

  public TOlapTableRouteInfo setLocation(@org.apache.thrift.annotation.Nullable TOlapTableLocationParam location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getNum_replicas() {
    return this.num_replicas;
  }

  public TOlapTableRouteInfo setNum_replicas(int num_replicas) {
    this.num_replicas = num_replicas;
    setNum_replicasIsSet(true);
    return this;
  }

  public void unsetNum_replicas() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_REPLICAS_ISSET_ID);
  }

  /** Returns true if field num_replicas is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_replicas() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_REPLICAS_ISSET_ID);
  }

  public void setNum_replicasIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_REPLICAS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb_name() {
    return this.db_name;
  }

  public TOlapTableRouteInfo setDb_name(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_name() {
    return this.table_name;
  }

  public TOlapTableRouteInfo setTable_name(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNodesInfo getNodes_info() {
    return this.nodes_info;
  }

  public TOlapTableRouteInfo setNodes_info(@org.apache.thrift.annotation.Nullable TNodesInfo nodes_info) {
    this.nodes_info = nodes_info;
    return this;
  }

  public void unsetNodes_info() {
    this.nodes_info = null;
  }

  /** Returns true if field nodes_info is set (has been assigned a value) and false otherwise */
  public boolean isSetNodes_info() {
    return this.nodes_info != null;
  }

  public void setNodes_infoIsSet(boolean value) {
    if (!value) {
      this.nodes_info = null;
    }
  }

  /**
   * 
   * @see com.starrocks.thrift.TKeysType
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TKeysType getKeys_type() {
    return this.keys_type;
  }

  /**
   * 
   * @see com.starrocks.thrift.TKeysType
   */
  public TOlapTableRouteInfo setKeys_type(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TKeysType keys_type) {
    this.keys_type = keys_type;
    return this;
  }

  public void unsetKeys_type() {
    this.keys_type = null;
  }

  /** Returns true if field keys_type is set (has been assigned a value) and false otherwise */
  public boolean isSetKeys_type() {
    return this.keys_type != null;
  }

  public void setKeys_typeIsSet(boolean value) {
    if (!value) {
      this.keys_type = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SCHEMA:
      if (value == null) {
        unsetSchema();
      } else {
        setSchema((TOlapTableSchemaParam)value);
      }
      break;

    case PARTITION:
      if (value == null) {
        unsetPartition();
      } else {
        setPartition((TOlapTablePartitionParam)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((TOlapTableLocationParam)value);
      }
      break;

    case NUM_REPLICAS:
      if (value == null) {
        unsetNum_replicas();
      } else {
        setNum_replicas((java.lang.Integer)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((java.lang.String)value);
      }
      break;

    case NODES_INFO:
      if (value == null) {
        unsetNodes_info();
      } else {
        setNodes_info((TNodesInfo)value);
      }
      break;

    case KEYS_TYPE:
      if (value == null) {
        unsetKeys_type();
      } else {
        setKeys_type((com.starrocks.thrift.TKeysType)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SCHEMA:
      return getSchema();

    case PARTITION:
      return getPartition();

    case LOCATION:
      return getLocation();

    case NUM_REPLICAS:
      return getNum_replicas();

    case DB_NAME:
      return getDb_name();

    case TABLE_NAME:
      return getTable_name();

    case NODES_INFO:
      return getNodes_info();

    case KEYS_TYPE:
      return getKeys_type();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SCHEMA:
      return isSetSchema();
    case PARTITION:
      return isSetPartition();
    case LOCATION:
      return isSetLocation();
    case NUM_REPLICAS:
      return isSetNum_replicas();
    case DB_NAME:
      return isSetDb_name();
    case TABLE_NAME:
      return isSetTable_name();
    case NODES_INFO:
      return isSetNodes_info();
    case KEYS_TYPE:
      return isSetKeys_type();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TOlapTableRouteInfo)
      return this.equals((TOlapTableRouteInfo)that);
    return false;
  }

  public boolean equals(TOlapTableRouteInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_schema = true && this.isSetSchema();
    boolean that_present_schema = true && that.isSetSchema();
    if (this_present_schema || that_present_schema) {
      if (!(this_present_schema && that_present_schema))
        return false;
      if (!this.schema.equals(that.schema))
        return false;
    }

    boolean this_present_partition = true && this.isSetPartition();
    boolean that_present_partition = true && that.isSetPartition();
    if (this_present_partition || that_present_partition) {
      if (!(this_present_partition && that_present_partition))
        return false;
      if (!this.partition.equals(that.partition))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_num_replicas = true && this.isSetNum_replicas();
    boolean that_present_num_replicas = true && that.isSetNum_replicas();
    if (this_present_num_replicas || that_present_num_replicas) {
      if (!(this_present_num_replicas && that_present_num_replicas))
        return false;
      if (this.num_replicas != that.num_replicas)
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_nodes_info = true && this.isSetNodes_info();
    boolean that_present_nodes_info = true && that.isSetNodes_info();
    if (this_present_nodes_info || that_present_nodes_info) {
      if (!(this_present_nodes_info && that_present_nodes_info))
        return false;
      if (!this.nodes_info.equals(that.nodes_info))
        return false;
    }

    boolean this_present_keys_type = true && this.isSetKeys_type();
    boolean that_present_keys_type = true && that.isSetKeys_type();
    if (this_present_keys_type || that_present_keys_type) {
      if (!(this_present_keys_type && that_present_keys_type))
        return false;
      if (!this.keys_type.equals(that.keys_type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSchema()) ? 131071 : 524287);
    if (isSetSchema())
      hashCode = hashCode * 8191 + schema.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition()) ? 131071 : 524287);
    if (isSetPartition())
      hashCode = hashCode * 8191 + partition.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
    if (isSetLocation())
      hashCode = hashCode * 8191 + location.hashCode();

    hashCode = hashCode * 8191 + ((isSetNum_replicas()) ? 131071 : 524287);
    if (isSetNum_replicas())
      hashCode = hashCode * 8191 + num_replicas;

    hashCode = hashCode * 8191 + ((isSetDb_name()) ? 131071 : 524287);
    if (isSetDb_name())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetNodes_info()) ? 131071 : 524287);
    if (isSetNodes_info())
      hashCode = hashCode * 8191 + nodes_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeys_type()) ? 131071 : 524287);
    if (isSetKeys_type())
      hashCode = hashCode * 8191 + keys_type.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TOlapTableRouteInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSchema(), other.isSetSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, other.schema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition(), other.isSetPartition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition, other.partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLocation(), other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_replicas(), other.isSetNum_replicas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_replicas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_replicas, other.num_replicas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb_name(), other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_name(), other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNodes_info(), other.isSetNodes_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodes_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodes_info, other.nodes_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKeys_type(), other.isSetKeys_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeys_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys_type, other.keys_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TOlapTableRouteInfo(");
    boolean first = true;

    if (isSetSchema()) {
      sb.append("schema:");
      if (this.schema == null) {
        sb.append("null");
      } else {
        sb.append(this.schema);
      }
      first = false;
    }
    if (isSetPartition()) {
      if (!first) sb.append(", ");
      sb.append("partition:");
      if (this.partition == null) {
        sb.append("null");
      } else {
        sb.append(this.partition);
      }
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetNum_replicas()) {
      if (!first) sb.append(", ");
      sb.append("num_replicas:");
      sb.append(this.num_replicas);
      first = false;
    }
    if (isSetDb_name()) {
      if (!first) sb.append(", ");
      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetNodes_info()) {
      if (!first) sb.append(", ");
      sb.append("nodes_info:");
      if (this.nodes_info == null) {
        sb.append("null");
      } else {
        sb.append(this.nodes_info);
      }
      first = false;
    }
    if (isSetKeys_type()) {
      if (!first) sb.append(", ");
      sb.append("keys_type:");
      if (this.keys_type == null) {
        sb.append("null");
      } else {
        sb.append(this.keys_type);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (schema != null) {
      schema.validate();
    }
    if (partition != null) {
      partition.validate();
    }
    if (location != null) {
      location.validate();
    }
    if (nodes_info != null) {
      nodes_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOlapTableRouteInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapTableRouteInfoStandardScheme getScheme() {
      return new TOlapTableRouteInfoStandardScheme();
    }
  }

  private static class TOlapTableRouteInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TOlapTableRouteInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TOlapTableRouteInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schema = new TOlapTableSchemaParam();
              struct.schema.read(iprot);
              struct.setSchemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.partition = new TOlapTablePartitionParam();
              struct.partition.read(iprot);
              struct.setPartitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.location = new TOlapTableLocationParam();
              struct.location.read(iprot);
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM_REPLICAS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_replicas = iprot.readI32();
              struct.setNum_replicasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NODES_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodes_info = new TNodesInfo();
              struct.nodes_info.read(iprot);
              struct.setNodes_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // KEYS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.keys_type = com.starrocks.thrift.TKeysType.findByValue(iprot.readI32());
              struct.setKeys_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TOlapTableRouteInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.schema != null) {
        if (struct.isSetSchema()) {
          oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
          struct.schema.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition != null) {
        if (struct.isSetPartition()) {
          oprot.writeFieldBegin(PARTITION_FIELD_DESC);
          struct.partition.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNum_replicas()) {
        oprot.writeFieldBegin(NUM_REPLICAS_FIELD_DESC);
        oprot.writeI32(struct.num_replicas);
        oprot.writeFieldEnd();
      }
      if (struct.db_name != null) {
        if (struct.isSetDb_name()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.db_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nodes_info != null) {
        if (struct.isSetNodes_info()) {
          oprot.writeFieldBegin(NODES_INFO_FIELD_DESC);
          struct.nodes_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.keys_type != null) {
        if (struct.isSetKeys_type()) {
          oprot.writeFieldBegin(KEYS_TYPE_FIELD_DESC);
          oprot.writeI32(struct.keys_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOlapTableRouteInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapTableRouteInfoTupleScheme getScheme() {
      return new TOlapTableRouteInfoTupleScheme();
    }
  }

  private static class TOlapTableRouteInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TOlapTableRouteInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOlapTableRouteInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSchema()) {
        optionals.set(0);
      }
      if (struct.isSetPartition()) {
        optionals.set(1);
      }
      if (struct.isSetLocation()) {
        optionals.set(2);
      }
      if (struct.isSetNum_replicas()) {
        optionals.set(3);
      }
      if (struct.isSetDb_name()) {
        optionals.set(4);
      }
      if (struct.isSetTable_name()) {
        optionals.set(5);
      }
      if (struct.isSetNodes_info()) {
        optionals.set(6);
      }
      if (struct.isSetKeys_type()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetSchema()) {
        struct.schema.write(oprot);
      }
      if (struct.isSetPartition()) {
        struct.partition.write(oprot);
      }
      if (struct.isSetLocation()) {
        struct.location.write(oprot);
      }
      if (struct.isSetNum_replicas()) {
        oprot.writeI32(struct.num_replicas);
      }
      if (struct.isSetDb_name()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetNodes_info()) {
        struct.nodes_info.write(oprot);
      }
      if (struct.isSetKeys_type()) {
        oprot.writeI32(struct.keys_type.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOlapTableRouteInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.schema = new TOlapTableSchemaParam();
        struct.schema.read(iprot);
        struct.setSchemaIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partition = new TOlapTablePartitionParam();
        struct.partition.read(iprot);
        struct.setPartitionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.location = new TOlapTableLocationParam();
        struct.location.read(iprot);
        struct.setLocationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.num_replicas = iprot.readI32();
        struct.setNum_replicasIsSet(true);
      }
      if (incoming.get(4)) {
        struct.db_name = iprot.readString();
        struct.setDb_nameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.nodes_info = new TNodesInfo();
        struct.nodes_info.read(iprot);
        struct.setNodes_infoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.keys_type = com.starrocks.thrift.TKeysType.findByValue(iprot.readI32());
        struct.setKeys_typeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

