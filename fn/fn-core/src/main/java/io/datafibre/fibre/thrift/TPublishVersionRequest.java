/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TPublishVersionRequest implements org.apache.thrift.TBase<TPublishVersionRequest, TPublishVersionRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TPublishVersionRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPublishVersionRequest");

  private static final org.apache.thrift.protocol.TField TRANSACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transaction_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PARTITION_VERSION_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_version_infos", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField STRICT_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("strict_mode", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField COMMIT_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("commit_timestamp", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TXN_TRACE_PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_trace_parent", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ENABLE_SYNC_PUBLISH_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_sync_publish", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField TXN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_type", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPublishVersionRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPublishVersionRequestTupleSchemeFactory();

  public long transaction_id; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<TPartitionVersionInfo> partition_version_infos; // required
  public boolean strict_mode; // optional
  public long commit_timestamp; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String txn_trace_parent; // optional
  public boolean enable_sync_publish; // optional
  /**
   * 
   * @see TTxnType
   */
  public @org.apache.thrift.annotation.Nullable TTxnType txn_type; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRANSACTION_ID((short)1, "transaction_id"),
    PARTITION_VERSION_INFOS((short)2, "partition_version_infos"),
    STRICT_MODE((short)3, "strict_mode"),
    COMMIT_TIMESTAMP((short)4, "commit_timestamp"),
    TXN_TRACE_PARENT((short)5, "txn_trace_parent"),
    ENABLE_SYNC_PUBLISH((short)6, "enable_sync_publish"),
    /**
     * 
     * @see TTxnType
     */
    TXN_TYPE((short)7, "txn_type");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRANSACTION_ID
          return TRANSACTION_ID;
        case 2: // PARTITION_VERSION_INFOS
          return PARTITION_VERSION_INFOS;
        case 3: // STRICT_MODE
          return STRICT_MODE;
        case 4: // COMMIT_TIMESTAMP
          return COMMIT_TIMESTAMP;
        case 5: // TXN_TRACE_PARENT
          return TXN_TRACE_PARENT;
        case 6: // ENABLE_SYNC_PUBLISH
          return ENABLE_SYNC_PUBLISH;
        case 7: // TXN_TYPE
          return TXN_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRANSACTION_ID_ISSET_ID = 0;
  private static final int __STRICT_MODE_ISSET_ID = 1;
  private static final int __COMMIT_TIMESTAMP_ISSET_ID = 2;
  private static final int __ENABLE_SYNC_PUBLISH_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STRICT_MODE,_Fields.COMMIT_TIMESTAMP,_Fields.TXN_TRACE_PARENT,_Fields.ENABLE_SYNC_PUBLISH,_Fields.TXN_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRANSACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("transaction_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTransactionId")));
    tmpMap.put(_Fields.PARTITION_VERSION_INFOS, new org.apache.thrift.meta_data.FieldMetaData("partition_version_infos", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPartitionVersionInfo.class))));
    tmpMap.put(_Fields.STRICT_MODE, new org.apache.thrift.meta_data.FieldMetaData("strict_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COMMIT_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("commit_timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TXN_TRACE_PARENT, new org.apache.thrift.meta_data.FieldMetaData("txn_trace_parent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLE_SYNC_PUBLISH, new org.apache.thrift.meta_data.FieldMetaData("enable_sync_publish", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TXN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("txn_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTxnType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPublishVersionRequest.class, metaDataMap);
  }

  public TPublishVersionRequest() {
    this.strict_mode = false;

    this.enable_sync_publish = false;

    this.txn_type = io.datafibre.fibre.thrift.TTxnType.TXN_NORMAL;

  }

  public TPublishVersionRequest(
    long transaction_id,
    java.util.List<TPartitionVersionInfo> partition_version_infos)
  {
    this();
    this.transaction_id = transaction_id;
    setTransaction_idIsSet(true);
    this.partition_version_infos = partition_version_infos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPublishVersionRequest(TPublishVersionRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.transaction_id = other.transaction_id;
    if (other.isSetPartition_version_infos()) {
      java.util.List<TPartitionVersionInfo> __this__partition_version_infos = new java.util.ArrayList<TPartitionVersionInfo>(other.partition_version_infos.size());
      for (TPartitionVersionInfo other_element : other.partition_version_infos) {
        __this__partition_version_infos.add(new TPartitionVersionInfo(other_element));
      }
      this.partition_version_infos = __this__partition_version_infos;
    }
    this.strict_mode = other.strict_mode;
    this.commit_timestamp = other.commit_timestamp;
    if (other.isSetTxn_trace_parent()) {
      this.txn_trace_parent = other.txn_trace_parent;
    }
    this.enable_sync_publish = other.enable_sync_publish;
    if (other.isSetTxn_type()) {
      this.txn_type = other.txn_type;
    }
  }

  @Override
  public TPublishVersionRequest deepCopy() {
    return new TPublishVersionRequest(this);
  }

  @Override
  public void clear() {
    setTransaction_idIsSet(false);
    this.transaction_id = 0;
    this.partition_version_infos = null;
    this.strict_mode = false;

    setCommit_timestampIsSet(false);
    this.commit_timestamp = 0;
    this.txn_trace_parent = null;
    this.enable_sync_publish = false;

    this.txn_type = io.datafibre.fibre.thrift.TTxnType.TXN_NORMAL;

  }

  public long getTransaction_id() {
    return this.transaction_id;
  }

  public TPublishVersionRequest setTransaction_id(long transaction_id) {
    this.transaction_id = transaction_id;
    setTransaction_idIsSet(true);
    return this;
  }

  public void unsetTransaction_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSACTION_ID_ISSET_ID);
  }

  /** Returns true if field transaction_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTransaction_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSACTION_ID_ISSET_ID);
  }

  public void setTransaction_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSACTION_ID_ISSET_ID, value);
  }

  public int getPartition_version_infosSize() {
    return (this.partition_version_infos == null) ? 0 : this.partition_version_infos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TPartitionVersionInfo> getPartition_version_infosIterator() {
    return (this.partition_version_infos == null) ? null : this.partition_version_infos.iterator();
  }

  public void addToPartition_version_infos(TPartitionVersionInfo elem) {
    if (this.partition_version_infos == null) {
      this.partition_version_infos = new java.util.ArrayList<TPartitionVersionInfo>();
    }
    this.partition_version_infos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TPartitionVersionInfo> getPartition_version_infos() {
    return this.partition_version_infos;
  }

  public TPublishVersionRequest setPartition_version_infos(@org.apache.thrift.annotation.Nullable java.util.List<TPartitionVersionInfo> partition_version_infos) {
    this.partition_version_infos = partition_version_infos;
    return this;
  }

  public void unsetPartition_version_infos() {
    this.partition_version_infos = null;
  }

  /** Returns true if field partition_version_infos is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_version_infos() {
    return this.partition_version_infos != null;
  }

  public void setPartition_version_infosIsSet(boolean value) {
    if (!value) {
      this.partition_version_infos = null;
    }
  }

  public boolean isStrict_mode() {
    return this.strict_mode;
  }

  public TPublishVersionRequest setStrict_mode(boolean strict_mode) {
    this.strict_mode = strict_mode;
    setStrict_modeIsSet(true);
    return this;
  }

  public void unsetStrict_mode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRICT_MODE_ISSET_ID);
  }

  /** Returns true if field strict_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetStrict_mode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRICT_MODE_ISSET_ID);
  }

  public void setStrict_modeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRICT_MODE_ISSET_ID, value);
  }

  public long getCommit_timestamp() {
    return this.commit_timestamp;
  }

  public TPublishVersionRequest setCommit_timestamp(long commit_timestamp) {
    this.commit_timestamp = commit_timestamp;
    setCommit_timestampIsSet(true);
    return this;
  }

  public void unsetCommit_timestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMIT_TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field commit_timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCommit_timestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMIT_TIMESTAMP_ISSET_ID);
  }

  public void setCommit_timestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMIT_TIMESTAMP_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTxn_trace_parent() {
    return this.txn_trace_parent;
  }

  public TPublishVersionRequest setTxn_trace_parent(@org.apache.thrift.annotation.Nullable java.lang.String txn_trace_parent) {
    this.txn_trace_parent = txn_trace_parent;
    return this;
  }

  public void unsetTxn_trace_parent() {
    this.txn_trace_parent = null;
  }

  /** Returns true if field txn_trace_parent is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_trace_parent() {
    return this.txn_trace_parent != null;
  }

  public void setTxn_trace_parentIsSet(boolean value) {
    if (!value) {
      this.txn_trace_parent = null;
    }
  }

  public boolean isEnable_sync_publish() {
    return this.enable_sync_publish;
  }

  public TPublishVersionRequest setEnable_sync_publish(boolean enable_sync_publish) {
    this.enable_sync_publish = enable_sync_publish;
    setEnable_sync_publishIsSet(true);
    return this;
  }

  public void unsetEnable_sync_publish() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_SYNC_PUBLISH_ISSET_ID);
  }

  /** Returns true if field enable_sync_publish is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_sync_publish() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_SYNC_PUBLISH_ISSET_ID);
  }

  public void setEnable_sync_publishIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_SYNC_PUBLISH_ISSET_ID, value);
  }

  /**
   * 
   * @see TTxnType
   */
  @org.apache.thrift.annotation.Nullable
  public TTxnType getTxn_type() {
    return this.txn_type;
  }

  /**
   * 
   * @see TTxnType
   */
  public TPublishVersionRequest setTxn_type(@org.apache.thrift.annotation.Nullable TTxnType txn_type) {
    this.txn_type = txn_type;
    return this;
  }

  public void unsetTxn_type() {
    this.txn_type = null;
  }

  /** Returns true if field txn_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_type() {
    return this.txn_type != null;
  }

  public void setTxn_typeIsSet(boolean value) {
    if (!value) {
      this.txn_type = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TRANSACTION_ID:
      if (value == null) {
        unsetTransaction_id();
      } else {
        setTransaction_id((java.lang.Long)value);
      }
      break;

    case PARTITION_VERSION_INFOS:
      if (value == null) {
        unsetPartition_version_infos();
      } else {
        setPartition_version_infos((java.util.List<TPartitionVersionInfo>)value);
      }
      break;

    case STRICT_MODE:
      if (value == null) {
        unsetStrict_mode();
      } else {
        setStrict_mode((java.lang.Boolean)value);
      }
      break;

    case COMMIT_TIMESTAMP:
      if (value == null) {
        unsetCommit_timestamp();
      } else {
        setCommit_timestamp((java.lang.Long)value);
      }
      break;

    case TXN_TRACE_PARENT:
      if (value == null) {
        unsetTxn_trace_parent();
      } else {
        setTxn_trace_parent((java.lang.String)value);
      }
      break;

    case ENABLE_SYNC_PUBLISH:
      if (value == null) {
        unsetEnable_sync_publish();
      } else {
        setEnable_sync_publish((java.lang.Boolean)value);
      }
      break;

    case TXN_TYPE:
      if (value == null) {
        unsetTxn_type();
      } else {
        setTxn_type((TTxnType)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TRANSACTION_ID:
      return getTransaction_id();

    case PARTITION_VERSION_INFOS:
      return getPartition_version_infos();

    case STRICT_MODE:
      return isStrict_mode();

    case COMMIT_TIMESTAMP:
      return getCommit_timestamp();

    case TXN_TRACE_PARENT:
      return getTxn_trace_parent();

    case ENABLE_SYNC_PUBLISH:
      return isEnable_sync_publish();

    case TXN_TYPE:
      return getTxn_type();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TRANSACTION_ID:
      return isSetTransaction_id();
    case PARTITION_VERSION_INFOS:
      return isSetPartition_version_infos();
    case STRICT_MODE:
      return isSetStrict_mode();
    case COMMIT_TIMESTAMP:
      return isSetCommit_timestamp();
    case TXN_TRACE_PARENT:
      return isSetTxn_trace_parent();
    case ENABLE_SYNC_PUBLISH:
      return isSetEnable_sync_publish();
    case TXN_TYPE:
      return isSetTxn_type();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TPublishVersionRequest)
      return this.equals((TPublishVersionRequest)that);
    return false;
  }

  public boolean equals(TPublishVersionRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_transaction_id = true;
    boolean that_present_transaction_id = true;
    if (this_present_transaction_id || that_present_transaction_id) {
      if (!(this_present_transaction_id && that_present_transaction_id))
        return false;
      if (this.transaction_id != that.transaction_id)
        return false;
    }

    boolean this_present_partition_version_infos = true && this.isSetPartition_version_infos();
    boolean that_present_partition_version_infos = true && that.isSetPartition_version_infos();
    if (this_present_partition_version_infos || that_present_partition_version_infos) {
      if (!(this_present_partition_version_infos && that_present_partition_version_infos))
        return false;
      if (!this.partition_version_infos.equals(that.partition_version_infos))
        return false;
    }

    boolean this_present_strict_mode = true && this.isSetStrict_mode();
    boolean that_present_strict_mode = true && that.isSetStrict_mode();
    if (this_present_strict_mode || that_present_strict_mode) {
      if (!(this_present_strict_mode && that_present_strict_mode))
        return false;
      if (this.strict_mode != that.strict_mode)
        return false;
    }

    boolean this_present_commit_timestamp = true && this.isSetCommit_timestamp();
    boolean that_present_commit_timestamp = true && that.isSetCommit_timestamp();
    if (this_present_commit_timestamp || that_present_commit_timestamp) {
      if (!(this_present_commit_timestamp && that_present_commit_timestamp))
        return false;
      if (this.commit_timestamp != that.commit_timestamp)
        return false;
    }

    boolean this_present_txn_trace_parent = true && this.isSetTxn_trace_parent();
    boolean that_present_txn_trace_parent = true && that.isSetTxn_trace_parent();
    if (this_present_txn_trace_parent || that_present_txn_trace_parent) {
      if (!(this_present_txn_trace_parent && that_present_txn_trace_parent))
        return false;
      if (!this.txn_trace_parent.equals(that.txn_trace_parent))
        return false;
    }

    boolean this_present_enable_sync_publish = true && this.isSetEnable_sync_publish();
    boolean that_present_enable_sync_publish = true && that.isSetEnable_sync_publish();
    if (this_present_enable_sync_publish || that_present_enable_sync_publish) {
      if (!(this_present_enable_sync_publish && that_present_enable_sync_publish))
        return false;
      if (this.enable_sync_publish != that.enable_sync_publish)
        return false;
    }

    boolean this_present_txn_type = true && this.isSetTxn_type();
    boolean that_present_txn_type = true && that.isSetTxn_type();
    if (this_present_txn_type || that_present_txn_type) {
      if (!(this_present_txn_type && that_present_txn_type))
        return false;
      if (!this.txn_type.equals(that.txn_type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(transaction_id);

    hashCode = hashCode * 8191 + ((isSetPartition_version_infos()) ? 131071 : 524287);
    if (isSetPartition_version_infos())
      hashCode = hashCode * 8191 + partition_version_infos.hashCode();

    hashCode = hashCode * 8191 + ((isSetStrict_mode()) ? 131071 : 524287);
    if (isSetStrict_mode())
      hashCode = hashCode * 8191 + ((strict_mode) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCommit_timestamp()) ? 131071 : 524287);
    if (isSetCommit_timestamp())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(commit_timestamp);

    hashCode = hashCode * 8191 + ((isSetTxn_trace_parent()) ? 131071 : 524287);
    if (isSetTxn_trace_parent())
      hashCode = hashCode * 8191 + txn_trace_parent.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnable_sync_publish()) ? 131071 : 524287);
    if (isSetEnable_sync_publish())
      hashCode = hashCode * 8191 + ((enable_sync_publish) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTxn_type()) ? 131071 : 524287);
    if (isSetTxn_type())
      hashCode = hashCode * 8191 + txn_type.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TPublishVersionRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTransaction_id(), other.isSetTransaction_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransaction_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transaction_id, other.transaction_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_version_infos(), other.isSetPartition_version_infos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_version_infos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_version_infos, other.partition_version_infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStrict_mode(), other.isSetStrict_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrict_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strict_mode, other.strict_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCommit_timestamp(), other.isSetCommit_timestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommit_timestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commit_timestamp, other.commit_timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxn_trace_parent(), other.isSetTxn_trace_parent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_trace_parent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_trace_parent, other.txn_trace_parent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_sync_publish(), other.isSetEnable_sync_publish());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_sync_publish()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_sync_publish, other.enable_sync_publish);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxn_type(), other.isSetTxn_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_type, other.txn_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPublishVersionRequest(");
    boolean first = true;

    sb.append("transaction_id:");
    sb.append(this.transaction_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partition_version_infos:");
    if (this.partition_version_infos == null) {
      sb.append("null");
    } else {
      sb.append(this.partition_version_infos);
    }
    first = false;
    if (isSetStrict_mode()) {
      if (!first) sb.append(", ");
      sb.append("strict_mode:");
      sb.append(this.strict_mode);
      first = false;
    }
    if (isSetCommit_timestamp()) {
      if (!first) sb.append(", ");
      sb.append("commit_timestamp:");
      sb.append(this.commit_timestamp);
      first = false;
    }
    if (isSetTxn_trace_parent()) {
      if (!first) sb.append(", ");
      sb.append("txn_trace_parent:");
      if (this.txn_trace_parent == null) {
        sb.append("null");
      } else {
        sb.append(this.txn_trace_parent);
      }
      first = false;
    }
    if (isSetEnable_sync_publish()) {
      if (!first) sb.append(", ");
      sb.append("enable_sync_publish:");
      sb.append(this.enable_sync_publish);
      first = false;
    }
    if (isSetTxn_type()) {
      if (!first) sb.append(", ");
      sb.append("txn_type:");
      if (this.txn_type == null) {
        sb.append("null");
      } else {
        sb.append(this.txn_type);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'transaction_id' because it's a primitive and you chose the non-beans generator.
    if (partition_version_infos == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_version_infos' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPublishVersionRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPublishVersionRequestStandardScheme getScheme() {
      return new TPublishVersionRequestStandardScheme();
    }
  }

  private static class TPublishVersionRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPublishVersionRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TPublishVersionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRANSACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.transaction_id = iprot.readI64();
              struct.setTransaction_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTITION_VERSION_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                struct.partition_version_infos = new java.util.ArrayList<TPartitionVersionInfo>(_list172.size);
                @org.apache.thrift.annotation.Nullable TPartitionVersionInfo _elem173;
                for (int _i174 = 0; _i174 < _list172.size; ++_i174)
                {
                  _elem173 = new TPartitionVersionInfo();
                  _elem173.read(iprot);
                  struct.partition_version_infos.add(_elem173);
                }
                iprot.readListEnd();
              }
              struct.setPartition_version_infosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRICT_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.strict_mode = iprot.readBool();
              struct.setStrict_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMIT_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commit_timestamp = iprot.readI64();
              struct.setCommit_timestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TXN_TRACE_PARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.txn_trace_parent = iprot.readString();
              struct.setTxn_trace_parentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ENABLE_SYNC_PUBLISH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_sync_publish = iprot.readBool();
              struct.setEnable_sync_publishIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TXN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.txn_type = io.datafibre.fibre.thrift.TTxnType.findByValue(iprot.readI32());
              struct.setTxn_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTransaction_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'transaction_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TPublishVersionRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TRANSACTION_ID_FIELD_DESC);
      oprot.writeI64(struct.transaction_id);
      oprot.writeFieldEnd();
      if (struct.partition_version_infos != null) {
        oprot.writeFieldBegin(PARTITION_VERSION_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_version_infos.size()));
          for (TPartitionVersionInfo _iter175 : struct.partition_version_infos)
          {
            _iter175.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetStrict_mode()) {
        oprot.writeFieldBegin(STRICT_MODE_FIELD_DESC);
        oprot.writeBool(struct.strict_mode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommit_timestamp()) {
        oprot.writeFieldBegin(COMMIT_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.commit_timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.txn_trace_parent != null) {
        if (struct.isSetTxn_trace_parent()) {
          oprot.writeFieldBegin(TXN_TRACE_PARENT_FIELD_DESC);
          oprot.writeString(struct.txn_trace_parent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_sync_publish()) {
        oprot.writeFieldBegin(ENABLE_SYNC_PUBLISH_FIELD_DESC);
        oprot.writeBool(struct.enable_sync_publish);
        oprot.writeFieldEnd();
      }
      if (struct.txn_type != null) {
        if (struct.isSetTxn_type()) {
          oprot.writeFieldBegin(TXN_TYPE_FIELD_DESC);
          oprot.writeI32(struct.txn_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPublishVersionRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPublishVersionRequestTupleScheme getScheme() {
      return new TPublishVersionRequestTupleScheme();
    }
  }

  private static class TPublishVersionRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPublishVersionRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPublishVersionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.transaction_id);
      {
        oprot.writeI32(struct.partition_version_infos.size());
        for (TPartitionVersionInfo _iter176 : struct.partition_version_infos)
        {
          _iter176.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStrict_mode()) {
        optionals.set(0);
      }
      if (struct.isSetCommit_timestamp()) {
        optionals.set(1);
      }
      if (struct.isSetTxn_trace_parent()) {
        optionals.set(2);
      }
      if (struct.isSetEnable_sync_publish()) {
        optionals.set(3);
      }
      if (struct.isSetTxn_type()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetStrict_mode()) {
        oprot.writeBool(struct.strict_mode);
      }
      if (struct.isSetCommit_timestamp()) {
        oprot.writeI64(struct.commit_timestamp);
      }
      if (struct.isSetTxn_trace_parent()) {
        oprot.writeString(struct.txn_trace_parent);
      }
      if (struct.isSetEnable_sync_publish()) {
        oprot.writeBool(struct.enable_sync_publish);
      }
      if (struct.isSetTxn_type()) {
        oprot.writeI32(struct.txn_type.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPublishVersionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.transaction_id = iprot.readI64();
      struct.setTransaction_idIsSet(true);
      {
        org.apache.thrift.protocol.TList _list177 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.partition_version_infos = new java.util.ArrayList<TPartitionVersionInfo>(_list177.size);
        @org.apache.thrift.annotation.Nullable TPartitionVersionInfo _elem178;
        for (int _i179 = 0; _i179 < _list177.size; ++_i179)
        {
          _elem178 = new TPartitionVersionInfo();
          _elem178.read(iprot);
          struct.partition_version_infos.add(_elem178);
        }
      }
      struct.setPartition_version_infosIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.strict_mode = iprot.readBool();
        struct.setStrict_modeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.commit_timestamp = iprot.readI64();
        struct.setCommit_timestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.txn_trace_parent = iprot.readString();
        struct.setTxn_trace_parentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.enable_sync_publish = iprot.readBool();
        struct.setEnable_sync_publishIsSet(true);
      }
      if (incoming.get(4)) {
        struct.txn_type = io.datafibre.fibre.thrift.TTxnType.findByValue(iprot.readI32());
        struct.setTxn_typeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

