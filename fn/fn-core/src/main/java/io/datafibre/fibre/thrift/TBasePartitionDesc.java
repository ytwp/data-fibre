/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TBasePartitionDesc implements org.apache.thrift.TBase<TBasePartitionDesc, TBasePartitionDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TBasePartitionDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBasePartitionDesc");

  private static final org.apache.thrift.protocol.TField REPLICA_NUM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("replica_num_map", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField IN_MEMORY_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("in_memory_map", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("data_property", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TBasePartitionDescStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TBasePartitionDescTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,java.lang.Short> replica_num_map; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,java.lang.Boolean> in_memory_map; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,TDataProperty> data_property; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPLICA_NUM_MAP((short)1, "replica_num_map"),
    IN_MEMORY_MAP((short)2, "in_memory_map"),
    DATA_PROPERTY((short)3, "data_property");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPLICA_NUM_MAP
          return REPLICA_NUM_MAP;
        case 2: // IN_MEMORY_MAP
          return IN_MEMORY_MAP;
        case 3: // DATA_PROPERTY
          return DATA_PROPERTY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.REPLICA_NUM_MAP,_Fields.IN_MEMORY_MAP,_Fields.DATA_PROPERTY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPLICA_NUM_MAP, new org.apache.thrift.meta_data.FieldMetaData("replica_num_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.IN_MEMORY_MAP, new org.apache.thrift.meta_data.FieldMetaData("in_memory_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.DATA_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("data_property", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDataProperty.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBasePartitionDesc.class, metaDataMap);
  }

  public TBasePartitionDesc() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBasePartitionDesc(TBasePartitionDesc other) {
    if (other.isSetReplica_num_map()) {
      java.util.Map<java.lang.Long,java.lang.Short> __this__replica_num_map = new java.util.HashMap<java.lang.Long,java.lang.Short>(other.replica_num_map);
      this.replica_num_map = __this__replica_num_map;
    }
    if (other.isSetIn_memory_map()) {
      java.util.Map<java.lang.Long,java.lang.Boolean> __this__in_memory_map = new java.util.HashMap<java.lang.Long,java.lang.Boolean>(other.in_memory_map);
      this.in_memory_map = __this__in_memory_map;
    }
    if (other.isSetData_property()) {
      java.util.Map<java.lang.Long,TDataProperty> __this__data_property = new java.util.HashMap<java.lang.Long,TDataProperty>(other.data_property.size());
      for (java.util.Map.Entry<java.lang.Long, TDataProperty> other_element : other.data_property.entrySet()) {

        java.lang.Long other_element_key = other_element.getKey();
        TDataProperty other_element_value = other_element.getValue();

        java.lang.Long __this__data_property_copy_key = other_element_key;

        TDataProperty __this__data_property_copy_value = new TDataProperty(other_element_value);

        __this__data_property.put(__this__data_property_copy_key, __this__data_property_copy_value);
      }
      this.data_property = __this__data_property;
    }
  }

  @Override
  public TBasePartitionDesc deepCopy() {
    return new TBasePartitionDesc(this);
  }

  @Override
  public void clear() {
    this.replica_num_map = null;
    this.in_memory_map = null;
    this.data_property = null;
  }

  public int getReplica_num_mapSize() {
    return (this.replica_num_map == null) ? 0 : this.replica_num_map.size();
  }

  public void putToReplica_num_map(long key, short val) {
    if (this.replica_num_map == null) {
      this.replica_num_map = new java.util.HashMap<java.lang.Long,java.lang.Short>();
    }
    this.replica_num_map.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Long,java.lang.Short> getReplica_num_map() {
    return this.replica_num_map;
  }

  public TBasePartitionDesc setReplica_num_map(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,java.lang.Short> replica_num_map) {
    this.replica_num_map = replica_num_map;
    return this;
  }

  public void unsetReplica_num_map() {
    this.replica_num_map = null;
  }

  /** Returns true if field replica_num_map is set (has been assigned a value) and false otherwise */
  public boolean isSetReplica_num_map() {
    return this.replica_num_map != null;
  }

  public void setReplica_num_mapIsSet(boolean value) {
    if (!value) {
      this.replica_num_map = null;
    }
  }

  public int getIn_memory_mapSize() {
    return (this.in_memory_map == null) ? 0 : this.in_memory_map.size();
  }

  public void putToIn_memory_map(long key, boolean val) {
    if (this.in_memory_map == null) {
      this.in_memory_map = new java.util.HashMap<java.lang.Long,java.lang.Boolean>();
    }
    this.in_memory_map.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Long,java.lang.Boolean> getIn_memory_map() {
    return this.in_memory_map;
  }

  public TBasePartitionDesc setIn_memory_map(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,java.lang.Boolean> in_memory_map) {
    this.in_memory_map = in_memory_map;
    return this;
  }

  public void unsetIn_memory_map() {
    this.in_memory_map = null;
  }

  /** Returns true if field in_memory_map is set (has been assigned a value) and false otherwise */
  public boolean isSetIn_memory_map() {
    return this.in_memory_map != null;
  }

  public void setIn_memory_mapIsSet(boolean value) {
    if (!value) {
      this.in_memory_map = null;
    }
  }

  public int getData_propertySize() {
    return (this.data_property == null) ? 0 : this.data_property.size();
  }

  public void putToData_property(long key, TDataProperty val) {
    if (this.data_property == null) {
      this.data_property = new java.util.HashMap<java.lang.Long,TDataProperty>();
    }
    this.data_property.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Long,TDataProperty> getData_property() {
    return this.data_property;
  }

  public TBasePartitionDesc setData_property(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,TDataProperty> data_property) {
    this.data_property = data_property;
    return this;
  }

  public void unsetData_property() {
    this.data_property = null;
  }

  /** Returns true if field data_property is set (has been assigned a value) and false otherwise */
  public boolean isSetData_property() {
    return this.data_property != null;
  }

  public void setData_propertyIsSet(boolean value) {
    if (!value) {
      this.data_property = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case REPLICA_NUM_MAP:
      if (value == null) {
        unsetReplica_num_map();
      } else {
        setReplica_num_map((java.util.Map<java.lang.Long,java.lang.Short>)value);
      }
      break;

    case IN_MEMORY_MAP:
      if (value == null) {
        unsetIn_memory_map();
      } else {
        setIn_memory_map((java.util.Map<java.lang.Long,java.lang.Boolean>)value);
      }
      break;

    case DATA_PROPERTY:
      if (value == null) {
        unsetData_property();
      } else {
        setData_property((java.util.Map<java.lang.Long,TDataProperty>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REPLICA_NUM_MAP:
      return getReplica_num_map();

    case IN_MEMORY_MAP:
      return getIn_memory_map();

    case DATA_PROPERTY:
      return getData_property();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REPLICA_NUM_MAP:
      return isSetReplica_num_map();
    case IN_MEMORY_MAP:
      return isSetIn_memory_map();
    case DATA_PROPERTY:
      return isSetData_property();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TBasePartitionDesc)
      return this.equals((TBasePartitionDesc)that);
    return false;
  }

  public boolean equals(TBasePartitionDesc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_replica_num_map = true && this.isSetReplica_num_map();
    boolean that_present_replica_num_map = true && that.isSetReplica_num_map();
    if (this_present_replica_num_map || that_present_replica_num_map) {
      if (!(this_present_replica_num_map && that_present_replica_num_map))
        return false;
      if (!this.replica_num_map.equals(that.replica_num_map))
        return false;
    }

    boolean this_present_in_memory_map = true && this.isSetIn_memory_map();
    boolean that_present_in_memory_map = true && that.isSetIn_memory_map();
    if (this_present_in_memory_map || that_present_in_memory_map) {
      if (!(this_present_in_memory_map && that_present_in_memory_map))
        return false;
      if (!this.in_memory_map.equals(that.in_memory_map))
        return false;
    }

    boolean this_present_data_property = true && this.isSetData_property();
    boolean that_present_data_property = true && that.isSetData_property();
    if (this_present_data_property || that_present_data_property) {
      if (!(this_present_data_property && that_present_data_property))
        return false;
      if (!this.data_property.equals(that.data_property))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetReplica_num_map()) ? 131071 : 524287);
    if (isSetReplica_num_map())
      hashCode = hashCode * 8191 + replica_num_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetIn_memory_map()) ? 131071 : 524287);
    if (isSetIn_memory_map())
      hashCode = hashCode * 8191 + in_memory_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetData_property()) ? 131071 : 524287);
    if (isSetData_property())
      hashCode = hashCode * 8191 + data_property.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TBasePartitionDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetReplica_num_map(), other.isSetReplica_num_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplica_num_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replica_num_map, other.replica_num_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIn_memory_map(), other.isSetIn_memory_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIn_memory_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.in_memory_map, other.in_memory_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetData_property(), other.isSetData_property());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_property()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_property, other.data_property);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TBasePartitionDesc(");
    boolean first = true;

    if (isSetReplica_num_map()) {
      sb.append("replica_num_map:");
      if (this.replica_num_map == null) {
        sb.append("null");
      } else {
        sb.append(this.replica_num_map);
      }
      first = false;
    }
    if (isSetIn_memory_map()) {
      if (!first) sb.append(", ");
      sb.append("in_memory_map:");
      if (this.in_memory_map == null) {
        sb.append("null");
      } else {
        sb.append(this.in_memory_map);
      }
      first = false;
    }
    if (isSetData_property()) {
      if (!first) sb.append(", ");
      sb.append("data_property:");
      if (this.data_property == null) {
        sb.append("null");
      } else {
        sb.append(this.data_property);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBasePartitionDescStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TBasePartitionDescStandardScheme getScheme() {
      return new TBasePartitionDescStandardScheme();
    }
  }

  private static class TBasePartitionDescStandardScheme extends org.apache.thrift.scheme.StandardScheme<TBasePartitionDesc> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TBasePartitionDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPLICA_NUM_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map436 = iprot.readMapBegin();
                struct.replica_num_map = new java.util.HashMap<java.lang.Long,java.lang.Short>(2*_map436.size);
                long _key437;
                short _val438;
                for (int _i439 = 0; _i439 < _map436.size; ++_i439)
                {
                  _key437 = iprot.readI64();
                  _val438 = iprot.readI16();
                  struct.replica_num_map.put(_key437, _val438);
                }
                iprot.readMapEnd();
              }
              struct.setReplica_num_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IN_MEMORY_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map440 = iprot.readMapBegin();
                struct.in_memory_map = new java.util.HashMap<java.lang.Long,java.lang.Boolean>(2*_map440.size);
                long _key441;
                boolean _val442;
                for (int _i443 = 0; _i443 < _map440.size; ++_i443)
                {
                  _key441 = iprot.readI64();
                  _val442 = iprot.readBool();
                  struct.in_memory_map.put(_key441, _val442);
                }
                iprot.readMapEnd();
              }
              struct.setIn_memory_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA_PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map444 = iprot.readMapBegin();
                struct.data_property = new java.util.HashMap<java.lang.Long,TDataProperty>(2*_map444.size);
                long _key445;
                @org.apache.thrift.annotation.Nullable TDataProperty _val446;
                for (int _i447 = 0; _i447 < _map444.size; ++_i447)
                {
                  _key445 = iprot.readI64();
                  _val446 = new TDataProperty();
                  _val446.read(iprot);
                  struct.data_property.put(_key445, _val446);
                }
                iprot.readMapEnd();
              }
              struct.setData_propertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TBasePartitionDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.replica_num_map != null) {
        if (struct.isSetReplica_num_map()) {
          oprot.writeFieldBegin(REPLICA_NUM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I16, struct.replica_num_map.size()));
            for (java.util.Map.Entry<java.lang.Long, java.lang.Short> _iter448 : struct.replica_num_map.entrySet())
            {
              oprot.writeI64(_iter448.getKey());
              oprot.writeI16(_iter448.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.in_memory_map != null) {
        if (struct.isSetIn_memory_map()) {
          oprot.writeFieldBegin(IN_MEMORY_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.BOOL, struct.in_memory_map.size()));
            for (java.util.Map.Entry<java.lang.Long, java.lang.Boolean> _iter449 : struct.in_memory_map.entrySet())
            {
              oprot.writeI64(_iter449.getKey());
              oprot.writeBool(_iter449.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.data_property != null) {
        if (struct.isSetData_property()) {
          oprot.writeFieldBegin(DATA_PROPERTY_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.data_property.size()));
            for (java.util.Map.Entry<java.lang.Long, TDataProperty> _iter450 : struct.data_property.entrySet())
            {
              oprot.writeI64(_iter450.getKey());
              _iter450.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBasePartitionDescTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TBasePartitionDescTupleScheme getScheme() {
      return new TBasePartitionDescTupleScheme();
    }
  }

  private static class TBasePartitionDescTupleScheme extends org.apache.thrift.scheme.TupleScheme<TBasePartitionDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBasePartitionDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReplica_num_map()) {
        optionals.set(0);
      }
      if (struct.isSetIn_memory_map()) {
        optionals.set(1);
      }
      if (struct.isSetData_property()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetReplica_num_map()) {
        {
          oprot.writeI32(struct.replica_num_map.size());
          for (java.util.Map.Entry<java.lang.Long, java.lang.Short> _iter451 : struct.replica_num_map.entrySet())
          {
            oprot.writeI64(_iter451.getKey());
            oprot.writeI16(_iter451.getValue());
          }
        }
      }
      if (struct.isSetIn_memory_map()) {
        {
          oprot.writeI32(struct.in_memory_map.size());
          for (java.util.Map.Entry<java.lang.Long, java.lang.Boolean> _iter452 : struct.in_memory_map.entrySet())
          {
            oprot.writeI64(_iter452.getKey());
            oprot.writeBool(_iter452.getValue());
          }
        }
      }
      if (struct.isSetData_property()) {
        {
          oprot.writeI32(struct.data_property.size());
          for (java.util.Map.Entry<java.lang.Long, TDataProperty> _iter453 : struct.data_property.entrySet())
          {
            oprot.writeI64(_iter453.getKey());
            _iter453.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBasePartitionDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map454 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I16); 
          struct.replica_num_map = new java.util.HashMap<java.lang.Long,java.lang.Short>(2*_map454.size);
          long _key455;
          short _val456;
          for (int _i457 = 0; _i457 < _map454.size; ++_i457)
          {
            _key455 = iprot.readI64();
            _val456 = iprot.readI16();
            struct.replica_num_map.put(_key455, _val456);
          }
        }
        struct.setReplica_num_mapIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map458 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.BOOL); 
          struct.in_memory_map = new java.util.HashMap<java.lang.Long,java.lang.Boolean>(2*_map458.size);
          long _key459;
          boolean _val460;
          for (int _i461 = 0; _i461 < _map458.size; ++_i461)
          {
            _key459 = iprot.readI64();
            _val460 = iprot.readBool();
            struct.in_memory_map.put(_key459, _val460);
          }
        }
        struct.setIn_memory_mapIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map462 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT); 
          struct.data_property = new java.util.HashMap<java.lang.Long,TDataProperty>(2*_map462.size);
          long _key463;
          @org.apache.thrift.annotation.Nullable TDataProperty _val464;
          for (int _i465 = 0; _i465 < _map462.size; ++_i465)
          {
            _key463 = iprot.readI64();
            _val464 = new TDataProperty();
            _val464.read(iprot);
            struct.data_property.put(_key463, _val464);
          }
        }
        struct.setData_propertyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

