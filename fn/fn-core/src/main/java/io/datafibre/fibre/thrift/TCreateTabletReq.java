/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TCreateTabletReq implements org.apache.thrift.TBase<TCreateTabletReq, TCreateTabletReq._Fields>, java.io.Serializable, Cloneable, Comparable<TCreateTabletReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCreateTabletReq");

  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TABLET_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_schema", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("version_hash", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField STORAGE_MEDIUM_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_medium", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IN_RESTORE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("in_restore_mode", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField BASE_TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("base_tablet_id", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField BASE_SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("base_schema_hash", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField ALLOCATION_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("allocation_term", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField IS_ECO_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_eco_mode", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField STORAGE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_format", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField TABLET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_type", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ENABLE_PERSISTENT_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_persistent_index", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField COMPRESSION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("compression_type", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField BINLOG_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("binlog_config", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField PERSISTENT_INDEX_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("persistent_index_type", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField PRIMARY_INDEX_CACHE_EXPIRE_SEC_FIELD_DESC = new org.apache.thrift.protocol.TField("primary_index_cache_expire_sec", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField CREATE_SCHEMA_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("create_schema_file", org.apache.thrift.protocol.TType.BOOL, (short)20);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCreateTabletReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCreateTabletReqTupleSchemeFactory();

  public long tablet_id; // required
  public @org.apache.thrift.annotation.Nullable TTabletSchema tablet_schema; // required
  public long version; // optional
  public long version_hash; // optional
  /**
   * 
   * @see com.starrocks.thrift.TStorageMedium
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TStorageMedium storage_medium; // optional
  public boolean in_restore_mode; // optional
  public long base_tablet_id; // optional
  public int base_schema_hash; // optional
  public long table_id; // optional
  public long partition_id; // optional
  public long allocation_term; // optional
  public boolean is_eco_mode; // optional
  /**
   * 
   * @see TStorageFormat
   */
  public @org.apache.thrift.annotation.Nullable TStorageFormat storage_format; // optional
  /**
   * 
   * @see TTabletType
   */
  public @org.apache.thrift.annotation.Nullable TTabletType tablet_type; // optional
  public boolean enable_persistent_index; // optional
  /**
   * 
   * @see com.starrocks.thrift.TCompressionType
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TCompressionType compression_type; // optional
  public @org.apache.thrift.annotation.Nullable TBinlogConfig binlog_config; // optional
  /**
   * 
   * @see TPersistentIndexType
   */
  public @org.apache.thrift.annotation.Nullable TPersistentIndexType persistent_index_type; // optional
  public int primary_index_cache_expire_sec; // optional
  public boolean create_schema_file; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLET_ID((short)1, "tablet_id"),
    TABLET_SCHEMA((short)2, "tablet_schema"),
    VERSION((short)3, "version"),
    VERSION_HASH((short)4, "version_hash"),
    /**
     * 
     * @see com.starrocks.thrift.TStorageMedium
     */
    STORAGE_MEDIUM((short)5, "storage_medium"),
    IN_RESTORE_MODE((short)6, "in_restore_mode"),
    BASE_TABLET_ID((short)7, "base_tablet_id"),
    BASE_SCHEMA_HASH((short)8, "base_schema_hash"),
    TABLE_ID((short)9, "table_id"),
    PARTITION_ID((short)10, "partition_id"),
    ALLOCATION_TERM((short)11, "allocation_term"),
    IS_ECO_MODE((short)12, "is_eco_mode"),
    /**
     * 
     * @see TStorageFormat
     */
    STORAGE_FORMAT((short)13, "storage_format"),
    /**
     * 
     * @see TTabletType
     */
    TABLET_TYPE((short)14, "tablet_type"),
    ENABLE_PERSISTENT_INDEX((short)15, "enable_persistent_index"),
    /**
     * 
     * @see com.starrocks.thrift.TCompressionType
     */
    COMPRESSION_TYPE((short)16, "compression_type"),
    BINLOG_CONFIG((short)17, "binlog_config"),
    /**
     * 
     * @see TPersistentIndexType
     */
    PERSISTENT_INDEX_TYPE((short)18, "persistent_index_type"),
    PRIMARY_INDEX_CACHE_EXPIRE_SEC((short)19, "primary_index_cache_expire_sec"),
    CREATE_SCHEMA_FILE((short)20, "create_schema_file");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLET_ID
          return TABLET_ID;
        case 2: // TABLET_SCHEMA
          return TABLET_SCHEMA;
        case 3: // VERSION
          return VERSION;
        case 4: // VERSION_HASH
          return VERSION_HASH;
        case 5: // STORAGE_MEDIUM
          return STORAGE_MEDIUM;
        case 6: // IN_RESTORE_MODE
          return IN_RESTORE_MODE;
        case 7: // BASE_TABLET_ID
          return BASE_TABLET_ID;
        case 8: // BASE_SCHEMA_HASH
          return BASE_SCHEMA_HASH;
        case 9: // TABLE_ID
          return TABLE_ID;
        case 10: // PARTITION_ID
          return PARTITION_ID;
        case 11: // ALLOCATION_TERM
          return ALLOCATION_TERM;
        case 12: // IS_ECO_MODE
          return IS_ECO_MODE;
        case 13: // STORAGE_FORMAT
          return STORAGE_FORMAT;
        case 14: // TABLET_TYPE
          return TABLET_TYPE;
        case 15: // ENABLE_PERSISTENT_INDEX
          return ENABLE_PERSISTENT_INDEX;
        case 16: // COMPRESSION_TYPE
          return COMPRESSION_TYPE;
        case 17: // BINLOG_CONFIG
          return BINLOG_CONFIG;
        case 18: // PERSISTENT_INDEX_TYPE
          return PERSISTENT_INDEX_TYPE;
        case 19: // PRIMARY_INDEX_CACHE_EXPIRE_SEC
          return PRIMARY_INDEX_CACHE_EXPIRE_SEC;
        case 20: // CREATE_SCHEMA_FILE
          return CREATE_SCHEMA_FILE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLET_ID_ISSET_ID = 0;
  private static final int __VERSION_ISSET_ID = 1;
  private static final int __VERSION_HASH_ISSET_ID = 2;
  private static final int __IN_RESTORE_MODE_ISSET_ID = 3;
  private static final int __BASE_TABLET_ID_ISSET_ID = 4;
  private static final int __BASE_SCHEMA_HASH_ISSET_ID = 5;
  private static final int __TABLE_ID_ISSET_ID = 6;
  private static final int __PARTITION_ID_ISSET_ID = 7;
  private static final int __ALLOCATION_TERM_ISSET_ID = 8;
  private static final int __IS_ECO_MODE_ISSET_ID = 9;
  private static final int __ENABLE_PERSISTENT_INDEX_ISSET_ID = 10;
  private static final int __PRIMARY_INDEX_CACHE_EXPIRE_SEC_ISSET_ID = 11;
  private static final int __CREATE_SCHEMA_FILE_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.VERSION,_Fields.VERSION_HASH,_Fields.STORAGE_MEDIUM,_Fields.IN_RESTORE_MODE,_Fields.BASE_TABLET_ID,_Fields.BASE_SCHEMA_HASH,_Fields.TABLE_ID,_Fields.PARTITION_ID,_Fields.ALLOCATION_TERM,_Fields.IS_ECO_MODE,_Fields.STORAGE_FORMAT,_Fields.TABLET_TYPE,_Fields.ENABLE_PERSISTENT_INDEX,_Fields.COMPRESSION_TYPE,_Fields.BINLOG_CONFIG,_Fields.PERSISTENT_INDEX_TYPE,_Fields.PRIMARY_INDEX_CACHE_EXPIRE_SEC,_Fields.CREATE_SCHEMA_FILE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.TABLET_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("tablet_schema", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTabletSchema.class)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersion")));
    tmpMap.put(_Fields.VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("version_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersionHash")));
    tmpMap.put(_Fields.STORAGE_MEDIUM, new org.apache.thrift.meta_data.FieldMetaData("storage_medium", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TStorageMedium.class)));
    tmpMap.put(_Fields.IN_RESTORE_MODE, new org.apache.thrift.meta_data.FieldMetaData("in_restore_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BASE_TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("base_tablet_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.BASE_SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("base_schema_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSchemaHash")));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ALLOCATION_TERM, new org.apache.thrift.meta_data.FieldMetaData("allocation_term", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_ECO_MODE, new org.apache.thrift.meta_data.FieldMetaData("is_eco_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STORAGE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("storage_format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TStorageFormat.class)));
    tmpMap.put(_Fields.TABLET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tablet_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTabletType.class)));
    tmpMap.put(_Fields.ENABLE_PERSISTENT_INDEX, new org.apache.thrift.meta_data.FieldMetaData("enable_persistent_index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COMPRESSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("compression_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TCompressionType.class)));
    tmpMap.put(_Fields.BINLOG_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("binlog_config", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBinlogConfig.class)));
    tmpMap.put(_Fields.PERSISTENT_INDEX_TYPE, new org.apache.thrift.meta_data.FieldMetaData("persistent_index_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPersistentIndexType.class)));
    tmpMap.put(_Fields.PRIMARY_INDEX_CACHE_EXPIRE_SEC, new org.apache.thrift.meta_data.FieldMetaData("primary_index_cache_expire_sec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_SCHEMA_FILE, new org.apache.thrift.meta_data.FieldMetaData("create_schema_file", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCreateTabletReq.class, metaDataMap);
  }

  public TCreateTabletReq() {
    this.compression_type = com.starrocks.thrift.TCompressionType.LZ4_FRAME;

    this.create_schema_file = true;

  }

  public TCreateTabletReq(
    long tablet_id,
    TTabletSchema tablet_schema)
  {
    this();
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    this.tablet_schema = tablet_schema;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCreateTabletReq(TCreateTabletReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tablet_id = other.tablet_id;
    if (other.isSetTablet_schema()) {
      this.tablet_schema = new TTabletSchema(other.tablet_schema);
    }
    this.version = other.version;
    this.version_hash = other.version_hash;
    if (other.isSetStorage_medium()) {
      this.storage_medium = other.storage_medium;
    }
    this.in_restore_mode = other.in_restore_mode;
    this.base_tablet_id = other.base_tablet_id;
    this.base_schema_hash = other.base_schema_hash;
    this.table_id = other.table_id;
    this.partition_id = other.partition_id;
    this.allocation_term = other.allocation_term;
    this.is_eco_mode = other.is_eco_mode;
    if (other.isSetStorage_format()) {
      this.storage_format = other.storage_format;
    }
    if (other.isSetTablet_type()) {
      this.tablet_type = other.tablet_type;
    }
    this.enable_persistent_index = other.enable_persistent_index;
    if (other.isSetCompression_type()) {
      this.compression_type = other.compression_type;
    }
    if (other.isSetBinlog_config()) {
      this.binlog_config = new TBinlogConfig(other.binlog_config);
    }
    if (other.isSetPersistent_index_type()) {
      this.persistent_index_type = other.persistent_index_type;
    }
    this.primary_index_cache_expire_sec = other.primary_index_cache_expire_sec;
    this.create_schema_file = other.create_schema_file;
  }

  @Override
  public TCreateTabletReq deepCopy() {
    return new TCreateTabletReq(this);
  }

  @Override
  public void clear() {
    setTablet_idIsSet(false);
    this.tablet_id = 0;
    this.tablet_schema = null;
    setVersionIsSet(false);
    this.version = 0;
    setVersion_hashIsSet(false);
    this.version_hash = 0;
    this.storage_medium = null;
    setIn_restore_modeIsSet(false);
    this.in_restore_mode = false;
    setBase_tablet_idIsSet(false);
    this.base_tablet_id = 0;
    setBase_schema_hashIsSet(false);
    this.base_schema_hash = 0;
    setTable_idIsSet(false);
    this.table_id = 0;
    setPartition_idIsSet(false);
    this.partition_id = 0;
    setAllocation_termIsSet(false);
    this.allocation_term = 0;
    setIs_eco_modeIsSet(false);
    this.is_eco_mode = false;
    this.storage_format = null;
    this.tablet_type = null;
    setEnable_persistent_indexIsSet(false);
    this.enable_persistent_index = false;
    this.compression_type = com.starrocks.thrift.TCompressionType.LZ4_FRAME;

    this.binlog_config = null;
    this.persistent_index_type = null;
    setPrimary_index_cache_expire_secIsSet(false);
    this.primary_index_cache_expire_sec = 0;
    this.create_schema_file = true;

  }

  public long getTablet_id() {
    return this.tablet_id;
  }

  public TCreateTabletReq setTablet_id(long tablet_id) {
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    return this;
  }

  public void unsetTablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TTabletSchema getTablet_schema() {
    return this.tablet_schema;
  }

  public TCreateTabletReq setTablet_schema(@org.apache.thrift.annotation.Nullable TTabletSchema tablet_schema) {
    this.tablet_schema = tablet_schema;
    return this;
  }

  public void unsetTablet_schema() {
    this.tablet_schema = null;
  }

  /** Returns true if field tablet_schema is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_schema() {
    return this.tablet_schema != null;
  }

  public void setTablet_schemaIsSet(boolean value) {
    if (!value) {
      this.tablet_schema = null;
    }
  }

  public long getVersion() {
    return this.version;
  }

  public TCreateTabletReq setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public long getVersion_hash() {
    return this.version_hash;
  }

  public TCreateTabletReq setVersion_hash(long version_hash) {
    this.version_hash = version_hash;
    setVersion_hashIsSet(true);
    return this;
  }

  public void unsetVersion_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_HASH_ISSET_ID);
  }

  public void setVersion_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_HASH_ISSET_ID, value);
  }

  /**
   * 
   * @see com.starrocks.thrift.TStorageMedium
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TStorageMedium getStorage_medium() {
    return this.storage_medium;
  }

  /**
   * 
   * @see com.starrocks.thrift.TStorageMedium
   */
  public TCreateTabletReq setStorage_medium(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TStorageMedium storage_medium) {
    this.storage_medium = storage_medium;
    return this;
  }

  public void unsetStorage_medium() {
    this.storage_medium = null;
  }

  /** Returns true if field storage_medium is set (has been assigned a value) and false otherwise */
  public boolean isSetStorage_medium() {
    return this.storage_medium != null;
  }

  public void setStorage_mediumIsSet(boolean value) {
    if (!value) {
      this.storage_medium = null;
    }
  }

  public boolean isIn_restore_mode() {
    return this.in_restore_mode;
  }

  public TCreateTabletReq setIn_restore_mode(boolean in_restore_mode) {
    this.in_restore_mode = in_restore_mode;
    setIn_restore_modeIsSet(true);
    return this;
  }

  public void unsetIn_restore_mode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IN_RESTORE_MODE_ISSET_ID);
  }

  /** Returns true if field in_restore_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetIn_restore_mode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IN_RESTORE_MODE_ISSET_ID);
  }

  public void setIn_restore_modeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IN_RESTORE_MODE_ISSET_ID, value);
  }

  public long getBase_tablet_id() {
    return this.base_tablet_id;
  }

  public TCreateTabletReq setBase_tablet_id(long base_tablet_id) {
    this.base_tablet_id = base_tablet_id;
    setBase_tablet_idIsSet(true);
    return this;
  }

  public void unsetBase_tablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BASE_TABLET_ID_ISSET_ID);
  }

  /** Returns true if field base_tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBase_tablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BASE_TABLET_ID_ISSET_ID);
  }

  public void setBase_tablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BASE_TABLET_ID_ISSET_ID, value);
  }

  public int getBase_schema_hash() {
    return this.base_schema_hash;
  }

  public TCreateTabletReq setBase_schema_hash(int base_schema_hash) {
    this.base_schema_hash = base_schema_hash;
    setBase_schema_hashIsSet(true);
    return this;
  }

  public void unsetBase_schema_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BASE_SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field base_schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetBase_schema_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BASE_SCHEMA_HASH_ISSET_ID);
  }

  public void setBase_schema_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BASE_SCHEMA_HASH_ISSET_ID, value);
  }

  public long getTable_id() {
    return this.table_id;
  }

  public TCreateTabletReq setTable_id(long table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public TCreateTabletReq setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    return this;
  }

  public void unsetPartition_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  public long getAllocation_term() {
    return this.allocation_term;
  }

  public TCreateTabletReq setAllocation_term(long allocation_term) {
    this.allocation_term = allocation_term;
    setAllocation_termIsSet(true);
    return this;
  }

  public void unsetAllocation_term() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALLOCATION_TERM_ISSET_ID);
  }

  /** Returns true if field allocation_term is set (has been assigned a value) and false otherwise */
  public boolean isSetAllocation_term() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALLOCATION_TERM_ISSET_ID);
  }

  public void setAllocation_termIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALLOCATION_TERM_ISSET_ID, value);
  }

  public boolean isIs_eco_mode() {
    return this.is_eco_mode;
  }

  public TCreateTabletReq setIs_eco_mode(boolean is_eco_mode) {
    this.is_eco_mode = is_eco_mode;
    setIs_eco_modeIsSet(true);
    return this;
  }

  public void unsetIs_eco_mode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_ECO_MODE_ISSET_ID);
  }

  /** Returns true if field is_eco_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_eco_mode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_ECO_MODE_ISSET_ID);
  }

  public void setIs_eco_modeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_ECO_MODE_ISSET_ID, value);
  }

  /**
   * 
   * @see TStorageFormat
   */
  @org.apache.thrift.annotation.Nullable
  public TStorageFormat getStorage_format() {
    return this.storage_format;
  }

  /**
   * 
   * @see TStorageFormat
   */
  public TCreateTabletReq setStorage_format(@org.apache.thrift.annotation.Nullable TStorageFormat storage_format) {
    this.storage_format = storage_format;
    return this;
  }

  public void unsetStorage_format() {
    this.storage_format = null;
  }

  /** Returns true if field storage_format is set (has been assigned a value) and false otherwise */
  public boolean isSetStorage_format() {
    return this.storage_format != null;
  }

  public void setStorage_formatIsSet(boolean value) {
    if (!value) {
      this.storage_format = null;
    }
  }

  /**
   * 
   * @see TTabletType
   */
  @org.apache.thrift.annotation.Nullable
  public TTabletType getTablet_type() {
    return this.tablet_type;
  }

  /**
   * 
   * @see TTabletType
   */
  public TCreateTabletReq setTablet_type(@org.apache.thrift.annotation.Nullable TTabletType tablet_type) {
    this.tablet_type = tablet_type;
    return this;
  }

  public void unsetTablet_type() {
    this.tablet_type = null;
  }

  /** Returns true if field tablet_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_type() {
    return this.tablet_type != null;
  }

  public void setTablet_typeIsSet(boolean value) {
    if (!value) {
      this.tablet_type = null;
    }
  }

  public boolean isEnable_persistent_index() {
    return this.enable_persistent_index;
  }

  public TCreateTabletReq setEnable_persistent_index(boolean enable_persistent_index) {
    this.enable_persistent_index = enable_persistent_index;
    setEnable_persistent_indexIsSet(true);
    return this;
  }

  public void unsetEnable_persistent_index() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_PERSISTENT_INDEX_ISSET_ID);
  }

  /** Returns true if field enable_persistent_index is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_persistent_index() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_PERSISTENT_INDEX_ISSET_ID);
  }

  public void setEnable_persistent_indexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_PERSISTENT_INDEX_ISSET_ID, value);
  }

  /**
   * 
   * @see com.starrocks.thrift.TCompressionType
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TCompressionType getCompression_type() {
    return this.compression_type;
  }

  /**
   * 
   * @see com.starrocks.thrift.TCompressionType
   */
  public TCreateTabletReq setCompression_type(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TCompressionType compression_type) {
    this.compression_type = compression_type;
    return this;
  }

  public void unsetCompression_type() {
    this.compression_type = null;
  }

  /** Returns true if field compression_type is set (has been assigned a value) and false otherwise */
  public boolean isSetCompression_type() {
    return this.compression_type != null;
  }

  public void setCompression_typeIsSet(boolean value) {
    if (!value) {
      this.compression_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TBinlogConfig getBinlog_config() {
    return this.binlog_config;
  }

  public TCreateTabletReq setBinlog_config(@org.apache.thrift.annotation.Nullable TBinlogConfig binlog_config) {
    this.binlog_config = binlog_config;
    return this;
  }

  public void unsetBinlog_config() {
    this.binlog_config = null;
  }

  /** Returns true if field binlog_config is set (has been assigned a value) and false otherwise */
  public boolean isSetBinlog_config() {
    return this.binlog_config != null;
  }

  public void setBinlog_configIsSet(boolean value) {
    if (!value) {
      this.binlog_config = null;
    }
  }

  /**
   * 
   * @see TPersistentIndexType
   */
  @org.apache.thrift.annotation.Nullable
  public TPersistentIndexType getPersistent_index_type() {
    return this.persistent_index_type;
  }

  /**
   * 
   * @see TPersistentIndexType
   */
  public TCreateTabletReq setPersistent_index_type(@org.apache.thrift.annotation.Nullable TPersistentIndexType persistent_index_type) {
    this.persistent_index_type = persistent_index_type;
    return this;
  }

  public void unsetPersistent_index_type() {
    this.persistent_index_type = null;
  }

  /** Returns true if field persistent_index_type is set (has been assigned a value) and false otherwise */
  public boolean isSetPersistent_index_type() {
    return this.persistent_index_type != null;
  }

  public void setPersistent_index_typeIsSet(boolean value) {
    if (!value) {
      this.persistent_index_type = null;
    }
  }

  public int getPrimary_index_cache_expire_sec() {
    return this.primary_index_cache_expire_sec;
  }

  public TCreateTabletReq setPrimary_index_cache_expire_sec(int primary_index_cache_expire_sec) {
    this.primary_index_cache_expire_sec = primary_index_cache_expire_sec;
    setPrimary_index_cache_expire_secIsSet(true);
    return this;
  }

  public void unsetPrimary_index_cache_expire_sec() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIMARY_INDEX_CACHE_EXPIRE_SEC_ISSET_ID);
  }

  /** Returns true if field primary_index_cache_expire_sec is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimary_index_cache_expire_sec() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIMARY_INDEX_CACHE_EXPIRE_SEC_ISSET_ID);
  }

  public void setPrimary_index_cache_expire_secIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIMARY_INDEX_CACHE_EXPIRE_SEC_ISSET_ID, value);
  }

  public boolean isCreate_schema_file() {
    return this.create_schema_file;
  }

  public TCreateTabletReq setCreate_schema_file(boolean create_schema_file) {
    this.create_schema_file = create_schema_file;
    setCreate_schema_fileIsSet(true);
    return this;
  }

  public void unsetCreate_schema_file() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATE_SCHEMA_FILE_ISSET_ID);
  }

  /** Returns true if field create_schema_file is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_schema_file() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATE_SCHEMA_FILE_ISSET_ID);
  }

  public void setCreate_schema_fileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATE_SCHEMA_FILE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLET_ID:
      if (value == null) {
        unsetTablet_id();
      } else {
        setTablet_id((java.lang.Long)value);
      }
      break;

    case TABLET_SCHEMA:
      if (value == null) {
        unsetTablet_schema();
      } else {
        setTablet_schema((TTabletSchema)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Long)value);
      }
      break;

    case VERSION_HASH:
      if (value == null) {
        unsetVersion_hash();
      } else {
        setVersion_hash((java.lang.Long)value);
      }
      break;

    case STORAGE_MEDIUM:
      if (value == null) {
        unsetStorage_medium();
      } else {
        setStorage_medium((com.starrocks.thrift.TStorageMedium)value);
      }
      break;

    case IN_RESTORE_MODE:
      if (value == null) {
        unsetIn_restore_mode();
      } else {
        setIn_restore_mode((java.lang.Boolean)value);
      }
      break;

    case BASE_TABLET_ID:
      if (value == null) {
        unsetBase_tablet_id();
      } else {
        setBase_tablet_id((java.lang.Long)value);
      }
      break;

    case BASE_SCHEMA_HASH:
      if (value == null) {
        unsetBase_schema_hash();
      } else {
        setBase_schema_hash((java.lang.Integer)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((java.lang.Long)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((java.lang.Long)value);
      }
      break;

    case ALLOCATION_TERM:
      if (value == null) {
        unsetAllocation_term();
      } else {
        setAllocation_term((java.lang.Long)value);
      }
      break;

    case IS_ECO_MODE:
      if (value == null) {
        unsetIs_eco_mode();
      } else {
        setIs_eco_mode((java.lang.Boolean)value);
      }
      break;

    case STORAGE_FORMAT:
      if (value == null) {
        unsetStorage_format();
      } else {
        setStorage_format((TStorageFormat)value);
      }
      break;

    case TABLET_TYPE:
      if (value == null) {
        unsetTablet_type();
      } else {
        setTablet_type((TTabletType)value);
      }
      break;

    case ENABLE_PERSISTENT_INDEX:
      if (value == null) {
        unsetEnable_persistent_index();
      } else {
        setEnable_persistent_index((java.lang.Boolean)value);
      }
      break;

    case COMPRESSION_TYPE:
      if (value == null) {
        unsetCompression_type();
      } else {
        setCompression_type((com.starrocks.thrift.TCompressionType)value);
      }
      break;

    case BINLOG_CONFIG:
      if (value == null) {
        unsetBinlog_config();
      } else {
        setBinlog_config((TBinlogConfig)value);
      }
      break;

    case PERSISTENT_INDEX_TYPE:
      if (value == null) {
        unsetPersistent_index_type();
      } else {
        setPersistent_index_type((TPersistentIndexType)value);
      }
      break;

    case PRIMARY_INDEX_CACHE_EXPIRE_SEC:
      if (value == null) {
        unsetPrimary_index_cache_expire_sec();
      } else {
        setPrimary_index_cache_expire_sec((java.lang.Integer)value);
      }
      break;

    case CREATE_SCHEMA_FILE:
      if (value == null) {
        unsetCreate_schema_file();
      } else {
        setCreate_schema_file((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLET_ID:
      return getTablet_id();

    case TABLET_SCHEMA:
      return getTablet_schema();

    case VERSION:
      return getVersion();

    case VERSION_HASH:
      return getVersion_hash();

    case STORAGE_MEDIUM:
      return getStorage_medium();

    case IN_RESTORE_MODE:
      return isIn_restore_mode();

    case BASE_TABLET_ID:
      return getBase_tablet_id();

    case BASE_SCHEMA_HASH:
      return getBase_schema_hash();

    case TABLE_ID:
      return getTable_id();

    case PARTITION_ID:
      return getPartition_id();

    case ALLOCATION_TERM:
      return getAllocation_term();

    case IS_ECO_MODE:
      return isIs_eco_mode();

    case STORAGE_FORMAT:
      return getStorage_format();

    case TABLET_TYPE:
      return getTablet_type();

    case ENABLE_PERSISTENT_INDEX:
      return isEnable_persistent_index();

    case COMPRESSION_TYPE:
      return getCompression_type();

    case BINLOG_CONFIG:
      return getBinlog_config();

    case PERSISTENT_INDEX_TYPE:
      return getPersistent_index_type();

    case PRIMARY_INDEX_CACHE_EXPIRE_SEC:
      return getPrimary_index_cache_expire_sec();

    case CREATE_SCHEMA_FILE:
      return isCreate_schema_file();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLET_ID:
      return isSetTablet_id();
    case TABLET_SCHEMA:
      return isSetTablet_schema();
    case VERSION:
      return isSetVersion();
    case VERSION_HASH:
      return isSetVersion_hash();
    case STORAGE_MEDIUM:
      return isSetStorage_medium();
    case IN_RESTORE_MODE:
      return isSetIn_restore_mode();
    case BASE_TABLET_ID:
      return isSetBase_tablet_id();
    case BASE_SCHEMA_HASH:
      return isSetBase_schema_hash();
    case TABLE_ID:
      return isSetTable_id();
    case PARTITION_ID:
      return isSetPartition_id();
    case ALLOCATION_TERM:
      return isSetAllocation_term();
    case IS_ECO_MODE:
      return isSetIs_eco_mode();
    case STORAGE_FORMAT:
      return isSetStorage_format();
    case TABLET_TYPE:
      return isSetTablet_type();
    case ENABLE_PERSISTENT_INDEX:
      return isSetEnable_persistent_index();
    case COMPRESSION_TYPE:
      return isSetCompression_type();
    case BINLOG_CONFIG:
      return isSetBinlog_config();
    case PERSISTENT_INDEX_TYPE:
      return isSetPersistent_index_type();
    case PRIMARY_INDEX_CACHE_EXPIRE_SEC:
      return isSetPrimary_index_cache_expire_sec();
    case CREATE_SCHEMA_FILE:
      return isSetCreate_schema_file();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TCreateTabletReq)
      return this.equals((TCreateTabletReq)that);
    return false;
  }

  public boolean equals(TCreateTabletReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tablet_id = true;
    boolean that_present_tablet_id = true;
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_tablet_schema = true && this.isSetTablet_schema();
    boolean that_present_tablet_schema = true && that.isSetTablet_schema();
    if (this_present_tablet_schema || that_present_tablet_schema) {
      if (!(this_present_tablet_schema && that_present_tablet_schema))
        return false;
      if (!this.tablet_schema.equals(that.tablet_schema))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_version_hash = true && this.isSetVersion_hash();
    boolean that_present_version_hash = true && that.isSetVersion_hash();
    if (this_present_version_hash || that_present_version_hash) {
      if (!(this_present_version_hash && that_present_version_hash))
        return false;
      if (this.version_hash != that.version_hash)
        return false;
    }

    boolean this_present_storage_medium = true && this.isSetStorage_medium();
    boolean that_present_storage_medium = true && that.isSetStorage_medium();
    if (this_present_storage_medium || that_present_storage_medium) {
      if (!(this_present_storage_medium && that_present_storage_medium))
        return false;
      if (!this.storage_medium.equals(that.storage_medium))
        return false;
    }

    boolean this_present_in_restore_mode = true && this.isSetIn_restore_mode();
    boolean that_present_in_restore_mode = true && that.isSetIn_restore_mode();
    if (this_present_in_restore_mode || that_present_in_restore_mode) {
      if (!(this_present_in_restore_mode && that_present_in_restore_mode))
        return false;
      if (this.in_restore_mode != that.in_restore_mode)
        return false;
    }

    boolean this_present_base_tablet_id = true && this.isSetBase_tablet_id();
    boolean that_present_base_tablet_id = true && that.isSetBase_tablet_id();
    if (this_present_base_tablet_id || that_present_base_tablet_id) {
      if (!(this_present_base_tablet_id && that_present_base_tablet_id))
        return false;
      if (this.base_tablet_id != that.base_tablet_id)
        return false;
    }

    boolean this_present_base_schema_hash = true && this.isSetBase_schema_hash();
    boolean that_present_base_schema_hash = true && that.isSetBase_schema_hash();
    if (this_present_base_schema_hash || that_present_base_schema_hash) {
      if (!(this_present_base_schema_hash && that_present_base_schema_hash))
        return false;
      if (this.base_schema_hash != that.base_schema_hash)
        return false;
    }

    boolean this_present_table_id = true && this.isSetTable_id();
    boolean that_present_table_id = true && that.isSetTable_id();
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    boolean this_present_partition_id = true && this.isSetPartition_id();
    boolean that_present_partition_id = true && that.isSetPartition_id();
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_allocation_term = true && this.isSetAllocation_term();
    boolean that_present_allocation_term = true && that.isSetAllocation_term();
    if (this_present_allocation_term || that_present_allocation_term) {
      if (!(this_present_allocation_term && that_present_allocation_term))
        return false;
      if (this.allocation_term != that.allocation_term)
        return false;
    }

    boolean this_present_is_eco_mode = true && this.isSetIs_eco_mode();
    boolean that_present_is_eco_mode = true && that.isSetIs_eco_mode();
    if (this_present_is_eco_mode || that_present_is_eco_mode) {
      if (!(this_present_is_eco_mode && that_present_is_eco_mode))
        return false;
      if (this.is_eco_mode != that.is_eco_mode)
        return false;
    }

    boolean this_present_storage_format = true && this.isSetStorage_format();
    boolean that_present_storage_format = true && that.isSetStorage_format();
    if (this_present_storage_format || that_present_storage_format) {
      if (!(this_present_storage_format && that_present_storage_format))
        return false;
      if (!this.storage_format.equals(that.storage_format))
        return false;
    }

    boolean this_present_tablet_type = true && this.isSetTablet_type();
    boolean that_present_tablet_type = true && that.isSetTablet_type();
    if (this_present_tablet_type || that_present_tablet_type) {
      if (!(this_present_tablet_type && that_present_tablet_type))
        return false;
      if (!this.tablet_type.equals(that.tablet_type))
        return false;
    }

    boolean this_present_enable_persistent_index = true && this.isSetEnable_persistent_index();
    boolean that_present_enable_persistent_index = true && that.isSetEnable_persistent_index();
    if (this_present_enable_persistent_index || that_present_enable_persistent_index) {
      if (!(this_present_enable_persistent_index && that_present_enable_persistent_index))
        return false;
      if (this.enable_persistent_index != that.enable_persistent_index)
        return false;
    }

    boolean this_present_compression_type = true && this.isSetCompression_type();
    boolean that_present_compression_type = true && that.isSetCompression_type();
    if (this_present_compression_type || that_present_compression_type) {
      if (!(this_present_compression_type && that_present_compression_type))
        return false;
      if (!this.compression_type.equals(that.compression_type))
        return false;
    }

    boolean this_present_binlog_config = true && this.isSetBinlog_config();
    boolean that_present_binlog_config = true && that.isSetBinlog_config();
    if (this_present_binlog_config || that_present_binlog_config) {
      if (!(this_present_binlog_config && that_present_binlog_config))
        return false;
      if (!this.binlog_config.equals(that.binlog_config))
        return false;
    }

    boolean this_present_persistent_index_type = true && this.isSetPersistent_index_type();
    boolean that_present_persistent_index_type = true && that.isSetPersistent_index_type();
    if (this_present_persistent_index_type || that_present_persistent_index_type) {
      if (!(this_present_persistent_index_type && that_present_persistent_index_type))
        return false;
      if (!this.persistent_index_type.equals(that.persistent_index_type))
        return false;
    }

    boolean this_present_primary_index_cache_expire_sec = true && this.isSetPrimary_index_cache_expire_sec();
    boolean that_present_primary_index_cache_expire_sec = true && that.isSetPrimary_index_cache_expire_sec();
    if (this_present_primary_index_cache_expire_sec || that_present_primary_index_cache_expire_sec) {
      if (!(this_present_primary_index_cache_expire_sec && that_present_primary_index_cache_expire_sec))
        return false;
      if (this.primary_index_cache_expire_sec != that.primary_index_cache_expire_sec)
        return false;
    }

    boolean this_present_create_schema_file = true && this.isSetCreate_schema_file();
    boolean that_present_create_schema_file = true && that.isSetCreate_schema_file();
    if (this_present_create_schema_file || that_present_create_schema_file) {
      if (!(this_present_create_schema_file && that_present_create_schema_file))
        return false;
      if (this.create_schema_file != that.create_schema_file)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tablet_id);

    hashCode = hashCode * 8191 + ((isSetTablet_schema()) ? 131071 : 524287);
    if (isSetTablet_schema())
      hashCode = hashCode * 8191 + tablet_schema.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

    hashCode = hashCode * 8191 + ((isSetVersion_hash()) ? 131071 : 524287);
    if (isSetVersion_hash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version_hash);

    hashCode = hashCode * 8191 + ((isSetStorage_medium()) ? 131071 : 524287);
    if (isSetStorage_medium())
      hashCode = hashCode * 8191 + storage_medium.getValue();

    hashCode = hashCode * 8191 + ((isSetIn_restore_mode()) ? 131071 : 524287);
    if (isSetIn_restore_mode())
      hashCode = hashCode * 8191 + ((in_restore_mode) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBase_tablet_id()) ? 131071 : 524287);
    if (isSetBase_tablet_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(base_tablet_id);

    hashCode = hashCode * 8191 + ((isSetBase_schema_hash()) ? 131071 : 524287);
    if (isSetBase_schema_hash())
      hashCode = hashCode * 8191 + base_schema_hash;

    hashCode = hashCode * 8191 + ((isSetTable_id()) ? 131071 : 524287);
    if (isSetTable_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_id);

    hashCode = hashCode * 8191 + ((isSetPartition_id()) ? 131071 : 524287);
    if (isSetPartition_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_id);

    hashCode = hashCode * 8191 + ((isSetAllocation_term()) ? 131071 : 524287);
    if (isSetAllocation_term())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(allocation_term);

    hashCode = hashCode * 8191 + ((isSetIs_eco_mode()) ? 131071 : 524287);
    if (isSetIs_eco_mode())
      hashCode = hashCode * 8191 + ((is_eco_mode) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetStorage_format()) ? 131071 : 524287);
    if (isSetStorage_format())
      hashCode = hashCode * 8191 + storage_format.getValue();

    hashCode = hashCode * 8191 + ((isSetTablet_type()) ? 131071 : 524287);
    if (isSetTablet_type())
      hashCode = hashCode * 8191 + tablet_type.getValue();

    hashCode = hashCode * 8191 + ((isSetEnable_persistent_index()) ? 131071 : 524287);
    if (isSetEnable_persistent_index())
      hashCode = hashCode * 8191 + ((enable_persistent_index) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCompression_type()) ? 131071 : 524287);
    if (isSetCompression_type())
      hashCode = hashCode * 8191 + compression_type.getValue();

    hashCode = hashCode * 8191 + ((isSetBinlog_config()) ? 131071 : 524287);
    if (isSetBinlog_config())
      hashCode = hashCode * 8191 + binlog_config.hashCode();

    hashCode = hashCode * 8191 + ((isSetPersistent_index_type()) ? 131071 : 524287);
    if (isSetPersistent_index_type())
      hashCode = hashCode * 8191 + persistent_index_type.getValue();

    hashCode = hashCode * 8191 + ((isSetPrimary_index_cache_expire_sec()) ? 131071 : 524287);
    if (isSetPrimary_index_cache_expire_sec())
      hashCode = hashCode * 8191 + primary_index_cache_expire_sec;

    hashCode = hashCode * 8191 + ((isSetCreate_schema_file()) ? 131071 : 524287);
    if (isSetCreate_schema_file())
      hashCode = hashCode * 8191 + ((create_schema_file) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TCreateTabletReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTablet_id(), other.isSetTablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_schema(), other.isSetTablet_schema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_schema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_schema, other.tablet_schema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion_hash(), other.isSetVersion_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_hash, other.version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStorage_medium(), other.isSetStorage_medium());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorage_medium()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_medium, other.storage_medium);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIn_restore_mode(), other.isSetIn_restore_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIn_restore_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.in_restore_mode, other.in_restore_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBase_tablet_id(), other.isSetBase_tablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase_tablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base_tablet_id, other.base_tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBase_schema_hash(), other.isSetBase_schema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase_schema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base_schema_hash, other.base_schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_id(), other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_id(), other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAllocation_term(), other.isSetAllocation_term());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllocation_term()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allocation_term, other.allocation_term);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_eco_mode(), other.isSetIs_eco_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_eco_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_eco_mode, other.is_eco_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStorage_format(), other.isSetStorage_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorage_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_format, other.storage_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_type(), other.isSetTablet_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_type, other.tablet_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_persistent_index(), other.isSetEnable_persistent_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_persistent_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_persistent_index, other.enable_persistent_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCompression_type(), other.isSetCompression_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompression_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compression_type, other.compression_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBinlog_config(), other.isSetBinlog_config());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinlog_config()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binlog_config, other.binlog_config);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPersistent_index_type(), other.isSetPersistent_index_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersistent_index_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.persistent_index_type, other.persistent_index_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPrimary_index_cache_expire_sec(), other.isSetPrimary_index_cache_expire_sec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimary_index_cache_expire_sec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primary_index_cache_expire_sec, other.primary_index_cache_expire_sec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreate_schema_file(), other.isSetCreate_schema_file());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_schema_file()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_schema_file, other.create_schema_file);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCreateTabletReq(");
    boolean first = true;

    sb.append("tablet_id:");
    sb.append(this.tablet_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tablet_schema:");
    if (this.tablet_schema == null) {
      sb.append("null");
    } else {
      sb.append(this.tablet_schema);
    }
    first = false;
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetVersion_hash()) {
      if (!first) sb.append(", ");
      sb.append("version_hash:");
      sb.append(this.version_hash);
      first = false;
    }
    if (isSetStorage_medium()) {
      if (!first) sb.append(", ");
      sb.append("storage_medium:");
      if (this.storage_medium == null) {
        sb.append("null");
      } else {
        sb.append(this.storage_medium);
      }
      first = false;
    }
    if (isSetIn_restore_mode()) {
      if (!first) sb.append(", ");
      sb.append("in_restore_mode:");
      sb.append(this.in_restore_mode);
      first = false;
    }
    if (isSetBase_tablet_id()) {
      if (!first) sb.append(", ");
      sb.append("base_tablet_id:");
      sb.append(this.base_tablet_id);
      first = false;
    }
    if (isSetBase_schema_hash()) {
      if (!first) sb.append(", ");
      sb.append("base_schema_hash:");
      sb.append(this.base_schema_hash);
      first = false;
    }
    if (isSetTable_id()) {
      if (!first) sb.append(", ");
      sb.append("table_id:");
      sb.append(this.table_id);
      first = false;
    }
    if (isSetPartition_id()) {
      if (!first) sb.append(", ");
      sb.append("partition_id:");
      sb.append(this.partition_id);
      first = false;
    }
    if (isSetAllocation_term()) {
      if (!first) sb.append(", ");
      sb.append("allocation_term:");
      sb.append(this.allocation_term);
      first = false;
    }
    if (isSetIs_eco_mode()) {
      if (!first) sb.append(", ");
      sb.append("is_eco_mode:");
      sb.append(this.is_eco_mode);
      first = false;
    }
    if (isSetStorage_format()) {
      if (!first) sb.append(", ");
      sb.append("storage_format:");
      if (this.storage_format == null) {
        sb.append("null");
      } else {
        sb.append(this.storage_format);
      }
      first = false;
    }
    if (isSetTablet_type()) {
      if (!first) sb.append(", ");
      sb.append("tablet_type:");
      if (this.tablet_type == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet_type);
      }
      first = false;
    }
    if (isSetEnable_persistent_index()) {
      if (!first) sb.append(", ");
      sb.append("enable_persistent_index:");
      sb.append(this.enable_persistent_index);
      first = false;
    }
    if (isSetCompression_type()) {
      if (!first) sb.append(", ");
      sb.append("compression_type:");
      if (this.compression_type == null) {
        sb.append("null");
      } else {
        sb.append(this.compression_type);
      }
      first = false;
    }
    if (isSetBinlog_config()) {
      if (!first) sb.append(", ");
      sb.append("binlog_config:");
      if (this.binlog_config == null) {
        sb.append("null");
      } else {
        sb.append(this.binlog_config);
      }
      first = false;
    }
    if (isSetPersistent_index_type()) {
      if (!first) sb.append(", ");
      sb.append("persistent_index_type:");
      if (this.persistent_index_type == null) {
        sb.append("null");
      } else {
        sb.append(this.persistent_index_type);
      }
      first = false;
    }
    if (isSetPrimary_index_cache_expire_sec()) {
      if (!first) sb.append(", ");
      sb.append("primary_index_cache_expire_sec:");
      sb.append(this.primary_index_cache_expire_sec);
      first = false;
    }
    if (isSetCreate_schema_file()) {
      if (!first) sb.append(", ");
      sb.append("create_schema_file:");
      sb.append(this.create_schema_file);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tablet_id' because it's a primitive and you chose the non-beans generator.
    if (tablet_schema == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tablet_schema' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (tablet_schema != null) {
      tablet_schema.validate();
    }
    if (binlog_config != null) {
      binlog_config.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCreateTabletReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TCreateTabletReqStandardScheme getScheme() {
      return new TCreateTabletReqStandardScheme();
    }
  }

  private static class TCreateTabletReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCreateTabletReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TCreateTabletReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLET_SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tablet_schema = new TTabletSchema();
              struct.tablet_schema.read(iprot);
              struct.setTablet_schemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version_hash = iprot.readI64();
              struct.setVersion_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STORAGE_MEDIUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.storage_medium = com.starrocks.thrift.TStorageMedium.findByValue(iprot.readI32());
              struct.setStorage_mediumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IN_RESTORE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.in_restore_mode = iprot.readBool();
              struct.setIn_restore_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BASE_TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.base_tablet_id = iprot.readI64();
              struct.setBase_tablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BASE_SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.base_schema_hash = iprot.readI32();
              struct.setBase_schema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_id = iprot.readI64();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ALLOCATION_TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.allocation_term = iprot.readI64();
              struct.setAllocation_termIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_ECO_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_eco_mode = iprot.readBool();
              struct.setIs_eco_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STORAGE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.storage_format = com.starrocks.thrift.TStorageFormat.findByValue(iprot.readI32());
              struct.setStorage_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TABLET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tablet_type = com.starrocks.thrift.TTabletType.findByValue(iprot.readI32());
              struct.setTablet_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ENABLE_PERSISTENT_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_persistent_index = iprot.readBool();
              struct.setEnable_persistent_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // COMPRESSION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compression_type = com.starrocks.thrift.TCompressionType.findByValue(iprot.readI32());
              struct.setCompression_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BINLOG_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.binlog_config = new TBinlogConfig();
              struct.binlog_config.read(iprot);
              struct.setBinlog_configIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PERSISTENT_INDEX_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.persistent_index_type = com.starrocks.thrift.TPersistentIndexType.findByValue(iprot.readI32());
              struct.setPersistent_index_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PRIMARY_INDEX_CACHE_EXPIRE_SEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.primary_index_cache_expire_sec = iprot.readI32();
              struct.setPrimary_index_cache_expire_secIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CREATE_SCHEMA_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.create_schema_file = iprot.readBool();
              struct.setCreate_schema_fileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTablet_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tablet_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TCreateTabletReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
      oprot.writeI64(struct.tablet_id);
      oprot.writeFieldEnd();
      if (struct.tablet_schema != null) {
        oprot.writeFieldBegin(TABLET_SCHEMA_FIELD_DESC);
        struct.tablet_schema.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI64(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersion_hash()) {
        oprot.writeFieldBegin(VERSION_HASH_FIELD_DESC);
        oprot.writeI64(struct.version_hash);
        oprot.writeFieldEnd();
      }
      if (struct.storage_medium != null) {
        if (struct.isSetStorage_medium()) {
          oprot.writeFieldBegin(STORAGE_MEDIUM_FIELD_DESC);
          oprot.writeI32(struct.storage_medium.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIn_restore_mode()) {
        oprot.writeFieldBegin(IN_RESTORE_MODE_FIELD_DESC);
        oprot.writeBool(struct.in_restore_mode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBase_tablet_id()) {
        oprot.writeFieldBegin(BASE_TABLET_ID_FIELD_DESC);
        oprot.writeI64(struct.base_tablet_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBase_schema_hash()) {
        oprot.writeFieldBegin(BASE_SCHEMA_HASH_FIELD_DESC);
        oprot.writeI32(struct.base_schema_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTable_id()) {
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeI64(struct.table_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartition_id()) {
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI64(struct.partition_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAllocation_term()) {
        oprot.writeFieldBegin(ALLOCATION_TERM_FIELD_DESC);
        oprot.writeI64(struct.allocation_term);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_eco_mode()) {
        oprot.writeFieldBegin(IS_ECO_MODE_FIELD_DESC);
        oprot.writeBool(struct.is_eco_mode);
        oprot.writeFieldEnd();
      }
      if (struct.storage_format != null) {
        if (struct.isSetStorage_format()) {
          oprot.writeFieldBegin(STORAGE_FORMAT_FIELD_DESC);
          oprot.writeI32(struct.storage_format.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.tablet_type != null) {
        if (struct.isSetTablet_type()) {
          oprot.writeFieldBegin(TABLET_TYPE_FIELD_DESC);
          oprot.writeI32(struct.tablet_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_persistent_index()) {
        oprot.writeFieldBegin(ENABLE_PERSISTENT_INDEX_FIELD_DESC);
        oprot.writeBool(struct.enable_persistent_index);
        oprot.writeFieldEnd();
      }
      if (struct.compression_type != null) {
        if (struct.isSetCompression_type()) {
          oprot.writeFieldBegin(COMPRESSION_TYPE_FIELD_DESC);
          oprot.writeI32(struct.compression_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.binlog_config != null) {
        if (struct.isSetBinlog_config()) {
          oprot.writeFieldBegin(BINLOG_CONFIG_FIELD_DESC);
          struct.binlog_config.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.persistent_index_type != null) {
        if (struct.isSetPersistent_index_type()) {
          oprot.writeFieldBegin(PERSISTENT_INDEX_TYPE_FIELD_DESC);
          oprot.writeI32(struct.persistent_index_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPrimary_index_cache_expire_sec()) {
        oprot.writeFieldBegin(PRIMARY_INDEX_CACHE_EXPIRE_SEC_FIELD_DESC);
        oprot.writeI32(struct.primary_index_cache_expire_sec);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreate_schema_file()) {
        oprot.writeFieldBegin(CREATE_SCHEMA_FILE_FIELD_DESC);
        oprot.writeBool(struct.create_schema_file);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCreateTabletReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TCreateTabletReqTupleScheme getScheme() {
      return new TCreateTabletReqTupleScheme();
    }
  }

  private static class TCreateTabletReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCreateTabletReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCreateTabletReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.tablet_id);
      struct.tablet_schema.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetVersion_hash()) {
        optionals.set(1);
      }
      if (struct.isSetStorage_medium()) {
        optionals.set(2);
      }
      if (struct.isSetIn_restore_mode()) {
        optionals.set(3);
      }
      if (struct.isSetBase_tablet_id()) {
        optionals.set(4);
      }
      if (struct.isSetBase_schema_hash()) {
        optionals.set(5);
      }
      if (struct.isSetTable_id()) {
        optionals.set(6);
      }
      if (struct.isSetPartition_id()) {
        optionals.set(7);
      }
      if (struct.isSetAllocation_term()) {
        optionals.set(8);
      }
      if (struct.isSetIs_eco_mode()) {
        optionals.set(9);
      }
      if (struct.isSetStorage_format()) {
        optionals.set(10);
      }
      if (struct.isSetTablet_type()) {
        optionals.set(11);
      }
      if (struct.isSetEnable_persistent_index()) {
        optionals.set(12);
      }
      if (struct.isSetCompression_type()) {
        optionals.set(13);
      }
      if (struct.isSetBinlog_config()) {
        optionals.set(14);
      }
      if (struct.isSetPersistent_index_type()) {
        optionals.set(15);
      }
      if (struct.isSetPrimary_index_cache_expire_sec()) {
        optionals.set(16);
      }
      if (struct.isSetCreate_schema_file()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetVersion()) {
        oprot.writeI64(struct.version);
      }
      if (struct.isSetVersion_hash()) {
        oprot.writeI64(struct.version_hash);
      }
      if (struct.isSetStorage_medium()) {
        oprot.writeI32(struct.storage_medium.getValue());
      }
      if (struct.isSetIn_restore_mode()) {
        oprot.writeBool(struct.in_restore_mode);
      }
      if (struct.isSetBase_tablet_id()) {
        oprot.writeI64(struct.base_tablet_id);
      }
      if (struct.isSetBase_schema_hash()) {
        oprot.writeI32(struct.base_schema_hash);
      }
      if (struct.isSetTable_id()) {
        oprot.writeI64(struct.table_id);
      }
      if (struct.isSetPartition_id()) {
        oprot.writeI64(struct.partition_id);
      }
      if (struct.isSetAllocation_term()) {
        oprot.writeI64(struct.allocation_term);
      }
      if (struct.isSetIs_eco_mode()) {
        oprot.writeBool(struct.is_eco_mode);
      }
      if (struct.isSetStorage_format()) {
        oprot.writeI32(struct.storage_format.getValue());
      }
      if (struct.isSetTablet_type()) {
        oprot.writeI32(struct.tablet_type.getValue());
      }
      if (struct.isSetEnable_persistent_index()) {
        oprot.writeBool(struct.enable_persistent_index);
      }
      if (struct.isSetCompression_type()) {
        oprot.writeI32(struct.compression_type.getValue());
      }
      if (struct.isSetBinlog_config()) {
        struct.binlog_config.write(oprot);
      }
      if (struct.isSetPersistent_index_type()) {
        oprot.writeI32(struct.persistent_index_type.getValue());
      }
      if (struct.isSetPrimary_index_cache_expire_sec()) {
        oprot.writeI32(struct.primary_index_cache_expire_sec);
      }
      if (struct.isSetCreate_schema_file()) {
        oprot.writeBool(struct.create_schema_file);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCreateTabletReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tablet_id = iprot.readI64();
      struct.setTablet_idIsSet(true);
      struct.tablet_schema = new TTabletSchema();
      struct.tablet_schema.read(iprot);
      struct.setTablet_schemaIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.version = iprot.readI64();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.version_hash = iprot.readI64();
        struct.setVersion_hashIsSet(true);
      }
      if (incoming.get(2)) {
        struct.storage_medium = com.starrocks.thrift.TStorageMedium.findByValue(iprot.readI32());
        struct.setStorage_mediumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.in_restore_mode = iprot.readBool();
        struct.setIn_restore_modeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.base_tablet_id = iprot.readI64();
        struct.setBase_tablet_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.base_schema_hash = iprot.readI32();
        struct.setBase_schema_hashIsSet(true);
      }
      if (incoming.get(6)) {
        struct.table_id = iprot.readI64();
        struct.setTable_idIsSet(true);
      }
      if (incoming.get(7)) {
        struct.partition_id = iprot.readI64();
        struct.setPartition_idIsSet(true);
      }
      if (incoming.get(8)) {
        struct.allocation_term = iprot.readI64();
        struct.setAllocation_termIsSet(true);
      }
      if (incoming.get(9)) {
        struct.is_eco_mode = iprot.readBool();
        struct.setIs_eco_modeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.storage_format = com.starrocks.thrift.TStorageFormat.findByValue(iprot.readI32());
        struct.setStorage_formatIsSet(true);
      }
      if (incoming.get(11)) {
        struct.tablet_type = com.starrocks.thrift.TTabletType.findByValue(iprot.readI32());
        struct.setTablet_typeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.enable_persistent_index = iprot.readBool();
        struct.setEnable_persistent_indexIsSet(true);
      }
      if (incoming.get(13)) {
        struct.compression_type = com.starrocks.thrift.TCompressionType.findByValue(iprot.readI32());
        struct.setCompression_typeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.binlog_config = new TBinlogConfig();
        struct.binlog_config.read(iprot);
        struct.setBinlog_configIsSet(true);
      }
      if (incoming.get(15)) {
        struct.persistent_index_type = com.starrocks.thrift.TPersistentIndexType.findByValue(iprot.readI32());
        struct.setPersistent_index_typeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.primary_index_cache_expire_sec = iprot.readI32();
        struct.setPrimary_index_cache_expire_secIsSet(true);
      }
      if (incoming.get(17)) {
        struct.create_schema_file = iprot.readBool();
        struct.setCreate_schema_fileIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

