/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TOlapTableSink implements org.apache.thrift.TBase<TOlapTableSink, TOlapTableSink._Fields>, java.io.Serializable, Cloneable, Comparable<TOlapTableSink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOlapTableSink");

  private static final org.apache.thrift.protocol.TField LOAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("load_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("db_id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_id", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_REPLICAS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_replicas", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NEED_GEN_ROLLUP_FIELD_DESC = new org.apache.thrift.protocol.TField("need_gen_rollup", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("partition", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField NODES_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("nodes_info", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField LOAD_CHANNEL_TIMEOUT_S_FIELD_DESC = new org.apache.thrift.protocol.TField("load_channel_timeout_s", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField IS_LAKE_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_lake_table", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField TXN_TRACE_PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_trace_parent", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField KEYS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("keys_type", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField WRITE_QUORUM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("write_quorum_type", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField ENABLE_REPLICATED_STORAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_replicated_storage", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField MERGE_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("merge_condition", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField NULL_EXPR_IN_AUTO_INCREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("null_expr_in_auto_increment", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField MISS_AUTO_INCREMENT_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("miss_auto_increment_column", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField ABORT_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("abort_delete", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField AUTO_INCREMENT_SLOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("auto_increment_slot_id", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField PARTIAL_UPDATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("partial_update_mode", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField ENABLE_COLOCATE_MV_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_colocate_mv_index", org.apache.thrift.protocol.TType.BOOL, (short)27);
  private static final org.apache.thrift.protocol.TField AUTOMATIC_BUCKET_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("automatic_bucket_size", org.apache.thrift.protocol.TType.I64, (short)28);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TOlapTableSinkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TOlapTableSinkTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TUniqueId load_id; // required
  public long txn_id; // required
  public long db_id; // required
  public long table_id; // required
  public int tuple_id; // required
  public int num_replicas; // required
  public boolean need_gen_rollup; // required
  public @org.apache.thrift.annotation.Nullable String db_name; // optional
  public @org.apache.thrift.annotation.Nullable String table_name; // optional
  public @org.apache.thrift.annotation.Nullable TOlapTableSchemaParam schema; // required
  public @org.apache.thrift.annotation.Nullable TOlapTablePartitionParam partition; // required
  public @org.apache.thrift.annotation.Nullable TOlapTableLocationParam location; // required
  public @org.apache.thrift.annotation.Nullable TNodesInfo nodes_info; // required
  public long load_channel_timeout_s; // optional
  public boolean is_lake_table; // optional
  public @org.apache.thrift.annotation.Nullable String txn_trace_parent; // optional
  /**
   * 
   * @see TKeysType
   */
  public @org.apache.thrift.annotation.Nullable TKeysType keys_type; // optional
  /**
   * 
   * @see TWriteQuorumType
   */
  public @org.apache.thrift.annotation.Nullable TWriteQuorumType write_quorum_type; // optional
  public boolean enable_replicated_storage; // optional
  public @org.apache.thrift.annotation.Nullable String merge_condition; // optional
  public boolean null_expr_in_auto_increment; // optional
  public boolean miss_auto_increment_column; // optional
  public boolean abort_delete; // optional
  public int auto_increment_slot_id; // optional
  /**
   * 
   * @see TPartialUpdateMode
   */
  public @org.apache.thrift.annotation.Nullable TPartialUpdateMode partial_update_mode; // optional
  public @org.apache.thrift.annotation.Nullable String label; // optional
  public boolean enable_colocate_mv_index; // optional
  public long automatic_bucket_size; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOAD_ID((short)1, "load_id"),
    TXN_ID((short)2, "txn_id"),
    DB_ID((short)3, "db_id"),
    TABLE_ID((short)4, "table_id"),
    TUPLE_ID((short)5, "tuple_id"),
    NUM_REPLICAS((short)6, "num_replicas"),
    NEED_GEN_ROLLUP((short)7, "need_gen_rollup"),
    DB_NAME((short)8, "db_name"),
    TABLE_NAME((short)9, "table_name"),
    SCHEMA((short)10, "schema"),
    PARTITION((short)11, "partition"),
    LOCATION((short)12, "location"),
    NODES_INFO((short)13, "nodes_info"),
    LOAD_CHANNEL_TIMEOUT_S((short)14, "load_channel_timeout_s"),
    IS_LAKE_TABLE((short)15, "is_lake_table"),
    TXN_TRACE_PARENT((short)16, "txn_trace_parent"),
    /**
     * 
     * @see TKeysType
     */
    KEYS_TYPE((short)17, "keys_type"),
    /**
     * 
     * @see TWriteQuorumType
     */
    WRITE_QUORUM_TYPE((short)18, "write_quorum_type"),
    ENABLE_REPLICATED_STORAGE((short)19, "enable_replicated_storage"),
    MERGE_CONDITION((short)20, "merge_condition"),
    NULL_EXPR_IN_AUTO_INCREMENT((short)21, "null_expr_in_auto_increment"),
    MISS_AUTO_INCREMENT_COLUMN((short)22, "miss_auto_increment_column"),
    ABORT_DELETE((short)23, "abort_delete"),
    AUTO_INCREMENT_SLOT_ID((short)24, "auto_increment_slot_id"),
    /**
     * 
     * @see TPartialUpdateMode
     */
    PARTIAL_UPDATE_MODE((short)25, "partial_update_mode"),
    LABEL((short)26, "label"),
    ENABLE_COLOCATE_MV_INDEX((short)27, "enable_colocate_mv_index"),
    AUTOMATIC_BUCKET_SIZE((short)28, "automatic_bucket_size");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOAD_ID
          return LOAD_ID;
        case 2: // TXN_ID
          return TXN_ID;
        case 3: // DB_ID
          return DB_ID;
        case 4: // TABLE_ID
          return TABLE_ID;
        case 5: // TUPLE_ID
          return TUPLE_ID;
        case 6: // NUM_REPLICAS
          return NUM_REPLICAS;
        case 7: // NEED_GEN_ROLLUP
          return NEED_GEN_ROLLUP;
        case 8: // DB_NAME
          return DB_NAME;
        case 9: // TABLE_NAME
          return TABLE_NAME;
        case 10: // SCHEMA
          return SCHEMA;
        case 11: // PARTITION
          return PARTITION;
        case 12: // LOCATION
          return LOCATION;
        case 13: // NODES_INFO
          return NODES_INFO;
        case 14: // LOAD_CHANNEL_TIMEOUT_S
          return LOAD_CHANNEL_TIMEOUT_S;
        case 15: // IS_LAKE_TABLE
          return IS_LAKE_TABLE;
        case 16: // TXN_TRACE_PARENT
          return TXN_TRACE_PARENT;
        case 17: // KEYS_TYPE
          return KEYS_TYPE;
        case 18: // WRITE_QUORUM_TYPE
          return WRITE_QUORUM_TYPE;
        case 19: // ENABLE_REPLICATED_STORAGE
          return ENABLE_REPLICATED_STORAGE;
        case 20: // MERGE_CONDITION
          return MERGE_CONDITION;
        case 21: // NULL_EXPR_IN_AUTO_INCREMENT
          return NULL_EXPR_IN_AUTO_INCREMENT;
        case 22: // MISS_AUTO_INCREMENT_COLUMN
          return MISS_AUTO_INCREMENT_COLUMN;
        case 23: // ABORT_DELETE
          return ABORT_DELETE;
        case 24: // AUTO_INCREMENT_SLOT_ID
          return AUTO_INCREMENT_SLOT_ID;
        case 25: // PARTIAL_UPDATE_MODE
          return PARTIAL_UPDATE_MODE;
        case 26: // LABEL
          return LABEL;
        case 27: // ENABLE_COLOCATE_MV_INDEX
          return ENABLE_COLOCATE_MV_INDEX;
        case 28: // AUTOMATIC_BUCKET_SIZE
          return AUTOMATIC_BUCKET_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TXN_ID_ISSET_ID = 0;
  private static final int __DB_ID_ISSET_ID = 1;
  private static final int __TABLE_ID_ISSET_ID = 2;
  private static final int __TUPLE_ID_ISSET_ID = 3;
  private static final int __NUM_REPLICAS_ISSET_ID = 4;
  private static final int __NEED_GEN_ROLLUP_ISSET_ID = 5;
  private static final int __LOAD_CHANNEL_TIMEOUT_S_ISSET_ID = 6;
  private static final int __IS_LAKE_TABLE_ISSET_ID = 7;
  private static final int __ENABLE_REPLICATED_STORAGE_ISSET_ID = 8;
  private static final int __NULL_EXPR_IN_AUTO_INCREMENT_ISSET_ID = 9;
  private static final int __MISS_AUTO_INCREMENT_COLUMN_ISSET_ID = 10;
  private static final int __ABORT_DELETE_ISSET_ID = 11;
  private static final int __AUTO_INCREMENT_SLOT_ID_ISSET_ID = 12;
  private static final int __ENABLE_COLOCATE_MV_INDEX_ISSET_ID = 13;
  private static final int __AUTOMATIC_BUCKET_SIZE_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DB_NAME,_Fields.TABLE_NAME,_Fields.LOAD_CHANNEL_TIMEOUT_S,_Fields.IS_LAKE_TABLE,_Fields.TXN_TRACE_PARENT,_Fields.KEYS_TYPE,_Fields.WRITE_QUORUM_TYPE,_Fields.ENABLE_REPLICATED_STORAGE,_Fields.MERGE_CONDITION,_Fields.NULL_EXPR_IN_AUTO_INCREMENT,_Fields.MISS_AUTO_INCREMENT_COLUMN,_Fields.ABORT_DELETE,_Fields.AUTO_INCREMENT_SLOT_ID,_Fields.PARTIAL_UPDATE_MODE,_Fields.LABEL,_Fields.ENABLE_COLOCATE_MV_INDEX,_Fields.AUTOMATIC_BUCKET_SIZE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOAD_ID, new org.apache.thrift.meta_data.FieldMetaData("load_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class)));
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txn_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DB_ID, new org.apache.thrift.meta_data.FieldMetaData("db_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_REPLICAS, new org.apache.thrift.meta_data.FieldMetaData("num_replicas", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEED_GEN_ROLLUP, new org.apache.thrift.meta_data.FieldMetaData("need_gen_rollup", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlapTableSchemaParam.class)));
    tmpMap.put(_Fields.PARTITION, new org.apache.thrift.meta_data.FieldMetaData("partition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlapTablePartitionParam.class)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlapTableLocationParam.class)));
    tmpMap.put(_Fields.NODES_INFO, new org.apache.thrift.meta_data.FieldMetaData("nodes_info", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNodesInfo.class)));
    tmpMap.put(_Fields.LOAD_CHANNEL_TIMEOUT_S, new org.apache.thrift.meta_data.FieldMetaData("load_channel_timeout_s", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_LAKE_TABLE, new org.apache.thrift.meta_data.FieldMetaData("is_lake_table", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TXN_TRACE_PARENT, new org.apache.thrift.meta_data.FieldMetaData("txn_trace_parent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEYS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("keys_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TKeysType.class)));
    tmpMap.put(_Fields.WRITE_QUORUM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("write_quorum_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TWriteQuorumType.class)));
    tmpMap.put(_Fields.ENABLE_REPLICATED_STORAGE, new org.apache.thrift.meta_data.FieldMetaData("enable_replicated_storage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MERGE_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("merge_condition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NULL_EXPR_IN_AUTO_INCREMENT, new org.apache.thrift.meta_data.FieldMetaData("null_expr_in_auto_increment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MISS_AUTO_INCREMENT_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("miss_auto_increment_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ABORT_DELETE, new org.apache.thrift.meta_data.FieldMetaData("abort_delete", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AUTO_INCREMENT_SLOT_ID, new org.apache.thrift.meta_data.FieldMetaData("auto_increment_slot_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTIAL_UPDATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("partial_update_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPartialUpdateMode.class)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLE_COLOCATE_MV_INDEX, new org.apache.thrift.meta_data.FieldMetaData("enable_colocate_mv_index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AUTOMATIC_BUCKET_SIZE, new org.apache.thrift.meta_data.FieldMetaData("automatic_bucket_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOlapTableSink.class, metaDataMap);
  }

  public TOlapTableSink() {
  }

  public TOlapTableSink(
    TUniqueId load_id,
    long txn_id,
    long db_id,
    long table_id,
    int tuple_id,
    int num_replicas,
    boolean need_gen_rollup,
    TOlapTableSchemaParam schema,
    TOlapTablePartitionParam partition,
    TOlapTableLocationParam location,
    TNodesInfo nodes_info)
  {
    this();
    this.load_id = load_id;
    this.txn_id = txn_id;
    setTxn_idIsSet(true);
    this.db_id = db_id;
    setDb_idIsSet(true);
    this.table_id = table_id;
    setTable_idIsSet(true);
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    this.num_replicas = num_replicas;
    setNum_replicasIsSet(true);
    this.need_gen_rollup = need_gen_rollup;
    setNeed_gen_rollupIsSet(true);
    this.schema = schema;
    this.partition = partition;
    this.location = location;
    this.nodes_info = nodes_info;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOlapTableSink(TOlapTableSink other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLoad_id()) {
      this.load_id = new TUniqueId(other.load_id);
    }
    this.txn_id = other.txn_id;
    this.db_id = other.db_id;
    this.table_id = other.table_id;
    this.tuple_id = other.tuple_id;
    this.num_replicas = other.num_replicas;
    this.need_gen_rollup = other.need_gen_rollup;
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    if (other.isSetSchema()) {
      this.schema = new TOlapTableSchemaParam(other.schema);
    }
    if (other.isSetPartition()) {
      this.partition = new TOlapTablePartitionParam(other.partition);
    }
    if (other.isSetLocation()) {
      this.location = new TOlapTableLocationParam(other.location);
    }
    if (other.isSetNodes_info()) {
      this.nodes_info = new TNodesInfo(other.nodes_info);
    }
    this.load_channel_timeout_s = other.load_channel_timeout_s;
    this.is_lake_table = other.is_lake_table;
    if (other.isSetTxn_trace_parent()) {
      this.txn_trace_parent = other.txn_trace_parent;
    }
    if (other.isSetKeys_type()) {
      this.keys_type = other.keys_type;
    }
    if (other.isSetWrite_quorum_type()) {
      this.write_quorum_type = other.write_quorum_type;
    }
    this.enable_replicated_storage = other.enable_replicated_storage;
    if (other.isSetMerge_condition()) {
      this.merge_condition = other.merge_condition;
    }
    this.null_expr_in_auto_increment = other.null_expr_in_auto_increment;
    this.miss_auto_increment_column = other.miss_auto_increment_column;
    this.abort_delete = other.abort_delete;
    this.auto_increment_slot_id = other.auto_increment_slot_id;
    if (other.isSetPartial_update_mode()) {
      this.partial_update_mode = other.partial_update_mode;
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    this.enable_colocate_mv_index = other.enable_colocate_mv_index;
    this.automatic_bucket_size = other.automatic_bucket_size;
  }

  @Override
  public TOlapTableSink deepCopy() {
    return new TOlapTableSink(this);
  }

  @Override
  public void clear() {
    this.load_id = null;
    setTxn_idIsSet(false);
    this.txn_id = 0;
    setDb_idIsSet(false);
    this.db_id = 0;
    setTable_idIsSet(false);
    this.table_id = 0;
    setTuple_idIsSet(false);
    this.tuple_id = 0;
    setNum_replicasIsSet(false);
    this.num_replicas = 0;
    setNeed_gen_rollupIsSet(false);
    this.need_gen_rollup = false;
    this.db_name = null;
    this.table_name = null;
    this.schema = null;
    this.partition = null;
    this.location = null;
    this.nodes_info = null;
    setLoad_channel_timeout_sIsSet(false);
    this.load_channel_timeout_s = 0;
    setIs_lake_tableIsSet(false);
    this.is_lake_table = false;
    this.txn_trace_parent = null;
    this.keys_type = null;
    this.write_quorum_type = null;
    setEnable_replicated_storageIsSet(false);
    this.enable_replicated_storage = false;
    this.merge_condition = null;
    setNull_expr_in_auto_incrementIsSet(false);
    this.null_expr_in_auto_increment = false;
    setMiss_auto_increment_columnIsSet(false);
    this.miss_auto_increment_column = false;
    setAbort_deleteIsSet(false);
    this.abort_delete = false;
    setAuto_increment_slot_idIsSet(false);
    this.auto_increment_slot_id = 0;
    this.partial_update_mode = null;
    this.label = null;
    setEnable_colocate_mv_indexIsSet(false);
    this.enable_colocate_mv_index = false;
    setAutomatic_bucket_sizeIsSet(false);
    this.automatic_bucket_size = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public TUniqueId getLoad_id() {
    return this.load_id;
  }

  public TOlapTableSink setLoad_id(@org.apache.thrift.annotation.Nullable TUniqueId load_id) {
    this.load_id = load_id;
    return this;
  }

  public void unsetLoad_id() {
    this.load_id = null;
  }

  /** Returns true if field load_id is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_id() {
    return this.load_id != null;
  }

  public void setLoad_idIsSet(boolean value) {
    if (!value) {
      this.load_id = null;
    }
  }

  public long getTxn_id() {
    return this.txn_id;
  }

  public TOlapTableSink setTxn_id(long txn_id) {
    this.txn_id = txn_id;
    setTxn_idIsSet(true);
    return this;
  }

  public void unsetTxn_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  /** Returns true if field txn_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  public void setTxn_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXN_ID_ISSET_ID, value);
  }

  public long getDb_id() {
    return this.db_id;
  }

  public TOlapTableSink setDb_id(long db_id) {
    this.db_id = db_id;
    setDb_idIsSet(true);
    return this;
  }

  public void unsetDb_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  /** Returns true if field db_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  public void setDb_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DB_ID_ISSET_ID, value);
  }

  public long getTable_id() {
    return this.table_id;
  }

  public TOlapTableSink setTable_id(long table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  public int getTuple_id() {
    return this.tuple_id;
  }

  public TOlapTableSink setTuple_id(int tuple_id) {
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    return this;
  }

  public void unsetTuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  public void setTuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TUPLE_ID_ISSET_ID, value);
  }

  public int getNum_replicas() {
    return this.num_replicas;
  }

  public TOlapTableSink setNum_replicas(int num_replicas) {
    this.num_replicas = num_replicas;
    setNum_replicasIsSet(true);
    return this;
  }

  public void unsetNum_replicas() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_REPLICAS_ISSET_ID);
  }

  /** Returns true if field num_replicas is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_replicas() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_REPLICAS_ISSET_ID);
  }

  public void setNum_replicasIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_REPLICAS_ISSET_ID, value);
  }

  public boolean isNeed_gen_rollup() {
    return this.need_gen_rollup;
  }

  public TOlapTableSink setNeed_gen_rollup(boolean need_gen_rollup) {
    this.need_gen_rollup = need_gen_rollup;
    setNeed_gen_rollupIsSet(true);
    return this;
  }

  public void unsetNeed_gen_rollup() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEED_GEN_ROLLUP_ISSET_ID);
  }

  /** Returns true if field need_gen_rollup is set (has been assigned a value) and false otherwise */
  public boolean isSetNeed_gen_rollup() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEED_GEN_ROLLUP_ISSET_ID);
  }

  public void setNeed_gen_rollupIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEED_GEN_ROLLUP_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getDb_name() {
    return this.db_name;
  }

  public TOlapTableSink setDb_name(@org.apache.thrift.annotation.Nullable String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getTable_name() {
    return this.table_name;
  }

  public TOlapTableSink setTable_name(@org.apache.thrift.annotation.Nullable String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TOlapTableSchemaParam getSchema() {
    return this.schema;
  }

  public TOlapTableSink setSchema(@org.apache.thrift.annotation.Nullable TOlapTableSchemaParam schema) {
    this.schema = schema;
    return this;
  }

  public void unsetSchema() {
    this.schema = null;
  }

  /** Returns true if field schema is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema() {
    return this.schema != null;
  }

  public void setSchemaIsSet(boolean value) {
    if (!value) {
      this.schema = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TOlapTablePartitionParam getPartition() {
    return this.partition;
  }

  public TOlapTableSink setPartition(@org.apache.thrift.annotation.Nullable TOlapTablePartitionParam partition) {
    this.partition = partition;
    return this;
  }

  public void unsetPartition() {
    this.partition = null;
  }

  /** Returns true if field partition is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition() {
    return this.partition != null;
  }

  public void setPartitionIsSet(boolean value) {
    if (!value) {
      this.partition = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TOlapTableLocationParam getLocation() {
    return this.location;
  }

  public TOlapTableSink setLocation(@org.apache.thrift.annotation.Nullable TOlapTableLocationParam location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TNodesInfo getNodes_info() {
    return this.nodes_info;
  }

  public TOlapTableSink setNodes_info(@org.apache.thrift.annotation.Nullable TNodesInfo nodes_info) {
    this.nodes_info = nodes_info;
    return this;
  }

  public void unsetNodes_info() {
    this.nodes_info = null;
  }

  /** Returns true if field nodes_info is set (has been assigned a value) and false otherwise */
  public boolean isSetNodes_info() {
    return this.nodes_info != null;
  }

  public void setNodes_infoIsSet(boolean value) {
    if (!value) {
      this.nodes_info = null;
    }
  }

  public long getLoad_channel_timeout_s() {
    return this.load_channel_timeout_s;
  }

  public TOlapTableSink setLoad_channel_timeout_s(long load_channel_timeout_s) {
    this.load_channel_timeout_s = load_channel_timeout_s;
    setLoad_channel_timeout_sIsSet(true);
    return this;
  }

  public void unsetLoad_channel_timeout_s() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOAD_CHANNEL_TIMEOUT_S_ISSET_ID);
  }

  /** Returns true if field load_channel_timeout_s is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_channel_timeout_s() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOAD_CHANNEL_TIMEOUT_S_ISSET_ID);
  }

  public void setLoad_channel_timeout_sIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOAD_CHANNEL_TIMEOUT_S_ISSET_ID, value);
  }

  public boolean isIs_lake_table() {
    return this.is_lake_table;
  }

  public TOlapTableSink setIs_lake_table(boolean is_lake_table) {
    this.is_lake_table = is_lake_table;
    setIs_lake_tableIsSet(true);
    return this;
  }

  public void unsetIs_lake_table() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_LAKE_TABLE_ISSET_ID);
  }

  /** Returns true if field is_lake_table is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_lake_table() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_LAKE_TABLE_ISSET_ID);
  }

  public void setIs_lake_tableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_LAKE_TABLE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getTxn_trace_parent() {
    return this.txn_trace_parent;
  }

  public TOlapTableSink setTxn_trace_parent(@org.apache.thrift.annotation.Nullable String txn_trace_parent) {
    this.txn_trace_parent = txn_trace_parent;
    return this;
  }

  public void unsetTxn_trace_parent() {
    this.txn_trace_parent = null;
  }

  /** Returns true if field txn_trace_parent is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_trace_parent() {
    return this.txn_trace_parent != null;
  }

  public void setTxn_trace_parentIsSet(boolean value) {
    if (!value) {
      this.txn_trace_parent = null;
    }
  }

  /**
   * 
   * @see TKeysType
   */
  @org.apache.thrift.annotation.Nullable
  public TKeysType getKeys_type() {
    return this.keys_type;
  }

  /**
   * 
   * @see TKeysType
   */
  public TOlapTableSink setKeys_type(@org.apache.thrift.annotation.Nullable TKeysType keys_type) {
    this.keys_type = keys_type;
    return this;
  }

  public void unsetKeys_type() {
    this.keys_type = null;
  }

  /** Returns true if field keys_type is set (has been assigned a value) and false otherwise */
  public boolean isSetKeys_type() {
    return this.keys_type != null;
  }

  public void setKeys_typeIsSet(boolean value) {
    if (!value) {
      this.keys_type = null;
    }
  }

  /**
   * 
   * @see TWriteQuorumType
   */
  @org.apache.thrift.annotation.Nullable
  public TWriteQuorumType getWrite_quorum_type() {
    return this.write_quorum_type;
  }

  /**
   * 
   * @see TWriteQuorumType
   */
  public TOlapTableSink setWrite_quorum_type(@org.apache.thrift.annotation.Nullable TWriteQuorumType write_quorum_type) {
    this.write_quorum_type = write_quorum_type;
    return this;
  }

  public void unsetWrite_quorum_type() {
    this.write_quorum_type = null;
  }

  /** Returns true if field write_quorum_type is set (has been assigned a value) and false otherwise */
  public boolean isSetWrite_quorum_type() {
    return this.write_quorum_type != null;
  }

  public void setWrite_quorum_typeIsSet(boolean value) {
    if (!value) {
      this.write_quorum_type = null;
    }
  }

  public boolean isEnable_replicated_storage() {
    return this.enable_replicated_storage;
  }

  public TOlapTableSink setEnable_replicated_storage(boolean enable_replicated_storage) {
    this.enable_replicated_storage = enable_replicated_storage;
    setEnable_replicated_storageIsSet(true);
    return this;
  }

  public void unsetEnable_replicated_storage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_REPLICATED_STORAGE_ISSET_ID);
  }

  /** Returns true if field enable_replicated_storage is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_replicated_storage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_REPLICATED_STORAGE_ISSET_ID);
  }

  public void setEnable_replicated_storageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_REPLICATED_STORAGE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getMerge_condition() {
    return this.merge_condition;
  }

  public TOlapTableSink setMerge_condition(@org.apache.thrift.annotation.Nullable String merge_condition) {
    this.merge_condition = merge_condition;
    return this;
  }

  public void unsetMerge_condition() {
    this.merge_condition = null;
  }

  /** Returns true if field merge_condition is set (has been assigned a value) and false otherwise */
  public boolean isSetMerge_condition() {
    return this.merge_condition != null;
  }

  public void setMerge_conditionIsSet(boolean value) {
    if (!value) {
      this.merge_condition = null;
    }
  }

  public boolean isNull_expr_in_auto_increment() {
    return this.null_expr_in_auto_increment;
  }

  public TOlapTableSink setNull_expr_in_auto_increment(boolean null_expr_in_auto_increment) {
    this.null_expr_in_auto_increment = null_expr_in_auto_increment;
    setNull_expr_in_auto_incrementIsSet(true);
    return this;
  }

  public void unsetNull_expr_in_auto_increment() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NULL_EXPR_IN_AUTO_INCREMENT_ISSET_ID);
  }

  /** Returns true if field null_expr_in_auto_increment is set (has been assigned a value) and false otherwise */
  public boolean isSetNull_expr_in_auto_increment() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NULL_EXPR_IN_AUTO_INCREMENT_ISSET_ID);
  }

  public void setNull_expr_in_auto_incrementIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NULL_EXPR_IN_AUTO_INCREMENT_ISSET_ID, value);
  }

  public boolean isMiss_auto_increment_column() {
    return this.miss_auto_increment_column;
  }

  public TOlapTableSink setMiss_auto_increment_column(boolean miss_auto_increment_column) {
    this.miss_auto_increment_column = miss_auto_increment_column;
    setMiss_auto_increment_columnIsSet(true);
    return this;
  }

  public void unsetMiss_auto_increment_column() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MISS_AUTO_INCREMENT_COLUMN_ISSET_ID);
  }

  /** Returns true if field miss_auto_increment_column is set (has been assigned a value) and false otherwise */
  public boolean isSetMiss_auto_increment_column() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MISS_AUTO_INCREMENT_COLUMN_ISSET_ID);
  }

  public void setMiss_auto_increment_columnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MISS_AUTO_INCREMENT_COLUMN_ISSET_ID, value);
  }

  public boolean isAbort_delete() {
    return this.abort_delete;
  }

  public TOlapTableSink setAbort_delete(boolean abort_delete) {
    this.abort_delete = abort_delete;
    setAbort_deleteIsSet(true);
    return this;
  }

  public void unsetAbort_delete() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ABORT_DELETE_ISSET_ID);
  }

  /** Returns true if field abort_delete is set (has been assigned a value) and false otherwise */
  public boolean isSetAbort_delete() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ABORT_DELETE_ISSET_ID);
  }

  public void setAbort_deleteIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ABORT_DELETE_ISSET_ID, value);
  }

  public int getAuto_increment_slot_id() {
    return this.auto_increment_slot_id;
  }

  public TOlapTableSink setAuto_increment_slot_id(int auto_increment_slot_id) {
    this.auto_increment_slot_id = auto_increment_slot_id;
    setAuto_increment_slot_idIsSet(true);
    return this;
  }

  public void unsetAuto_increment_slot_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTO_INCREMENT_SLOT_ID_ISSET_ID);
  }

  /** Returns true if field auto_increment_slot_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAuto_increment_slot_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTO_INCREMENT_SLOT_ID_ISSET_ID);
  }

  public void setAuto_increment_slot_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTO_INCREMENT_SLOT_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see TPartialUpdateMode
   */
  @org.apache.thrift.annotation.Nullable
  public TPartialUpdateMode getPartial_update_mode() {
    return this.partial_update_mode;
  }

  /**
   * 
   * @see TPartialUpdateMode
   */
  public TOlapTableSink setPartial_update_mode(@org.apache.thrift.annotation.Nullable TPartialUpdateMode partial_update_mode) {
    this.partial_update_mode = partial_update_mode;
    return this;
  }

  public void unsetPartial_update_mode() {
    this.partial_update_mode = null;
  }

  /** Returns true if field partial_update_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetPartial_update_mode() {
    return this.partial_update_mode != null;
  }

  public void setPartial_update_modeIsSet(boolean value) {
    if (!value) {
      this.partial_update_mode = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getLabel() {
    return this.label;
  }

  public TOlapTableSink setLabel(@org.apache.thrift.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public boolean isEnable_colocate_mv_index() {
    return this.enable_colocate_mv_index;
  }

  public TOlapTableSink setEnable_colocate_mv_index(boolean enable_colocate_mv_index) {
    this.enable_colocate_mv_index = enable_colocate_mv_index;
    setEnable_colocate_mv_indexIsSet(true);
    return this;
  }

  public void unsetEnable_colocate_mv_index() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_COLOCATE_MV_INDEX_ISSET_ID);
  }

  /** Returns true if field enable_colocate_mv_index is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_colocate_mv_index() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_COLOCATE_MV_INDEX_ISSET_ID);
  }

  public void setEnable_colocate_mv_indexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_COLOCATE_MV_INDEX_ISSET_ID, value);
  }

  public long getAutomatic_bucket_size() {
    return this.automatic_bucket_size;
  }

  public TOlapTableSink setAutomatic_bucket_size(long automatic_bucket_size) {
    this.automatic_bucket_size = automatic_bucket_size;
    setAutomatic_bucket_sizeIsSet(true);
    return this;
  }

  public void unsetAutomatic_bucket_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTOMATIC_BUCKET_SIZE_ISSET_ID);
  }

  /** Returns true if field automatic_bucket_size is set (has been assigned a value) and false otherwise */
  public boolean isSetAutomatic_bucket_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTOMATIC_BUCKET_SIZE_ISSET_ID);
  }

  public void setAutomatic_bucket_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTOMATIC_BUCKET_SIZE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case LOAD_ID:
      if (value == null) {
        unsetLoad_id();
      } else {
        setLoad_id((TUniqueId)value);
      }
      break;

    case TXN_ID:
      if (value == null) {
        unsetTxn_id();
      } else {
        setTxn_id((Long)value);
      }
      break;

    case DB_ID:
      if (value == null) {
        unsetDb_id();
      } else {
        setDb_id((Long)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((Long)value);
      }
      break;

    case TUPLE_ID:
      if (value == null) {
        unsetTuple_id();
      } else {
        setTuple_id((Integer)value);
      }
      break;

    case NUM_REPLICAS:
      if (value == null) {
        unsetNum_replicas();
      } else {
        setNum_replicas((Integer)value);
      }
      break;

    case NEED_GEN_ROLLUP:
      if (value == null) {
        unsetNeed_gen_rollup();
      } else {
        setNeed_gen_rollup((Boolean)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((String)value);
      }
      break;

    case SCHEMA:
      if (value == null) {
        unsetSchema();
      } else {
        setSchema((TOlapTableSchemaParam)value);
      }
      break;

    case PARTITION:
      if (value == null) {
        unsetPartition();
      } else {
        setPartition((TOlapTablePartitionParam)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((TOlapTableLocationParam)value);
      }
      break;

    case NODES_INFO:
      if (value == null) {
        unsetNodes_info();
      } else {
        setNodes_info((TNodesInfo)value);
      }
      break;

    case LOAD_CHANNEL_TIMEOUT_S:
      if (value == null) {
        unsetLoad_channel_timeout_s();
      } else {
        setLoad_channel_timeout_s((Long)value);
      }
      break;

    case IS_LAKE_TABLE:
      if (value == null) {
        unsetIs_lake_table();
      } else {
        setIs_lake_table((Boolean)value);
      }
      break;

    case TXN_TRACE_PARENT:
      if (value == null) {
        unsetTxn_trace_parent();
      } else {
        setTxn_trace_parent((String)value);
      }
      break;

    case KEYS_TYPE:
      if (value == null) {
        unsetKeys_type();
      } else {
        setKeys_type((TKeysType)value);
      }
      break;

    case WRITE_QUORUM_TYPE:
      if (value == null) {
        unsetWrite_quorum_type();
      } else {
        setWrite_quorum_type((TWriteQuorumType)value);
      }
      break;

    case ENABLE_REPLICATED_STORAGE:
      if (value == null) {
        unsetEnable_replicated_storage();
      } else {
        setEnable_replicated_storage((Boolean)value);
      }
      break;

    case MERGE_CONDITION:
      if (value == null) {
        unsetMerge_condition();
      } else {
        setMerge_condition((String)value);
      }
      break;

    case NULL_EXPR_IN_AUTO_INCREMENT:
      if (value == null) {
        unsetNull_expr_in_auto_increment();
      } else {
        setNull_expr_in_auto_increment((Boolean)value);
      }
      break;

    case MISS_AUTO_INCREMENT_COLUMN:
      if (value == null) {
        unsetMiss_auto_increment_column();
      } else {
        setMiss_auto_increment_column((Boolean)value);
      }
      break;

    case ABORT_DELETE:
      if (value == null) {
        unsetAbort_delete();
      } else {
        setAbort_delete((Boolean)value);
      }
      break;

    case AUTO_INCREMENT_SLOT_ID:
      if (value == null) {
        unsetAuto_increment_slot_id();
      } else {
        setAuto_increment_slot_id((Integer)value);
      }
      break;

    case PARTIAL_UPDATE_MODE:
      if (value == null) {
        unsetPartial_update_mode();
      } else {
        setPartial_update_mode((TPartialUpdateMode)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((String)value);
      }
      break;

    case ENABLE_COLOCATE_MV_INDEX:
      if (value == null) {
        unsetEnable_colocate_mv_index();
      } else {
        setEnable_colocate_mv_index((Boolean)value);
      }
      break;

    case AUTOMATIC_BUCKET_SIZE:
      if (value == null) {
        unsetAutomatic_bucket_size();
      } else {
        setAutomatic_bucket_size((Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOAD_ID:
      return getLoad_id();

    case TXN_ID:
      return getTxn_id();

    case DB_ID:
      return getDb_id();

    case TABLE_ID:
      return getTable_id();

    case TUPLE_ID:
      return getTuple_id();

    case NUM_REPLICAS:
      return getNum_replicas();

    case NEED_GEN_ROLLUP:
      return isNeed_gen_rollup();

    case DB_NAME:
      return getDb_name();

    case TABLE_NAME:
      return getTable_name();

    case SCHEMA:
      return getSchema();

    case PARTITION:
      return getPartition();

    case LOCATION:
      return getLocation();

    case NODES_INFO:
      return getNodes_info();

    case LOAD_CHANNEL_TIMEOUT_S:
      return getLoad_channel_timeout_s();

    case IS_LAKE_TABLE:
      return isIs_lake_table();

    case TXN_TRACE_PARENT:
      return getTxn_trace_parent();

    case KEYS_TYPE:
      return getKeys_type();

    case WRITE_QUORUM_TYPE:
      return getWrite_quorum_type();

    case ENABLE_REPLICATED_STORAGE:
      return isEnable_replicated_storage();

    case MERGE_CONDITION:
      return getMerge_condition();

    case NULL_EXPR_IN_AUTO_INCREMENT:
      return isNull_expr_in_auto_increment();

    case MISS_AUTO_INCREMENT_COLUMN:
      return isMiss_auto_increment_column();

    case ABORT_DELETE:
      return isAbort_delete();

    case AUTO_INCREMENT_SLOT_ID:
      return getAuto_increment_slot_id();

    case PARTIAL_UPDATE_MODE:
      return getPartial_update_mode();

    case LABEL:
      return getLabel();

    case ENABLE_COLOCATE_MV_INDEX:
      return isEnable_colocate_mv_index();

    case AUTOMATIC_BUCKET_SIZE:
      return getAutomatic_bucket_size();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOAD_ID:
      return isSetLoad_id();
    case TXN_ID:
      return isSetTxn_id();
    case DB_ID:
      return isSetDb_id();
    case TABLE_ID:
      return isSetTable_id();
    case TUPLE_ID:
      return isSetTuple_id();
    case NUM_REPLICAS:
      return isSetNum_replicas();
    case NEED_GEN_ROLLUP:
      return isSetNeed_gen_rollup();
    case DB_NAME:
      return isSetDb_name();
    case TABLE_NAME:
      return isSetTable_name();
    case SCHEMA:
      return isSetSchema();
    case PARTITION:
      return isSetPartition();
    case LOCATION:
      return isSetLocation();
    case NODES_INFO:
      return isSetNodes_info();
    case LOAD_CHANNEL_TIMEOUT_S:
      return isSetLoad_channel_timeout_s();
    case IS_LAKE_TABLE:
      return isSetIs_lake_table();
    case TXN_TRACE_PARENT:
      return isSetTxn_trace_parent();
    case KEYS_TYPE:
      return isSetKeys_type();
    case WRITE_QUORUM_TYPE:
      return isSetWrite_quorum_type();
    case ENABLE_REPLICATED_STORAGE:
      return isSetEnable_replicated_storage();
    case MERGE_CONDITION:
      return isSetMerge_condition();
    case NULL_EXPR_IN_AUTO_INCREMENT:
      return isSetNull_expr_in_auto_increment();
    case MISS_AUTO_INCREMENT_COLUMN:
      return isSetMiss_auto_increment_column();
    case ABORT_DELETE:
      return isSetAbort_delete();
    case AUTO_INCREMENT_SLOT_ID:
      return isSetAuto_increment_slot_id();
    case PARTIAL_UPDATE_MODE:
      return isSetPartial_update_mode();
    case LABEL:
      return isSetLabel();
    case ENABLE_COLOCATE_MV_INDEX:
      return isSetEnable_colocate_mv_index();
    case AUTOMATIC_BUCKET_SIZE:
      return isSetAutomatic_bucket_size();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof TOlapTableSink)
      return this.equals((TOlapTableSink)that);
    return false;
  }

  public boolean equals(TOlapTableSink that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_load_id = true && this.isSetLoad_id();
    boolean that_present_load_id = true && that.isSetLoad_id();
    if (this_present_load_id || that_present_load_id) {
      if (!(this_present_load_id && that_present_load_id))
        return false;
      if (!this.load_id.equals(that.load_id))
        return false;
    }

    boolean this_present_txn_id = true;
    boolean that_present_txn_id = true;
    if (this_present_txn_id || that_present_txn_id) {
      if (!(this_present_txn_id && that_present_txn_id))
        return false;
      if (this.txn_id != that.txn_id)
        return false;
    }

    boolean this_present_db_id = true;
    boolean that_present_db_id = true;
    if (this_present_db_id || that_present_db_id) {
      if (!(this_present_db_id && that_present_db_id))
        return false;
      if (this.db_id != that.db_id)
        return false;
    }

    boolean this_present_table_id = true;
    boolean that_present_table_id = true;
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    boolean this_present_tuple_id = true;
    boolean that_present_tuple_id = true;
    if (this_present_tuple_id || that_present_tuple_id) {
      if (!(this_present_tuple_id && that_present_tuple_id))
        return false;
      if (this.tuple_id != that.tuple_id)
        return false;
    }

    boolean this_present_num_replicas = true;
    boolean that_present_num_replicas = true;
    if (this_present_num_replicas || that_present_num_replicas) {
      if (!(this_present_num_replicas && that_present_num_replicas))
        return false;
      if (this.num_replicas != that.num_replicas)
        return false;
    }

    boolean this_present_need_gen_rollup = true;
    boolean that_present_need_gen_rollup = true;
    if (this_present_need_gen_rollup || that_present_need_gen_rollup) {
      if (!(this_present_need_gen_rollup && that_present_need_gen_rollup))
        return false;
      if (this.need_gen_rollup != that.need_gen_rollup)
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_schema = true && this.isSetSchema();
    boolean that_present_schema = true && that.isSetSchema();
    if (this_present_schema || that_present_schema) {
      if (!(this_present_schema && that_present_schema))
        return false;
      if (!this.schema.equals(that.schema))
        return false;
    }

    boolean this_present_partition = true && this.isSetPartition();
    boolean that_present_partition = true && that.isSetPartition();
    if (this_present_partition || that_present_partition) {
      if (!(this_present_partition && that_present_partition))
        return false;
      if (!this.partition.equals(that.partition))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_nodes_info = true && this.isSetNodes_info();
    boolean that_present_nodes_info = true && that.isSetNodes_info();
    if (this_present_nodes_info || that_present_nodes_info) {
      if (!(this_present_nodes_info && that_present_nodes_info))
        return false;
      if (!this.nodes_info.equals(that.nodes_info))
        return false;
    }

    boolean this_present_load_channel_timeout_s = true && this.isSetLoad_channel_timeout_s();
    boolean that_present_load_channel_timeout_s = true && that.isSetLoad_channel_timeout_s();
    if (this_present_load_channel_timeout_s || that_present_load_channel_timeout_s) {
      if (!(this_present_load_channel_timeout_s && that_present_load_channel_timeout_s))
        return false;
      if (this.load_channel_timeout_s != that.load_channel_timeout_s)
        return false;
    }

    boolean this_present_is_lake_table = true && this.isSetIs_lake_table();
    boolean that_present_is_lake_table = true && that.isSetIs_lake_table();
    if (this_present_is_lake_table || that_present_is_lake_table) {
      if (!(this_present_is_lake_table && that_present_is_lake_table))
        return false;
      if (this.is_lake_table != that.is_lake_table)
        return false;
    }

    boolean this_present_txn_trace_parent = true && this.isSetTxn_trace_parent();
    boolean that_present_txn_trace_parent = true && that.isSetTxn_trace_parent();
    if (this_present_txn_trace_parent || that_present_txn_trace_parent) {
      if (!(this_present_txn_trace_parent && that_present_txn_trace_parent))
        return false;
      if (!this.txn_trace_parent.equals(that.txn_trace_parent))
        return false;
    }

    boolean this_present_keys_type = true && this.isSetKeys_type();
    boolean that_present_keys_type = true && that.isSetKeys_type();
    if (this_present_keys_type || that_present_keys_type) {
      if (!(this_present_keys_type && that_present_keys_type))
        return false;
      if (!this.keys_type.equals(that.keys_type))
        return false;
    }

    boolean this_present_write_quorum_type = true && this.isSetWrite_quorum_type();
    boolean that_present_write_quorum_type = true && that.isSetWrite_quorum_type();
    if (this_present_write_quorum_type || that_present_write_quorum_type) {
      if (!(this_present_write_quorum_type && that_present_write_quorum_type))
        return false;
      if (!this.write_quorum_type.equals(that.write_quorum_type))
        return false;
    }

    boolean this_present_enable_replicated_storage = true && this.isSetEnable_replicated_storage();
    boolean that_present_enable_replicated_storage = true && that.isSetEnable_replicated_storage();
    if (this_present_enable_replicated_storage || that_present_enable_replicated_storage) {
      if (!(this_present_enable_replicated_storage && that_present_enable_replicated_storage))
        return false;
      if (this.enable_replicated_storage != that.enable_replicated_storage)
        return false;
    }

    boolean this_present_merge_condition = true && this.isSetMerge_condition();
    boolean that_present_merge_condition = true && that.isSetMerge_condition();
    if (this_present_merge_condition || that_present_merge_condition) {
      if (!(this_present_merge_condition && that_present_merge_condition))
        return false;
      if (!this.merge_condition.equals(that.merge_condition))
        return false;
    }

    boolean this_present_null_expr_in_auto_increment = true && this.isSetNull_expr_in_auto_increment();
    boolean that_present_null_expr_in_auto_increment = true && that.isSetNull_expr_in_auto_increment();
    if (this_present_null_expr_in_auto_increment || that_present_null_expr_in_auto_increment) {
      if (!(this_present_null_expr_in_auto_increment && that_present_null_expr_in_auto_increment))
        return false;
      if (this.null_expr_in_auto_increment != that.null_expr_in_auto_increment)
        return false;
    }

    boolean this_present_miss_auto_increment_column = true && this.isSetMiss_auto_increment_column();
    boolean that_present_miss_auto_increment_column = true && that.isSetMiss_auto_increment_column();
    if (this_present_miss_auto_increment_column || that_present_miss_auto_increment_column) {
      if (!(this_present_miss_auto_increment_column && that_present_miss_auto_increment_column))
        return false;
      if (this.miss_auto_increment_column != that.miss_auto_increment_column)
        return false;
    }

    boolean this_present_abort_delete = true && this.isSetAbort_delete();
    boolean that_present_abort_delete = true && that.isSetAbort_delete();
    if (this_present_abort_delete || that_present_abort_delete) {
      if (!(this_present_abort_delete && that_present_abort_delete))
        return false;
      if (this.abort_delete != that.abort_delete)
        return false;
    }

    boolean this_present_auto_increment_slot_id = true && this.isSetAuto_increment_slot_id();
    boolean that_present_auto_increment_slot_id = true && that.isSetAuto_increment_slot_id();
    if (this_present_auto_increment_slot_id || that_present_auto_increment_slot_id) {
      if (!(this_present_auto_increment_slot_id && that_present_auto_increment_slot_id))
        return false;
      if (this.auto_increment_slot_id != that.auto_increment_slot_id)
        return false;
    }

    boolean this_present_partial_update_mode = true && this.isSetPartial_update_mode();
    boolean that_present_partial_update_mode = true && that.isSetPartial_update_mode();
    if (this_present_partial_update_mode || that_present_partial_update_mode) {
      if (!(this_present_partial_update_mode && that_present_partial_update_mode))
        return false;
      if (!this.partial_update_mode.equals(that.partial_update_mode))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_enable_colocate_mv_index = true && this.isSetEnable_colocate_mv_index();
    boolean that_present_enable_colocate_mv_index = true && that.isSetEnable_colocate_mv_index();
    if (this_present_enable_colocate_mv_index || that_present_enable_colocate_mv_index) {
      if (!(this_present_enable_colocate_mv_index && that_present_enable_colocate_mv_index))
        return false;
      if (this.enable_colocate_mv_index != that.enable_colocate_mv_index)
        return false;
    }

    boolean this_present_automatic_bucket_size = true && this.isSetAutomatic_bucket_size();
    boolean that_present_automatic_bucket_size = true && that.isSetAutomatic_bucket_size();
    if (this_present_automatic_bucket_size || that_present_automatic_bucket_size) {
      if (!(this_present_automatic_bucket_size && that_present_automatic_bucket_size))
        return false;
      if (this.automatic_bucket_size != that.automatic_bucket_size)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLoad_id()) ? 131071 : 524287);
    if (isSetLoad_id())
      hashCode = hashCode * 8191 + load_id.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txn_id);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(db_id);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_id);

    hashCode = hashCode * 8191 + tuple_id;

    hashCode = hashCode * 8191 + num_replicas;

    hashCode = hashCode * 8191 + ((need_gen_rollup) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDb_name()) ? 131071 : 524287);
    if (isSetDb_name())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchema()) ? 131071 : 524287);
    if (isSetSchema())
      hashCode = hashCode * 8191 + schema.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition()) ? 131071 : 524287);
    if (isSetPartition())
      hashCode = hashCode * 8191 + partition.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
    if (isSetLocation())
      hashCode = hashCode * 8191 + location.hashCode();

    hashCode = hashCode * 8191 + ((isSetNodes_info()) ? 131071 : 524287);
    if (isSetNodes_info())
      hashCode = hashCode * 8191 + nodes_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoad_channel_timeout_s()) ? 131071 : 524287);
    if (isSetLoad_channel_timeout_s())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(load_channel_timeout_s);

    hashCode = hashCode * 8191 + ((isSetIs_lake_table()) ? 131071 : 524287);
    if (isSetIs_lake_table())
      hashCode = hashCode * 8191 + ((is_lake_table) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTxn_trace_parent()) ? 131071 : 524287);
    if (isSetTxn_trace_parent())
      hashCode = hashCode * 8191 + txn_trace_parent.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeys_type()) ? 131071 : 524287);
    if (isSetKeys_type())
      hashCode = hashCode * 8191 + keys_type.getValue();

    hashCode = hashCode * 8191 + ((isSetWrite_quorum_type()) ? 131071 : 524287);
    if (isSetWrite_quorum_type())
      hashCode = hashCode * 8191 + write_quorum_type.getValue();

    hashCode = hashCode * 8191 + ((isSetEnable_replicated_storage()) ? 131071 : 524287);
    if (isSetEnable_replicated_storage())
      hashCode = hashCode * 8191 + ((enable_replicated_storage) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMerge_condition()) ? 131071 : 524287);
    if (isSetMerge_condition())
      hashCode = hashCode * 8191 + merge_condition.hashCode();

    hashCode = hashCode * 8191 + ((isSetNull_expr_in_auto_increment()) ? 131071 : 524287);
    if (isSetNull_expr_in_auto_increment())
      hashCode = hashCode * 8191 + ((null_expr_in_auto_increment) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMiss_auto_increment_column()) ? 131071 : 524287);
    if (isSetMiss_auto_increment_column())
      hashCode = hashCode * 8191 + ((miss_auto_increment_column) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAbort_delete()) ? 131071 : 524287);
    if (isSetAbort_delete())
      hashCode = hashCode * 8191 + ((abort_delete) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAuto_increment_slot_id()) ? 131071 : 524287);
    if (isSetAuto_increment_slot_id())
      hashCode = hashCode * 8191 + auto_increment_slot_id;

    hashCode = hashCode * 8191 + ((isSetPartial_update_mode()) ? 131071 : 524287);
    if (isSetPartial_update_mode())
      hashCode = hashCode * 8191 + partial_update_mode.getValue();

    hashCode = hashCode * 8191 + ((isSetLabel()) ? 131071 : 524287);
    if (isSetLabel())
      hashCode = hashCode * 8191 + label.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnable_colocate_mv_index()) ? 131071 : 524287);
    if (isSetEnable_colocate_mv_index())
      hashCode = hashCode * 8191 + ((enable_colocate_mv_index) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAutomatic_bucket_size()) ? 131071 : 524287);
    if (isSetAutomatic_bucket_size())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(automatic_bucket_size);

    return hashCode;
  }

  @Override
  public int compareTo(TOlapTableSink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetLoad_id(), other.isSetLoad_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_id, other.load_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTxn_id(), other.isSetTxn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_id, other.txn_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDb_id(), other.isSetDb_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_id, other.db_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTable_id(), other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTuple_id(), other.isSetTuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_id, other.tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetNum_replicas(), other.isSetNum_replicas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_replicas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_replicas, other.num_replicas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetNeed_gen_rollup(), other.isSetNeed_gen_rollup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeed_gen_rollup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.need_gen_rollup, other.need_gen_rollup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDb_name(), other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTable_name(), other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetSchema(), other.isSetSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, other.schema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetPartition(), other.isSetPartition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition, other.partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetLocation(), other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetNodes_info(), other.isSetNodes_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodes_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodes_info, other.nodes_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetLoad_channel_timeout_s(), other.isSetLoad_channel_timeout_s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_channel_timeout_s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_channel_timeout_s, other.load_channel_timeout_s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetIs_lake_table(), other.isSetIs_lake_table());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_lake_table()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_lake_table, other.is_lake_table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTxn_trace_parent(), other.isSetTxn_trace_parent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_trace_parent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_trace_parent, other.txn_trace_parent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetKeys_type(), other.isSetKeys_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeys_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys_type, other.keys_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetWrite_quorum_type(), other.isSetWrite_quorum_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrite_quorum_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.write_quorum_type, other.write_quorum_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetEnable_replicated_storage(), other.isSetEnable_replicated_storage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_replicated_storage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_replicated_storage, other.enable_replicated_storage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetMerge_condition(), other.isSetMerge_condition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerge_condition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merge_condition, other.merge_condition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetNull_expr_in_auto_increment(), other.isSetNull_expr_in_auto_increment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNull_expr_in_auto_increment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.null_expr_in_auto_increment, other.null_expr_in_auto_increment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetMiss_auto_increment_column(), other.isSetMiss_auto_increment_column());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMiss_auto_increment_column()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.miss_auto_increment_column, other.miss_auto_increment_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetAbort_delete(), other.isSetAbort_delete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbort_delete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abort_delete, other.abort_delete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetAuto_increment_slot_id(), other.isSetAuto_increment_slot_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuto_increment_slot_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auto_increment_slot_id, other.auto_increment_slot_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetPartial_update_mode(), other.isSetPartial_update_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartial_update_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partial_update_mode, other.partial_update_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetLabel(), other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetEnable_colocate_mv_index(), other.isSetEnable_colocate_mv_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_colocate_mv_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_colocate_mv_index, other.enable_colocate_mv_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetAutomatic_bucket_size(), other.isSetAutomatic_bucket_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutomatic_bucket_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.automatic_bucket_size, other.automatic_bucket_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TOlapTableSink(");
    boolean first = true;

    sb.append("load_id:");
    if (this.load_id == null) {
      sb.append("null");
    } else {
      sb.append(this.load_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("txn_id:");
    sb.append(this.txn_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("db_id:");
    sb.append(this.db_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("table_id:");
    sb.append(this.table_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tuple_id:");
    sb.append(this.tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_replicas:");
    sb.append(this.num_replicas);
    first = false;
    if (!first) sb.append(", ");
    sb.append("need_gen_rollup:");
    sb.append(this.need_gen_rollup);
    first = false;
    if (isSetDb_name()) {
      if (!first) sb.append(", ");
      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("schema:");
    if (this.schema == null) {
      sb.append("null");
    } else {
      sb.append(this.schema);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partition:");
    if (this.partition == null) {
      sb.append("null");
    } else {
      sb.append(this.partition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodes_info:");
    if (this.nodes_info == null) {
      sb.append("null");
    } else {
      sb.append(this.nodes_info);
    }
    first = false;
    if (isSetLoad_channel_timeout_s()) {
      if (!first) sb.append(", ");
      sb.append("load_channel_timeout_s:");
      sb.append(this.load_channel_timeout_s);
      first = false;
    }
    if (isSetIs_lake_table()) {
      if (!first) sb.append(", ");
      sb.append("is_lake_table:");
      sb.append(this.is_lake_table);
      first = false;
    }
    if (isSetTxn_trace_parent()) {
      if (!first) sb.append(", ");
      sb.append("txn_trace_parent:");
      if (this.txn_trace_parent == null) {
        sb.append("null");
      } else {
        sb.append(this.txn_trace_parent);
      }
      first = false;
    }
    if (isSetKeys_type()) {
      if (!first) sb.append(", ");
      sb.append("keys_type:");
      if (this.keys_type == null) {
        sb.append("null");
      } else {
        sb.append(this.keys_type);
      }
      first = false;
    }
    if (isSetWrite_quorum_type()) {
      if (!first) sb.append(", ");
      sb.append("write_quorum_type:");
      if (this.write_quorum_type == null) {
        sb.append("null");
      } else {
        sb.append(this.write_quorum_type);
      }
      first = false;
    }
    if (isSetEnable_replicated_storage()) {
      if (!first) sb.append(", ");
      sb.append("enable_replicated_storage:");
      sb.append(this.enable_replicated_storage);
      first = false;
    }
    if (isSetMerge_condition()) {
      if (!first) sb.append(", ");
      sb.append("merge_condition:");
      if (this.merge_condition == null) {
        sb.append("null");
      } else {
        sb.append(this.merge_condition);
      }
      first = false;
    }
    if (isSetNull_expr_in_auto_increment()) {
      if (!first) sb.append(", ");
      sb.append("null_expr_in_auto_increment:");
      sb.append(this.null_expr_in_auto_increment);
      first = false;
    }
    if (isSetMiss_auto_increment_column()) {
      if (!first) sb.append(", ");
      sb.append("miss_auto_increment_column:");
      sb.append(this.miss_auto_increment_column);
      first = false;
    }
    if (isSetAbort_delete()) {
      if (!first) sb.append(", ");
      sb.append("abort_delete:");
      sb.append(this.abort_delete);
      first = false;
    }
    if (isSetAuto_increment_slot_id()) {
      if (!first) sb.append(", ");
      sb.append("auto_increment_slot_id:");
      sb.append(this.auto_increment_slot_id);
      first = false;
    }
    if (isSetPartial_update_mode()) {
      if (!first) sb.append(", ");
      sb.append("partial_update_mode:");
      if (this.partial_update_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.partial_update_mode);
      }
      first = false;
    }
    if (isSetLabel()) {
      if (!first) sb.append(", ");
      sb.append("label:");
      if (this.label == null) {
        sb.append("null");
      } else {
        sb.append(this.label);
      }
      first = false;
    }
    if (isSetEnable_colocate_mv_index()) {
      if (!first) sb.append(", ");
      sb.append("enable_colocate_mv_index:");
      sb.append(this.enable_colocate_mv_index);
      first = false;
    }
    if (isSetAutomatic_bucket_size()) {
      if (!first) sb.append(", ");
      sb.append("automatic_bucket_size:");
      sb.append(this.automatic_bucket_size);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (load_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'load_id' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'txn_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'db_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'table_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'tuple_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num_replicas' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'need_gen_rollup' because it's a primitive and you chose the non-beans generator.
    if (schema == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'schema' was not present! Struct: " + toString());
    }
    if (partition == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition' was not present! Struct: " + toString());
    }
    if (location == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'location' was not present! Struct: " + toString());
    }
    if (nodes_info == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodes_info' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (load_id != null) {
      load_id.validate();
    }
    if (schema != null) {
      schema.validate();
    }
    if (partition != null) {
      partition.validate();
    }
    if (location != null) {
      location.validate();
    }
    if (nodes_info != null) {
      nodes_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOlapTableSinkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapTableSinkStandardScheme getScheme() {
      return new TOlapTableSinkStandardScheme();
    }
  }

  private static class TOlapTableSinkStandardScheme extends org.apache.thrift.scheme.StandardScheme<TOlapTableSink> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TOlapTableSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.load_id = new TUniqueId();
              struct.load_id.read(iprot);
              struct.setLoad_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txn_id = iprot.readI64();
              struct.setTxn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.db_id = iprot.readI64();
              struct.setDb_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_id = iprot.readI64();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tuple_id = iprot.readI32();
              struct.setTuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM_REPLICAS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_replicas = iprot.readI32();
              struct.setNum_replicasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NEED_GEN_ROLLUP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.need_gen_rollup = iprot.readBool();
              struct.setNeed_gen_rollupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schema = new TOlapTableSchemaParam();
              struct.schema.read(iprot);
              struct.setSchemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.partition = new TOlapTablePartitionParam();
              struct.partition.read(iprot);
              struct.setPartitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.location = new TOlapTableLocationParam();
              struct.location.read(iprot);
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NODES_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodes_info = new TNodesInfo();
              struct.nodes_info.read(iprot);
              struct.setNodes_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LOAD_CHANNEL_TIMEOUT_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.load_channel_timeout_s = iprot.readI64();
              struct.setLoad_channel_timeout_sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IS_LAKE_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_lake_table = iprot.readBool();
              struct.setIs_lake_tableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TXN_TRACE_PARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.txn_trace_parent = iprot.readString();
              struct.setTxn_trace_parentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // KEYS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.keys_type = TKeysType.findByValue(iprot.readI32());
              struct.setKeys_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // WRITE_QUORUM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.write_quorum_type = TWriteQuorumType.findByValue(iprot.readI32());
              struct.setWrite_quorum_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ENABLE_REPLICATED_STORAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_replicated_storage = iprot.readBool();
              struct.setEnable_replicated_storageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MERGE_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merge_condition = iprot.readString();
              struct.setMerge_conditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // NULL_EXPR_IN_AUTO_INCREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.null_expr_in_auto_increment = iprot.readBool();
              struct.setNull_expr_in_auto_incrementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MISS_AUTO_INCREMENT_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.miss_auto_increment_column = iprot.readBool();
              struct.setMiss_auto_increment_columnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // ABORT_DELETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.abort_delete = iprot.readBool();
              struct.setAbort_deleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // AUTO_INCREMENT_SLOT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.auto_increment_slot_id = iprot.readI32();
              struct.setAuto_increment_slot_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PARTIAL_UPDATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partial_update_mode = TPartialUpdateMode.findByValue(iprot.readI32());
              struct.setPartial_update_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // ENABLE_COLOCATE_MV_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_colocate_mv_index = iprot.readBool();
              struct.setEnable_colocate_mv_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // AUTOMATIC_BUCKET_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.automatic_bucket_size = iprot.readI64();
              struct.setAutomatic_bucket_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTxn_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'txn_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDb_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'db_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTable_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tuple_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum_replicas()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_replicas' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNeed_gen_rollup()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'need_gen_rollup' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TOlapTableSink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.load_id != null) {
        oprot.writeFieldBegin(LOAD_ID_FIELD_DESC);
        struct.load_id.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
      oprot.writeI64(struct.txn_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DB_ID_FIELD_DESC);
      oprot.writeI64(struct.db_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
      oprot.writeI64(struct.table_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.tuple_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_REPLICAS_FIELD_DESC);
      oprot.writeI32(struct.num_replicas);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEED_GEN_ROLLUP_FIELD_DESC);
      oprot.writeBool(struct.need_gen_rollup);
      oprot.writeFieldEnd();
      if (struct.db_name != null) {
        if (struct.isSetDb_name()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.db_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.schema != null) {
        oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
        struct.schema.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.partition != null) {
        oprot.writeFieldBegin(PARTITION_FIELD_DESC);
        struct.partition.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        struct.location.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.nodes_info != null) {
        oprot.writeFieldBegin(NODES_INFO_FIELD_DESC);
        struct.nodes_info.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLoad_channel_timeout_s()) {
        oprot.writeFieldBegin(LOAD_CHANNEL_TIMEOUT_S_FIELD_DESC);
        oprot.writeI64(struct.load_channel_timeout_s);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_lake_table()) {
        oprot.writeFieldBegin(IS_LAKE_TABLE_FIELD_DESC);
        oprot.writeBool(struct.is_lake_table);
        oprot.writeFieldEnd();
      }
      if (struct.txn_trace_parent != null) {
        if (struct.isSetTxn_trace_parent()) {
          oprot.writeFieldBegin(TXN_TRACE_PARENT_FIELD_DESC);
          oprot.writeString(struct.txn_trace_parent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.keys_type != null) {
        if (struct.isSetKeys_type()) {
          oprot.writeFieldBegin(KEYS_TYPE_FIELD_DESC);
          oprot.writeI32(struct.keys_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.write_quorum_type != null) {
        if (struct.isSetWrite_quorum_type()) {
          oprot.writeFieldBegin(WRITE_QUORUM_TYPE_FIELD_DESC);
          oprot.writeI32(struct.write_quorum_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_replicated_storage()) {
        oprot.writeFieldBegin(ENABLE_REPLICATED_STORAGE_FIELD_DESC);
        oprot.writeBool(struct.enable_replicated_storage);
        oprot.writeFieldEnd();
      }
      if (struct.merge_condition != null) {
        if (struct.isSetMerge_condition()) {
          oprot.writeFieldBegin(MERGE_CONDITION_FIELD_DESC);
          oprot.writeString(struct.merge_condition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNull_expr_in_auto_increment()) {
        oprot.writeFieldBegin(NULL_EXPR_IN_AUTO_INCREMENT_FIELD_DESC);
        oprot.writeBool(struct.null_expr_in_auto_increment);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMiss_auto_increment_column()) {
        oprot.writeFieldBegin(MISS_AUTO_INCREMENT_COLUMN_FIELD_DESC);
        oprot.writeBool(struct.miss_auto_increment_column);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAbort_delete()) {
        oprot.writeFieldBegin(ABORT_DELETE_FIELD_DESC);
        oprot.writeBool(struct.abort_delete);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAuto_increment_slot_id()) {
        oprot.writeFieldBegin(AUTO_INCREMENT_SLOT_ID_FIELD_DESC);
        oprot.writeI32(struct.auto_increment_slot_id);
        oprot.writeFieldEnd();
      }
      if (struct.partial_update_mode != null) {
        if (struct.isSetPartial_update_mode()) {
          oprot.writeFieldBegin(PARTIAL_UPDATE_MODE_FIELD_DESC);
          oprot.writeI32(struct.partial_update_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.label != null) {
        if (struct.isSetLabel()) {
          oprot.writeFieldBegin(LABEL_FIELD_DESC);
          oprot.writeString(struct.label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_colocate_mv_index()) {
        oprot.writeFieldBegin(ENABLE_COLOCATE_MV_INDEX_FIELD_DESC);
        oprot.writeBool(struct.enable_colocate_mv_index);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAutomatic_bucket_size()) {
        oprot.writeFieldBegin(AUTOMATIC_BUCKET_SIZE_FIELD_DESC);
        oprot.writeI64(struct.automatic_bucket_size);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOlapTableSinkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapTableSinkTupleScheme getScheme() {
      return new TOlapTableSinkTupleScheme();
    }
  }

  private static class TOlapTableSinkTupleScheme extends org.apache.thrift.scheme.TupleScheme<TOlapTableSink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOlapTableSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.load_id.write(oprot);
      oprot.writeI64(struct.txn_id);
      oprot.writeI64(struct.db_id);
      oprot.writeI64(struct.table_id);
      oprot.writeI32(struct.tuple_id);
      oprot.writeI32(struct.num_replicas);
      oprot.writeBool(struct.need_gen_rollup);
      struct.schema.write(oprot);
      struct.partition.write(oprot);
      struct.location.write(oprot);
      struct.nodes_info.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDb_name()) {
        optionals.set(0);
      }
      if (struct.isSetTable_name()) {
        optionals.set(1);
      }
      if (struct.isSetLoad_channel_timeout_s()) {
        optionals.set(2);
      }
      if (struct.isSetIs_lake_table()) {
        optionals.set(3);
      }
      if (struct.isSetTxn_trace_parent()) {
        optionals.set(4);
      }
      if (struct.isSetKeys_type()) {
        optionals.set(5);
      }
      if (struct.isSetWrite_quorum_type()) {
        optionals.set(6);
      }
      if (struct.isSetEnable_replicated_storage()) {
        optionals.set(7);
      }
      if (struct.isSetMerge_condition()) {
        optionals.set(8);
      }
      if (struct.isSetNull_expr_in_auto_increment()) {
        optionals.set(9);
      }
      if (struct.isSetMiss_auto_increment_column()) {
        optionals.set(10);
      }
      if (struct.isSetAbort_delete()) {
        optionals.set(11);
      }
      if (struct.isSetAuto_increment_slot_id()) {
        optionals.set(12);
      }
      if (struct.isSetPartial_update_mode()) {
        optionals.set(13);
      }
      if (struct.isSetLabel()) {
        optionals.set(14);
      }
      if (struct.isSetEnable_colocate_mv_index()) {
        optionals.set(15);
      }
      if (struct.isSetAutomatic_bucket_size()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetDb_name()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetLoad_channel_timeout_s()) {
        oprot.writeI64(struct.load_channel_timeout_s);
      }
      if (struct.isSetIs_lake_table()) {
        oprot.writeBool(struct.is_lake_table);
      }
      if (struct.isSetTxn_trace_parent()) {
        oprot.writeString(struct.txn_trace_parent);
      }
      if (struct.isSetKeys_type()) {
        oprot.writeI32(struct.keys_type.getValue());
      }
      if (struct.isSetWrite_quorum_type()) {
        oprot.writeI32(struct.write_quorum_type.getValue());
      }
      if (struct.isSetEnable_replicated_storage()) {
        oprot.writeBool(struct.enable_replicated_storage);
      }
      if (struct.isSetMerge_condition()) {
        oprot.writeString(struct.merge_condition);
      }
      if (struct.isSetNull_expr_in_auto_increment()) {
        oprot.writeBool(struct.null_expr_in_auto_increment);
      }
      if (struct.isSetMiss_auto_increment_column()) {
        oprot.writeBool(struct.miss_auto_increment_column);
      }
      if (struct.isSetAbort_delete()) {
        oprot.writeBool(struct.abort_delete);
      }
      if (struct.isSetAuto_increment_slot_id()) {
        oprot.writeI32(struct.auto_increment_slot_id);
      }
      if (struct.isSetPartial_update_mode()) {
        oprot.writeI32(struct.partial_update_mode.getValue());
      }
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
      if (struct.isSetEnable_colocate_mv_index()) {
        oprot.writeBool(struct.enable_colocate_mv_index);
      }
      if (struct.isSetAutomatic_bucket_size()) {
        oprot.writeI64(struct.automatic_bucket_size);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOlapTableSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.load_id = new TUniqueId();
      struct.load_id.read(iprot);
      struct.setLoad_idIsSet(true);
      struct.txn_id = iprot.readI64();
      struct.setTxn_idIsSet(true);
      struct.db_id = iprot.readI64();
      struct.setDb_idIsSet(true);
      struct.table_id = iprot.readI64();
      struct.setTable_idIsSet(true);
      struct.tuple_id = iprot.readI32();
      struct.setTuple_idIsSet(true);
      struct.num_replicas = iprot.readI32();
      struct.setNum_replicasIsSet(true);
      struct.need_gen_rollup = iprot.readBool();
      struct.setNeed_gen_rollupIsSet(true);
      struct.schema = new TOlapTableSchemaParam();
      struct.schema.read(iprot);
      struct.setSchemaIsSet(true);
      struct.partition = new TOlapTablePartitionParam();
      struct.partition.read(iprot);
      struct.setPartitionIsSet(true);
      struct.location = new TOlapTableLocationParam();
      struct.location.read(iprot);
      struct.setLocationIsSet(true);
      struct.nodes_info = new TNodesInfo();
      struct.nodes_info.read(iprot);
      struct.setNodes_infoIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.db_name = iprot.readString();
        struct.setDb_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.load_channel_timeout_s = iprot.readI64();
        struct.setLoad_channel_timeout_sIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_lake_table = iprot.readBool();
        struct.setIs_lake_tableIsSet(true);
      }
      if (incoming.get(4)) {
        struct.txn_trace_parent = iprot.readString();
        struct.setTxn_trace_parentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.keys_type = TKeysType.findByValue(iprot.readI32());
        struct.setKeys_typeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.write_quorum_type = TWriteQuorumType.findByValue(iprot.readI32());
        struct.setWrite_quorum_typeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.enable_replicated_storage = iprot.readBool();
        struct.setEnable_replicated_storageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.merge_condition = iprot.readString();
        struct.setMerge_conditionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.null_expr_in_auto_increment = iprot.readBool();
        struct.setNull_expr_in_auto_incrementIsSet(true);
      }
      if (incoming.get(10)) {
        struct.miss_auto_increment_column = iprot.readBool();
        struct.setMiss_auto_increment_columnIsSet(true);
      }
      if (incoming.get(11)) {
        struct.abort_delete = iprot.readBool();
        struct.setAbort_deleteIsSet(true);
      }
      if (incoming.get(12)) {
        struct.auto_increment_slot_id = iprot.readI32();
        struct.setAuto_increment_slot_idIsSet(true);
      }
      if (incoming.get(13)) {
        struct.partial_update_mode = TPartialUpdateMode.findByValue(iprot.readI32());
        struct.setPartial_update_modeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(15)) {
        struct.enable_colocate_mv_index = iprot.readBool();
        struct.setEnable_colocate_mv_indexIsSet(true);
      }
      if (incoming.get(16)) {
        struct.automatic_bucket_size = iprot.readI64();
        struct.setAutomatic_bucket_sizeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

