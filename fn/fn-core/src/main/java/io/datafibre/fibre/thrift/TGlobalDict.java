/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TGlobalDict implements org.apache.thrift.TBase<TGlobalDict, TGlobalDict._Fields>, java.io.Serializable, Cloneable, Comparable<TGlobalDict> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGlobalDict");

  private static final org.apache.thrift.protocol.TField COLUMN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("columnId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STRINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("strings", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TGlobalDictStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TGlobalDictTupleSchemeFactory();

  public int columnId; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> strings; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> ids; // optional
  public long version; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_ID((short)1, "columnId"),
    STRINGS((short)2, "strings"),
    IDS((short)3, "ids"),
    VERSION((short)4, "version");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_ID
          return COLUMN_ID;
        case 2: // STRINGS
          return STRINGS;
        case 3: // IDS
          return IDS;
        case 4: // VERSION
          return VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COLUMNID_ISSET_ID = 0;
  private static final int __VERSION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COLUMN_ID,_Fields.STRINGS,_Fields.IDS,_Fields.VERSION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_ID, new org.apache.thrift.meta_data.FieldMetaData("columnId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRINGS, new org.apache.thrift.meta_data.FieldMetaData("strings", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGlobalDict.class, metaDataMap);
  }

  public TGlobalDict() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGlobalDict(TGlobalDict other) {
    __isset_bitfield = other.__isset_bitfield;
    this.columnId = other.columnId;
    if (other.isSetStrings()) {
      java.util.List<java.nio.ByteBuffer> __this__strings = new java.util.ArrayList<java.nio.ByteBuffer>(other.strings);
      this.strings = __this__strings;
    }
    if (other.isSetIds()) {
      java.util.List<java.lang.Integer> __this__ids = new java.util.ArrayList<java.lang.Integer>(other.ids);
      this.ids = __this__ids;
    }
    this.version = other.version;
  }

  @Override
  public TGlobalDict deepCopy() {
    return new TGlobalDict(this);
  }

  @Override
  public void clear() {
    setColumnIdIsSet(false);
    this.columnId = 0;
    this.strings = null;
    this.ids = null;
    setVersionIsSet(false);
    this.version = 0;
  }

  public int getColumnId() {
    return this.columnId;
  }

  public TGlobalDict setColumnId(int columnId) {
    this.columnId = columnId;
    setColumnIdIsSet(true);
    return this;
  }

  public void unsetColumnId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLUMNID_ISSET_ID);
  }

  /** Returns true if field columnId is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLUMNID_ISSET_ID);
  }

  public void setColumnIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLUMNID_ISSET_ID, value);
  }

  public int getStringsSize() {
    return (this.strings == null) ? 0 : this.strings.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getStringsIterator() {
    return (this.strings == null) ? null : this.strings.iterator();
  }

  public void addToStrings(java.nio.ByteBuffer elem) {
    if (this.strings == null) {
      this.strings = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.strings.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getStrings() {
    return this.strings;
  }

  public TGlobalDict setStrings(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> strings) {
    this.strings = strings;
    return this;
  }

  public void unsetStrings() {
    this.strings = null;
  }

  /** Returns true if field strings is set (has been assigned a value) and false otherwise */
  public boolean isSetStrings() {
    return this.strings != null;
  }

  public void setStringsIsSet(boolean value) {
    if (!value) {
      this.strings = null;
    }
  }

  public int getIdsSize() {
    return (this.ids == null) ? 0 : this.ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getIdsIterator() {
    return (this.ids == null) ? null : this.ids.iterator();
  }

  public void addToIds(int elem) {
    if (this.ids == null) {
      this.ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getIds() {
    return this.ids;
  }

  public TGlobalDict setIds(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> ids) {
    this.ids = ids;
    return this;
  }

  public void unsetIds() {
    this.ids = null;
  }

  /** Returns true if field ids is set (has been assigned a value) and false otherwise */
  public boolean isSetIds() {
    return this.ids != null;
  }

  public void setIdsIsSet(boolean value) {
    if (!value) {
      this.ids = null;
    }
  }

  public long getVersion() {
    return this.version;
  }

  public TGlobalDict setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COLUMN_ID:
      if (value == null) {
        unsetColumnId();
      } else {
        setColumnId((java.lang.Integer)value);
      }
      break;

    case STRINGS:
      if (value == null) {
        unsetStrings();
      } else {
        setStrings((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case IDS:
      if (value == null) {
        unsetIds();
      } else {
        setIds((java.util.List<java.lang.Integer>)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_ID:
      return getColumnId();

    case STRINGS:
      return getStrings();

    case IDS:
      return getIds();

    case VERSION:
      return getVersion();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_ID:
      return isSetColumnId();
    case STRINGS:
      return isSetStrings();
    case IDS:
      return isSetIds();
    case VERSION:
      return isSetVersion();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TGlobalDict)
      return this.equals((TGlobalDict)that);
    return false;
  }

  public boolean equals(TGlobalDict that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_columnId = true && this.isSetColumnId();
    boolean that_present_columnId = true && that.isSetColumnId();
    if (this_present_columnId || that_present_columnId) {
      if (!(this_present_columnId && that_present_columnId))
        return false;
      if (this.columnId != that.columnId)
        return false;
    }

    boolean this_present_strings = true && this.isSetStrings();
    boolean that_present_strings = true && that.isSetStrings();
    if (this_present_strings || that_present_strings) {
      if (!(this_present_strings && that_present_strings))
        return false;
      if (!this.strings.equals(that.strings))
        return false;
    }

    boolean this_present_ids = true && this.isSetIds();
    boolean that_present_ids = true && that.isSetIds();
    if (this_present_ids || that_present_ids) {
      if (!(this_present_ids && that_present_ids))
        return false;
      if (!this.ids.equals(that.ids))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetColumnId()) ? 131071 : 524287);
    if (isSetColumnId())
      hashCode = hashCode * 8191 + columnId;

    hashCode = hashCode * 8191 + ((isSetStrings()) ? 131071 : 524287);
    if (isSetStrings())
      hashCode = hashCode * 8191 + strings.hashCode();

    hashCode = hashCode * 8191 + ((isSetIds()) ? 131071 : 524287);
    if (isSetIds())
      hashCode = hashCode * 8191 + ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

    return hashCode;
  }

  @Override
  public int compareTo(TGlobalDict other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetColumnId(), other.isSetColumnId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnId, other.columnId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStrings(), other.isSetStrings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strings, other.strings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIds(), other.isSetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TGlobalDict(");
    boolean first = true;

    if (isSetColumnId()) {
      sb.append("columnId:");
      sb.append(this.columnId);
      first = false;
    }
    if (isSetStrings()) {
      if (!first) sb.append(", ");
      sb.append("strings:");
      if (this.strings == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.strings, sb);
      }
      first = false;
    }
    if (isSetIds()) {
      if (!first) sb.append(", ");
      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGlobalDictStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGlobalDictStandardScheme getScheme() {
      return new TGlobalDictStandardScheme();
    }
  }

  private static class TGlobalDictStandardScheme extends org.apache.thrift.scheme.StandardScheme<TGlobalDict> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TGlobalDict struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnId = iprot.readI32();
              struct.setColumnIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STRINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.strings = new java.util.ArrayList<java.nio.ByteBuffer>(_list32.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readBinary();
                  struct.strings.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setStringsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.ids = new java.util.ArrayList<java.lang.Integer>(_list35.size);
                int _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = iprot.readI32();
                  struct.ids.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TGlobalDict struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetColumnId()) {
        oprot.writeFieldBegin(COLUMN_ID_FIELD_DESC);
        oprot.writeI32(struct.columnId);
        oprot.writeFieldEnd();
      }
      if (struct.strings != null) {
        if (struct.isSetStrings()) {
          oprot.writeFieldBegin(STRINGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.strings.size()));
            for (java.nio.ByteBuffer _iter38 : struct.strings)
            {
              oprot.writeBinary(_iter38);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ids != null) {
        if (struct.isSetIds()) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.ids.size()));
            for (int _iter39 : struct.ids)
            {
              oprot.writeI32(_iter39);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI64(struct.version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGlobalDictTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGlobalDictTupleScheme getScheme() {
      return new TGlobalDictTupleScheme();
    }
  }

  private static class TGlobalDictTupleScheme extends org.apache.thrift.scheme.TupleScheme<TGlobalDict> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGlobalDict struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetColumnId()) {
        optionals.set(0);
      }
      if (struct.isSetStrings()) {
        optionals.set(1);
      }
      if (struct.isSetIds()) {
        optionals.set(2);
      }
      if (struct.isSetVersion()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetColumnId()) {
        oprot.writeI32(struct.columnId);
      }
      if (struct.isSetStrings()) {
        {
          oprot.writeI32(struct.strings.size());
          for (java.nio.ByteBuffer _iter40 : struct.strings)
          {
            oprot.writeBinary(_iter40);
          }
        }
      }
      if (struct.isSetIds()) {
        {
          oprot.writeI32(struct.ids.size());
          for (int _iter41 : struct.ids)
          {
            oprot.writeI32(_iter41);
          }
        }
      }
      if (struct.isSetVersion()) {
        oprot.writeI64(struct.version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGlobalDict struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.columnId = iprot.readI32();
        struct.setColumnIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list42 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.strings = new java.util.ArrayList<java.nio.ByteBuffer>(_list42.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = iprot.readBinary();
            struct.strings.add(_elem43);
          }
        }
        struct.setStringsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list45 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.ids = new java.util.ArrayList<java.lang.Integer>(_list45.size);
          int _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readI32();
            struct.ids.add(_elem46);
          }
        }
        struct.setIdsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.version = iprot.readI64();
        struct.setVersionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

