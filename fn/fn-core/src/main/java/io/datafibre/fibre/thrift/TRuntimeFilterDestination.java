/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TRuntimeFilterDestination implements org.apache.thrift.TBase<TRuntimeFilterDestination, TRuntimeFilterDestination._Fields>, java.io.Serializable, Cloneable, Comparable<TRuntimeFilterDestination> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRuntimeFilterDestination");

  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FINSTANCE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("finstance_ids", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRuntimeFilterDestinationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRuntimeFilterDestinationTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TNetworkAddress address; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TUniqueId> finstance_ids; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADDRESS((short)1, "address"),
    FINSTANCE_IDS((short)2, "finstance_ids");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADDRESS
          return ADDRESS;
        case 2: // FINSTANCE_IDS
          return FINSTANCE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ADDRESS,_Fields.FINSTANCE_IDS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.FINSTANCE_IDS, new org.apache.thrift.meta_data.FieldMetaData("finstance_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TUniqueId.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRuntimeFilterDestination.class, metaDataMap);
  }

  public TRuntimeFilterDestination() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRuntimeFilterDestination(TRuntimeFilterDestination other) {
    if (other.isSetAddress()) {
      this.address = new com.starrocks.thrift.TNetworkAddress(other.address);
    }
    if (other.isSetFinstance_ids()) {
      java.util.List<com.starrocks.thrift.TUniqueId> __this__finstance_ids = new java.util.ArrayList<com.starrocks.thrift.TUniqueId>(other.finstance_ids.size());
      for (com.starrocks.thrift.TUniqueId other_element : other.finstance_ids) {
        __this__finstance_ids.add(new com.starrocks.thrift.TUniqueId(other_element));
      }
      this.finstance_ids = __this__finstance_ids;
    }
  }

  @Override
  public TRuntimeFilterDestination deepCopy() {
    return new TRuntimeFilterDestination(this);
  }

  @Override
  public void clear() {
    this.address = null;
    this.finstance_ids = null;
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TNetworkAddress getAddress() {
    return this.address;
  }

  public TRuntimeFilterDestination setAddress(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TNetworkAddress address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public int getFinstance_idsSize() {
    return (this.finstance_ids == null) ? 0 : this.finstance_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TUniqueId> getFinstance_idsIterator() {
    return (this.finstance_ids == null) ? null : this.finstance_ids.iterator();
  }

  public void addToFinstance_ids(com.starrocks.thrift.TUniqueId elem) {
    if (this.finstance_ids == null) {
      this.finstance_ids = new java.util.ArrayList<com.starrocks.thrift.TUniqueId>();
    }
    this.finstance_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TUniqueId> getFinstance_ids() {
    return this.finstance_ids;
  }

  public TRuntimeFilterDestination setFinstance_ids(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TUniqueId> finstance_ids) {
    this.finstance_ids = finstance_ids;
    return this;
  }

  public void unsetFinstance_ids() {
    this.finstance_ids = null;
  }

  /** Returns true if field finstance_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetFinstance_ids() {
    return this.finstance_ids != null;
  }

  public void setFinstance_idsIsSet(boolean value) {
    if (!value) {
      this.finstance_ids = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((com.starrocks.thrift.TNetworkAddress)value);
      }
      break;

    case FINSTANCE_IDS:
      if (value == null) {
        unsetFinstance_ids();
      } else {
        setFinstance_ids((java.util.List<com.starrocks.thrift.TUniqueId>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ADDRESS:
      return getAddress();

    case FINSTANCE_IDS:
      return getFinstance_ids();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ADDRESS:
      return isSetAddress();
    case FINSTANCE_IDS:
      return isSetFinstance_ids();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRuntimeFilterDestination)
      return this.equals((TRuntimeFilterDestination)that);
    return false;
  }

  public boolean equals(TRuntimeFilterDestination that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_finstance_ids = true && this.isSetFinstance_ids();
    boolean that_present_finstance_ids = true && that.isSetFinstance_ids();
    if (this_present_finstance_ids || that_present_finstance_ids) {
      if (!(this_present_finstance_ids && that_present_finstance_ids))
        return false;
      if (!this.finstance_ids.equals(that.finstance_ids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
    if (isSetAddress())
      hashCode = hashCode * 8191 + address.hashCode();

    hashCode = hashCode * 8191 + ((isSetFinstance_ids()) ? 131071 : 524287);
    if (isSetFinstance_ids())
      hashCode = hashCode * 8191 + finstance_ids.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TRuntimeFilterDestination other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetAddress(), other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFinstance_ids(), other.isSetFinstance_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinstance_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finstance_ids, other.finstance_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRuntimeFilterDestination(");
    boolean first = true;

    if (isSetAddress()) {
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
    }
    if (isSetFinstance_ids()) {
      if (!first) sb.append(", ");
      sb.append("finstance_ids:");
      if (this.finstance_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.finstance_ids);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (address != null) {
      address.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRuntimeFilterDestinationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRuntimeFilterDestinationStandardScheme getScheme() {
      return new TRuntimeFilterDestinationStandardScheme();
    }
  }

  private static class TRuntimeFilterDestinationStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRuntimeFilterDestination> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TRuntimeFilterDestination struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.address = new com.starrocks.thrift.TNetworkAddress();
              struct.address.read(iprot);
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FINSTANCE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.finstance_ids = new java.util.ArrayList<com.starrocks.thrift.TUniqueId>(_list0.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.starrocks.thrift.TUniqueId();
                  _elem1.read(iprot);
                  struct.finstance_ids.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFinstance_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TRuntimeFilterDestination struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.address != null) {
        if (struct.isSetAddress()) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          struct.address.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.finstance_ids != null) {
        if (struct.isSetFinstance_ids()) {
          oprot.writeFieldBegin(FINSTANCE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.finstance_ids.size()));
            for (com.starrocks.thrift.TUniqueId _iter3 : struct.finstance_ids)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRuntimeFilterDestinationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRuntimeFilterDestinationTupleScheme getScheme() {
      return new TRuntimeFilterDestinationTupleScheme();
    }
  }

  private static class TRuntimeFilterDestinationTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRuntimeFilterDestination> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterDestination struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAddress()) {
        optionals.set(0);
      }
      if (struct.isSetFinstance_ids()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAddress()) {
        struct.address.write(oprot);
      }
      if (struct.isSetFinstance_ids()) {
        {
          oprot.writeI32(struct.finstance_ids.size());
          for (com.starrocks.thrift.TUniqueId _iter4 : struct.finstance_ids)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterDestination struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.address = new com.starrocks.thrift.TNetworkAddress();
        struct.address.read(iprot);
        struct.setAddressIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.finstance_ids = new java.util.ArrayList<com.starrocks.thrift.TUniqueId>(_list5.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new com.starrocks.thrift.TUniqueId();
            _elem6.read(iprot);
            struct.finstance_ids.add(_elem6);
          }
        }
        struct.setFinstance_idsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

