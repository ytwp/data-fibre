/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TAllocateAutoIncrementIdResult implements org.apache.thrift.TBase<TAllocateAutoIncrementIdResult, TAllocateAutoIncrementIdResult._Fields>, java.io.Serializable, Cloneable, Comparable<TAllocateAutoIncrementIdResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAllocateAutoIncrementIdResult");

  private static final org.apache.thrift.protocol.TField AUTO_INCREMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("auto_increment_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ALLOCATED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("allocated_rows", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAllocateAutoIncrementIdResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAllocateAutoIncrementIdResultTupleSchemeFactory();

  public long auto_increment_id; // optional
  public long allocated_rows; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TStatus status; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AUTO_INCREMENT_ID((short)1, "auto_increment_id"),
    ALLOCATED_ROWS((short)2, "allocated_rows"),
    STATUS((short)3, "status");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AUTO_INCREMENT_ID
          return AUTO_INCREMENT_ID;
        case 2: // ALLOCATED_ROWS
          return ALLOCATED_ROWS;
        case 3: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AUTO_INCREMENT_ID_ISSET_ID = 0;
  private static final int __ALLOCATED_ROWS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AUTO_INCREMENT_ID,_Fields.ALLOCATED_ROWS,_Fields.STATUS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUTO_INCREMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("auto_increment_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ALLOCATED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("allocated_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TStatus.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAllocateAutoIncrementIdResult.class, metaDataMap);
  }

  public TAllocateAutoIncrementIdResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAllocateAutoIncrementIdResult(TAllocateAutoIncrementIdResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.auto_increment_id = other.auto_increment_id;
    this.allocated_rows = other.allocated_rows;
    if (other.isSetStatus()) {
      this.status = new com.starrocks.thrift.TStatus(other.status);
    }
  }

  @Override
  public TAllocateAutoIncrementIdResult deepCopy() {
    return new TAllocateAutoIncrementIdResult(this);
  }

  @Override
  public void clear() {
    setAuto_increment_idIsSet(false);
    this.auto_increment_id = 0;
    setAllocated_rowsIsSet(false);
    this.allocated_rows = 0;
    this.status = null;
  }

  public long getAuto_increment_id() {
    return this.auto_increment_id;
  }

  public TAllocateAutoIncrementIdResult setAuto_increment_id(long auto_increment_id) {
    this.auto_increment_id = auto_increment_id;
    setAuto_increment_idIsSet(true);
    return this;
  }

  public void unsetAuto_increment_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTO_INCREMENT_ID_ISSET_ID);
  }

  /** Returns true if field auto_increment_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAuto_increment_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTO_INCREMENT_ID_ISSET_ID);
  }

  public void setAuto_increment_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTO_INCREMENT_ID_ISSET_ID, value);
  }

  public long getAllocated_rows() {
    return this.allocated_rows;
  }

  public TAllocateAutoIncrementIdResult setAllocated_rows(long allocated_rows) {
    this.allocated_rows = allocated_rows;
    setAllocated_rowsIsSet(true);
    return this;
  }

  public void unsetAllocated_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALLOCATED_ROWS_ISSET_ID);
  }

  /** Returns true if field allocated_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetAllocated_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALLOCATED_ROWS_ISSET_ID);
  }

  public void setAllocated_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALLOCATED_ROWS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TStatus getStatus() {
    return this.status;
  }

  public TAllocateAutoIncrementIdResult setStatus(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case AUTO_INCREMENT_ID:
      if (value == null) {
        unsetAuto_increment_id();
      } else {
        setAuto_increment_id((java.lang.Long)value);
      }
      break;

    case ALLOCATED_ROWS:
      if (value == null) {
        unsetAllocated_rows();
      } else {
        setAllocated_rows((java.lang.Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.starrocks.thrift.TStatus)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case AUTO_INCREMENT_ID:
      return getAuto_increment_id();

    case ALLOCATED_ROWS:
      return getAllocated_rows();

    case STATUS:
      return getStatus();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case AUTO_INCREMENT_ID:
      return isSetAuto_increment_id();
    case ALLOCATED_ROWS:
      return isSetAllocated_rows();
    case STATUS:
      return isSetStatus();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TAllocateAutoIncrementIdResult)
      return this.equals((TAllocateAutoIncrementIdResult)that);
    return false;
  }

  public boolean equals(TAllocateAutoIncrementIdResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_auto_increment_id = true && this.isSetAuto_increment_id();
    boolean that_present_auto_increment_id = true && that.isSetAuto_increment_id();
    if (this_present_auto_increment_id || that_present_auto_increment_id) {
      if (!(this_present_auto_increment_id && that_present_auto_increment_id))
        return false;
      if (this.auto_increment_id != that.auto_increment_id)
        return false;
    }

    boolean this_present_allocated_rows = true && this.isSetAllocated_rows();
    boolean that_present_allocated_rows = true && that.isSetAllocated_rows();
    if (this_present_allocated_rows || that_present_allocated_rows) {
      if (!(this_present_allocated_rows && that_present_allocated_rows))
        return false;
      if (this.allocated_rows != that.allocated_rows)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAuto_increment_id()) ? 131071 : 524287);
    if (isSetAuto_increment_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(auto_increment_id);

    hashCode = hashCode * 8191 + ((isSetAllocated_rows()) ? 131071 : 524287);
    if (isSetAllocated_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(allocated_rows);

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TAllocateAutoIncrementIdResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetAuto_increment_id(), other.isSetAuto_increment_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuto_increment_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auto_increment_id, other.auto_increment_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAllocated_rows(), other.isSetAllocated_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllocated_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allocated_rows, other.allocated_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAllocateAutoIncrementIdResult(");
    boolean first = true;

    if (isSetAuto_increment_id()) {
      sb.append("auto_increment_id:");
      sb.append(this.auto_increment_id);
      first = false;
    }
    if (isSetAllocated_rows()) {
      if (!first) sb.append(", ");
      sb.append("allocated_rows:");
      sb.append(this.allocated_rows);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAllocateAutoIncrementIdResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAllocateAutoIncrementIdResultStandardScheme getScheme() {
      return new TAllocateAutoIncrementIdResultStandardScheme();
    }
  }

  private static class TAllocateAutoIncrementIdResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAllocateAutoIncrementIdResult> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TAllocateAutoIncrementIdResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AUTO_INCREMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.auto_increment_id = iprot.readI64();
              struct.setAuto_increment_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALLOCATED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.allocated_rows = iprot.readI64();
              struct.setAllocated_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new com.starrocks.thrift.TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TAllocateAutoIncrementIdResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetAuto_increment_id()) {
        oprot.writeFieldBegin(AUTO_INCREMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.auto_increment_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAllocated_rows()) {
        oprot.writeFieldBegin(ALLOCATED_ROWS_FIELD_DESC);
        oprot.writeI64(struct.allocated_rows);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          struct.status.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAllocateAutoIncrementIdResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAllocateAutoIncrementIdResultTupleScheme getScheme() {
      return new TAllocateAutoIncrementIdResultTupleScheme();
    }
  }

  private static class TAllocateAutoIncrementIdResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAllocateAutoIncrementIdResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAllocateAutoIncrementIdResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAuto_increment_id()) {
        optionals.set(0);
      }
      if (struct.isSetAllocated_rows()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAuto_increment_id()) {
        oprot.writeI64(struct.auto_increment_id);
      }
      if (struct.isSetAllocated_rows()) {
        oprot.writeI64(struct.allocated_rows);
      }
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAllocateAutoIncrementIdResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.auto_increment_id = iprot.readI64();
        struct.setAuto_increment_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.allocated_rows = iprot.readI64();
        struct.setAllocated_rowsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = new com.starrocks.thrift.TStatus();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

