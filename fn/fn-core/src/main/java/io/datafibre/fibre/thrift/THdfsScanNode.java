/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class THdfsScanNode implements org.apache.thrift.TBase<THdfsScanNode, THdfsScanNode._Fields>, java.io.Serializable, Cloneable, Comparable<THdfsScanNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THdfsScanNode");

  private static final org.apache.thrift.protocol.TField TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DEPRECATED_COLLECTION_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("DEPRECATED_collection_conjuncts", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField MIN_MAX_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("min_max_conjuncts", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField MIN_MAX_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("min_max_tuple_id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DEPRECATED_DICTIONARY_FILTER_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("DEPRECATED_dictionary_filter_conjuncts", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField PARTITION_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_conjuncts", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField HIVE_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("hive_column_names", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SQL_PREDICATES_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_predicates", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MIN_MAX_SQL_PREDICATES_FIELD_DESC = new org.apache.thrift.protocol.TField("min_max_sql_predicates", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PARTITION_SQL_PREDICATES_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_sql_predicates", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CASE_SENSITIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("case_sensitive", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField CLOUD_CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("cloud_configuration", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField CAN_USE_ANY_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("can_use_any_column", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField CAN_USE_MIN_MAX_COUNT_OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("can_use_min_max_count_opt", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField USE_PARTITION_COLUMN_VALUE_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("use_partition_column_value_only", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField MOR_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mor_tuple_id", org.apache.thrift.protocol.TType.I32, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new THdfsScanNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new THdfsScanNodeTupleSchemeFactory();

  public int tuple_id; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>> DEPRECATED_collection_conjuncts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> min_max_conjuncts; // optional
  public int min_max_tuple_id; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> DEPRECATED_dictionary_filter_conjuncts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> partition_conjuncts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> hive_column_names; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sql_predicates; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String min_max_sql_predicates; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String partition_sql_predicates; // optional
  public boolean case_sensitive; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TCloudConfiguration cloud_configuration; // optional
  public boolean can_use_any_column; // optional
  public boolean can_use_min_max_count_opt; // optional
  public boolean use_partition_column_value_only; // optional
  public int mor_tuple_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TUPLE_ID((short)1, "tuple_id"),
    DEPRECATED_COLLECTION_CONJUNCTS((short)2, "DEPRECATED_collection_conjuncts"),
    MIN_MAX_CONJUNCTS((short)3, "min_max_conjuncts"),
    MIN_MAX_TUPLE_ID((short)4, "min_max_tuple_id"),
    DEPRECATED_DICTIONARY_FILTER_CONJUNCTS((short)5, "DEPRECATED_dictionary_filter_conjuncts"),
    PARTITION_CONJUNCTS((short)6, "partition_conjuncts"),
    HIVE_COLUMN_NAMES((short)7, "hive_column_names"),
    TABLE_NAME((short)8, "table_name"),
    SQL_PREDICATES((short)9, "sql_predicates"),
    MIN_MAX_SQL_PREDICATES((short)10, "min_max_sql_predicates"),
    PARTITION_SQL_PREDICATES((short)11, "partition_sql_predicates"),
    CASE_SENSITIVE((short)12, "case_sensitive"),
    CLOUD_CONFIGURATION((short)13, "cloud_configuration"),
    CAN_USE_ANY_COLUMN((short)14, "can_use_any_column"),
    CAN_USE_MIN_MAX_COUNT_OPT((short)15, "can_use_min_max_count_opt"),
    USE_PARTITION_COLUMN_VALUE_ONLY((short)16, "use_partition_column_value_only"),
    MOR_TUPLE_ID((short)17, "mor_tuple_id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TUPLE_ID
          return TUPLE_ID;
        case 2: // DEPRECATED_COLLECTION_CONJUNCTS
          return DEPRECATED_COLLECTION_CONJUNCTS;
        case 3: // MIN_MAX_CONJUNCTS
          return MIN_MAX_CONJUNCTS;
        case 4: // MIN_MAX_TUPLE_ID
          return MIN_MAX_TUPLE_ID;
        case 5: // DEPRECATED_DICTIONARY_FILTER_CONJUNCTS
          return DEPRECATED_DICTIONARY_FILTER_CONJUNCTS;
        case 6: // PARTITION_CONJUNCTS
          return PARTITION_CONJUNCTS;
        case 7: // HIVE_COLUMN_NAMES
          return HIVE_COLUMN_NAMES;
        case 8: // TABLE_NAME
          return TABLE_NAME;
        case 9: // SQL_PREDICATES
          return SQL_PREDICATES;
        case 10: // MIN_MAX_SQL_PREDICATES
          return MIN_MAX_SQL_PREDICATES;
        case 11: // PARTITION_SQL_PREDICATES
          return PARTITION_SQL_PREDICATES;
        case 12: // CASE_SENSITIVE
          return CASE_SENSITIVE;
        case 13: // CLOUD_CONFIGURATION
          return CLOUD_CONFIGURATION;
        case 14: // CAN_USE_ANY_COLUMN
          return CAN_USE_ANY_COLUMN;
        case 15: // CAN_USE_MIN_MAX_COUNT_OPT
          return CAN_USE_MIN_MAX_COUNT_OPT;
        case 16: // USE_PARTITION_COLUMN_VALUE_ONLY
          return USE_PARTITION_COLUMN_VALUE_ONLY;
        case 17: // MOR_TUPLE_ID
          return MOR_TUPLE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TUPLE_ID_ISSET_ID = 0;
  private static final int __MIN_MAX_TUPLE_ID_ISSET_ID = 1;
  private static final int __CASE_SENSITIVE_ISSET_ID = 2;
  private static final int __CAN_USE_ANY_COLUMN_ISSET_ID = 3;
  private static final int __CAN_USE_MIN_MAX_COUNT_OPT_ISSET_ID = 4;
  private static final int __USE_PARTITION_COLUMN_VALUE_ONLY_ISSET_ID = 5;
  private static final int __MOR_TUPLE_ID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TUPLE_ID,_Fields.DEPRECATED_COLLECTION_CONJUNCTS,_Fields.MIN_MAX_CONJUNCTS,_Fields.MIN_MAX_TUPLE_ID,_Fields.DEPRECATED_DICTIONARY_FILTER_CONJUNCTS,_Fields.PARTITION_CONJUNCTS,_Fields.HIVE_COLUMN_NAMES,_Fields.TABLE_NAME,_Fields.SQL_PREDICATES,_Fields.MIN_MAX_SQL_PREDICATES,_Fields.PARTITION_SQL_PREDICATES,_Fields.CASE_SENSITIVE,_Fields.CLOUD_CONFIGURATION,_Fields.CAN_USE_ANY_COLUMN,_Fields.CAN_USE_MIN_MAX_COUNT_OPT,_Fields.USE_PARTITION_COLUMN_VALUE_ONLY,_Fields.MOR_TUPLE_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tuple_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.DEPRECATED_COLLECTION_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("DEPRECATED_collection_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TTupleId"), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class)))));
    tmpMap.put(_Fields.MIN_MAX_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("min_max_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class))));
    tmpMap.put(_Fields.MIN_MAX_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("min_max_tuple_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.DEPRECATED_DICTIONARY_FILTER_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("DEPRECATED_dictionary_filter_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.PARTITION_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("partition_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class))));
    tmpMap.put(_Fields.HIVE_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("hive_column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SQL_PREDICATES, new org.apache.thrift.meta_data.FieldMetaData("sql_predicates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN_MAX_SQL_PREDICATES, new org.apache.thrift.meta_data.FieldMetaData("min_max_sql_predicates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION_SQL_PREDICATES, new org.apache.thrift.meta_data.FieldMetaData("partition_sql_predicates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CASE_SENSITIVE, new org.apache.thrift.meta_data.FieldMetaData("case_sensitive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CLOUD_CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("cloud_configuration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TCloudConfiguration.class)));
    tmpMap.put(_Fields.CAN_USE_ANY_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("can_use_any_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CAN_USE_MIN_MAX_COUNT_OPT, new org.apache.thrift.meta_data.FieldMetaData("can_use_min_max_count_opt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USE_PARTITION_COLUMN_VALUE_ONLY, new org.apache.thrift.meta_data.FieldMetaData("use_partition_column_value_only", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MOR_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("mor_tuple_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THdfsScanNode.class, metaDataMap);
  }

  public THdfsScanNode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THdfsScanNode(THdfsScanNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tuple_id = other.tuple_id;
    if (other.isSetDEPRECATED_collection_conjuncts()) {
      java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>> __this__DEPRECATED_collection_conjuncts = new java.util.HashMap<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>>(other.DEPRECATED_collection_conjuncts.size());
      for (java.util.Map.Entry<java.lang.Integer, java.util.List<com.starrocks.thrift.TExpr>> other_element : other.DEPRECATED_collection_conjuncts.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.util.List<com.starrocks.thrift.TExpr> other_element_value = other_element.getValue();

        java.lang.Integer __this__DEPRECATED_collection_conjuncts_copy_key = other_element_key;

        java.util.List<com.starrocks.thrift.TExpr> __this__DEPRECATED_collection_conjuncts_copy_value = new java.util.ArrayList<com.starrocks.thrift.TExpr>(other_element_value.size());
        for (com.starrocks.thrift.TExpr other_element_value_element : other_element_value) {
          __this__DEPRECATED_collection_conjuncts_copy_value.add(new com.starrocks.thrift.TExpr(other_element_value_element));
        }

        __this__DEPRECATED_collection_conjuncts.put(__this__DEPRECATED_collection_conjuncts_copy_key, __this__DEPRECATED_collection_conjuncts_copy_value);
      }
      this.DEPRECATED_collection_conjuncts = __this__DEPRECATED_collection_conjuncts;
    }
    if (other.isSetMin_max_conjuncts()) {
      java.util.List<com.starrocks.thrift.TExpr> __this__min_max_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>(other.min_max_conjuncts.size());
      for (com.starrocks.thrift.TExpr other_element : other.min_max_conjuncts) {
        __this__min_max_conjuncts.add(new com.starrocks.thrift.TExpr(other_element));
      }
      this.min_max_conjuncts = __this__min_max_conjuncts;
    }
    this.min_max_tuple_id = other.min_max_tuple_id;
    if (other.isSetDEPRECATED_dictionary_filter_conjuncts()) {
      java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> __this__DEPRECATED_dictionary_filter_conjuncts = new java.util.HashMap<java.lang.Integer,java.util.List<java.lang.Integer>>(other.DEPRECATED_dictionary_filter_conjuncts.size());
      for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.lang.Integer>> other_element : other.DEPRECATED_dictionary_filter_conjuncts.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.util.List<java.lang.Integer> other_element_value = other_element.getValue();

        java.lang.Integer __this__DEPRECATED_dictionary_filter_conjuncts_copy_key = other_element_key;

        java.util.List<java.lang.Integer> __this__DEPRECATED_dictionary_filter_conjuncts_copy_value = new java.util.ArrayList<java.lang.Integer>(other_element_value);

        __this__DEPRECATED_dictionary_filter_conjuncts.put(__this__DEPRECATED_dictionary_filter_conjuncts_copy_key, __this__DEPRECATED_dictionary_filter_conjuncts_copy_value);
      }
      this.DEPRECATED_dictionary_filter_conjuncts = __this__DEPRECATED_dictionary_filter_conjuncts;
    }
    if (other.isSetPartition_conjuncts()) {
      java.util.List<com.starrocks.thrift.TExpr> __this__partition_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>(other.partition_conjuncts.size());
      for (com.starrocks.thrift.TExpr other_element : other.partition_conjuncts) {
        __this__partition_conjuncts.add(new com.starrocks.thrift.TExpr(other_element));
      }
      this.partition_conjuncts = __this__partition_conjuncts;
    }
    if (other.isSetHive_column_names()) {
      java.util.List<java.lang.String> __this__hive_column_names = new java.util.ArrayList<java.lang.String>(other.hive_column_names);
      this.hive_column_names = __this__hive_column_names;
    }
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    if (other.isSetSql_predicates()) {
      this.sql_predicates = other.sql_predicates;
    }
    if (other.isSetMin_max_sql_predicates()) {
      this.min_max_sql_predicates = other.min_max_sql_predicates;
    }
    if (other.isSetPartition_sql_predicates()) {
      this.partition_sql_predicates = other.partition_sql_predicates;
    }
    this.case_sensitive = other.case_sensitive;
    if (other.isSetCloud_configuration()) {
      this.cloud_configuration = new com.starrocks.thrift.TCloudConfiguration(other.cloud_configuration);
    }
    this.can_use_any_column = other.can_use_any_column;
    this.can_use_min_max_count_opt = other.can_use_min_max_count_opt;
    this.use_partition_column_value_only = other.use_partition_column_value_only;
    this.mor_tuple_id = other.mor_tuple_id;
  }

  @Override
  public THdfsScanNode deepCopy() {
    return new THdfsScanNode(this);
  }

  @Override
  public void clear() {
    setTuple_idIsSet(false);
    this.tuple_id = 0;
    this.DEPRECATED_collection_conjuncts = null;
    this.min_max_conjuncts = null;
    setMin_max_tuple_idIsSet(false);
    this.min_max_tuple_id = 0;
    this.DEPRECATED_dictionary_filter_conjuncts = null;
    this.partition_conjuncts = null;
    this.hive_column_names = null;
    this.table_name = null;
    this.sql_predicates = null;
    this.min_max_sql_predicates = null;
    this.partition_sql_predicates = null;
    setCase_sensitiveIsSet(false);
    this.case_sensitive = false;
    this.cloud_configuration = null;
    setCan_use_any_columnIsSet(false);
    this.can_use_any_column = false;
    setCan_use_min_max_count_optIsSet(false);
    this.can_use_min_max_count_opt = false;
    setUse_partition_column_value_onlyIsSet(false);
    this.use_partition_column_value_only = false;
    setMor_tuple_idIsSet(false);
    this.mor_tuple_id = 0;
  }

  public int getTuple_id() {
    return this.tuple_id;
  }

  public THdfsScanNode setTuple_id(int tuple_id) {
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    return this;
  }

  public void unsetTuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  public void setTuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TUPLE_ID_ISSET_ID, value);
  }

  public int getDEPRECATED_collection_conjunctsSize() {
    return (this.DEPRECATED_collection_conjuncts == null) ? 0 : this.DEPRECATED_collection_conjuncts.size();
  }

  public void putToDEPRECATED_collection_conjuncts(int key, java.util.List<com.starrocks.thrift.TExpr> val) {
    if (this.DEPRECATED_collection_conjuncts == null) {
      this.DEPRECATED_collection_conjuncts = new java.util.HashMap<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>>();
    }
    this.DEPRECATED_collection_conjuncts.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>> getDEPRECATED_collection_conjuncts() {
    return this.DEPRECATED_collection_conjuncts;
  }

  public THdfsScanNode setDEPRECATED_collection_conjuncts(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>> DEPRECATED_collection_conjuncts) {
    this.DEPRECATED_collection_conjuncts = DEPRECATED_collection_conjuncts;
    return this;
  }

  public void unsetDEPRECATED_collection_conjuncts() {
    this.DEPRECATED_collection_conjuncts = null;
  }

  /** Returns true if field DEPRECATED_collection_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetDEPRECATED_collection_conjuncts() {
    return this.DEPRECATED_collection_conjuncts != null;
  }

  public void setDEPRECATED_collection_conjunctsIsSet(boolean value) {
    if (!value) {
      this.DEPRECATED_collection_conjuncts = null;
    }
  }

  public int getMin_max_conjunctsSize() {
    return (this.min_max_conjuncts == null) ? 0 : this.min_max_conjuncts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TExpr> getMin_max_conjunctsIterator() {
    return (this.min_max_conjuncts == null) ? null : this.min_max_conjuncts.iterator();
  }

  public void addToMin_max_conjuncts(com.starrocks.thrift.TExpr elem) {
    if (this.min_max_conjuncts == null) {
      this.min_max_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>();
    }
    this.min_max_conjuncts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TExpr> getMin_max_conjuncts() {
    return this.min_max_conjuncts;
  }

  public THdfsScanNode setMin_max_conjuncts(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> min_max_conjuncts) {
    this.min_max_conjuncts = min_max_conjuncts;
    return this;
  }

  public void unsetMin_max_conjuncts() {
    this.min_max_conjuncts = null;
  }

  /** Returns true if field min_max_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_max_conjuncts() {
    return this.min_max_conjuncts != null;
  }

  public void setMin_max_conjunctsIsSet(boolean value) {
    if (!value) {
      this.min_max_conjuncts = null;
    }
  }

  public int getMin_max_tuple_id() {
    return this.min_max_tuple_id;
  }

  public THdfsScanNode setMin_max_tuple_id(int min_max_tuple_id) {
    this.min_max_tuple_id = min_max_tuple_id;
    setMin_max_tuple_idIsSet(true);
    return this;
  }

  public void unsetMin_max_tuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_MAX_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field min_max_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_max_tuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_MAX_TUPLE_ID_ISSET_ID);
  }

  public void setMin_max_tuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_MAX_TUPLE_ID_ISSET_ID, value);
  }

  public int getDEPRECATED_dictionary_filter_conjunctsSize() {
    return (this.DEPRECATED_dictionary_filter_conjuncts == null) ? 0 : this.DEPRECATED_dictionary_filter_conjuncts.size();
  }

  public void putToDEPRECATED_dictionary_filter_conjuncts(int key, java.util.List<java.lang.Integer> val) {
    if (this.DEPRECATED_dictionary_filter_conjuncts == null) {
      this.DEPRECATED_dictionary_filter_conjuncts = new java.util.HashMap<java.lang.Integer,java.util.List<java.lang.Integer>>();
    }
    this.DEPRECATED_dictionary_filter_conjuncts.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> getDEPRECATED_dictionary_filter_conjuncts() {
    return this.DEPRECATED_dictionary_filter_conjuncts;
  }

  public THdfsScanNode setDEPRECATED_dictionary_filter_conjuncts(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> DEPRECATED_dictionary_filter_conjuncts) {
    this.DEPRECATED_dictionary_filter_conjuncts = DEPRECATED_dictionary_filter_conjuncts;
    return this;
  }

  public void unsetDEPRECATED_dictionary_filter_conjuncts() {
    this.DEPRECATED_dictionary_filter_conjuncts = null;
  }

  /** Returns true if field DEPRECATED_dictionary_filter_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetDEPRECATED_dictionary_filter_conjuncts() {
    return this.DEPRECATED_dictionary_filter_conjuncts != null;
  }

  public void setDEPRECATED_dictionary_filter_conjunctsIsSet(boolean value) {
    if (!value) {
      this.DEPRECATED_dictionary_filter_conjuncts = null;
    }
  }

  public int getPartition_conjunctsSize() {
    return (this.partition_conjuncts == null) ? 0 : this.partition_conjuncts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TExpr> getPartition_conjunctsIterator() {
    return (this.partition_conjuncts == null) ? null : this.partition_conjuncts.iterator();
  }

  public void addToPartition_conjuncts(com.starrocks.thrift.TExpr elem) {
    if (this.partition_conjuncts == null) {
      this.partition_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>();
    }
    this.partition_conjuncts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TExpr> getPartition_conjuncts() {
    return this.partition_conjuncts;
  }

  public THdfsScanNode setPartition_conjuncts(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> partition_conjuncts) {
    this.partition_conjuncts = partition_conjuncts;
    return this;
  }

  public void unsetPartition_conjuncts() {
    this.partition_conjuncts = null;
  }

  /** Returns true if field partition_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_conjuncts() {
    return this.partition_conjuncts != null;
  }

  public void setPartition_conjunctsIsSet(boolean value) {
    if (!value) {
      this.partition_conjuncts = null;
    }
  }

  public int getHive_column_namesSize() {
    return (this.hive_column_names == null) ? 0 : this.hive_column_names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getHive_column_namesIterator() {
    return (this.hive_column_names == null) ? null : this.hive_column_names.iterator();
  }

  public void addToHive_column_names(java.lang.String elem) {
    if (this.hive_column_names == null) {
      this.hive_column_names = new java.util.ArrayList<java.lang.String>();
    }
    this.hive_column_names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getHive_column_names() {
    return this.hive_column_names;
  }

  public THdfsScanNode setHive_column_names(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> hive_column_names) {
    this.hive_column_names = hive_column_names;
    return this;
  }

  public void unsetHive_column_names() {
    this.hive_column_names = null;
  }

  /** Returns true if field hive_column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetHive_column_names() {
    return this.hive_column_names != null;
  }

  public void setHive_column_namesIsSet(boolean value) {
    if (!value) {
      this.hive_column_names = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_name() {
    return this.table_name;
  }

  public THdfsScanNode setTable_name(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSql_predicates() {
    return this.sql_predicates;
  }

  public THdfsScanNode setSql_predicates(@org.apache.thrift.annotation.Nullable java.lang.String sql_predicates) {
    this.sql_predicates = sql_predicates;
    return this;
  }

  public void unsetSql_predicates() {
    this.sql_predicates = null;
  }

  /** Returns true if field sql_predicates is set (has been assigned a value) and false otherwise */
  public boolean isSetSql_predicates() {
    return this.sql_predicates != null;
  }

  public void setSql_predicatesIsSet(boolean value) {
    if (!value) {
      this.sql_predicates = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMin_max_sql_predicates() {
    return this.min_max_sql_predicates;
  }

  public THdfsScanNode setMin_max_sql_predicates(@org.apache.thrift.annotation.Nullable java.lang.String min_max_sql_predicates) {
    this.min_max_sql_predicates = min_max_sql_predicates;
    return this;
  }

  public void unsetMin_max_sql_predicates() {
    this.min_max_sql_predicates = null;
  }

  /** Returns true if field min_max_sql_predicates is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_max_sql_predicates() {
    return this.min_max_sql_predicates != null;
  }

  public void setMin_max_sql_predicatesIsSet(boolean value) {
    if (!value) {
      this.min_max_sql_predicates = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartition_sql_predicates() {
    return this.partition_sql_predicates;
  }

  public THdfsScanNode setPartition_sql_predicates(@org.apache.thrift.annotation.Nullable java.lang.String partition_sql_predicates) {
    this.partition_sql_predicates = partition_sql_predicates;
    return this;
  }

  public void unsetPartition_sql_predicates() {
    this.partition_sql_predicates = null;
  }

  /** Returns true if field partition_sql_predicates is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_sql_predicates() {
    return this.partition_sql_predicates != null;
  }

  public void setPartition_sql_predicatesIsSet(boolean value) {
    if (!value) {
      this.partition_sql_predicates = null;
    }
  }

  public boolean isCase_sensitive() {
    return this.case_sensitive;
  }

  public THdfsScanNode setCase_sensitive(boolean case_sensitive) {
    this.case_sensitive = case_sensitive;
    setCase_sensitiveIsSet(true);
    return this;
  }

  public void unsetCase_sensitive() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CASE_SENSITIVE_ISSET_ID);
  }

  /** Returns true if field case_sensitive is set (has been assigned a value) and false otherwise */
  public boolean isSetCase_sensitive() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CASE_SENSITIVE_ISSET_ID);
  }

  public void setCase_sensitiveIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CASE_SENSITIVE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TCloudConfiguration getCloud_configuration() {
    return this.cloud_configuration;
  }

  public THdfsScanNode setCloud_configuration(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TCloudConfiguration cloud_configuration) {
    this.cloud_configuration = cloud_configuration;
    return this;
  }

  public void unsetCloud_configuration() {
    this.cloud_configuration = null;
  }

  /** Returns true if field cloud_configuration is set (has been assigned a value) and false otherwise */
  public boolean isSetCloud_configuration() {
    return this.cloud_configuration != null;
  }

  public void setCloud_configurationIsSet(boolean value) {
    if (!value) {
      this.cloud_configuration = null;
    }
  }

  public boolean isCan_use_any_column() {
    return this.can_use_any_column;
  }

  public THdfsScanNode setCan_use_any_column(boolean can_use_any_column) {
    this.can_use_any_column = can_use_any_column;
    setCan_use_any_columnIsSet(true);
    return this;
  }

  public void unsetCan_use_any_column() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAN_USE_ANY_COLUMN_ISSET_ID);
  }

  /** Returns true if field can_use_any_column is set (has been assigned a value) and false otherwise */
  public boolean isSetCan_use_any_column() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAN_USE_ANY_COLUMN_ISSET_ID);
  }

  public void setCan_use_any_columnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAN_USE_ANY_COLUMN_ISSET_ID, value);
  }

  public boolean isCan_use_min_max_count_opt() {
    return this.can_use_min_max_count_opt;
  }

  public THdfsScanNode setCan_use_min_max_count_opt(boolean can_use_min_max_count_opt) {
    this.can_use_min_max_count_opt = can_use_min_max_count_opt;
    setCan_use_min_max_count_optIsSet(true);
    return this;
  }

  public void unsetCan_use_min_max_count_opt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAN_USE_MIN_MAX_COUNT_OPT_ISSET_ID);
  }

  /** Returns true if field can_use_min_max_count_opt is set (has been assigned a value) and false otherwise */
  public boolean isSetCan_use_min_max_count_opt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAN_USE_MIN_MAX_COUNT_OPT_ISSET_ID);
  }

  public void setCan_use_min_max_count_optIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAN_USE_MIN_MAX_COUNT_OPT_ISSET_ID, value);
  }

  public boolean isUse_partition_column_value_only() {
    return this.use_partition_column_value_only;
  }

  public THdfsScanNode setUse_partition_column_value_only(boolean use_partition_column_value_only) {
    this.use_partition_column_value_only = use_partition_column_value_only;
    setUse_partition_column_value_onlyIsSet(true);
    return this;
  }

  public void unsetUse_partition_column_value_only() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_PARTITION_COLUMN_VALUE_ONLY_ISSET_ID);
  }

  /** Returns true if field use_partition_column_value_only is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_partition_column_value_only() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_PARTITION_COLUMN_VALUE_ONLY_ISSET_ID);
  }

  public void setUse_partition_column_value_onlyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_PARTITION_COLUMN_VALUE_ONLY_ISSET_ID, value);
  }

  public int getMor_tuple_id() {
    return this.mor_tuple_id;
  }

  public THdfsScanNode setMor_tuple_id(int mor_tuple_id) {
    this.mor_tuple_id = mor_tuple_id;
    setMor_tuple_idIsSet(true);
    return this;
  }

  public void unsetMor_tuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MOR_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field mor_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetMor_tuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MOR_TUPLE_ID_ISSET_ID);
  }

  public void setMor_tuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MOR_TUPLE_ID_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TUPLE_ID:
      if (value == null) {
        unsetTuple_id();
      } else {
        setTuple_id((java.lang.Integer)value);
      }
      break;

    case DEPRECATED_COLLECTION_CONJUNCTS:
      if (value == null) {
        unsetDEPRECATED_collection_conjuncts();
      } else {
        setDEPRECATED_collection_conjuncts((java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>>)value);
      }
      break;

    case MIN_MAX_CONJUNCTS:
      if (value == null) {
        unsetMin_max_conjuncts();
      } else {
        setMin_max_conjuncts((java.util.List<com.starrocks.thrift.TExpr>)value);
      }
      break;

    case MIN_MAX_TUPLE_ID:
      if (value == null) {
        unsetMin_max_tuple_id();
      } else {
        setMin_max_tuple_id((java.lang.Integer)value);
      }
      break;

    case DEPRECATED_DICTIONARY_FILTER_CONJUNCTS:
      if (value == null) {
        unsetDEPRECATED_dictionary_filter_conjuncts();
      } else {
        setDEPRECATED_dictionary_filter_conjuncts((java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>)value);
      }
      break;

    case PARTITION_CONJUNCTS:
      if (value == null) {
        unsetPartition_conjuncts();
      } else {
        setPartition_conjuncts((java.util.List<com.starrocks.thrift.TExpr>)value);
      }
      break;

    case HIVE_COLUMN_NAMES:
      if (value == null) {
        unsetHive_column_names();
      } else {
        setHive_column_names((java.util.List<java.lang.String>)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((java.lang.String)value);
      }
      break;

    case SQL_PREDICATES:
      if (value == null) {
        unsetSql_predicates();
      } else {
        setSql_predicates((java.lang.String)value);
      }
      break;

    case MIN_MAX_SQL_PREDICATES:
      if (value == null) {
        unsetMin_max_sql_predicates();
      } else {
        setMin_max_sql_predicates((java.lang.String)value);
      }
      break;

    case PARTITION_SQL_PREDICATES:
      if (value == null) {
        unsetPartition_sql_predicates();
      } else {
        setPartition_sql_predicates((java.lang.String)value);
      }
      break;

    case CASE_SENSITIVE:
      if (value == null) {
        unsetCase_sensitive();
      } else {
        setCase_sensitive((java.lang.Boolean)value);
      }
      break;

    case CLOUD_CONFIGURATION:
      if (value == null) {
        unsetCloud_configuration();
      } else {
        setCloud_configuration((com.starrocks.thrift.TCloudConfiguration)value);
      }
      break;

    case CAN_USE_ANY_COLUMN:
      if (value == null) {
        unsetCan_use_any_column();
      } else {
        setCan_use_any_column((java.lang.Boolean)value);
      }
      break;

    case CAN_USE_MIN_MAX_COUNT_OPT:
      if (value == null) {
        unsetCan_use_min_max_count_opt();
      } else {
        setCan_use_min_max_count_opt((java.lang.Boolean)value);
      }
      break;

    case USE_PARTITION_COLUMN_VALUE_ONLY:
      if (value == null) {
        unsetUse_partition_column_value_only();
      } else {
        setUse_partition_column_value_only((java.lang.Boolean)value);
      }
      break;

    case MOR_TUPLE_ID:
      if (value == null) {
        unsetMor_tuple_id();
      } else {
        setMor_tuple_id((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TUPLE_ID:
      return getTuple_id();

    case DEPRECATED_COLLECTION_CONJUNCTS:
      return getDEPRECATED_collection_conjuncts();

    case MIN_MAX_CONJUNCTS:
      return getMin_max_conjuncts();

    case MIN_MAX_TUPLE_ID:
      return getMin_max_tuple_id();

    case DEPRECATED_DICTIONARY_FILTER_CONJUNCTS:
      return getDEPRECATED_dictionary_filter_conjuncts();

    case PARTITION_CONJUNCTS:
      return getPartition_conjuncts();

    case HIVE_COLUMN_NAMES:
      return getHive_column_names();

    case TABLE_NAME:
      return getTable_name();

    case SQL_PREDICATES:
      return getSql_predicates();

    case MIN_MAX_SQL_PREDICATES:
      return getMin_max_sql_predicates();

    case PARTITION_SQL_PREDICATES:
      return getPartition_sql_predicates();

    case CASE_SENSITIVE:
      return isCase_sensitive();

    case CLOUD_CONFIGURATION:
      return getCloud_configuration();

    case CAN_USE_ANY_COLUMN:
      return isCan_use_any_column();

    case CAN_USE_MIN_MAX_COUNT_OPT:
      return isCan_use_min_max_count_opt();

    case USE_PARTITION_COLUMN_VALUE_ONLY:
      return isUse_partition_column_value_only();

    case MOR_TUPLE_ID:
      return getMor_tuple_id();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TUPLE_ID:
      return isSetTuple_id();
    case DEPRECATED_COLLECTION_CONJUNCTS:
      return isSetDEPRECATED_collection_conjuncts();
    case MIN_MAX_CONJUNCTS:
      return isSetMin_max_conjuncts();
    case MIN_MAX_TUPLE_ID:
      return isSetMin_max_tuple_id();
    case DEPRECATED_DICTIONARY_FILTER_CONJUNCTS:
      return isSetDEPRECATED_dictionary_filter_conjuncts();
    case PARTITION_CONJUNCTS:
      return isSetPartition_conjuncts();
    case HIVE_COLUMN_NAMES:
      return isSetHive_column_names();
    case TABLE_NAME:
      return isSetTable_name();
    case SQL_PREDICATES:
      return isSetSql_predicates();
    case MIN_MAX_SQL_PREDICATES:
      return isSetMin_max_sql_predicates();
    case PARTITION_SQL_PREDICATES:
      return isSetPartition_sql_predicates();
    case CASE_SENSITIVE:
      return isSetCase_sensitive();
    case CLOUD_CONFIGURATION:
      return isSetCloud_configuration();
    case CAN_USE_ANY_COLUMN:
      return isSetCan_use_any_column();
    case CAN_USE_MIN_MAX_COUNT_OPT:
      return isSetCan_use_min_max_count_opt();
    case USE_PARTITION_COLUMN_VALUE_ONLY:
      return isSetUse_partition_column_value_only();
    case MOR_TUPLE_ID:
      return isSetMor_tuple_id();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof THdfsScanNode)
      return this.equals((THdfsScanNode)that);
    return false;
  }

  public boolean equals(THdfsScanNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tuple_id = true && this.isSetTuple_id();
    boolean that_present_tuple_id = true && that.isSetTuple_id();
    if (this_present_tuple_id || that_present_tuple_id) {
      if (!(this_present_tuple_id && that_present_tuple_id))
        return false;
      if (this.tuple_id != that.tuple_id)
        return false;
    }

    boolean this_present_DEPRECATED_collection_conjuncts = true && this.isSetDEPRECATED_collection_conjuncts();
    boolean that_present_DEPRECATED_collection_conjuncts = true && that.isSetDEPRECATED_collection_conjuncts();
    if (this_present_DEPRECATED_collection_conjuncts || that_present_DEPRECATED_collection_conjuncts) {
      if (!(this_present_DEPRECATED_collection_conjuncts && that_present_DEPRECATED_collection_conjuncts))
        return false;
      if (!this.DEPRECATED_collection_conjuncts.equals(that.DEPRECATED_collection_conjuncts))
        return false;
    }

    boolean this_present_min_max_conjuncts = true && this.isSetMin_max_conjuncts();
    boolean that_present_min_max_conjuncts = true && that.isSetMin_max_conjuncts();
    if (this_present_min_max_conjuncts || that_present_min_max_conjuncts) {
      if (!(this_present_min_max_conjuncts && that_present_min_max_conjuncts))
        return false;
      if (!this.min_max_conjuncts.equals(that.min_max_conjuncts))
        return false;
    }

    boolean this_present_min_max_tuple_id = true && this.isSetMin_max_tuple_id();
    boolean that_present_min_max_tuple_id = true && that.isSetMin_max_tuple_id();
    if (this_present_min_max_tuple_id || that_present_min_max_tuple_id) {
      if (!(this_present_min_max_tuple_id && that_present_min_max_tuple_id))
        return false;
      if (this.min_max_tuple_id != that.min_max_tuple_id)
        return false;
    }

    boolean this_present_DEPRECATED_dictionary_filter_conjuncts = true && this.isSetDEPRECATED_dictionary_filter_conjuncts();
    boolean that_present_DEPRECATED_dictionary_filter_conjuncts = true && that.isSetDEPRECATED_dictionary_filter_conjuncts();
    if (this_present_DEPRECATED_dictionary_filter_conjuncts || that_present_DEPRECATED_dictionary_filter_conjuncts) {
      if (!(this_present_DEPRECATED_dictionary_filter_conjuncts && that_present_DEPRECATED_dictionary_filter_conjuncts))
        return false;
      if (!this.DEPRECATED_dictionary_filter_conjuncts.equals(that.DEPRECATED_dictionary_filter_conjuncts))
        return false;
    }

    boolean this_present_partition_conjuncts = true && this.isSetPartition_conjuncts();
    boolean that_present_partition_conjuncts = true && that.isSetPartition_conjuncts();
    if (this_present_partition_conjuncts || that_present_partition_conjuncts) {
      if (!(this_present_partition_conjuncts && that_present_partition_conjuncts))
        return false;
      if (!this.partition_conjuncts.equals(that.partition_conjuncts))
        return false;
    }

    boolean this_present_hive_column_names = true && this.isSetHive_column_names();
    boolean that_present_hive_column_names = true && that.isSetHive_column_names();
    if (this_present_hive_column_names || that_present_hive_column_names) {
      if (!(this_present_hive_column_names && that_present_hive_column_names))
        return false;
      if (!this.hive_column_names.equals(that.hive_column_names))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_sql_predicates = true && this.isSetSql_predicates();
    boolean that_present_sql_predicates = true && that.isSetSql_predicates();
    if (this_present_sql_predicates || that_present_sql_predicates) {
      if (!(this_present_sql_predicates && that_present_sql_predicates))
        return false;
      if (!this.sql_predicates.equals(that.sql_predicates))
        return false;
    }

    boolean this_present_min_max_sql_predicates = true && this.isSetMin_max_sql_predicates();
    boolean that_present_min_max_sql_predicates = true && that.isSetMin_max_sql_predicates();
    if (this_present_min_max_sql_predicates || that_present_min_max_sql_predicates) {
      if (!(this_present_min_max_sql_predicates && that_present_min_max_sql_predicates))
        return false;
      if (!this.min_max_sql_predicates.equals(that.min_max_sql_predicates))
        return false;
    }

    boolean this_present_partition_sql_predicates = true && this.isSetPartition_sql_predicates();
    boolean that_present_partition_sql_predicates = true && that.isSetPartition_sql_predicates();
    if (this_present_partition_sql_predicates || that_present_partition_sql_predicates) {
      if (!(this_present_partition_sql_predicates && that_present_partition_sql_predicates))
        return false;
      if (!this.partition_sql_predicates.equals(that.partition_sql_predicates))
        return false;
    }

    boolean this_present_case_sensitive = true && this.isSetCase_sensitive();
    boolean that_present_case_sensitive = true && that.isSetCase_sensitive();
    if (this_present_case_sensitive || that_present_case_sensitive) {
      if (!(this_present_case_sensitive && that_present_case_sensitive))
        return false;
      if (this.case_sensitive != that.case_sensitive)
        return false;
    }

    boolean this_present_cloud_configuration = true && this.isSetCloud_configuration();
    boolean that_present_cloud_configuration = true && that.isSetCloud_configuration();
    if (this_present_cloud_configuration || that_present_cloud_configuration) {
      if (!(this_present_cloud_configuration && that_present_cloud_configuration))
        return false;
      if (!this.cloud_configuration.equals(that.cloud_configuration))
        return false;
    }

    boolean this_present_can_use_any_column = true && this.isSetCan_use_any_column();
    boolean that_present_can_use_any_column = true && that.isSetCan_use_any_column();
    if (this_present_can_use_any_column || that_present_can_use_any_column) {
      if (!(this_present_can_use_any_column && that_present_can_use_any_column))
        return false;
      if (this.can_use_any_column != that.can_use_any_column)
        return false;
    }

    boolean this_present_can_use_min_max_count_opt = true && this.isSetCan_use_min_max_count_opt();
    boolean that_present_can_use_min_max_count_opt = true && that.isSetCan_use_min_max_count_opt();
    if (this_present_can_use_min_max_count_opt || that_present_can_use_min_max_count_opt) {
      if (!(this_present_can_use_min_max_count_opt && that_present_can_use_min_max_count_opt))
        return false;
      if (this.can_use_min_max_count_opt != that.can_use_min_max_count_opt)
        return false;
    }

    boolean this_present_use_partition_column_value_only = true && this.isSetUse_partition_column_value_only();
    boolean that_present_use_partition_column_value_only = true && that.isSetUse_partition_column_value_only();
    if (this_present_use_partition_column_value_only || that_present_use_partition_column_value_only) {
      if (!(this_present_use_partition_column_value_only && that_present_use_partition_column_value_only))
        return false;
      if (this.use_partition_column_value_only != that.use_partition_column_value_only)
        return false;
    }

    boolean this_present_mor_tuple_id = true && this.isSetMor_tuple_id();
    boolean that_present_mor_tuple_id = true && that.isSetMor_tuple_id();
    if (this_present_mor_tuple_id || that_present_mor_tuple_id) {
      if (!(this_present_mor_tuple_id && that_present_mor_tuple_id))
        return false;
      if (this.mor_tuple_id != that.mor_tuple_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTuple_id()) ? 131071 : 524287);
    if (isSetTuple_id())
      hashCode = hashCode * 8191 + tuple_id;

    hashCode = hashCode * 8191 + ((isSetDEPRECATED_collection_conjuncts()) ? 131071 : 524287);
    if (isSetDEPRECATED_collection_conjuncts())
      hashCode = hashCode * 8191 + DEPRECATED_collection_conjuncts.hashCode();

    hashCode = hashCode * 8191 + ((isSetMin_max_conjuncts()) ? 131071 : 524287);
    if (isSetMin_max_conjuncts())
      hashCode = hashCode * 8191 + min_max_conjuncts.hashCode();

    hashCode = hashCode * 8191 + ((isSetMin_max_tuple_id()) ? 131071 : 524287);
    if (isSetMin_max_tuple_id())
      hashCode = hashCode * 8191 + min_max_tuple_id;

    hashCode = hashCode * 8191 + ((isSetDEPRECATED_dictionary_filter_conjuncts()) ? 131071 : 524287);
    if (isSetDEPRECATED_dictionary_filter_conjuncts())
      hashCode = hashCode * 8191 + DEPRECATED_dictionary_filter_conjuncts.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_conjuncts()) ? 131071 : 524287);
    if (isSetPartition_conjuncts())
      hashCode = hashCode * 8191 + partition_conjuncts.hashCode();

    hashCode = hashCode * 8191 + ((isSetHive_column_names()) ? 131071 : 524287);
    if (isSetHive_column_names())
      hashCode = hashCode * 8191 + hive_column_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetSql_predicates()) ? 131071 : 524287);
    if (isSetSql_predicates())
      hashCode = hashCode * 8191 + sql_predicates.hashCode();

    hashCode = hashCode * 8191 + ((isSetMin_max_sql_predicates()) ? 131071 : 524287);
    if (isSetMin_max_sql_predicates())
      hashCode = hashCode * 8191 + min_max_sql_predicates.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_sql_predicates()) ? 131071 : 524287);
    if (isSetPartition_sql_predicates())
      hashCode = hashCode * 8191 + partition_sql_predicates.hashCode();

    hashCode = hashCode * 8191 + ((isSetCase_sensitive()) ? 131071 : 524287);
    if (isSetCase_sensitive())
      hashCode = hashCode * 8191 + ((case_sensitive) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCloud_configuration()) ? 131071 : 524287);
    if (isSetCloud_configuration())
      hashCode = hashCode * 8191 + cloud_configuration.hashCode();

    hashCode = hashCode * 8191 + ((isSetCan_use_any_column()) ? 131071 : 524287);
    if (isSetCan_use_any_column())
      hashCode = hashCode * 8191 + ((can_use_any_column) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCan_use_min_max_count_opt()) ? 131071 : 524287);
    if (isSetCan_use_min_max_count_opt())
      hashCode = hashCode * 8191 + ((can_use_min_max_count_opt) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetUse_partition_column_value_only()) ? 131071 : 524287);
    if (isSetUse_partition_column_value_only())
      hashCode = hashCode * 8191 + ((use_partition_column_value_only) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMor_tuple_id()) ? 131071 : 524287);
    if (isSetMor_tuple_id())
      hashCode = hashCode * 8191 + mor_tuple_id;

    return hashCode;
  }

  @Override
  public int compareTo(THdfsScanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTuple_id(), other.isSetTuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_id, other.tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDEPRECATED_collection_conjuncts(), other.isSetDEPRECATED_collection_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDEPRECATED_collection_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DEPRECATED_collection_conjuncts, other.DEPRECATED_collection_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMin_max_conjuncts(), other.isSetMin_max_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_max_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_max_conjuncts, other.min_max_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMin_max_tuple_id(), other.isSetMin_max_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_max_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_max_tuple_id, other.min_max_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDEPRECATED_dictionary_filter_conjuncts(), other.isSetDEPRECATED_dictionary_filter_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDEPRECATED_dictionary_filter_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DEPRECATED_dictionary_filter_conjuncts, other.DEPRECATED_dictionary_filter_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_conjuncts(), other.isSetPartition_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_conjuncts, other.partition_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHive_column_names(), other.isSetHive_column_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHive_column_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hive_column_names, other.hive_column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_name(), other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSql_predicates(), other.isSetSql_predicates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql_predicates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_predicates, other.sql_predicates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMin_max_sql_predicates(), other.isSetMin_max_sql_predicates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_max_sql_predicates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_max_sql_predicates, other.min_max_sql_predicates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_sql_predicates(), other.isSetPartition_sql_predicates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_sql_predicates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_sql_predicates, other.partition_sql_predicates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCase_sensitive(), other.isSetCase_sensitive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCase_sensitive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.case_sensitive, other.case_sensitive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCloud_configuration(), other.isSetCloud_configuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloud_configuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloud_configuration, other.cloud_configuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCan_use_any_column(), other.isSetCan_use_any_column());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCan_use_any_column()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.can_use_any_column, other.can_use_any_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCan_use_min_max_count_opt(), other.isSetCan_use_min_max_count_opt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCan_use_min_max_count_opt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.can_use_min_max_count_opt, other.can_use_min_max_count_opt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_partition_column_value_only(), other.isSetUse_partition_column_value_only());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_partition_column_value_only()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_partition_column_value_only, other.use_partition_column_value_only);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMor_tuple_id(), other.isSetMor_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMor_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mor_tuple_id, other.mor_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("THdfsScanNode(");
    boolean first = true;

    if (isSetTuple_id()) {
      sb.append("tuple_id:");
      sb.append(this.tuple_id);
      first = false;
    }
    if (isSetDEPRECATED_collection_conjuncts()) {
      if (!first) sb.append(", ");
      sb.append("DEPRECATED_collection_conjuncts:");
      if (this.DEPRECATED_collection_conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.DEPRECATED_collection_conjuncts);
      }
      first = false;
    }
    if (isSetMin_max_conjuncts()) {
      if (!first) sb.append(", ");
      sb.append("min_max_conjuncts:");
      if (this.min_max_conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.min_max_conjuncts);
      }
      first = false;
    }
    if (isSetMin_max_tuple_id()) {
      if (!first) sb.append(", ");
      sb.append("min_max_tuple_id:");
      sb.append(this.min_max_tuple_id);
      first = false;
    }
    if (isSetDEPRECATED_dictionary_filter_conjuncts()) {
      if (!first) sb.append(", ");
      sb.append("DEPRECATED_dictionary_filter_conjuncts:");
      if (this.DEPRECATED_dictionary_filter_conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.DEPRECATED_dictionary_filter_conjuncts);
      }
      first = false;
    }
    if (isSetPartition_conjuncts()) {
      if (!first) sb.append(", ");
      sb.append("partition_conjuncts:");
      if (this.partition_conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_conjuncts);
      }
      first = false;
    }
    if (isSetHive_column_names()) {
      if (!first) sb.append(", ");
      sb.append("hive_column_names:");
      if (this.hive_column_names == null) {
        sb.append("null");
      } else {
        sb.append(this.hive_column_names);
      }
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetSql_predicates()) {
      if (!first) sb.append(", ");
      sb.append("sql_predicates:");
      if (this.sql_predicates == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_predicates);
      }
      first = false;
    }
    if (isSetMin_max_sql_predicates()) {
      if (!first) sb.append(", ");
      sb.append("min_max_sql_predicates:");
      if (this.min_max_sql_predicates == null) {
        sb.append("null");
      } else {
        sb.append(this.min_max_sql_predicates);
      }
      first = false;
    }
    if (isSetPartition_sql_predicates()) {
      if (!first) sb.append(", ");
      sb.append("partition_sql_predicates:");
      if (this.partition_sql_predicates == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_sql_predicates);
      }
      first = false;
    }
    if (isSetCase_sensitive()) {
      if (!first) sb.append(", ");
      sb.append("case_sensitive:");
      sb.append(this.case_sensitive);
      first = false;
    }
    if (isSetCloud_configuration()) {
      if (!first) sb.append(", ");
      sb.append("cloud_configuration:");
      if (this.cloud_configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.cloud_configuration);
      }
      first = false;
    }
    if (isSetCan_use_any_column()) {
      if (!first) sb.append(", ");
      sb.append("can_use_any_column:");
      sb.append(this.can_use_any_column);
      first = false;
    }
    if (isSetCan_use_min_max_count_opt()) {
      if (!first) sb.append(", ");
      sb.append("can_use_min_max_count_opt:");
      sb.append(this.can_use_min_max_count_opt);
      first = false;
    }
    if (isSetUse_partition_column_value_only()) {
      if (!first) sb.append(", ");
      sb.append("use_partition_column_value_only:");
      sb.append(this.use_partition_column_value_only);
      first = false;
    }
    if (isSetMor_tuple_id()) {
      if (!first) sb.append(", ");
      sb.append("mor_tuple_id:");
      sb.append(this.mor_tuple_id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cloud_configuration != null) {
      cloud_configuration.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THdfsScanNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THdfsScanNodeStandardScheme getScheme() {
      return new THdfsScanNodeStandardScheme();
    }
  }

  private static class THdfsScanNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<THdfsScanNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, THdfsScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tuple_id = iprot.readI32();
              struct.setTuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEPRECATED_COLLECTION_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map796 = iprot.readMapBegin();
                struct.DEPRECATED_collection_conjuncts = new java.util.HashMap<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>>(2*_map796.size);
                int _key797;
                @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> _val798;
                for (int _i799 = 0; _i799 < _map796.size; ++_i799)
                {
                  _key797 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list800 = iprot.readListBegin();
                    _val798 = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list800.size);
                    @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem801;
                    for (int _i802 = 0; _i802 < _list800.size; ++_i802)
                    {
                      _elem801 = new com.starrocks.thrift.TExpr();
                      _elem801.read(iprot);
                      _val798.add(_elem801);
                    }
                    iprot.readListEnd();
                  }
                  struct.DEPRECATED_collection_conjuncts.put(_key797, _val798);
                }
                iprot.readMapEnd();
              }
              struct.setDEPRECATED_collection_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MIN_MAX_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list803 = iprot.readListBegin();
                struct.min_max_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list803.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem804;
                for (int _i805 = 0; _i805 < _list803.size; ++_i805)
                {
                  _elem804 = new com.starrocks.thrift.TExpr();
                  _elem804.read(iprot);
                  struct.min_max_conjuncts.add(_elem804);
                }
                iprot.readListEnd();
              }
              struct.setMin_max_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIN_MAX_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.min_max_tuple_id = iprot.readI32();
              struct.setMin_max_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEPRECATED_DICTIONARY_FILTER_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map806 = iprot.readMapBegin();
                struct.DEPRECATED_dictionary_filter_conjuncts = new java.util.HashMap<java.lang.Integer,java.util.List<java.lang.Integer>>(2*_map806.size);
                int _key807;
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _val808;
                for (int _i809 = 0; _i809 < _map806.size; ++_i809)
                {
                  _key807 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list810 = iprot.readListBegin();
                    _val808 = new java.util.ArrayList<java.lang.Integer>(_list810.size);
                    int _elem811;
                    for (int _i812 = 0; _i812 < _list810.size; ++_i812)
                    {
                      _elem811 = iprot.readI32();
                      _val808.add(_elem811);
                    }
                    iprot.readListEnd();
                  }
                  struct.DEPRECATED_dictionary_filter_conjuncts.put(_key807, _val808);
                }
                iprot.readMapEnd();
              }
              struct.setDEPRECATED_dictionary_filter_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARTITION_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list813 = iprot.readListBegin();
                struct.partition_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list813.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem814;
                for (int _i815 = 0; _i815 < _list813.size; ++_i815)
                {
                  _elem814 = new com.starrocks.thrift.TExpr();
                  _elem814.read(iprot);
                  struct.partition_conjuncts.add(_elem814);
                }
                iprot.readListEnd();
              }
              struct.setPartition_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HIVE_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list816 = iprot.readListBegin();
                struct.hive_column_names = new java.util.ArrayList<java.lang.String>(_list816.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem817;
                for (int _i818 = 0; _i818 < _list816.size; ++_i818)
                {
                  _elem817 = iprot.readString();
                  struct.hive_column_names.add(_elem817);
                }
                iprot.readListEnd();
              }
              struct.setHive_column_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SQL_PREDICATES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql_predicates = iprot.readString();
              struct.setSql_predicatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MIN_MAX_SQL_PREDICATES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.min_max_sql_predicates = iprot.readString();
              struct.setMin_max_sql_predicatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PARTITION_SQL_PREDICATES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partition_sql_predicates = iprot.readString();
              struct.setPartition_sql_predicatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CASE_SENSITIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.case_sensitive = iprot.readBool();
              struct.setCase_sensitiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CLOUD_CONFIGURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cloud_configuration = new com.starrocks.thrift.TCloudConfiguration();
              struct.cloud_configuration.read(iprot);
              struct.setCloud_configurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CAN_USE_ANY_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.can_use_any_column = iprot.readBool();
              struct.setCan_use_any_columnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CAN_USE_MIN_MAX_COUNT_OPT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.can_use_min_max_count_opt = iprot.readBool();
              struct.setCan_use_min_max_count_optIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // USE_PARTITION_COLUMN_VALUE_ONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_partition_column_value_only = iprot.readBool();
              struct.setUse_partition_column_value_onlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MOR_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mor_tuple_id = iprot.readI32();
              struct.setMor_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, THdfsScanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTuple_id()) {
        oprot.writeFieldBegin(TUPLE_ID_FIELD_DESC);
        oprot.writeI32(struct.tuple_id);
        oprot.writeFieldEnd();
      }
      if (struct.DEPRECATED_collection_conjuncts != null) {
        if (struct.isSetDEPRECATED_collection_conjuncts()) {
          oprot.writeFieldBegin(DEPRECATED_COLLECTION_CONJUNCTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.DEPRECATED_collection_conjuncts.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.util.List<com.starrocks.thrift.TExpr>> _iter819 : struct.DEPRECATED_collection_conjuncts.entrySet())
            {
              oprot.writeI32(_iter819.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter819.getValue().size()));
                for (com.starrocks.thrift.TExpr _iter820 : _iter819.getValue())
                {
                  _iter820.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.min_max_conjuncts != null) {
        if (struct.isSetMin_max_conjuncts()) {
          oprot.writeFieldBegin(MIN_MAX_CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.min_max_conjuncts.size()));
            for (com.starrocks.thrift.TExpr _iter821 : struct.min_max_conjuncts)
            {
              _iter821.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMin_max_tuple_id()) {
        oprot.writeFieldBegin(MIN_MAX_TUPLE_ID_FIELD_DESC);
        oprot.writeI32(struct.min_max_tuple_id);
        oprot.writeFieldEnd();
      }
      if (struct.DEPRECATED_dictionary_filter_conjuncts != null) {
        if (struct.isSetDEPRECATED_dictionary_filter_conjuncts()) {
          oprot.writeFieldBegin(DEPRECATED_DICTIONARY_FILTER_CONJUNCTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.DEPRECATED_dictionary_filter_conjuncts.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.lang.Integer>> _iter822 : struct.DEPRECATED_dictionary_filter_conjuncts.entrySet())
            {
              oprot.writeI32(_iter822.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter822.getValue().size()));
                for (int _iter823 : _iter822.getValue())
                {
                  oprot.writeI32(_iter823);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_conjuncts != null) {
        if (struct.isSetPartition_conjuncts()) {
          oprot.writeFieldBegin(PARTITION_CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_conjuncts.size()));
            for (com.starrocks.thrift.TExpr _iter824 : struct.partition_conjuncts)
            {
              _iter824.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.hive_column_names != null) {
        if (struct.isSetHive_column_names()) {
          oprot.writeFieldBegin(HIVE_COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.hive_column_names.size()));
            for (java.lang.String _iter825 : struct.hive_column_names)
            {
              oprot.writeString(_iter825);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sql_predicates != null) {
        if (struct.isSetSql_predicates()) {
          oprot.writeFieldBegin(SQL_PREDICATES_FIELD_DESC);
          oprot.writeString(struct.sql_predicates);
          oprot.writeFieldEnd();
        }
      }
      if (struct.min_max_sql_predicates != null) {
        if (struct.isSetMin_max_sql_predicates()) {
          oprot.writeFieldBegin(MIN_MAX_SQL_PREDICATES_FIELD_DESC);
          oprot.writeString(struct.min_max_sql_predicates);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_sql_predicates != null) {
        if (struct.isSetPartition_sql_predicates()) {
          oprot.writeFieldBegin(PARTITION_SQL_PREDICATES_FIELD_DESC);
          oprot.writeString(struct.partition_sql_predicates);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCase_sensitive()) {
        oprot.writeFieldBegin(CASE_SENSITIVE_FIELD_DESC);
        oprot.writeBool(struct.case_sensitive);
        oprot.writeFieldEnd();
      }
      if (struct.cloud_configuration != null) {
        if (struct.isSetCloud_configuration()) {
          oprot.writeFieldBegin(CLOUD_CONFIGURATION_FIELD_DESC);
          struct.cloud_configuration.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCan_use_any_column()) {
        oprot.writeFieldBegin(CAN_USE_ANY_COLUMN_FIELD_DESC);
        oprot.writeBool(struct.can_use_any_column);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCan_use_min_max_count_opt()) {
        oprot.writeFieldBegin(CAN_USE_MIN_MAX_COUNT_OPT_FIELD_DESC);
        oprot.writeBool(struct.can_use_min_max_count_opt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUse_partition_column_value_only()) {
        oprot.writeFieldBegin(USE_PARTITION_COLUMN_VALUE_ONLY_FIELD_DESC);
        oprot.writeBool(struct.use_partition_column_value_only);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMor_tuple_id()) {
        oprot.writeFieldBegin(MOR_TUPLE_ID_FIELD_DESC);
        oprot.writeI32(struct.mor_tuple_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THdfsScanNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THdfsScanNodeTupleScheme getScheme() {
      return new THdfsScanNodeTupleScheme();
    }
  }

  private static class THdfsScanNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<THdfsScanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THdfsScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTuple_id()) {
        optionals.set(0);
      }
      if (struct.isSetDEPRECATED_collection_conjuncts()) {
        optionals.set(1);
      }
      if (struct.isSetMin_max_conjuncts()) {
        optionals.set(2);
      }
      if (struct.isSetMin_max_tuple_id()) {
        optionals.set(3);
      }
      if (struct.isSetDEPRECATED_dictionary_filter_conjuncts()) {
        optionals.set(4);
      }
      if (struct.isSetPartition_conjuncts()) {
        optionals.set(5);
      }
      if (struct.isSetHive_column_names()) {
        optionals.set(6);
      }
      if (struct.isSetTable_name()) {
        optionals.set(7);
      }
      if (struct.isSetSql_predicates()) {
        optionals.set(8);
      }
      if (struct.isSetMin_max_sql_predicates()) {
        optionals.set(9);
      }
      if (struct.isSetPartition_sql_predicates()) {
        optionals.set(10);
      }
      if (struct.isSetCase_sensitive()) {
        optionals.set(11);
      }
      if (struct.isSetCloud_configuration()) {
        optionals.set(12);
      }
      if (struct.isSetCan_use_any_column()) {
        optionals.set(13);
      }
      if (struct.isSetCan_use_min_max_count_opt()) {
        optionals.set(14);
      }
      if (struct.isSetUse_partition_column_value_only()) {
        optionals.set(15);
      }
      if (struct.isSetMor_tuple_id()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetTuple_id()) {
        oprot.writeI32(struct.tuple_id);
      }
      if (struct.isSetDEPRECATED_collection_conjuncts()) {
        {
          oprot.writeI32(struct.DEPRECATED_collection_conjuncts.size());
          for (java.util.Map.Entry<java.lang.Integer, java.util.List<com.starrocks.thrift.TExpr>> _iter826 : struct.DEPRECATED_collection_conjuncts.entrySet())
          {
            oprot.writeI32(_iter826.getKey());
            {
              oprot.writeI32(_iter826.getValue().size());
              for (com.starrocks.thrift.TExpr _iter827 : _iter826.getValue())
              {
                _iter827.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetMin_max_conjuncts()) {
        {
          oprot.writeI32(struct.min_max_conjuncts.size());
          for (com.starrocks.thrift.TExpr _iter828 : struct.min_max_conjuncts)
          {
            _iter828.write(oprot);
          }
        }
      }
      if (struct.isSetMin_max_tuple_id()) {
        oprot.writeI32(struct.min_max_tuple_id);
      }
      if (struct.isSetDEPRECATED_dictionary_filter_conjuncts()) {
        {
          oprot.writeI32(struct.DEPRECATED_dictionary_filter_conjuncts.size());
          for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.lang.Integer>> _iter829 : struct.DEPRECATED_dictionary_filter_conjuncts.entrySet())
          {
            oprot.writeI32(_iter829.getKey());
            {
              oprot.writeI32(_iter829.getValue().size());
              for (int _iter830 : _iter829.getValue())
              {
                oprot.writeI32(_iter830);
              }
            }
          }
        }
      }
      if (struct.isSetPartition_conjuncts()) {
        {
          oprot.writeI32(struct.partition_conjuncts.size());
          for (com.starrocks.thrift.TExpr _iter831 : struct.partition_conjuncts)
          {
            _iter831.write(oprot);
          }
        }
      }
      if (struct.isSetHive_column_names()) {
        {
          oprot.writeI32(struct.hive_column_names.size());
          for (java.lang.String _iter832 : struct.hive_column_names)
          {
            oprot.writeString(_iter832);
          }
        }
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetSql_predicates()) {
        oprot.writeString(struct.sql_predicates);
      }
      if (struct.isSetMin_max_sql_predicates()) {
        oprot.writeString(struct.min_max_sql_predicates);
      }
      if (struct.isSetPartition_sql_predicates()) {
        oprot.writeString(struct.partition_sql_predicates);
      }
      if (struct.isSetCase_sensitive()) {
        oprot.writeBool(struct.case_sensitive);
      }
      if (struct.isSetCloud_configuration()) {
        struct.cloud_configuration.write(oprot);
      }
      if (struct.isSetCan_use_any_column()) {
        oprot.writeBool(struct.can_use_any_column);
      }
      if (struct.isSetCan_use_min_max_count_opt()) {
        oprot.writeBool(struct.can_use_min_max_count_opt);
      }
      if (struct.isSetUse_partition_column_value_only()) {
        oprot.writeBool(struct.use_partition_column_value_only);
      }
      if (struct.isSetMor_tuple_id()) {
        oprot.writeI32(struct.mor_tuple_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THdfsScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.tuple_id = iprot.readI32();
        struct.setTuple_idIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map833 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST); 
          struct.DEPRECATED_collection_conjuncts = new java.util.HashMap<java.lang.Integer,java.util.List<com.starrocks.thrift.TExpr>>(2*_map833.size);
          int _key834;
          @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> _val835;
          for (int _i836 = 0; _i836 < _map833.size; ++_i836)
          {
            _key834 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list837 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
              _val835 = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list837.size);
              @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem838;
              for (int _i839 = 0; _i839 < _list837.size; ++_i839)
              {
                _elem838 = new com.starrocks.thrift.TExpr();
                _elem838.read(iprot);
                _val835.add(_elem838);
              }
            }
            struct.DEPRECATED_collection_conjuncts.put(_key834, _val835);
          }
        }
        struct.setDEPRECATED_collection_conjunctsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list840 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.min_max_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list840.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem841;
          for (int _i842 = 0; _i842 < _list840.size; ++_i842)
          {
            _elem841 = new com.starrocks.thrift.TExpr();
            _elem841.read(iprot);
            struct.min_max_conjuncts.add(_elem841);
          }
        }
        struct.setMin_max_conjunctsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.min_max_tuple_id = iprot.readI32();
        struct.setMin_max_tuple_idIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map843 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST); 
          struct.DEPRECATED_dictionary_filter_conjuncts = new java.util.HashMap<java.lang.Integer,java.util.List<java.lang.Integer>>(2*_map843.size);
          int _key844;
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _val845;
          for (int _i846 = 0; _i846 < _map843.size; ++_i846)
          {
            _key844 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list847 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
              _val845 = new java.util.ArrayList<java.lang.Integer>(_list847.size);
              int _elem848;
              for (int _i849 = 0; _i849 < _list847.size; ++_i849)
              {
                _elem848 = iprot.readI32();
                _val845.add(_elem848);
              }
            }
            struct.DEPRECATED_dictionary_filter_conjuncts.put(_key844, _val845);
          }
        }
        struct.setDEPRECATED_dictionary_filter_conjunctsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list850 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.partition_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list850.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem851;
          for (int _i852 = 0; _i852 < _list850.size; ++_i852)
          {
            _elem851 = new com.starrocks.thrift.TExpr();
            _elem851.read(iprot);
            struct.partition_conjuncts.add(_elem851);
          }
        }
        struct.setPartition_conjunctsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list853 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.hive_column_names = new java.util.ArrayList<java.lang.String>(_list853.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem854;
          for (int _i855 = 0; _i855 < _list853.size; ++_i855)
          {
            _elem854 = iprot.readString();
            struct.hive_column_names.add(_elem854);
          }
        }
        struct.setHive_column_namesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sql_predicates = iprot.readString();
        struct.setSql_predicatesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.min_max_sql_predicates = iprot.readString();
        struct.setMin_max_sql_predicatesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.partition_sql_predicates = iprot.readString();
        struct.setPartition_sql_predicatesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.case_sensitive = iprot.readBool();
        struct.setCase_sensitiveIsSet(true);
      }
      if (incoming.get(12)) {
        struct.cloud_configuration = new com.starrocks.thrift.TCloudConfiguration();
        struct.cloud_configuration.read(iprot);
        struct.setCloud_configurationIsSet(true);
      }
      if (incoming.get(13)) {
        struct.can_use_any_column = iprot.readBool();
        struct.setCan_use_any_columnIsSet(true);
      }
      if (incoming.get(14)) {
        struct.can_use_min_max_count_opt = iprot.readBool();
        struct.setCan_use_min_max_count_optIsSet(true);
      }
      if (incoming.get(15)) {
        struct.use_partition_column_value_only = iprot.readBool();
        struct.setUse_partition_column_value_onlyIsSet(true);
      }
      if (incoming.get(16)) {
        struct.mor_tuple_id = iprot.readI32();
        struct.setMor_tuple_idIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

