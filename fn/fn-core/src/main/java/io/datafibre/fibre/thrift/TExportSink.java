/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TExportSink implements org.apache.thrift.TBase<TExportSink, TExportSink._Fields>, java.io.Serializable, Cloneable, Comparable<TExportSink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExportSink");

  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("file_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXPORT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("export_path", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("column_separator", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ROW_DELIMITER_FIELD_DESC = new org.apache.thrift.protocol.TField("row_delimiter", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BROKER_ADDRESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("broker_addresses", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField USE_BROKER_FIELD_DESC = new org.apache.thrift.protocol.TField("use_broker", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField HDFS_WRITE_BUFFER_SIZE_KB_FIELD_DESC = new org.apache.thrift.protocol.TField("hdfs_write_buffer_size_kb", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField HDFS_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("hdfs_properties", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField FILE_NAME_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("file_name_prefix", org.apache.thrift.protocol.TType.STRING, (short)30);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TExportSinkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TExportSinkTupleSchemeFactory();

  /**
   * 
   * @see TFileType
   */
  public @org.apache.thrift.annotation.Nullable TFileType file_type; // required
  public @org.apache.thrift.annotation.Nullable String export_path; // required
  public @org.apache.thrift.annotation.Nullable String column_separator; // required
  public @org.apache.thrift.annotation.Nullable String row_delimiter; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<TNetworkAddress> broker_addresses; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<String, String> properties; // optional
  public boolean use_broker; // optional
  public int hdfs_write_buffer_size_kb; // optional
  public @org.apache.thrift.annotation.Nullable THdfsProperties hdfs_properties; // optional
  public @org.apache.thrift.annotation.Nullable String file_name_prefix; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TFileType
     */
    FILE_TYPE((short)1, "file_type"),
    EXPORT_PATH((short)2, "export_path"),
    COLUMN_SEPARATOR((short)3, "column_separator"),
    ROW_DELIMITER((short)4, "row_delimiter"),
    BROKER_ADDRESSES((short)5, "broker_addresses"),
    PROPERTIES((short)6, "properties"),
    USE_BROKER((short)7, "use_broker"),
    HDFS_WRITE_BUFFER_SIZE_KB((short)8, "hdfs_write_buffer_size_kb"),
    HDFS_PROPERTIES((short)9, "hdfs_properties"),
    FILE_NAME_PREFIX((short)30, "file_name_prefix");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_TYPE
          return FILE_TYPE;
        case 2: // EXPORT_PATH
          return EXPORT_PATH;
        case 3: // COLUMN_SEPARATOR
          return COLUMN_SEPARATOR;
        case 4: // ROW_DELIMITER
          return ROW_DELIMITER;
        case 5: // BROKER_ADDRESSES
          return BROKER_ADDRESSES;
        case 6: // PROPERTIES
          return PROPERTIES;
        case 7: // USE_BROKER
          return USE_BROKER;
        case 8: // HDFS_WRITE_BUFFER_SIZE_KB
          return HDFS_WRITE_BUFFER_SIZE_KB;
        case 9: // HDFS_PROPERTIES
          return HDFS_PROPERTIES;
        case 30: // FILE_NAME_PREFIX
          return FILE_NAME_PREFIX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USE_BROKER_ISSET_ID = 0;
  private static final int __HDFS_WRITE_BUFFER_SIZE_KB_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BROKER_ADDRESSES,_Fields.PROPERTIES,_Fields.USE_BROKER,_Fields.HDFS_WRITE_BUFFER_SIZE_KB,_Fields.HDFS_PROPERTIES,_Fields.FILE_NAME_PREFIX};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("file_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFileType.class)));
    tmpMap.put(_Fields.EXPORT_PATH, new org.apache.thrift.meta_data.FieldMetaData("export_path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("column_separator", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROW_DELIMITER, new org.apache.thrift.meta_data.FieldMetaData("row_delimiter", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BROKER_ADDRESSES, new org.apache.thrift.meta_data.FieldMetaData("broker_addresses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNetworkAddress.class))));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USE_BROKER, new org.apache.thrift.meta_data.FieldMetaData("use_broker", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HDFS_WRITE_BUFFER_SIZE_KB, new org.apache.thrift.meta_data.FieldMetaData("hdfs_write_buffer_size_kb", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HDFS_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("hdfs_properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsProperties.class)));
    tmpMap.put(_Fields.FILE_NAME_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("file_name_prefix", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExportSink.class, metaDataMap);
  }

  public TExportSink() {
    this.hdfs_write_buffer_size_kb = 0;

  }

  public TExportSink(
    TFileType file_type,
    String export_path,
    String column_separator,
    String row_delimiter)
  {
    this();
    this.file_type = file_type;
    this.export_path = export_path;
    this.column_separator = column_separator;
    this.row_delimiter = row_delimiter;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExportSink(TExportSink other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFile_type()) {
      this.file_type = other.file_type;
    }
    if (other.isSetExport_path()) {
      this.export_path = other.export_path;
    }
    if (other.isSetColumn_separator()) {
      this.column_separator = other.column_separator;
    }
    if (other.isSetRow_delimiter()) {
      this.row_delimiter = other.row_delimiter;
    }
    if (other.isSetBroker_addresses()) {
      java.util.List<TNetworkAddress> __this__broker_addresses = new java.util.ArrayList<TNetworkAddress>(other.broker_addresses.size());
      for (TNetworkAddress other_element : other.broker_addresses) {
        __this__broker_addresses.add(new TNetworkAddress(other_element));
      }
      this.broker_addresses = __this__broker_addresses;
    }
    if (other.isSetProperties()) {
      java.util.Map<String, String> __this__properties = new java.util.HashMap<String, String>(other.properties);
      this.properties = __this__properties;
    }
    this.use_broker = other.use_broker;
    this.hdfs_write_buffer_size_kb = other.hdfs_write_buffer_size_kb;
    if (other.isSetHdfs_properties()) {
      this.hdfs_properties = new THdfsProperties(other.hdfs_properties);
    }
    if (other.isSetFile_name_prefix()) {
      this.file_name_prefix = other.file_name_prefix;
    }
  }

  @Override
  public TExportSink deepCopy() {
    return new TExportSink(this);
  }

  @Override
  public void clear() {
    this.file_type = null;
    this.export_path = null;
    this.column_separator = null;
    this.row_delimiter = null;
    this.broker_addresses = null;
    this.properties = null;
    setUse_brokerIsSet(false);
    this.use_broker = false;
    this.hdfs_write_buffer_size_kb = 0;

    this.hdfs_properties = null;
    this.file_name_prefix = null;
  }

  /**
   * 
   * @see TFileType
   */
  @org.apache.thrift.annotation.Nullable
  public TFileType getFile_type() {
    return this.file_type;
  }

  /**
   * 
   * @see TFileType
   */
  public TExportSink setFile_type(@org.apache.thrift.annotation.Nullable TFileType file_type) {
    this.file_type = file_type;
    return this;
  }

  public void unsetFile_type() {
    this.file_type = null;
  }

  /** Returns true if field file_type is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_type() {
    return this.file_type != null;
  }

  public void setFile_typeIsSet(boolean value) {
    if (!value) {
      this.file_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getExport_path() {
    return this.export_path;
  }

  public TExportSink setExport_path(@org.apache.thrift.annotation.Nullable String export_path) {
    this.export_path = export_path;
    return this;
  }

  public void unsetExport_path() {
    this.export_path = null;
  }

  /** Returns true if field export_path is set (has been assigned a value) and false otherwise */
  public boolean isSetExport_path() {
    return this.export_path != null;
  }

  public void setExport_pathIsSet(boolean value) {
    if (!value) {
      this.export_path = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getColumn_separator() {
    return this.column_separator;
  }

  public TExportSink setColumn_separator(@org.apache.thrift.annotation.Nullable String column_separator) {
    this.column_separator = column_separator;
    return this;
  }

  public void unsetColumn_separator() {
    this.column_separator = null;
  }

  /** Returns true if field column_separator is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_separator() {
    return this.column_separator != null;
  }

  public void setColumn_separatorIsSet(boolean value) {
    if (!value) {
      this.column_separator = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getRow_delimiter() {
    return this.row_delimiter;
  }

  public TExportSink setRow_delimiter(@org.apache.thrift.annotation.Nullable String row_delimiter) {
    this.row_delimiter = row_delimiter;
    return this;
  }

  public void unsetRow_delimiter() {
    this.row_delimiter = null;
  }

  /** Returns true if field row_delimiter is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_delimiter() {
    return this.row_delimiter != null;
  }

  public void setRow_delimiterIsSet(boolean value) {
    if (!value) {
      this.row_delimiter = null;
    }
  }

  public int getBroker_addressesSize() {
    return (this.broker_addresses == null) ? 0 : this.broker_addresses.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TNetworkAddress> getBroker_addressesIterator() {
    return (this.broker_addresses == null) ? null : this.broker_addresses.iterator();
  }

  public void addToBroker_addresses(TNetworkAddress elem) {
    if (this.broker_addresses == null) {
      this.broker_addresses = new java.util.ArrayList<TNetworkAddress>();
    }
    this.broker_addresses.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TNetworkAddress> getBroker_addresses() {
    return this.broker_addresses;
  }

  public TExportSink setBroker_addresses(@org.apache.thrift.annotation.Nullable java.util.List<TNetworkAddress> broker_addresses) {
    this.broker_addresses = broker_addresses;
    return this;
  }

  public void unsetBroker_addresses() {
    this.broker_addresses = null;
  }

  /** Returns true if field broker_addresses is set (has been assigned a value) and false otherwise */
  public boolean isSetBroker_addresses() {
    return this.broker_addresses != null;
  }

  public void setBroker_addressesIsSet(boolean value) {
    if (!value) {
      this.broker_addresses = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(String key, String val) {
    if (this.properties == null) {
      this.properties = new java.util.HashMap<String, String>();
    }
    this.properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<String, String> getProperties() {
    return this.properties;
  }

  public TExportSink setProperties(@org.apache.thrift.annotation.Nullable java.util.Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public boolean isUse_broker() {
    return this.use_broker;
  }

  public TExportSink setUse_broker(boolean use_broker) {
    this.use_broker = use_broker;
    setUse_brokerIsSet(true);
    return this;
  }

  public void unsetUse_broker() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_BROKER_ISSET_ID);
  }

  /** Returns true if field use_broker is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_broker() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_BROKER_ISSET_ID);
  }

  public void setUse_brokerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_BROKER_ISSET_ID, value);
  }

  public int getHdfs_write_buffer_size_kb() {
    return this.hdfs_write_buffer_size_kb;
  }

  public TExportSink setHdfs_write_buffer_size_kb(int hdfs_write_buffer_size_kb) {
    this.hdfs_write_buffer_size_kb = hdfs_write_buffer_size_kb;
    setHdfs_write_buffer_size_kbIsSet(true);
    return this;
  }

  public void unsetHdfs_write_buffer_size_kb() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HDFS_WRITE_BUFFER_SIZE_KB_ISSET_ID);
  }

  /** Returns true if field hdfs_write_buffer_size_kb is set (has been assigned a value) and false otherwise */
  public boolean isSetHdfs_write_buffer_size_kb() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HDFS_WRITE_BUFFER_SIZE_KB_ISSET_ID);
  }

  public void setHdfs_write_buffer_size_kbIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HDFS_WRITE_BUFFER_SIZE_KB_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public THdfsProperties getHdfs_properties() {
    return this.hdfs_properties;
  }

  public TExportSink setHdfs_properties(@org.apache.thrift.annotation.Nullable THdfsProperties hdfs_properties) {
    this.hdfs_properties = hdfs_properties;
    return this;
  }

  public void unsetHdfs_properties() {
    this.hdfs_properties = null;
  }

  /** Returns true if field hdfs_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetHdfs_properties() {
    return this.hdfs_properties != null;
  }

  public void setHdfs_propertiesIsSet(boolean value) {
    if (!value) {
      this.hdfs_properties = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getFile_name_prefix() {
    return this.file_name_prefix;
  }

  public TExportSink setFile_name_prefix(@org.apache.thrift.annotation.Nullable String file_name_prefix) {
    this.file_name_prefix = file_name_prefix;
    return this;
  }

  public void unsetFile_name_prefix() {
    this.file_name_prefix = null;
  }

  /** Returns true if field file_name_prefix is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_name_prefix() {
    return this.file_name_prefix != null;
  }

  public void setFile_name_prefixIsSet(boolean value) {
    if (!value) {
      this.file_name_prefix = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case FILE_TYPE:
      if (value == null) {
        unsetFile_type();
      } else {
        setFile_type((TFileType)value);
      }
      break;

    case EXPORT_PATH:
      if (value == null) {
        unsetExport_path();
      } else {
        setExport_path((String)value);
      }
      break;

    case COLUMN_SEPARATOR:
      if (value == null) {
        unsetColumn_separator();
      } else {
        setColumn_separator((String)value);
      }
      break;

    case ROW_DELIMITER:
      if (value == null) {
        unsetRow_delimiter();
      } else {
        setRow_delimiter((String)value);
      }
      break;

    case BROKER_ADDRESSES:
      if (value == null) {
        unsetBroker_addresses();
      } else {
        setBroker_addresses((java.util.List<TNetworkAddress>)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.Map<String, String>)value);
      }
      break;

    case USE_BROKER:
      if (value == null) {
        unsetUse_broker();
      } else {
        setUse_broker((Boolean)value);
      }
      break;

    case HDFS_WRITE_BUFFER_SIZE_KB:
      if (value == null) {
        unsetHdfs_write_buffer_size_kb();
      } else {
        setHdfs_write_buffer_size_kb((Integer)value);
      }
      break;

    case HDFS_PROPERTIES:
      if (value == null) {
        unsetHdfs_properties();
      } else {
        setHdfs_properties((THdfsProperties)value);
      }
      break;

    case FILE_NAME_PREFIX:
      if (value == null) {
        unsetFile_name_prefix();
      } else {
        setFile_name_prefix((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_TYPE:
      return getFile_type();

    case EXPORT_PATH:
      return getExport_path();

    case COLUMN_SEPARATOR:
      return getColumn_separator();

    case ROW_DELIMITER:
      return getRow_delimiter();

    case BROKER_ADDRESSES:
      return getBroker_addresses();

    case PROPERTIES:
      return getProperties();

    case USE_BROKER:
      return isUse_broker();

    case HDFS_WRITE_BUFFER_SIZE_KB:
      return getHdfs_write_buffer_size_kb();

    case HDFS_PROPERTIES:
      return getHdfs_properties();

    case FILE_NAME_PREFIX:
      return getFile_name_prefix();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILE_TYPE:
      return isSetFile_type();
    case EXPORT_PATH:
      return isSetExport_path();
    case COLUMN_SEPARATOR:
      return isSetColumn_separator();
    case ROW_DELIMITER:
      return isSetRow_delimiter();
    case BROKER_ADDRESSES:
      return isSetBroker_addresses();
    case PROPERTIES:
      return isSetProperties();
    case USE_BROKER:
      return isSetUse_broker();
    case HDFS_WRITE_BUFFER_SIZE_KB:
      return isSetHdfs_write_buffer_size_kb();
    case HDFS_PROPERTIES:
      return isSetHdfs_properties();
    case FILE_NAME_PREFIX:
      return isSetFile_name_prefix();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof TExportSink)
      return this.equals((TExportSink)that);
    return false;
  }

  public boolean equals(TExportSink that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_file_type = true && this.isSetFile_type();
    boolean that_present_file_type = true && that.isSetFile_type();
    if (this_present_file_type || that_present_file_type) {
      if (!(this_present_file_type && that_present_file_type))
        return false;
      if (!this.file_type.equals(that.file_type))
        return false;
    }

    boolean this_present_export_path = true && this.isSetExport_path();
    boolean that_present_export_path = true && that.isSetExport_path();
    if (this_present_export_path || that_present_export_path) {
      if (!(this_present_export_path && that_present_export_path))
        return false;
      if (!this.export_path.equals(that.export_path))
        return false;
    }

    boolean this_present_column_separator = true && this.isSetColumn_separator();
    boolean that_present_column_separator = true && that.isSetColumn_separator();
    if (this_present_column_separator || that_present_column_separator) {
      if (!(this_present_column_separator && that_present_column_separator))
        return false;
      if (!this.column_separator.equals(that.column_separator))
        return false;
    }

    boolean this_present_row_delimiter = true && this.isSetRow_delimiter();
    boolean that_present_row_delimiter = true && that.isSetRow_delimiter();
    if (this_present_row_delimiter || that_present_row_delimiter) {
      if (!(this_present_row_delimiter && that_present_row_delimiter))
        return false;
      if (!this.row_delimiter.equals(that.row_delimiter))
        return false;
    }

    boolean this_present_broker_addresses = true && this.isSetBroker_addresses();
    boolean that_present_broker_addresses = true && that.isSetBroker_addresses();
    if (this_present_broker_addresses || that_present_broker_addresses) {
      if (!(this_present_broker_addresses && that_present_broker_addresses))
        return false;
      if (!this.broker_addresses.equals(that.broker_addresses))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_use_broker = true && this.isSetUse_broker();
    boolean that_present_use_broker = true && that.isSetUse_broker();
    if (this_present_use_broker || that_present_use_broker) {
      if (!(this_present_use_broker && that_present_use_broker))
        return false;
      if (this.use_broker != that.use_broker)
        return false;
    }

    boolean this_present_hdfs_write_buffer_size_kb = true && this.isSetHdfs_write_buffer_size_kb();
    boolean that_present_hdfs_write_buffer_size_kb = true && that.isSetHdfs_write_buffer_size_kb();
    if (this_present_hdfs_write_buffer_size_kb || that_present_hdfs_write_buffer_size_kb) {
      if (!(this_present_hdfs_write_buffer_size_kb && that_present_hdfs_write_buffer_size_kb))
        return false;
      if (this.hdfs_write_buffer_size_kb != that.hdfs_write_buffer_size_kb)
        return false;
    }

    boolean this_present_hdfs_properties = true && this.isSetHdfs_properties();
    boolean that_present_hdfs_properties = true && that.isSetHdfs_properties();
    if (this_present_hdfs_properties || that_present_hdfs_properties) {
      if (!(this_present_hdfs_properties && that_present_hdfs_properties))
        return false;
      if (!this.hdfs_properties.equals(that.hdfs_properties))
        return false;
    }

    boolean this_present_file_name_prefix = true && this.isSetFile_name_prefix();
    boolean that_present_file_name_prefix = true && that.isSetFile_name_prefix();
    if (this_present_file_name_prefix || that_present_file_name_prefix) {
      if (!(this_present_file_name_prefix && that_present_file_name_prefix))
        return false;
      if (!this.file_name_prefix.equals(that.file_name_prefix))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFile_type()) ? 131071 : 524287);
    if (isSetFile_type())
      hashCode = hashCode * 8191 + file_type.getValue();

    hashCode = hashCode * 8191 + ((isSetExport_path()) ? 131071 : 524287);
    if (isSetExport_path())
      hashCode = hashCode * 8191 + export_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumn_separator()) ? 131071 : 524287);
    if (isSetColumn_separator())
      hashCode = hashCode * 8191 + column_separator.hashCode();

    hashCode = hashCode * 8191 + ((isSetRow_delimiter()) ? 131071 : 524287);
    if (isSetRow_delimiter())
      hashCode = hashCode * 8191 + row_delimiter.hashCode();

    hashCode = hashCode * 8191 + ((isSetBroker_addresses()) ? 131071 : 524287);
    if (isSetBroker_addresses())
      hashCode = hashCode * 8191 + broker_addresses.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetUse_broker()) ? 131071 : 524287);
    if (isSetUse_broker())
      hashCode = hashCode * 8191 + ((use_broker) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetHdfs_write_buffer_size_kb()) ? 131071 : 524287);
    if (isSetHdfs_write_buffer_size_kb())
      hashCode = hashCode * 8191 + hdfs_write_buffer_size_kb;

    hashCode = hashCode * 8191 + ((isSetHdfs_properties()) ? 131071 : 524287);
    if (isSetHdfs_properties())
      hashCode = hashCode * 8191 + hdfs_properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetFile_name_prefix()) ? 131071 : 524287);
    if (isSetFile_name_prefix())
      hashCode = hashCode * 8191 + file_name_prefix.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TExportSink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetFile_type(), other.isSetFile_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_type, other.file_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetExport_path(), other.isSetExport_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExport_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.export_path, other.export_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetColumn_separator(), other.isSetColumn_separator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_separator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_separator, other.column_separator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetRow_delimiter(), other.isSetRow_delimiter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_delimiter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_delimiter, other.row_delimiter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetBroker_addresses(), other.isSetBroker_addresses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBroker_addresses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.broker_addresses, other.broker_addresses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetProperties(), other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetUse_broker(), other.isSetUse_broker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_broker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_broker, other.use_broker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetHdfs_write_buffer_size_kb(), other.isSetHdfs_write_buffer_size_kb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHdfs_write_buffer_size_kb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hdfs_write_buffer_size_kb, other.hdfs_write_buffer_size_kb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetHdfs_properties(), other.isSetHdfs_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHdfs_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hdfs_properties, other.hdfs_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetFile_name_prefix(), other.isSetFile_name_prefix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_name_prefix()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_name_prefix, other.file_name_prefix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TExportSink(");
    boolean first = true;

    sb.append("file_type:");
    if (this.file_type == null) {
      sb.append("null");
    } else {
      sb.append(this.file_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("export_path:");
    if (this.export_path == null) {
      sb.append("null");
    } else {
      sb.append(this.export_path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("column_separator:");
    if (this.column_separator == null) {
      sb.append("null");
    } else {
      sb.append(this.column_separator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("row_delimiter:");
    if (this.row_delimiter == null) {
      sb.append("null");
    } else {
      sb.append(this.row_delimiter);
    }
    first = false;
    if (isSetBroker_addresses()) {
      if (!first) sb.append(", ");
      sb.append("broker_addresses:");
      if (this.broker_addresses == null) {
        sb.append("null");
      } else {
        sb.append(this.broker_addresses);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    if (isSetUse_broker()) {
      if (!first) sb.append(", ");
      sb.append("use_broker:");
      sb.append(this.use_broker);
      first = false;
    }
    if (isSetHdfs_write_buffer_size_kb()) {
      if (!first) sb.append(", ");
      sb.append("hdfs_write_buffer_size_kb:");
      sb.append(this.hdfs_write_buffer_size_kb);
      first = false;
    }
    if (isSetHdfs_properties()) {
      if (!first) sb.append(", ");
      sb.append("hdfs_properties:");
      if (this.hdfs_properties == null) {
        sb.append("null");
      } else {
        sb.append(this.hdfs_properties);
      }
      first = false;
    }
    if (isSetFile_name_prefix()) {
      if (!first) sb.append(", ");
      sb.append("file_name_prefix:");
      if (this.file_name_prefix == null) {
        sb.append("null");
      } else {
        sb.append(this.file_name_prefix);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (file_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_type' was not present! Struct: " + toString());
    }
    if (export_path == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'export_path' was not present! Struct: " + toString());
    }
    if (column_separator == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_separator' was not present! Struct: " + toString());
    }
    if (row_delimiter == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'row_delimiter' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (hdfs_properties != null) {
      hdfs_properties.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExportSinkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExportSinkStandardScheme getScheme() {
      return new TExportSinkStandardScheme();
    }
  }

  private static class TExportSinkStandardScheme extends org.apache.thrift.scheme.StandardScheme<TExportSink> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TExportSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.file_type = TFileType.findByValue(iprot.readI32());
              struct.setFile_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPORT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.export_path = iprot.readString();
              struct.setExport_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_SEPARATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_separator = iprot.readString();
              struct.setColumn_separatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROW_DELIMITER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.row_delimiter = iprot.readString();
              struct.setRow_delimiterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BROKER_ADDRESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                struct.broker_addresses = new java.util.ArrayList<TNetworkAddress>(_list58.size);
                @org.apache.thrift.annotation.Nullable TNetworkAddress _elem59;
                for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                {
                  _elem59 = new TNetworkAddress();
                  _elem59.read(iprot);
                  struct.broker_addresses.add(_elem59);
                }
                iprot.readListEnd();
              }
              struct.setBroker_addressesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map61 = iprot.readMapBegin();
                struct.properties = new java.util.HashMap<String, String>(2 * _map61.size);
                @org.apache.thrift.annotation.Nullable String _key62;
                @org.apache.thrift.annotation.Nullable String _val63;
                for (int _i64 = 0; _i64 < _map61.size; ++_i64)
                {
                  _key62 = iprot.readString();
                  _val63 = iprot.readString();
                  struct.properties.put(_key62, _val63);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USE_BROKER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_broker = iprot.readBool();
              struct.setUse_brokerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HDFS_WRITE_BUFFER_SIZE_KB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hdfs_write_buffer_size_kb = iprot.readI32();
              struct.setHdfs_write_buffer_size_kbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HDFS_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hdfs_properties = new THdfsProperties();
              struct.hdfs_properties.read(iprot);
              struct.setHdfs_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // FILE_NAME_PREFIX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_name_prefix = iprot.readString();
              struct.setFile_name_prefixIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TExportSink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.file_type != null) {
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.file_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.export_path != null) {
        oprot.writeFieldBegin(EXPORT_PATH_FIELD_DESC);
        oprot.writeString(struct.export_path);
        oprot.writeFieldEnd();
      }
      if (struct.column_separator != null) {
        oprot.writeFieldBegin(COLUMN_SEPARATOR_FIELD_DESC);
        oprot.writeString(struct.column_separator);
        oprot.writeFieldEnd();
      }
      if (struct.row_delimiter != null) {
        oprot.writeFieldBegin(ROW_DELIMITER_FIELD_DESC);
        oprot.writeString(struct.row_delimiter);
        oprot.writeFieldEnd();
      }
      if (struct.broker_addresses != null) {
        if (struct.isSetBroker_addresses()) {
          oprot.writeFieldBegin(BROKER_ADDRESSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.broker_addresses.size()));
            for (TNetworkAddress _iter65 : struct.broker_addresses)
            {
              _iter65.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (java.util.Map.Entry<String, String> _iter66 : struct.properties.entrySet())
            {
              oprot.writeString(_iter66.getKey());
              oprot.writeString(_iter66.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUse_broker()) {
        oprot.writeFieldBegin(USE_BROKER_FIELD_DESC);
        oprot.writeBool(struct.use_broker);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHdfs_write_buffer_size_kb()) {
        oprot.writeFieldBegin(HDFS_WRITE_BUFFER_SIZE_KB_FIELD_DESC);
        oprot.writeI32(struct.hdfs_write_buffer_size_kb);
        oprot.writeFieldEnd();
      }
      if (struct.hdfs_properties != null) {
        if (struct.isSetHdfs_properties()) {
          oprot.writeFieldBegin(HDFS_PROPERTIES_FIELD_DESC);
          struct.hdfs_properties.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.file_name_prefix != null) {
        if (struct.isSetFile_name_prefix()) {
          oprot.writeFieldBegin(FILE_NAME_PREFIX_FIELD_DESC);
          oprot.writeString(struct.file_name_prefix);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExportSinkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExportSinkTupleScheme getScheme() {
      return new TExportSinkTupleScheme();
    }
  }

  private static class TExportSinkTupleScheme extends org.apache.thrift.scheme.TupleScheme<TExportSink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExportSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.file_type.getValue());
      oprot.writeString(struct.export_path);
      oprot.writeString(struct.column_separator);
      oprot.writeString(struct.row_delimiter);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBroker_addresses()) {
        optionals.set(0);
      }
      if (struct.isSetProperties()) {
        optionals.set(1);
      }
      if (struct.isSetUse_broker()) {
        optionals.set(2);
      }
      if (struct.isSetHdfs_write_buffer_size_kb()) {
        optionals.set(3);
      }
      if (struct.isSetHdfs_properties()) {
        optionals.set(4);
      }
      if (struct.isSetFile_name_prefix()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetBroker_addresses()) {
        {
          oprot.writeI32(struct.broker_addresses.size());
          for (TNetworkAddress _iter67 : struct.broker_addresses)
          {
            _iter67.write(oprot);
          }
        }
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (java.util.Map.Entry<String, String> _iter68 : struct.properties.entrySet())
          {
            oprot.writeString(_iter68.getKey());
            oprot.writeString(_iter68.getValue());
          }
        }
      }
      if (struct.isSetUse_broker()) {
        oprot.writeBool(struct.use_broker);
      }
      if (struct.isSetHdfs_write_buffer_size_kb()) {
        oprot.writeI32(struct.hdfs_write_buffer_size_kb);
      }
      if (struct.isSetHdfs_properties()) {
        struct.hdfs_properties.write(oprot);
      }
      if (struct.isSetFile_name_prefix()) {
        oprot.writeString(struct.file_name_prefix);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExportSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.file_type = TFileType.findByValue(iprot.readI32());
      struct.setFile_typeIsSet(true);
      struct.export_path = iprot.readString();
      struct.setExport_pathIsSet(true);
      struct.column_separator = iprot.readString();
      struct.setColumn_separatorIsSet(true);
      struct.row_delimiter = iprot.readString();
      struct.setRow_delimiterIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list69 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.broker_addresses = new java.util.ArrayList<TNetworkAddress>(_list69.size);
          @org.apache.thrift.annotation.Nullable TNetworkAddress _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = new TNetworkAddress();
            _elem70.read(iprot);
            struct.broker_addresses.add(_elem70);
          }
        }
        struct.setBroker_addressesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map72 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.properties = new java.util.HashMap<String, String>(2 * _map72.size);
          @org.apache.thrift.annotation.Nullable String _key73;
          @org.apache.thrift.annotation.Nullable String _val74;
          for (int _i75 = 0; _i75 < _map72.size; ++_i75)
          {
            _key73 = iprot.readString();
            _val74 = iprot.readString();
            struct.properties.put(_key73, _val74);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.use_broker = iprot.readBool();
        struct.setUse_brokerIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hdfs_write_buffer_size_kb = iprot.readI32();
        struct.setHdfs_write_buffer_size_kbIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hdfs_properties = new THdfsProperties();
        struct.hdfs_properties.read(iprot);
        struct.setHdfs_propertiesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.file_name_prefix = iprot.readString();
        struct.setFile_name_prefixIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

