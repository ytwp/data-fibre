/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TMVEpoch implements org.apache.thrift.TBase<TMVEpoch, TMVEpoch._Fields>, java.io.Serializable, Cloneable, Comparable<TMVEpoch> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMVEpoch");

  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField EPOCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("epoch_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField START_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("start_ts", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COMMIT_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("commit_ts", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMVEpochStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMVEpochTupleSchemeFactory();

  public long txn_id; // optional
  public long epoch_id; // optional
  public long start_ts; // optional
  public long commit_ts; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TXN_ID((short)1, "txn_id"),
    EPOCH_ID((short)2, "epoch_id"),
    START_TS((short)3, "start_ts"),
    COMMIT_TS((short)4, "commit_ts");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TXN_ID
          return TXN_ID;
        case 2: // EPOCH_ID
          return EPOCH_ID;
        case 3: // START_TS
          return START_TS;
        case 4: // COMMIT_TS
          return COMMIT_TS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TXN_ID_ISSET_ID = 0;
  private static final int __EPOCH_ID_ISSET_ID = 1;
  private static final int __START_TS_ISSET_ID = 2;
  private static final int __COMMIT_TS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TXN_ID,_Fields.EPOCH_ID,_Fields.START_TS,_Fields.COMMIT_TS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txn_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTransactionId")));
    tmpMap.put(_Fields.EPOCH_ID, new org.apache.thrift.meta_data.FieldMetaData("epoch_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TS, new org.apache.thrift.meta_data.FieldMetaData("start_ts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTimestamp")));
    tmpMap.put(_Fields.COMMIT_TS, new org.apache.thrift.meta_data.FieldMetaData("commit_ts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTimestamp")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMVEpoch.class, metaDataMap);
  }

  public TMVEpoch() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMVEpoch(TMVEpoch other) {
    __isset_bitfield = other.__isset_bitfield;
    this.txn_id = other.txn_id;
    this.epoch_id = other.epoch_id;
    this.start_ts = other.start_ts;
    this.commit_ts = other.commit_ts;
  }

  @Override
  public TMVEpoch deepCopy() {
    return new TMVEpoch(this);
  }

  @Override
  public void clear() {
    setTxn_idIsSet(false);
    this.txn_id = 0;
    setEpoch_idIsSet(false);
    this.epoch_id = 0;
    setStart_tsIsSet(false);
    this.start_ts = 0;
    setCommit_tsIsSet(false);
    this.commit_ts = 0;
  }

  public long getTxn_id() {
    return this.txn_id;
  }

  public TMVEpoch setTxn_id(long txn_id) {
    this.txn_id = txn_id;
    setTxn_idIsSet(true);
    return this;
  }

  public void unsetTxn_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  /** Returns true if field txn_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  public void setTxn_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXN_ID_ISSET_ID, value);
  }

  public long getEpoch_id() {
    return this.epoch_id;
  }

  public TMVEpoch setEpoch_id(long epoch_id) {
    this.epoch_id = epoch_id;
    setEpoch_idIsSet(true);
    return this;
  }

  public void unsetEpoch_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EPOCH_ID_ISSET_ID);
  }

  /** Returns true if field epoch_id is set (has been assigned a value) and false otherwise */
  public boolean isSetEpoch_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EPOCH_ID_ISSET_ID);
  }

  public void setEpoch_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EPOCH_ID_ISSET_ID, value);
  }

  public long getStart_ts() {
    return this.start_ts;
  }

  public TMVEpoch setStart_ts(long start_ts) {
    this.start_ts = start_ts;
    setStart_tsIsSet(true);
    return this;
  }

  public void unsetStart_ts() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_TS_ISSET_ID);
  }

  /** Returns true if field start_ts is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_ts() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_TS_ISSET_ID);
  }

  public void setStart_tsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_TS_ISSET_ID, value);
  }

  public long getCommit_ts() {
    return this.commit_ts;
  }

  public TMVEpoch setCommit_ts(long commit_ts) {
    this.commit_ts = commit_ts;
    setCommit_tsIsSet(true);
    return this;
  }

  public void unsetCommit_ts() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMIT_TS_ISSET_ID);
  }

  /** Returns true if field commit_ts is set (has been assigned a value) and false otherwise */
  public boolean isSetCommit_ts() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMIT_TS_ISSET_ID);
  }

  public void setCommit_tsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMIT_TS_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TXN_ID:
      if (value == null) {
        unsetTxn_id();
      } else {
        setTxn_id((java.lang.Long)value);
      }
      break;

    case EPOCH_ID:
      if (value == null) {
        unsetEpoch_id();
      } else {
        setEpoch_id((java.lang.Long)value);
      }
      break;

    case START_TS:
      if (value == null) {
        unsetStart_ts();
      } else {
        setStart_ts((java.lang.Long)value);
      }
      break;

    case COMMIT_TS:
      if (value == null) {
        unsetCommit_ts();
      } else {
        setCommit_ts((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TXN_ID:
      return getTxn_id();

    case EPOCH_ID:
      return getEpoch_id();

    case START_TS:
      return getStart_ts();

    case COMMIT_TS:
      return getCommit_ts();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TXN_ID:
      return isSetTxn_id();
    case EPOCH_ID:
      return isSetEpoch_id();
    case START_TS:
      return isSetStart_ts();
    case COMMIT_TS:
      return isSetCommit_ts();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TMVEpoch)
      return this.equals((TMVEpoch)that);
    return false;
  }

  public boolean equals(TMVEpoch that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_txn_id = true && this.isSetTxn_id();
    boolean that_present_txn_id = true && that.isSetTxn_id();
    if (this_present_txn_id || that_present_txn_id) {
      if (!(this_present_txn_id && that_present_txn_id))
        return false;
      if (this.txn_id != that.txn_id)
        return false;
    }

    boolean this_present_epoch_id = true && this.isSetEpoch_id();
    boolean that_present_epoch_id = true && that.isSetEpoch_id();
    if (this_present_epoch_id || that_present_epoch_id) {
      if (!(this_present_epoch_id && that_present_epoch_id))
        return false;
      if (this.epoch_id != that.epoch_id)
        return false;
    }

    boolean this_present_start_ts = true && this.isSetStart_ts();
    boolean that_present_start_ts = true && that.isSetStart_ts();
    if (this_present_start_ts || that_present_start_ts) {
      if (!(this_present_start_ts && that_present_start_ts))
        return false;
      if (this.start_ts != that.start_ts)
        return false;
    }

    boolean this_present_commit_ts = true && this.isSetCommit_ts();
    boolean that_present_commit_ts = true && that.isSetCommit_ts();
    if (this_present_commit_ts || that_present_commit_ts) {
      if (!(this_present_commit_ts && that_present_commit_ts))
        return false;
      if (this.commit_ts != that.commit_ts)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTxn_id()) ? 131071 : 524287);
    if (isSetTxn_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txn_id);

    hashCode = hashCode * 8191 + ((isSetEpoch_id()) ? 131071 : 524287);
    if (isSetEpoch_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(epoch_id);

    hashCode = hashCode * 8191 + ((isSetStart_ts()) ? 131071 : 524287);
    if (isSetStart_ts())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(start_ts);

    hashCode = hashCode * 8191 + ((isSetCommit_ts()) ? 131071 : 524287);
    if (isSetCommit_ts())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(commit_ts);

    return hashCode;
  }

  @Override
  public int compareTo(TMVEpoch other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTxn_id(), other.isSetTxn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_id, other.txn_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEpoch_id(), other.isSetEpoch_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEpoch_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.epoch_id, other.epoch_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStart_ts(), other.isSetStart_ts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_ts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_ts, other.start_ts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCommit_ts(), other.isSetCommit_ts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommit_ts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commit_ts, other.commit_ts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMVEpoch(");
    boolean first = true;

    if (isSetTxn_id()) {
      sb.append("txn_id:");
      sb.append(this.txn_id);
      first = false;
    }
    if (isSetEpoch_id()) {
      if (!first) sb.append(", ");
      sb.append("epoch_id:");
      sb.append(this.epoch_id);
      first = false;
    }
    if (isSetStart_ts()) {
      if (!first) sb.append(", ");
      sb.append("start_ts:");
      sb.append(this.start_ts);
      first = false;
    }
    if (isSetCommit_ts()) {
      if (!first) sb.append(", ");
      sb.append("commit_ts:");
      sb.append(this.commit_ts);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMVEpochStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMVEpochStandardScheme getScheme() {
      return new TMVEpochStandardScheme();
    }
  }

  private static class TMVEpochStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMVEpoch> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TMVEpoch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txn_id = iprot.readI64();
              struct.setTxn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EPOCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.epoch_id = iprot.readI64();
              struct.setEpoch_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_TS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start_ts = iprot.readI64();
              struct.setStart_tsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMIT_TS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commit_ts = iprot.readI64();
              struct.setCommit_tsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TMVEpoch struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTxn_id()) {
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txn_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEpoch_id()) {
        oprot.writeFieldBegin(EPOCH_ID_FIELD_DESC);
        oprot.writeI64(struct.epoch_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStart_ts()) {
        oprot.writeFieldBegin(START_TS_FIELD_DESC);
        oprot.writeI64(struct.start_ts);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommit_ts()) {
        oprot.writeFieldBegin(COMMIT_TS_FIELD_DESC);
        oprot.writeI64(struct.commit_ts);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMVEpochTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMVEpochTupleScheme getScheme() {
      return new TMVEpochTupleScheme();
    }
  }

  private static class TMVEpochTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMVEpoch> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMVEpoch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTxn_id()) {
        optionals.set(0);
      }
      if (struct.isSetEpoch_id()) {
        optionals.set(1);
      }
      if (struct.isSetStart_ts()) {
        optionals.set(2);
      }
      if (struct.isSetCommit_ts()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTxn_id()) {
        oprot.writeI64(struct.txn_id);
      }
      if (struct.isSetEpoch_id()) {
        oprot.writeI64(struct.epoch_id);
      }
      if (struct.isSetStart_ts()) {
        oprot.writeI64(struct.start_ts);
      }
      if (struct.isSetCommit_ts()) {
        oprot.writeI64(struct.commit_ts);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMVEpoch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.txn_id = iprot.readI64();
        struct.setTxn_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.epoch_id = iprot.readI64();
        struct.setEpoch_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.start_ts = iprot.readI64();
        struct.setStart_tsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.commit_ts = iprot.readI64();
        struct.setCommit_tsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

