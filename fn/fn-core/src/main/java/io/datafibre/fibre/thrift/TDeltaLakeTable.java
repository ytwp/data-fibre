/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TDeltaLakeTable implements org.apache.thrift.TBase<TDeltaLakeTable, TDeltaLakeTable._Fields>, java.io.Serializable, Cloneable, Comparable<TDeltaLakeTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDeltaLakeTable");

  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PARTITION_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_columns", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField PARTITION_PREFIXES_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_prefixes", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDeltaLakeTableStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDeltaLakeTableTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String location; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TColumn> columns; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TColumn> partition_columns; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,THdfsPartition> partitions; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> partition_prefixes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCATION((short)1, "location"),
    COLUMNS((short)2, "columns"),
    PARTITION_COLUMNS((short)3, "partition_columns"),
    PARTITIONS((short)4, "partitions"),
    PARTITION_PREFIXES((short)5, "partition_prefixes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCATION
          return LOCATION;
        case 2: // COLUMNS
          return COLUMNS;
        case 3: // PARTITION_COLUMNS
          return PARTITION_COLUMNS;
        case 4: // PARTITIONS
          return PARTITIONS;
        case 5: // PARTITION_PREFIXES
          return PARTITION_PREFIXES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LOCATION,_Fields.COLUMNS,_Fields.PARTITION_COLUMNS,_Fields.PARTITIONS,_Fields.PARTITION_PREFIXES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumn.class))));
    tmpMap.put(_Fields.PARTITION_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("partition_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumn.class))));
    tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsPartition.class))));
    tmpMap.put(_Fields.PARTITION_PREFIXES, new org.apache.thrift.meta_data.FieldMetaData("partition_prefixes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDeltaLakeTable.class, metaDataMap);
  }

  public TDeltaLakeTable() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDeltaLakeTable(TDeltaLakeTable other) {
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetColumns()) {
      java.util.List<TColumn> __this__columns = new java.util.ArrayList<TColumn>(other.columns.size());
      for (TColumn other_element : other.columns) {
        __this__columns.add(new TColumn(other_element));
      }
      this.columns = __this__columns;
    }
    if (other.isSetPartition_columns()) {
      java.util.List<TColumn> __this__partition_columns = new java.util.ArrayList<TColumn>(other.partition_columns.size());
      for (TColumn other_element : other.partition_columns) {
        __this__partition_columns.add(new TColumn(other_element));
      }
      this.partition_columns = __this__partition_columns;
    }
    if (other.isSetPartitions()) {
      java.util.Map<java.lang.Long,THdfsPartition> __this__partitions = new java.util.HashMap<java.lang.Long,THdfsPartition>(other.partitions.size());
      for (java.util.Map.Entry<java.lang.Long, THdfsPartition> other_element : other.partitions.entrySet()) {

        java.lang.Long other_element_key = other_element.getKey();
        THdfsPartition other_element_value = other_element.getValue();

        java.lang.Long __this__partitions_copy_key = other_element_key;

        THdfsPartition __this__partitions_copy_value = new THdfsPartition(other_element_value);

        __this__partitions.put(__this__partitions_copy_key, __this__partitions_copy_value);
      }
      this.partitions = __this__partitions;
    }
    if (other.isSetPartition_prefixes()) {
      java.util.List<java.lang.String> __this__partition_prefixes = new java.util.ArrayList<java.lang.String>(other.partition_prefixes);
      this.partition_prefixes = __this__partition_prefixes;
    }
  }

  @Override
  public TDeltaLakeTable deepCopy() {
    return new TDeltaLakeTable(this);
  }

  @Override
  public void clear() {
    this.location = null;
    this.columns = null;
    this.partition_columns = null;
    this.partitions = null;
    this.partition_prefixes = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLocation() {
    return this.location;
  }

  public TDeltaLakeTable setLocation(@org.apache.thrift.annotation.Nullable java.lang.String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(TColumn elem) {
    if (this.columns == null) {
      this.columns = new java.util.ArrayList<TColumn>();
    }
    this.columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TColumn> getColumns() {
    return this.columns;
  }

  public TDeltaLakeTable setColumns(@org.apache.thrift.annotation.Nullable java.util.List<TColumn> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public int getPartition_columnsSize() {
    return (this.partition_columns == null) ? 0 : this.partition_columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TColumn> getPartition_columnsIterator() {
    return (this.partition_columns == null) ? null : this.partition_columns.iterator();
  }

  public void addToPartition_columns(TColumn elem) {
    if (this.partition_columns == null) {
      this.partition_columns = new java.util.ArrayList<TColumn>();
    }
    this.partition_columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TColumn> getPartition_columns() {
    return this.partition_columns;
  }

  public TDeltaLakeTable setPartition_columns(@org.apache.thrift.annotation.Nullable java.util.List<TColumn> partition_columns) {
    this.partition_columns = partition_columns;
    return this;
  }

  public void unsetPartition_columns() {
    this.partition_columns = null;
  }

  /** Returns true if field partition_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_columns() {
    return this.partition_columns != null;
  }

  public void setPartition_columnsIsSet(boolean value) {
    if (!value) {
      this.partition_columns = null;
    }
  }

  public int getPartitionsSize() {
    return (this.partitions == null) ? 0 : this.partitions.size();
  }

  public void putToPartitions(long key, THdfsPartition val) {
    if (this.partitions == null) {
      this.partitions = new java.util.HashMap<java.lang.Long,THdfsPartition>();
    }
    this.partitions.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Long,THdfsPartition> getPartitions() {
    return this.partitions;
  }

  public TDeltaLakeTable setPartitions(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,THdfsPartition> partitions) {
    this.partitions = partitions;
    return this;
  }

  public void unsetPartitions() {
    this.partitions = null;
  }

  /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitions() {
    return this.partitions != null;
  }

  public void setPartitionsIsSet(boolean value) {
    if (!value) {
      this.partitions = null;
    }
  }

  public int getPartition_prefixesSize() {
    return (this.partition_prefixes == null) ? 0 : this.partition_prefixes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getPartition_prefixesIterator() {
    return (this.partition_prefixes == null) ? null : this.partition_prefixes.iterator();
  }

  public void addToPartition_prefixes(java.lang.String elem) {
    if (this.partition_prefixes == null) {
      this.partition_prefixes = new java.util.ArrayList<java.lang.String>();
    }
    this.partition_prefixes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getPartition_prefixes() {
    return this.partition_prefixes;
  }

  public TDeltaLakeTable setPartition_prefixes(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> partition_prefixes) {
    this.partition_prefixes = partition_prefixes;
    return this;
  }

  public void unsetPartition_prefixes() {
    this.partition_prefixes = null;
  }

  /** Returns true if field partition_prefixes is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_prefixes() {
    return this.partition_prefixes != null;
  }

  public void setPartition_prefixesIsSet(boolean value) {
    if (!value) {
      this.partition_prefixes = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((java.lang.String)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((java.util.List<TColumn>)value);
      }
      break;

    case PARTITION_COLUMNS:
      if (value == null) {
        unsetPartition_columns();
      } else {
        setPartition_columns((java.util.List<TColumn>)value);
      }
      break;

    case PARTITIONS:
      if (value == null) {
        unsetPartitions();
      } else {
        setPartitions((java.util.Map<java.lang.Long,THdfsPartition>)value);
      }
      break;

    case PARTITION_PREFIXES:
      if (value == null) {
        unsetPartition_prefixes();
      } else {
        setPartition_prefixes((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCATION:
      return getLocation();

    case COLUMNS:
      return getColumns();

    case PARTITION_COLUMNS:
      return getPartition_columns();

    case PARTITIONS:
      return getPartitions();

    case PARTITION_PREFIXES:
      return getPartition_prefixes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LOCATION:
      return isSetLocation();
    case COLUMNS:
      return isSetColumns();
    case PARTITION_COLUMNS:
      return isSetPartition_columns();
    case PARTITIONS:
      return isSetPartitions();
    case PARTITION_PREFIXES:
      return isSetPartition_prefixes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TDeltaLakeTable)
      return this.equals((TDeltaLakeTable)that);
    return false;
  }

  public boolean equals(TDeltaLakeTable that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_partition_columns = true && this.isSetPartition_columns();
    boolean that_present_partition_columns = true && that.isSetPartition_columns();
    if (this_present_partition_columns || that_present_partition_columns) {
      if (!(this_present_partition_columns && that_present_partition_columns))
        return false;
      if (!this.partition_columns.equals(that.partition_columns))
        return false;
    }

    boolean this_present_partitions = true && this.isSetPartitions();
    boolean that_present_partitions = true && that.isSetPartitions();
    if (this_present_partitions || that_present_partitions) {
      if (!(this_present_partitions && that_present_partitions))
        return false;
      if (!this.partitions.equals(that.partitions))
        return false;
    }

    boolean this_present_partition_prefixes = true && this.isSetPartition_prefixes();
    boolean that_present_partition_prefixes = true && that.isSetPartition_prefixes();
    if (this_present_partition_prefixes || that_present_partition_prefixes) {
      if (!(this_present_partition_prefixes && that_present_partition_prefixes))
        return false;
      if (!this.partition_prefixes.equals(that.partition_prefixes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
    if (isSetLocation())
      hashCode = hashCode * 8191 + location.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
    if (isSetColumns())
      hashCode = hashCode * 8191 + columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_columns()) ? 131071 : 524287);
    if (isSetPartition_columns())
      hashCode = hashCode * 8191 + partition_columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartitions()) ? 131071 : 524287);
    if (isSetPartitions())
      hashCode = hashCode * 8191 + partitions.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_prefixes()) ? 131071 : 524287);
    if (isSetPartition_prefixes())
      hashCode = hashCode * 8191 + partition_prefixes.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDeltaLakeTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLocation(), other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_columns(), other.isSetPartition_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_columns, other.partition_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitions(), other.isSetPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, other.partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_prefixes(), other.isSetPartition_prefixes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_prefixes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_prefixes, other.partition_prefixes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDeltaLakeTable(");
    boolean first = true;

    if (isSetLocation()) {
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetColumns()) {
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
    }
    if (isSetPartition_columns()) {
      if (!first) sb.append(", ");
      sb.append("partition_columns:");
      if (this.partition_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_columns);
      }
      first = false;
    }
    if (isSetPartitions()) {
      if (!first) sb.append(", ");
      sb.append("partitions:");
      if (this.partitions == null) {
        sb.append("null");
      } else {
        sb.append(this.partitions);
      }
      first = false;
    }
    if (isSetPartition_prefixes()) {
      if (!first) sb.append(", ");
      sb.append("partition_prefixes:");
      if (this.partition_prefixes == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_prefixes);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDeltaLakeTableStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDeltaLakeTableStandardScheme getScheme() {
      return new TDeltaLakeTableStandardScheme();
    }
  }

  private static class TDeltaLakeTableStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDeltaLakeTable> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TDeltaLakeTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list354 = iprot.readListBegin();
                struct.columns = new java.util.ArrayList<TColumn>(_list354.size);
                @org.apache.thrift.annotation.Nullable TColumn _elem355;
                for (int _i356 = 0; _i356 < _list354.size; ++_i356)
                {
                  _elem355 = new TColumn();
                  _elem355.read(iprot);
                  struct.columns.add(_elem355);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTITION_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list357 = iprot.readListBegin();
                struct.partition_columns = new java.util.ArrayList<TColumn>(_list357.size);
                @org.apache.thrift.annotation.Nullable TColumn _elem358;
                for (int _i359 = 0; _i359 < _list357.size; ++_i359)
                {
                  _elem358 = new TColumn();
                  _elem358.read(iprot);
                  struct.partition_columns.add(_elem358);
                }
                iprot.readListEnd();
              }
              struct.setPartition_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map360 = iprot.readMapBegin();
                struct.partitions = new java.util.HashMap<java.lang.Long,THdfsPartition>(2*_map360.size);
                long _key361;
                @org.apache.thrift.annotation.Nullable THdfsPartition _val362;
                for (int _i363 = 0; _i363 < _map360.size; ++_i363)
                {
                  _key361 = iprot.readI64();
                  _val362 = new THdfsPartition();
                  _val362.read(iprot);
                  struct.partitions.put(_key361, _val362);
                }
                iprot.readMapEnd();
              }
              struct.setPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARTITION_PREFIXES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list364 = iprot.readListBegin();
                struct.partition_prefixes = new java.util.ArrayList<java.lang.String>(_list364.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem365;
                for (int _i366 = 0; _i366 < _list364.size; ++_i366)
                {
                  _elem365 = iprot.readString();
                  struct.partition_prefixes.add(_elem365);
                }
                iprot.readListEnd();
              }
              struct.setPartition_prefixesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TDeltaLakeTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columns != null) {
        if (struct.isSetColumns()) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
            for (TColumn _iter367 : struct.columns)
            {
              _iter367.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_columns != null) {
        if (struct.isSetPartition_columns()) {
          oprot.writeFieldBegin(PARTITION_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_columns.size()));
            for (TColumn _iter368 : struct.partition_columns)
            {
              _iter368.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partitions != null) {
        if (struct.isSetPartitions()) {
          oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.partitions.size()));
            for (java.util.Map.Entry<java.lang.Long, THdfsPartition> _iter369 : struct.partitions.entrySet())
            {
              oprot.writeI64(_iter369.getKey());
              _iter369.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_prefixes != null) {
        if (struct.isSetPartition_prefixes()) {
          oprot.writeFieldBegin(PARTITION_PREFIXES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.partition_prefixes.size()));
            for (java.lang.String _iter370 : struct.partition_prefixes)
            {
              oprot.writeString(_iter370);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDeltaLakeTableTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDeltaLakeTableTupleScheme getScheme() {
      return new TDeltaLakeTableTupleScheme();
    }
  }

  private static class TDeltaLakeTableTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDeltaLakeTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDeltaLakeTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLocation()) {
        optionals.set(0);
      }
      if (struct.isSetColumns()) {
        optionals.set(1);
      }
      if (struct.isSetPartition_columns()) {
        optionals.set(2);
      }
      if (struct.isSetPartitions()) {
        optionals.set(3);
      }
      if (struct.isSetPartition_prefixes()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetColumns()) {
        {
          oprot.writeI32(struct.columns.size());
          for (TColumn _iter371 : struct.columns)
          {
            _iter371.write(oprot);
          }
        }
      }
      if (struct.isSetPartition_columns()) {
        {
          oprot.writeI32(struct.partition_columns.size());
          for (TColumn _iter372 : struct.partition_columns)
          {
            _iter372.write(oprot);
          }
        }
      }
      if (struct.isSetPartitions()) {
        {
          oprot.writeI32(struct.partitions.size());
          for (java.util.Map.Entry<java.lang.Long, THdfsPartition> _iter373 : struct.partitions.entrySet())
          {
            oprot.writeI64(_iter373.getKey());
            _iter373.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetPartition_prefixes()) {
        {
          oprot.writeI32(struct.partition_prefixes.size());
          for (java.lang.String _iter374 : struct.partition_prefixes)
          {
            oprot.writeString(_iter374);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDeltaLakeTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list375 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.columns = new java.util.ArrayList<TColumn>(_list375.size);
          @org.apache.thrift.annotation.Nullable TColumn _elem376;
          for (int _i377 = 0; _i377 < _list375.size; ++_i377)
          {
            _elem376 = new TColumn();
            _elem376.read(iprot);
            struct.columns.add(_elem376);
          }
        }
        struct.setColumnsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list378 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.partition_columns = new java.util.ArrayList<TColumn>(_list378.size);
          @org.apache.thrift.annotation.Nullable TColumn _elem379;
          for (int _i380 = 0; _i380 < _list378.size; ++_i380)
          {
            _elem379 = new TColumn();
            _elem379.read(iprot);
            struct.partition_columns.add(_elem379);
          }
        }
        struct.setPartition_columnsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map381 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT); 
          struct.partitions = new java.util.HashMap<java.lang.Long,THdfsPartition>(2*_map381.size);
          long _key382;
          @org.apache.thrift.annotation.Nullable THdfsPartition _val383;
          for (int _i384 = 0; _i384 < _map381.size; ++_i384)
          {
            _key382 = iprot.readI64();
            _val383 = new THdfsPartition();
            _val383.read(iprot);
            struct.partitions.put(_key382, _val383);
          }
        }
        struct.setPartitionsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list385 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.partition_prefixes = new java.util.ArrayList<java.lang.String>(_list385.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem386;
          for (int _i387 = 0; _i387 < _list385.size; ++_i387)
          {
            _elem386 = iprot.readString();
            struct.partition_prefixes.add(_elem386);
          }
        }
        struct.setPartition_prefixesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

