/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TInternalScanRange implements org.apache.thrift.TBase<TInternalScanRange, TInternalScanRange._Fields>, java.io.Serializable, Cloneable, Comparable<TInternalScanRange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TInternalScanRange");

  private static final org.apache.thrift.protocol.TField HOSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hosts", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_hash", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("version_hash", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PARTITION_COLUMN_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_column_ranges", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("index_name", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("row_count", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField FILL_DATA_CACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("fill_data_cache", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField BUCKET_SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("bucket_sequence", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TInternalScanRangeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TInternalScanRangeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TNetworkAddress> hosts; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String schema_hash; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String version; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String version_hash; // required
  public long tablet_id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<TKeyRange> partition_column_ranges; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String index_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional
  public long partition_id; // optional
  public long row_count; // optional
  public boolean fill_data_cache; // optional
  public int bucket_sequence; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOSTS((short)1, "hosts"),
    SCHEMA_HASH((short)2, "schema_hash"),
    VERSION((short)3, "version"),
    VERSION_HASH((short)4, "version_hash"),
    TABLET_ID((short)5, "tablet_id"),
    DB_NAME((short)6, "db_name"),
    PARTITION_COLUMN_RANGES((short)7, "partition_column_ranges"),
    INDEX_NAME((short)8, "index_name"),
    TABLE_NAME((short)9, "table_name"),
    PARTITION_ID((short)10, "partition_id"),
    ROW_COUNT((short)11, "row_count"),
    FILL_DATA_CACHE((short)12, "fill_data_cache"),
    BUCKET_SEQUENCE((short)13, "bucket_sequence");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOSTS
          return HOSTS;
        case 2: // SCHEMA_HASH
          return SCHEMA_HASH;
        case 3: // VERSION
          return VERSION;
        case 4: // VERSION_HASH
          return VERSION_HASH;
        case 5: // TABLET_ID
          return TABLET_ID;
        case 6: // DB_NAME
          return DB_NAME;
        case 7: // PARTITION_COLUMN_RANGES
          return PARTITION_COLUMN_RANGES;
        case 8: // INDEX_NAME
          return INDEX_NAME;
        case 9: // TABLE_NAME
          return TABLE_NAME;
        case 10: // PARTITION_ID
          return PARTITION_ID;
        case 11: // ROW_COUNT
          return ROW_COUNT;
        case 12: // FILL_DATA_CACHE
          return FILL_DATA_CACHE;
        case 13: // BUCKET_SEQUENCE
          return BUCKET_SEQUENCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLET_ID_ISSET_ID = 0;
  private static final int __PARTITION_ID_ISSET_ID = 1;
  private static final int __ROW_COUNT_ISSET_ID = 2;
  private static final int __FILL_DATA_CACHE_ISSET_ID = 3;
  private static final int __BUCKET_SEQUENCE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARTITION_COLUMN_RANGES,_Fields.INDEX_NAME,_Fields.TABLE_NAME,_Fields.PARTITION_ID,_Fields.ROW_COUNT,_Fields.FILL_DATA_CACHE,_Fields.BUCKET_SEQUENCE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOSTS, new org.apache.thrift.meta_data.FieldMetaData("hosts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TNetworkAddress.class))));
    tmpMap.put(_Fields.SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("schema_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("version_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION_COLUMN_RANGES, new org.apache.thrift.meta_data.FieldMetaData("partition_column_ranges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKeyRange.class))));
    tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("index_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("row_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILL_DATA_CACHE, new org.apache.thrift.meta_data.FieldMetaData("fill_data_cache", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BUCKET_SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("bucket_sequence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TInternalScanRange.class, metaDataMap);
  }

  public TInternalScanRange() {
    this.fill_data_cache = true;

  }

  public TInternalScanRange(
    java.util.List<io.datafibre.fibre.thrift.TNetworkAddress> hosts,
    java.lang.String schema_hash,
    java.lang.String version,
    java.lang.String version_hash,
    long tablet_id,
    java.lang.String db_name)
  {
    this();
    this.hosts = hosts;
    this.schema_hash = schema_hash;
    this.version = version;
    this.version_hash = version_hash;
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    this.db_name = db_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TInternalScanRange(TInternalScanRange other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHosts()) {
      java.util.List<io.datafibre.fibre.thrift.TNetworkAddress> __this__hosts = new java.util.ArrayList<io.datafibre.fibre.thrift.TNetworkAddress>(other.hosts.size());
      for (io.datafibre.fibre.thrift.TNetworkAddress other_element : other.hosts) {
        __this__hosts.add(new io.datafibre.fibre.thrift.TNetworkAddress(other_element));
      }
      this.hosts = __this__hosts;
    }
    if (other.isSetSchema_hash()) {
      this.schema_hash = other.schema_hash;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetVersion_hash()) {
      this.version_hash = other.version_hash;
    }
    this.tablet_id = other.tablet_id;
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    if (other.isSetPartition_column_ranges()) {
      java.util.List<TKeyRange> __this__partition_column_ranges = new java.util.ArrayList<TKeyRange>(other.partition_column_ranges.size());
      for (TKeyRange other_element : other.partition_column_ranges) {
        __this__partition_column_ranges.add(new TKeyRange(other_element));
      }
      this.partition_column_ranges = __this__partition_column_ranges;
    }
    if (other.isSetIndex_name()) {
      this.index_name = other.index_name;
    }
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    this.partition_id = other.partition_id;
    this.row_count = other.row_count;
    this.fill_data_cache = other.fill_data_cache;
    this.bucket_sequence = other.bucket_sequence;
  }

  @Override
  public TInternalScanRange deepCopy() {
    return new TInternalScanRange(this);
  }

  @Override
  public void clear() {
    this.hosts = null;
    this.schema_hash = null;
    this.version = null;
    this.version_hash = null;
    setTablet_idIsSet(false);
    this.tablet_id = 0;
    this.db_name = null;
    this.partition_column_ranges = null;
    this.index_name = null;
    this.table_name = null;
    setPartition_idIsSet(false);
    this.partition_id = 0;
    setRow_countIsSet(false);
    this.row_count = 0;
    this.fill_data_cache = true;

    setBucket_sequenceIsSet(false);
    this.bucket_sequence = 0;
  }

  public int getHostsSize() {
    return (this.hosts == null) ? 0 : this.hosts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TNetworkAddress> getHostsIterator() {
    return (this.hosts == null) ? null : this.hosts.iterator();
  }

  public void addToHosts(io.datafibre.fibre.thrift.TNetworkAddress elem) {
    if (this.hosts == null) {
      this.hosts = new java.util.ArrayList<io.datafibre.fibre.thrift.TNetworkAddress>();
    }
    this.hosts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TNetworkAddress> getHosts() {
    return this.hosts;
  }

  public TInternalScanRange setHosts(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TNetworkAddress> hosts) {
    this.hosts = hosts;
    return this;
  }

  public void unsetHosts() {
    this.hosts = null;
  }

  /** Returns true if field hosts is set (has been assigned a value) and false otherwise */
  public boolean isSetHosts() {
    return this.hosts != null;
  }

  public void setHostsIsSet(boolean value) {
    if (!value) {
      this.hosts = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSchema_hash() {
    return this.schema_hash;
  }

  public TInternalScanRange setSchema_hash(@org.apache.thrift.annotation.Nullable java.lang.String schema_hash) {
    this.schema_hash = schema_hash;
    return this;
  }

  public void unsetSchema_hash() {
    this.schema_hash = null;
  }

  /** Returns true if field schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_hash() {
    return this.schema_hash != null;
  }

  public void setSchema_hashIsSet(boolean value) {
    if (!value) {
      this.schema_hash = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVersion() {
    return this.version;
  }

  public TInternalScanRange setVersion(@org.apache.thrift.annotation.Nullable java.lang.String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVersion_hash() {
    return this.version_hash;
  }

  public TInternalScanRange setVersion_hash(@org.apache.thrift.annotation.Nullable java.lang.String version_hash) {
    this.version_hash = version_hash;
    return this;
  }

  public void unsetVersion_hash() {
    this.version_hash = null;
  }

  /** Returns true if field version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_hash() {
    return this.version_hash != null;
  }

  public void setVersion_hashIsSet(boolean value) {
    if (!value) {
      this.version_hash = null;
    }
  }

  public long getTablet_id() {
    return this.tablet_id;
  }

  public TInternalScanRange setTablet_id(long tablet_id) {
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    return this;
  }

  public void unsetTablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb_name() {
    return this.db_name;
  }

  public TInternalScanRange setDb_name(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  public int getPartition_column_rangesSize() {
    return (this.partition_column_ranges == null) ? 0 : this.partition_column_ranges.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TKeyRange> getPartition_column_rangesIterator() {
    return (this.partition_column_ranges == null) ? null : this.partition_column_ranges.iterator();
  }

  public void addToPartition_column_ranges(TKeyRange elem) {
    if (this.partition_column_ranges == null) {
      this.partition_column_ranges = new java.util.ArrayList<TKeyRange>();
    }
    this.partition_column_ranges.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TKeyRange> getPartition_column_ranges() {
    return this.partition_column_ranges;
  }

  public TInternalScanRange setPartition_column_ranges(@org.apache.thrift.annotation.Nullable java.util.List<TKeyRange> partition_column_ranges) {
    this.partition_column_ranges = partition_column_ranges;
    return this;
  }

  public void unsetPartition_column_ranges() {
    this.partition_column_ranges = null;
  }

  /** Returns true if field partition_column_ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_column_ranges() {
    return this.partition_column_ranges != null;
  }

  public void setPartition_column_rangesIsSet(boolean value) {
    if (!value) {
      this.partition_column_ranges = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIndex_name() {
    return this.index_name;
  }

  public TInternalScanRange setIndex_name(@org.apache.thrift.annotation.Nullable java.lang.String index_name) {
    this.index_name = index_name;
    return this;
  }

  public void unsetIndex_name() {
    this.index_name = null;
  }

  /** Returns true if field index_name is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_name() {
    return this.index_name != null;
  }

  public void setIndex_nameIsSet(boolean value) {
    if (!value) {
      this.index_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_name() {
    return this.table_name;
  }

  public TInternalScanRange setTable_name(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public TInternalScanRange setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    return this;
  }

  public void unsetPartition_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  public long getRow_count() {
    return this.row_count;
  }

  public TInternalScanRange setRow_count(long row_count) {
    this.row_count = row_count;
    setRow_countIsSet(true);
    return this;
  }

  public void unsetRow_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROW_COUNT_ISSET_ID);
  }

  /** Returns true if field row_count is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROW_COUNT_ISSET_ID);
  }

  public void setRow_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROW_COUNT_ISSET_ID, value);
  }

  public boolean isFill_data_cache() {
    return this.fill_data_cache;
  }

  public TInternalScanRange setFill_data_cache(boolean fill_data_cache) {
    this.fill_data_cache = fill_data_cache;
    setFill_data_cacheIsSet(true);
    return this;
  }

  public void unsetFill_data_cache() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILL_DATA_CACHE_ISSET_ID);
  }

  /** Returns true if field fill_data_cache is set (has been assigned a value) and false otherwise */
  public boolean isSetFill_data_cache() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILL_DATA_CACHE_ISSET_ID);
  }

  public void setFill_data_cacheIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILL_DATA_CACHE_ISSET_ID, value);
  }

  public int getBucket_sequence() {
    return this.bucket_sequence;
  }

  public TInternalScanRange setBucket_sequence(int bucket_sequence) {
    this.bucket_sequence = bucket_sequence;
    setBucket_sequenceIsSet(true);
    return this;
  }

  public void unsetBucket_sequence() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUCKET_SEQUENCE_ISSET_ID);
  }

  /** Returns true if field bucket_sequence is set (has been assigned a value) and false otherwise */
  public boolean isSetBucket_sequence() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUCKET_SEQUENCE_ISSET_ID);
  }

  public void setBucket_sequenceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUCKET_SEQUENCE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case HOSTS:
      if (value == null) {
        unsetHosts();
      } else {
        setHosts((java.util.List<io.datafibre.fibre.thrift.TNetworkAddress>)value);
      }
      break;

    case SCHEMA_HASH:
      if (value == null) {
        unsetSchema_hash();
      } else {
        setSchema_hash((java.lang.String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.String)value);
      }
      break;

    case VERSION_HASH:
      if (value == null) {
        unsetVersion_hash();
      } else {
        setVersion_hash((java.lang.String)value);
      }
      break;

    case TABLET_ID:
      if (value == null) {
        unsetTablet_id();
      } else {
        setTablet_id((java.lang.Long)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((java.lang.String)value);
      }
      break;

    case PARTITION_COLUMN_RANGES:
      if (value == null) {
        unsetPartition_column_ranges();
      } else {
        setPartition_column_ranges((java.util.List<TKeyRange>)value);
      }
      break;

    case INDEX_NAME:
      if (value == null) {
        unsetIndex_name();
      } else {
        setIndex_name((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((java.lang.String)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((java.lang.Long)value);
      }
      break;

    case ROW_COUNT:
      if (value == null) {
        unsetRow_count();
      } else {
        setRow_count((java.lang.Long)value);
      }
      break;

    case FILL_DATA_CACHE:
      if (value == null) {
        unsetFill_data_cache();
      } else {
        setFill_data_cache((java.lang.Boolean)value);
      }
      break;

    case BUCKET_SEQUENCE:
      if (value == null) {
        unsetBucket_sequence();
      } else {
        setBucket_sequence((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HOSTS:
      return getHosts();

    case SCHEMA_HASH:
      return getSchema_hash();

    case VERSION:
      return getVersion();

    case VERSION_HASH:
      return getVersion_hash();

    case TABLET_ID:
      return getTablet_id();

    case DB_NAME:
      return getDb_name();

    case PARTITION_COLUMN_RANGES:
      return getPartition_column_ranges();

    case INDEX_NAME:
      return getIndex_name();

    case TABLE_NAME:
      return getTable_name();

    case PARTITION_ID:
      return getPartition_id();

    case ROW_COUNT:
      return getRow_count();

    case FILL_DATA_CACHE:
      return isFill_data_cache();

    case BUCKET_SEQUENCE:
      return getBucket_sequence();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HOSTS:
      return isSetHosts();
    case SCHEMA_HASH:
      return isSetSchema_hash();
    case VERSION:
      return isSetVersion();
    case VERSION_HASH:
      return isSetVersion_hash();
    case TABLET_ID:
      return isSetTablet_id();
    case DB_NAME:
      return isSetDb_name();
    case PARTITION_COLUMN_RANGES:
      return isSetPartition_column_ranges();
    case INDEX_NAME:
      return isSetIndex_name();
    case TABLE_NAME:
      return isSetTable_name();
    case PARTITION_ID:
      return isSetPartition_id();
    case ROW_COUNT:
      return isSetRow_count();
    case FILL_DATA_CACHE:
      return isSetFill_data_cache();
    case BUCKET_SEQUENCE:
      return isSetBucket_sequence();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TInternalScanRange)
      return this.equals((TInternalScanRange)that);
    return false;
  }

  public boolean equals(TInternalScanRange that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hosts = true && this.isSetHosts();
    boolean that_present_hosts = true && that.isSetHosts();
    if (this_present_hosts || that_present_hosts) {
      if (!(this_present_hosts && that_present_hosts))
        return false;
      if (!this.hosts.equals(that.hosts))
        return false;
    }

    boolean this_present_schema_hash = true && this.isSetSchema_hash();
    boolean that_present_schema_hash = true && that.isSetSchema_hash();
    if (this_present_schema_hash || that_present_schema_hash) {
      if (!(this_present_schema_hash && that_present_schema_hash))
        return false;
      if (!this.schema_hash.equals(that.schema_hash))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_version_hash = true && this.isSetVersion_hash();
    boolean that_present_version_hash = true && that.isSetVersion_hash();
    if (this_present_version_hash || that_present_version_hash) {
      if (!(this_present_version_hash && that_present_version_hash))
        return false;
      if (!this.version_hash.equals(that.version_hash))
        return false;
    }

    boolean this_present_tablet_id = true;
    boolean that_present_tablet_id = true;
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_partition_column_ranges = true && this.isSetPartition_column_ranges();
    boolean that_present_partition_column_ranges = true && that.isSetPartition_column_ranges();
    if (this_present_partition_column_ranges || that_present_partition_column_ranges) {
      if (!(this_present_partition_column_ranges && that_present_partition_column_ranges))
        return false;
      if (!this.partition_column_ranges.equals(that.partition_column_ranges))
        return false;
    }

    boolean this_present_index_name = true && this.isSetIndex_name();
    boolean that_present_index_name = true && that.isSetIndex_name();
    if (this_present_index_name || that_present_index_name) {
      if (!(this_present_index_name && that_present_index_name))
        return false;
      if (!this.index_name.equals(that.index_name))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_partition_id = true && this.isSetPartition_id();
    boolean that_present_partition_id = true && that.isSetPartition_id();
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_row_count = true && this.isSetRow_count();
    boolean that_present_row_count = true && that.isSetRow_count();
    if (this_present_row_count || that_present_row_count) {
      if (!(this_present_row_count && that_present_row_count))
        return false;
      if (this.row_count != that.row_count)
        return false;
    }

    boolean this_present_fill_data_cache = true && this.isSetFill_data_cache();
    boolean that_present_fill_data_cache = true && that.isSetFill_data_cache();
    if (this_present_fill_data_cache || that_present_fill_data_cache) {
      if (!(this_present_fill_data_cache && that_present_fill_data_cache))
        return false;
      if (this.fill_data_cache != that.fill_data_cache)
        return false;
    }

    boolean this_present_bucket_sequence = true && this.isSetBucket_sequence();
    boolean that_present_bucket_sequence = true && that.isSetBucket_sequence();
    if (this_present_bucket_sequence || that_present_bucket_sequence) {
      if (!(this_present_bucket_sequence && that_present_bucket_sequence))
        return false;
      if (this.bucket_sequence != that.bucket_sequence)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHosts()) ? 131071 : 524287);
    if (isSetHosts())
      hashCode = hashCode * 8191 + hosts.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchema_hash()) ? 131071 : 524287);
    if (isSetSchema_hash())
      hashCode = hashCode * 8191 + schema_hash.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + version.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion_hash()) ? 131071 : 524287);
    if (isSetVersion_hash())
      hashCode = hashCode * 8191 + version_hash.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tablet_id);

    hashCode = hashCode * 8191 + ((isSetDb_name()) ? 131071 : 524287);
    if (isSetDb_name())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_column_ranges()) ? 131071 : 524287);
    if (isSetPartition_column_ranges())
      hashCode = hashCode * 8191 + partition_column_ranges.hashCode();

    hashCode = hashCode * 8191 + ((isSetIndex_name()) ? 131071 : 524287);
    if (isSetIndex_name())
      hashCode = hashCode * 8191 + index_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_id()) ? 131071 : 524287);
    if (isSetPartition_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_id);

    hashCode = hashCode * 8191 + ((isSetRow_count()) ? 131071 : 524287);
    if (isSetRow_count())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(row_count);

    hashCode = hashCode * 8191 + ((isSetFill_data_cache()) ? 131071 : 524287);
    if (isSetFill_data_cache())
      hashCode = hashCode * 8191 + ((fill_data_cache) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBucket_sequence()) ? 131071 : 524287);
    if (isSetBucket_sequence())
      hashCode = hashCode * 8191 + bucket_sequence;

    return hashCode;
  }

  @Override
  public int compareTo(TInternalScanRange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetHosts(), other.isSetHosts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHosts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hosts, other.hosts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchema_hash(), other.isSetSchema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_hash, other.schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion_hash(), other.isSetVersion_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_hash, other.version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_id(), other.isSetTablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb_name(), other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_column_ranges(), other.isSetPartition_column_ranges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_column_ranges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_column_ranges, other.partition_column_ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIndex_name(), other.isSetIndex_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_name, other.index_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_name(), other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_id(), other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRow_count(), other.isSetRow_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_count, other.row_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFill_data_cache(), other.isSetFill_data_cache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFill_data_cache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fill_data_cache, other.fill_data_cache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBucket_sequence(), other.isSetBucket_sequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucket_sequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucket_sequence, other.bucket_sequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TInternalScanRange(");
    boolean first = true;

    sb.append("hosts:");
    if (this.hosts == null) {
      sb.append("null");
    } else {
      sb.append(this.hosts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("schema_hash:");
    if (this.schema_hash == null) {
      sb.append("null");
    } else {
      sb.append(this.schema_hash);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version_hash:");
    if (this.version_hash == null) {
      sb.append("null");
    } else {
      sb.append(this.version_hash);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tablet_id:");
    sb.append(this.tablet_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("db_name:");
    if (this.db_name == null) {
      sb.append("null");
    } else {
      sb.append(this.db_name);
    }
    first = false;
    if (isSetPartition_column_ranges()) {
      if (!first) sb.append(", ");
      sb.append("partition_column_ranges:");
      if (this.partition_column_ranges == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_column_ranges);
      }
      first = false;
    }
    if (isSetIndex_name()) {
      if (!first) sb.append(", ");
      sb.append("index_name:");
      if (this.index_name == null) {
        sb.append("null");
      } else {
        sb.append(this.index_name);
      }
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetPartition_id()) {
      if (!first) sb.append(", ");
      sb.append("partition_id:");
      sb.append(this.partition_id);
      first = false;
    }
    if (isSetRow_count()) {
      if (!first) sb.append(", ");
      sb.append("row_count:");
      sb.append(this.row_count);
      first = false;
    }
    if (isSetFill_data_cache()) {
      if (!first) sb.append(", ");
      sb.append("fill_data_cache:");
      sb.append(this.fill_data_cache);
      first = false;
    }
    if (isSetBucket_sequence()) {
      if (!first) sb.append(", ");
      sb.append("bucket_sequence:");
      sb.append(this.bucket_sequence);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (hosts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hosts' was not present! Struct: " + toString());
    }
    if (schema_hash == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'schema_hash' was not present! Struct: " + toString());
    }
    if (version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not present! Struct: " + toString());
    }
    if (version_hash == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version_hash' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'tablet_id' because it's a primitive and you chose the non-beans generator.
    if (db_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db_name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TInternalScanRangeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TInternalScanRangeStandardScheme getScheme() {
      return new TInternalScanRangeStandardScheme();
    }
  }

  private static class TInternalScanRangeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TInternalScanRange> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TInternalScanRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOSTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.hosts = new java.util.ArrayList<io.datafibre.fibre.thrift.TNetworkAddress>(_list0.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TNetworkAddress _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new io.datafibre.fibre.thrift.TNetworkAddress();
                  _elem1.read(iprot);
                  struct.hosts.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setHostsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.schema_hash = iprot.readString();
              struct.setSchema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version_hash = iprot.readString();
              struct.setVersion_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARTITION_COLUMN_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.partition_column_ranges = new java.util.ArrayList<TKeyRange>(_list3.size);
                @org.apache.thrift.annotation.Nullable TKeyRange _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new TKeyRange();
                  _elem4.read(iprot);
                  struct.partition_column_ranges.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setPartition_column_rangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INDEX_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.index_name = iprot.readString();
              struct.setIndex_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.row_count = iprot.readI64();
              struct.setRow_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FILL_DATA_CACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.fill_data_cache = iprot.readBool();
              struct.setFill_data_cacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BUCKET_SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bucket_sequence = iprot.readI32();
              struct.setBucket_sequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTablet_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tablet_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TInternalScanRange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hosts != null) {
        oprot.writeFieldBegin(HOSTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hosts.size()));
          for (io.datafibre.fibre.thrift.TNetworkAddress _iter6 : struct.hosts)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.schema_hash != null) {
        oprot.writeFieldBegin(SCHEMA_HASH_FIELD_DESC);
        oprot.writeString(struct.schema_hash);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.version_hash != null) {
        oprot.writeFieldBegin(VERSION_HASH_FIELD_DESC);
        oprot.writeString(struct.version_hash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
      oprot.writeI64(struct.tablet_id);
      oprot.writeFieldEnd();
      if (struct.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.db_name);
        oprot.writeFieldEnd();
      }
      if (struct.partition_column_ranges != null) {
        if (struct.isSetPartition_column_ranges()) {
          oprot.writeFieldBegin(PARTITION_COLUMN_RANGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_column_ranges.size()));
            for (TKeyRange _iter7 : struct.partition_column_ranges)
            {
              _iter7.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.index_name != null) {
        if (struct.isSetIndex_name()) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.index_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPartition_id()) {
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI64(struct.partition_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRow_count()) {
        oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
        oprot.writeI64(struct.row_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFill_data_cache()) {
        oprot.writeFieldBegin(FILL_DATA_CACHE_FIELD_DESC);
        oprot.writeBool(struct.fill_data_cache);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBucket_sequence()) {
        oprot.writeFieldBegin(BUCKET_SEQUENCE_FIELD_DESC);
        oprot.writeI32(struct.bucket_sequence);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TInternalScanRangeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TInternalScanRangeTupleScheme getScheme() {
      return new TInternalScanRangeTupleScheme();
    }
  }

  private static class TInternalScanRangeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TInternalScanRange> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TInternalScanRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.hosts.size());
        for (io.datafibre.fibre.thrift.TNetworkAddress _iter8 : struct.hosts)
        {
          _iter8.write(oprot);
        }
      }
      oprot.writeString(struct.schema_hash);
      oprot.writeString(struct.version);
      oprot.writeString(struct.version_hash);
      oprot.writeI64(struct.tablet_id);
      oprot.writeString(struct.db_name);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPartition_column_ranges()) {
        optionals.set(0);
      }
      if (struct.isSetIndex_name()) {
        optionals.set(1);
      }
      if (struct.isSetTable_name()) {
        optionals.set(2);
      }
      if (struct.isSetPartition_id()) {
        optionals.set(3);
      }
      if (struct.isSetRow_count()) {
        optionals.set(4);
      }
      if (struct.isSetFill_data_cache()) {
        optionals.set(5);
      }
      if (struct.isSetBucket_sequence()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetPartition_column_ranges()) {
        {
          oprot.writeI32(struct.partition_column_ranges.size());
          for (TKeyRange _iter9 : struct.partition_column_ranges)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetIndex_name()) {
        oprot.writeString(struct.index_name);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetPartition_id()) {
        oprot.writeI64(struct.partition_id);
      }
      if (struct.isSetRow_count()) {
        oprot.writeI64(struct.row_count);
      }
      if (struct.isSetFill_data_cache()) {
        oprot.writeBool(struct.fill_data_cache);
      }
      if (struct.isSetBucket_sequence()) {
        oprot.writeI32(struct.bucket_sequence);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TInternalScanRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list10 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.hosts = new java.util.ArrayList<io.datafibre.fibre.thrift.TNetworkAddress>(_list10.size);
        @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TNetworkAddress _elem11;
        for (int _i12 = 0; _i12 < _list10.size; ++_i12)
        {
          _elem11 = new io.datafibre.fibre.thrift.TNetworkAddress();
          _elem11.read(iprot);
          struct.hosts.add(_elem11);
        }
      }
      struct.setHostsIsSet(true);
      struct.schema_hash = iprot.readString();
      struct.setSchema_hashIsSet(true);
      struct.version = iprot.readString();
      struct.setVersionIsSet(true);
      struct.version_hash = iprot.readString();
      struct.setVersion_hashIsSet(true);
      struct.tablet_id = iprot.readI64();
      struct.setTablet_idIsSet(true);
      struct.db_name = iprot.readString();
      struct.setDb_nameIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.partition_column_ranges = new java.util.ArrayList<TKeyRange>(_list13.size);
          @org.apache.thrift.annotation.Nullable TKeyRange _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new TKeyRange();
            _elem14.read(iprot);
            struct.partition_column_ranges.add(_elem14);
          }
        }
        struct.setPartition_column_rangesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.index_name = iprot.readString();
        struct.setIndex_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.partition_id = iprot.readI64();
        struct.setPartition_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.row_count = iprot.readI64();
        struct.setRow_countIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fill_data_cache = iprot.readBool();
        struct.setFill_data_cacheIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bucket_sequence = iprot.readI32();
        struct.setBucket_sequenceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

