/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TCounterStrategy implements org.apache.thrift.TBase<TCounterStrategy, TCounterStrategy._Fields>, java.io.Serializable, Cloneable, Comparable<TCounterStrategy> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCounterStrategy");

  private static final org.apache.thrift.protocol.TField AGGREGATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregate_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MERGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("merge_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DISPLAY_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("display_threshold", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MIN_MAX_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("min_max_type", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCounterStrategyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCounterStrategyTupleSchemeFactory();

  /**
   * 
   * @see TCounterAggregateType
   */
  public @org.apache.thrift.annotation.Nullable TCounterAggregateType aggregate_type; // required
  /**
   * 
   * @see TCounterMergeType
   */
  public @org.apache.thrift.annotation.Nullable TCounterMergeType merge_type; // required
  public long display_threshold; // required
  /**
   * 
   * @see TCounterMinMaxType
   */
  public @org.apache.thrift.annotation.Nullable TCounterMinMaxType min_max_type; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TCounterAggregateType
     */
    AGGREGATE_TYPE((short)1, "aggregate_type"),
    /**
     * 
     * @see TCounterMergeType
     */
    MERGE_TYPE((short)2, "merge_type"),
    DISPLAY_THRESHOLD((short)3, "display_threshold"),
    /**
     * 
     * @see TCounterMinMaxType
     */
    MIN_MAX_TYPE((short)4, "min_max_type");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGGREGATE_TYPE
          return AGGREGATE_TYPE;
        case 2: // MERGE_TYPE
          return MERGE_TYPE;
        case 3: // DISPLAY_THRESHOLD
          return DISPLAY_THRESHOLD;
        case 4: // MIN_MAX_TYPE
          return MIN_MAX_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DISPLAY_THRESHOLD_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MIN_MAX_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGGREGATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aggregate_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCounterAggregateType.class)));
    tmpMap.put(_Fields.MERGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("merge_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCounterMergeType.class)));
    tmpMap.put(_Fields.DISPLAY_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("display_threshold", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_MAX_TYPE, new org.apache.thrift.meta_data.FieldMetaData("min_max_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCounterMinMaxType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCounterStrategy.class, metaDataMap);
  }

  public TCounterStrategy() {
    this.display_threshold = 0L;

    this.min_max_type = com.starrocks.thrift.TCounterMinMaxType.MIN_MAX_ALL;

  }

  public TCounterStrategy(
    TCounterAggregateType aggregate_type,
    TCounterMergeType merge_type,
    long display_threshold)
  {
    this();
    this.aggregate_type = aggregate_type;
    this.merge_type = merge_type;
    this.display_threshold = display_threshold;
    setDisplay_thresholdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCounterStrategy(TCounterStrategy other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAggregate_type()) {
      this.aggregate_type = other.aggregate_type;
    }
    if (other.isSetMerge_type()) {
      this.merge_type = other.merge_type;
    }
    this.display_threshold = other.display_threshold;
    if (other.isSetMin_max_type()) {
      this.min_max_type = other.min_max_type;
    }
  }

  @Override
  public TCounterStrategy deepCopy() {
    return new TCounterStrategy(this);
  }

  @Override
  public void clear() {
    this.aggregate_type = null;
    this.merge_type = null;
    this.display_threshold = 0L;

    this.min_max_type = com.starrocks.thrift.TCounterMinMaxType.MIN_MAX_ALL;

  }

  /**
   * 
   * @see TCounterAggregateType
   */
  @org.apache.thrift.annotation.Nullable
  public TCounterAggregateType getAggregate_type() {
    return this.aggregate_type;
  }

  /**
   * 
   * @see TCounterAggregateType
   */
  public TCounterStrategy setAggregate_type(@org.apache.thrift.annotation.Nullable TCounterAggregateType aggregate_type) {
    this.aggregate_type = aggregate_type;
    return this;
  }

  public void unsetAggregate_type() {
    this.aggregate_type = null;
  }

  /** Returns true if field aggregate_type is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregate_type() {
    return this.aggregate_type != null;
  }

  public void setAggregate_typeIsSet(boolean value) {
    if (!value) {
      this.aggregate_type = null;
    }
  }

  /**
   * 
   * @see TCounterMergeType
   */
  @org.apache.thrift.annotation.Nullable
  public TCounterMergeType getMerge_type() {
    return this.merge_type;
  }

  /**
   * 
   * @see TCounterMergeType
   */
  public TCounterStrategy setMerge_type(@org.apache.thrift.annotation.Nullable TCounterMergeType merge_type) {
    this.merge_type = merge_type;
    return this;
  }

  public void unsetMerge_type() {
    this.merge_type = null;
  }

  /** Returns true if field merge_type is set (has been assigned a value) and false otherwise */
  public boolean isSetMerge_type() {
    return this.merge_type != null;
  }

  public void setMerge_typeIsSet(boolean value) {
    if (!value) {
      this.merge_type = null;
    }
  }

  public long getDisplay_threshold() {
    return this.display_threshold;
  }

  public TCounterStrategy setDisplay_threshold(long display_threshold) {
    this.display_threshold = display_threshold;
    setDisplay_thresholdIsSet(true);
    return this;
  }

  public void unsetDisplay_threshold() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISPLAY_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field display_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplay_threshold() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISPLAY_THRESHOLD_ISSET_ID);
  }

  public void setDisplay_thresholdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISPLAY_THRESHOLD_ISSET_ID, value);
  }

  /**
   * 
   * @see TCounterMinMaxType
   */
  @org.apache.thrift.annotation.Nullable
  public TCounterMinMaxType getMin_max_type() {
    return this.min_max_type;
  }

  /**
   * 
   * @see TCounterMinMaxType
   */
  public TCounterStrategy setMin_max_type(@org.apache.thrift.annotation.Nullable TCounterMinMaxType min_max_type) {
    this.min_max_type = min_max_type;
    return this;
  }

  public void unsetMin_max_type() {
    this.min_max_type = null;
  }

  /** Returns true if field min_max_type is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_max_type() {
    return this.min_max_type != null;
  }

  public void setMin_max_typeIsSet(boolean value) {
    if (!value) {
      this.min_max_type = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case AGGREGATE_TYPE:
      if (value == null) {
        unsetAggregate_type();
      } else {
        setAggregate_type((TCounterAggregateType)value);
      }
      break;

    case MERGE_TYPE:
      if (value == null) {
        unsetMerge_type();
      } else {
        setMerge_type((TCounterMergeType)value);
      }
      break;

    case DISPLAY_THRESHOLD:
      if (value == null) {
        unsetDisplay_threshold();
      } else {
        setDisplay_threshold((java.lang.Long)value);
      }
      break;

    case MIN_MAX_TYPE:
      if (value == null) {
        unsetMin_max_type();
      } else {
        setMin_max_type((TCounterMinMaxType)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case AGGREGATE_TYPE:
      return getAggregate_type();

    case MERGE_TYPE:
      return getMerge_type();

    case DISPLAY_THRESHOLD:
      return getDisplay_threshold();

    case MIN_MAX_TYPE:
      return getMin_max_type();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case AGGREGATE_TYPE:
      return isSetAggregate_type();
    case MERGE_TYPE:
      return isSetMerge_type();
    case DISPLAY_THRESHOLD:
      return isSetDisplay_threshold();
    case MIN_MAX_TYPE:
      return isSetMin_max_type();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TCounterStrategy)
      return this.equals((TCounterStrategy)that);
    return false;
  }

  public boolean equals(TCounterStrategy that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_aggregate_type = true && this.isSetAggregate_type();
    boolean that_present_aggregate_type = true && that.isSetAggregate_type();
    if (this_present_aggregate_type || that_present_aggregate_type) {
      if (!(this_present_aggregate_type && that_present_aggregate_type))
        return false;
      if (!this.aggregate_type.equals(that.aggregate_type))
        return false;
    }

    boolean this_present_merge_type = true && this.isSetMerge_type();
    boolean that_present_merge_type = true && that.isSetMerge_type();
    if (this_present_merge_type || that_present_merge_type) {
      if (!(this_present_merge_type && that_present_merge_type))
        return false;
      if (!this.merge_type.equals(that.merge_type))
        return false;
    }

    boolean this_present_display_threshold = true;
    boolean that_present_display_threshold = true;
    if (this_present_display_threshold || that_present_display_threshold) {
      if (!(this_present_display_threshold && that_present_display_threshold))
        return false;
      if (this.display_threshold != that.display_threshold)
        return false;
    }

    boolean this_present_min_max_type = true && this.isSetMin_max_type();
    boolean that_present_min_max_type = true && that.isSetMin_max_type();
    if (this_present_min_max_type || that_present_min_max_type) {
      if (!(this_present_min_max_type && that_present_min_max_type))
        return false;
      if (!this.min_max_type.equals(that.min_max_type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAggregate_type()) ? 131071 : 524287);
    if (isSetAggregate_type())
      hashCode = hashCode * 8191 + aggregate_type.getValue();

    hashCode = hashCode * 8191 + ((isSetMerge_type()) ? 131071 : 524287);
    if (isSetMerge_type())
      hashCode = hashCode * 8191 + merge_type.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(display_threshold);

    hashCode = hashCode * 8191 + ((isSetMin_max_type()) ? 131071 : 524287);
    if (isSetMin_max_type())
      hashCode = hashCode * 8191 + min_max_type.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TCounterStrategy other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetAggregate_type(), other.isSetAggregate_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregate_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregate_type, other.aggregate_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMerge_type(), other.isSetMerge_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerge_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merge_type, other.merge_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDisplay_threshold(), other.isSetDisplay_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplay_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.display_threshold, other.display_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMin_max_type(), other.isSetMin_max_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_max_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_max_type, other.min_max_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCounterStrategy(");
    boolean first = true;

    sb.append("aggregate_type:");
    if (this.aggregate_type == null) {
      sb.append("null");
    } else {
      sb.append(this.aggregate_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merge_type:");
    if (this.merge_type == null) {
      sb.append("null");
    } else {
      sb.append(this.merge_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("display_threshold:");
    sb.append(this.display_threshold);
    first = false;
    if (isSetMin_max_type()) {
      if (!first) sb.append(", ");
      sb.append("min_max_type:");
      if (this.min_max_type == null) {
        sb.append("null");
      } else {
        sb.append(this.min_max_type);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (aggregate_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'aggregate_type' was not present! Struct: " + toString());
    }
    if (merge_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'merge_type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'display_threshold' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCounterStrategyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TCounterStrategyStandardScheme getScheme() {
      return new TCounterStrategyStandardScheme();
    }
  }

  private static class TCounterStrategyStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCounterStrategy> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TCounterStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGGREGATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.aggregate_type = com.starrocks.thrift.TCounterAggregateType.findByValue(iprot.readI32());
              struct.setAggregate_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MERGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.merge_type = com.starrocks.thrift.TCounterMergeType.findByValue(iprot.readI32());
              struct.setMerge_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISPLAY_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.display_threshold = iprot.readI64();
              struct.setDisplay_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIN_MAX_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.min_max_type = com.starrocks.thrift.TCounterMinMaxType.findByValue(iprot.readI32());
              struct.setMin_max_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDisplay_threshold()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'display_threshold' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TCounterStrategy struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.aggregate_type != null) {
        oprot.writeFieldBegin(AGGREGATE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.aggregate_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.merge_type != null) {
        oprot.writeFieldBegin(MERGE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.merge_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DISPLAY_THRESHOLD_FIELD_DESC);
      oprot.writeI64(struct.display_threshold);
      oprot.writeFieldEnd();
      if (struct.min_max_type != null) {
        if (struct.isSetMin_max_type()) {
          oprot.writeFieldBegin(MIN_MAX_TYPE_FIELD_DESC);
          oprot.writeI32(struct.min_max_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCounterStrategyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TCounterStrategyTupleScheme getScheme() {
      return new TCounterStrategyTupleScheme();
    }
  }

  private static class TCounterStrategyTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCounterStrategy> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCounterStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.aggregate_type.getValue());
      oprot.writeI32(struct.merge_type.getValue());
      oprot.writeI64(struct.display_threshold);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMin_max_type()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetMin_max_type()) {
        oprot.writeI32(struct.min_max_type.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCounterStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.aggregate_type = com.starrocks.thrift.TCounterAggregateType.findByValue(iprot.readI32());
      struct.setAggregate_typeIsSet(true);
      struct.merge_type = com.starrocks.thrift.TCounterMergeType.findByValue(iprot.readI32());
      struct.setMerge_typeIsSet(true);
      struct.display_threshold = iprot.readI64();
      struct.setDisplay_thresholdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.min_max_type = com.starrocks.thrift.TCounterMinMaxType.findByValue(iprot.readI32());
        struct.setMin_max_typeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

