/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TColumnMeta implements org.apache.thrift.TBase<TColumnMeta, TColumnMeta._Fields>, java.io.Serializable, Cloneable, Comparable<TColumnMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumnMeta");

  private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("columnName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("columnType", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("columnLength", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMN_PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("columnPrecision", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COLUMN_SCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("columnScale", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField COLUMN_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("columnKey", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregationType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ALLOW_NULL_FIELD_DESC = new org.apache.thrift.protocol.TField("allowNull", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField DEFAULT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultValue", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TColumnMetaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TColumnMetaTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String columnName; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTypeDesc columnType; // optional
  public int columnLength; // optional
  public int columnPrecision; // optional
  public int columnScale; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String columnKey; // optional
  public boolean key; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String aggregationType; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String comment; // optional
  public boolean allowNull; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String defaultValue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_NAME((short)1, "columnName"),
    COLUMN_TYPE((short)2, "columnType"),
    COLUMN_LENGTH((short)3, "columnLength"),
    COLUMN_PRECISION((short)4, "columnPrecision"),
    COLUMN_SCALE((short)5, "columnScale"),
    COLUMN_KEY((short)6, "columnKey"),
    KEY((short)7, "key"),
    AGGREGATION_TYPE((short)8, "aggregationType"),
    COMMENT((short)9, "comment"),
    ALLOW_NULL((short)10, "allowNull"),
    DEFAULT_VALUE((short)11, "defaultValue");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_NAME
          return COLUMN_NAME;
        case 2: // COLUMN_TYPE
          return COLUMN_TYPE;
        case 3: // COLUMN_LENGTH
          return COLUMN_LENGTH;
        case 4: // COLUMN_PRECISION
          return COLUMN_PRECISION;
        case 5: // COLUMN_SCALE
          return COLUMN_SCALE;
        case 6: // COLUMN_KEY
          return COLUMN_KEY;
        case 7: // KEY
          return KEY;
        case 8: // AGGREGATION_TYPE
          return AGGREGATION_TYPE;
        case 9: // COMMENT
          return COMMENT;
        case 10: // ALLOW_NULL
          return ALLOW_NULL;
        case 11: // DEFAULT_VALUE
          return DEFAULT_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COLUMNLENGTH_ISSET_ID = 0;
  private static final int __COLUMNPRECISION_ISSET_ID = 1;
  private static final int __COLUMNSCALE_ISSET_ID = 2;
  private static final int __KEY_ISSET_ID = 3;
  private static final int __ALLOWNULL_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COLUMN_NAME,_Fields.COLUMN_TYPE,_Fields.COLUMN_LENGTH,_Fields.COLUMN_PRECISION,_Fields.COLUMN_SCALE,_Fields.COLUMN_KEY,_Fields.KEY,_Fields.AGGREGATION_TYPE,_Fields.COMMENT,_Fields.ALLOW_NULL,_Fields.DEFAULT_VALUE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("columnName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("columnType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TTypeDesc.class)));
    tmpMap.put(_Fields.COLUMN_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("columnLength", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_PRECISION, new org.apache.thrift.meta_data.FieldMetaData("columnPrecision", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_SCALE, new org.apache.thrift.meta_data.FieldMetaData("columnScale", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_KEY, new org.apache.thrift.meta_data.FieldMetaData("columnKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AGGREGATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aggregationType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALLOW_NULL, new org.apache.thrift.meta_data.FieldMetaData("allowNull", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("defaultValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumnMeta.class, metaDataMap);
  }

  public TColumnMeta() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TColumnMeta(TColumnMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetColumnName()) {
      this.columnName = other.columnName;
    }
    if (other.isSetColumnType()) {
      this.columnType = new com.starrocks.thrift.TTypeDesc(other.columnType);
    }
    this.columnLength = other.columnLength;
    this.columnPrecision = other.columnPrecision;
    this.columnScale = other.columnScale;
    if (other.isSetColumnKey()) {
      this.columnKey = other.columnKey;
    }
    this.key = other.key;
    if (other.isSetAggregationType()) {
      this.aggregationType = other.aggregationType;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    this.allowNull = other.allowNull;
    if (other.isSetDefaultValue()) {
      this.defaultValue = other.defaultValue;
    }
  }

  @Override
  public TColumnMeta deepCopy() {
    return new TColumnMeta(this);
  }

  @Override
  public void clear() {
    this.columnName = null;
    this.columnType = null;
    setColumnLengthIsSet(false);
    this.columnLength = 0;
    setColumnPrecisionIsSet(false);
    this.columnPrecision = 0;
    setColumnScaleIsSet(false);
    this.columnScale = 0;
    this.columnKey = null;
    setKeyIsSet(false);
    this.key = false;
    this.aggregationType = null;
    this.comment = null;
    setAllowNullIsSet(false);
    this.allowNull = false;
    this.defaultValue = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumnName() {
    return this.columnName;
  }

  public TColumnMeta setColumnName(@org.apache.thrift.annotation.Nullable java.lang.String columnName) {
    this.columnName = columnName;
    return this;
  }

  public void unsetColumnName() {
    this.columnName = null;
  }

  /** Returns true if field columnName is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnName() {
    return this.columnName != null;
  }

  public void setColumnNameIsSet(boolean value) {
    if (!value) {
      this.columnName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TTypeDesc getColumnType() {
    return this.columnType;
  }

  public TColumnMeta setColumnType(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTypeDesc columnType) {
    this.columnType = columnType;
    return this;
  }

  public void unsetColumnType() {
    this.columnType = null;
  }

  /** Returns true if field columnType is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnType() {
    return this.columnType != null;
  }

  public void setColumnTypeIsSet(boolean value) {
    if (!value) {
      this.columnType = null;
    }
  }

  public int getColumnLength() {
    return this.columnLength;
  }

  public TColumnMeta setColumnLength(int columnLength) {
    this.columnLength = columnLength;
    setColumnLengthIsSet(true);
    return this;
  }

  public void unsetColumnLength() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLUMNLENGTH_ISSET_ID);
  }

  /** Returns true if field columnLength is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnLength() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLUMNLENGTH_ISSET_ID);
  }

  public void setColumnLengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLUMNLENGTH_ISSET_ID, value);
  }

  public int getColumnPrecision() {
    return this.columnPrecision;
  }

  public TColumnMeta setColumnPrecision(int columnPrecision) {
    this.columnPrecision = columnPrecision;
    setColumnPrecisionIsSet(true);
    return this;
  }

  public void unsetColumnPrecision() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLUMNPRECISION_ISSET_ID);
  }

  /** Returns true if field columnPrecision is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnPrecision() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLUMNPRECISION_ISSET_ID);
  }

  public void setColumnPrecisionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLUMNPRECISION_ISSET_ID, value);
  }

  public int getColumnScale() {
    return this.columnScale;
  }

  public TColumnMeta setColumnScale(int columnScale) {
    this.columnScale = columnScale;
    setColumnScaleIsSet(true);
    return this;
  }

  public void unsetColumnScale() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLUMNSCALE_ISSET_ID);
  }

  /** Returns true if field columnScale is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnScale() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLUMNSCALE_ISSET_ID);
  }

  public void setColumnScaleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLUMNSCALE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumnKey() {
    return this.columnKey;
  }

  public TColumnMeta setColumnKey(@org.apache.thrift.annotation.Nullable java.lang.String columnKey) {
    this.columnKey = columnKey;
    return this;
  }

  public void unsetColumnKey() {
    this.columnKey = null;
  }

  /** Returns true if field columnKey is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnKey() {
    return this.columnKey != null;
  }

  public void setColumnKeyIsSet(boolean value) {
    if (!value) {
      this.columnKey = null;
    }
  }

  public boolean isKey() {
    return this.key;
  }

  public TColumnMeta setKey(boolean key) {
    this.key = key;
    setKeyIsSet(true);
    return this;
  }

  public void unsetKey() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEY_ISSET_ID);
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEY_ISSET_ID);
  }

  public void setKeyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEY_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAggregationType() {
    return this.aggregationType;
  }

  public TColumnMeta setAggregationType(@org.apache.thrift.annotation.Nullable java.lang.String aggregationType) {
    this.aggregationType = aggregationType;
    return this;
  }

  public void unsetAggregationType() {
    this.aggregationType = null;
  }

  /** Returns true if field aggregationType is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregationType() {
    return this.aggregationType != null;
  }

  public void setAggregationTypeIsSet(boolean value) {
    if (!value) {
      this.aggregationType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getComment() {
    return this.comment;
  }

  public TColumnMeta setComment(@org.apache.thrift.annotation.Nullable java.lang.String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public boolean isAllowNull() {
    return this.allowNull;
  }

  public TColumnMeta setAllowNull(boolean allowNull) {
    this.allowNull = allowNull;
    setAllowNullIsSet(true);
    return this;
  }

  public void unsetAllowNull() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALLOWNULL_ISSET_ID);
  }

  /** Returns true if field allowNull is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowNull() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALLOWNULL_ISSET_ID);
  }

  public void setAllowNullIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALLOWNULL_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDefaultValue() {
    return this.defaultValue;
  }

  public TColumnMeta setDefaultValue(@org.apache.thrift.annotation.Nullable java.lang.String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  public void unsetDefaultValue() {
    this.defaultValue = null;
  }

  /** Returns true if field defaultValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultValue() {
    return this.defaultValue != null;
  }

  public void setDefaultValueIsSet(boolean value) {
    if (!value) {
      this.defaultValue = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COLUMN_NAME:
      if (value == null) {
        unsetColumnName();
      } else {
        setColumnName((java.lang.String)value);
      }
      break;

    case COLUMN_TYPE:
      if (value == null) {
        unsetColumnType();
      } else {
        setColumnType((com.starrocks.thrift.TTypeDesc)value);
      }
      break;

    case COLUMN_LENGTH:
      if (value == null) {
        unsetColumnLength();
      } else {
        setColumnLength((java.lang.Integer)value);
      }
      break;

    case COLUMN_PRECISION:
      if (value == null) {
        unsetColumnPrecision();
      } else {
        setColumnPrecision((java.lang.Integer)value);
      }
      break;

    case COLUMN_SCALE:
      if (value == null) {
        unsetColumnScale();
      } else {
        setColumnScale((java.lang.Integer)value);
      }
      break;

    case COLUMN_KEY:
      if (value == null) {
        unsetColumnKey();
      } else {
        setColumnKey((java.lang.String)value);
      }
      break;

    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((java.lang.Boolean)value);
      }
      break;

    case AGGREGATION_TYPE:
      if (value == null) {
        unsetAggregationType();
      } else {
        setAggregationType((java.lang.String)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((java.lang.String)value);
      }
      break;

    case ALLOW_NULL:
      if (value == null) {
        unsetAllowNull();
      } else {
        setAllowNull((java.lang.Boolean)value);
      }
      break;

    case DEFAULT_VALUE:
      if (value == null) {
        unsetDefaultValue();
      } else {
        setDefaultValue((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_NAME:
      return getColumnName();

    case COLUMN_TYPE:
      return getColumnType();

    case COLUMN_LENGTH:
      return getColumnLength();

    case COLUMN_PRECISION:
      return getColumnPrecision();

    case COLUMN_SCALE:
      return getColumnScale();

    case COLUMN_KEY:
      return getColumnKey();

    case KEY:
      return isKey();

    case AGGREGATION_TYPE:
      return getAggregationType();

    case COMMENT:
      return getComment();

    case ALLOW_NULL:
      return isAllowNull();

    case DEFAULT_VALUE:
      return getDefaultValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_NAME:
      return isSetColumnName();
    case COLUMN_TYPE:
      return isSetColumnType();
    case COLUMN_LENGTH:
      return isSetColumnLength();
    case COLUMN_PRECISION:
      return isSetColumnPrecision();
    case COLUMN_SCALE:
      return isSetColumnScale();
    case COLUMN_KEY:
      return isSetColumnKey();
    case KEY:
      return isSetKey();
    case AGGREGATION_TYPE:
      return isSetAggregationType();
    case COMMENT:
      return isSetComment();
    case ALLOW_NULL:
      return isSetAllowNull();
    case DEFAULT_VALUE:
      return isSetDefaultValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TColumnMeta)
      return this.equals((TColumnMeta)that);
    return false;
  }

  public boolean equals(TColumnMeta that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_columnName = true && this.isSetColumnName();
    boolean that_present_columnName = true && that.isSetColumnName();
    if (this_present_columnName || that_present_columnName) {
      if (!(this_present_columnName && that_present_columnName))
        return false;
      if (!this.columnName.equals(that.columnName))
        return false;
    }

    boolean this_present_columnType = true && this.isSetColumnType();
    boolean that_present_columnType = true && that.isSetColumnType();
    if (this_present_columnType || that_present_columnType) {
      if (!(this_present_columnType && that_present_columnType))
        return false;
      if (!this.columnType.equals(that.columnType))
        return false;
    }

    boolean this_present_columnLength = true && this.isSetColumnLength();
    boolean that_present_columnLength = true && that.isSetColumnLength();
    if (this_present_columnLength || that_present_columnLength) {
      if (!(this_present_columnLength && that_present_columnLength))
        return false;
      if (this.columnLength != that.columnLength)
        return false;
    }

    boolean this_present_columnPrecision = true && this.isSetColumnPrecision();
    boolean that_present_columnPrecision = true && that.isSetColumnPrecision();
    if (this_present_columnPrecision || that_present_columnPrecision) {
      if (!(this_present_columnPrecision && that_present_columnPrecision))
        return false;
      if (this.columnPrecision != that.columnPrecision)
        return false;
    }

    boolean this_present_columnScale = true && this.isSetColumnScale();
    boolean that_present_columnScale = true && that.isSetColumnScale();
    if (this_present_columnScale || that_present_columnScale) {
      if (!(this_present_columnScale && that_present_columnScale))
        return false;
      if (this.columnScale != that.columnScale)
        return false;
    }

    boolean this_present_columnKey = true && this.isSetColumnKey();
    boolean that_present_columnKey = true && that.isSetColumnKey();
    if (this_present_columnKey || that_present_columnKey) {
      if (!(this_present_columnKey && that_present_columnKey))
        return false;
      if (!this.columnKey.equals(that.columnKey))
        return false;
    }

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (this.key != that.key)
        return false;
    }

    boolean this_present_aggregationType = true && this.isSetAggregationType();
    boolean that_present_aggregationType = true && that.isSetAggregationType();
    if (this_present_aggregationType || that_present_aggregationType) {
      if (!(this_present_aggregationType && that_present_aggregationType))
        return false;
      if (!this.aggregationType.equals(that.aggregationType))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_allowNull = true && this.isSetAllowNull();
    boolean that_present_allowNull = true && that.isSetAllowNull();
    if (this_present_allowNull || that_present_allowNull) {
      if (!(this_present_allowNull && that_present_allowNull))
        return false;
      if (this.allowNull != that.allowNull)
        return false;
    }

    boolean this_present_defaultValue = true && this.isSetDefaultValue();
    boolean that_present_defaultValue = true && that.isSetDefaultValue();
    if (this_present_defaultValue || that_present_defaultValue) {
      if (!(this_present_defaultValue && that_present_defaultValue))
        return false;
      if (!this.defaultValue.equals(that.defaultValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetColumnName()) ? 131071 : 524287);
    if (isSetColumnName())
      hashCode = hashCode * 8191 + columnName.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnType()) ? 131071 : 524287);
    if (isSetColumnType())
      hashCode = hashCode * 8191 + columnType.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnLength()) ? 131071 : 524287);
    if (isSetColumnLength())
      hashCode = hashCode * 8191 + columnLength;

    hashCode = hashCode * 8191 + ((isSetColumnPrecision()) ? 131071 : 524287);
    if (isSetColumnPrecision())
      hashCode = hashCode * 8191 + columnPrecision;

    hashCode = hashCode * 8191 + ((isSetColumnScale()) ? 131071 : 524287);
    if (isSetColumnScale())
      hashCode = hashCode * 8191 + columnScale;

    hashCode = hashCode * 8191 + ((isSetColumnKey()) ? 131071 : 524287);
    if (isSetColumnKey())
      hashCode = hashCode * 8191 + columnKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
    if (isSetKey())
      hashCode = hashCode * 8191 + ((key) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAggregationType()) ? 131071 : 524287);
    if (isSetAggregationType())
      hashCode = hashCode * 8191 + aggregationType.hashCode();

    hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
    if (isSetComment())
      hashCode = hashCode * 8191 + comment.hashCode();

    hashCode = hashCode * 8191 + ((isSetAllowNull()) ? 131071 : 524287);
    if (isSetAllowNull())
      hashCode = hashCode * 8191 + ((allowNull) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDefaultValue()) ? 131071 : 524287);
    if (isSetDefaultValue())
      hashCode = hashCode * 8191 + defaultValue.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TColumnMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetColumnName(), other.isSetColumnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnName, other.columnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnType(), other.isSetColumnType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnType, other.columnType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnLength(), other.isSetColumnLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnLength, other.columnLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnPrecision(), other.isSetColumnPrecision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnPrecision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnPrecision, other.columnPrecision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnScale(), other.isSetColumnScale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnScale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnScale, other.columnScale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnKey(), other.isSetColumnKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnKey, other.columnKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKey(), other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAggregationType(), other.isSetAggregationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregationType, other.aggregationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetComment(), other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAllowNull(), other.isSetAllowNull());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowNull()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowNull, other.allowNull);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDefaultValue(), other.isSetDefaultValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultValue, other.defaultValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TColumnMeta(");
    boolean first = true;

    if (isSetColumnName()) {
      sb.append("columnName:");
      if (this.columnName == null) {
        sb.append("null");
      } else {
        sb.append(this.columnName);
      }
      first = false;
    }
    if (isSetColumnType()) {
      if (!first) sb.append(", ");
      sb.append("columnType:");
      if (this.columnType == null) {
        sb.append("null");
      } else {
        sb.append(this.columnType);
      }
      first = false;
    }
    if (isSetColumnLength()) {
      if (!first) sb.append(", ");
      sb.append("columnLength:");
      sb.append(this.columnLength);
      first = false;
    }
    if (isSetColumnPrecision()) {
      if (!first) sb.append(", ");
      sb.append("columnPrecision:");
      sb.append(this.columnPrecision);
      first = false;
    }
    if (isSetColumnScale()) {
      if (!first) sb.append(", ");
      sb.append("columnScale:");
      sb.append(this.columnScale);
      first = false;
    }
    if (isSetColumnKey()) {
      if (!first) sb.append(", ");
      sb.append("columnKey:");
      if (this.columnKey == null) {
        sb.append("null");
      } else {
        sb.append(this.columnKey);
      }
      first = false;
    }
    if (isSetKey()) {
      if (!first) sb.append(", ");
      sb.append("key:");
      sb.append(this.key);
      first = false;
    }
    if (isSetAggregationType()) {
      if (!first) sb.append(", ");
      sb.append("aggregationType:");
      if (this.aggregationType == null) {
        sb.append("null");
      } else {
        sb.append(this.aggregationType);
      }
      first = false;
    }
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    if (isSetAllowNull()) {
      if (!first) sb.append(", ");
      sb.append("allowNull:");
      sb.append(this.allowNull);
      first = false;
    }
    if (isSetDefaultValue()) {
      if (!first) sb.append(", ");
      sb.append("defaultValue:");
      if (this.defaultValue == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultValue);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (columnType != null) {
      columnType.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TColumnMetaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TColumnMetaStandardScheme getScheme() {
      return new TColumnMetaStandardScheme();
    }
  }

  private static class TColumnMetaStandardScheme extends org.apache.thrift.scheme.StandardScheme<TColumnMeta> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TColumnMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnName = iprot.readString();
              struct.setColumnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.columnType = new com.starrocks.thrift.TTypeDesc();
              struct.columnType.read(iprot);
              struct.setColumnTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnLength = iprot.readI32();
              struct.setColumnLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMN_PRECISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnPrecision = iprot.readI32();
              struct.setColumnPrecisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLUMN_SCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnScale = iprot.readI32();
              struct.setColumnScaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COLUMN_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnKey = iprot.readString();
              struct.setColumnKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.key = iprot.readBool();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AGGREGATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aggregationType = iprot.readString();
              struct.setAggregationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ALLOW_NULL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowNull = iprot.readBool();
              struct.setAllowNullIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEFAULT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.defaultValue = iprot.readString();
              struct.setDefaultValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TColumnMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.columnName != null) {
        if (struct.isSetColumnName()) {
          oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
          oprot.writeString(struct.columnName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columnType != null) {
        if (struct.isSetColumnType()) {
          oprot.writeFieldBegin(COLUMN_TYPE_FIELD_DESC);
          struct.columnType.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetColumnLength()) {
        oprot.writeFieldBegin(COLUMN_LENGTH_FIELD_DESC);
        oprot.writeI32(struct.columnLength);
        oprot.writeFieldEnd();
      }
      if (struct.isSetColumnPrecision()) {
        oprot.writeFieldBegin(COLUMN_PRECISION_FIELD_DESC);
        oprot.writeI32(struct.columnPrecision);
        oprot.writeFieldEnd();
      }
      if (struct.isSetColumnScale()) {
        oprot.writeFieldBegin(COLUMN_SCALE_FIELD_DESC);
        oprot.writeI32(struct.columnScale);
        oprot.writeFieldEnd();
      }
      if (struct.columnKey != null) {
        if (struct.isSetColumnKey()) {
          oprot.writeFieldBegin(COLUMN_KEY_FIELD_DESC);
          oprot.writeString(struct.columnKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetKey()) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeBool(struct.key);
        oprot.writeFieldEnd();
      }
      if (struct.aggregationType != null) {
        if (struct.isSetAggregationType()) {
          oprot.writeFieldBegin(AGGREGATION_TYPE_FIELD_DESC);
          oprot.writeString(struct.aggregationType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAllowNull()) {
        oprot.writeFieldBegin(ALLOW_NULL_FIELD_DESC);
        oprot.writeBool(struct.allowNull);
        oprot.writeFieldEnd();
      }
      if (struct.defaultValue != null) {
        if (struct.isSetDefaultValue()) {
          oprot.writeFieldBegin(DEFAULT_VALUE_FIELD_DESC);
          oprot.writeString(struct.defaultValue);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TColumnMetaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TColumnMetaTupleScheme getScheme() {
      return new TColumnMetaTupleScheme();
    }
  }

  private static class TColumnMetaTupleScheme extends org.apache.thrift.scheme.TupleScheme<TColumnMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TColumnMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetColumnName()) {
        optionals.set(0);
      }
      if (struct.isSetColumnType()) {
        optionals.set(1);
      }
      if (struct.isSetColumnLength()) {
        optionals.set(2);
      }
      if (struct.isSetColumnPrecision()) {
        optionals.set(3);
      }
      if (struct.isSetColumnScale()) {
        optionals.set(4);
      }
      if (struct.isSetColumnKey()) {
        optionals.set(5);
      }
      if (struct.isSetKey()) {
        optionals.set(6);
      }
      if (struct.isSetAggregationType()) {
        optionals.set(7);
      }
      if (struct.isSetComment()) {
        optionals.set(8);
      }
      if (struct.isSetAllowNull()) {
        optionals.set(9);
      }
      if (struct.isSetDefaultValue()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetColumnName()) {
        oprot.writeString(struct.columnName);
      }
      if (struct.isSetColumnType()) {
        struct.columnType.write(oprot);
      }
      if (struct.isSetColumnLength()) {
        oprot.writeI32(struct.columnLength);
      }
      if (struct.isSetColumnPrecision()) {
        oprot.writeI32(struct.columnPrecision);
      }
      if (struct.isSetColumnScale()) {
        oprot.writeI32(struct.columnScale);
      }
      if (struct.isSetColumnKey()) {
        oprot.writeString(struct.columnKey);
      }
      if (struct.isSetKey()) {
        oprot.writeBool(struct.key);
      }
      if (struct.isSetAggregationType()) {
        oprot.writeString(struct.aggregationType);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetAllowNull()) {
        oprot.writeBool(struct.allowNull);
      }
      if (struct.isSetDefaultValue()) {
        oprot.writeString(struct.defaultValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TColumnMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.columnName = iprot.readString();
        struct.setColumnNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.columnType = new com.starrocks.thrift.TTypeDesc();
        struct.columnType.read(iprot);
        struct.setColumnTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.columnLength = iprot.readI32();
        struct.setColumnLengthIsSet(true);
      }
      if (incoming.get(3)) {
        struct.columnPrecision = iprot.readI32();
        struct.setColumnPrecisionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.columnScale = iprot.readI32();
        struct.setColumnScaleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.columnKey = iprot.readString();
        struct.setColumnKeyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.key = iprot.readBool();
        struct.setKeyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.aggregationType = iprot.readString();
        struct.setAggregationTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(9)) {
        struct.allowNull = iprot.readBool();
        struct.setAllowNullIsSet(true);
      }
      if (incoming.get(10)) {
        struct.defaultValue = iprot.readString();
        struct.setDefaultValueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

