/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TOlapTablePartitionParam implements org.apache.thrift.TBase<TOlapTablePartitionParam, TOlapTablePartitionParam._Fields>, java.io.Serializable, Cloneable, Comparable<TOlapTablePartitionParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOlapTablePartitionParam");

  private static final org.apache.thrift.protocol.TField DB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("db_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PARTITION_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_column", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DISTRIBUTED_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("distributed_columns", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField PARTITION_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_columns", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField PARTITION_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_exprs", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField ENABLE_AUTOMATIC_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_automatic_partition", org.apache.thrift.protocol.TType.BOOL, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TOlapTablePartitionParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TOlapTablePartitionParamTupleSchemeFactory();

  public long db_id; // required
  public long table_id; // required
  public long version; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String partition_column; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> distributed_columns; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TOlapTablePartition> partitions; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> partition_columns; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> partition_exprs; // optional
  public boolean enable_automatic_partition; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DB_ID((short)1, "db_id"),
    TABLE_ID((short)2, "table_id"),
    VERSION((short)3, "version"),
    PARTITION_COLUMN((short)4, "partition_column"),
    DISTRIBUTED_COLUMNS((short)5, "distributed_columns"),
    PARTITIONS((short)6, "partitions"),
    PARTITION_COLUMNS((short)7, "partition_columns"),
    PARTITION_EXPRS((short)8, "partition_exprs"),
    ENABLE_AUTOMATIC_PARTITION((short)9, "enable_automatic_partition");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DB_ID
          return DB_ID;
        case 2: // TABLE_ID
          return TABLE_ID;
        case 3: // VERSION
          return VERSION;
        case 4: // PARTITION_COLUMN
          return PARTITION_COLUMN;
        case 5: // DISTRIBUTED_COLUMNS
          return DISTRIBUTED_COLUMNS;
        case 6: // PARTITIONS
          return PARTITIONS;
        case 7: // PARTITION_COLUMNS
          return PARTITION_COLUMNS;
        case 8: // PARTITION_EXPRS
          return PARTITION_EXPRS;
        case 9: // ENABLE_AUTOMATIC_PARTITION
          return ENABLE_AUTOMATIC_PARTITION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DB_ID_ISSET_ID = 0;
  private static final int __TABLE_ID_ISSET_ID = 1;
  private static final int __VERSION_ISSET_ID = 2;
  private static final int __ENABLE_AUTOMATIC_PARTITION_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARTITION_COLUMN,_Fields.DISTRIBUTED_COLUMNS,_Fields.PARTITION_COLUMNS,_Fields.PARTITION_EXPRS,_Fields.ENABLE_AUTOMATIC_PARTITION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DB_ID, new org.apache.thrift.meta_data.FieldMetaData("db_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("partition_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTRIBUTED_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("distributed_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlapTablePartition.class))));
    tmpMap.put(_Fields.PARTITION_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("partition_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARTITION_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("partition_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class))));
    tmpMap.put(_Fields.ENABLE_AUTOMATIC_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("enable_automatic_partition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOlapTablePartitionParam.class, metaDataMap);
  }

  public TOlapTablePartitionParam() {
  }

  public TOlapTablePartitionParam(
    long db_id,
    long table_id,
    long version,
    java.util.List<TOlapTablePartition> partitions)
  {
    this();
    this.db_id = db_id;
    setDb_idIsSet(true);
    this.table_id = table_id;
    setTable_idIsSet(true);
    this.version = version;
    setVersionIsSet(true);
    this.partitions = partitions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOlapTablePartitionParam(TOlapTablePartitionParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.db_id = other.db_id;
    this.table_id = other.table_id;
    this.version = other.version;
    if (other.isSetPartition_column()) {
      this.partition_column = other.partition_column;
    }
    if (other.isSetDistributed_columns()) {
      java.util.List<java.lang.String> __this__distributed_columns = new java.util.ArrayList<java.lang.String>(other.distributed_columns);
      this.distributed_columns = __this__distributed_columns;
    }
    if (other.isSetPartitions()) {
      java.util.List<TOlapTablePartition> __this__partitions = new java.util.ArrayList<TOlapTablePartition>(other.partitions.size());
      for (TOlapTablePartition other_element : other.partitions) {
        __this__partitions.add(new TOlapTablePartition(other_element));
      }
      this.partitions = __this__partitions;
    }
    if (other.isSetPartition_columns()) {
      java.util.List<java.lang.String> __this__partition_columns = new java.util.ArrayList<java.lang.String>(other.partition_columns);
      this.partition_columns = __this__partition_columns;
    }
    if (other.isSetPartition_exprs()) {
      java.util.List<com.starrocks.thrift.TExpr> __this__partition_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>(other.partition_exprs.size());
      for (com.starrocks.thrift.TExpr other_element : other.partition_exprs) {
        __this__partition_exprs.add(new com.starrocks.thrift.TExpr(other_element));
      }
      this.partition_exprs = __this__partition_exprs;
    }
    this.enable_automatic_partition = other.enable_automatic_partition;
  }

  @Override
  public TOlapTablePartitionParam deepCopy() {
    return new TOlapTablePartitionParam(this);
  }

  @Override
  public void clear() {
    setDb_idIsSet(false);
    this.db_id = 0;
    setTable_idIsSet(false);
    this.table_id = 0;
    setVersionIsSet(false);
    this.version = 0;
    this.partition_column = null;
    this.distributed_columns = null;
    this.partitions = null;
    this.partition_columns = null;
    this.partition_exprs = null;
    setEnable_automatic_partitionIsSet(false);
    this.enable_automatic_partition = false;
  }

  public long getDb_id() {
    return this.db_id;
  }

  public TOlapTablePartitionParam setDb_id(long db_id) {
    this.db_id = db_id;
    setDb_idIsSet(true);
    return this;
  }

  public void unsetDb_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  /** Returns true if field db_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  public void setDb_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DB_ID_ISSET_ID, value);
  }

  public long getTable_id() {
    return this.table_id;
  }

  public TOlapTablePartitionParam setTable_id(long table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  public long getVersion() {
    return this.version;
  }

  public TOlapTablePartitionParam setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartition_column() {
    return this.partition_column;
  }

  public TOlapTablePartitionParam setPartition_column(@org.apache.thrift.annotation.Nullable java.lang.String partition_column) {
    this.partition_column = partition_column;
    return this;
  }

  public void unsetPartition_column() {
    this.partition_column = null;
  }

  /** Returns true if field partition_column is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_column() {
    return this.partition_column != null;
  }

  public void setPartition_columnIsSet(boolean value) {
    if (!value) {
      this.partition_column = null;
    }
  }

  public int getDistributed_columnsSize() {
    return (this.distributed_columns == null) ? 0 : this.distributed_columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getDistributed_columnsIterator() {
    return (this.distributed_columns == null) ? null : this.distributed_columns.iterator();
  }

  public void addToDistributed_columns(java.lang.String elem) {
    if (this.distributed_columns == null) {
      this.distributed_columns = new java.util.ArrayList<java.lang.String>();
    }
    this.distributed_columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getDistributed_columns() {
    return this.distributed_columns;
  }

  public TOlapTablePartitionParam setDistributed_columns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> distributed_columns) {
    this.distributed_columns = distributed_columns;
    return this;
  }

  public void unsetDistributed_columns() {
    this.distributed_columns = null;
  }

  /** Returns true if field distributed_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetDistributed_columns() {
    return this.distributed_columns != null;
  }

  public void setDistributed_columnsIsSet(boolean value) {
    if (!value) {
      this.distributed_columns = null;
    }
  }

  public int getPartitionsSize() {
    return (this.partitions == null) ? 0 : this.partitions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TOlapTablePartition> getPartitionsIterator() {
    return (this.partitions == null) ? null : this.partitions.iterator();
  }

  public void addToPartitions(TOlapTablePartition elem) {
    if (this.partitions == null) {
      this.partitions = new java.util.ArrayList<TOlapTablePartition>();
    }
    this.partitions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TOlapTablePartition> getPartitions() {
    return this.partitions;
  }

  public TOlapTablePartitionParam setPartitions(@org.apache.thrift.annotation.Nullable java.util.List<TOlapTablePartition> partitions) {
    this.partitions = partitions;
    return this;
  }

  public void unsetPartitions() {
    this.partitions = null;
  }

  /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitions() {
    return this.partitions != null;
  }

  public void setPartitionsIsSet(boolean value) {
    if (!value) {
      this.partitions = null;
    }
  }

  public int getPartition_columnsSize() {
    return (this.partition_columns == null) ? 0 : this.partition_columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getPartition_columnsIterator() {
    return (this.partition_columns == null) ? null : this.partition_columns.iterator();
  }

  public void addToPartition_columns(java.lang.String elem) {
    if (this.partition_columns == null) {
      this.partition_columns = new java.util.ArrayList<java.lang.String>();
    }
    this.partition_columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getPartition_columns() {
    return this.partition_columns;
  }

  public TOlapTablePartitionParam setPartition_columns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> partition_columns) {
    this.partition_columns = partition_columns;
    return this;
  }

  public void unsetPartition_columns() {
    this.partition_columns = null;
  }

  /** Returns true if field partition_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_columns() {
    return this.partition_columns != null;
  }

  public void setPartition_columnsIsSet(boolean value) {
    if (!value) {
      this.partition_columns = null;
    }
  }

  public int getPartition_exprsSize() {
    return (this.partition_exprs == null) ? 0 : this.partition_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TExpr> getPartition_exprsIterator() {
    return (this.partition_exprs == null) ? null : this.partition_exprs.iterator();
  }

  public void addToPartition_exprs(com.starrocks.thrift.TExpr elem) {
    if (this.partition_exprs == null) {
      this.partition_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>();
    }
    this.partition_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TExpr> getPartition_exprs() {
    return this.partition_exprs;
  }

  public TOlapTablePartitionParam setPartition_exprs(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> partition_exprs) {
    this.partition_exprs = partition_exprs;
    return this;
  }

  public void unsetPartition_exprs() {
    this.partition_exprs = null;
  }

  /** Returns true if field partition_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_exprs() {
    return this.partition_exprs != null;
  }

  public void setPartition_exprsIsSet(boolean value) {
    if (!value) {
      this.partition_exprs = null;
    }
  }

  public boolean isEnable_automatic_partition() {
    return this.enable_automatic_partition;
  }

  public TOlapTablePartitionParam setEnable_automatic_partition(boolean enable_automatic_partition) {
    this.enable_automatic_partition = enable_automatic_partition;
    setEnable_automatic_partitionIsSet(true);
    return this;
  }

  public void unsetEnable_automatic_partition() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_AUTOMATIC_PARTITION_ISSET_ID);
  }

  /** Returns true if field enable_automatic_partition is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_automatic_partition() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_AUTOMATIC_PARTITION_ISSET_ID);
  }

  public void setEnable_automatic_partitionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_AUTOMATIC_PARTITION_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DB_ID:
      if (value == null) {
        unsetDb_id();
      } else {
        setDb_id((java.lang.Long)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((java.lang.Long)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Long)value);
      }
      break;

    case PARTITION_COLUMN:
      if (value == null) {
        unsetPartition_column();
      } else {
        setPartition_column((java.lang.String)value);
      }
      break;

    case DISTRIBUTED_COLUMNS:
      if (value == null) {
        unsetDistributed_columns();
      } else {
        setDistributed_columns((java.util.List<java.lang.String>)value);
      }
      break;

    case PARTITIONS:
      if (value == null) {
        unsetPartitions();
      } else {
        setPartitions((java.util.List<TOlapTablePartition>)value);
      }
      break;

    case PARTITION_COLUMNS:
      if (value == null) {
        unsetPartition_columns();
      } else {
        setPartition_columns((java.util.List<java.lang.String>)value);
      }
      break;

    case PARTITION_EXPRS:
      if (value == null) {
        unsetPartition_exprs();
      } else {
        setPartition_exprs((java.util.List<com.starrocks.thrift.TExpr>)value);
      }
      break;

    case ENABLE_AUTOMATIC_PARTITION:
      if (value == null) {
        unsetEnable_automatic_partition();
      } else {
        setEnable_automatic_partition((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DB_ID:
      return getDb_id();

    case TABLE_ID:
      return getTable_id();

    case VERSION:
      return getVersion();

    case PARTITION_COLUMN:
      return getPartition_column();

    case DISTRIBUTED_COLUMNS:
      return getDistributed_columns();

    case PARTITIONS:
      return getPartitions();

    case PARTITION_COLUMNS:
      return getPartition_columns();

    case PARTITION_EXPRS:
      return getPartition_exprs();

    case ENABLE_AUTOMATIC_PARTITION:
      return isEnable_automatic_partition();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DB_ID:
      return isSetDb_id();
    case TABLE_ID:
      return isSetTable_id();
    case VERSION:
      return isSetVersion();
    case PARTITION_COLUMN:
      return isSetPartition_column();
    case DISTRIBUTED_COLUMNS:
      return isSetDistributed_columns();
    case PARTITIONS:
      return isSetPartitions();
    case PARTITION_COLUMNS:
      return isSetPartition_columns();
    case PARTITION_EXPRS:
      return isSetPartition_exprs();
    case ENABLE_AUTOMATIC_PARTITION:
      return isSetEnable_automatic_partition();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TOlapTablePartitionParam)
      return this.equals((TOlapTablePartitionParam)that);
    return false;
  }

  public boolean equals(TOlapTablePartitionParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_db_id = true;
    boolean that_present_db_id = true;
    if (this_present_db_id || that_present_db_id) {
      if (!(this_present_db_id && that_present_db_id))
        return false;
      if (this.db_id != that.db_id)
        return false;
    }

    boolean this_present_table_id = true;
    boolean that_present_table_id = true;
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_partition_column = true && this.isSetPartition_column();
    boolean that_present_partition_column = true && that.isSetPartition_column();
    if (this_present_partition_column || that_present_partition_column) {
      if (!(this_present_partition_column && that_present_partition_column))
        return false;
      if (!this.partition_column.equals(that.partition_column))
        return false;
    }

    boolean this_present_distributed_columns = true && this.isSetDistributed_columns();
    boolean that_present_distributed_columns = true && that.isSetDistributed_columns();
    if (this_present_distributed_columns || that_present_distributed_columns) {
      if (!(this_present_distributed_columns && that_present_distributed_columns))
        return false;
      if (!this.distributed_columns.equals(that.distributed_columns))
        return false;
    }

    boolean this_present_partitions = true && this.isSetPartitions();
    boolean that_present_partitions = true && that.isSetPartitions();
    if (this_present_partitions || that_present_partitions) {
      if (!(this_present_partitions && that_present_partitions))
        return false;
      if (!this.partitions.equals(that.partitions))
        return false;
    }

    boolean this_present_partition_columns = true && this.isSetPartition_columns();
    boolean that_present_partition_columns = true && that.isSetPartition_columns();
    if (this_present_partition_columns || that_present_partition_columns) {
      if (!(this_present_partition_columns && that_present_partition_columns))
        return false;
      if (!this.partition_columns.equals(that.partition_columns))
        return false;
    }

    boolean this_present_partition_exprs = true && this.isSetPartition_exprs();
    boolean that_present_partition_exprs = true && that.isSetPartition_exprs();
    if (this_present_partition_exprs || that_present_partition_exprs) {
      if (!(this_present_partition_exprs && that_present_partition_exprs))
        return false;
      if (!this.partition_exprs.equals(that.partition_exprs))
        return false;
    }

    boolean this_present_enable_automatic_partition = true && this.isSetEnable_automatic_partition();
    boolean that_present_enable_automatic_partition = true && that.isSetEnable_automatic_partition();
    if (this_present_enable_automatic_partition || that_present_enable_automatic_partition) {
      if (!(this_present_enable_automatic_partition && that_present_enable_automatic_partition))
        return false;
      if (this.enable_automatic_partition != that.enable_automatic_partition)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(db_id);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_id);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

    hashCode = hashCode * 8191 + ((isSetPartition_column()) ? 131071 : 524287);
    if (isSetPartition_column())
      hashCode = hashCode * 8191 + partition_column.hashCode();

    hashCode = hashCode * 8191 + ((isSetDistributed_columns()) ? 131071 : 524287);
    if (isSetDistributed_columns())
      hashCode = hashCode * 8191 + distributed_columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartitions()) ? 131071 : 524287);
    if (isSetPartitions())
      hashCode = hashCode * 8191 + partitions.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_columns()) ? 131071 : 524287);
    if (isSetPartition_columns())
      hashCode = hashCode * 8191 + partition_columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_exprs()) ? 131071 : 524287);
    if (isSetPartition_exprs())
      hashCode = hashCode * 8191 + partition_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnable_automatic_partition()) ? 131071 : 524287);
    if (isSetEnable_automatic_partition())
      hashCode = hashCode * 8191 + ((enable_automatic_partition) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TOlapTablePartitionParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetDb_id(), other.isSetDb_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_id, other.db_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_id(), other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_column(), other.isSetPartition_column());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_column()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_column, other.partition_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDistributed_columns(), other.isSetDistributed_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistributed_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distributed_columns, other.distributed_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitions(), other.isSetPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, other.partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_columns(), other.isSetPartition_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_columns, other.partition_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_exprs(), other.isSetPartition_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_exprs, other.partition_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_automatic_partition(), other.isSetEnable_automatic_partition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_automatic_partition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_automatic_partition, other.enable_automatic_partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TOlapTablePartitionParam(");
    boolean first = true;

    sb.append("db_id:");
    sb.append(this.db_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("table_id:");
    sb.append(this.table_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (isSetPartition_column()) {
      if (!first) sb.append(", ");
      sb.append("partition_column:");
      if (this.partition_column == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_column);
      }
      first = false;
    }
    if (isSetDistributed_columns()) {
      if (!first) sb.append(", ");
      sb.append("distributed_columns:");
      if (this.distributed_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.distributed_columns);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("partitions:");
    if (this.partitions == null) {
      sb.append("null");
    } else {
      sb.append(this.partitions);
    }
    first = false;
    if (isSetPartition_columns()) {
      if (!first) sb.append(", ");
      sb.append("partition_columns:");
      if (this.partition_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_columns);
      }
      first = false;
    }
    if (isSetPartition_exprs()) {
      if (!first) sb.append(", ");
      sb.append("partition_exprs:");
      if (this.partition_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_exprs);
      }
      first = false;
    }
    if (isSetEnable_automatic_partition()) {
      if (!first) sb.append(", ");
      sb.append("enable_automatic_partition:");
      sb.append(this.enable_automatic_partition);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'db_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'table_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    if (partitions == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partitions' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOlapTablePartitionParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapTablePartitionParamStandardScheme getScheme() {
      return new TOlapTablePartitionParamStandardScheme();
    }
  }

  private static class TOlapTablePartitionParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<TOlapTablePartitionParam> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TOlapTablePartitionParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.db_id = iprot.readI64();
              struct.setDb_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_id = iprot.readI64();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITION_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partition_column = iprot.readString();
              struct.setPartition_columnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISTRIBUTED_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.distributed_columns = new java.util.ArrayList<java.lang.String>(_list48.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = iprot.readString();
                  struct.distributed_columns.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setDistributed_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.partitions = new java.util.ArrayList<TOlapTablePartition>(_list51.size);
                @org.apache.thrift.annotation.Nullable TOlapTablePartition _elem52;
                for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                {
                  _elem52 = new TOlapTablePartition();
                  _elem52.read(iprot);
                  struct.partitions.add(_elem52);
                }
                iprot.readListEnd();
              }
              struct.setPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARTITION_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.partition_columns = new java.util.ArrayList<java.lang.String>(_list54.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem55;
                for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                {
                  _elem55 = iprot.readString();
                  struct.partition_columns.add(_elem55);
                }
                iprot.readListEnd();
              }
              struct.setPartition_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARTITION_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list57 = iprot.readListBegin();
                struct.partition_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list57.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem58;
                for (int _i59 = 0; _i59 < _list57.size; ++_i59)
                {
                  _elem58 = new com.starrocks.thrift.TExpr();
                  _elem58.read(iprot);
                  struct.partition_exprs.add(_elem58);
                }
                iprot.readListEnd();
              }
              struct.setPartition_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ENABLE_AUTOMATIC_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_automatic_partition = iprot.readBool();
              struct.setEnable_automatic_partitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDb_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'db_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTable_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TOlapTablePartitionParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DB_ID_FIELD_DESC);
      oprot.writeI64(struct.db_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
      oprot.writeI64(struct.table_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI64(struct.version);
      oprot.writeFieldEnd();
      if (struct.partition_column != null) {
        if (struct.isSetPartition_column()) {
          oprot.writeFieldBegin(PARTITION_COLUMN_FIELD_DESC);
          oprot.writeString(struct.partition_column);
          oprot.writeFieldEnd();
        }
      }
      if (struct.distributed_columns != null) {
        if (struct.isSetDistributed_columns()) {
          oprot.writeFieldBegin(DISTRIBUTED_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.distributed_columns.size()));
            for (java.lang.String _iter60 : struct.distributed_columns)
            {
              oprot.writeString(_iter60);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partitions != null) {
        oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partitions.size()));
          for (TOlapTablePartition _iter61 : struct.partitions)
          {
            _iter61.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.partition_columns != null) {
        if (struct.isSetPartition_columns()) {
          oprot.writeFieldBegin(PARTITION_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.partition_columns.size()));
            for (java.lang.String _iter62 : struct.partition_columns)
            {
              oprot.writeString(_iter62);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_exprs != null) {
        if (struct.isSetPartition_exprs()) {
          oprot.writeFieldBegin(PARTITION_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_exprs.size()));
            for (com.starrocks.thrift.TExpr _iter63 : struct.partition_exprs)
            {
              _iter63.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_automatic_partition()) {
        oprot.writeFieldBegin(ENABLE_AUTOMATIC_PARTITION_FIELD_DESC);
        oprot.writeBool(struct.enable_automatic_partition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOlapTablePartitionParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapTablePartitionParamTupleScheme getScheme() {
      return new TOlapTablePartitionParamTupleScheme();
    }
  }

  private static class TOlapTablePartitionParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<TOlapTablePartitionParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOlapTablePartitionParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.db_id);
      oprot.writeI64(struct.table_id);
      oprot.writeI64(struct.version);
      {
        oprot.writeI32(struct.partitions.size());
        for (TOlapTablePartition _iter64 : struct.partitions)
        {
          _iter64.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPartition_column()) {
        optionals.set(0);
      }
      if (struct.isSetDistributed_columns()) {
        optionals.set(1);
      }
      if (struct.isSetPartition_columns()) {
        optionals.set(2);
      }
      if (struct.isSetPartition_exprs()) {
        optionals.set(3);
      }
      if (struct.isSetEnable_automatic_partition()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPartition_column()) {
        oprot.writeString(struct.partition_column);
      }
      if (struct.isSetDistributed_columns()) {
        {
          oprot.writeI32(struct.distributed_columns.size());
          for (java.lang.String _iter65 : struct.distributed_columns)
          {
            oprot.writeString(_iter65);
          }
        }
      }
      if (struct.isSetPartition_columns()) {
        {
          oprot.writeI32(struct.partition_columns.size());
          for (java.lang.String _iter66 : struct.partition_columns)
          {
            oprot.writeString(_iter66);
          }
        }
      }
      if (struct.isSetPartition_exprs()) {
        {
          oprot.writeI32(struct.partition_exprs.size());
          for (com.starrocks.thrift.TExpr _iter67 : struct.partition_exprs)
          {
            _iter67.write(oprot);
          }
        }
      }
      if (struct.isSetEnable_automatic_partition()) {
        oprot.writeBool(struct.enable_automatic_partition);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOlapTablePartitionParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.db_id = iprot.readI64();
      struct.setDb_idIsSet(true);
      struct.table_id = iprot.readI64();
      struct.setTable_idIsSet(true);
      struct.version = iprot.readI64();
      struct.setVersionIsSet(true);
      {
        org.apache.thrift.protocol.TList _list68 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.partitions = new java.util.ArrayList<TOlapTablePartition>(_list68.size);
        @org.apache.thrift.annotation.Nullable TOlapTablePartition _elem69;
        for (int _i70 = 0; _i70 < _list68.size; ++_i70)
        {
          _elem69 = new TOlapTablePartition();
          _elem69.read(iprot);
          struct.partitions.add(_elem69);
        }
      }
      struct.setPartitionsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.partition_column = iprot.readString();
        struct.setPartition_columnIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list71 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.distributed_columns = new java.util.ArrayList<java.lang.String>(_list71.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = iprot.readString();
            struct.distributed_columns.add(_elem72);
          }
        }
        struct.setDistributed_columnsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list74 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.partition_columns = new java.util.ArrayList<java.lang.String>(_list74.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem75;
          for (int _i76 = 0; _i76 < _list74.size; ++_i76)
          {
            _elem75 = iprot.readString();
            struct.partition_columns.add(_elem75);
          }
        }
        struct.setPartition_columnsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list77 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.partition_exprs = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list77.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = new com.starrocks.thrift.TExpr();
            _elem78.read(iprot);
            struct.partition_exprs.add(_elem78);
          }
        }
        struct.setPartition_exprsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.enable_automatic_partition = iprot.readBool();
        struct.setEnable_automatic_partitionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

