/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TUserPrivDesc implements org.apache.thrift.TBase<TUserPrivDesc, TUserPrivDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TUserPrivDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUserPrivDesc");

  private static final org.apache.thrift.protocol.TField USER_IDENT_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ident_str", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRIV_FIELD_DESC = new org.apache.thrift.protocol.TField("priv", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IS_GRANTABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_grantable", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TUserPrivDescStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TUserPrivDescTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String user_ident_str; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String priv; // optional
  public boolean is_grantable; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_IDENT_STR((short)1, "user_ident_str"),
    PRIV((short)2, "priv"),
    IS_GRANTABLE((short)3, "is_grantable");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_IDENT_STR
          return USER_IDENT_STR;
        case 2: // PRIV
          return PRIV;
        case 3: // IS_GRANTABLE
          return IS_GRANTABLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_GRANTABLE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER_IDENT_STR,_Fields.PRIV,_Fields.IS_GRANTABLE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_IDENT_STR, new org.apache.thrift.meta_data.FieldMetaData("user_ident_str", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIV, new org.apache.thrift.meta_data.FieldMetaData("priv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_GRANTABLE, new org.apache.thrift.meta_data.FieldMetaData("is_grantable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUserPrivDesc.class, metaDataMap);
  }

  public TUserPrivDesc() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUserPrivDesc(TUserPrivDesc other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUser_ident_str()) {
      this.user_ident_str = other.user_ident_str;
    }
    if (other.isSetPriv()) {
      this.priv = other.priv;
    }
    this.is_grantable = other.is_grantable;
  }

  @Override
  public TUserPrivDesc deepCopy() {
    return new TUserPrivDesc(this);
  }

  @Override
  public void clear() {
    this.user_ident_str = null;
    this.priv = null;
    setIs_grantableIsSet(false);
    this.is_grantable = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser_ident_str() {
    return this.user_ident_str;
  }

  public TUserPrivDesc setUser_ident_str(@org.apache.thrift.annotation.Nullable java.lang.String user_ident_str) {
    this.user_ident_str = user_ident_str;
    return this;
  }

  public void unsetUser_ident_str() {
    this.user_ident_str = null;
  }

  /** Returns true if field user_ident_str is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_ident_str() {
    return this.user_ident_str != null;
  }

  public void setUser_ident_strIsSet(boolean value) {
    if (!value) {
      this.user_ident_str = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPriv() {
    return this.priv;
  }

  public TUserPrivDesc setPriv(@org.apache.thrift.annotation.Nullable java.lang.String priv) {
    this.priv = priv;
    return this;
  }

  public void unsetPriv() {
    this.priv = null;
  }

  /** Returns true if field priv is set (has been assigned a value) and false otherwise */
  public boolean isSetPriv() {
    return this.priv != null;
  }

  public void setPrivIsSet(boolean value) {
    if (!value) {
      this.priv = null;
    }
  }

  public boolean isIs_grantable() {
    return this.is_grantable;
  }

  public TUserPrivDesc setIs_grantable(boolean is_grantable) {
    this.is_grantable = is_grantable;
    setIs_grantableIsSet(true);
    return this;
  }

  public void unsetIs_grantable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_GRANTABLE_ISSET_ID);
  }

  /** Returns true if field is_grantable is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_grantable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_GRANTABLE_ISSET_ID);
  }

  public void setIs_grantableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_GRANTABLE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case USER_IDENT_STR:
      if (value == null) {
        unsetUser_ident_str();
      } else {
        setUser_ident_str((java.lang.String)value);
      }
      break;

    case PRIV:
      if (value == null) {
        unsetPriv();
      } else {
        setPriv((java.lang.String)value);
      }
      break;

    case IS_GRANTABLE:
      if (value == null) {
        unsetIs_grantable();
      } else {
        setIs_grantable((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_IDENT_STR:
      return getUser_ident_str();

    case PRIV:
      return getPriv();

    case IS_GRANTABLE:
      return isIs_grantable();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER_IDENT_STR:
      return isSetUser_ident_str();
    case PRIV:
      return isSetPriv();
    case IS_GRANTABLE:
      return isSetIs_grantable();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TUserPrivDesc)
      return this.equals((TUserPrivDesc)that);
    return false;
  }

  public boolean equals(TUserPrivDesc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_user_ident_str = true && this.isSetUser_ident_str();
    boolean that_present_user_ident_str = true && that.isSetUser_ident_str();
    if (this_present_user_ident_str || that_present_user_ident_str) {
      if (!(this_present_user_ident_str && that_present_user_ident_str))
        return false;
      if (!this.user_ident_str.equals(that.user_ident_str))
        return false;
    }

    boolean this_present_priv = true && this.isSetPriv();
    boolean that_present_priv = true && that.isSetPriv();
    if (this_present_priv || that_present_priv) {
      if (!(this_present_priv && that_present_priv))
        return false;
      if (!this.priv.equals(that.priv))
        return false;
    }

    boolean this_present_is_grantable = true && this.isSetIs_grantable();
    boolean that_present_is_grantable = true && that.isSetIs_grantable();
    if (this_present_is_grantable || that_present_is_grantable) {
      if (!(this_present_is_grantable && that_present_is_grantable))
        return false;
      if (this.is_grantable != that.is_grantable)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUser_ident_str()) ? 131071 : 524287);
    if (isSetUser_ident_str())
      hashCode = hashCode * 8191 + user_ident_str.hashCode();

    hashCode = hashCode * 8191 + ((isSetPriv()) ? 131071 : 524287);
    if (isSetPriv())
      hashCode = hashCode * 8191 + priv.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_grantable()) ? 131071 : 524287);
    if (isSetIs_grantable())
      hashCode = hashCode * 8191 + ((is_grantable) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TUserPrivDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUser_ident_str(), other.isSetUser_ident_str());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_ident_str()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ident_str, other.user_ident_str);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPriv(), other.isSetPriv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priv, other.priv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_grantable(), other.isSetIs_grantable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_grantable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_grantable, other.is_grantable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TUserPrivDesc(");
    boolean first = true;

    if (isSetUser_ident_str()) {
      sb.append("user_ident_str:");
      if (this.user_ident_str == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ident_str);
      }
      first = false;
    }
    if (isSetPriv()) {
      if (!first) sb.append(", ");
      sb.append("priv:");
      if (this.priv == null) {
        sb.append("null");
      } else {
        sb.append(this.priv);
      }
      first = false;
    }
    if (isSetIs_grantable()) {
      if (!first) sb.append(", ");
      sb.append("is_grantable:");
      sb.append(this.is_grantable);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUserPrivDescStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TUserPrivDescStandardScheme getScheme() {
      return new TUserPrivDescStandardScheme();
    }
  }

  private static class TUserPrivDescStandardScheme extends org.apache.thrift.scheme.StandardScheme<TUserPrivDesc> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TUserPrivDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_IDENT_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_ident_str = iprot.readString();
              struct.setUser_ident_strIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRIV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.priv = iprot.readString();
              struct.setPrivIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_GRANTABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_grantable = iprot.readBool();
              struct.setIs_grantableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TUserPrivDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.user_ident_str != null) {
        if (struct.isSetUser_ident_str()) {
          oprot.writeFieldBegin(USER_IDENT_STR_FIELD_DESC);
          oprot.writeString(struct.user_ident_str);
          oprot.writeFieldEnd();
        }
      }
      if (struct.priv != null) {
        if (struct.isSetPriv()) {
          oprot.writeFieldBegin(PRIV_FIELD_DESC);
          oprot.writeString(struct.priv);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_grantable()) {
        oprot.writeFieldBegin(IS_GRANTABLE_FIELD_DESC);
        oprot.writeBool(struct.is_grantable);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUserPrivDescTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TUserPrivDescTupleScheme getScheme() {
      return new TUserPrivDescTupleScheme();
    }
  }

  private static class TUserPrivDescTupleScheme extends org.apache.thrift.scheme.TupleScheme<TUserPrivDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUserPrivDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUser_ident_str()) {
        optionals.set(0);
      }
      if (struct.isSetPriv()) {
        optionals.set(1);
      }
      if (struct.isSetIs_grantable()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetUser_ident_str()) {
        oprot.writeString(struct.user_ident_str);
      }
      if (struct.isSetPriv()) {
        oprot.writeString(struct.priv);
      }
      if (struct.isSetIs_grantable()) {
        oprot.writeBool(struct.is_grantable);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUserPrivDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.user_ident_str = iprot.readString();
        struct.setUser_ident_strIsSet(true);
      }
      if (incoming.get(1)) {
        struct.priv = iprot.readString();
        struct.setPrivIsSet(true);
      }
      if (incoming.get(2)) {
        struct.is_grantable = iprot.readBool();
        struct.setIs_grantableIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

