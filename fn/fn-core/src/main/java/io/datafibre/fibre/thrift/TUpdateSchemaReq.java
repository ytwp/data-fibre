/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TUpdateSchemaReq implements org.apache.thrift.TBase<TUpdateSchemaReq, TUpdateSchemaReq._Fields>, java.io.Serializable, Cloneable, Comparable<TUpdateSchemaReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUpdateSchemaReq");

  private static final org.apache.thrift.protocol.TField INDEX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("index_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SCHEMA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SCHEMA_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_version", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TABLET_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_ids", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField COLUMN_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("column_param", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TUpdateSchemaReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TUpdateSchemaReqTupleSchemeFactory();

  public long index_id; // optional
  public long schema_id; // optional
  public long schema_version; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> tablet_ids; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TOlapTableColumnParam column_param; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX_ID((short)1, "index_id"),
    SCHEMA_ID((short)2, "schema_id"),
    SCHEMA_VERSION((short)3, "schema_version"),
    TABLET_IDS((short)4, "tablet_ids"),
    COLUMN_PARAM((short)5, "column_param");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX_ID
          return INDEX_ID;
        case 2: // SCHEMA_ID
          return SCHEMA_ID;
        case 3: // SCHEMA_VERSION
          return SCHEMA_VERSION;
        case 4: // TABLET_IDS
          return TABLET_IDS;
        case 5: // COLUMN_PARAM
          return COLUMN_PARAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ID_ISSET_ID = 0;
  private static final int __SCHEMA_ID_ISSET_ID = 1;
  private static final int __SCHEMA_VERSION_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INDEX_ID,_Fields.SCHEMA_ID,_Fields.SCHEMA_VERSION,_Fields.TABLET_IDS,_Fields.COLUMN_PARAM};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX_ID, new org.apache.thrift.meta_data.FieldMetaData("index_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCHEMA_ID, new org.apache.thrift.meta_data.FieldMetaData("schema_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCHEMA_VERSION, new org.apache.thrift.meta_data.FieldMetaData("schema_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLET_IDS, new org.apache.thrift.meta_data.FieldMetaData("tablet_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.COLUMN_PARAM, new org.apache.thrift.meta_data.FieldMetaData("column_param", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TOlapTableColumnParam.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUpdateSchemaReq.class, metaDataMap);
  }

  public TUpdateSchemaReq() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUpdateSchemaReq(TUpdateSchemaReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.index_id = other.index_id;
    this.schema_id = other.schema_id;
    this.schema_version = other.schema_version;
    if (other.isSetTablet_ids()) {
      java.util.List<java.lang.Long> __this__tablet_ids = new java.util.ArrayList<java.lang.Long>(other.tablet_ids);
      this.tablet_ids = __this__tablet_ids;
    }
    if (other.isSetColumn_param()) {
      this.column_param = new io.datafibre.fibre.thrift.TOlapTableColumnParam(other.column_param);
    }
  }

  @Override
  public TUpdateSchemaReq deepCopy() {
    return new TUpdateSchemaReq(this);
  }

  @Override
  public void clear() {
    setIndex_idIsSet(false);
    this.index_id = 0;
    setSchema_idIsSet(false);
    this.schema_id = 0;
    setSchema_versionIsSet(false);
    this.schema_version = 0;
    this.tablet_ids = null;
    this.column_param = null;
  }

  public long getIndex_id() {
    return this.index_id;
  }

  public TUpdateSchemaReq setIndex_id(long index_id) {
    this.index_id = index_id;
    setIndex_idIsSet(true);
    return this;
  }

  public void unsetIndex_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_ID_ISSET_ID);
  }

  /** Returns true if field index_id is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_ID_ISSET_ID);
  }

  public void setIndex_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_ID_ISSET_ID, value);
  }

  public long getSchema_id() {
    return this.schema_id;
  }

  public TUpdateSchemaReq setSchema_id(long schema_id) {
    this.schema_id = schema_id;
    setSchema_idIsSet(true);
    return this;
  }

  public void unsetSchema_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_ID_ISSET_ID);
  }

  /** Returns true if field schema_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCHEMA_ID_ISSET_ID);
  }

  public void setSchema_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCHEMA_ID_ISSET_ID, value);
  }

  public long getSchema_version() {
    return this.schema_version;
  }

  public TUpdateSchemaReq setSchema_version(long schema_version) {
    this.schema_version = schema_version;
    setSchema_versionIsSet(true);
    return this;
  }

  public void unsetSchema_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_VERSION_ISSET_ID);
  }

  /** Returns true if field schema_version is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCHEMA_VERSION_ISSET_ID);
  }

  public void setSchema_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCHEMA_VERSION_ISSET_ID, value);
  }

  public int getTablet_idsSize() {
    return (this.tablet_ids == null) ? 0 : this.tablet_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getTablet_idsIterator() {
    return (this.tablet_ids == null) ? null : this.tablet_ids.iterator();
  }

  public void addToTablet_ids(long elem) {
    if (this.tablet_ids == null) {
      this.tablet_ids = new java.util.ArrayList<java.lang.Long>();
    }
    this.tablet_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getTablet_ids() {
    return this.tablet_ids;
  }

  public TUpdateSchemaReq setTablet_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> tablet_ids) {
    this.tablet_ids = tablet_ids;
    return this;
  }

  public void unsetTablet_ids() {
    this.tablet_ids = null;
  }

  /** Returns true if field tablet_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_ids() {
    return this.tablet_ids != null;
  }

  public void setTablet_idsIsSet(boolean value) {
    if (!value) {
      this.tablet_ids = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TOlapTableColumnParam getColumn_param() {
    return this.column_param;
  }

  public TUpdateSchemaReq setColumn_param(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TOlapTableColumnParam column_param) {
    this.column_param = column_param;
    return this;
  }

  public void unsetColumn_param() {
    this.column_param = null;
  }

  /** Returns true if field column_param is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_param() {
    return this.column_param != null;
  }

  public void setColumn_paramIsSet(boolean value) {
    if (!value) {
      this.column_param = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case INDEX_ID:
      if (value == null) {
        unsetIndex_id();
      } else {
        setIndex_id((java.lang.Long)value);
      }
      break;

    case SCHEMA_ID:
      if (value == null) {
        unsetSchema_id();
      } else {
        setSchema_id((java.lang.Long)value);
      }
      break;

    case SCHEMA_VERSION:
      if (value == null) {
        unsetSchema_version();
      } else {
        setSchema_version((java.lang.Long)value);
      }
      break;

    case TABLET_IDS:
      if (value == null) {
        unsetTablet_ids();
      } else {
        setTablet_ids((java.util.List<java.lang.Long>)value);
      }
      break;

    case COLUMN_PARAM:
      if (value == null) {
        unsetColumn_param();
      } else {
        setColumn_param((io.datafibre.fibre.thrift.TOlapTableColumnParam)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX_ID:
      return getIndex_id();

    case SCHEMA_ID:
      return getSchema_id();

    case SCHEMA_VERSION:
      return getSchema_version();

    case TABLET_IDS:
      return getTablet_ids();

    case COLUMN_PARAM:
      return getColumn_param();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INDEX_ID:
      return isSetIndex_id();
    case SCHEMA_ID:
      return isSetSchema_id();
    case SCHEMA_VERSION:
      return isSetSchema_version();
    case TABLET_IDS:
      return isSetTablet_ids();
    case COLUMN_PARAM:
      return isSetColumn_param();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TUpdateSchemaReq)
      return this.equals((TUpdateSchemaReq)that);
    return false;
  }

  public boolean equals(TUpdateSchemaReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_index_id = true && this.isSetIndex_id();
    boolean that_present_index_id = true && that.isSetIndex_id();
    if (this_present_index_id || that_present_index_id) {
      if (!(this_present_index_id && that_present_index_id))
        return false;
      if (this.index_id != that.index_id)
        return false;
    }

    boolean this_present_schema_id = true && this.isSetSchema_id();
    boolean that_present_schema_id = true && that.isSetSchema_id();
    if (this_present_schema_id || that_present_schema_id) {
      if (!(this_present_schema_id && that_present_schema_id))
        return false;
      if (this.schema_id != that.schema_id)
        return false;
    }

    boolean this_present_schema_version = true && this.isSetSchema_version();
    boolean that_present_schema_version = true && that.isSetSchema_version();
    if (this_present_schema_version || that_present_schema_version) {
      if (!(this_present_schema_version && that_present_schema_version))
        return false;
      if (this.schema_version != that.schema_version)
        return false;
    }

    boolean this_present_tablet_ids = true && this.isSetTablet_ids();
    boolean that_present_tablet_ids = true && that.isSetTablet_ids();
    if (this_present_tablet_ids || that_present_tablet_ids) {
      if (!(this_present_tablet_ids && that_present_tablet_ids))
        return false;
      if (!this.tablet_ids.equals(that.tablet_ids))
        return false;
    }

    boolean this_present_column_param = true && this.isSetColumn_param();
    boolean that_present_column_param = true && that.isSetColumn_param();
    if (this_present_column_param || that_present_column_param) {
      if (!(this_present_column_param && that_present_column_param))
        return false;
      if (!this.column_param.equals(that.column_param))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIndex_id()) ? 131071 : 524287);
    if (isSetIndex_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(index_id);

    hashCode = hashCode * 8191 + ((isSetSchema_id()) ? 131071 : 524287);
    if (isSetSchema_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(schema_id);

    hashCode = hashCode * 8191 + ((isSetSchema_version()) ? 131071 : 524287);
    if (isSetSchema_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(schema_version);

    hashCode = hashCode * 8191 + ((isSetTablet_ids()) ? 131071 : 524287);
    if (isSetTablet_ids())
      hashCode = hashCode * 8191 + tablet_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumn_param()) ? 131071 : 524287);
    if (isSetColumn_param())
      hashCode = hashCode * 8191 + column_param.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TUpdateSchemaReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetIndex_id(), other.isSetIndex_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_id, other.index_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchema_id(), other.isSetSchema_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_id, other.schema_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchema_version(), other.isSetSchema_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_version, other.schema_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_ids(), other.isSetTablet_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_ids, other.tablet_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumn_param(), other.isSetColumn_param());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_param()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_param, other.column_param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TUpdateSchemaReq(");
    boolean first = true;

    if (isSetIndex_id()) {
      sb.append("index_id:");
      sb.append(this.index_id);
      first = false;
    }
    if (isSetSchema_id()) {
      if (!first) sb.append(", ");
      sb.append("schema_id:");
      sb.append(this.schema_id);
      first = false;
    }
    if (isSetSchema_version()) {
      if (!first) sb.append(", ");
      sb.append("schema_version:");
      sb.append(this.schema_version);
      first = false;
    }
    if (isSetTablet_ids()) {
      if (!first) sb.append(", ");
      sb.append("tablet_ids:");
      if (this.tablet_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet_ids);
      }
      first = false;
    }
    if (isSetColumn_param()) {
      if (!first) sb.append(", ");
      sb.append("column_param:");
      if (this.column_param == null) {
        sb.append("null");
      } else {
        sb.append(this.column_param);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (column_param != null) {
      column_param.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUpdateSchemaReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TUpdateSchemaReqStandardScheme getScheme() {
      return new TUpdateSchemaReqStandardScheme();
    }
  }

  private static class TUpdateSchemaReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<TUpdateSchemaReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TUpdateSchemaReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INDEX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.index_id = iprot.readI64();
              struct.setIndex_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCHEMA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.schema_id = iprot.readI64();
              struct.setSchema_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCHEMA_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.schema_version = iprot.readI64();
              struct.setSchema_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLET_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                struct.tablet_ids = new java.util.ArrayList<java.lang.Long>(_list98.size);
                long _elem99;
                for (int _i100 = 0; _i100 < _list98.size; ++_i100)
                {
                  _elem99 = iprot.readI64();
                  struct.tablet_ids.add(_elem99);
                }
                iprot.readListEnd();
              }
              struct.setTablet_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLUMN_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.column_param = new io.datafibre.fibre.thrift.TOlapTableColumnParam();
              struct.column_param.read(iprot);
              struct.setColumn_paramIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TUpdateSchemaReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetIndex_id()) {
        oprot.writeFieldBegin(INDEX_ID_FIELD_DESC);
        oprot.writeI64(struct.index_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSchema_id()) {
        oprot.writeFieldBegin(SCHEMA_ID_FIELD_DESC);
        oprot.writeI64(struct.schema_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSchema_version()) {
        oprot.writeFieldBegin(SCHEMA_VERSION_FIELD_DESC);
        oprot.writeI64(struct.schema_version);
        oprot.writeFieldEnd();
      }
      if (struct.tablet_ids != null) {
        if (struct.isSetTablet_ids()) {
          oprot.writeFieldBegin(TABLET_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.tablet_ids.size()));
            for (long _iter101 : struct.tablet_ids)
            {
              oprot.writeI64(_iter101);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_param != null) {
        if (struct.isSetColumn_param()) {
          oprot.writeFieldBegin(COLUMN_PARAM_FIELD_DESC);
          struct.column_param.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUpdateSchemaReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TUpdateSchemaReqTupleScheme getScheme() {
      return new TUpdateSchemaReqTupleScheme();
    }
  }

  private static class TUpdateSchemaReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<TUpdateSchemaReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUpdateSchemaReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIndex_id()) {
        optionals.set(0);
      }
      if (struct.isSetSchema_id()) {
        optionals.set(1);
      }
      if (struct.isSetSchema_version()) {
        optionals.set(2);
      }
      if (struct.isSetTablet_ids()) {
        optionals.set(3);
      }
      if (struct.isSetColumn_param()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetIndex_id()) {
        oprot.writeI64(struct.index_id);
      }
      if (struct.isSetSchema_id()) {
        oprot.writeI64(struct.schema_id);
      }
      if (struct.isSetSchema_version()) {
        oprot.writeI64(struct.schema_version);
      }
      if (struct.isSetTablet_ids()) {
        {
          oprot.writeI32(struct.tablet_ids.size());
          for (long _iter102 : struct.tablet_ids)
          {
            oprot.writeI64(_iter102);
          }
        }
      }
      if (struct.isSetColumn_param()) {
        struct.column_param.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUpdateSchemaReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.index_id = iprot.readI64();
        struct.setIndex_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.schema_id = iprot.readI64();
        struct.setSchema_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.schema_version = iprot.readI64();
        struct.setSchema_versionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list103 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.tablet_ids = new java.util.ArrayList<java.lang.Long>(_list103.size);
          long _elem104;
          for (int _i105 = 0; _i105 < _list103.size; ++_i105)
          {
            _elem104 = iprot.readI64();
            struct.tablet_ids.add(_elem104);
          }
        }
        struct.setTablet_idsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.column_param = new io.datafibre.fibre.thrift.TOlapTableColumnParam();
        struct.column_param.read(iprot);
        struct.setColumn_paramIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

