/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TMVCommitEpochTask implements org.apache.thrift.TBase<TMVCommitEpochTask, TMVCommitEpochTask._Fields>, java.io.Serializable, Cloneable, Comparable<TMVCommitEpochTask> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMVCommitEpochTask");

  private static final org.apache.thrift.protocol.TField EPOCH_FIELD_DESC = new org.apache.thrift.protocol.TField("epoch", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PARTITION_VERSION_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_version_infos", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TRANSACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transaction_id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COMMIT_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("commit_timestamp", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMVCommitEpochTaskStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMVCommitEpochTaskTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TMVEpoch epoch; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TPartitionVersionInfo> partition_version_infos; // optional
  public long transaction_id; // optional
  public long commit_timestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EPOCH((short)1, "epoch"),
    PARTITION_VERSION_INFOS((short)2, "partition_version_infos"),
    TRANSACTION_ID((short)3, "transaction_id"),
    COMMIT_TIMESTAMP((short)4, "commit_timestamp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EPOCH
          return EPOCH;
        case 2: // PARTITION_VERSION_INFOS
          return PARTITION_VERSION_INFOS;
        case 3: // TRANSACTION_ID
          return TRANSACTION_ID;
        case 4: // COMMIT_TIMESTAMP
          return COMMIT_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRANSACTION_ID_ISSET_ID = 0;
  private static final int __COMMIT_TIMESTAMP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EPOCH,_Fields.PARTITION_VERSION_INFOS,_Fields.TRANSACTION_ID,_Fields.COMMIT_TIMESTAMP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EPOCH, new org.apache.thrift.meta_data.FieldMetaData("epoch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMVEpoch.class)));
    tmpMap.put(_Fields.PARTITION_VERSION_INFOS, new org.apache.thrift.meta_data.FieldMetaData("partition_version_infos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TPartitionVersionInfo.class))));
    tmpMap.put(_Fields.TRANSACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("transaction_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTransactionId")));
    tmpMap.put(_Fields.COMMIT_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("commit_timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMVCommitEpochTask.class, metaDataMap);
  }

  public TMVCommitEpochTask() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMVCommitEpochTask(TMVCommitEpochTask other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetEpoch()) {
      this.epoch = new TMVEpoch(other.epoch);
    }
    if (other.isSetPartition_version_infos()) {
      java.util.List<io.datafibre.fibre.thrift.TPartitionVersionInfo> __this__partition_version_infos = new java.util.ArrayList<io.datafibre.fibre.thrift.TPartitionVersionInfo>(other.partition_version_infos.size());
      for (io.datafibre.fibre.thrift.TPartitionVersionInfo other_element : other.partition_version_infos) {
        __this__partition_version_infos.add(new io.datafibre.fibre.thrift.TPartitionVersionInfo(other_element));
      }
      this.partition_version_infos = __this__partition_version_infos;
    }
    this.transaction_id = other.transaction_id;
    this.commit_timestamp = other.commit_timestamp;
  }

  @Override
  public TMVCommitEpochTask deepCopy() {
    return new TMVCommitEpochTask(this);
  }

  @Override
  public void clear() {
    this.epoch = null;
    this.partition_version_infos = null;
    setTransaction_idIsSet(false);
    this.transaction_id = 0;
    setCommit_timestampIsSet(false);
    this.commit_timestamp = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public TMVEpoch getEpoch() {
    return this.epoch;
  }

  public TMVCommitEpochTask setEpoch(@org.apache.thrift.annotation.Nullable TMVEpoch epoch) {
    this.epoch = epoch;
    return this;
  }

  public void unsetEpoch() {
    this.epoch = null;
  }

  /** Returns true if field epoch is set (has been assigned a value) and false otherwise */
  public boolean isSetEpoch() {
    return this.epoch != null;
  }

  public void setEpochIsSet(boolean value) {
    if (!value) {
      this.epoch = null;
    }
  }

  public int getPartition_version_infosSize() {
    return (this.partition_version_infos == null) ? 0 : this.partition_version_infos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TPartitionVersionInfo> getPartition_version_infosIterator() {
    return (this.partition_version_infos == null) ? null : this.partition_version_infos.iterator();
  }

  public void addToPartition_version_infos(io.datafibre.fibre.thrift.TPartitionVersionInfo elem) {
    if (this.partition_version_infos == null) {
      this.partition_version_infos = new java.util.ArrayList<io.datafibre.fibre.thrift.TPartitionVersionInfo>();
    }
    this.partition_version_infos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TPartitionVersionInfo> getPartition_version_infos() {
    return this.partition_version_infos;
  }

  public TMVCommitEpochTask setPartition_version_infos(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TPartitionVersionInfo> partition_version_infos) {
    this.partition_version_infos = partition_version_infos;
    return this;
  }

  public void unsetPartition_version_infos() {
    this.partition_version_infos = null;
  }

  /** Returns true if field partition_version_infos is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_version_infos() {
    return this.partition_version_infos != null;
  }

  public void setPartition_version_infosIsSet(boolean value) {
    if (!value) {
      this.partition_version_infos = null;
    }
  }

  public long getTransaction_id() {
    return this.transaction_id;
  }

  public TMVCommitEpochTask setTransaction_id(long transaction_id) {
    this.transaction_id = transaction_id;
    setTransaction_idIsSet(true);
    return this;
  }

  public void unsetTransaction_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSACTION_ID_ISSET_ID);
  }

  /** Returns true if field transaction_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTransaction_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSACTION_ID_ISSET_ID);
  }

  public void setTransaction_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSACTION_ID_ISSET_ID, value);
  }

  public long getCommit_timestamp() {
    return this.commit_timestamp;
  }

  public TMVCommitEpochTask setCommit_timestamp(long commit_timestamp) {
    this.commit_timestamp = commit_timestamp;
    setCommit_timestampIsSet(true);
    return this;
  }

  public void unsetCommit_timestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMIT_TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field commit_timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCommit_timestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMIT_TIMESTAMP_ISSET_ID);
  }

  public void setCommit_timestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMIT_TIMESTAMP_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case EPOCH:
      if (value == null) {
        unsetEpoch();
      } else {
        setEpoch((TMVEpoch)value);
      }
      break;

    case PARTITION_VERSION_INFOS:
      if (value == null) {
        unsetPartition_version_infos();
      } else {
        setPartition_version_infos((java.util.List<io.datafibre.fibre.thrift.TPartitionVersionInfo>)value);
      }
      break;

    case TRANSACTION_ID:
      if (value == null) {
        unsetTransaction_id();
      } else {
        setTransaction_id((java.lang.Long)value);
      }
      break;

    case COMMIT_TIMESTAMP:
      if (value == null) {
        unsetCommit_timestamp();
      } else {
        setCommit_timestamp((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case EPOCH:
      return getEpoch();

    case PARTITION_VERSION_INFOS:
      return getPartition_version_infos();

    case TRANSACTION_ID:
      return getTransaction_id();

    case COMMIT_TIMESTAMP:
      return getCommit_timestamp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case EPOCH:
      return isSetEpoch();
    case PARTITION_VERSION_INFOS:
      return isSetPartition_version_infos();
    case TRANSACTION_ID:
      return isSetTransaction_id();
    case COMMIT_TIMESTAMP:
      return isSetCommit_timestamp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TMVCommitEpochTask)
      return this.equals((TMVCommitEpochTask)that);
    return false;
  }

  public boolean equals(TMVCommitEpochTask that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_epoch = true && this.isSetEpoch();
    boolean that_present_epoch = true && that.isSetEpoch();
    if (this_present_epoch || that_present_epoch) {
      if (!(this_present_epoch && that_present_epoch))
        return false;
      if (!this.epoch.equals(that.epoch))
        return false;
    }

    boolean this_present_partition_version_infos = true && this.isSetPartition_version_infos();
    boolean that_present_partition_version_infos = true && that.isSetPartition_version_infos();
    if (this_present_partition_version_infos || that_present_partition_version_infos) {
      if (!(this_present_partition_version_infos && that_present_partition_version_infos))
        return false;
      if (!this.partition_version_infos.equals(that.partition_version_infos))
        return false;
    }

    boolean this_present_transaction_id = true && this.isSetTransaction_id();
    boolean that_present_transaction_id = true && that.isSetTransaction_id();
    if (this_present_transaction_id || that_present_transaction_id) {
      if (!(this_present_transaction_id && that_present_transaction_id))
        return false;
      if (this.transaction_id != that.transaction_id)
        return false;
    }

    boolean this_present_commit_timestamp = true && this.isSetCommit_timestamp();
    boolean that_present_commit_timestamp = true && that.isSetCommit_timestamp();
    if (this_present_commit_timestamp || that_present_commit_timestamp) {
      if (!(this_present_commit_timestamp && that_present_commit_timestamp))
        return false;
      if (this.commit_timestamp != that.commit_timestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEpoch()) ? 131071 : 524287);
    if (isSetEpoch())
      hashCode = hashCode * 8191 + epoch.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_version_infos()) ? 131071 : 524287);
    if (isSetPartition_version_infos())
      hashCode = hashCode * 8191 + partition_version_infos.hashCode();

    hashCode = hashCode * 8191 + ((isSetTransaction_id()) ? 131071 : 524287);
    if (isSetTransaction_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(transaction_id);

    hashCode = hashCode * 8191 + ((isSetCommit_timestamp()) ? 131071 : 524287);
    if (isSetCommit_timestamp())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(commit_timestamp);

    return hashCode;
  }

  @Override
  public int compareTo(TMVCommitEpochTask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetEpoch(), other.isSetEpoch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEpoch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.epoch, other.epoch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_version_infos(), other.isSetPartition_version_infos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_version_infos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_version_infos, other.partition_version_infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTransaction_id(), other.isSetTransaction_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransaction_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transaction_id, other.transaction_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCommit_timestamp(), other.isSetCommit_timestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommit_timestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commit_timestamp, other.commit_timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMVCommitEpochTask(");
    boolean first = true;

    if (isSetEpoch()) {
      sb.append("epoch:");
      if (this.epoch == null) {
        sb.append("null");
      } else {
        sb.append(this.epoch);
      }
      first = false;
    }
    if (isSetPartition_version_infos()) {
      if (!first) sb.append(", ");
      sb.append("partition_version_infos:");
      if (this.partition_version_infos == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_version_infos);
      }
      first = false;
    }
    if (isSetTransaction_id()) {
      if (!first) sb.append(", ");
      sb.append("transaction_id:");
      sb.append(this.transaction_id);
      first = false;
    }
    if (isSetCommit_timestamp()) {
      if (!first) sb.append(", ");
      sb.append("commit_timestamp:");
      sb.append(this.commit_timestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (epoch != null) {
      epoch.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMVCommitEpochTaskStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMVCommitEpochTaskStandardScheme getScheme() {
      return new TMVCommitEpochTaskStandardScheme();
    }
  }

  private static class TMVCommitEpochTaskStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMVCommitEpochTask> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TMVCommitEpochTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EPOCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.epoch = new TMVEpoch();
              struct.epoch.read(iprot);
              struct.setEpochIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTITION_VERSION_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.partition_version_infos = new java.util.ArrayList<io.datafibre.fibre.thrift.TPartitionVersionInfo>(_list36.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPartitionVersionInfo _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = new io.datafibre.fibre.thrift.TPartitionVersionInfo();
                  _elem37.read(iprot);
                  struct.partition_version_infos.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setPartition_version_infosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANSACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.transaction_id = iprot.readI64();
              struct.setTransaction_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMIT_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commit_timestamp = iprot.readI64();
              struct.setCommit_timestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TMVCommitEpochTask struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.epoch != null) {
        if (struct.isSetEpoch()) {
          oprot.writeFieldBegin(EPOCH_FIELD_DESC);
          struct.epoch.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_version_infos != null) {
        if (struct.isSetPartition_version_infos()) {
          oprot.writeFieldBegin(PARTITION_VERSION_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_version_infos.size()));
            for (io.datafibre.fibre.thrift.TPartitionVersionInfo _iter39 : struct.partition_version_infos)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTransaction_id()) {
        oprot.writeFieldBegin(TRANSACTION_ID_FIELD_DESC);
        oprot.writeI64(struct.transaction_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommit_timestamp()) {
        oprot.writeFieldBegin(COMMIT_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.commit_timestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMVCommitEpochTaskTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMVCommitEpochTaskTupleScheme getScheme() {
      return new TMVCommitEpochTaskTupleScheme();
    }
  }

  private static class TMVCommitEpochTaskTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMVCommitEpochTask> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMVCommitEpochTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEpoch()) {
        optionals.set(0);
      }
      if (struct.isSetPartition_version_infos()) {
        optionals.set(1);
      }
      if (struct.isSetTransaction_id()) {
        optionals.set(2);
      }
      if (struct.isSetCommit_timestamp()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEpoch()) {
        struct.epoch.write(oprot);
      }
      if (struct.isSetPartition_version_infos()) {
        {
          oprot.writeI32(struct.partition_version_infos.size());
          for (io.datafibre.fibre.thrift.TPartitionVersionInfo _iter40 : struct.partition_version_infos)
          {
            _iter40.write(oprot);
          }
        }
      }
      if (struct.isSetTransaction_id()) {
        oprot.writeI64(struct.transaction_id);
      }
      if (struct.isSetCommit_timestamp()) {
        oprot.writeI64(struct.commit_timestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMVCommitEpochTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.epoch = new TMVEpoch();
        struct.epoch.read(iprot);
        struct.setEpochIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list41 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.partition_version_infos = new java.util.ArrayList<io.datafibre.fibre.thrift.TPartitionVersionInfo>(_list41.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPartitionVersionInfo _elem42;
          for (int _i43 = 0; _i43 < _list41.size; ++_i43)
          {
            _elem42 = new io.datafibre.fibre.thrift.TPartitionVersionInfo();
            _elem42.read(iprot);
            struct.partition_version_infos.add(_elem42);
          }
        }
        struct.setPartition_version_infosIsSet(true);
      }
      if (incoming.get(2)) {
        struct.transaction_id = iprot.readI64();
        struct.setTransaction_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.commit_timestamp = iprot.readI64();
        struct.setCommit_timestampIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

