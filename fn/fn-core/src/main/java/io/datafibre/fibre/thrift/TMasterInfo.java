/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TMasterInfo implements org.apache.thrift.TBase<TMasterInfo, TMasterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TMasterInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMasterInfo");

  private static final org.apache.thrift.protocol.TField NETWORK_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("network_address", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EPOCH_FIELD_DESC = new org.apache.thrift.protocol.TField("epoch", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BACKEND_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_ip", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField HTTP_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("http_port", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HEARTBEAT_FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("heartbeat_flags", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField BACKEND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_id", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField MIN_ACTIVE_TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("min_active_txn_id", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField RUN_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("run_mode", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DISABLED_DISKS_FIELD_DESC = new org.apache.thrift.protocol.TField("disabled_disks", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField DECOMMISSIONED_DISKS_FIELD_DESC = new org.apache.thrift.protocol.TField("decommissioned_disks", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMasterInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMasterInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TNetworkAddress network_address; // required
  public int cluster_id; // required
  public long epoch; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String token; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String backend_ip; // optional
  public int http_port; // optional
  public long heartbeat_flags; // optional
  public long backend_id; // optional
  public long min_active_txn_id; // optional
  /**
   * 
   * @see io.datafibre.fibre.thrift.TRunMode
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TRunMode run_mode; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> disabled_disks; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> decommissioned_disks; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NETWORK_ADDRESS((short)1, "network_address"),
    CLUSTER_ID((short)2, "cluster_id"),
    EPOCH((short)3, "epoch"),
    TOKEN((short)4, "token"),
    BACKEND_IP((short)5, "backend_ip"),
    HTTP_PORT((short)6, "http_port"),
    HEARTBEAT_FLAGS((short)7, "heartbeat_flags"),
    BACKEND_ID((short)8, "backend_id"),
    MIN_ACTIVE_TXN_ID((short)9, "min_active_txn_id"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TRunMode
     */
    RUN_MODE((short)10, "run_mode"),
    DISABLED_DISKS((short)11, "disabled_disks"),
    DECOMMISSIONED_DISKS((short)12, "decommissioned_disks");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NETWORK_ADDRESS
          return NETWORK_ADDRESS;
        case 2: // CLUSTER_ID
          return CLUSTER_ID;
        case 3: // EPOCH
          return EPOCH;
        case 4: // TOKEN
          return TOKEN;
        case 5: // BACKEND_IP
          return BACKEND_IP;
        case 6: // HTTP_PORT
          return HTTP_PORT;
        case 7: // HEARTBEAT_FLAGS
          return HEARTBEAT_FLAGS;
        case 8: // BACKEND_ID
          return BACKEND_ID;
        case 9: // MIN_ACTIVE_TXN_ID
          return MIN_ACTIVE_TXN_ID;
        case 10: // RUN_MODE
          return RUN_MODE;
        case 11: // DISABLED_DISKS
          return DISABLED_DISKS;
        case 12: // DECOMMISSIONED_DISKS
          return DECOMMISSIONED_DISKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLUSTER_ID_ISSET_ID = 0;
  private static final int __EPOCH_ISSET_ID = 1;
  private static final int __HTTP_PORT_ISSET_ID = 2;
  private static final int __HEARTBEAT_FLAGS_ISSET_ID = 3;
  private static final int __BACKEND_ID_ISSET_ID = 4;
  private static final int __MIN_ACTIVE_TXN_ID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TOKEN,_Fields.BACKEND_IP,_Fields.HTTP_PORT,_Fields.HEARTBEAT_FLAGS,_Fields.BACKEND_ID,_Fields.MIN_ACTIVE_TXN_ID,_Fields.RUN_MODE,_Fields.DISABLED_DISKS,_Fields.DECOMMISSIONED_DISKS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NETWORK_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("network_address", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("cluster_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TClusterId")));
    tmpMap.put(_Fields.EPOCH, new org.apache.thrift.meta_data.FieldMetaData("epoch", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TEpoch")));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BACKEND_IP, new org.apache.thrift.meta_data.FieldMetaData("backend_ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HTTP_PORT, new org.apache.thrift.meta_data.FieldMetaData("http_port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TPort")));
    tmpMap.put(_Fields.HEARTBEAT_FLAGS, new org.apache.thrift.meta_data.FieldMetaData("heartbeat_flags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BACKEND_ID, new org.apache.thrift.meta_data.FieldMetaData("backend_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_ACTIVE_TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("min_active_txn_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUN_MODE, new org.apache.thrift.meta_data.FieldMetaData("run_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TRunMode.class)));
    tmpMap.put(_Fields.DISABLED_DISKS, new org.apache.thrift.meta_data.FieldMetaData("disabled_disks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DECOMMISSIONED_DISKS, new org.apache.thrift.meta_data.FieldMetaData("decommissioned_disks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMasterInfo.class, metaDataMap);
  }

  public TMasterInfo() {
    this.min_active_txn_id = 0L;

  }

  public TMasterInfo(
    io.datafibre.fibre.thrift.TNetworkAddress network_address,
    int cluster_id,
    long epoch)
  {
    this();
    this.network_address = network_address;
    this.cluster_id = cluster_id;
    setCluster_idIsSet(true);
    this.epoch = epoch;
    setEpochIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMasterInfo(TMasterInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNetwork_address()) {
      this.network_address = new io.datafibre.fibre.thrift.TNetworkAddress(other.network_address);
    }
    this.cluster_id = other.cluster_id;
    this.epoch = other.epoch;
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetBackend_ip()) {
      this.backend_ip = other.backend_ip;
    }
    this.http_port = other.http_port;
    this.heartbeat_flags = other.heartbeat_flags;
    this.backend_id = other.backend_id;
    this.min_active_txn_id = other.min_active_txn_id;
    if (other.isSetRun_mode()) {
      this.run_mode = other.run_mode;
    }
    if (other.isSetDisabled_disks()) {
      java.util.List<java.lang.String> __this__disabled_disks = new java.util.ArrayList<java.lang.String>(other.disabled_disks);
      this.disabled_disks = __this__disabled_disks;
    }
    if (other.isSetDecommissioned_disks()) {
      java.util.List<java.lang.String> __this__decommissioned_disks = new java.util.ArrayList<java.lang.String>(other.decommissioned_disks);
      this.decommissioned_disks = __this__decommissioned_disks;
    }
  }

  @Override
  public TMasterInfo deepCopy() {
    return new TMasterInfo(this);
  }

  @Override
  public void clear() {
    this.network_address = null;
    setCluster_idIsSet(false);
    this.cluster_id = 0;
    setEpochIsSet(false);
    this.epoch = 0;
    this.token = null;
    this.backend_ip = null;
    setHttp_portIsSet(false);
    this.http_port = 0;
    setHeartbeat_flagsIsSet(false);
    this.heartbeat_flags = 0;
    setBackend_idIsSet(false);
    this.backend_id = 0;
    this.min_active_txn_id = 0L;

    this.run_mode = null;
    this.disabled_disks = null;
    this.decommissioned_disks = null;
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TNetworkAddress getNetwork_address() {
    return this.network_address;
  }

  public TMasterInfo setNetwork_address(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TNetworkAddress network_address) {
    this.network_address = network_address;
    return this;
  }

  public void unsetNetwork_address() {
    this.network_address = null;
  }

  /** Returns true if field network_address is set (has been assigned a value) and false otherwise */
  public boolean isSetNetwork_address() {
    return this.network_address != null;
  }

  public void setNetwork_addressIsSet(boolean value) {
    if (!value) {
      this.network_address = null;
    }
  }

  public int getCluster_id() {
    return this.cluster_id;
  }

  public TMasterInfo setCluster_id(int cluster_id) {
    this.cluster_id = cluster_id;
    setCluster_idIsSet(true);
    return this;
  }

  public void unsetCluster_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLUSTER_ID_ISSET_ID);
  }

  /** Returns true if field cluster_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLUSTER_ID_ISSET_ID);
  }

  public void setCluster_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLUSTER_ID_ISSET_ID, value);
  }

  public long getEpoch() {
    return this.epoch;
  }

  public TMasterInfo setEpoch(long epoch) {
    this.epoch = epoch;
    setEpochIsSet(true);
    return this;
  }

  public void unsetEpoch() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EPOCH_ISSET_ID);
  }

  /** Returns true if field epoch is set (has been assigned a value) and false otherwise */
  public boolean isSetEpoch() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EPOCH_ISSET_ID);
  }

  public void setEpochIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EPOCH_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getToken() {
    return this.token;
  }

  public TMasterInfo setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBackend_ip() {
    return this.backend_ip;
  }

  public TMasterInfo setBackend_ip(@org.apache.thrift.annotation.Nullable java.lang.String backend_ip) {
    this.backend_ip = backend_ip;
    return this;
  }

  public void unsetBackend_ip() {
    this.backend_ip = null;
  }

  /** Returns true if field backend_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend_ip() {
    return this.backend_ip != null;
  }

  public void setBackend_ipIsSet(boolean value) {
    if (!value) {
      this.backend_ip = null;
    }
  }

  public int getHttp_port() {
    return this.http_port;
  }

  public TMasterInfo setHttp_port(int http_port) {
    this.http_port = http_port;
    setHttp_portIsSet(true);
    return this;
  }

  public void unsetHttp_port() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HTTP_PORT_ISSET_ID);
  }

  /** Returns true if field http_port is set (has been assigned a value) and false otherwise */
  public boolean isSetHttp_port() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HTTP_PORT_ISSET_ID);
  }

  public void setHttp_portIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HTTP_PORT_ISSET_ID, value);
  }

  public long getHeartbeat_flags() {
    return this.heartbeat_flags;
  }

  public TMasterInfo setHeartbeat_flags(long heartbeat_flags) {
    this.heartbeat_flags = heartbeat_flags;
    setHeartbeat_flagsIsSet(true);
    return this;
  }

  public void unsetHeartbeat_flags() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEARTBEAT_FLAGS_ISSET_ID);
  }

  /** Returns true if field heartbeat_flags is set (has been assigned a value) and false otherwise */
  public boolean isSetHeartbeat_flags() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEARTBEAT_FLAGS_ISSET_ID);
  }

  public void setHeartbeat_flagsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEARTBEAT_FLAGS_ISSET_ID, value);
  }

  public long getBackend_id() {
    return this.backend_id;
  }

  public TMasterInfo setBackend_id(long backend_id) {
    this.backend_id = backend_id;
    setBackend_idIsSet(true);
    return this;
  }

  public void unsetBackend_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BACKEND_ID_ISSET_ID);
  }

  /** Returns true if field backend_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BACKEND_ID_ISSET_ID);
  }

  public void setBackend_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BACKEND_ID_ISSET_ID, value);
  }

  public long getMin_active_txn_id() {
    return this.min_active_txn_id;
  }

  public TMasterInfo setMin_active_txn_id(long min_active_txn_id) {
    this.min_active_txn_id = min_active_txn_id;
    setMin_active_txn_idIsSet(true);
    return this;
  }

  public void unsetMin_active_txn_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_ACTIVE_TXN_ID_ISSET_ID);
  }

  /** Returns true if field min_active_txn_id is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_active_txn_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_ACTIVE_TXN_ID_ISSET_ID);
  }

  public void setMin_active_txn_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_ACTIVE_TXN_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TRunMode
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TRunMode getRun_mode() {
    return this.run_mode;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TRunMode
   */
  public TMasterInfo setRun_mode(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TRunMode run_mode) {
    this.run_mode = run_mode;
    return this;
  }

  public void unsetRun_mode() {
    this.run_mode = null;
  }

  /** Returns true if field run_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetRun_mode() {
    return this.run_mode != null;
  }

  public void setRun_modeIsSet(boolean value) {
    if (!value) {
      this.run_mode = null;
    }
  }

  public int getDisabled_disksSize() {
    return (this.disabled_disks == null) ? 0 : this.disabled_disks.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getDisabled_disksIterator() {
    return (this.disabled_disks == null) ? null : this.disabled_disks.iterator();
  }

  public void addToDisabled_disks(java.lang.String elem) {
    if (this.disabled_disks == null) {
      this.disabled_disks = new java.util.ArrayList<java.lang.String>();
    }
    this.disabled_disks.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getDisabled_disks() {
    return this.disabled_disks;
  }

  public TMasterInfo setDisabled_disks(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> disabled_disks) {
    this.disabled_disks = disabled_disks;
    return this;
  }

  public void unsetDisabled_disks() {
    this.disabled_disks = null;
  }

  /** Returns true if field disabled_disks is set (has been assigned a value) and false otherwise */
  public boolean isSetDisabled_disks() {
    return this.disabled_disks != null;
  }

  public void setDisabled_disksIsSet(boolean value) {
    if (!value) {
      this.disabled_disks = null;
    }
  }

  public int getDecommissioned_disksSize() {
    return (this.decommissioned_disks == null) ? 0 : this.decommissioned_disks.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getDecommissioned_disksIterator() {
    return (this.decommissioned_disks == null) ? null : this.decommissioned_disks.iterator();
  }

  public void addToDecommissioned_disks(java.lang.String elem) {
    if (this.decommissioned_disks == null) {
      this.decommissioned_disks = new java.util.ArrayList<java.lang.String>();
    }
    this.decommissioned_disks.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getDecommissioned_disks() {
    return this.decommissioned_disks;
  }

  public TMasterInfo setDecommissioned_disks(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> decommissioned_disks) {
    this.decommissioned_disks = decommissioned_disks;
    return this;
  }

  public void unsetDecommissioned_disks() {
    this.decommissioned_disks = null;
  }

  /** Returns true if field decommissioned_disks is set (has been assigned a value) and false otherwise */
  public boolean isSetDecommissioned_disks() {
    return this.decommissioned_disks != null;
  }

  public void setDecommissioned_disksIsSet(boolean value) {
    if (!value) {
      this.decommissioned_disks = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NETWORK_ADDRESS:
      if (value == null) {
        unsetNetwork_address();
      } else {
        setNetwork_address((io.datafibre.fibre.thrift.TNetworkAddress)value);
      }
      break;

    case CLUSTER_ID:
      if (value == null) {
        unsetCluster_id();
      } else {
        setCluster_id((java.lang.Integer)value);
      }
      break;

    case EPOCH:
      if (value == null) {
        unsetEpoch();
      } else {
        setEpoch((java.lang.Long)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    case BACKEND_IP:
      if (value == null) {
        unsetBackend_ip();
      } else {
        setBackend_ip((java.lang.String)value);
      }
      break;

    case HTTP_PORT:
      if (value == null) {
        unsetHttp_port();
      } else {
        setHttp_port((java.lang.Integer)value);
      }
      break;

    case HEARTBEAT_FLAGS:
      if (value == null) {
        unsetHeartbeat_flags();
      } else {
        setHeartbeat_flags((java.lang.Long)value);
      }
      break;

    case BACKEND_ID:
      if (value == null) {
        unsetBackend_id();
      } else {
        setBackend_id((java.lang.Long)value);
      }
      break;

    case MIN_ACTIVE_TXN_ID:
      if (value == null) {
        unsetMin_active_txn_id();
      } else {
        setMin_active_txn_id((java.lang.Long)value);
      }
      break;

    case RUN_MODE:
      if (value == null) {
        unsetRun_mode();
      } else {
        setRun_mode((io.datafibre.fibre.thrift.TRunMode)value);
      }
      break;

    case DISABLED_DISKS:
      if (value == null) {
        unsetDisabled_disks();
      } else {
        setDisabled_disks((java.util.List<java.lang.String>)value);
      }
      break;

    case DECOMMISSIONED_DISKS:
      if (value == null) {
        unsetDecommissioned_disks();
      } else {
        setDecommissioned_disks((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NETWORK_ADDRESS:
      return getNetwork_address();

    case CLUSTER_ID:
      return getCluster_id();

    case EPOCH:
      return getEpoch();

    case TOKEN:
      return getToken();

    case BACKEND_IP:
      return getBackend_ip();

    case HTTP_PORT:
      return getHttp_port();

    case HEARTBEAT_FLAGS:
      return getHeartbeat_flags();

    case BACKEND_ID:
      return getBackend_id();

    case MIN_ACTIVE_TXN_ID:
      return getMin_active_txn_id();

    case RUN_MODE:
      return getRun_mode();

    case DISABLED_DISKS:
      return getDisabled_disks();

    case DECOMMISSIONED_DISKS:
      return getDecommissioned_disks();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NETWORK_ADDRESS:
      return isSetNetwork_address();
    case CLUSTER_ID:
      return isSetCluster_id();
    case EPOCH:
      return isSetEpoch();
    case TOKEN:
      return isSetToken();
    case BACKEND_IP:
      return isSetBackend_ip();
    case HTTP_PORT:
      return isSetHttp_port();
    case HEARTBEAT_FLAGS:
      return isSetHeartbeat_flags();
    case BACKEND_ID:
      return isSetBackend_id();
    case MIN_ACTIVE_TXN_ID:
      return isSetMin_active_txn_id();
    case RUN_MODE:
      return isSetRun_mode();
    case DISABLED_DISKS:
      return isSetDisabled_disks();
    case DECOMMISSIONED_DISKS:
      return isSetDecommissioned_disks();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TMasterInfo)
      return this.equals((TMasterInfo)that);
    return false;
  }

  public boolean equals(TMasterInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_network_address = true && this.isSetNetwork_address();
    boolean that_present_network_address = true && that.isSetNetwork_address();
    if (this_present_network_address || that_present_network_address) {
      if (!(this_present_network_address && that_present_network_address))
        return false;
      if (!this.network_address.equals(that.network_address))
        return false;
    }

    boolean this_present_cluster_id = true;
    boolean that_present_cluster_id = true;
    if (this_present_cluster_id || that_present_cluster_id) {
      if (!(this_present_cluster_id && that_present_cluster_id))
        return false;
      if (this.cluster_id != that.cluster_id)
        return false;
    }

    boolean this_present_epoch = true;
    boolean that_present_epoch = true;
    if (this_present_epoch || that_present_epoch) {
      if (!(this_present_epoch && that_present_epoch))
        return false;
      if (this.epoch != that.epoch)
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_backend_ip = true && this.isSetBackend_ip();
    boolean that_present_backend_ip = true && that.isSetBackend_ip();
    if (this_present_backend_ip || that_present_backend_ip) {
      if (!(this_present_backend_ip && that_present_backend_ip))
        return false;
      if (!this.backend_ip.equals(that.backend_ip))
        return false;
    }

    boolean this_present_http_port = true && this.isSetHttp_port();
    boolean that_present_http_port = true && that.isSetHttp_port();
    if (this_present_http_port || that_present_http_port) {
      if (!(this_present_http_port && that_present_http_port))
        return false;
      if (this.http_port != that.http_port)
        return false;
    }

    boolean this_present_heartbeat_flags = true && this.isSetHeartbeat_flags();
    boolean that_present_heartbeat_flags = true && that.isSetHeartbeat_flags();
    if (this_present_heartbeat_flags || that_present_heartbeat_flags) {
      if (!(this_present_heartbeat_flags && that_present_heartbeat_flags))
        return false;
      if (this.heartbeat_flags != that.heartbeat_flags)
        return false;
    }

    boolean this_present_backend_id = true && this.isSetBackend_id();
    boolean that_present_backend_id = true && that.isSetBackend_id();
    if (this_present_backend_id || that_present_backend_id) {
      if (!(this_present_backend_id && that_present_backend_id))
        return false;
      if (this.backend_id != that.backend_id)
        return false;
    }

    boolean this_present_min_active_txn_id = true && this.isSetMin_active_txn_id();
    boolean that_present_min_active_txn_id = true && that.isSetMin_active_txn_id();
    if (this_present_min_active_txn_id || that_present_min_active_txn_id) {
      if (!(this_present_min_active_txn_id && that_present_min_active_txn_id))
        return false;
      if (this.min_active_txn_id != that.min_active_txn_id)
        return false;
    }

    boolean this_present_run_mode = true && this.isSetRun_mode();
    boolean that_present_run_mode = true && that.isSetRun_mode();
    if (this_present_run_mode || that_present_run_mode) {
      if (!(this_present_run_mode && that_present_run_mode))
        return false;
      if (!this.run_mode.equals(that.run_mode))
        return false;
    }

    boolean this_present_disabled_disks = true && this.isSetDisabled_disks();
    boolean that_present_disabled_disks = true && that.isSetDisabled_disks();
    if (this_present_disabled_disks || that_present_disabled_disks) {
      if (!(this_present_disabled_disks && that_present_disabled_disks))
        return false;
      if (!this.disabled_disks.equals(that.disabled_disks))
        return false;
    }

    boolean this_present_decommissioned_disks = true && this.isSetDecommissioned_disks();
    boolean that_present_decommissioned_disks = true && that.isSetDecommissioned_disks();
    if (this_present_decommissioned_disks || that_present_decommissioned_disks) {
      if (!(this_present_decommissioned_disks && that_present_decommissioned_disks))
        return false;
      if (!this.decommissioned_disks.equals(that.decommissioned_disks))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNetwork_address()) ? 131071 : 524287);
    if (isSetNetwork_address())
      hashCode = hashCode * 8191 + network_address.hashCode();

    hashCode = hashCode * 8191 + cluster_id;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(epoch);

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    hashCode = hashCode * 8191 + ((isSetBackend_ip()) ? 131071 : 524287);
    if (isSetBackend_ip())
      hashCode = hashCode * 8191 + backend_ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetHttp_port()) ? 131071 : 524287);
    if (isSetHttp_port())
      hashCode = hashCode * 8191 + http_port;

    hashCode = hashCode * 8191 + ((isSetHeartbeat_flags()) ? 131071 : 524287);
    if (isSetHeartbeat_flags())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(heartbeat_flags);

    hashCode = hashCode * 8191 + ((isSetBackend_id()) ? 131071 : 524287);
    if (isSetBackend_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(backend_id);

    hashCode = hashCode * 8191 + ((isSetMin_active_txn_id()) ? 131071 : 524287);
    if (isSetMin_active_txn_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(min_active_txn_id);

    hashCode = hashCode * 8191 + ((isSetRun_mode()) ? 131071 : 524287);
    if (isSetRun_mode())
      hashCode = hashCode * 8191 + run_mode.getValue();

    hashCode = hashCode * 8191 + ((isSetDisabled_disks()) ? 131071 : 524287);
    if (isSetDisabled_disks())
      hashCode = hashCode * 8191 + disabled_disks.hashCode();

    hashCode = hashCode * 8191 + ((isSetDecommissioned_disks()) ? 131071 : 524287);
    if (isSetDecommissioned_disks())
      hashCode = hashCode * 8191 + decommissioned_disks.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TMasterInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNetwork_address(), other.isSetNetwork_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetwork_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.network_address, other.network_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCluster_id(), other.isSetCluster_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster_id, other.cluster_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEpoch(), other.isSetEpoch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEpoch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.epoch, other.epoch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetToken(), other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBackend_ip(), other.isSetBackend_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_ip, other.backend_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHttp_port(), other.isSetHttp_port());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttp_port()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.http_port, other.http_port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHeartbeat_flags(), other.isSetHeartbeat_flags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeartbeat_flags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heartbeat_flags, other.heartbeat_flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBackend_id(), other.isSetBackend_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_id, other.backend_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMin_active_txn_id(), other.isSetMin_active_txn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_active_txn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_active_txn_id, other.min_active_txn_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRun_mode(), other.isSetRun_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRun_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.run_mode, other.run_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDisabled_disks(), other.isSetDisabled_disks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisabled_disks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disabled_disks, other.disabled_disks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDecommissioned_disks(), other.isSetDecommissioned_disks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecommissioned_disks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decommissioned_disks, other.decommissioned_disks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMasterInfo(");
    boolean first = true;

    sb.append("network_address:");
    if (this.network_address == null) {
      sb.append("null");
    } else {
      sb.append(this.network_address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cluster_id:");
    sb.append(this.cluster_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("epoch:");
    sb.append(this.epoch);
    first = false;
    if (isSetToken()) {
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
    }
    if (isSetBackend_ip()) {
      if (!first) sb.append(", ");
      sb.append("backend_ip:");
      if (this.backend_ip == null) {
        sb.append("null");
      } else {
        sb.append(this.backend_ip);
      }
      first = false;
    }
    if (isSetHttp_port()) {
      if (!first) sb.append(", ");
      sb.append("http_port:");
      sb.append(this.http_port);
      first = false;
    }
    if (isSetHeartbeat_flags()) {
      if (!first) sb.append(", ");
      sb.append("heartbeat_flags:");
      sb.append(this.heartbeat_flags);
      first = false;
    }
    if (isSetBackend_id()) {
      if (!first) sb.append(", ");
      sb.append("backend_id:");
      sb.append(this.backend_id);
      first = false;
    }
    if (isSetMin_active_txn_id()) {
      if (!first) sb.append(", ");
      sb.append("min_active_txn_id:");
      sb.append(this.min_active_txn_id);
      first = false;
    }
    if (isSetRun_mode()) {
      if (!first) sb.append(", ");
      sb.append("run_mode:");
      if (this.run_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.run_mode);
      }
      first = false;
    }
    if (isSetDisabled_disks()) {
      if (!first) sb.append(", ");
      sb.append("disabled_disks:");
      if (this.disabled_disks == null) {
        sb.append("null");
      } else {
        sb.append(this.disabled_disks);
      }
      first = false;
    }
    if (isSetDecommissioned_disks()) {
      if (!first) sb.append(", ");
      sb.append("decommissioned_disks:");
      if (this.decommissioned_disks == null) {
        sb.append("null");
      } else {
        sb.append(this.decommissioned_disks);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (network_address == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'network_address' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'cluster_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'epoch' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (network_address != null) {
      network_address.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMasterInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMasterInfoStandardScheme getScheme() {
      return new TMasterInfoStandardScheme();
    }
  }

  private static class TMasterInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMasterInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TMasterInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NETWORK_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.network_address = new io.datafibre.fibre.thrift.TNetworkAddress();
              struct.network_address.read(iprot);
              struct.setNetwork_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLUSTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cluster_id = iprot.readI32();
              struct.setCluster_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EPOCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.epoch = iprot.readI64();
              struct.setEpochIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BACKEND_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.backend_ip = iprot.readString();
              struct.setBackend_ipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HTTP_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.http_port = iprot.readI32();
              struct.setHttp_portIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HEARTBEAT_FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.heartbeat_flags = iprot.readI64();
              struct.setHeartbeat_flagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BACKEND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.backend_id = iprot.readI64();
              struct.setBackend_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MIN_ACTIVE_TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_active_txn_id = iprot.readI64();
              struct.setMin_active_txn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RUN_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.run_mode = io.datafibre.fibre.thrift.TRunMode.findByValue(iprot.readI32());
              struct.setRun_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DISABLED_DISKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.disabled_disks = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.disabled_disks.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDisabled_disksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DECOMMISSIONED_DISKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.decommissioned_disks = new java.util.ArrayList<java.lang.String>(_list3.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.decommissioned_disks.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setDecommissioned_disksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCluster_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'cluster_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEpoch()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'epoch' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TMasterInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.network_address != null) {
        oprot.writeFieldBegin(NETWORK_ADDRESS_FIELD_DESC);
        struct.network_address.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
      oprot.writeI32(struct.cluster_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EPOCH_FIELD_DESC);
      oprot.writeI64(struct.epoch);
      oprot.writeFieldEnd();
      if (struct.token != null) {
        if (struct.isSetToken()) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.backend_ip != null) {
        if (struct.isSetBackend_ip()) {
          oprot.writeFieldBegin(BACKEND_IP_FIELD_DESC);
          oprot.writeString(struct.backend_ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHttp_port()) {
        oprot.writeFieldBegin(HTTP_PORT_FIELD_DESC);
        oprot.writeI32(struct.http_port);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHeartbeat_flags()) {
        oprot.writeFieldBegin(HEARTBEAT_FLAGS_FIELD_DESC);
        oprot.writeI64(struct.heartbeat_flags);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBackend_id()) {
        oprot.writeFieldBegin(BACKEND_ID_FIELD_DESC);
        oprot.writeI64(struct.backend_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMin_active_txn_id()) {
        oprot.writeFieldBegin(MIN_ACTIVE_TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.min_active_txn_id);
        oprot.writeFieldEnd();
      }
      if (struct.run_mode != null) {
        if (struct.isSetRun_mode()) {
          oprot.writeFieldBegin(RUN_MODE_FIELD_DESC);
          oprot.writeI32(struct.run_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.disabled_disks != null) {
        if (struct.isSetDisabled_disks()) {
          oprot.writeFieldBegin(DISABLED_DISKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.disabled_disks.size()));
            for (java.lang.String _iter6 : struct.disabled_disks)
            {
              oprot.writeString(_iter6);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.decommissioned_disks != null) {
        if (struct.isSetDecommissioned_disks()) {
          oprot.writeFieldBegin(DECOMMISSIONED_DISKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.decommissioned_disks.size()));
            for (java.lang.String _iter7 : struct.decommissioned_disks)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMasterInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMasterInfoTupleScheme getScheme() {
      return new TMasterInfoTupleScheme();
    }
  }

  private static class TMasterInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMasterInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMasterInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.network_address.write(oprot);
      oprot.writeI32(struct.cluster_id);
      oprot.writeI64(struct.epoch);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetToken()) {
        optionals.set(0);
      }
      if (struct.isSetBackend_ip()) {
        optionals.set(1);
      }
      if (struct.isSetHttp_port()) {
        optionals.set(2);
      }
      if (struct.isSetHeartbeat_flags()) {
        optionals.set(3);
      }
      if (struct.isSetBackend_id()) {
        optionals.set(4);
      }
      if (struct.isSetMin_active_txn_id()) {
        optionals.set(5);
      }
      if (struct.isSetRun_mode()) {
        optionals.set(6);
      }
      if (struct.isSetDisabled_disks()) {
        optionals.set(7);
      }
      if (struct.isSetDecommissioned_disks()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetBackend_ip()) {
        oprot.writeString(struct.backend_ip);
      }
      if (struct.isSetHttp_port()) {
        oprot.writeI32(struct.http_port);
      }
      if (struct.isSetHeartbeat_flags()) {
        oprot.writeI64(struct.heartbeat_flags);
      }
      if (struct.isSetBackend_id()) {
        oprot.writeI64(struct.backend_id);
      }
      if (struct.isSetMin_active_txn_id()) {
        oprot.writeI64(struct.min_active_txn_id);
      }
      if (struct.isSetRun_mode()) {
        oprot.writeI32(struct.run_mode.getValue());
      }
      if (struct.isSetDisabled_disks()) {
        {
          oprot.writeI32(struct.disabled_disks.size());
          for (java.lang.String _iter8 : struct.disabled_disks)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetDecommissioned_disks()) {
        {
          oprot.writeI32(struct.decommissioned_disks.size());
          for (java.lang.String _iter9 : struct.decommissioned_disks)
          {
            oprot.writeString(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMasterInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.network_address = new io.datafibre.fibre.thrift.TNetworkAddress();
      struct.network_address.read(iprot);
      struct.setNetwork_addressIsSet(true);
      struct.cluster_id = iprot.readI32();
      struct.setCluster_idIsSet(true);
      struct.epoch = iprot.readI64();
      struct.setEpochIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(1)) {
        struct.backend_ip = iprot.readString();
        struct.setBackend_ipIsSet(true);
      }
      if (incoming.get(2)) {
        struct.http_port = iprot.readI32();
        struct.setHttp_portIsSet(true);
      }
      if (incoming.get(3)) {
        struct.heartbeat_flags = iprot.readI64();
        struct.setHeartbeat_flagsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.backend_id = iprot.readI64();
        struct.setBackend_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.min_active_txn_id = iprot.readI64();
        struct.setMin_active_txn_idIsSet(true);
      }
      if (incoming.get(6)) {
        struct.run_mode = io.datafibre.fibre.thrift.TRunMode.findByValue(iprot.readI32());
        struct.setRun_modeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list10 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.disabled_disks = new java.util.ArrayList<java.lang.String>(_list10.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readString();
            struct.disabled_disks.add(_elem11);
          }
        }
        struct.setDisabled_disksIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.decommissioned_disks = new java.util.ArrayList<java.lang.String>(_list13.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.decommissioned_disks.add(_elem14);
          }
        }
        struct.setDecommissioned_disksIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

