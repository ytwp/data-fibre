/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TMVStartEpochTask implements org.apache.thrift.TBase<TMVStartEpochTask, TMVStartEpochTask._Fields>, java.io.Serializable, Cloneable, Comparable<TMVStartEpochTask> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMVStartEpochTask");

  private static final org.apache.thrift.protocol.TField EPOCH_FIELD_DESC = new org.apache.thrift.protocol.TField("epoch", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PER_NODE_SCAN_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("per_node_scan_ranges", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_EXEC_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_exec_millis", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_SCAN_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_scan_rows", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMVStartEpochTaskStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMVStartEpochTaskTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TMVEpoch epoch; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>> per_node_scan_ranges; // optional
  public long max_exec_millis; // optional
  public long max_scan_rows; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EPOCH((short)1, "epoch"),
    PER_NODE_SCAN_RANGES((short)2, "per_node_scan_ranges"),
    MAX_EXEC_MILLIS((short)3, "max_exec_millis"),
    MAX_SCAN_ROWS((short)4, "max_scan_rows");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EPOCH
          return EPOCH;
        case 2: // PER_NODE_SCAN_RANGES
          return PER_NODE_SCAN_RANGES;
        case 3: // MAX_EXEC_MILLIS
          return MAX_EXEC_MILLIS;
        case 4: // MAX_SCAN_ROWS
          return MAX_SCAN_ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAX_EXEC_MILLIS_ISSET_ID = 0;
  private static final int __MAX_SCAN_ROWS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EPOCH,_Fields.PER_NODE_SCAN_RANGES,_Fields.MAX_EXEC_MILLIS,_Fields.MAX_SCAN_ROWS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EPOCH, new org.apache.thrift.meta_data.FieldMetaData("epoch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMVEpoch.class)));
    tmpMap.put(_Fields.PER_NODE_SCAN_RANGES, new org.apache.thrift.meta_data.FieldMetaData("per_node_scan_ranges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TUniqueId.class), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32                , "TPlanNodeId"), 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TScanRange.class))))));
    tmpMap.put(_Fields.MAX_EXEC_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("max_exec_millis", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_SCAN_ROWS, new org.apache.thrift.meta_data.FieldMetaData("max_scan_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMVStartEpochTask.class, metaDataMap);
  }

  public TMVStartEpochTask() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMVStartEpochTask(TMVStartEpochTask other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetEpoch()) {
      this.epoch = new TMVEpoch(other.epoch);
    }
    if (other.isSetPer_node_scan_ranges()) {
      java.util.Map<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>> __this__per_node_scan_ranges = new java.util.HashMap<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>>(other.per_node_scan_ranges.size());
      for (java.util.Map.Entry<com.starrocks.thrift.TUniqueId, java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>> other_element : other.per_node_scan_ranges.entrySet()) {

        com.starrocks.thrift.TUniqueId other_element_key = other_element.getKey();
        java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>> other_element_value = other_element.getValue();

        com.starrocks.thrift.TUniqueId __this__per_node_scan_ranges_copy_key = new com.starrocks.thrift.TUniqueId(other_element_key);

        java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>> __this__per_node_scan_ranges_copy_value = new java.util.HashMap<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>(other_element_value.size());
        for (java.util.Map.Entry<java.lang.Integer, java.util.List<com.starrocks.thrift.TScanRange>> other_element_value_element : other_element_value.entrySet()) {

          java.lang.Integer other_element_value_element_key = other_element_value_element.getKey();
          java.util.List<com.starrocks.thrift.TScanRange> other_element_value_element_value = other_element_value_element.getValue();

          java.lang.Integer __this__per_node_scan_ranges_copy_value_copy_key = other_element_value_element_key;

          java.util.List<com.starrocks.thrift.TScanRange> __this__per_node_scan_ranges_copy_value_copy_value = new java.util.ArrayList<com.starrocks.thrift.TScanRange>(other_element_value_element_value.size());
          for (com.starrocks.thrift.TScanRange other_element_value_element_value_element : other_element_value_element_value) {
            __this__per_node_scan_ranges_copy_value_copy_value.add(new com.starrocks.thrift.TScanRange(other_element_value_element_value_element));
          }

          __this__per_node_scan_ranges_copy_value.put(__this__per_node_scan_ranges_copy_value_copy_key, __this__per_node_scan_ranges_copy_value_copy_value);
        }

        __this__per_node_scan_ranges.put(__this__per_node_scan_ranges_copy_key, __this__per_node_scan_ranges_copy_value);
      }
      this.per_node_scan_ranges = __this__per_node_scan_ranges;
    }
    this.max_exec_millis = other.max_exec_millis;
    this.max_scan_rows = other.max_scan_rows;
  }

  @Override
  public TMVStartEpochTask deepCopy() {
    return new TMVStartEpochTask(this);
  }

  @Override
  public void clear() {
    this.epoch = null;
    this.per_node_scan_ranges = null;
    setMax_exec_millisIsSet(false);
    this.max_exec_millis = 0;
    setMax_scan_rowsIsSet(false);
    this.max_scan_rows = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public TMVEpoch getEpoch() {
    return this.epoch;
  }

  public TMVStartEpochTask setEpoch(@org.apache.thrift.annotation.Nullable TMVEpoch epoch) {
    this.epoch = epoch;
    return this;
  }

  public void unsetEpoch() {
    this.epoch = null;
  }

  /** Returns true if field epoch is set (has been assigned a value) and false otherwise */
  public boolean isSetEpoch() {
    return this.epoch != null;
  }

  public void setEpochIsSet(boolean value) {
    if (!value) {
      this.epoch = null;
    }
  }

  public int getPer_node_scan_rangesSize() {
    return (this.per_node_scan_ranges == null) ? 0 : this.per_node_scan_ranges.size();
  }

  public void putToPer_node_scan_ranges(com.starrocks.thrift.TUniqueId key, java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>> val) {
    if (this.per_node_scan_ranges == null) {
      this.per_node_scan_ranges = new java.util.HashMap<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>>();
    }
    this.per_node_scan_ranges.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>> getPer_node_scan_ranges() {
    return this.per_node_scan_ranges;
  }

  public TMVStartEpochTask setPer_node_scan_ranges(@org.apache.thrift.annotation.Nullable java.util.Map<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>> per_node_scan_ranges) {
    this.per_node_scan_ranges = per_node_scan_ranges;
    return this;
  }

  public void unsetPer_node_scan_ranges() {
    this.per_node_scan_ranges = null;
  }

  /** Returns true if field per_node_scan_ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetPer_node_scan_ranges() {
    return this.per_node_scan_ranges != null;
  }

  public void setPer_node_scan_rangesIsSet(boolean value) {
    if (!value) {
      this.per_node_scan_ranges = null;
    }
  }

  public long getMax_exec_millis() {
    return this.max_exec_millis;
  }

  public TMVStartEpochTask setMax_exec_millis(long max_exec_millis) {
    this.max_exec_millis = max_exec_millis;
    setMax_exec_millisIsSet(true);
    return this;
  }

  public void unsetMax_exec_millis() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_EXEC_MILLIS_ISSET_ID);
  }

  /** Returns true if field max_exec_millis is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_exec_millis() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_EXEC_MILLIS_ISSET_ID);
  }

  public void setMax_exec_millisIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_EXEC_MILLIS_ISSET_ID, value);
  }

  public long getMax_scan_rows() {
    return this.max_scan_rows;
  }

  public TMVStartEpochTask setMax_scan_rows(long max_scan_rows) {
    this.max_scan_rows = max_scan_rows;
    setMax_scan_rowsIsSet(true);
    return this;
  }

  public void unsetMax_scan_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_SCAN_ROWS_ISSET_ID);
  }

  /** Returns true if field max_scan_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_scan_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_SCAN_ROWS_ISSET_ID);
  }

  public void setMax_scan_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_SCAN_ROWS_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case EPOCH:
      if (value == null) {
        unsetEpoch();
      } else {
        setEpoch((TMVEpoch)value);
      }
      break;

    case PER_NODE_SCAN_RANGES:
      if (value == null) {
        unsetPer_node_scan_ranges();
      } else {
        setPer_node_scan_ranges((java.util.Map<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>>)value);
      }
      break;

    case MAX_EXEC_MILLIS:
      if (value == null) {
        unsetMax_exec_millis();
      } else {
        setMax_exec_millis((java.lang.Long)value);
      }
      break;

    case MAX_SCAN_ROWS:
      if (value == null) {
        unsetMax_scan_rows();
      } else {
        setMax_scan_rows((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case EPOCH:
      return getEpoch();

    case PER_NODE_SCAN_RANGES:
      return getPer_node_scan_ranges();

    case MAX_EXEC_MILLIS:
      return getMax_exec_millis();

    case MAX_SCAN_ROWS:
      return getMax_scan_rows();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case EPOCH:
      return isSetEpoch();
    case PER_NODE_SCAN_RANGES:
      return isSetPer_node_scan_ranges();
    case MAX_EXEC_MILLIS:
      return isSetMax_exec_millis();
    case MAX_SCAN_ROWS:
      return isSetMax_scan_rows();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TMVStartEpochTask)
      return this.equals((TMVStartEpochTask)that);
    return false;
  }

  public boolean equals(TMVStartEpochTask that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_epoch = true && this.isSetEpoch();
    boolean that_present_epoch = true && that.isSetEpoch();
    if (this_present_epoch || that_present_epoch) {
      if (!(this_present_epoch && that_present_epoch))
        return false;
      if (!this.epoch.equals(that.epoch))
        return false;
    }

    boolean this_present_per_node_scan_ranges = true && this.isSetPer_node_scan_ranges();
    boolean that_present_per_node_scan_ranges = true && that.isSetPer_node_scan_ranges();
    if (this_present_per_node_scan_ranges || that_present_per_node_scan_ranges) {
      if (!(this_present_per_node_scan_ranges && that_present_per_node_scan_ranges))
        return false;
      if (!this.per_node_scan_ranges.equals(that.per_node_scan_ranges))
        return false;
    }

    boolean this_present_max_exec_millis = true && this.isSetMax_exec_millis();
    boolean that_present_max_exec_millis = true && that.isSetMax_exec_millis();
    if (this_present_max_exec_millis || that_present_max_exec_millis) {
      if (!(this_present_max_exec_millis && that_present_max_exec_millis))
        return false;
      if (this.max_exec_millis != that.max_exec_millis)
        return false;
    }

    boolean this_present_max_scan_rows = true && this.isSetMax_scan_rows();
    boolean that_present_max_scan_rows = true && that.isSetMax_scan_rows();
    if (this_present_max_scan_rows || that_present_max_scan_rows) {
      if (!(this_present_max_scan_rows && that_present_max_scan_rows))
        return false;
      if (this.max_scan_rows != that.max_scan_rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEpoch()) ? 131071 : 524287);
    if (isSetEpoch())
      hashCode = hashCode * 8191 + epoch.hashCode();

    hashCode = hashCode * 8191 + ((isSetPer_node_scan_ranges()) ? 131071 : 524287);
    if (isSetPer_node_scan_ranges())
      hashCode = hashCode * 8191 + per_node_scan_ranges.hashCode();

    hashCode = hashCode * 8191 + ((isSetMax_exec_millis()) ? 131071 : 524287);
    if (isSetMax_exec_millis())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_exec_millis);

    hashCode = hashCode * 8191 + ((isSetMax_scan_rows()) ? 131071 : 524287);
    if (isSetMax_scan_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_scan_rows);

    return hashCode;
  }

  @Override
  public int compareTo(TMVStartEpochTask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetEpoch(), other.isSetEpoch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEpoch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.epoch, other.epoch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPer_node_scan_ranges(), other.isSetPer_node_scan_ranges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPer_node_scan_ranges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_node_scan_ranges, other.per_node_scan_ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_exec_millis(), other.isSetMax_exec_millis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_exec_millis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_exec_millis, other.max_exec_millis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_scan_rows(), other.isSetMax_scan_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_scan_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_scan_rows, other.max_scan_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMVStartEpochTask(");
    boolean first = true;

    if (isSetEpoch()) {
      sb.append("epoch:");
      if (this.epoch == null) {
        sb.append("null");
      } else {
        sb.append(this.epoch);
      }
      first = false;
    }
    if (isSetPer_node_scan_ranges()) {
      if (!first) sb.append(", ");
      sb.append("per_node_scan_ranges:");
      if (this.per_node_scan_ranges == null) {
        sb.append("null");
      } else {
        sb.append(this.per_node_scan_ranges);
      }
      first = false;
    }
    if (isSetMax_exec_millis()) {
      if (!first) sb.append(", ");
      sb.append("max_exec_millis:");
      sb.append(this.max_exec_millis);
      first = false;
    }
    if (isSetMax_scan_rows()) {
      if (!first) sb.append(", ");
      sb.append("max_scan_rows:");
      sb.append(this.max_scan_rows);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (epoch != null) {
      epoch.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMVStartEpochTaskStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMVStartEpochTaskStandardScheme getScheme() {
      return new TMVStartEpochTaskStandardScheme();
    }
  }

  private static class TMVStartEpochTaskStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMVStartEpochTask> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TMVStartEpochTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EPOCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.epoch = new TMVEpoch();
              struct.epoch.read(iprot);
              struct.setEpochIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PER_NODE_SCAN_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.per_node_scan_ranges = new java.util.HashMap<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>>(2*_map8.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId _key9;
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>> _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = new com.starrocks.thrift.TUniqueId();
                  _key9.read(iprot);
                  {
                    org.apache.thrift.protocol.TMap _map12 = iprot.readMapBegin();
                    _val10 = new java.util.HashMap<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>(2*_map12.size);
                    int _key13;
                    @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TScanRange> _val14;
                    for (int _i15 = 0; _i15 < _map12.size; ++_i15)
                    {
                      _key13 = iprot.readI32();
                      {
                        org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                        _val14 = new java.util.ArrayList<com.starrocks.thrift.TScanRange>(_list16.size);
                        @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TScanRange _elem17;
                        for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                        {
                          _elem17 = new com.starrocks.thrift.TScanRange();
                          _elem17.read(iprot);
                          _val14.add(_elem17);
                        }
                        iprot.readListEnd();
                      }
                      _val10.put(_key13, _val14);
                    }
                    iprot.readMapEnd();
                  }
                  struct.per_node_scan_ranges.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setPer_node_scan_rangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_EXEC_MILLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_exec_millis = iprot.readI64();
              struct.setMax_exec_millisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX_SCAN_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_scan_rows = iprot.readI64();
              struct.setMax_scan_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TMVStartEpochTask struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.epoch != null) {
        if (struct.isSetEpoch()) {
          oprot.writeFieldBegin(EPOCH_FIELD_DESC);
          struct.epoch.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.per_node_scan_ranges != null) {
        if (struct.isSetPer_node_scan_ranges()) {
          oprot.writeFieldBegin(PER_NODE_SCAN_RANGES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.MAP, struct.per_node_scan_ranges.size()));
            for (java.util.Map.Entry<com.starrocks.thrift.TUniqueId, java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>> _iter19 : struct.per_node_scan_ranges.entrySet())
            {
              _iter19.getKey().write(oprot);
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, _iter19.getValue().size()));
                for (java.util.Map.Entry<java.lang.Integer, java.util.List<com.starrocks.thrift.TScanRange>> _iter20 : _iter19.getValue().entrySet())
                {
                  oprot.writeI32(_iter20.getKey());
                  {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter20.getValue().size()));
                    for (com.starrocks.thrift.TScanRange _iter21 : _iter20.getValue())
                    {
                      _iter21.write(oprot);
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMax_exec_millis()) {
        oprot.writeFieldBegin(MAX_EXEC_MILLIS_FIELD_DESC);
        oprot.writeI64(struct.max_exec_millis);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_scan_rows()) {
        oprot.writeFieldBegin(MAX_SCAN_ROWS_FIELD_DESC);
        oprot.writeI64(struct.max_scan_rows);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMVStartEpochTaskTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMVStartEpochTaskTupleScheme getScheme() {
      return new TMVStartEpochTaskTupleScheme();
    }
  }

  private static class TMVStartEpochTaskTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMVStartEpochTask> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMVStartEpochTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEpoch()) {
        optionals.set(0);
      }
      if (struct.isSetPer_node_scan_ranges()) {
        optionals.set(1);
      }
      if (struct.isSetMax_exec_millis()) {
        optionals.set(2);
      }
      if (struct.isSetMax_scan_rows()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEpoch()) {
        struct.epoch.write(oprot);
      }
      if (struct.isSetPer_node_scan_ranges()) {
        {
          oprot.writeI32(struct.per_node_scan_ranges.size());
          for (java.util.Map.Entry<com.starrocks.thrift.TUniqueId, java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>> _iter22 : struct.per_node_scan_ranges.entrySet())
          {
            _iter22.getKey().write(oprot);
            {
              oprot.writeI32(_iter22.getValue().size());
              for (java.util.Map.Entry<java.lang.Integer, java.util.List<com.starrocks.thrift.TScanRange>> _iter23 : _iter22.getValue().entrySet())
              {
                oprot.writeI32(_iter23.getKey());
                {
                  oprot.writeI32(_iter23.getValue().size());
                  for (com.starrocks.thrift.TScanRange _iter24 : _iter23.getValue())
                  {
                    _iter24.write(oprot);
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetMax_exec_millis()) {
        oprot.writeI64(struct.max_exec_millis);
      }
      if (struct.isSetMax_scan_rows()) {
        oprot.writeI64(struct.max_scan_rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMVStartEpochTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.epoch = new TMVEpoch();
        struct.epoch.read(iprot);
        struct.setEpochIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map25 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.MAP); 
          struct.per_node_scan_ranges = new java.util.HashMap<com.starrocks.thrift.TUniqueId,java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>>(2*_map25.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId _key26;
          @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>> _val27;
          for (int _i28 = 0; _i28 < _map25.size; ++_i28)
          {
            _key26 = new com.starrocks.thrift.TUniqueId();
            _key26.read(iprot);
            {
              org.apache.thrift.protocol.TMap _map29 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST); 
              _val27 = new java.util.HashMap<java.lang.Integer,java.util.List<com.starrocks.thrift.TScanRange>>(2*_map29.size);
              int _key30;
              @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TScanRange> _val31;
              for (int _i32 = 0; _i32 < _map29.size; ++_i32)
              {
                _key30 = iprot.readI32();
                {
                  org.apache.thrift.protocol.TList _list33 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
                  _val31 = new java.util.ArrayList<com.starrocks.thrift.TScanRange>(_list33.size);
                  @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TScanRange _elem34;
                  for (int _i35 = 0; _i35 < _list33.size; ++_i35)
                  {
                    _elem34 = new com.starrocks.thrift.TScanRange();
                    _elem34.read(iprot);
                    _val31.add(_elem34);
                  }
                }
                _val27.put(_key30, _val31);
              }
            }
            struct.per_node_scan_ranges.put(_key26, _val27);
          }
        }
        struct.setPer_node_scan_rangesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.max_exec_millis = iprot.readI64();
        struct.setMax_exec_millisIsSet(true);
      }
      if (incoming.get(3)) {
        struct.max_scan_rows = iprot.readI64();
        struct.setMax_scan_rowsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

