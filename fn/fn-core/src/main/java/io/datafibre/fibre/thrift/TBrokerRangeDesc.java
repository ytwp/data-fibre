/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TBrokerRangeDesc implements org.apache.thrift.TBase<TBrokerRangeDesc, TBrokerRangeDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TBrokerRangeDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBrokerRangeDesc");

  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("file_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FORMAT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("format_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SPLITTABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("splittable", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField START_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("start_offset", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField LOAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("load_id", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("file_size", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField NUM_OF_COLUMNS_FROM_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("num_of_columns_from_file", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField COLUMNS_FROM_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("columns_from_path", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField STRIP_OUTER_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("strip_outer_array", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField JSONPATHS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonpaths", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField JSON_ROOT_FIELD_DESC = new org.apache.thrift.protocol.TField("json_root", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TBrokerRangeDescStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TBrokerRangeDescTupleSchemeFactory();

  /**
   * 
   * @see io.datafibre.fibre.thrift.TFileType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TFileType file_type; // required
  /**
   * 
   * @see TFileFormatType
   */
  public @org.apache.thrift.annotation.Nullable TFileFormatType format_type; // required
  public boolean splittable; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String path; // required
  public long start_offset; // required
  public long size; // required
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUniqueId load_id; // optional
  public long file_size; // optional
  public int num_of_columns_from_file; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columns_from_path; // optional
  public boolean strip_outer_array; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String jsonpaths; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String json_root; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see io.datafibre.fibre.thrift.TFileType
     */
    FILE_TYPE((short)1, "file_type"),
    /**
     * 
     * @see TFileFormatType
     */
    FORMAT_TYPE((short)2, "format_type"),
    SPLITTABLE((short)3, "splittable"),
    PATH((short)4, "path"),
    START_OFFSET((short)5, "start_offset"),
    SIZE((short)6, "size"),
    LOAD_ID((short)7, "load_id"),
    FILE_SIZE((short)8, "file_size"),
    NUM_OF_COLUMNS_FROM_FILE((short)9, "num_of_columns_from_file"),
    COLUMNS_FROM_PATH((short)10, "columns_from_path"),
    STRIP_OUTER_ARRAY((short)11, "strip_outer_array"),
    JSONPATHS((short)12, "jsonpaths"),
    JSON_ROOT((short)13, "json_root");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_TYPE
          return FILE_TYPE;
        case 2: // FORMAT_TYPE
          return FORMAT_TYPE;
        case 3: // SPLITTABLE
          return SPLITTABLE;
        case 4: // PATH
          return PATH;
        case 5: // START_OFFSET
          return START_OFFSET;
        case 6: // SIZE
          return SIZE;
        case 7: // LOAD_ID
          return LOAD_ID;
        case 8: // FILE_SIZE
          return FILE_SIZE;
        case 9: // NUM_OF_COLUMNS_FROM_FILE
          return NUM_OF_COLUMNS_FROM_FILE;
        case 10: // COLUMNS_FROM_PATH
          return COLUMNS_FROM_PATH;
        case 11: // STRIP_OUTER_ARRAY
          return STRIP_OUTER_ARRAY;
        case 12: // JSONPATHS
          return JSONPATHS;
        case 13: // JSON_ROOT
          return JSON_ROOT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SPLITTABLE_ISSET_ID = 0;
  private static final int __START_OFFSET_ISSET_ID = 1;
  private static final int __SIZE_ISSET_ID = 2;
  private static final int __FILE_SIZE_ISSET_ID = 3;
  private static final int __NUM_OF_COLUMNS_FROM_FILE_ISSET_ID = 4;
  private static final int __STRIP_OUTER_ARRAY_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LOAD_ID,_Fields.FILE_SIZE,_Fields.NUM_OF_COLUMNS_FROM_FILE,_Fields.COLUMNS_FROM_PATH,_Fields.STRIP_OUTER_ARRAY,_Fields.JSONPATHS,_Fields.JSON_ROOT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("file_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TFileType.class)));
    tmpMap.put(_Fields.FORMAT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("format_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFileFormatType.class)));
    tmpMap.put(_Fields.SPLITTABLE, new org.apache.thrift.meta_data.FieldMetaData("splittable", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("start_offset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOAD_ID, new org.apache.thrift.meta_data.FieldMetaData("load_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("file_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_OF_COLUMNS_FROM_FILE, new org.apache.thrift.meta_data.FieldMetaData("num_of_columns_from_file", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMNS_FROM_PATH, new org.apache.thrift.meta_data.FieldMetaData("columns_from_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STRIP_OUTER_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("strip_outer_array", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JSONPATHS, new org.apache.thrift.meta_data.FieldMetaData("jsonpaths", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JSON_ROOT, new org.apache.thrift.meta_data.FieldMetaData("json_root", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBrokerRangeDesc.class, metaDataMap);
  }

  public TBrokerRangeDesc() {
  }

  public TBrokerRangeDesc(
    io.datafibre.fibre.thrift.TFileType file_type,
    TFileFormatType format_type,
    boolean splittable,
    java.lang.String path,
    long start_offset,
    long size)
  {
    this();
    this.file_type = file_type;
    this.format_type = format_type;
    this.splittable = splittable;
    setSplittableIsSet(true);
    this.path = path;
    this.start_offset = start_offset;
    setStart_offsetIsSet(true);
    this.size = size;
    setSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBrokerRangeDesc(TBrokerRangeDesc other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFile_type()) {
      this.file_type = other.file_type;
    }
    if (other.isSetFormat_type()) {
      this.format_type = other.format_type;
    }
    this.splittable = other.splittable;
    if (other.isSetPath()) {
      this.path = other.path;
    }
    this.start_offset = other.start_offset;
    this.size = other.size;
    if (other.isSetLoad_id()) {
      this.load_id = new io.datafibre.fibre.thrift.TUniqueId(other.load_id);
    }
    this.file_size = other.file_size;
    this.num_of_columns_from_file = other.num_of_columns_from_file;
    if (other.isSetColumns_from_path()) {
      java.util.List<java.lang.String> __this__columns_from_path = new java.util.ArrayList<java.lang.String>(other.columns_from_path);
      this.columns_from_path = __this__columns_from_path;
    }
    this.strip_outer_array = other.strip_outer_array;
    if (other.isSetJsonpaths()) {
      this.jsonpaths = other.jsonpaths;
    }
    if (other.isSetJson_root()) {
      this.json_root = other.json_root;
    }
  }

  @Override
  public TBrokerRangeDesc deepCopy() {
    return new TBrokerRangeDesc(this);
  }

  @Override
  public void clear() {
    this.file_type = null;
    this.format_type = null;
    setSplittableIsSet(false);
    this.splittable = false;
    this.path = null;
    setStart_offsetIsSet(false);
    this.start_offset = 0;
    setSizeIsSet(false);
    this.size = 0;
    this.load_id = null;
    setFile_sizeIsSet(false);
    this.file_size = 0;
    setNum_of_columns_from_fileIsSet(false);
    this.num_of_columns_from_file = 0;
    this.columns_from_path = null;
    setStrip_outer_arrayIsSet(false);
    this.strip_outer_array = false;
    this.jsonpaths = null;
    this.json_root = null;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TFileType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TFileType getFile_type() {
    return this.file_type;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TFileType
   */
  public TBrokerRangeDesc setFile_type(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TFileType file_type) {
    this.file_type = file_type;
    return this;
  }

  public void unsetFile_type() {
    this.file_type = null;
  }

  /** Returns true if field file_type is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_type() {
    return this.file_type != null;
  }

  public void setFile_typeIsSet(boolean value) {
    if (!value) {
      this.file_type = null;
    }
  }

  /**
   * 
   * @see TFileFormatType
   */
  @org.apache.thrift.annotation.Nullable
  public TFileFormatType getFormat_type() {
    return this.format_type;
  }

  /**
   * 
   * @see TFileFormatType
   */
  public TBrokerRangeDesc setFormat_type(@org.apache.thrift.annotation.Nullable TFileFormatType format_type) {
    this.format_type = format_type;
    return this;
  }

  public void unsetFormat_type() {
    this.format_type = null;
  }

  /** Returns true if field format_type is set (has been assigned a value) and false otherwise */
  public boolean isSetFormat_type() {
    return this.format_type != null;
  }

  public void setFormat_typeIsSet(boolean value) {
    if (!value) {
      this.format_type = null;
    }
  }

  public boolean isSplittable() {
    return this.splittable;
  }

  public TBrokerRangeDesc setSplittable(boolean splittable) {
    this.splittable = splittable;
    setSplittableIsSet(true);
    return this;
  }

  public void unsetSplittable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPLITTABLE_ISSET_ID);
  }

  /** Returns true if field splittable is set (has been assigned a value) and false otherwise */
  public boolean isSetSplittable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPLITTABLE_ISSET_ID);
  }

  public void setSplittableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPLITTABLE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPath() {
    return this.path;
  }

  public TBrokerRangeDesc setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public long getStart_offset() {
    return this.start_offset;
  }

  public TBrokerRangeDesc setStart_offset(long start_offset) {
    this.start_offset = start_offset;
    setStart_offsetIsSet(true);
    return this;
  }

  public void unsetStart_offset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_OFFSET_ISSET_ID);
  }

  /** Returns true if field start_offset is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_offset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_OFFSET_ISSET_ID);
  }

  public void setStart_offsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_OFFSET_ISSET_ID, value);
  }

  public long getSize() {
    return this.size;
  }

  public TBrokerRangeDesc setSize(long size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TUniqueId getLoad_id() {
    return this.load_id;
  }

  public TBrokerRangeDesc setLoad_id(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUniqueId load_id) {
    this.load_id = load_id;
    return this;
  }

  public void unsetLoad_id() {
    this.load_id = null;
  }

  /** Returns true if field load_id is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_id() {
    return this.load_id != null;
  }

  public void setLoad_idIsSet(boolean value) {
    if (!value) {
      this.load_id = null;
    }
  }

  public long getFile_size() {
    return this.file_size;
  }

  public TBrokerRangeDesc setFile_size(long file_size) {
    this.file_size = file_size;
    setFile_sizeIsSet(true);
    return this;
  }

  public void unsetFile_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILE_SIZE_ISSET_ID);
  }

  /** Returns true if field file_size is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILE_SIZE_ISSET_ID);
  }

  public void setFile_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILE_SIZE_ISSET_ID, value);
  }

  public int getNum_of_columns_from_file() {
    return this.num_of_columns_from_file;
  }

  public TBrokerRangeDesc setNum_of_columns_from_file(int num_of_columns_from_file) {
    this.num_of_columns_from_file = num_of_columns_from_file;
    setNum_of_columns_from_fileIsSet(true);
    return this;
  }

  public void unsetNum_of_columns_from_file() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_OF_COLUMNS_FROM_FILE_ISSET_ID);
  }

  /** Returns true if field num_of_columns_from_file is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_of_columns_from_file() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_OF_COLUMNS_FROM_FILE_ISSET_ID);
  }

  public void setNum_of_columns_from_fileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_OF_COLUMNS_FROM_FILE_ISSET_ID, value);
  }

  public int getColumns_from_pathSize() {
    return (this.columns_from_path == null) ? 0 : this.columns_from_path.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getColumns_from_pathIterator() {
    return (this.columns_from_path == null) ? null : this.columns_from_path.iterator();
  }

  public void addToColumns_from_path(java.lang.String elem) {
    if (this.columns_from_path == null) {
      this.columns_from_path = new java.util.ArrayList<java.lang.String>();
    }
    this.columns_from_path.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getColumns_from_path() {
    return this.columns_from_path;
  }

  public TBrokerRangeDesc setColumns_from_path(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columns_from_path) {
    this.columns_from_path = columns_from_path;
    return this;
  }

  public void unsetColumns_from_path() {
    this.columns_from_path = null;
  }

  /** Returns true if field columns_from_path is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns_from_path() {
    return this.columns_from_path != null;
  }

  public void setColumns_from_pathIsSet(boolean value) {
    if (!value) {
      this.columns_from_path = null;
    }
  }

  public boolean isStrip_outer_array() {
    return this.strip_outer_array;
  }

  public TBrokerRangeDesc setStrip_outer_array(boolean strip_outer_array) {
    this.strip_outer_array = strip_outer_array;
    setStrip_outer_arrayIsSet(true);
    return this;
  }

  public void unsetStrip_outer_array() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRIP_OUTER_ARRAY_ISSET_ID);
  }

  /** Returns true if field strip_outer_array is set (has been assigned a value) and false otherwise */
  public boolean isSetStrip_outer_array() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRIP_OUTER_ARRAY_ISSET_ID);
  }

  public void setStrip_outer_arrayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRIP_OUTER_ARRAY_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJsonpaths() {
    return this.jsonpaths;
  }

  public TBrokerRangeDesc setJsonpaths(@org.apache.thrift.annotation.Nullable java.lang.String jsonpaths) {
    this.jsonpaths = jsonpaths;
    return this;
  }

  public void unsetJsonpaths() {
    this.jsonpaths = null;
  }

  /** Returns true if field jsonpaths is set (has been assigned a value) and false otherwise */
  public boolean isSetJsonpaths() {
    return this.jsonpaths != null;
  }

  public void setJsonpathsIsSet(boolean value) {
    if (!value) {
      this.jsonpaths = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJson_root() {
    return this.json_root;
  }

  public TBrokerRangeDesc setJson_root(@org.apache.thrift.annotation.Nullable java.lang.String json_root) {
    this.json_root = json_root;
    return this;
  }

  public void unsetJson_root() {
    this.json_root = null;
  }

  /** Returns true if field json_root is set (has been assigned a value) and false otherwise */
  public boolean isSetJson_root() {
    return this.json_root != null;
  }

  public void setJson_rootIsSet(boolean value) {
    if (!value) {
      this.json_root = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FILE_TYPE:
      if (value == null) {
        unsetFile_type();
      } else {
        setFile_type((io.datafibre.fibre.thrift.TFileType)value);
      }
      break;

    case FORMAT_TYPE:
      if (value == null) {
        unsetFormat_type();
      } else {
        setFormat_type((TFileFormatType)value);
      }
      break;

    case SPLITTABLE:
      if (value == null) {
        unsetSplittable();
      } else {
        setSplittable((java.lang.Boolean)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((java.lang.String)value);
      }
      break;

    case START_OFFSET:
      if (value == null) {
        unsetStart_offset();
      } else {
        setStart_offset((java.lang.Long)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((java.lang.Long)value);
      }
      break;

    case LOAD_ID:
      if (value == null) {
        unsetLoad_id();
      } else {
        setLoad_id((io.datafibre.fibre.thrift.TUniqueId)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFile_size();
      } else {
        setFile_size((java.lang.Long)value);
      }
      break;

    case NUM_OF_COLUMNS_FROM_FILE:
      if (value == null) {
        unsetNum_of_columns_from_file();
      } else {
        setNum_of_columns_from_file((java.lang.Integer)value);
      }
      break;

    case COLUMNS_FROM_PATH:
      if (value == null) {
        unsetColumns_from_path();
      } else {
        setColumns_from_path((java.util.List<java.lang.String>)value);
      }
      break;

    case STRIP_OUTER_ARRAY:
      if (value == null) {
        unsetStrip_outer_array();
      } else {
        setStrip_outer_array((java.lang.Boolean)value);
      }
      break;

    case JSONPATHS:
      if (value == null) {
        unsetJsonpaths();
      } else {
        setJsonpaths((java.lang.String)value);
      }
      break;

    case JSON_ROOT:
      if (value == null) {
        unsetJson_root();
      } else {
        setJson_root((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_TYPE:
      return getFile_type();

    case FORMAT_TYPE:
      return getFormat_type();

    case SPLITTABLE:
      return isSplittable();

    case PATH:
      return getPath();

    case START_OFFSET:
      return getStart_offset();

    case SIZE:
      return getSize();

    case LOAD_ID:
      return getLoad_id();

    case FILE_SIZE:
      return getFile_size();

    case NUM_OF_COLUMNS_FROM_FILE:
      return getNum_of_columns_from_file();

    case COLUMNS_FROM_PATH:
      return getColumns_from_path();

    case STRIP_OUTER_ARRAY:
      return isStrip_outer_array();

    case JSONPATHS:
      return getJsonpaths();

    case JSON_ROOT:
      return getJson_root();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FILE_TYPE:
      return isSetFile_type();
    case FORMAT_TYPE:
      return isSetFormat_type();
    case SPLITTABLE:
      return isSetSplittable();
    case PATH:
      return isSetPath();
    case START_OFFSET:
      return isSetStart_offset();
    case SIZE:
      return isSetSize();
    case LOAD_ID:
      return isSetLoad_id();
    case FILE_SIZE:
      return isSetFile_size();
    case NUM_OF_COLUMNS_FROM_FILE:
      return isSetNum_of_columns_from_file();
    case COLUMNS_FROM_PATH:
      return isSetColumns_from_path();
    case STRIP_OUTER_ARRAY:
      return isSetStrip_outer_array();
    case JSONPATHS:
      return isSetJsonpaths();
    case JSON_ROOT:
      return isSetJson_root();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TBrokerRangeDesc)
      return this.equals((TBrokerRangeDesc)that);
    return false;
  }

  public boolean equals(TBrokerRangeDesc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_file_type = true && this.isSetFile_type();
    boolean that_present_file_type = true && that.isSetFile_type();
    if (this_present_file_type || that_present_file_type) {
      if (!(this_present_file_type && that_present_file_type))
        return false;
      if (!this.file_type.equals(that.file_type))
        return false;
    }

    boolean this_present_format_type = true && this.isSetFormat_type();
    boolean that_present_format_type = true && that.isSetFormat_type();
    if (this_present_format_type || that_present_format_type) {
      if (!(this_present_format_type && that_present_format_type))
        return false;
      if (!this.format_type.equals(that.format_type))
        return false;
    }

    boolean this_present_splittable = true;
    boolean that_present_splittable = true;
    if (this_present_splittable || that_present_splittable) {
      if (!(this_present_splittable && that_present_splittable))
        return false;
      if (this.splittable != that.splittable)
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_start_offset = true;
    boolean that_present_start_offset = true;
    if (this_present_start_offset || that_present_start_offset) {
      if (!(this_present_start_offset && that_present_start_offset))
        return false;
      if (this.start_offset != that.start_offset)
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_load_id = true && this.isSetLoad_id();
    boolean that_present_load_id = true && that.isSetLoad_id();
    if (this_present_load_id || that_present_load_id) {
      if (!(this_present_load_id && that_present_load_id))
        return false;
      if (!this.load_id.equals(that.load_id))
        return false;
    }

    boolean this_present_file_size = true && this.isSetFile_size();
    boolean that_present_file_size = true && that.isSetFile_size();
    if (this_present_file_size || that_present_file_size) {
      if (!(this_present_file_size && that_present_file_size))
        return false;
      if (this.file_size != that.file_size)
        return false;
    }

    boolean this_present_num_of_columns_from_file = true && this.isSetNum_of_columns_from_file();
    boolean that_present_num_of_columns_from_file = true && that.isSetNum_of_columns_from_file();
    if (this_present_num_of_columns_from_file || that_present_num_of_columns_from_file) {
      if (!(this_present_num_of_columns_from_file && that_present_num_of_columns_from_file))
        return false;
      if (this.num_of_columns_from_file != that.num_of_columns_from_file)
        return false;
    }

    boolean this_present_columns_from_path = true && this.isSetColumns_from_path();
    boolean that_present_columns_from_path = true && that.isSetColumns_from_path();
    if (this_present_columns_from_path || that_present_columns_from_path) {
      if (!(this_present_columns_from_path && that_present_columns_from_path))
        return false;
      if (!this.columns_from_path.equals(that.columns_from_path))
        return false;
    }

    boolean this_present_strip_outer_array = true && this.isSetStrip_outer_array();
    boolean that_present_strip_outer_array = true && that.isSetStrip_outer_array();
    if (this_present_strip_outer_array || that_present_strip_outer_array) {
      if (!(this_present_strip_outer_array && that_present_strip_outer_array))
        return false;
      if (this.strip_outer_array != that.strip_outer_array)
        return false;
    }

    boolean this_present_jsonpaths = true && this.isSetJsonpaths();
    boolean that_present_jsonpaths = true && that.isSetJsonpaths();
    if (this_present_jsonpaths || that_present_jsonpaths) {
      if (!(this_present_jsonpaths && that_present_jsonpaths))
        return false;
      if (!this.jsonpaths.equals(that.jsonpaths))
        return false;
    }

    boolean this_present_json_root = true && this.isSetJson_root();
    boolean that_present_json_root = true && that.isSetJson_root();
    if (this_present_json_root || that_present_json_root) {
      if (!(this_present_json_root && that_present_json_root))
        return false;
      if (!this.json_root.equals(that.json_root))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFile_type()) ? 131071 : 524287);
    if (isSetFile_type())
      hashCode = hashCode * 8191 + file_type.getValue();

    hashCode = hashCode * 8191 + ((isSetFormat_type()) ? 131071 : 524287);
    if (isSetFormat_type())
      hashCode = hashCode * 8191 + format_type.getValue();

    hashCode = hashCode * 8191 + ((splittable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
    if (isSetPath())
      hashCode = hashCode * 8191 + path.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(start_offset);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(size);

    hashCode = hashCode * 8191 + ((isSetLoad_id()) ? 131071 : 524287);
    if (isSetLoad_id())
      hashCode = hashCode * 8191 + load_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetFile_size()) ? 131071 : 524287);
    if (isSetFile_size())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(file_size);

    hashCode = hashCode * 8191 + ((isSetNum_of_columns_from_file()) ? 131071 : 524287);
    if (isSetNum_of_columns_from_file())
      hashCode = hashCode * 8191 + num_of_columns_from_file;

    hashCode = hashCode * 8191 + ((isSetColumns_from_path()) ? 131071 : 524287);
    if (isSetColumns_from_path())
      hashCode = hashCode * 8191 + columns_from_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetStrip_outer_array()) ? 131071 : 524287);
    if (isSetStrip_outer_array())
      hashCode = hashCode * 8191 + ((strip_outer_array) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetJsonpaths()) ? 131071 : 524287);
    if (isSetJsonpaths())
      hashCode = hashCode * 8191 + jsonpaths.hashCode();

    hashCode = hashCode * 8191 + ((isSetJson_root()) ? 131071 : 524287);
    if (isSetJson_root())
      hashCode = hashCode * 8191 + json_root.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TBrokerRangeDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFile_type(), other.isSetFile_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_type, other.file_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFormat_type(), other.isSetFormat_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormat_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format_type, other.format_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSplittable(), other.isSetSplittable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplittable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splittable, other.splittable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStart_offset(), other.isSetStart_offset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_offset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_offset, other.start_offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSize(), other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_id(), other.isSetLoad_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_id, other.load_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_size(), other.isSetFile_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_size, other.file_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_of_columns_from_file(), other.isSetNum_of_columns_from_file());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_of_columns_from_file()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_of_columns_from_file, other.num_of_columns_from_file);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns_from_path(), other.isSetColumns_from_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns_from_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns_from_path, other.columns_from_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStrip_outer_array(), other.isSetStrip_outer_array());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrip_outer_array()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strip_outer_array, other.strip_outer_array);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJsonpaths(), other.isSetJsonpaths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsonpaths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonpaths, other.jsonpaths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJson_root(), other.isSetJson_root());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJson_root()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json_root, other.json_root);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TBrokerRangeDesc(");
    boolean first = true;

    sb.append("file_type:");
    if (this.file_type == null) {
      sb.append("null");
    } else {
      sb.append(this.file_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("format_type:");
    if (this.format_type == null) {
      sb.append("null");
    } else {
      sb.append(this.format_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("splittable:");
    sb.append(this.splittable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_offset:");
    sb.append(this.start_offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (isSetLoad_id()) {
      if (!first) sb.append(", ");
      sb.append("load_id:");
      if (this.load_id == null) {
        sb.append("null");
      } else {
        sb.append(this.load_id);
      }
      first = false;
    }
    if (isSetFile_size()) {
      if (!first) sb.append(", ");
      sb.append("file_size:");
      sb.append(this.file_size);
      first = false;
    }
    if (isSetNum_of_columns_from_file()) {
      if (!first) sb.append(", ");
      sb.append("num_of_columns_from_file:");
      sb.append(this.num_of_columns_from_file);
      first = false;
    }
    if (isSetColumns_from_path()) {
      if (!first) sb.append(", ");
      sb.append("columns_from_path:");
      if (this.columns_from_path == null) {
        sb.append("null");
      } else {
        sb.append(this.columns_from_path);
      }
      first = false;
    }
    if (isSetStrip_outer_array()) {
      if (!first) sb.append(", ");
      sb.append("strip_outer_array:");
      sb.append(this.strip_outer_array);
      first = false;
    }
    if (isSetJsonpaths()) {
      if (!first) sb.append(", ");
      sb.append("jsonpaths:");
      if (this.jsonpaths == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonpaths);
      }
      first = false;
    }
    if (isSetJson_root()) {
      if (!first) sb.append(", ");
      sb.append("json_root:");
      if (this.json_root == null) {
        sb.append("null");
      } else {
        sb.append(this.json_root);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (file_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_type' was not present! Struct: " + toString());
    }
    if (format_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'format_type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'splittable' because it's a primitive and you chose the non-beans generator.
    if (path == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'path' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'start_offset' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'size' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (load_id != null) {
      load_id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBrokerRangeDescStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TBrokerRangeDescStandardScheme getScheme() {
      return new TBrokerRangeDescStandardScheme();
    }
  }

  private static class TBrokerRangeDescStandardScheme extends org.apache.thrift.scheme.StandardScheme<TBrokerRangeDesc> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TBrokerRangeDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.file_type = io.datafibre.fibre.thrift.TFileType.findByValue(iprot.readI32());
              struct.setFile_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FORMAT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.format_type = io.datafibre.fibre.thrift.TFileFormatType.findByValue(iprot.readI32());
              struct.setFormat_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPLITTABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.splittable = iprot.readBool();
              struct.setSplittableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start_offset = iprot.readI64();
              struct.setStart_offsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.size = iprot.readI64();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.load_id = new io.datafibre.fibre.thrift.TUniqueId();
              struct.load_id.read(iprot);
              struct.setLoad_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.file_size = iprot.readI64();
              struct.setFile_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NUM_OF_COLUMNS_FROM_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_of_columns_from_file = iprot.readI32();
              struct.setNum_of_columns_from_fileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COLUMNS_FROM_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.columns_from_path = new java.util.ArrayList<java.lang.String>(_list16.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readString();
                  struct.columns_from_path.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setColumns_from_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STRIP_OUTER_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.strip_outer_array = iprot.readBool();
              struct.setStrip_outer_arrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // JSONPATHS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jsonpaths = iprot.readString();
              struct.setJsonpathsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // JSON_ROOT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.json_root = iprot.readString();
              struct.setJson_rootIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSplittable()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'splittable' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStart_offset()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'start_offset' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'size' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TBrokerRangeDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.file_type != null) {
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.file_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.format_type != null) {
        oprot.writeFieldBegin(FORMAT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.format_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPLITTABLE_FIELD_DESC);
      oprot.writeBool(struct.splittable);
      oprot.writeFieldEnd();
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_OFFSET_FIELD_DESC);
      oprot.writeI64(struct.start_offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI64(struct.size);
      oprot.writeFieldEnd();
      if (struct.load_id != null) {
        if (struct.isSetLoad_id()) {
          oprot.writeFieldBegin(LOAD_ID_FIELD_DESC);
          struct.load_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFile_size()) {
        oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
        oprot.writeI64(struct.file_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_of_columns_from_file()) {
        oprot.writeFieldBegin(NUM_OF_COLUMNS_FROM_FILE_FIELD_DESC);
        oprot.writeI32(struct.num_of_columns_from_file);
        oprot.writeFieldEnd();
      }
      if (struct.columns_from_path != null) {
        if (struct.isSetColumns_from_path()) {
          oprot.writeFieldBegin(COLUMNS_FROM_PATH_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columns_from_path.size()));
            for (java.lang.String _iter19 : struct.columns_from_path)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStrip_outer_array()) {
        oprot.writeFieldBegin(STRIP_OUTER_ARRAY_FIELD_DESC);
        oprot.writeBool(struct.strip_outer_array);
        oprot.writeFieldEnd();
      }
      if (struct.jsonpaths != null) {
        if (struct.isSetJsonpaths()) {
          oprot.writeFieldBegin(JSONPATHS_FIELD_DESC);
          oprot.writeString(struct.jsonpaths);
          oprot.writeFieldEnd();
        }
      }
      if (struct.json_root != null) {
        if (struct.isSetJson_root()) {
          oprot.writeFieldBegin(JSON_ROOT_FIELD_DESC);
          oprot.writeString(struct.json_root);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBrokerRangeDescTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TBrokerRangeDescTupleScheme getScheme() {
      return new TBrokerRangeDescTupleScheme();
    }
  }

  private static class TBrokerRangeDescTupleScheme extends org.apache.thrift.scheme.TupleScheme<TBrokerRangeDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBrokerRangeDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.file_type.getValue());
      oprot.writeI32(struct.format_type.getValue());
      oprot.writeBool(struct.splittable);
      oprot.writeString(struct.path);
      oprot.writeI64(struct.start_offset);
      oprot.writeI64(struct.size);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLoad_id()) {
        optionals.set(0);
      }
      if (struct.isSetFile_size()) {
        optionals.set(1);
      }
      if (struct.isSetNum_of_columns_from_file()) {
        optionals.set(2);
      }
      if (struct.isSetColumns_from_path()) {
        optionals.set(3);
      }
      if (struct.isSetStrip_outer_array()) {
        optionals.set(4);
      }
      if (struct.isSetJsonpaths()) {
        optionals.set(5);
      }
      if (struct.isSetJson_root()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetLoad_id()) {
        struct.load_id.write(oprot);
      }
      if (struct.isSetFile_size()) {
        oprot.writeI64(struct.file_size);
      }
      if (struct.isSetNum_of_columns_from_file()) {
        oprot.writeI32(struct.num_of_columns_from_file);
      }
      if (struct.isSetColumns_from_path()) {
        {
          oprot.writeI32(struct.columns_from_path.size());
          for (java.lang.String _iter20 : struct.columns_from_path)
          {
            oprot.writeString(_iter20);
          }
        }
      }
      if (struct.isSetStrip_outer_array()) {
        oprot.writeBool(struct.strip_outer_array);
      }
      if (struct.isSetJsonpaths()) {
        oprot.writeString(struct.jsonpaths);
      }
      if (struct.isSetJson_root()) {
        oprot.writeString(struct.json_root);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBrokerRangeDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.file_type = io.datafibre.fibre.thrift.TFileType.findByValue(iprot.readI32());
      struct.setFile_typeIsSet(true);
      struct.format_type = io.datafibre.fibre.thrift.TFileFormatType.findByValue(iprot.readI32());
      struct.setFormat_typeIsSet(true);
      struct.splittable = iprot.readBool();
      struct.setSplittableIsSet(true);
      struct.path = iprot.readString();
      struct.setPathIsSet(true);
      struct.start_offset = iprot.readI64();
      struct.setStart_offsetIsSet(true);
      struct.size = iprot.readI64();
      struct.setSizeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.load_id = new io.datafibre.fibre.thrift.TUniqueId();
        struct.load_id.read(iprot);
        struct.setLoad_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.file_size = iprot.readI64();
        struct.setFile_sizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.num_of_columns_from_file = iprot.readI32();
        struct.setNum_of_columns_from_fileIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.columns_from_path = new java.util.ArrayList<java.lang.String>(_list21.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.columns_from_path.add(_elem22);
          }
        }
        struct.setColumns_from_pathIsSet(true);
      }
      if (incoming.get(4)) {
        struct.strip_outer_array = iprot.readBool();
        struct.setStrip_outer_arrayIsSet(true);
      }
      if (incoming.get(5)) {
        struct.jsonpaths = iprot.readString();
        struct.setJsonpathsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.json_root = iprot.readString();
        struct.setJson_rootIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

