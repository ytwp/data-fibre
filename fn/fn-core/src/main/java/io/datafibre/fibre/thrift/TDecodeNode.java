/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TDecodeNode implements org.apache.thrift.TBase<TDecodeNode, TDecodeNode._Fields>, java.io.Serializable, Cloneable, Comparable<TDecodeNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDecodeNode");

  private static final org.apache.thrift.protocol.TField DICT_ID_TO_STRING_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("dict_id_to_string_ids", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField STRING_FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("string_functions", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDecodeNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDecodeNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> dict_id_to_string_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> string_functions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DICT_ID_TO_STRING_IDS((short)1, "dict_id_to_string_ids"),
    STRING_FUNCTIONS((short)2, "string_functions");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DICT_ID_TO_STRING_IDS
          return DICT_ID_TO_STRING_IDS;
        case 2: // STRING_FUNCTIONS
          return STRING_FUNCTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DICT_ID_TO_STRING_IDS,_Fields.STRING_FUNCTIONS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DICT_ID_TO_STRING_IDS, new org.apache.thrift.meta_data.FieldMetaData("dict_id_to_string_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STRING_FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("string_functions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDecodeNode.class, metaDataMap);
  }

  public TDecodeNode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDecodeNode(TDecodeNode other) {
    if (other.isSetDict_id_to_string_ids()) {
      java.util.Map<java.lang.Integer,java.lang.Integer> __this__dict_id_to_string_ids = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.dict_id_to_string_ids);
      this.dict_id_to_string_ids = __this__dict_id_to_string_ids;
    }
    if (other.isSetString_functions()) {
      java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> __this__string_functions = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>(other.string_functions.size());
      for (java.util.Map.Entry<java.lang.Integer, com.starrocks.thrift.TExpr> other_element : other.string_functions.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        com.starrocks.thrift.TExpr other_element_value = other_element.getValue();

        java.lang.Integer __this__string_functions_copy_key = other_element_key;

        com.starrocks.thrift.TExpr __this__string_functions_copy_value = new com.starrocks.thrift.TExpr(other_element_value);

        __this__string_functions.put(__this__string_functions_copy_key, __this__string_functions_copy_value);
      }
      this.string_functions = __this__string_functions;
    }
  }

  @Override
  public TDecodeNode deepCopy() {
    return new TDecodeNode(this);
  }

  @Override
  public void clear() {
    this.dict_id_to_string_ids = null;
    this.string_functions = null;
  }

  public int getDict_id_to_string_idsSize() {
    return (this.dict_id_to_string_ids == null) ? 0 : this.dict_id_to_string_ids.size();
  }

  public void putToDict_id_to_string_ids(int key, int val) {
    if (this.dict_id_to_string_ids == null) {
      this.dict_id_to_string_ids = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
    }
    this.dict_id_to_string_ids.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Integer> getDict_id_to_string_ids() {
    return this.dict_id_to_string_ids;
  }

  public TDecodeNode setDict_id_to_string_ids(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> dict_id_to_string_ids) {
    this.dict_id_to_string_ids = dict_id_to_string_ids;
    return this;
  }

  public void unsetDict_id_to_string_ids() {
    this.dict_id_to_string_ids = null;
  }

  /** Returns true if field dict_id_to_string_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetDict_id_to_string_ids() {
    return this.dict_id_to_string_ids != null;
  }

  public void setDict_id_to_string_idsIsSet(boolean value) {
    if (!value) {
      this.dict_id_to_string_ids = null;
    }
  }

  public int getString_functionsSize() {
    return (this.string_functions == null) ? 0 : this.string_functions.size();
  }

  public void putToString_functions(int key, com.starrocks.thrift.TExpr val) {
    if (this.string_functions == null) {
      this.string_functions = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>();
    }
    this.string_functions.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> getString_functions() {
    return this.string_functions;
  }

  public TDecodeNode setString_functions(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> string_functions) {
    this.string_functions = string_functions;
    return this;
  }

  public void unsetString_functions() {
    this.string_functions = null;
  }

  /** Returns true if field string_functions is set (has been assigned a value) and false otherwise */
  public boolean isSetString_functions() {
    return this.string_functions != null;
  }

  public void setString_functionsIsSet(boolean value) {
    if (!value) {
      this.string_functions = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DICT_ID_TO_STRING_IDS:
      if (value == null) {
        unsetDict_id_to_string_ids();
      } else {
        setDict_id_to_string_ids((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
      }
      break;

    case STRING_FUNCTIONS:
      if (value == null) {
        unsetString_functions();
      } else {
        setString_functions((java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DICT_ID_TO_STRING_IDS:
      return getDict_id_to_string_ids();

    case STRING_FUNCTIONS:
      return getString_functions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DICT_ID_TO_STRING_IDS:
      return isSetDict_id_to_string_ids();
    case STRING_FUNCTIONS:
      return isSetString_functions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TDecodeNode)
      return this.equals((TDecodeNode)that);
    return false;
  }

  public boolean equals(TDecodeNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_dict_id_to_string_ids = true && this.isSetDict_id_to_string_ids();
    boolean that_present_dict_id_to_string_ids = true && that.isSetDict_id_to_string_ids();
    if (this_present_dict_id_to_string_ids || that_present_dict_id_to_string_ids) {
      if (!(this_present_dict_id_to_string_ids && that_present_dict_id_to_string_ids))
        return false;
      if (!this.dict_id_to_string_ids.equals(that.dict_id_to_string_ids))
        return false;
    }

    boolean this_present_string_functions = true && this.isSetString_functions();
    boolean that_present_string_functions = true && that.isSetString_functions();
    if (this_present_string_functions || that_present_string_functions) {
      if (!(this_present_string_functions && that_present_string_functions))
        return false;
      if (!this.string_functions.equals(that.string_functions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDict_id_to_string_ids()) ? 131071 : 524287);
    if (isSetDict_id_to_string_ids())
      hashCode = hashCode * 8191 + dict_id_to_string_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetString_functions()) ? 131071 : 524287);
    if (isSetString_functions())
      hashCode = hashCode * 8191 + string_functions.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDecodeNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetDict_id_to_string_ids(), other.isSetDict_id_to_string_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDict_id_to_string_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dict_id_to_string_ids, other.dict_id_to_string_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetString_functions(), other.isSetString_functions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_functions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_functions, other.string_functions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDecodeNode(");
    boolean first = true;

    if (isSetDict_id_to_string_ids()) {
      sb.append("dict_id_to_string_ids:");
      if (this.dict_id_to_string_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.dict_id_to_string_ids);
      }
      first = false;
    }
    if (isSetString_functions()) {
      if (!first) sb.append(", ");
      sb.append("string_functions:");
      if (this.string_functions == null) {
        sb.append("null");
      } else {
        sb.append(this.string_functions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDecodeNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDecodeNodeStandardScheme getScheme() {
      return new TDecodeNodeStandardScheme();
    }
  }

  private static class TDecodeNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDecodeNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TDecodeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DICT_ID_TO_STRING_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map894 = iprot.readMapBegin();
                struct.dict_id_to_string_ids = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map894.size);
                int _key895;
                int _val896;
                for (int _i897 = 0; _i897 < _map894.size; ++_i897)
                {
                  _key895 = iprot.readI32();
                  _val896 = iprot.readI32();
                  struct.dict_id_to_string_ids.put(_key895, _val896);
                }
                iprot.readMapEnd();
              }
              struct.setDict_id_to_string_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STRING_FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map898 = iprot.readMapBegin();
                struct.string_functions = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>(2*_map898.size);
                int _key899;
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _val900;
                for (int _i901 = 0; _i901 < _map898.size; ++_i901)
                {
                  _key899 = iprot.readI32();
                  _val900 = new com.starrocks.thrift.TExpr();
                  _val900.read(iprot);
                  struct.string_functions.put(_key899, _val900);
                }
                iprot.readMapEnd();
              }
              struct.setString_functionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TDecodeNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dict_id_to_string_ids != null) {
        if (struct.isSetDict_id_to_string_ids()) {
          oprot.writeFieldBegin(DICT_ID_TO_STRING_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.dict_id_to_string_ids.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter902 : struct.dict_id_to_string_ids.entrySet())
            {
              oprot.writeI32(_iter902.getKey());
              oprot.writeI32(_iter902.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.string_functions != null) {
        if (struct.isSetString_functions()) {
          oprot.writeFieldBegin(STRING_FUNCTIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.string_functions.size()));
            for (java.util.Map.Entry<java.lang.Integer, com.starrocks.thrift.TExpr> _iter903 : struct.string_functions.entrySet())
            {
              oprot.writeI32(_iter903.getKey());
              _iter903.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDecodeNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDecodeNodeTupleScheme getScheme() {
      return new TDecodeNodeTupleScheme();
    }
  }

  private static class TDecodeNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDecodeNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDecodeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDict_id_to_string_ids()) {
        optionals.set(0);
      }
      if (struct.isSetString_functions()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDict_id_to_string_ids()) {
        {
          oprot.writeI32(struct.dict_id_to_string_ids.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter904 : struct.dict_id_to_string_ids.entrySet())
          {
            oprot.writeI32(_iter904.getKey());
            oprot.writeI32(_iter904.getValue());
          }
        }
      }
      if (struct.isSetString_functions()) {
        {
          oprot.writeI32(struct.string_functions.size());
          for (java.util.Map.Entry<java.lang.Integer, com.starrocks.thrift.TExpr> _iter905 : struct.string_functions.entrySet())
          {
            oprot.writeI32(_iter905.getKey());
            _iter905.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDecodeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map906 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32); 
          struct.dict_id_to_string_ids = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map906.size);
          int _key907;
          int _val908;
          for (int _i909 = 0; _i909 < _map906.size; ++_i909)
          {
            _key907 = iprot.readI32();
            _val908 = iprot.readI32();
            struct.dict_id_to_string_ids.put(_key907, _val908);
          }
        }
        struct.setDict_id_to_string_idsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map910 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT); 
          struct.string_functions = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>(2*_map910.size);
          int _key911;
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _val912;
          for (int _i913 = 0; _i913 < _map910.size; ++_i913)
          {
            _key911 = iprot.readI32();
            _val912 = new com.starrocks.thrift.TExpr();
            _val912.read(iprot);
            struct.string_functions.put(_key911, _val912);
          }
        }
        struct.setString_functionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

