/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TIMTDescriptor implements org.apache.thrift.TBase<TIMTDescriptor, TIMTDescriptor._Fields>, java.io.Serializable, Cloneable, Comparable<TIMTDescriptor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIMTDescriptor");

  private static final org.apache.thrift.protocol.TField IMT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("imt_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OLAP_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("olap_table", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField NEED_MAINTAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("need_maintain", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField LOAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("load_id", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_id", org.apache.thrift.protocol.TType.I64, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TIMTDescriptorStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TIMTDescriptorTupleSchemeFactory();

  /**
   * 
   * @see TIMTType
   */
  public @org.apache.thrift.annotation.Nullable TIMTType imt_type; // optional
  public @org.apache.thrift.annotation.Nullable TOlapTableRouteInfo olap_table; // optional
  public boolean need_maintain; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId load_id; // optional
  public long txn_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TIMTType
     */
    IMT_TYPE((short)1, "imt_type"),
    OLAP_TABLE((short)2, "olap_table"),
    NEED_MAINTAIN((short)3, "need_maintain"),
    LOAD_ID((short)11, "load_id"),
    TXN_ID((short)12, "txn_id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IMT_TYPE
          return IMT_TYPE;
        case 2: // OLAP_TABLE
          return OLAP_TABLE;
        case 3: // NEED_MAINTAIN
          return NEED_MAINTAIN;
        case 11: // LOAD_ID
          return LOAD_ID;
        case 12: // TXN_ID
          return TXN_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NEED_MAINTAIN_ISSET_ID = 0;
  private static final int __TXN_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IMT_TYPE,_Fields.OLAP_TABLE,_Fields.NEED_MAINTAIN,_Fields.LOAD_ID,_Fields.TXN_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IMT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("imt_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TIMTType.class)));
    tmpMap.put(_Fields.OLAP_TABLE, new org.apache.thrift.meta_data.FieldMetaData("olap_table", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlapTableRouteInfo.class)));
    tmpMap.put(_Fields.NEED_MAINTAIN, new org.apache.thrift.meta_data.FieldMetaData("need_maintain", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOAD_ID, new org.apache.thrift.meta_data.FieldMetaData("load_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txn_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TIMTDescriptor.class, metaDataMap);
  }

  public TIMTDescriptor() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TIMTDescriptor(TIMTDescriptor other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetImt_type()) {
      this.imt_type = other.imt_type;
    }
    if (other.isSetOlap_table()) {
      this.olap_table = new TOlapTableRouteInfo(other.olap_table);
    }
    this.need_maintain = other.need_maintain;
    if (other.isSetLoad_id()) {
      this.load_id = new com.starrocks.thrift.TUniqueId(other.load_id);
    }
    this.txn_id = other.txn_id;
  }

  @Override
  public TIMTDescriptor deepCopy() {
    return new TIMTDescriptor(this);
  }

  @Override
  public void clear() {
    this.imt_type = null;
    this.olap_table = null;
    setNeed_maintainIsSet(false);
    this.need_maintain = false;
    this.load_id = null;
    setTxn_idIsSet(false);
    this.txn_id = 0;
  }

  /**
   * 
   * @see TIMTType
   */
  @org.apache.thrift.annotation.Nullable
  public TIMTType getImt_type() {
    return this.imt_type;
  }

  /**
   * 
   * @see TIMTType
   */
  public TIMTDescriptor setImt_type(@org.apache.thrift.annotation.Nullable TIMTType imt_type) {
    this.imt_type = imt_type;
    return this;
  }

  public void unsetImt_type() {
    this.imt_type = null;
  }

  /** Returns true if field imt_type is set (has been assigned a value) and false otherwise */
  public boolean isSetImt_type() {
    return this.imt_type != null;
  }

  public void setImt_typeIsSet(boolean value) {
    if (!value) {
      this.imt_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TOlapTableRouteInfo getOlap_table() {
    return this.olap_table;
  }

  public TIMTDescriptor setOlap_table(@org.apache.thrift.annotation.Nullable TOlapTableRouteInfo olap_table) {
    this.olap_table = olap_table;
    return this;
  }

  public void unsetOlap_table() {
    this.olap_table = null;
  }

  /** Returns true if field olap_table is set (has been assigned a value) and false otherwise */
  public boolean isSetOlap_table() {
    return this.olap_table != null;
  }

  public void setOlap_tableIsSet(boolean value) {
    if (!value) {
      this.olap_table = null;
    }
  }

  public boolean isNeed_maintain() {
    return this.need_maintain;
  }

  public TIMTDescriptor setNeed_maintain(boolean need_maintain) {
    this.need_maintain = need_maintain;
    setNeed_maintainIsSet(true);
    return this;
  }

  public void unsetNeed_maintain() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEED_MAINTAIN_ISSET_ID);
  }

  /** Returns true if field need_maintain is set (has been assigned a value) and false otherwise */
  public boolean isSetNeed_maintain() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEED_MAINTAIN_ISSET_ID);
  }

  public void setNeed_maintainIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEED_MAINTAIN_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TUniqueId getLoad_id() {
    return this.load_id;
  }

  public TIMTDescriptor setLoad_id(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId load_id) {
    this.load_id = load_id;
    return this;
  }

  public void unsetLoad_id() {
    this.load_id = null;
  }

  /** Returns true if field load_id is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_id() {
    return this.load_id != null;
  }

  public void setLoad_idIsSet(boolean value) {
    if (!value) {
      this.load_id = null;
    }
  }

  public long getTxn_id() {
    return this.txn_id;
  }

  public TIMTDescriptor setTxn_id(long txn_id) {
    this.txn_id = txn_id;
    setTxn_idIsSet(true);
    return this;
  }

  public void unsetTxn_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  /** Returns true if field txn_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  public void setTxn_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXN_ID_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case IMT_TYPE:
      if (value == null) {
        unsetImt_type();
      } else {
        setImt_type((TIMTType)value);
      }
      break;

    case OLAP_TABLE:
      if (value == null) {
        unsetOlap_table();
      } else {
        setOlap_table((TOlapTableRouteInfo)value);
      }
      break;

    case NEED_MAINTAIN:
      if (value == null) {
        unsetNeed_maintain();
      } else {
        setNeed_maintain((java.lang.Boolean)value);
      }
      break;

    case LOAD_ID:
      if (value == null) {
        unsetLoad_id();
      } else {
        setLoad_id((com.starrocks.thrift.TUniqueId)value);
      }
      break;

    case TXN_ID:
      if (value == null) {
        unsetTxn_id();
      } else {
        setTxn_id((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IMT_TYPE:
      return getImt_type();

    case OLAP_TABLE:
      return getOlap_table();

    case NEED_MAINTAIN:
      return isNeed_maintain();

    case LOAD_ID:
      return getLoad_id();

    case TXN_ID:
      return getTxn_id();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IMT_TYPE:
      return isSetImt_type();
    case OLAP_TABLE:
      return isSetOlap_table();
    case NEED_MAINTAIN:
      return isSetNeed_maintain();
    case LOAD_ID:
      return isSetLoad_id();
    case TXN_ID:
      return isSetTxn_id();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TIMTDescriptor)
      return this.equals((TIMTDescriptor)that);
    return false;
  }

  public boolean equals(TIMTDescriptor that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_imt_type = true && this.isSetImt_type();
    boolean that_present_imt_type = true && that.isSetImt_type();
    if (this_present_imt_type || that_present_imt_type) {
      if (!(this_present_imt_type && that_present_imt_type))
        return false;
      if (!this.imt_type.equals(that.imt_type))
        return false;
    }

    boolean this_present_olap_table = true && this.isSetOlap_table();
    boolean that_present_olap_table = true && that.isSetOlap_table();
    if (this_present_olap_table || that_present_olap_table) {
      if (!(this_present_olap_table && that_present_olap_table))
        return false;
      if (!this.olap_table.equals(that.olap_table))
        return false;
    }

    boolean this_present_need_maintain = true && this.isSetNeed_maintain();
    boolean that_present_need_maintain = true && that.isSetNeed_maintain();
    if (this_present_need_maintain || that_present_need_maintain) {
      if (!(this_present_need_maintain && that_present_need_maintain))
        return false;
      if (this.need_maintain != that.need_maintain)
        return false;
    }

    boolean this_present_load_id = true && this.isSetLoad_id();
    boolean that_present_load_id = true && that.isSetLoad_id();
    if (this_present_load_id || that_present_load_id) {
      if (!(this_present_load_id && that_present_load_id))
        return false;
      if (!this.load_id.equals(that.load_id))
        return false;
    }

    boolean this_present_txn_id = true && this.isSetTxn_id();
    boolean that_present_txn_id = true && that.isSetTxn_id();
    if (this_present_txn_id || that_present_txn_id) {
      if (!(this_present_txn_id && that_present_txn_id))
        return false;
      if (this.txn_id != that.txn_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetImt_type()) ? 131071 : 524287);
    if (isSetImt_type())
      hashCode = hashCode * 8191 + imt_type.getValue();

    hashCode = hashCode * 8191 + ((isSetOlap_table()) ? 131071 : 524287);
    if (isSetOlap_table())
      hashCode = hashCode * 8191 + olap_table.hashCode();

    hashCode = hashCode * 8191 + ((isSetNeed_maintain()) ? 131071 : 524287);
    if (isSetNeed_maintain())
      hashCode = hashCode * 8191 + ((need_maintain) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetLoad_id()) ? 131071 : 524287);
    if (isSetLoad_id())
      hashCode = hashCode * 8191 + load_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetTxn_id()) ? 131071 : 524287);
    if (isSetTxn_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txn_id);

    return hashCode;
  }

  @Override
  public int compareTo(TIMTDescriptor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetImt_type(), other.isSetImt_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImt_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imt_type, other.imt_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOlap_table(), other.isSetOlap_table());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOlap_table()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.olap_table, other.olap_table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNeed_maintain(), other.isSetNeed_maintain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeed_maintain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.need_maintain, other.need_maintain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_id(), other.isSetLoad_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_id, other.load_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxn_id(), other.isSetTxn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_id, other.txn_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TIMTDescriptor(");
    boolean first = true;

    if (isSetImt_type()) {
      sb.append("imt_type:");
      if (this.imt_type == null) {
        sb.append("null");
      } else {
        sb.append(this.imt_type);
      }
      first = false;
    }
    if (isSetOlap_table()) {
      if (!first) sb.append(", ");
      sb.append("olap_table:");
      if (this.olap_table == null) {
        sb.append("null");
      } else {
        sb.append(this.olap_table);
      }
      first = false;
    }
    if (isSetNeed_maintain()) {
      if (!first) sb.append(", ");
      sb.append("need_maintain:");
      sb.append(this.need_maintain);
      first = false;
    }
    if (isSetLoad_id()) {
      if (!first) sb.append(", ");
      sb.append("load_id:");
      if (this.load_id == null) {
        sb.append("null");
      } else {
        sb.append(this.load_id);
      }
      first = false;
    }
    if (isSetTxn_id()) {
      if (!first) sb.append(", ");
      sb.append("txn_id:");
      sb.append(this.txn_id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (olap_table != null) {
      olap_table.validate();
    }
    if (load_id != null) {
      load_id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TIMTDescriptorStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIMTDescriptorStandardScheme getScheme() {
      return new TIMTDescriptorStandardScheme();
    }
  }

  private static class TIMTDescriptorStandardScheme extends org.apache.thrift.scheme.StandardScheme<TIMTDescriptor> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TIMTDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IMT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.imt_type = com.starrocks.thrift.TIMTType.findByValue(iprot.readI32());
              struct.setImt_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OLAP_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.olap_table = new TOlapTableRouteInfo();
              struct.olap_table.read(iprot);
              struct.setOlap_tableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEED_MAINTAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.need_maintain = iprot.readBool();
              struct.setNeed_maintainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.load_id = new com.starrocks.thrift.TUniqueId();
              struct.load_id.read(iprot);
              struct.setLoad_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txn_id = iprot.readI64();
              struct.setTxn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TIMTDescriptor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.imt_type != null) {
        if (struct.isSetImt_type()) {
          oprot.writeFieldBegin(IMT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.imt_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.olap_table != null) {
        if (struct.isSetOlap_table()) {
          oprot.writeFieldBegin(OLAP_TABLE_FIELD_DESC);
          struct.olap_table.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNeed_maintain()) {
        oprot.writeFieldBegin(NEED_MAINTAIN_FIELD_DESC);
        oprot.writeBool(struct.need_maintain);
        oprot.writeFieldEnd();
      }
      if (struct.load_id != null) {
        if (struct.isSetLoad_id()) {
          oprot.writeFieldBegin(LOAD_ID_FIELD_DESC);
          struct.load_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTxn_id()) {
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txn_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TIMTDescriptorTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIMTDescriptorTupleScheme getScheme() {
      return new TIMTDescriptorTupleScheme();
    }
  }

  private static class TIMTDescriptorTupleScheme extends org.apache.thrift.scheme.TupleScheme<TIMTDescriptor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TIMTDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetImt_type()) {
        optionals.set(0);
      }
      if (struct.isSetOlap_table()) {
        optionals.set(1);
      }
      if (struct.isSetNeed_maintain()) {
        optionals.set(2);
      }
      if (struct.isSetLoad_id()) {
        optionals.set(3);
      }
      if (struct.isSetTxn_id()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetImt_type()) {
        oprot.writeI32(struct.imt_type.getValue());
      }
      if (struct.isSetOlap_table()) {
        struct.olap_table.write(oprot);
      }
      if (struct.isSetNeed_maintain()) {
        oprot.writeBool(struct.need_maintain);
      }
      if (struct.isSetLoad_id()) {
        struct.load_id.write(oprot);
      }
      if (struct.isSetTxn_id()) {
        oprot.writeI64(struct.txn_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TIMTDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.imt_type = com.starrocks.thrift.TIMTType.findByValue(iprot.readI32());
        struct.setImt_typeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.olap_table = new TOlapTableRouteInfo();
        struct.olap_table.read(iprot);
        struct.setOlap_tableIsSet(true);
      }
      if (incoming.get(2)) {
        struct.need_maintain = iprot.readBool();
        struct.setNeed_maintainIsSet(true);
      }
      if (incoming.get(3)) {
        struct.load_id = new com.starrocks.thrift.TUniqueId();
        struct.load_id.read(iprot);
        struct.setLoad_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.txn_id = iprot.readI64();
        struct.setTxn_idIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

