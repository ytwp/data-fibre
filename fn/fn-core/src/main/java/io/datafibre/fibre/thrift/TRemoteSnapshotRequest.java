/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TRemoteSnapshotRequest implements org.apache.thrift.TBase<TRemoteSnapshotRequest, TRemoteSnapshotRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TRemoteSnapshotRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRemoteSnapshotRequest");

  private static final org.apache.thrift.protocol.TField TRANSACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transaction_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TABLET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_hash", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField VISIBLE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("visible_version", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SRC_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("src_token", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SRC_TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("src_tablet_id", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SRC_TABLET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("src_tablet_type", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SRC_SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("src_schema_hash", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField SRC_VISIBLE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("src_visible_version", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField SRC_BACKENDS_FIELD_DESC = new org.apache.thrift.protocol.TField("src_backends", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField TIMEOUT_SEC_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout_sec", org.apache.thrift.protocol.TType.I32, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRemoteSnapshotRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRemoteSnapshotRequestTupleSchemeFactory();

  public long transaction_id; // optional
  public long table_id; // optional
  public long partition_id; // optional
  public long tablet_id; // optional
  /**
   * 
   * @see TTabletType
   */
  public @org.apache.thrift.annotation.Nullable TTabletType tablet_type; // optional
  public int schema_hash; // optional
  public long visible_version; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String src_token; // optional
  public long src_tablet_id; // optional
  /**
   * 
   * @see TTabletType
   */
  public @org.apache.thrift.annotation.Nullable TTabletType src_tablet_type; // optional
  public int src_schema_hash; // optional
  public long src_visible_version; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TBackend> src_backends; // optional
  public int timeout_sec; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRANSACTION_ID((short)1, "transaction_id"),
    TABLE_ID((short)2, "table_id"),
    PARTITION_ID((short)3, "partition_id"),
    TABLET_ID((short)4, "tablet_id"),
    /**
     * 
     * @see TTabletType
     */
    TABLET_TYPE((short)5, "tablet_type"),
    SCHEMA_HASH((short)6, "schema_hash"),
    VISIBLE_VERSION((short)7, "visible_version"),
    SRC_TOKEN((short)8, "src_token"),
    SRC_TABLET_ID((short)9, "src_tablet_id"),
    /**
     * 
     * @see TTabletType
     */
    SRC_TABLET_TYPE((short)10, "src_tablet_type"),
    SRC_SCHEMA_HASH((short)11, "src_schema_hash"),
    SRC_VISIBLE_VERSION((short)12, "src_visible_version"),
    SRC_BACKENDS((short)13, "src_backends"),
    TIMEOUT_SEC((short)14, "timeout_sec");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRANSACTION_ID
          return TRANSACTION_ID;
        case 2: // TABLE_ID
          return TABLE_ID;
        case 3: // PARTITION_ID
          return PARTITION_ID;
        case 4: // TABLET_ID
          return TABLET_ID;
        case 5: // TABLET_TYPE
          return TABLET_TYPE;
        case 6: // SCHEMA_HASH
          return SCHEMA_HASH;
        case 7: // VISIBLE_VERSION
          return VISIBLE_VERSION;
        case 8: // SRC_TOKEN
          return SRC_TOKEN;
        case 9: // SRC_TABLET_ID
          return SRC_TABLET_ID;
        case 10: // SRC_TABLET_TYPE
          return SRC_TABLET_TYPE;
        case 11: // SRC_SCHEMA_HASH
          return SRC_SCHEMA_HASH;
        case 12: // SRC_VISIBLE_VERSION
          return SRC_VISIBLE_VERSION;
        case 13: // SRC_BACKENDS
          return SRC_BACKENDS;
        case 14: // TIMEOUT_SEC
          return TIMEOUT_SEC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRANSACTION_ID_ISSET_ID = 0;
  private static final int __TABLE_ID_ISSET_ID = 1;
  private static final int __PARTITION_ID_ISSET_ID = 2;
  private static final int __TABLET_ID_ISSET_ID = 3;
  private static final int __SCHEMA_HASH_ISSET_ID = 4;
  private static final int __VISIBLE_VERSION_ISSET_ID = 5;
  private static final int __SRC_TABLET_ID_ISSET_ID = 6;
  private static final int __SRC_SCHEMA_HASH_ISSET_ID = 7;
  private static final int __SRC_VISIBLE_VERSION_ISSET_ID = 8;
  private static final int __TIMEOUT_SEC_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TRANSACTION_ID,_Fields.TABLE_ID,_Fields.PARTITION_ID,_Fields.TABLET_ID,_Fields.TABLET_TYPE,_Fields.SCHEMA_HASH,_Fields.VISIBLE_VERSION,_Fields.SRC_TOKEN,_Fields.SRC_TABLET_ID,_Fields.SRC_TABLET_TYPE,_Fields.SRC_SCHEMA_HASH,_Fields.SRC_VISIBLE_VERSION,_Fields.SRC_BACKENDS,_Fields.TIMEOUT_SEC};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRANSACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("transaction_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTransactionId")));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTableId")));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TPartitionId")));
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.TABLET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tablet_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTabletType.class)));
    tmpMap.put(_Fields.SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("schema_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSchemaHash")));
    tmpMap.put(_Fields.VISIBLE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("visible_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersion")));
    tmpMap.put(_Fields.SRC_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("src_token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("src_tablet_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.SRC_TABLET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("src_tablet_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTabletType.class)));
    tmpMap.put(_Fields.SRC_SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("src_schema_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSchemaHash")));
    tmpMap.put(_Fields.SRC_VISIBLE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("src_visible_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersion")));
    tmpMap.put(_Fields.SRC_BACKENDS, new org.apache.thrift.meta_data.FieldMetaData("src_backends", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TBackend.class))));
    tmpMap.put(_Fields.TIMEOUT_SEC, new org.apache.thrift.meta_data.FieldMetaData("timeout_sec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRemoteSnapshotRequest.class, metaDataMap);
  }

  public TRemoteSnapshotRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRemoteSnapshotRequest(TRemoteSnapshotRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.transaction_id = other.transaction_id;
    this.table_id = other.table_id;
    this.partition_id = other.partition_id;
    this.tablet_id = other.tablet_id;
    if (other.isSetTablet_type()) {
      this.tablet_type = other.tablet_type;
    }
    this.schema_hash = other.schema_hash;
    this.visible_version = other.visible_version;
    if (other.isSetSrc_token()) {
      this.src_token = other.src_token;
    }
    this.src_tablet_id = other.src_tablet_id;
    if (other.isSetSrc_tablet_type()) {
      this.src_tablet_type = other.src_tablet_type;
    }
    this.src_schema_hash = other.src_schema_hash;
    this.src_visible_version = other.src_visible_version;
    if (other.isSetSrc_backends()) {
      java.util.List<com.starrocks.thrift.TBackend> __this__src_backends = new java.util.ArrayList<com.starrocks.thrift.TBackend>(other.src_backends.size());
      for (com.starrocks.thrift.TBackend other_element : other.src_backends) {
        __this__src_backends.add(new com.starrocks.thrift.TBackend(other_element));
      }
      this.src_backends = __this__src_backends;
    }
    this.timeout_sec = other.timeout_sec;
  }

  @Override
  public TRemoteSnapshotRequest deepCopy() {
    return new TRemoteSnapshotRequest(this);
  }

  @Override
  public void clear() {
    setTransaction_idIsSet(false);
    this.transaction_id = 0;
    setTable_idIsSet(false);
    this.table_id = 0;
    setPartition_idIsSet(false);
    this.partition_id = 0;
    setTablet_idIsSet(false);
    this.tablet_id = 0;
    this.tablet_type = null;
    setSchema_hashIsSet(false);
    this.schema_hash = 0;
    setVisible_versionIsSet(false);
    this.visible_version = 0;
    this.src_token = null;
    setSrc_tablet_idIsSet(false);
    this.src_tablet_id = 0;
    this.src_tablet_type = null;
    setSrc_schema_hashIsSet(false);
    this.src_schema_hash = 0;
    setSrc_visible_versionIsSet(false);
    this.src_visible_version = 0;
    this.src_backends = null;
    setTimeout_secIsSet(false);
    this.timeout_sec = 0;
  }

  public long getTransaction_id() {
    return this.transaction_id;
  }

  public TRemoteSnapshotRequest setTransaction_id(long transaction_id) {
    this.transaction_id = transaction_id;
    setTransaction_idIsSet(true);
    return this;
  }

  public void unsetTransaction_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSACTION_ID_ISSET_ID);
  }

  /** Returns true if field transaction_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTransaction_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSACTION_ID_ISSET_ID);
  }

  public void setTransaction_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSACTION_ID_ISSET_ID, value);
  }

  public long getTable_id() {
    return this.table_id;
  }

  public TRemoteSnapshotRequest setTable_id(long table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public TRemoteSnapshotRequest setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    return this;
  }

  public void unsetPartition_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  public long getTablet_id() {
    return this.tablet_id;
  }

  public TRemoteSnapshotRequest setTablet_id(long tablet_id) {
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    return this;
  }

  public void unsetTablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see TTabletType
   */
  @org.apache.thrift.annotation.Nullable
  public TTabletType getTablet_type() {
    return this.tablet_type;
  }

  /**
   * 
   * @see TTabletType
   */
  public TRemoteSnapshotRequest setTablet_type(@org.apache.thrift.annotation.Nullable TTabletType tablet_type) {
    this.tablet_type = tablet_type;
    return this;
  }

  public void unsetTablet_type() {
    this.tablet_type = null;
  }

  /** Returns true if field tablet_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_type() {
    return this.tablet_type != null;
  }

  public void setTablet_typeIsSet(boolean value) {
    if (!value) {
      this.tablet_type = null;
    }
  }

  public int getSchema_hash() {
    return this.schema_hash;
  }

  public TRemoteSnapshotRequest setSchema_hash(int schema_hash) {
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    return this;
  }

  public void unsetSchema_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  public void setSchema_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID, value);
  }

  public long getVisible_version() {
    return this.visible_version;
  }

  public TRemoteSnapshotRequest setVisible_version(long visible_version) {
    this.visible_version = visible_version;
    setVisible_versionIsSet(true);
    return this;
  }

  public void unsetVisible_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VISIBLE_VERSION_ISSET_ID);
  }

  /** Returns true if field visible_version is set (has been assigned a value) and false otherwise */
  public boolean isSetVisible_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VISIBLE_VERSION_ISSET_ID);
  }

  public void setVisible_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VISIBLE_VERSION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSrc_token() {
    return this.src_token;
  }

  public TRemoteSnapshotRequest setSrc_token(@org.apache.thrift.annotation.Nullable java.lang.String src_token) {
    this.src_token = src_token;
    return this;
  }

  public void unsetSrc_token() {
    this.src_token = null;
  }

  /** Returns true if field src_token is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_token() {
    return this.src_token != null;
  }

  public void setSrc_tokenIsSet(boolean value) {
    if (!value) {
      this.src_token = null;
    }
  }

  public long getSrc_tablet_id() {
    return this.src_tablet_id;
  }

  public TRemoteSnapshotRequest setSrc_tablet_id(long src_tablet_id) {
    this.src_tablet_id = src_tablet_id;
    setSrc_tablet_idIsSet(true);
    return this;
  }

  public void unsetSrc_tablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRC_TABLET_ID_ISSET_ID);
  }

  /** Returns true if field src_tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_tablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRC_TABLET_ID_ISSET_ID);
  }

  public void setSrc_tablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRC_TABLET_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see TTabletType
   */
  @org.apache.thrift.annotation.Nullable
  public TTabletType getSrc_tablet_type() {
    return this.src_tablet_type;
  }

  /**
   * 
   * @see TTabletType
   */
  public TRemoteSnapshotRequest setSrc_tablet_type(@org.apache.thrift.annotation.Nullable TTabletType src_tablet_type) {
    this.src_tablet_type = src_tablet_type;
    return this;
  }

  public void unsetSrc_tablet_type() {
    this.src_tablet_type = null;
  }

  /** Returns true if field src_tablet_type is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_tablet_type() {
    return this.src_tablet_type != null;
  }

  public void setSrc_tablet_typeIsSet(boolean value) {
    if (!value) {
      this.src_tablet_type = null;
    }
  }

  public int getSrc_schema_hash() {
    return this.src_schema_hash;
  }

  public TRemoteSnapshotRequest setSrc_schema_hash(int src_schema_hash) {
    this.src_schema_hash = src_schema_hash;
    setSrc_schema_hashIsSet(true);
    return this;
  }

  public void unsetSrc_schema_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRC_SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field src_schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_schema_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRC_SCHEMA_HASH_ISSET_ID);
  }

  public void setSrc_schema_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRC_SCHEMA_HASH_ISSET_ID, value);
  }

  public long getSrc_visible_version() {
    return this.src_visible_version;
  }

  public TRemoteSnapshotRequest setSrc_visible_version(long src_visible_version) {
    this.src_visible_version = src_visible_version;
    setSrc_visible_versionIsSet(true);
    return this;
  }

  public void unsetSrc_visible_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRC_VISIBLE_VERSION_ISSET_ID);
  }

  /** Returns true if field src_visible_version is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_visible_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRC_VISIBLE_VERSION_ISSET_ID);
  }

  public void setSrc_visible_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRC_VISIBLE_VERSION_ISSET_ID, value);
  }

  public int getSrc_backendsSize() {
    return (this.src_backends == null) ? 0 : this.src_backends.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TBackend> getSrc_backendsIterator() {
    return (this.src_backends == null) ? null : this.src_backends.iterator();
  }

  public void addToSrc_backends(com.starrocks.thrift.TBackend elem) {
    if (this.src_backends == null) {
      this.src_backends = new java.util.ArrayList<com.starrocks.thrift.TBackend>();
    }
    this.src_backends.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TBackend> getSrc_backends() {
    return this.src_backends;
  }

  public TRemoteSnapshotRequest setSrc_backends(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TBackend> src_backends) {
    this.src_backends = src_backends;
    return this;
  }

  public void unsetSrc_backends() {
    this.src_backends = null;
  }

  /** Returns true if field src_backends is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_backends() {
    return this.src_backends != null;
  }

  public void setSrc_backendsIsSet(boolean value) {
    if (!value) {
      this.src_backends = null;
    }
  }

  public int getTimeout_sec() {
    return this.timeout_sec;
  }

  public TRemoteSnapshotRequest setTimeout_sec(int timeout_sec) {
    this.timeout_sec = timeout_sec;
    setTimeout_secIsSet(true);
    return this;
  }

  public void unsetTimeout_sec() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_SEC_ISSET_ID);
  }

  /** Returns true if field timeout_sec is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout_sec() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_SEC_ISSET_ID);
  }

  public void setTimeout_secIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_SEC_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TRANSACTION_ID:
      if (value == null) {
        unsetTransaction_id();
      } else {
        setTransaction_id((java.lang.Long)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((java.lang.Long)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((java.lang.Long)value);
      }
      break;

    case TABLET_ID:
      if (value == null) {
        unsetTablet_id();
      } else {
        setTablet_id((java.lang.Long)value);
      }
      break;

    case TABLET_TYPE:
      if (value == null) {
        unsetTablet_type();
      } else {
        setTablet_type((TTabletType)value);
      }
      break;

    case SCHEMA_HASH:
      if (value == null) {
        unsetSchema_hash();
      } else {
        setSchema_hash((java.lang.Integer)value);
      }
      break;

    case VISIBLE_VERSION:
      if (value == null) {
        unsetVisible_version();
      } else {
        setVisible_version((java.lang.Long)value);
      }
      break;

    case SRC_TOKEN:
      if (value == null) {
        unsetSrc_token();
      } else {
        setSrc_token((java.lang.String)value);
      }
      break;

    case SRC_TABLET_ID:
      if (value == null) {
        unsetSrc_tablet_id();
      } else {
        setSrc_tablet_id((java.lang.Long)value);
      }
      break;

    case SRC_TABLET_TYPE:
      if (value == null) {
        unsetSrc_tablet_type();
      } else {
        setSrc_tablet_type((TTabletType)value);
      }
      break;

    case SRC_SCHEMA_HASH:
      if (value == null) {
        unsetSrc_schema_hash();
      } else {
        setSrc_schema_hash((java.lang.Integer)value);
      }
      break;

    case SRC_VISIBLE_VERSION:
      if (value == null) {
        unsetSrc_visible_version();
      } else {
        setSrc_visible_version((java.lang.Long)value);
      }
      break;

    case SRC_BACKENDS:
      if (value == null) {
        unsetSrc_backends();
      } else {
        setSrc_backends((java.util.List<com.starrocks.thrift.TBackend>)value);
      }
      break;

    case TIMEOUT_SEC:
      if (value == null) {
        unsetTimeout_sec();
      } else {
        setTimeout_sec((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TRANSACTION_ID:
      return getTransaction_id();

    case TABLE_ID:
      return getTable_id();

    case PARTITION_ID:
      return getPartition_id();

    case TABLET_ID:
      return getTablet_id();

    case TABLET_TYPE:
      return getTablet_type();

    case SCHEMA_HASH:
      return getSchema_hash();

    case VISIBLE_VERSION:
      return getVisible_version();

    case SRC_TOKEN:
      return getSrc_token();

    case SRC_TABLET_ID:
      return getSrc_tablet_id();

    case SRC_TABLET_TYPE:
      return getSrc_tablet_type();

    case SRC_SCHEMA_HASH:
      return getSrc_schema_hash();

    case SRC_VISIBLE_VERSION:
      return getSrc_visible_version();

    case SRC_BACKENDS:
      return getSrc_backends();

    case TIMEOUT_SEC:
      return getTimeout_sec();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TRANSACTION_ID:
      return isSetTransaction_id();
    case TABLE_ID:
      return isSetTable_id();
    case PARTITION_ID:
      return isSetPartition_id();
    case TABLET_ID:
      return isSetTablet_id();
    case TABLET_TYPE:
      return isSetTablet_type();
    case SCHEMA_HASH:
      return isSetSchema_hash();
    case VISIBLE_VERSION:
      return isSetVisible_version();
    case SRC_TOKEN:
      return isSetSrc_token();
    case SRC_TABLET_ID:
      return isSetSrc_tablet_id();
    case SRC_TABLET_TYPE:
      return isSetSrc_tablet_type();
    case SRC_SCHEMA_HASH:
      return isSetSrc_schema_hash();
    case SRC_VISIBLE_VERSION:
      return isSetSrc_visible_version();
    case SRC_BACKENDS:
      return isSetSrc_backends();
    case TIMEOUT_SEC:
      return isSetTimeout_sec();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRemoteSnapshotRequest)
      return this.equals((TRemoteSnapshotRequest)that);
    return false;
  }

  public boolean equals(TRemoteSnapshotRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_transaction_id = true && this.isSetTransaction_id();
    boolean that_present_transaction_id = true && that.isSetTransaction_id();
    if (this_present_transaction_id || that_present_transaction_id) {
      if (!(this_present_transaction_id && that_present_transaction_id))
        return false;
      if (this.transaction_id != that.transaction_id)
        return false;
    }

    boolean this_present_table_id = true && this.isSetTable_id();
    boolean that_present_table_id = true && that.isSetTable_id();
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    boolean this_present_partition_id = true && this.isSetPartition_id();
    boolean that_present_partition_id = true && that.isSetPartition_id();
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_tablet_id = true && this.isSetTablet_id();
    boolean that_present_tablet_id = true && that.isSetTablet_id();
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_tablet_type = true && this.isSetTablet_type();
    boolean that_present_tablet_type = true && that.isSetTablet_type();
    if (this_present_tablet_type || that_present_tablet_type) {
      if (!(this_present_tablet_type && that_present_tablet_type))
        return false;
      if (!this.tablet_type.equals(that.tablet_type))
        return false;
    }

    boolean this_present_schema_hash = true && this.isSetSchema_hash();
    boolean that_present_schema_hash = true && that.isSetSchema_hash();
    if (this_present_schema_hash || that_present_schema_hash) {
      if (!(this_present_schema_hash && that_present_schema_hash))
        return false;
      if (this.schema_hash != that.schema_hash)
        return false;
    }

    boolean this_present_visible_version = true && this.isSetVisible_version();
    boolean that_present_visible_version = true && that.isSetVisible_version();
    if (this_present_visible_version || that_present_visible_version) {
      if (!(this_present_visible_version && that_present_visible_version))
        return false;
      if (this.visible_version != that.visible_version)
        return false;
    }

    boolean this_present_src_token = true && this.isSetSrc_token();
    boolean that_present_src_token = true && that.isSetSrc_token();
    if (this_present_src_token || that_present_src_token) {
      if (!(this_present_src_token && that_present_src_token))
        return false;
      if (!this.src_token.equals(that.src_token))
        return false;
    }

    boolean this_present_src_tablet_id = true && this.isSetSrc_tablet_id();
    boolean that_present_src_tablet_id = true && that.isSetSrc_tablet_id();
    if (this_present_src_tablet_id || that_present_src_tablet_id) {
      if (!(this_present_src_tablet_id && that_present_src_tablet_id))
        return false;
      if (this.src_tablet_id != that.src_tablet_id)
        return false;
    }

    boolean this_present_src_tablet_type = true && this.isSetSrc_tablet_type();
    boolean that_present_src_tablet_type = true && that.isSetSrc_tablet_type();
    if (this_present_src_tablet_type || that_present_src_tablet_type) {
      if (!(this_present_src_tablet_type && that_present_src_tablet_type))
        return false;
      if (!this.src_tablet_type.equals(that.src_tablet_type))
        return false;
    }

    boolean this_present_src_schema_hash = true && this.isSetSrc_schema_hash();
    boolean that_present_src_schema_hash = true && that.isSetSrc_schema_hash();
    if (this_present_src_schema_hash || that_present_src_schema_hash) {
      if (!(this_present_src_schema_hash && that_present_src_schema_hash))
        return false;
      if (this.src_schema_hash != that.src_schema_hash)
        return false;
    }

    boolean this_present_src_visible_version = true && this.isSetSrc_visible_version();
    boolean that_present_src_visible_version = true && that.isSetSrc_visible_version();
    if (this_present_src_visible_version || that_present_src_visible_version) {
      if (!(this_present_src_visible_version && that_present_src_visible_version))
        return false;
      if (this.src_visible_version != that.src_visible_version)
        return false;
    }

    boolean this_present_src_backends = true && this.isSetSrc_backends();
    boolean that_present_src_backends = true && that.isSetSrc_backends();
    if (this_present_src_backends || that_present_src_backends) {
      if (!(this_present_src_backends && that_present_src_backends))
        return false;
      if (!this.src_backends.equals(that.src_backends))
        return false;
    }

    boolean this_present_timeout_sec = true && this.isSetTimeout_sec();
    boolean that_present_timeout_sec = true && that.isSetTimeout_sec();
    if (this_present_timeout_sec || that_present_timeout_sec) {
      if (!(this_present_timeout_sec && that_present_timeout_sec))
        return false;
      if (this.timeout_sec != that.timeout_sec)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTransaction_id()) ? 131071 : 524287);
    if (isSetTransaction_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(transaction_id);

    hashCode = hashCode * 8191 + ((isSetTable_id()) ? 131071 : 524287);
    if (isSetTable_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_id);

    hashCode = hashCode * 8191 + ((isSetPartition_id()) ? 131071 : 524287);
    if (isSetPartition_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_id);

    hashCode = hashCode * 8191 + ((isSetTablet_id()) ? 131071 : 524287);
    if (isSetTablet_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tablet_id);

    hashCode = hashCode * 8191 + ((isSetTablet_type()) ? 131071 : 524287);
    if (isSetTablet_type())
      hashCode = hashCode * 8191 + tablet_type.getValue();

    hashCode = hashCode * 8191 + ((isSetSchema_hash()) ? 131071 : 524287);
    if (isSetSchema_hash())
      hashCode = hashCode * 8191 + schema_hash;

    hashCode = hashCode * 8191 + ((isSetVisible_version()) ? 131071 : 524287);
    if (isSetVisible_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(visible_version);

    hashCode = hashCode * 8191 + ((isSetSrc_token()) ? 131071 : 524287);
    if (isSetSrc_token())
      hashCode = hashCode * 8191 + src_token.hashCode();

    hashCode = hashCode * 8191 + ((isSetSrc_tablet_id()) ? 131071 : 524287);
    if (isSetSrc_tablet_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(src_tablet_id);

    hashCode = hashCode * 8191 + ((isSetSrc_tablet_type()) ? 131071 : 524287);
    if (isSetSrc_tablet_type())
      hashCode = hashCode * 8191 + src_tablet_type.getValue();

    hashCode = hashCode * 8191 + ((isSetSrc_schema_hash()) ? 131071 : 524287);
    if (isSetSrc_schema_hash())
      hashCode = hashCode * 8191 + src_schema_hash;

    hashCode = hashCode * 8191 + ((isSetSrc_visible_version()) ? 131071 : 524287);
    if (isSetSrc_visible_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(src_visible_version);

    hashCode = hashCode * 8191 + ((isSetSrc_backends()) ? 131071 : 524287);
    if (isSetSrc_backends())
      hashCode = hashCode * 8191 + src_backends.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimeout_sec()) ? 131071 : 524287);
    if (isSetTimeout_sec())
      hashCode = hashCode * 8191 + timeout_sec;

    return hashCode;
  }

  @Override
  public int compareTo(TRemoteSnapshotRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTransaction_id(), other.isSetTransaction_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransaction_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transaction_id, other.transaction_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_id(), other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_id(), other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_id(), other.isSetTablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_type(), other.isSetTablet_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_type, other.tablet_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchema_hash(), other.isSetSchema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_hash, other.schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVisible_version(), other.isSetVisible_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisible_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visible_version, other.visible_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrc_token(), other.isSetSrc_token());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_token()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_token, other.src_token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrc_tablet_id(), other.isSetSrc_tablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_tablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_tablet_id, other.src_tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrc_tablet_type(), other.isSetSrc_tablet_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_tablet_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_tablet_type, other.src_tablet_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrc_schema_hash(), other.isSetSrc_schema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_schema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_schema_hash, other.src_schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrc_visible_version(), other.isSetSrc_visible_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_visible_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_visible_version, other.src_visible_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrc_backends(), other.isSetSrc_backends());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_backends()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_backends, other.src_backends);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimeout_sec(), other.isSetTimeout_sec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout_sec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout_sec, other.timeout_sec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRemoteSnapshotRequest(");
    boolean first = true;

    if (isSetTransaction_id()) {
      sb.append("transaction_id:");
      sb.append(this.transaction_id);
      first = false;
    }
    if (isSetTable_id()) {
      if (!first) sb.append(", ");
      sb.append("table_id:");
      sb.append(this.table_id);
      first = false;
    }
    if (isSetPartition_id()) {
      if (!first) sb.append(", ");
      sb.append("partition_id:");
      sb.append(this.partition_id);
      first = false;
    }
    if (isSetTablet_id()) {
      if (!first) sb.append(", ");
      sb.append("tablet_id:");
      sb.append(this.tablet_id);
      first = false;
    }
    if (isSetTablet_type()) {
      if (!first) sb.append(", ");
      sb.append("tablet_type:");
      if (this.tablet_type == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet_type);
      }
      first = false;
    }
    if (isSetSchema_hash()) {
      if (!first) sb.append(", ");
      sb.append("schema_hash:");
      sb.append(this.schema_hash);
      first = false;
    }
    if (isSetVisible_version()) {
      if (!first) sb.append(", ");
      sb.append("visible_version:");
      sb.append(this.visible_version);
      first = false;
    }
    if (isSetSrc_token()) {
      if (!first) sb.append(", ");
      sb.append("src_token:");
      if (this.src_token == null) {
        sb.append("null");
      } else {
        sb.append(this.src_token);
      }
      first = false;
    }
    if (isSetSrc_tablet_id()) {
      if (!first) sb.append(", ");
      sb.append("src_tablet_id:");
      sb.append(this.src_tablet_id);
      first = false;
    }
    if (isSetSrc_tablet_type()) {
      if (!first) sb.append(", ");
      sb.append("src_tablet_type:");
      if (this.src_tablet_type == null) {
        sb.append("null");
      } else {
        sb.append(this.src_tablet_type);
      }
      first = false;
    }
    if (isSetSrc_schema_hash()) {
      if (!first) sb.append(", ");
      sb.append("src_schema_hash:");
      sb.append(this.src_schema_hash);
      first = false;
    }
    if (isSetSrc_visible_version()) {
      if (!first) sb.append(", ");
      sb.append("src_visible_version:");
      sb.append(this.src_visible_version);
      first = false;
    }
    if (isSetSrc_backends()) {
      if (!first) sb.append(", ");
      sb.append("src_backends:");
      if (this.src_backends == null) {
        sb.append("null");
      } else {
        sb.append(this.src_backends);
      }
      first = false;
    }
    if (isSetTimeout_sec()) {
      if (!first) sb.append(", ");
      sb.append("timeout_sec:");
      sb.append(this.timeout_sec);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRemoteSnapshotRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRemoteSnapshotRequestStandardScheme getScheme() {
      return new TRemoteSnapshotRequestStandardScheme();
    }
  }

  private static class TRemoteSnapshotRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRemoteSnapshotRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TRemoteSnapshotRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRANSACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.transaction_id = iprot.readI64();
              struct.setTransaction_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_id = iprot.readI64();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TABLET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tablet_type = com.starrocks.thrift.TTabletType.findByValue(iprot.readI32());
              struct.setTablet_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schema_hash = iprot.readI32();
              struct.setSchema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VISIBLE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.visible_version = iprot.readI64();
              struct.setVisible_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SRC_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.src_token = iprot.readString();
              struct.setSrc_tokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SRC_TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.src_tablet_id = iprot.readI64();
              struct.setSrc_tablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SRC_TABLET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.src_tablet_type = com.starrocks.thrift.TTabletType.findByValue(iprot.readI32());
              struct.setSrc_tablet_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SRC_SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.src_schema_hash = iprot.readI32();
              struct.setSrc_schema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SRC_VISIBLE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.src_visible_version = iprot.readI64();
              struct.setSrc_visible_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SRC_BACKENDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list188 = iprot.readListBegin();
                struct.src_backends = new java.util.ArrayList<com.starrocks.thrift.TBackend>(_list188.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TBackend _elem189;
                for (int _i190 = 0; _i190 < _list188.size; ++_i190)
                {
                  _elem189 = new com.starrocks.thrift.TBackend();
                  _elem189.read(iprot);
                  struct.src_backends.add(_elem189);
                }
                iprot.readListEnd();
              }
              struct.setSrc_backendsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TIMEOUT_SEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeout_sec = iprot.readI32();
              struct.setTimeout_secIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TRemoteSnapshotRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTransaction_id()) {
        oprot.writeFieldBegin(TRANSACTION_ID_FIELD_DESC);
        oprot.writeI64(struct.transaction_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTable_id()) {
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeI64(struct.table_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartition_id()) {
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI64(struct.partition_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTablet_id()) {
        oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
        oprot.writeI64(struct.tablet_id);
        oprot.writeFieldEnd();
      }
      if (struct.tablet_type != null) {
        if (struct.isSetTablet_type()) {
          oprot.writeFieldBegin(TABLET_TYPE_FIELD_DESC);
          oprot.writeI32(struct.tablet_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSchema_hash()) {
        oprot.writeFieldBegin(SCHEMA_HASH_FIELD_DESC);
        oprot.writeI32(struct.schema_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVisible_version()) {
        oprot.writeFieldBegin(VISIBLE_VERSION_FIELD_DESC);
        oprot.writeI64(struct.visible_version);
        oprot.writeFieldEnd();
      }
      if (struct.src_token != null) {
        if (struct.isSetSrc_token()) {
          oprot.writeFieldBegin(SRC_TOKEN_FIELD_DESC);
          oprot.writeString(struct.src_token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSrc_tablet_id()) {
        oprot.writeFieldBegin(SRC_TABLET_ID_FIELD_DESC);
        oprot.writeI64(struct.src_tablet_id);
        oprot.writeFieldEnd();
      }
      if (struct.src_tablet_type != null) {
        if (struct.isSetSrc_tablet_type()) {
          oprot.writeFieldBegin(SRC_TABLET_TYPE_FIELD_DESC);
          oprot.writeI32(struct.src_tablet_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSrc_schema_hash()) {
        oprot.writeFieldBegin(SRC_SCHEMA_HASH_FIELD_DESC);
        oprot.writeI32(struct.src_schema_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSrc_visible_version()) {
        oprot.writeFieldBegin(SRC_VISIBLE_VERSION_FIELD_DESC);
        oprot.writeI64(struct.src_visible_version);
        oprot.writeFieldEnd();
      }
      if (struct.src_backends != null) {
        if (struct.isSetSrc_backends()) {
          oprot.writeFieldBegin(SRC_BACKENDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.src_backends.size()));
            for (com.starrocks.thrift.TBackend _iter191 : struct.src_backends)
            {
              _iter191.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimeout_sec()) {
        oprot.writeFieldBegin(TIMEOUT_SEC_FIELD_DESC);
        oprot.writeI32(struct.timeout_sec);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRemoteSnapshotRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRemoteSnapshotRequestTupleScheme getScheme() {
      return new TRemoteSnapshotRequestTupleScheme();
    }
  }

  private static class TRemoteSnapshotRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRemoteSnapshotRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRemoteSnapshotRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTransaction_id()) {
        optionals.set(0);
      }
      if (struct.isSetTable_id()) {
        optionals.set(1);
      }
      if (struct.isSetPartition_id()) {
        optionals.set(2);
      }
      if (struct.isSetTablet_id()) {
        optionals.set(3);
      }
      if (struct.isSetTablet_type()) {
        optionals.set(4);
      }
      if (struct.isSetSchema_hash()) {
        optionals.set(5);
      }
      if (struct.isSetVisible_version()) {
        optionals.set(6);
      }
      if (struct.isSetSrc_token()) {
        optionals.set(7);
      }
      if (struct.isSetSrc_tablet_id()) {
        optionals.set(8);
      }
      if (struct.isSetSrc_tablet_type()) {
        optionals.set(9);
      }
      if (struct.isSetSrc_schema_hash()) {
        optionals.set(10);
      }
      if (struct.isSetSrc_visible_version()) {
        optionals.set(11);
      }
      if (struct.isSetSrc_backends()) {
        optionals.set(12);
      }
      if (struct.isSetTimeout_sec()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetTransaction_id()) {
        oprot.writeI64(struct.transaction_id);
      }
      if (struct.isSetTable_id()) {
        oprot.writeI64(struct.table_id);
      }
      if (struct.isSetPartition_id()) {
        oprot.writeI64(struct.partition_id);
      }
      if (struct.isSetTablet_id()) {
        oprot.writeI64(struct.tablet_id);
      }
      if (struct.isSetTablet_type()) {
        oprot.writeI32(struct.tablet_type.getValue());
      }
      if (struct.isSetSchema_hash()) {
        oprot.writeI32(struct.schema_hash);
      }
      if (struct.isSetVisible_version()) {
        oprot.writeI64(struct.visible_version);
      }
      if (struct.isSetSrc_token()) {
        oprot.writeString(struct.src_token);
      }
      if (struct.isSetSrc_tablet_id()) {
        oprot.writeI64(struct.src_tablet_id);
      }
      if (struct.isSetSrc_tablet_type()) {
        oprot.writeI32(struct.src_tablet_type.getValue());
      }
      if (struct.isSetSrc_schema_hash()) {
        oprot.writeI32(struct.src_schema_hash);
      }
      if (struct.isSetSrc_visible_version()) {
        oprot.writeI64(struct.src_visible_version);
      }
      if (struct.isSetSrc_backends()) {
        {
          oprot.writeI32(struct.src_backends.size());
          for (com.starrocks.thrift.TBackend _iter192 : struct.src_backends)
          {
            _iter192.write(oprot);
          }
        }
      }
      if (struct.isSetTimeout_sec()) {
        oprot.writeI32(struct.timeout_sec);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRemoteSnapshotRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.transaction_id = iprot.readI64();
        struct.setTransaction_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.table_id = iprot.readI64();
        struct.setTable_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.partition_id = iprot.readI64();
        struct.setPartition_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tablet_id = iprot.readI64();
        struct.setTablet_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tablet_type = com.starrocks.thrift.TTabletType.findByValue(iprot.readI32());
        struct.setTablet_typeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.schema_hash = iprot.readI32();
        struct.setSchema_hashIsSet(true);
      }
      if (incoming.get(6)) {
        struct.visible_version = iprot.readI64();
        struct.setVisible_versionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.src_token = iprot.readString();
        struct.setSrc_tokenIsSet(true);
      }
      if (incoming.get(8)) {
        struct.src_tablet_id = iprot.readI64();
        struct.setSrc_tablet_idIsSet(true);
      }
      if (incoming.get(9)) {
        struct.src_tablet_type = com.starrocks.thrift.TTabletType.findByValue(iprot.readI32());
        struct.setSrc_tablet_typeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.src_schema_hash = iprot.readI32();
        struct.setSrc_schema_hashIsSet(true);
      }
      if (incoming.get(11)) {
        struct.src_visible_version = iprot.readI64();
        struct.setSrc_visible_versionIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list193 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.src_backends = new java.util.ArrayList<com.starrocks.thrift.TBackend>(_list193.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TBackend _elem194;
          for (int _i195 = 0; _i195 < _list193.size; ++_i195)
          {
            _elem194 = new com.starrocks.thrift.TBackend();
            _elem194.read(iprot);
            struct.src_backends.add(_elem194);
          }
        }
        struct.setSrc_backendsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.timeout_sec = iprot.readI32();
        struct.setTimeout_secIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

