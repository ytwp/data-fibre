/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TAuditStatistics implements org.apache.thrift.TBase<TAuditStatistics, TAuditStatistics._Fields>, java.io.Serializable, Cloneable, Comparable<TAuditStatistics> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAuditStatistics");

  private static final org.apache.thrift.protocol.TField SCAN_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_rows", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SCAN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_bytes", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField RETURNED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("returned_rows", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField CPU_COST_NS_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu_cost_ns", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField MEM_COST_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_cost_bytes", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SPILL_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_bytes", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField STATS_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("stats_items", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAuditStatisticsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAuditStatisticsTupleSchemeFactory();

  public long scan_rows; // optional
  public long scan_bytes; // optional
  public long returned_rows; // optional
  public long cpu_cost_ns; // optional
  public long mem_cost_bytes; // optional
  public long spill_bytes; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TAuditStatisticsItem> stats_items; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCAN_ROWS((short)3, "scan_rows"),
    SCAN_BYTES((short)4, "scan_bytes"),
    RETURNED_ROWS((short)5, "returned_rows"),
    CPU_COST_NS((short)6, "cpu_cost_ns"),
    MEM_COST_BYTES((short)7, "mem_cost_bytes"),
    SPILL_BYTES((short)8, "spill_bytes"),
    STATS_ITEMS((short)9, "stats_items");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 3: // SCAN_ROWS
          return SCAN_ROWS;
        case 4: // SCAN_BYTES
          return SCAN_BYTES;
        case 5: // RETURNED_ROWS
          return RETURNED_ROWS;
        case 6: // CPU_COST_NS
          return CPU_COST_NS;
        case 7: // MEM_COST_BYTES
          return MEM_COST_BYTES;
        case 8: // SPILL_BYTES
          return SPILL_BYTES;
        case 9: // STATS_ITEMS
          return STATS_ITEMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCAN_ROWS_ISSET_ID = 0;
  private static final int __SCAN_BYTES_ISSET_ID = 1;
  private static final int __RETURNED_ROWS_ISSET_ID = 2;
  private static final int __CPU_COST_NS_ISSET_ID = 3;
  private static final int __MEM_COST_BYTES_ISSET_ID = 4;
  private static final int __SPILL_BYTES_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SCAN_ROWS,_Fields.SCAN_BYTES,_Fields.RETURNED_ROWS,_Fields.CPU_COST_NS,_Fields.MEM_COST_BYTES,_Fields.SPILL_BYTES,_Fields.STATS_ITEMS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCAN_ROWS, new org.apache.thrift.meta_data.FieldMetaData("scan_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCAN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("scan_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RETURNED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("returned_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CPU_COST_NS, new org.apache.thrift.meta_data.FieldMetaData("cpu_cost_ns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEM_COST_BYTES, new org.apache.thrift.meta_data.FieldMetaData("mem_cost_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPILL_BYTES, new org.apache.thrift.meta_data.FieldMetaData("spill_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATS_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("stats_items", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAuditStatisticsItem.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAuditStatistics.class, metaDataMap);
  }

  public TAuditStatistics() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAuditStatistics(TAuditStatistics other) {
    __isset_bitfield = other.__isset_bitfield;
    this.scan_rows = other.scan_rows;
    this.scan_bytes = other.scan_bytes;
    this.returned_rows = other.returned_rows;
    this.cpu_cost_ns = other.cpu_cost_ns;
    this.mem_cost_bytes = other.mem_cost_bytes;
    this.spill_bytes = other.spill_bytes;
    if (other.isSetStats_items()) {
      java.util.List<TAuditStatisticsItem> __this__stats_items = new java.util.ArrayList<TAuditStatisticsItem>(other.stats_items.size());
      for (TAuditStatisticsItem other_element : other.stats_items) {
        __this__stats_items.add(new TAuditStatisticsItem(other_element));
      }
      this.stats_items = __this__stats_items;
    }
  }

  @Override
  public TAuditStatistics deepCopy() {
    return new TAuditStatistics(this);
  }

  @Override
  public void clear() {
    setScan_rowsIsSet(false);
    this.scan_rows = 0;
    setScan_bytesIsSet(false);
    this.scan_bytes = 0;
    setReturned_rowsIsSet(false);
    this.returned_rows = 0;
    setCpu_cost_nsIsSet(false);
    this.cpu_cost_ns = 0;
    setMem_cost_bytesIsSet(false);
    this.mem_cost_bytes = 0;
    setSpill_bytesIsSet(false);
    this.spill_bytes = 0;
    this.stats_items = null;
  }

  public long getScan_rows() {
    return this.scan_rows;
  }

  public TAuditStatistics setScan_rows(long scan_rows) {
    this.scan_rows = scan_rows;
    setScan_rowsIsSet(true);
    return this;
  }

  public void unsetScan_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCAN_ROWS_ISSET_ID);
  }

  /** Returns true if field scan_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetScan_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCAN_ROWS_ISSET_ID);
  }

  public void setScan_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCAN_ROWS_ISSET_ID, value);
  }

  public long getScan_bytes() {
    return this.scan_bytes;
  }

  public TAuditStatistics setScan_bytes(long scan_bytes) {
    this.scan_bytes = scan_bytes;
    setScan_bytesIsSet(true);
    return this;
  }

  public void unsetScan_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCAN_BYTES_ISSET_ID);
  }

  /** Returns true if field scan_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetScan_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCAN_BYTES_ISSET_ID);
  }

  public void setScan_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCAN_BYTES_ISSET_ID, value);
  }

  public long getReturned_rows() {
    return this.returned_rows;
  }

  public TAuditStatistics setReturned_rows(long returned_rows) {
    this.returned_rows = returned_rows;
    setReturned_rowsIsSet(true);
    return this;
  }

  public void unsetReturned_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RETURNED_ROWS_ISSET_ID);
  }

  /** Returns true if field returned_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetReturned_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RETURNED_ROWS_ISSET_ID);
  }

  public void setReturned_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RETURNED_ROWS_ISSET_ID, value);
  }

  public long getCpu_cost_ns() {
    return this.cpu_cost_ns;
  }

  public TAuditStatistics setCpu_cost_ns(long cpu_cost_ns) {
    this.cpu_cost_ns = cpu_cost_ns;
    setCpu_cost_nsIsSet(true);
    return this;
  }

  public void unsetCpu_cost_ns() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPU_COST_NS_ISSET_ID);
  }

  /** Returns true if field cpu_cost_ns is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu_cost_ns() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPU_COST_NS_ISSET_ID);
  }

  public void setCpu_cost_nsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPU_COST_NS_ISSET_ID, value);
  }

  public long getMem_cost_bytes() {
    return this.mem_cost_bytes;
  }

  public TAuditStatistics setMem_cost_bytes(long mem_cost_bytes) {
    this.mem_cost_bytes = mem_cost_bytes;
    setMem_cost_bytesIsSet(true);
    return this;
  }

  public void unsetMem_cost_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEM_COST_BYTES_ISSET_ID);
  }

  /** Returns true if field mem_cost_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_cost_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEM_COST_BYTES_ISSET_ID);
  }

  public void setMem_cost_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEM_COST_BYTES_ISSET_ID, value);
  }

  public long getSpill_bytes() {
    return this.spill_bytes;
  }

  public TAuditStatistics setSpill_bytes(long spill_bytes) {
    this.spill_bytes = spill_bytes;
    setSpill_bytesIsSet(true);
    return this;
  }

  public void unsetSpill_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_BYTES_ISSET_ID);
  }

  /** Returns true if field spill_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_BYTES_ISSET_ID);
  }

  public void setSpill_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_BYTES_ISSET_ID, value);
  }

  public int getStats_itemsSize() {
    return (this.stats_items == null) ? 0 : this.stats_items.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TAuditStatisticsItem> getStats_itemsIterator() {
    return (this.stats_items == null) ? null : this.stats_items.iterator();
  }

  public void addToStats_items(TAuditStatisticsItem elem) {
    if (this.stats_items == null) {
      this.stats_items = new java.util.ArrayList<TAuditStatisticsItem>();
    }
    this.stats_items.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TAuditStatisticsItem> getStats_items() {
    return this.stats_items;
  }

  public TAuditStatistics setStats_items(@org.apache.thrift.annotation.Nullable java.util.List<TAuditStatisticsItem> stats_items) {
    this.stats_items = stats_items;
    return this;
  }

  public void unsetStats_items() {
    this.stats_items = null;
  }

  /** Returns true if field stats_items is set (has been assigned a value) and false otherwise */
  public boolean isSetStats_items() {
    return this.stats_items != null;
  }

  public void setStats_itemsIsSet(boolean value) {
    if (!value) {
      this.stats_items = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SCAN_ROWS:
      if (value == null) {
        unsetScan_rows();
      } else {
        setScan_rows((java.lang.Long)value);
      }
      break;

    case SCAN_BYTES:
      if (value == null) {
        unsetScan_bytes();
      } else {
        setScan_bytes((java.lang.Long)value);
      }
      break;

    case RETURNED_ROWS:
      if (value == null) {
        unsetReturned_rows();
      } else {
        setReturned_rows((java.lang.Long)value);
      }
      break;

    case CPU_COST_NS:
      if (value == null) {
        unsetCpu_cost_ns();
      } else {
        setCpu_cost_ns((java.lang.Long)value);
      }
      break;

    case MEM_COST_BYTES:
      if (value == null) {
        unsetMem_cost_bytes();
      } else {
        setMem_cost_bytes((java.lang.Long)value);
      }
      break;

    case SPILL_BYTES:
      if (value == null) {
        unsetSpill_bytes();
      } else {
        setSpill_bytes((java.lang.Long)value);
      }
      break;

    case STATS_ITEMS:
      if (value == null) {
        unsetStats_items();
      } else {
        setStats_items((java.util.List<TAuditStatisticsItem>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SCAN_ROWS:
      return getScan_rows();

    case SCAN_BYTES:
      return getScan_bytes();

    case RETURNED_ROWS:
      return getReturned_rows();

    case CPU_COST_NS:
      return getCpu_cost_ns();

    case MEM_COST_BYTES:
      return getMem_cost_bytes();

    case SPILL_BYTES:
      return getSpill_bytes();

    case STATS_ITEMS:
      return getStats_items();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SCAN_ROWS:
      return isSetScan_rows();
    case SCAN_BYTES:
      return isSetScan_bytes();
    case RETURNED_ROWS:
      return isSetReturned_rows();
    case CPU_COST_NS:
      return isSetCpu_cost_ns();
    case MEM_COST_BYTES:
      return isSetMem_cost_bytes();
    case SPILL_BYTES:
      return isSetSpill_bytes();
    case STATS_ITEMS:
      return isSetStats_items();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TAuditStatistics)
      return this.equals((TAuditStatistics)that);
    return false;
  }

  public boolean equals(TAuditStatistics that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_scan_rows = true && this.isSetScan_rows();
    boolean that_present_scan_rows = true && that.isSetScan_rows();
    if (this_present_scan_rows || that_present_scan_rows) {
      if (!(this_present_scan_rows && that_present_scan_rows))
        return false;
      if (this.scan_rows != that.scan_rows)
        return false;
    }

    boolean this_present_scan_bytes = true && this.isSetScan_bytes();
    boolean that_present_scan_bytes = true && that.isSetScan_bytes();
    if (this_present_scan_bytes || that_present_scan_bytes) {
      if (!(this_present_scan_bytes && that_present_scan_bytes))
        return false;
      if (this.scan_bytes != that.scan_bytes)
        return false;
    }

    boolean this_present_returned_rows = true && this.isSetReturned_rows();
    boolean that_present_returned_rows = true && that.isSetReturned_rows();
    if (this_present_returned_rows || that_present_returned_rows) {
      if (!(this_present_returned_rows && that_present_returned_rows))
        return false;
      if (this.returned_rows != that.returned_rows)
        return false;
    }

    boolean this_present_cpu_cost_ns = true && this.isSetCpu_cost_ns();
    boolean that_present_cpu_cost_ns = true && that.isSetCpu_cost_ns();
    if (this_present_cpu_cost_ns || that_present_cpu_cost_ns) {
      if (!(this_present_cpu_cost_ns && that_present_cpu_cost_ns))
        return false;
      if (this.cpu_cost_ns != that.cpu_cost_ns)
        return false;
    }

    boolean this_present_mem_cost_bytes = true && this.isSetMem_cost_bytes();
    boolean that_present_mem_cost_bytes = true && that.isSetMem_cost_bytes();
    if (this_present_mem_cost_bytes || that_present_mem_cost_bytes) {
      if (!(this_present_mem_cost_bytes && that_present_mem_cost_bytes))
        return false;
      if (this.mem_cost_bytes != that.mem_cost_bytes)
        return false;
    }

    boolean this_present_spill_bytes = true && this.isSetSpill_bytes();
    boolean that_present_spill_bytes = true && that.isSetSpill_bytes();
    if (this_present_spill_bytes || that_present_spill_bytes) {
      if (!(this_present_spill_bytes && that_present_spill_bytes))
        return false;
      if (this.spill_bytes != that.spill_bytes)
        return false;
    }

    boolean this_present_stats_items = true && this.isSetStats_items();
    boolean that_present_stats_items = true && that.isSetStats_items();
    if (this_present_stats_items || that_present_stats_items) {
      if (!(this_present_stats_items && that_present_stats_items))
        return false;
      if (!this.stats_items.equals(that.stats_items))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetScan_rows()) ? 131071 : 524287);
    if (isSetScan_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(scan_rows);

    hashCode = hashCode * 8191 + ((isSetScan_bytes()) ? 131071 : 524287);
    if (isSetScan_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(scan_bytes);

    hashCode = hashCode * 8191 + ((isSetReturned_rows()) ? 131071 : 524287);
    if (isSetReturned_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(returned_rows);

    hashCode = hashCode * 8191 + ((isSetCpu_cost_ns()) ? 131071 : 524287);
    if (isSetCpu_cost_ns())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cpu_cost_ns);

    hashCode = hashCode * 8191 + ((isSetMem_cost_bytes()) ? 131071 : 524287);
    if (isSetMem_cost_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mem_cost_bytes);

    hashCode = hashCode * 8191 + ((isSetSpill_bytes()) ? 131071 : 524287);
    if (isSetSpill_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spill_bytes);

    hashCode = hashCode * 8191 + ((isSetStats_items()) ? 131071 : 524287);
    if (isSetStats_items())
      hashCode = hashCode * 8191 + stats_items.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TAuditStatistics other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetScan_rows(), other.isSetScan_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScan_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_rows, other.scan_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetScan_bytes(), other.isSetScan_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScan_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_bytes, other.scan_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReturned_rows(), other.isSetReturned_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturned_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returned_rows, other.returned_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCpu_cost_ns(), other.isSetCpu_cost_ns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu_cost_ns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu_cost_ns, other.cpu_cost_ns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMem_cost_bytes(), other.isSetMem_cost_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_cost_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_cost_bytes, other.mem_cost_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_bytes(), other.isSetSpill_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_bytes, other.spill_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStats_items(), other.isSetStats_items());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStats_items()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stats_items, other.stats_items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAuditStatistics(");
    boolean first = true;

    if (isSetScan_rows()) {
      sb.append("scan_rows:");
      sb.append(this.scan_rows);
      first = false;
    }
    if (isSetScan_bytes()) {
      if (!first) sb.append(", ");
      sb.append("scan_bytes:");
      sb.append(this.scan_bytes);
      first = false;
    }
    if (isSetReturned_rows()) {
      if (!first) sb.append(", ");
      sb.append("returned_rows:");
      sb.append(this.returned_rows);
      first = false;
    }
    if (isSetCpu_cost_ns()) {
      if (!first) sb.append(", ");
      sb.append("cpu_cost_ns:");
      sb.append(this.cpu_cost_ns);
      first = false;
    }
    if (isSetMem_cost_bytes()) {
      if (!first) sb.append(", ");
      sb.append("mem_cost_bytes:");
      sb.append(this.mem_cost_bytes);
      first = false;
    }
    if (isSetSpill_bytes()) {
      if (!first) sb.append(", ");
      sb.append("spill_bytes:");
      sb.append(this.spill_bytes);
      first = false;
    }
    if (isSetStats_items()) {
      if (!first) sb.append(", ");
      sb.append("stats_items:");
      if (this.stats_items == null) {
        sb.append("null");
      } else {
        sb.append(this.stats_items);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAuditStatisticsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAuditStatisticsStandardScheme getScheme() {
      return new TAuditStatisticsStandardScheme();
    }
  }

  private static class TAuditStatisticsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAuditStatistics> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TAuditStatistics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 3: // SCAN_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scan_rows = iprot.readI64();
              struct.setScan_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCAN_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scan_bytes = iprot.readI64();
              struct.setScan_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RETURNED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.returned_rows = iprot.readI64();
              struct.setReturned_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CPU_COST_NS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cpu_cost_ns = iprot.readI64();
              struct.setCpu_cost_nsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MEM_COST_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem_cost_bytes = iprot.readI64();
              struct.setMem_cost_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SPILL_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.spill_bytes = iprot.readI64();
              struct.setSpill_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATS_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list270 = iprot.readListBegin();
                struct.stats_items = new java.util.ArrayList<TAuditStatisticsItem>(_list270.size);
                @org.apache.thrift.annotation.Nullable TAuditStatisticsItem _elem271;
                for (int _i272 = 0; _i272 < _list270.size; ++_i272)
                {
                  _elem271 = new TAuditStatisticsItem();
                  _elem271.read(iprot);
                  struct.stats_items.add(_elem271);
                }
                iprot.readListEnd();
              }
              struct.setStats_itemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TAuditStatistics struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetScan_rows()) {
        oprot.writeFieldBegin(SCAN_ROWS_FIELD_DESC);
        oprot.writeI64(struct.scan_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetScan_bytes()) {
        oprot.writeFieldBegin(SCAN_BYTES_FIELD_DESC);
        oprot.writeI64(struct.scan_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReturned_rows()) {
        oprot.writeFieldBegin(RETURNED_ROWS_FIELD_DESC);
        oprot.writeI64(struct.returned_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCpu_cost_ns()) {
        oprot.writeFieldBegin(CPU_COST_NS_FIELD_DESC);
        oprot.writeI64(struct.cpu_cost_ns);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMem_cost_bytes()) {
        oprot.writeFieldBegin(MEM_COST_BYTES_FIELD_DESC);
        oprot.writeI64(struct.mem_cost_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_bytes()) {
        oprot.writeFieldBegin(SPILL_BYTES_FIELD_DESC);
        oprot.writeI64(struct.spill_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.stats_items != null) {
        if (struct.isSetStats_items()) {
          oprot.writeFieldBegin(STATS_ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.stats_items.size()));
            for (TAuditStatisticsItem _iter273 : struct.stats_items)
            {
              _iter273.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAuditStatisticsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAuditStatisticsTupleScheme getScheme() {
      return new TAuditStatisticsTupleScheme();
    }
  }

  private static class TAuditStatisticsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAuditStatistics> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAuditStatistics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetScan_rows()) {
        optionals.set(0);
      }
      if (struct.isSetScan_bytes()) {
        optionals.set(1);
      }
      if (struct.isSetReturned_rows()) {
        optionals.set(2);
      }
      if (struct.isSetCpu_cost_ns()) {
        optionals.set(3);
      }
      if (struct.isSetMem_cost_bytes()) {
        optionals.set(4);
      }
      if (struct.isSetSpill_bytes()) {
        optionals.set(5);
      }
      if (struct.isSetStats_items()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetScan_rows()) {
        oprot.writeI64(struct.scan_rows);
      }
      if (struct.isSetScan_bytes()) {
        oprot.writeI64(struct.scan_bytes);
      }
      if (struct.isSetReturned_rows()) {
        oprot.writeI64(struct.returned_rows);
      }
      if (struct.isSetCpu_cost_ns()) {
        oprot.writeI64(struct.cpu_cost_ns);
      }
      if (struct.isSetMem_cost_bytes()) {
        oprot.writeI64(struct.mem_cost_bytes);
      }
      if (struct.isSetSpill_bytes()) {
        oprot.writeI64(struct.spill_bytes);
      }
      if (struct.isSetStats_items()) {
        {
          oprot.writeI32(struct.stats_items.size());
          for (TAuditStatisticsItem _iter274 : struct.stats_items)
          {
            _iter274.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAuditStatistics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.scan_rows = iprot.readI64();
        struct.setScan_rowsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.scan_bytes = iprot.readI64();
        struct.setScan_bytesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.returned_rows = iprot.readI64();
        struct.setReturned_rowsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cpu_cost_ns = iprot.readI64();
        struct.setCpu_cost_nsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mem_cost_bytes = iprot.readI64();
        struct.setMem_cost_bytesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.spill_bytes = iprot.readI64();
        struct.setSpill_bytesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list275 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.stats_items = new java.util.ArrayList<TAuditStatisticsItem>(_list275.size);
          @org.apache.thrift.annotation.Nullable TAuditStatisticsItem _elem276;
          for (int _i277 = 0; _i277 < _list275.size; ++_i277)
          {
            _elem276 = new TAuditStatisticsItem();
            _elem276.read(iprot);
            struct.stats_items.add(_elem276);
          }
        }
        struct.setStats_itemsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

