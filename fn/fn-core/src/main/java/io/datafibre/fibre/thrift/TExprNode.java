/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TExprNode implements org.apache.thrift.TBase<TExprNode, TExprNode._Fields>, java.io.Serializable, Cloneable, Comparable<TExprNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExprNode");

  private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("node_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField OPCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("opcode", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("num_children", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AGG_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("agg_expr", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField BOOL_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bool_literal", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField CASE_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("case_expr", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField DATE_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("date_literal", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField FLOAT_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("float_literal", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField INT_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("int_literal", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField IN_PREDICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("in_predicate", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField IS_NULL_PRED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_null_pred", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField LIKE_PRED_FIELD_DESC = new org.apache.thrift.protocol.TField("like_pred", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField LITERAL_PRED_FIELD_DESC = new org.apache.thrift.protocol.TField("literal_pred", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField SLOT_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("slot_ref", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField STRING_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("string_literal", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField TUPLE_IS_NULL_PRED_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_is_null_pred", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField INFO_FUNC_FIELD_DESC = new org.apache.thrift.protocol.TField("info_func", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField DECIMAL_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("decimal_literal", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField OUTPUT_SCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("output_scale", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField FN_CALL_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("fn_call_expr", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField LARGE_INT_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("large_int_literal", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField OUTPUT_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("output_column", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField OUTPUT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("output_type", org.apache.thrift.protocol.TType.STRUCT, (short)24);
  private static final org.apache.thrift.protocol.TField VECTOR_OPCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("vector_opcode", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField FN_FIELD_DESC = new org.apache.thrift.protocol.TField("fn", org.apache.thrift.protocol.TType.STRUCT, (short)26);
  private static final org.apache.thrift.protocol.TField VARARG_START_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("vararg_start_idx", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField CHILD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("child_type", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField VSLOT_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("vslot_ref", org.apache.thrift.protocol.TType.STRUCT, (short)29);
  private static final org.apache.thrift.protocol.TField USED_SUBFIELD_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("used_subfield_names", org.apache.thrift.protocol.TType.LIST, (short)30);
  private static final org.apache.thrift.protocol.TField BINARY_LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("binary_literal", org.apache.thrift.protocol.TType.STRUCT, (short)31);
  private static final org.apache.thrift.protocol.TField COPY_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("copy_flag", org.apache.thrift.protocol.TType.BOOL, (short)32);
  private static final org.apache.thrift.protocol.TField CHECK_IS_OUT_OF_BOUNDS_FIELD_DESC = new org.apache.thrift.protocol.TField("check_is_out_of_bounds", org.apache.thrift.protocol.TType.BOOL, (short)35);
  private static final org.apache.thrift.protocol.TField USE_VECTORIZED_FIELD_DESC = new org.apache.thrift.protocol.TField("use_vectorized", org.apache.thrift.protocol.TType.BOOL, (short)50);
  private static final org.apache.thrift.protocol.TField HAS_NULLABLE_CHILD_FIELD_DESC = new org.apache.thrift.protocol.TField("has_nullable_child", org.apache.thrift.protocol.TType.BOOL, (short)51);
  private static final org.apache.thrift.protocol.TField IS_NULLABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_nullable", org.apache.thrift.protocol.TType.BOOL, (short)52);
  private static final org.apache.thrift.protocol.TField CHILD_TYPE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("child_type_desc", org.apache.thrift.protocol.TType.STRUCT, (short)53);
  private static final org.apache.thrift.protocol.TField IS_MONOTONIC_FIELD_DESC = new org.apache.thrift.protocol.TField("is_monotonic", org.apache.thrift.protocol.TType.BOOL, (short)54);
  private static final org.apache.thrift.protocol.TField DICT_QUERY_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("dict_query_expr", org.apache.thrift.protocol.TType.STRUCT, (short)55);
  private static final org.apache.thrift.protocol.TField DICTIONARY_GET_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("dictionary_get_expr", org.apache.thrift.protocol.TType.STRUCT, (short)56);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TExprNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TExprNodeTupleSchemeFactory();

  /**
   * 
   * @see TExprNodeType
   */
  public @org.apache.thrift.annotation.Nullable TExprNodeType node_type; // required
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTypeDesc type; // required
  /**
   * 
   * @see io.datafibre.fibre.thrift.TExprOpcode
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExprOpcode opcode; // optional
  public int num_children; // required
  public @org.apache.thrift.annotation.Nullable TAggregateExpr agg_expr; // optional
  public @org.apache.thrift.annotation.Nullable TBoolLiteral bool_literal; // optional
  public @org.apache.thrift.annotation.Nullable TCaseExpr case_expr; // optional
  public @org.apache.thrift.annotation.Nullable TDateLiteral date_literal; // optional
  public @org.apache.thrift.annotation.Nullable TFloatLiteral float_literal; // optional
  public @org.apache.thrift.annotation.Nullable TIntLiteral int_literal; // optional
  public @org.apache.thrift.annotation.Nullable TInPredicate in_predicate; // optional
  public @org.apache.thrift.annotation.Nullable TIsNullPredicate is_null_pred; // optional
  public @org.apache.thrift.annotation.Nullable TLikePredicate like_pred; // optional
  public @org.apache.thrift.annotation.Nullable TLiteralPredicate literal_pred; // optional
  public @org.apache.thrift.annotation.Nullable TSlotRef slot_ref; // optional
  public @org.apache.thrift.annotation.Nullable TStringLiteral string_literal; // optional
  public @org.apache.thrift.annotation.Nullable TTupleIsNullPredicate tuple_is_null_pred; // optional
  public @org.apache.thrift.annotation.Nullable TInfoFunc info_func; // optional
  public @org.apache.thrift.annotation.Nullable TDecimalLiteral decimal_literal; // optional
  public int output_scale; // required
  public @org.apache.thrift.annotation.Nullable TFunctionCallExpr fn_call_expr; // optional
  public @org.apache.thrift.annotation.Nullable TLargeIntLiteral large_int_literal; // optional
  public int output_column; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TColumnType output_type; // optional
  /**
   * 
   * @see io.datafibre.fibre.thrift.TExprOpcode
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExprOpcode vector_opcode; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TFunction fn; // optional
  public int vararg_start_idx; // optional
  /**
   * 
   * @see io.datafibre.fibre.thrift.TPrimitiveType
   */
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPrimitiveType child_type; // optional
  public @org.apache.thrift.annotation.Nullable TPlaceHolder vslot_ref; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> used_subfield_names; // optional
  public @org.apache.thrift.annotation.Nullable TBinaryLiteral binary_literal; // optional
  public boolean copy_flag; // optional
  public boolean check_is_out_of_bounds; // optional
  public boolean use_vectorized; // optional
  public boolean has_nullable_child; // optional
  public boolean is_nullable; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTypeDesc child_type_desc; // optional
  public boolean is_monotonic; // optional
  public @org.apache.thrift.annotation.Nullable TDictQueryExpr dict_query_expr; // optional
  public @org.apache.thrift.annotation.Nullable TDictionaryGetExpr dictionary_get_expr; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TExprNodeType
     */
    NODE_TYPE((short)1, "node_type"),
    TYPE((short)2, "type"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TExprOpcode
     */
    OPCODE((short)3, "opcode"),
    NUM_CHILDREN((short)4, "num_children"),
    AGG_EXPR((short)5, "agg_expr"),
    BOOL_LITERAL((short)6, "bool_literal"),
    CASE_EXPR((short)7, "case_expr"),
    DATE_LITERAL((short)8, "date_literal"),
    FLOAT_LITERAL((short)9, "float_literal"),
    INT_LITERAL((short)10, "int_literal"),
    IN_PREDICATE((short)11, "in_predicate"),
    IS_NULL_PRED((short)12, "is_null_pred"),
    LIKE_PRED((short)13, "like_pred"),
    LITERAL_PRED((short)14, "literal_pred"),
    SLOT_REF((short)15, "slot_ref"),
    STRING_LITERAL((short)16, "string_literal"),
    TUPLE_IS_NULL_PRED((short)17, "tuple_is_null_pred"),
    INFO_FUNC((short)18, "info_func"),
    DECIMAL_LITERAL((short)19, "decimal_literal"),
    OUTPUT_SCALE((short)20, "output_scale"),
    FN_CALL_EXPR((short)21, "fn_call_expr"),
    LARGE_INT_LITERAL((short)22, "large_int_literal"),
    OUTPUT_COLUMN((short)23, "output_column"),
    OUTPUT_TYPE((short)24, "output_type"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TExprOpcode
     */
    VECTOR_OPCODE((short)25, "vector_opcode"),
    FN((short)26, "fn"),
    VARARG_START_IDX((short)27, "vararg_start_idx"),
    /**
     * 
     * @see io.datafibre.fibre.thrift.TPrimitiveType
     */
    CHILD_TYPE((short)28, "child_type"),
    VSLOT_REF((short)29, "vslot_ref"),
    USED_SUBFIELD_NAMES((short)30, "used_subfield_names"),
    BINARY_LITERAL((short)31, "binary_literal"),
    COPY_FLAG((short)32, "copy_flag"),
    CHECK_IS_OUT_OF_BOUNDS((short)35, "check_is_out_of_bounds"),
    USE_VECTORIZED((short)50, "use_vectorized"),
    HAS_NULLABLE_CHILD((short)51, "has_nullable_child"),
    IS_NULLABLE((short)52, "is_nullable"),
    CHILD_TYPE_DESC((short)53, "child_type_desc"),
    IS_MONOTONIC((short)54, "is_monotonic"),
    DICT_QUERY_EXPR((short)55, "dict_query_expr"),
    DICTIONARY_GET_EXPR((short)56, "dictionary_get_expr");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_TYPE
          return NODE_TYPE;
        case 2: // TYPE
          return TYPE;
        case 3: // OPCODE
          return OPCODE;
        case 4: // NUM_CHILDREN
          return NUM_CHILDREN;
        case 5: // AGG_EXPR
          return AGG_EXPR;
        case 6: // BOOL_LITERAL
          return BOOL_LITERAL;
        case 7: // CASE_EXPR
          return CASE_EXPR;
        case 8: // DATE_LITERAL
          return DATE_LITERAL;
        case 9: // FLOAT_LITERAL
          return FLOAT_LITERAL;
        case 10: // INT_LITERAL
          return INT_LITERAL;
        case 11: // IN_PREDICATE
          return IN_PREDICATE;
        case 12: // IS_NULL_PRED
          return IS_NULL_PRED;
        case 13: // LIKE_PRED
          return LIKE_PRED;
        case 14: // LITERAL_PRED
          return LITERAL_PRED;
        case 15: // SLOT_REF
          return SLOT_REF;
        case 16: // STRING_LITERAL
          return STRING_LITERAL;
        case 17: // TUPLE_IS_NULL_PRED
          return TUPLE_IS_NULL_PRED;
        case 18: // INFO_FUNC
          return INFO_FUNC;
        case 19: // DECIMAL_LITERAL
          return DECIMAL_LITERAL;
        case 20: // OUTPUT_SCALE
          return OUTPUT_SCALE;
        case 21: // FN_CALL_EXPR
          return FN_CALL_EXPR;
        case 22: // LARGE_INT_LITERAL
          return LARGE_INT_LITERAL;
        case 23: // OUTPUT_COLUMN
          return OUTPUT_COLUMN;
        case 24: // OUTPUT_TYPE
          return OUTPUT_TYPE;
        case 25: // VECTOR_OPCODE
          return VECTOR_OPCODE;
        case 26: // FN
          return FN;
        case 27: // VARARG_START_IDX
          return VARARG_START_IDX;
        case 28: // CHILD_TYPE
          return CHILD_TYPE;
        case 29: // VSLOT_REF
          return VSLOT_REF;
        case 30: // USED_SUBFIELD_NAMES
          return USED_SUBFIELD_NAMES;
        case 31: // BINARY_LITERAL
          return BINARY_LITERAL;
        case 32: // COPY_FLAG
          return COPY_FLAG;
        case 35: // CHECK_IS_OUT_OF_BOUNDS
          return CHECK_IS_OUT_OF_BOUNDS;
        case 50: // USE_VECTORIZED
          return USE_VECTORIZED;
        case 51: // HAS_NULLABLE_CHILD
          return HAS_NULLABLE_CHILD;
        case 52: // IS_NULLABLE
          return IS_NULLABLE;
        case 53: // CHILD_TYPE_DESC
          return CHILD_TYPE_DESC;
        case 54: // IS_MONOTONIC
          return IS_MONOTONIC;
        case 55: // DICT_QUERY_EXPR
          return DICT_QUERY_EXPR;
        case 56: // DICTIONARY_GET_EXPR
          return DICTIONARY_GET_EXPR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_CHILDREN_ISSET_ID = 0;
  private static final int __OUTPUT_SCALE_ISSET_ID = 1;
  private static final int __OUTPUT_COLUMN_ISSET_ID = 2;
  private static final int __VARARG_START_IDX_ISSET_ID = 3;
  private static final int __COPY_FLAG_ISSET_ID = 4;
  private static final int __CHECK_IS_OUT_OF_BOUNDS_ISSET_ID = 5;
  private static final int __USE_VECTORIZED_ISSET_ID = 6;
  private static final int __HAS_NULLABLE_CHILD_ISSET_ID = 7;
  private static final int __IS_NULLABLE_ISSET_ID = 8;
  private static final int __IS_MONOTONIC_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OPCODE,_Fields.AGG_EXPR,_Fields.BOOL_LITERAL,_Fields.CASE_EXPR,_Fields.DATE_LITERAL,_Fields.FLOAT_LITERAL,_Fields.INT_LITERAL,_Fields.IN_PREDICATE,_Fields.IS_NULL_PRED,_Fields.LIKE_PRED,_Fields.LITERAL_PRED,_Fields.SLOT_REF,_Fields.STRING_LITERAL,_Fields.TUPLE_IS_NULL_PRED,_Fields.INFO_FUNC,_Fields.DECIMAL_LITERAL,_Fields.FN_CALL_EXPR,_Fields.LARGE_INT_LITERAL,_Fields.OUTPUT_COLUMN,_Fields.OUTPUT_TYPE,_Fields.VECTOR_OPCODE,_Fields.FN,_Fields.VARARG_START_IDX,_Fields.CHILD_TYPE,_Fields.VSLOT_REF,_Fields.USED_SUBFIELD_NAMES,_Fields.BINARY_LITERAL,_Fields.COPY_FLAG,_Fields.CHECK_IS_OUT_OF_BOUNDS,_Fields.USE_VECTORIZED,_Fields.HAS_NULLABLE_CHILD,_Fields.IS_NULLABLE,_Fields.CHILD_TYPE_DESC,_Fields.IS_MONOTONIC,_Fields.DICT_QUERY_EXPR,_Fields.DICTIONARY_GET_EXPR};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("node_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TExprNodeType.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TTypeDesc.class)));
    tmpMap.put(_Fields.OPCODE, new org.apache.thrift.meta_data.FieldMetaData("opcode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TExprOpcode.class)));
    tmpMap.put(_Fields.NUM_CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("num_children", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AGG_EXPR, new org.apache.thrift.meta_data.FieldMetaData("agg_expr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAggregateExpr.class)));
    tmpMap.put(_Fields.BOOL_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("bool_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBoolLiteral.class)));
    tmpMap.put(_Fields.CASE_EXPR, new org.apache.thrift.meta_data.FieldMetaData("case_expr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCaseExpr.class)));
    tmpMap.put(_Fields.DATE_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("date_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDateLiteral.class)));
    tmpMap.put(_Fields.FLOAT_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("float_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFloatLiteral.class)));
    tmpMap.put(_Fields.INT_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("int_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIntLiteral.class)));
    tmpMap.put(_Fields.IN_PREDICATE, new org.apache.thrift.meta_data.FieldMetaData("in_predicate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInPredicate.class)));
    tmpMap.put(_Fields.IS_NULL_PRED, new org.apache.thrift.meta_data.FieldMetaData("is_null_pred", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIsNullPredicate.class)));
    tmpMap.put(_Fields.LIKE_PRED, new org.apache.thrift.meta_data.FieldMetaData("like_pred", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLikePredicate.class)));
    tmpMap.put(_Fields.LITERAL_PRED, new org.apache.thrift.meta_data.FieldMetaData("literal_pred", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLiteralPredicate.class)));
    tmpMap.put(_Fields.SLOT_REF, new org.apache.thrift.meta_data.FieldMetaData("slot_ref", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSlotRef.class)));
    tmpMap.put(_Fields.STRING_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("string_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStringLiteral.class)));
    tmpMap.put(_Fields.TUPLE_IS_NULL_PRED, new org.apache.thrift.meta_data.FieldMetaData("tuple_is_null_pred", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTupleIsNullPredicate.class)));
    tmpMap.put(_Fields.INFO_FUNC, new org.apache.thrift.meta_data.FieldMetaData("info_func", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInfoFunc.class)));
    tmpMap.put(_Fields.DECIMAL_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("decimal_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDecimalLiteral.class)));
    tmpMap.put(_Fields.OUTPUT_SCALE, new org.apache.thrift.meta_data.FieldMetaData("output_scale", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FN_CALL_EXPR, new org.apache.thrift.meta_data.FieldMetaData("fn_call_expr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFunctionCallExpr.class)));
    tmpMap.put(_Fields.LARGE_INT_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("large_int_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLargeIntLiteral.class)));
    tmpMap.put(_Fields.OUTPUT_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("output_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OUTPUT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("output_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TColumnType.class)));
    tmpMap.put(_Fields.VECTOR_OPCODE, new org.apache.thrift.meta_data.FieldMetaData("vector_opcode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TExprOpcode.class)));
    tmpMap.put(_Fields.FN, new org.apache.thrift.meta_data.FieldMetaData("fn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TFunction.class)));
    tmpMap.put(_Fields.VARARG_START_IDX, new org.apache.thrift.meta_data.FieldMetaData("vararg_start_idx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHILD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("child_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TPrimitiveType.class)));
    tmpMap.put(_Fields.VSLOT_REF, new org.apache.thrift.meta_data.FieldMetaData("vslot_ref", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlaceHolder.class)));
    tmpMap.put(_Fields.USED_SUBFIELD_NAMES, new org.apache.thrift.meta_data.FieldMetaData("used_subfield_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BINARY_LITERAL, new org.apache.thrift.meta_data.FieldMetaData("binary_literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBinaryLiteral.class)));
    tmpMap.put(_Fields.COPY_FLAG, new org.apache.thrift.meta_data.FieldMetaData("copy_flag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECK_IS_OUT_OF_BOUNDS, new org.apache.thrift.meta_data.FieldMetaData("check_is_out_of_bounds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USE_VECTORIZED, new org.apache.thrift.meta_data.FieldMetaData("use_vectorized", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_NULLABLE_CHILD, new org.apache.thrift.meta_data.FieldMetaData("has_nullable_child", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_NULLABLE, new org.apache.thrift.meta_data.FieldMetaData("is_nullable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHILD_TYPE_DESC, new org.apache.thrift.meta_data.FieldMetaData("child_type_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TTypeDesc.class)));
    tmpMap.put(_Fields.IS_MONOTONIC, new org.apache.thrift.meta_data.FieldMetaData("is_monotonic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DICT_QUERY_EXPR, new org.apache.thrift.meta_data.FieldMetaData("dict_query_expr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDictQueryExpr.class)));
    tmpMap.put(_Fields.DICTIONARY_GET_EXPR, new org.apache.thrift.meta_data.FieldMetaData("dictionary_get_expr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDictionaryGetExpr.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExprNode.class, metaDataMap);
  }

  public TExprNode() {
  }

  public TExprNode(
    TExprNodeType node_type,
    io.datafibre.fibre.thrift.TTypeDesc type,
    int num_children,
    int output_scale)
  {
    this();
    this.node_type = node_type;
    this.type = type;
    this.num_children = num_children;
    setNum_childrenIsSet(true);
    this.output_scale = output_scale;
    setOutput_scaleIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExprNode(TExprNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNode_type()) {
      this.node_type = other.node_type;
    }
    if (other.isSetType()) {
      this.type = new io.datafibre.fibre.thrift.TTypeDesc(other.type);
    }
    if (other.isSetOpcode()) {
      this.opcode = other.opcode;
    }
    this.num_children = other.num_children;
    if (other.isSetAgg_expr()) {
      this.agg_expr = new TAggregateExpr(other.agg_expr);
    }
    if (other.isSetBool_literal()) {
      this.bool_literal = new TBoolLiteral(other.bool_literal);
    }
    if (other.isSetCase_expr()) {
      this.case_expr = new TCaseExpr(other.case_expr);
    }
    if (other.isSetDate_literal()) {
      this.date_literal = new TDateLiteral(other.date_literal);
    }
    if (other.isSetFloat_literal()) {
      this.float_literal = new TFloatLiteral(other.float_literal);
    }
    if (other.isSetInt_literal()) {
      this.int_literal = new TIntLiteral(other.int_literal);
    }
    if (other.isSetIn_predicate()) {
      this.in_predicate = new TInPredicate(other.in_predicate);
    }
    if (other.isSetIs_null_pred()) {
      this.is_null_pred = new TIsNullPredicate(other.is_null_pred);
    }
    if (other.isSetLike_pred()) {
      this.like_pred = new TLikePredicate(other.like_pred);
    }
    if (other.isSetLiteral_pred()) {
      this.literal_pred = new TLiteralPredicate(other.literal_pred);
    }
    if (other.isSetSlot_ref()) {
      this.slot_ref = new TSlotRef(other.slot_ref);
    }
    if (other.isSetString_literal()) {
      this.string_literal = new TStringLiteral(other.string_literal);
    }
    if (other.isSetTuple_is_null_pred()) {
      this.tuple_is_null_pred = new TTupleIsNullPredicate(other.tuple_is_null_pred);
    }
    if (other.isSetInfo_func()) {
      this.info_func = new TInfoFunc(other.info_func);
    }
    if (other.isSetDecimal_literal()) {
      this.decimal_literal = new TDecimalLiteral(other.decimal_literal);
    }
    this.output_scale = other.output_scale;
    if (other.isSetFn_call_expr()) {
      this.fn_call_expr = new TFunctionCallExpr(other.fn_call_expr);
    }
    if (other.isSetLarge_int_literal()) {
      this.large_int_literal = new TLargeIntLiteral(other.large_int_literal);
    }
    this.output_column = other.output_column;
    if (other.isSetOutput_type()) {
      this.output_type = new io.datafibre.fibre.thrift.TColumnType(other.output_type);
    }
    if (other.isSetVector_opcode()) {
      this.vector_opcode = other.vector_opcode;
    }
    if (other.isSetFn()) {
      this.fn = new io.datafibre.fibre.thrift.TFunction(other.fn);
    }
    this.vararg_start_idx = other.vararg_start_idx;
    if (other.isSetChild_type()) {
      this.child_type = other.child_type;
    }
    if (other.isSetVslot_ref()) {
      this.vslot_ref = new TPlaceHolder(other.vslot_ref);
    }
    if (other.isSetUsed_subfield_names()) {
      java.util.List<java.lang.String> __this__used_subfield_names = new java.util.ArrayList<java.lang.String>(other.used_subfield_names);
      this.used_subfield_names = __this__used_subfield_names;
    }
    if (other.isSetBinary_literal()) {
      this.binary_literal = new TBinaryLiteral(other.binary_literal);
    }
    this.copy_flag = other.copy_flag;
    this.check_is_out_of_bounds = other.check_is_out_of_bounds;
    this.use_vectorized = other.use_vectorized;
    this.has_nullable_child = other.has_nullable_child;
    this.is_nullable = other.is_nullable;
    if (other.isSetChild_type_desc()) {
      this.child_type_desc = new io.datafibre.fibre.thrift.TTypeDesc(other.child_type_desc);
    }
    this.is_monotonic = other.is_monotonic;
    if (other.isSetDict_query_expr()) {
      this.dict_query_expr = new TDictQueryExpr(other.dict_query_expr);
    }
    if (other.isSetDictionary_get_expr()) {
      this.dictionary_get_expr = new TDictionaryGetExpr(other.dictionary_get_expr);
    }
  }

  @Override
  public TExprNode deepCopy() {
    return new TExprNode(this);
  }

  @Override
  public void clear() {
    this.node_type = null;
    this.type = null;
    this.opcode = null;
    setNum_childrenIsSet(false);
    this.num_children = 0;
    this.agg_expr = null;
    this.bool_literal = null;
    this.case_expr = null;
    this.date_literal = null;
    this.float_literal = null;
    this.int_literal = null;
    this.in_predicate = null;
    this.is_null_pred = null;
    this.like_pred = null;
    this.literal_pred = null;
    this.slot_ref = null;
    this.string_literal = null;
    this.tuple_is_null_pred = null;
    this.info_func = null;
    this.decimal_literal = null;
    setOutput_scaleIsSet(false);
    this.output_scale = 0;
    this.fn_call_expr = null;
    this.large_int_literal = null;
    setOutput_columnIsSet(false);
    this.output_column = 0;
    this.output_type = null;
    this.vector_opcode = null;
    this.fn = null;
    setVararg_start_idxIsSet(false);
    this.vararg_start_idx = 0;
    this.child_type = null;
    this.vslot_ref = null;
    this.used_subfield_names = null;
    this.binary_literal = null;
    setCopy_flagIsSet(false);
    this.copy_flag = false;
    setCheck_is_out_of_boundsIsSet(false);
    this.check_is_out_of_bounds = false;
    setUse_vectorizedIsSet(false);
    this.use_vectorized = false;
    setHas_nullable_childIsSet(false);
    this.has_nullable_child = false;
    setIs_nullableIsSet(false);
    this.is_nullable = false;
    this.child_type_desc = null;
    setIs_monotonicIsSet(false);
    this.is_monotonic = false;
    this.dict_query_expr = null;
    this.dictionary_get_expr = null;
  }

  /**
   * 
   * @see TExprNodeType
   */
  @org.apache.thrift.annotation.Nullable
  public TExprNodeType getNode_type() {
    return this.node_type;
  }

  /**
   * 
   * @see TExprNodeType
   */
  public TExprNode setNode_type(@org.apache.thrift.annotation.Nullable TExprNodeType node_type) {
    this.node_type = node_type;
    return this;
  }

  public void unsetNode_type() {
    this.node_type = null;
  }

  /** Returns true if field node_type is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_type() {
    return this.node_type != null;
  }

  public void setNode_typeIsSet(boolean value) {
    if (!value) {
      this.node_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TTypeDesc getType() {
    return this.type;
  }

  public TExprNode setType(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTypeDesc type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TExprOpcode
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TExprOpcode getOpcode() {
    return this.opcode;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TExprOpcode
   */
  public TExprNode setOpcode(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExprOpcode opcode) {
    this.opcode = opcode;
    return this;
  }

  public void unsetOpcode() {
    this.opcode = null;
  }

  /** Returns true if field opcode is set (has been assigned a value) and false otherwise */
  public boolean isSetOpcode() {
    return this.opcode != null;
  }

  public void setOpcodeIsSet(boolean value) {
    if (!value) {
      this.opcode = null;
    }
  }

  public int getNum_children() {
    return this.num_children;
  }

  public TExprNode setNum_children(int num_children) {
    this.num_children = num_children;
    setNum_childrenIsSet(true);
    return this;
  }

  public void unsetNum_children() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  /** Returns true if field num_children is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_children() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  public void setNum_childrenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TAggregateExpr getAgg_expr() {
    return this.agg_expr;
  }

  public TExprNode setAgg_expr(@org.apache.thrift.annotation.Nullable TAggregateExpr agg_expr) {
    this.agg_expr = agg_expr;
    return this;
  }

  public void unsetAgg_expr() {
    this.agg_expr = null;
  }

  /** Returns true if field agg_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetAgg_expr() {
    return this.agg_expr != null;
  }

  public void setAgg_exprIsSet(boolean value) {
    if (!value) {
      this.agg_expr = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TBoolLiteral getBool_literal() {
    return this.bool_literal;
  }

  public TExprNode setBool_literal(@org.apache.thrift.annotation.Nullable TBoolLiteral bool_literal) {
    this.bool_literal = bool_literal;
    return this;
  }

  public void unsetBool_literal() {
    this.bool_literal = null;
  }

  /** Returns true if field bool_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetBool_literal() {
    return this.bool_literal != null;
  }

  public void setBool_literalIsSet(boolean value) {
    if (!value) {
      this.bool_literal = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TCaseExpr getCase_expr() {
    return this.case_expr;
  }

  public TExprNode setCase_expr(@org.apache.thrift.annotation.Nullable TCaseExpr case_expr) {
    this.case_expr = case_expr;
    return this;
  }

  public void unsetCase_expr() {
    this.case_expr = null;
  }

  /** Returns true if field case_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetCase_expr() {
    return this.case_expr != null;
  }

  public void setCase_exprIsSet(boolean value) {
    if (!value) {
      this.case_expr = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDateLiteral getDate_literal() {
    return this.date_literal;
  }

  public TExprNode setDate_literal(@org.apache.thrift.annotation.Nullable TDateLiteral date_literal) {
    this.date_literal = date_literal;
    return this;
  }

  public void unsetDate_literal() {
    this.date_literal = null;
  }

  /** Returns true if field date_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetDate_literal() {
    return this.date_literal != null;
  }

  public void setDate_literalIsSet(boolean value) {
    if (!value) {
      this.date_literal = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TFloatLiteral getFloat_literal() {
    return this.float_literal;
  }

  public TExprNode setFloat_literal(@org.apache.thrift.annotation.Nullable TFloatLiteral float_literal) {
    this.float_literal = float_literal;
    return this;
  }

  public void unsetFloat_literal() {
    this.float_literal = null;
  }

  /** Returns true if field float_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetFloat_literal() {
    return this.float_literal != null;
  }

  public void setFloat_literalIsSet(boolean value) {
    if (!value) {
      this.float_literal = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TIntLiteral getInt_literal() {
    return this.int_literal;
  }

  public TExprNode setInt_literal(@org.apache.thrift.annotation.Nullable TIntLiteral int_literal) {
    this.int_literal = int_literal;
    return this;
  }

  public void unsetInt_literal() {
    this.int_literal = null;
  }

  /** Returns true if field int_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetInt_literal() {
    return this.int_literal != null;
  }

  public void setInt_literalIsSet(boolean value) {
    if (!value) {
      this.int_literal = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TInPredicate getIn_predicate() {
    return this.in_predicate;
  }

  public TExprNode setIn_predicate(@org.apache.thrift.annotation.Nullable TInPredicate in_predicate) {
    this.in_predicate = in_predicate;
    return this;
  }

  public void unsetIn_predicate() {
    this.in_predicate = null;
  }

  /** Returns true if field in_predicate is set (has been assigned a value) and false otherwise */
  public boolean isSetIn_predicate() {
    return this.in_predicate != null;
  }

  public void setIn_predicateIsSet(boolean value) {
    if (!value) {
      this.in_predicate = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TIsNullPredicate getIs_null_pred() {
    return this.is_null_pred;
  }

  public TExprNode setIs_null_pred(@org.apache.thrift.annotation.Nullable TIsNullPredicate is_null_pred) {
    this.is_null_pred = is_null_pred;
    return this;
  }

  public void unsetIs_null_pred() {
    this.is_null_pred = null;
  }

  /** Returns true if field is_null_pred is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_null_pred() {
    return this.is_null_pred != null;
  }

  public void setIs_null_predIsSet(boolean value) {
    if (!value) {
      this.is_null_pred = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TLikePredicate getLike_pred() {
    return this.like_pred;
  }

  public TExprNode setLike_pred(@org.apache.thrift.annotation.Nullable TLikePredicate like_pred) {
    this.like_pred = like_pred;
    return this;
  }

  public void unsetLike_pred() {
    this.like_pred = null;
  }

  /** Returns true if field like_pred is set (has been assigned a value) and false otherwise */
  public boolean isSetLike_pred() {
    return this.like_pred != null;
  }

  public void setLike_predIsSet(boolean value) {
    if (!value) {
      this.like_pred = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TLiteralPredicate getLiteral_pred() {
    return this.literal_pred;
  }

  public TExprNode setLiteral_pred(@org.apache.thrift.annotation.Nullable TLiteralPredicate literal_pred) {
    this.literal_pred = literal_pred;
    return this;
  }

  public void unsetLiteral_pred() {
    this.literal_pred = null;
  }

  /** Returns true if field literal_pred is set (has been assigned a value) and false otherwise */
  public boolean isSetLiteral_pred() {
    return this.literal_pred != null;
  }

  public void setLiteral_predIsSet(boolean value) {
    if (!value) {
      this.literal_pred = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TSlotRef getSlot_ref() {
    return this.slot_ref;
  }

  public TExprNode setSlot_ref(@org.apache.thrift.annotation.Nullable TSlotRef slot_ref) {
    this.slot_ref = slot_ref;
    return this;
  }

  public void unsetSlot_ref() {
    this.slot_ref = null;
  }

  /** Returns true if field slot_ref is set (has been assigned a value) and false otherwise */
  public boolean isSetSlot_ref() {
    return this.slot_ref != null;
  }

  public void setSlot_refIsSet(boolean value) {
    if (!value) {
      this.slot_ref = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TStringLiteral getString_literal() {
    return this.string_literal;
  }

  public TExprNode setString_literal(@org.apache.thrift.annotation.Nullable TStringLiteral string_literal) {
    this.string_literal = string_literal;
    return this;
  }

  public void unsetString_literal() {
    this.string_literal = null;
  }

  /** Returns true if field string_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetString_literal() {
    return this.string_literal != null;
  }

  public void setString_literalIsSet(boolean value) {
    if (!value) {
      this.string_literal = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TTupleIsNullPredicate getTuple_is_null_pred() {
    return this.tuple_is_null_pred;
  }

  public TExprNode setTuple_is_null_pred(@org.apache.thrift.annotation.Nullable TTupleIsNullPredicate tuple_is_null_pred) {
    this.tuple_is_null_pred = tuple_is_null_pred;
    return this;
  }

  public void unsetTuple_is_null_pred() {
    this.tuple_is_null_pred = null;
  }

  /** Returns true if field tuple_is_null_pred is set (has been assigned a value) and false otherwise */
  public boolean isSetTuple_is_null_pred() {
    return this.tuple_is_null_pred != null;
  }

  public void setTuple_is_null_predIsSet(boolean value) {
    if (!value) {
      this.tuple_is_null_pred = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TInfoFunc getInfo_func() {
    return this.info_func;
  }

  public TExprNode setInfo_func(@org.apache.thrift.annotation.Nullable TInfoFunc info_func) {
    this.info_func = info_func;
    return this;
  }

  public void unsetInfo_func() {
    this.info_func = null;
  }

  /** Returns true if field info_func is set (has been assigned a value) and false otherwise */
  public boolean isSetInfo_func() {
    return this.info_func != null;
  }

  public void setInfo_funcIsSet(boolean value) {
    if (!value) {
      this.info_func = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDecimalLiteral getDecimal_literal() {
    return this.decimal_literal;
  }

  public TExprNode setDecimal_literal(@org.apache.thrift.annotation.Nullable TDecimalLiteral decimal_literal) {
    this.decimal_literal = decimal_literal;
    return this;
  }

  public void unsetDecimal_literal() {
    this.decimal_literal = null;
  }

  /** Returns true if field decimal_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetDecimal_literal() {
    return this.decimal_literal != null;
  }

  public void setDecimal_literalIsSet(boolean value) {
    if (!value) {
      this.decimal_literal = null;
    }
  }

  public int getOutput_scale() {
    return this.output_scale;
  }

  public TExprNode setOutput_scale(int output_scale) {
    this.output_scale = output_scale;
    setOutput_scaleIsSet(true);
    return this;
  }

  public void unsetOutput_scale() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_SCALE_ISSET_ID);
  }

  /** Returns true if field output_scale is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_scale() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTPUT_SCALE_ISSET_ID);
  }

  public void setOutput_scaleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTPUT_SCALE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TFunctionCallExpr getFn_call_expr() {
    return this.fn_call_expr;
  }

  public TExprNode setFn_call_expr(@org.apache.thrift.annotation.Nullable TFunctionCallExpr fn_call_expr) {
    this.fn_call_expr = fn_call_expr;
    return this;
  }

  public void unsetFn_call_expr() {
    this.fn_call_expr = null;
  }

  /** Returns true if field fn_call_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetFn_call_expr() {
    return this.fn_call_expr != null;
  }

  public void setFn_call_exprIsSet(boolean value) {
    if (!value) {
      this.fn_call_expr = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TLargeIntLiteral getLarge_int_literal() {
    return this.large_int_literal;
  }

  public TExprNode setLarge_int_literal(@org.apache.thrift.annotation.Nullable TLargeIntLiteral large_int_literal) {
    this.large_int_literal = large_int_literal;
    return this;
  }

  public void unsetLarge_int_literal() {
    this.large_int_literal = null;
  }

  /** Returns true if field large_int_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetLarge_int_literal() {
    return this.large_int_literal != null;
  }

  public void setLarge_int_literalIsSet(boolean value) {
    if (!value) {
      this.large_int_literal = null;
    }
  }

  public int getOutput_column() {
    return this.output_column;
  }

  public TExprNode setOutput_column(int output_column) {
    this.output_column = output_column;
    setOutput_columnIsSet(true);
    return this;
  }

  public void unsetOutput_column() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_COLUMN_ISSET_ID);
  }

  /** Returns true if field output_column is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_column() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTPUT_COLUMN_ISSET_ID);
  }

  public void setOutput_columnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTPUT_COLUMN_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TColumnType getOutput_type() {
    return this.output_type;
  }

  public TExprNode setOutput_type(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TColumnType output_type) {
    this.output_type = output_type;
    return this;
  }

  public void unsetOutput_type() {
    this.output_type = null;
  }

  /** Returns true if field output_type is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_type() {
    return this.output_type != null;
  }

  public void setOutput_typeIsSet(boolean value) {
    if (!value) {
      this.output_type = null;
    }
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TExprOpcode
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TExprOpcode getVector_opcode() {
    return this.vector_opcode;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TExprOpcode
   */
  public TExprNode setVector_opcode(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExprOpcode vector_opcode) {
    this.vector_opcode = vector_opcode;
    return this;
  }

  public void unsetVector_opcode() {
    this.vector_opcode = null;
  }

  /** Returns true if field vector_opcode is set (has been assigned a value) and false otherwise */
  public boolean isSetVector_opcode() {
    return this.vector_opcode != null;
  }

  public void setVector_opcodeIsSet(boolean value) {
    if (!value) {
      this.vector_opcode = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TFunction getFn() {
    return this.fn;
  }

  public TExprNode setFn(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TFunction fn) {
    this.fn = fn;
    return this;
  }

  public void unsetFn() {
    this.fn = null;
  }

  /** Returns true if field fn is set (has been assigned a value) and false otherwise */
  public boolean isSetFn() {
    return this.fn != null;
  }

  public void setFnIsSet(boolean value) {
    if (!value) {
      this.fn = null;
    }
  }

  public int getVararg_start_idx() {
    return this.vararg_start_idx;
  }

  public TExprNode setVararg_start_idx(int vararg_start_idx) {
    this.vararg_start_idx = vararg_start_idx;
    setVararg_start_idxIsSet(true);
    return this;
  }

  public void unsetVararg_start_idx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VARARG_START_IDX_ISSET_ID);
  }

  /** Returns true if field vararg_start_idx is set (has been assigned a value) and false otherwise */
  public boolean isSetVararg_start_idx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VARARG_START_IDX_ISSET_ID);
  }

  public void setVararg_start_idxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VARARG_START_IDX_ISSET_ID, value);
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TPrimitiveType
   */
  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TPrimitiveType getChild_type() {
    return this.child_type;
  }

  /**
   * 
   * @see io.datafibre.fibre.thrift.TPrimitiveType
   */
  public TExprNode setChild_type(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPrimitiveType child_type) {
    this.child_type = child_type;
    return this;
  }

  public void unsetChild_type() {
    this.child_type = null;
  }

  /** Returns true if field child_type is set (has been assigned a value) and false otherwise */
  public boolean isSetChild_type() {
    return this.child_type != null;
  }

  public void setChild_typeIsSet(boolean value) {
    if (!value) {
      this.child_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TPlaceHolder getVslot_ref() {
    return this.vslot_ref;
  }

  public TExprNode setVslot_ref(@org.apache.thrift.annotation.Nullable TPlaceHolder vslot_ref) {
    this.vslot_ref = vslot_ref;
    return this;
  }

  public void unsetVslot_ref() {
    this.vslot_ref = null;
  }

  /** Returns true if field vslot_ref is set (has been assigned a value) and false otherwise */
  public boolean isSetVslot_ref() {
    return this.vslot_ref != null;
  }

  public void setVslot_refIsSet(boolean value) {
    if (!value) {
      this.vslot_ref = null;
    }
  }

  public int getUsed_subfield_namesSize() {
    return (this.used_subfield_names == null) ? 0 : this.used_subfield_names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getUsed_subfield_namesIterator() {
    return (this.used_subfield_names == null) ? null : this.used_subfield_names.iterator();
  }

  public void addToUsed_subfield_names(java.lang.String elem) {
    if (this.used_subfield_names == null) {
      this.used_subfield_names = new java.util.ArrayList<java.lang.String>();
    }
    this.used_subfield_names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getUsed_subfield_names() {
    return this.used_subfield_names;
  }

  public TExprNode setUsed_subfield_names(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> used_subfield_names) {
    this.used_subfield_names = used_subfield_names;
    return this;
  }

  public void unsetUsed_subfield_names() {
    this.used_subfield_names = null;
  }

  /** Returns true if field used_subfield_names is set (has been assigned a value) and false otherwise */
  public boolean isSetUsed_subfield_names() {
    return this.used_subfield_names != null;
  }

  public void setUsed_subfield_namesIsSet(boolean value) {
    if (!value) {
      this.used_subfield_names = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TBinaryLiteral getBinary_literal() {
    return this.binary_literal;
  }

  public TExprNode setBinary_literal(@org.apache.thrift.annotation.Nullable TBinaryLiteral binary_literal) {
    this.binary_literal = binary_literal;
    return this;
  }

  public void unsetBinary_literal() {
    this.binary_literal = null;
  }

  /** Returns true if field binary_literal is set (has been assigned a value) and false otherwise */
  public boolean isSetBinary_literal() {
    return this.binary_literal != null;
  }

  public void setBinary_literalIsSet(boolean value) {
    if (!value) {
      this.binary_literal = null;
    }
  }

  public boolean isCopy_flag() {
    return this.copy_flag;
  }

  public TExprNode setCopy_flag(boolean copy_flag) {
    this.copy_flag = copy_flag;
    setCopy_flagIsSet(true);
    return this;
  }

  public void unsetCopy_flag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COPY_FLAG_ISSET_ID);
  }

  /** Returns true if field copy_flag is set (has been assigned a value) and false otherwise */
  public boolean isSetCopy_flag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COPY_FLAG_ISSET_ID);
  }

  public void setCopy_flagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COPY_FLAG_ISSET_ID, value);
  }

  public boolean isCheck_is_out_of_bounds() {
    return this.check_is_out_of_bounds;
  }

  public TExprNode setCheck_is_out_of_bounds(boolean check_is_out_of_bounds) {
    this.check_is_out_of_bounds = check_is_out_of_bounds;
    setCheck_is_out_of_boundsIsSet(true);
    return this;
  }

  public void unsetCheck_is_out_of_bounds() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECK_IS_OUT_OF_BOUNDS_ISSET_ID);
  }

  /** Returns true if field check_is_out_of_bounds is set (has been assigned a value) and false otherwise */
  public boolean isSetCheck_is_out_of_bounds() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECK_IS_OUT_OF_BOUNDS_ISSET_ID);
  }

  public void setCheck_is_out_of_boundsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECK_IS_OUT_OF_BOUNDS_ISSET_ID, value);
  }

  public boolean isUse_vectorized() {
    return this.use_vectorized;
  }

  public TExprNode setUse_vectorized(boolean use_vectorized) {
    this.use_vectorized = use_vectorized;
    setUse_vectorizedIsSet(true);
    return this;
  }

  public void unsetUse_vectorized() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_VECTORIZED_ISSET_ID);
  }

  /** Returns true if field use_vectorized is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_vectorized() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_VECTORIZED_ISSET_ID);
  }

  public void setUse_vectorizedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_VECTORIZED_ISSET_ID, value);
  }

  public boolean isHas_nullable_child() {
    return this.has_nullable_child;
  }

  public TExprNode setHas_nullable_child(boolean has_nullable_child) {
    this.has_nullable_child = has_nullable_child;
    setHas_nullable_childIsSet(true);
    return this;
  }

  public void unsetHas_nullable_child() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HAS_NULLABLE_CHILD_ISSET_ID);
  }

  /** Returns true if field has_nullable_child is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_nullable_child() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HAS_NULLABLE_CHILD_ISSET_ID);
  }

  public void setHas_nullable_childIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HAS_NULLABLE_CHILD_ISSET_ID, value);
  }

  public boolean isIs_nullable() {
    return this.is_nullable;
  }

  public TExprNode setIs_nullable(boolean is_nullable) {
    this.is_nullable = is_nullable;
    setIs_nullableIsSet(true);
    return this;
  }

  public void unsetIs_nullable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_NULLABLE_ISSET_ID);
  }

  /** Returns true if field is_nullable is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_nullable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_NULLABLE_ISSET_ID);
  }

  public void setIs_nullableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_NULLABLE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TTypeDesc getChild_type_desc() {
    return this.child_type_desc;
  }

  public TExprNode setChild_type_desc(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTypeDesc child_type_desc) {
    this.child_type_desc = child_type_desc;
    return this;
  }

  public void unsetChild_type_desc() {
    this.child_type_desc = null;
  }

  /** Returns true if field child_type_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetChild_type_desc() {
    return this.child_type_desc != null;
  }

  public void setChild_type_descIsSet(boolean value) {
    if (!value) {
      this.child_type_desc = null;
    }
  }

  public boolean isIs_monotonic() {
    return this.is_monotonic;
  }

  public TExprNode setIs_monotonic(boolean is_monotonic) {
    this.is_monotonic = is_monotonic;
    setIs_monotonicIsSet(true);
    return this;
  }

  public void unsetIs_monotonic() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_MONOTONIC_ISSET_ID);
  }

  /** Returns true if field is_monotonic is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_monotonic() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_MONOTONIC_ISSET_ID);
  }

  public void setIs_monotonicIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_MONOTONIC_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TDictQueryExpr getDict_query_expr() {
    return this.dict_query_expr;
  }

  public TExprNode setDict_query_expr(@org.apache.thrift.annotation.Nullable TDictQueryExpr dict_query_expr) {
    this.dict_query_expr = dict_query_expr;
    return this;
  }

  public void unsetDict_query_expr() {
    this.dict_query_expr = null;
  }

  /** Returns true if field dict_query_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetDict_query_expr() {
    return this.dict_query_expr != null;
  }

  public void setDict_query_exprIsSet(boolean value) {
    if (!value) {
      this.dict_query_expr = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDictionaryGetExpr getDictionary_get_expr() {
    return this.dictionary_get_expr;
  }

  public TExprNode setDictionary_get_expr(@org.apache.thrift.annotation.Nullable TDictionaryGetExpr dictionary_get_expr) {
    this.dictionary_get_expr = dictionary_get_expr;
    return this;
  }

  public void unsetDictionary_get_expr() {
    this.dictionary_get_expr = null;
  }

  /** Returns true if field dictionary_get_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetDictionary_get_expr() {
    return this.dictionary_get_expr != null;
  }

  public void setDictionary_get_exprIsSet(boolean value) {
    if (!value) {
      this.dictionary_get_expr = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NODE_TYPE:
      if (value == null) {
        unsetNode_type();
      } else {
        setNode_type((TExprNodeType)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((io.datafibre.fibre.thrift.TTypeDesc)value);
      }
      break;

    case OPCODE:
      if (value == null) {
        unsetOpcode();
      } else {
        setOpcode((io.datafibre.fibre.thrift.TExprOpcode)value);
      }
      break;

    case NUM_CHILDREN:
      if (value == null) {
        unsetNum_children();
      } else {
        setNum_children((java.lang.Integer)value);
      }
      break;

    case AGG_EXPR:
      if (value == null) {
        unsetAgg_expr();
      } else {
        setAgg_expr((TAggregateExpr)value);
      }
      break;

    case BOOL_LITERAL:
      if (value == null) {
        unsetBool_literal();
      } else {
        setBool_literal((TBoolLiteral)value);
      }
      break;

    case CASE_EXPR:
      if (value == null) {
        unsetCase_expr();
      } else {
        setCase_expr((TCaseExpr)value);
      }
      break;

    case DATE_LITERAL:
      if (value == null) {
        unsetDate_literal();
      } else {
        setDate_literal((TDateLiteral)value);
      }
      break;

    case FLOAT_LITERAL:
      if (value == null) {
        unsetFloat_literal();
      } else {
        setFloat_literal((TFloatLiteral)value);
      }
      break;

    case INT_LITERAL:
      if (value == null) {
        unsetInt_literal();
      } else {
        setInt_literal((TIntLiteral)value);
      }
      break;

    case IN_PREDICATE:
      if (value == null) {
        unsetIn_predicate();
      } else {
        setIn_predicate((TInPredicate)value);
      }
      break;

    case IS_NULL_PRED:
      if (value == null) {
        unsetIs_null_pred();
      } else {
        setIs_null_pred((TIsNullPredicate)value);
      }
      break;

    case LIKE_PRED:
      if (value == null) {
        unsetLike_pred();
      } else {
        setLike_pred((TLikePredicate)value);
      }
      break;

    case LITERAL_PRED:
      if (value == null) {
        unsetLiteral_pred();
      } else {
        setLiteral_pred((TLiteralPredicate)value);
      }
      break;

    case SLOT_REF:
      if (value == null) {
        unsetSlot_ref();
      } else {
        setSlot_ref((TSlotRef)value);
      }
      break;

    case STRING_LITERAL:
      if (value == null) {
        unsetString_literal();
      } else {
        setString_literal((TStringLiteral)value);
      }
      break;

    case TUPLE_IS_NULL_PRED:
      if (value == null) {
        unsetTuple_is_null_pred();
      } else {
        setTuple_is_null_pred((TTupleIsNullPredicate)value);
      }
      break;

    case INFO_FUNC:
      if (value == null) {
        unsetInfo_func();
      } else {
        setInfo_func((TInfoFunc)value);
      }
      break;

    case DECIMAL_LITERAL:
      if (value == null) {
        unsetDecimal_literal();
      } else {
        setDecimal_literal((TDecimalLiteral)value);
      }
      break;

    case OUTPUT_SCALE:
      if (value == null) {
        unsetOutput_scale();
      } else {
        setOutput_scale((java.lang.Integer)value);
      }
      break;

    case FN_CALL_EXPR:
      if (value == null) {
        unsetFn_call_expr();
      } else {
        setFn_call_expr((TFunctionCallExpr)value);
      }
      break;

    case LARGE_INT_LITERAL:
      if (value == null) {
        unsetLarge_int_literal();
      } else {
        setLarge_int_literal((TLargeIntLiteral)value);
      }
      break;

    case OUTPUT_COLUMN:
      if (value == null) {
        unsetOutput_column();
      } else {
        setOutput_column((java.lang.Integer)value);
      }
      break;

    case OUTPUT_TYPE:
      if (value == null) {
        unsetOutput_type();
      } else {
        setOutput_type((io.datafibre.fibre.thrift.TColumnType)value);
      }
      break;

    case VECTOR_OPCODE:
      if (value == null) {
        unsetVector_opcode();
      } else {
        setVector_opcode((io.datafibre.fibre.thrift.TExprOpcode)value);
      }
      break;

    case FN:
      if (value == null) {
        unsetFn();
      } else {
        setFn((io.datafibre.fibre.thrift.TFunction)value);
      }
      break;

    case VARARG_START_IDX:
      if (value == null) {
        unsetVararg_start_idx();
      } else {
        setVararg_start_idx((java.lang.Integer)value);
      }
      break;

    case CHILD_TYPE:
      if (value == null) {
        unsetChild_type();
      } else {
        setChild_type((io.datafibre.fibre.thrift.TPrimitiveType)value);
      }
      break;

    case VSLOT_REF:
      if (value == null) {
        unsetVslot_ref();
      } else {
        setVslot_ref((TPlaceHolder)value);
      }
      break;

    case USED_SUBFIELD_NAMES:
      if (value == null) {
        unsetUsed_subfield_names();
      } else {
        setUsed_subfield_names((java.util.List<java.lang.String>)value);
      }
      break;

    case BINARY_LITERAL:
      if (value == null) {
        unsetBinary_literal();
      } else {
        setBinary_literal((TBinaryLiteral)value);
      }
      break;

    case COPY_FLAG:
      if (value == null) {
        unsetCopy_flag();
      } else {
        setCopy_flag((java.lang.Boolean)value);
      }
      break;

    case CHECK_IS_OUT_OF_BOUNDS:
      if (value == null) {
        unsetCheck_is_out_of_bounds();
      } else {
        setCheck_is_out_of_bounds((java.lang.Boolean)value);
      }
      break;

    case USE_VECTORIZED:
      if (value == null) {
        unsetUse_vectorized();
      } else {
        setUse_vectorized((java.lang.Boolean)value);
      }
      break;

    case HAS_NULLABLE_CHILD:
      if (value == null) {
        unsetHas_nullable_child();
      } else {
        setHas_nullable_child((java.lang.Boolean)value);
      }
      break;

    case IS_NULLABLE:
      if (value == null) {
        unsetIs_nullable();
      } else {
        setIs_nullable((java.lang.Boolean)value);
      }
      break;

    case CHILD_TYPE_DESC:
      if (value == null) {
        unsetChild_type_desc();
      } else {
        setChild_type_desc((io.datafibre.fibre.thrift.TTypeDesc)value);
      }
      break;

    case IS_MONOTONIC:
      if (value == null) {
        unsetIs_monotonic();
      } else {
        setIs_monotonic((java.lang.Boolean)value);
      }
      break;

    case DICT_QUERY_EXPR:
      if (value == null) {
        unsetDict_query_expr();
      } else {
        setDict_query_expr((TDictQueryExpr)value);
      }
      break;

    case DICTIONARY_GET_EXPR:
      if (value == null) {
        unsetDictionary_get_expr();
      } else {
        setDictionary_get_expr((TDictionaryGetExpr)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_TYPE:
      return getNode_type();

    case TYPE:
      return getType();

    case OPCODE:
      return getOpcode();

    case NUM_CHILDREN:
      return getNum_children();

    case AGG_EXPR:
      return getAgg_expr();

    case BOOL_LITERAL:
      return getBool_literal();

    case CASE_EXPR:
      return getCase_expr();

    case DATE_LITERAL:
      return getDate_literal();

    case FLOAT_LITERAL:
      return getFloat_literal();

    case INT_LITERAL:
      return getInt_literal();

    case IN_PREDICATE:
      return getIn_predicate();

    case IS_NULL_PRED:
      return getIs_null_pred();

    case LIKE_PRED:
      return getLike_pred();

    case LITERAL_PRED:
      return getLiteral_pred();

    case SLOT_REF:
      return getSlot_ref();

    case STRING_LITERAL:
      return getString_literal();

    case TUPLE_IS_NULL_PRED:
      return getTuple_is_null_pred();

    case INFO_FUNC:
      return getInfo_func();

    case DECIMAL_LITERAL:
      return getDecimal_literal();

    case OUTPUT_SCALE:
      return getOutput_scale();

    case FN_CALL_EXPR:
      return getFn_call_expr();

    case LARGE_INT_LITERAL:
      return getLarge_int_literal();

    case OUTPUT_COLUMN:
      return getOutput_column();

    case OUTPUT_TYPE:
      return getOutput_type();

    case VECTOR_OPCODE:
      return getVector_opcode();

    case FN:
      return getFn();

    case VARARG_START_IDX:
      return getVararg_start_idx();

    case CHILD_TYPE:
      return getChild_type();

    case VSLOT_REF:
      return getVslot_ref();

    case USED_SUBFIELD_NAMES:
      return getUsed_subfield_names();

    case BINARY_LITERAL:
      return getBinary_literal();

    case COPY_FLAG:
      return isCopy_flag();

    case CHECK_IS_OUT_OF_BOUNDS:
      return isCheck_is_out_of_bounds();

    case USE_VECTORIZED:
      return isUse_vectorized();

    case HAS_NULLABLE_CHILD:
      return isHas_nullable_child();

    case IS_NULLABLE:
      return isIs_nullable();

    case CHILD_TYPE_DESC:
      return getChild_type_desc();

    case IS_MONOTONIC:
      return isIs_monotonic();

    case DICT_QUERY_EXPR:
      return getDict_query_expr();

    case DICTIONARY_GET_EXPR:
      return getDictionary_get_expr();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NODE_TYPE:
      return isSetNode_type();
    case TYPE:
      return isSetType();
    case OPCODE:
      return isSetOpcode();
    case NUM_CHILDREN:
      return isSetNum_children();
    case AGG_EXPR:
      return isSetAgg_expr();
    case BOOL_LITERAL:
      return isSetBool_literal();
    case CASE_EXPR:
      return isSetCase_expr();
    case DATE_LITERAL:
      return isSetDate_literal();
    case FLOAT_LITERAL:
      return isSetFloat_literal();
    case INT_LITERAL:
      return isSetInt_literal();
    case IN_PREDICATE:
      return isSetIn_predicate();
    case IS_NULL_PRED:
      return isSetIs_null_pred();
    case LIKE_PRED:
      return isSetLike_pred();
    case LITERAL_PRED:
      return isSetLiteral_pred();
    case SLOT_REF:
      return isSetSlot_ref();
    case STRING_LITERAL:
      return isSetString_literal();
    case TUPLE_IS_NULL_PRED:
      return isSetTuple_is_null_pred();
    case INFO_FUNC:
      return isSetInfo_func();
    case DECIMAL_LITERAL:
      return isSetDecimal_literal();
    case OUTPUT_SCALE:
      return isSetOutput_scale();
    case FN_CALL_EXPR:
      return isSetFn_call_expr();
    case LARGE_INT_LITERAL:
      return isSetLarge_int_literal();
    case OUTPUT_COLUMN:
      return isSetOutput_column();
    case OUTPUT_TYPE:
      return isSetOutput_type();
    case VECTOR_OPCODE:
      return isSetVector_opcode();
    case FN:
      return isSetFn();
    case VARARG_START_IDX:
      return isSetVararg_start_idx();
    case CHILD_TYPE:
      return isSetChild_type();
    case VSLOT_REF:
      return isSetVslot_ref();
    case USED_SUBFIELD_NAMES:
      return isSetUsed_subfield_names();
    case BINARY_LITERAL:
      return isSetBinary_literal();
    case COPY_FLAG:
      return isSetCopy_flag();
    case CHECK_IS_OUT_OF_BOUNDS:
      return isSetCheck_is_out_of_bounds();
    case USE_VECTORIZED:
      return isSetUse_vectorized();
    case HAS_NULLABLE_CHILD:
      return isSetHas_nullable_child();
    case IS_NULLABLE:
      return isSetIs_nullable();
    case CHILD_TYPE_DESC:
      return isSetChild_type_desc();
    case IS_MONOTONIC:
      return isSetIs_monotonic();
    case DICT_QUERY_EXPR:
      return isSetDict_query_expr();
    case DICTIONARY_GET_EXPR:
      return isSetDictionary_get_expr();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TExprNode)
      return this.equals((TExprNode)that);
    return false;
  }

  public boolean equals(TExprNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_node_type = true && this.isSetNode_type();
    boolean that_present_node_type = true && that.isSetNode_type();
    if (this_present_node_type || that_present_node_type) {
      if (!(this_present_node_type && that_present_node_type))
        return false;
      if (!this.node_type.equals(that.node_type))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_opcode = true && this.isSetOpcode();
    boolean that_present_opcode = true && that.isSetOpcode();
    if (this_present_opcode || that_present_opcode) {
      if (!(this_present_opcode && that_present_opcode))
        return false;
      if (!this.opcode.equals(that.opcode))
        return false;
    }

    boolean this_present_num_children = true;
    boolean that_present_num_children = true;
    if (this_present_num_children || that_present_num_children) {
      if (!(this_present_num_children && that_present_num_children))
        return false;
      if (this.num_children != that.num_children)
        return false;
    }

    boolean this_present_agg_expr = true && this.isSetAgg_expr();
    boolean that_present_agg_expr = true && that.isSetAgg_expr();
    if (this_present_agg_expr || that_present_agg_expr) {
      if (!(this_present_agg_expr && that_present_agg_expr))
        return false;
      if (!this.agg_expr.equals(that.agg_expr))
        return false;
    }

    boolean this_present_bool_literal = true && this.isSetBool_literal();
    boolean that_present_bool_literal = true && that.isSetBool_literal();
    if (this_present_bool_literal || that_present_bool_literal) {
      if (!(this_present_bool_literal && that_present_bool_literal))
        return false;
      if (!this.bool_literal.equals(that.bool_literal))
        return false;
    }

    boolean this_present_case_expr = true && this.isSetCase_expr();
    boolean that_present_case_expr = true && that.isSetCase_expr();
    if (this_present_case_expr || that_present_case_expr) {
      if (!(this_present_case_expr && that_present_case_expr))
        return false;
      if (!this.case_expr.equals(that.case_expr))
        return false;
    }

    boolean this_present_date_literal = true && this.isSetDate_literal();
    boolean that_present_date_literal = true && that.isSetDate_literal();
    if (this_present_date_literal || that_present_date_literal) {
      if (!(this_present_date_literal && that_present_date_literal))
        return false;
      if (!this.date_literal.equals(that.date_literal))
        return false;
    }

    boolean this_present_float_literal = true && this.isSetFloat_literal();
    boolean that_present_float_literal = true && that.isSetFloat_literal();
    if (this_present_float_literal || that_present_float_literal) {
      if (!(this_present_float_literal && that_present_float_literal))
        return false;
      if (!this.float_literal.equals(that.float_literal))
        return false;
    }

    boolean this_present_int_literal = true && this.isSetInt_literal();
    boolean that_present_int_literal = true && that.isSetInt_literal();
    if (this_present_int_literal || that_present_int_literal) {
      if (!(this_present_int_literal && that_present_int_literal))
        return false;
      if (!this.int_literal.equals(that.int_literal))
        return false;
    }

    boolean this_present_in_predicate = true && this.isSetIn_predicate();
    boolean that_present_in_predicate = true && that.isSetIn_predicate();
    if (this_present_in_predicate || that_present_in_predicate) {
      if (!(this_present_in_predicate && that_present_in_predicate))
        return false;
      if (!this.in_predicate.equals(that.in_predicate))
        return false;
    }

    boolean this_present_is_null_pred = true && this.isSetIs_null_pred();
    boolean that_present_is_null_pred = true && that.isSetIs_null_pred();
    if (this_present_is_null_pred || that_present_is_null_pred) {
      if (!(this_present_is_null_pred && that_present_is_null_pred))
        return false;
      if (!this.is_null_pred.equals(that.is_null_pred))
        return false;
    }

    boolean this_present_like_pred = true && this.isSetLike_pred();
    boolean that_present_like_pred = true && that.isSetLike_pred();
    if (this_present_like_pred || that_present_like_pred) {
      if (!(this_present_like_pred && that_present_like_pred))
        return false;
      if (!this.like_pred.equals(that.like_pred))
        return false;
    }

    boolean this_present_literal_pred = true && this.isSetLiteral_pred();
    boolean that_present_literal_pred = true && that.isSetLiteral_pred();
    if (this_present_literal_pred || that_present_literal_pred) {
      if (!(this_present_literal_pred && that_present_literal_pred))
        return false;
      if (!this.literal_pred.equals(that.literal_pred))
        return false;
    }

    boolean this_present_slot_ref = true && this.isSetSlot_ref();
    boolean that_present_slot_ref = true && that.isSetSlot_ref();
    if (this_present_slot_ref || that_present_slot_ref) {
      if (!(this_present_slot_ref && that_present_slot_ref))
        return false;
      if (!this.slot_ref.equals(that.slot_ref))
        return false;
    }

    boolean this_present_string_literal = true && this.isSetString_literal();
    boolean that_present_string_literal = true && that.isSetString_literal();
    if (this_present_string_literal || that_present_string_literal) {
      if (!(this_present_string_literal && that_present_string_literal))
        return false;
      if (!this.string_literal.equals(that.string_literal))
        return false;
    }

    boolean this_present_tuple_is_null_pred = true && this.isSetTuple_is_null_pred();
    boolean that_present_tuple_is_null_pred = true && that.isSetTuple_is_null_pred();
    if (this_present_tuple_is_null_pred || that_present_tuple_is_null_pred) {
      if (!(this_present_tuple_is_null_pred && that_present_tuple_is_null_pred))
        return false;
      if (!this.tuple_is_null_pred.equals(that.tuple_is_null_pred))
        return false;
    }

    boolean this_present_info_func = true && this.isSetInfo_func();
    boolean that_present_info_func = true && that.isSetInfo_func();
    if (this_present_info_func || that_present_info_func) {
      if (!(this_present_info_func && that_present_info_func))
        return false;
      if (!this.info_func.equals(that.info_func))
        return false;
    }

    boolean this_present_decimal_literal = true && this.isSetDecimal_literal();
    boolean that_present_decimal_literal = true && that.isSetDecimal_literal();
    if (this_present_decimal_literal || that_present_decimal_literal) {
      if (!(this_present_decimal_literal && that_present_decimal_literal))
        return false;
      if (!this.decimal_literal.equals(that.decimal_literal))
        return false;
    }

    boolean this_present_output_scale = true;
    boolean that_present_output_scale = true;
    if (this_present_output_scale || that_present_output_scale) {
      if (!(this_present_output_scale && that_present_output_scale))
        return false;
      if (this.output_scale != that.output_scale)
        return false;
    }

    boolean this_present_fn_call_expr = true && this.isSetFn_call_expr();
    boolean that_present_fn_call_expr = true && that.isSetFn_call_expr();
    if (this_present_fn_call_expr || that_present_fn_call_expr) {
      if (!(this_present_fn_call_expr && that_present_fn_call_expr))
        return false;
      if (!this.fn_call_expr.equals(that.fn_call_expr))
        return false;
    }

    boolean this_present_large_int_literal = true && this.isSetLarge_int_literal();
    boolean that_present_large_int_literal = true && that.isSetLarge_int_literal();
    if (this_present_large_int_literal || that_present_large_int_literal) {
      if (!(this_present_large_int_literal && that_present_large_int_literal))
        return false;
      if (!this.large_int_literal.equals(that.large_int_literal))
        return false;
    }

    boolean this_present_output_column = true && this.isSetOutput_column();
    boolean that_present_output_column = true && that.isSetOutput_column();
    if (this_present_output_column || that_present_output_column) {
      if (!(this_present_output_column && that_present_output_column))
        return false;
      if (this.output_column != that.output_column)
        return false;
    }

    boolean this_present_output_type = true && this.isSetOutput_type();
    boolean that_present_output_type = true && that.isSetOutput_type();
    if (this_present_output_type || that_present_output_type) {
      if (!(this_present_output_type && that_present_output_type))
        return false;
      if (!this.output_type.equals(that.output_type))
        return false;
    }

    boolean this_present_vector_opcode = true && this.isSetVector_opcode();
    boolean that_present_vector_opcode = true && that.isSetVector_opcode();
    if (this_present_vector_opcode || that_present_vector_opcode) {
      if (!(this_present_vector_opcode && that_present_vector_opcode))
        return false;
      if (!this.vector_opcode.equals(that.vector_opcode))
        return false;
    }

    boolean this_present_fn = true && this.isSetFn();
    boolean that_present_fn = true && that.isSetFn();
    if (this_present_fn || that_present_fn) {
      if (!(this_present_fn && that_present_fn))
        return false;
      if (!this.fn.equals(that.fn))
        return false;
    }

    boolean this_present_vararg_start_idx = true && this.isSetVararg_start_idx();
    boolean that_present_vararg_start_idx = true && that.isSetVararg_start_idx();
    if (this_present_vararg_start_idx || that_present_vararg_start_idx) {
      if (!(this_present_vararg_start_idx && that_present_vararg_start_idx))
        return false;
      if (this.vararg_start_idx != that.vararg_start_idx)
        return false;
    }

    boolean this_present_child_type = true && this.isSetChild_type();
    boolean that_present_child_type = true && that.isSetChild_type();
    if (this_present_child_type || that_present_child_type) {
      if (!(this_present_child_type && that_present_child_type))
        return false;
      if (!this.child_type.equals(that.child_type))
        return false;
    }

    boolean this_present_vslot_ref = true && this.isSetVslot_ref();
    boolean that_present_vslot_ref = true && that.isSetVslot_ref();
    if (this_present_vslot_ref || that_present_vslot_ref) {
      if (!(this_present_vslot_ref && that_present_vslot_ref))
        return false;
      if (!this.vslot_ref.equals(that.vslot_ref))
        return false;
    }

    boolean this_present_used_subfield_names = true && this.isSetUsed_subfield_names();
    boolean that_present_used_subfield_names = true && that.isSetUsed_subfield_names();
    if (this_present_used_subfield_names || that_present_used_subfield_names) {
      if (!(this_present_used_subfield_names && that_present_used_subfield_names))
        return false;
      if (!this.used_subfield_names.equals(that.used_subfield_names))
        return false;
    }

    boolean this_present_binary_literal = true && this.isSetBinary_literal();
    boolean that_present_binary_literal = true && that.isSetBinary_literal();
    if (this_present_binary_literal || that_present_binary_literal) {
      if (!(this_present_binary_literal && that_present_binary_literal))
        return false;
      if (!this.binary_literal.equals(that.binary_literal))
        return false;
    }

    boolean this_present_copy_flag = true && this.isSetCopy_flag();
    boolean that_present_copy_flag = true && that.isSetCopy_flag();
    if (this_present_copy_flag || that_present_copy_flag) {
      if (!(this_present_copy_flag && that_present_copy_flag))
        return false;
      if (this.copy_flag != that.copy_flag)
        return false;
    }

    boolean this_present_check_is_out_of_bounds = true && this.isSetCheck_is_out_of_bounds();
    boolean that_present_check_is_out_of_bounds = true && that.isSetCheck_is_out_of_bounds();
    if (this_present_check_is_out_of_bounds || that_present_check_is_out_of_bounds) {
      if (!(this_present_check_is_out_of_bounds && that_present_check_is_out_of_bounds))
        return false;
      if (this.check_is_out_of_bounds != that.check_is_out_of_bounds)
        return false;
    }

    boolean this_present_use_vectorized = true && this.isSetUse_vectorized();
    boolean that_present_use_vectorized = true && that.isSetUse_vectorized();
    if (this_present_use_vectorized || that_present_use_vectorized) {
      if (!(this_present_use_vectorized && that_present_use_vectorized))
        return false;
      if (this.use_vectorized != that.use_vectorized)
        return false;
    }

    boolean this_present_has_nullable_child = true && this.isSetHas_nullable_child();
    boolean that_present_has_nullable_child = true && that.isSetHas_nullable_child();
    if (this_present_has_nullable_child || that_present_has_nullable_child) {
      if (!(this_present_has_nullable_child && that_present_has_nullable_child))
        return false;
      if (this.has_nullable_child != that.has_nullable_child)
        return false;
    }

    boolean this_present_is_nullable = true && this.isSetIs_nullable();
    boolean that_present_is_nullable = true && that.isSetIs_nullable();
    if (this_present_is_nullable || that_present_is_nullable) {
      if (!(this_present_is_nullable && that_present_is_nullable))
        return false;
      if (this.is_nullable != that.is_nullable)
        return false;
    }

    boolean this_present_child_type_desc = true && this.isSetChild_type_desc();
    boolean that_present_child_type_desc = true && that.isSetChild_type_desc();
    if (this_present_child_type_desc || that_present_child_type_desc) {
      if (!(this_present_child_type_desc && that_present_child_type_desc))
        return false;
      if (!this.child_type_desc.equals(that.child_type_desc))
        return false;
    }

    boolean this_present_is_monotonic = true && this.isSetIs_monotonic();
    boolean that_present_is_monotonic = true && that.isSetIs_monotonic();
    if (this_present_is_monotonic || that_present_is_monotonic) {
      if (!(this_present_is_monotonic && that_present_is_monotonic))
        return false;
      if (this.is_monotonic != that.is_monotonic)
        return false;
    }

    boolean this_present_dict_query_expr = true && this.isSetDict_query_expr();
    boolean that_present_dict_query_expr = true && that.isSetDict_query_expr();
    if (this_present_dict_query_expr || that_present_dict_query_expr) {
      if (!(this_present_dict_query_expr && that_present_dict_query_expr))
        return false;
      if (!this.dict_query_expr.equals(that.dict_query_expr))
        return false;
    }

    boolean this_present_dictionary_get_expr = true && this.isSetDictionary_get_expr();
    boolean that_present_dictionary_get_expr = true && that.isSetDictionary_get_expr();
    if (this_present_dictionary_get_expr || that_present_dictionary_get_expr) {
      if (!(this_present_dictionary_get_expr && that_present_dictionary_get_expr))
        return false;
      if (!this.dictionary_get_expr.equals(that.dictionary_get_expr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNode_type()) ? 131071 : 524287);
    if (isSetNode_type())
      hashCode = hashCode * 8191 + node_type.getValue();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpcode()) ? 131071 : 524287);
    if (isSetOpcode())
      hashCode = hashCode * 8191 + opcode.getValue();

    hashCode = hashCode * 8191 + num_children;

    hashCode = hashCode * 8191 + ((isSetAgg_expr()) ? 131071 : 524287);
    if (isSetAgg_expr())
      hashCode = hashCode * 8191 + agg_expr.hashCode();

    hashCode = hashCode * 8191 + ((isSetBool_literal()) ? 131071 : 524287);
    if (isSetBool_literal())
      hashCode = hashCode * 8191 + bool_literal.hashCode();

    hashCode = hashCode * 8191 + ((isSetCase_expr()) ? 131071 : 524287);
    if (isSetCase_expr())
      hashCode = hashCode * 8191 + case_expr.hashCode();

    hashCode = hashCode * 8191 + ((isSetDate_literal()) ? 131071 : 524287);
    if (isSetDate_literal())
      hashCode = hashCode * 8191 + date_literal.hashCode();

    hashCode = hashCode * 8191 + ((isSetFloat_literal()) ? 131071 : 524287);
    if (isSetFloat_literal())
      hashCode = hashCode * 8191 + float_literal.hashCode();

    hashCode = hashCode * 8191 + ((isSetInt_literal()) ? 131071 : 524287);
    if (isSetInt_literal())
      hashCode = hashCode * 8191 + int_literal.hashCode();

    hashCode = hashCode * 8191 + ((isSetIn_predicate()) ? 131071 : 524287);
    if (isSetIn_predicate())
      hashCode = hashCode * 8191 + in_predicate.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_null_pred()) ? 131071 : 524287);
    if (isSetIs_null_pred())
      hashCode = hashCode * 8191 + is_null_pred.hashCode();

    hashCode = hashCode * 8191 + ((isSetLike_pred()) ? 131071 : 524287);
    if (isSetLike_pred())
      hashCode = hashCode * 8191 + like_pred.hashCode();

    hashCode = hashCode * 8191 + ((isSetLiteral_pred()) ? 131071 : 524287);
    if (isSetLiteral_pred())
      hashCode = hashCode * 8191 + literal_pred.hashCode();

    hashCode = hashCode * 8191 + ((isSetSlot_ref()) ? 131071 : 524287);
    if (isSetSlot_ref())
      hashCode = hashCode * 8191 + slot_ref.hashCode();

    hashCode = hashCode * 8191 + ((isSetString_literal()) ? 131071 : 524287);
    if (isSetString_literal())
      hashCode = hashCode * 8191 + string_literal.hashCode();

    hashCode = hashCode * 8191 + ((isSetTuple_is_null_pred()) ? 131071 : 524287);
    if (isSetTuple_is_null_pred())
      hashCode = hashCode * 8191 + tuple_is_null_pred.hashCode();

    hashCode = hashCode * 8191 + ((isSetInfo_func()) ? 131071 : 524287);
    if (isSetInfo_func())
      hashCode = hashCode * 8191 + info_func.hashCode();

    hashCode = hashCode * 8191 + ((isSetDecimal_literal()) ? 131071 : 524287);
    if (isSetDecimal_literal())
      hashCode = hashCode * 8191 + decimal_literal.hashCode();

    hashCode = hashCode * 8191 + output_scale;

    hashCode = hashCode * 8191 + ((isSetFn_call_expr()) ? 131071 : 524287);
    if (isSetFn_call_expr())
      hashCode = hashCode * 8191 + fn_call_expr.hashCode();

    hashCode = hashCode * 8191 + ((isSetLarge_int_literal()) ? 131071 : 524287);
    if (isSetLarge_int_literal())
      hashCode = hashCode * 8191 + large_int_literal.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutput_column()) ? 131071 : 524287);
    if (isSetOutput_column())
      hashCode = hashCode * 8191 + output_column;

    hashCode = hashCode * 8191 + ((isSetOutput_type()) ? 131071 : 524287);
    if (isSetOutput_type())
      hashCode = hashCode * 8191 + output_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetVector_opcode()) ? 131071 : 524287);
    if (isSetVector_opcode())
      hashCode = hashCode * 8191 + vector_opcode.getValue();

    hashCode = hashCode * 8191 + ((isSetFn()) ? 131071 : 524287);
    if (isSetFn())
      hashCode = hashCode * 8191 + fn.hashCode();

    hashCode = hashCode * 8191 + ((isSetVararg_start_idx()) ? 131071 : 524287);
    if (isSetVararg_start_idx())
      hashCode = hashCode * 8191 + vararg_start_idx;

    hashCode = hashCode * 8191 + ((isSetChild_type()) ? 131071 : 524287);
    if (isSetChild_type())
      hashCode = hashCode * 8191 + child_type.getValue();

    hashCode = hashCode * 8191 + ((isSetVslot_ref()) ? 131071 : 524287);
    if (isSetVslot_ref())
      hashCode = hashCode * 8191 + vslot_ref.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsed_subfield_names()) ? 131071 : 524287);
    if (isSetUsed_subfield_names())
      hashCode = hashCode * 8191 + used_subfield_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetBinary_literal()) ? 131071 : 524287);
    if (isSetBinary_literal())
      hashCode = hashCode * 8191 + binary_literal.hashCode();

    hashCode = hashCode * 8191 + ((isSetCopy_flag()) ? 131071 : 524287);
    if (isSetCopy_flag())
      hashCode = hashCode * 8191 + ((copy_flag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCheck_is_out_of_bounds()) ? 131071 : 524287);
    if (isSetCheck_is_out_of_bounds())
      hashCode = hashCode * 8191 + ((check_is_out_of_bounds) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetUse_vectorized()) ? 131071 : 524287);
    if (isSetUse_vectorized())
      hashCode = hashCode * 8191 + ((use_vectorized) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetHas_nullable_child()) ? 131071 : 524287);
    if (isSetHas_nullable_child())
      hashCode = hashCode * 8191 + ((has_nullable_child) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIs_nullable()) ? 131071 : 524287);
    if (isSetIs_nullable())
      hashCode = hashCode * 8191 + ((is_nullable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetChild_type_desc()) ? 131071 : 524287);
    if (isSetChild_type_desc())
      hashCode = hashCode * 8191 + child_type_desc.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_monotonic()) ? 131071 : 524287);
    if (isSetIs_monotonic())
      hashCode = hashCode * 8191 + ((is_monotonic) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDict_query_expr()) ? 131071 : 524287);
    if (isSetDict_query_expr())
      hashCode = hashCode * 8191 + dict_query_expr.hashCode();

    hashCode = hashCode * 8191 + ((isSetDictionary_get_expr()) ? 131071 : 524287);
    if (isSetDictionary_get_expr())
      hashCode = hashCode * 8191 + dictionary_get_expr.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TExprNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNode_type(), other.isSetNode_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_type, other.node_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOpcode(), other.isSetOpcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opcode, other.opcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_children(), other.isSetNum_children());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_children()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_children, other.num_children);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAgg_expr(), other.isSetAgg_expr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgg_expr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agg_expr, other.agg_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBool_literal(), other.isSetBool_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBool_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bool_literal, other.bool_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCase_expr(), other.isSetCase_expr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCase_expr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.case_expr, other.case_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDate_literal(), other.isSetDate_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date_literal, other.date_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFloat_literal(), other.isSetFloat_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloat_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.float_literal, other.float_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInt_literal(), other.isSetInt_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_literal, other.int_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIn_predicate(), other.isSetIn_predicate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIn_predicate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.in_predicate, other.in_predicate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_null_pred(), other.isSetIs_null_pred());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_null_pred()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_null_pred, other.is_null_pred);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLike_pred(), other.isSetLike_pred());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLike_pred()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.like_pred, other.like_pred);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLiteral_pred(), other.isSetLiteral_pred());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiteral_pred()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.literal_pred, other.literal_pred);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSlot_ref(), other.isSetSlot_ref());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlot_ref()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slot_ref, other.slot_ref);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetString_literal(), other.isSetString_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_literal, other.string_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTuple_is_null_pred(), other.isSetTuple_is_null_pred());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuple_is_null_pred()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_is_null_pred, other.tuple_is_null_pred);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInfo_func(), other.isSetInfo_func());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfo_func()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info_func, other.info_func);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDecimal_literal(), other.isSetDecimal_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecimal_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decimal_literal, other.decimal_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutput_scale(), other.isSetOutput_scale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_scale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_scale, other.output_scale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFn_call_expr(), other.isSetFn_call_expr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFn_call_expr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fn_call_expr, other.fn_call_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLarge_int_literal(), other.isSetLarge_int_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLarge_int_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.large_int_literal, other.large_int_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutput_column(), other.isSetOutput_column());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_column()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_column, other.output_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutput_type(), other.isSetOutput_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_type, other.output_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVector_opcode(), other.isSetVector_opcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVector_opcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vector_opcode, other.vector_opcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFn(), other.isSetFn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fn, other.fn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVararg_start_idx(), other.isSetVararg_start_idx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVararg_start_idx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vararg_start_idx, other.vararg_start_idx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChild_type(), other.isSetChild_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChild_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.child_type, other.child_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVslot_ref(), other.isSetVslot_ref());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVslot_ref()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vslot_ref, other.vslot_ref);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUsed_subfield_names(), other.isSetUsed_subfield_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsed_subfield_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.used_subfield_names, other.used_subfield_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBinary_literal(), other.isSetBinary_literal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinary_literal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binary_literal, other.binary_literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCopy_flag(), other.isSetCopy_flag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCopy_flag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.copy_flag, other.copy_flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCheck_is_out_of_bounds(), other.isSetCheck_is_out_of_bounds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheck_is_out_of_bounds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.check_is_out_of_bounds, other.check_is_out_of_bounds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_vectorized(), other.isSetUse_vectorized());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_vectorized()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_vectorized, other.use_vectorized);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHas_nullable_child(), other.isSetHas_nullable_child());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_nullable_child()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_nullable_child, other.has_nullable_child);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_nullable(), other.isSetIs_nullable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_nullable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_nullable, other.is_nullable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChild_type_desc(), other.isSetChild_type_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChild_type_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.child_type_desc, other.child_type_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_monotonic(), other.isSetIs_monotonic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_monotonic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_monotonic, other.is_monotonic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDict_query_expr(), other.isSetDict_query_expr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDict_query_expr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dict_query_expr, other.dict_query_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDictionary_get_expr(), other.isSetDictionary_get_expr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDictionary_get_expr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictionary_get_expr, other.dictionary_get_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TExprNode(");
    boolean first = true;

    sb.append("node_type:");
    if (this.node_type == null) {
      sb.append("null");
    } else {
      sb.append(this.node_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetOpcode()) {
      if (!first) sb.append(", ");
      sb.append("opcode:");
      if (this.opcode == null) {
        sb.append("null");
      } else {
        sb.append(this.opcode);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("num_children:");
    sb.append(this.num_children);
    first = false;
    if (isSetAgg_expr()) {
      if (!first) sb.append(", ");
      sb.append("agg_expr:");
      if (this.agg_expr == null) {
        sb.append("null");
      } else {
        sb.append(this.agg_expr);
      }
      first = false;
    }
    if (isSetBool_literal()) {
      if (!first) sb.append(", ");
      sb.append("bool_literal:");
      if (this.bool_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.bool_literal);
      }
      first = false;
    }
    if (isSetCase_expr()) {
      if (!first) sb.append(", ");
      sb.append("case_expr:");
      if (this.case_expr == null) {
        sb.append("null");
      } else {
        sb.append(this.case_expr);
      }
      first = false;
    }
    if (isSetDate_literal()) {
      if (!first) sb.append(", ");
      sb.append("date_literal:");
      if (this.date_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.date_literal);
      }
      first = false;
    }
    if (isSetFloat_literal()) {
      if (!first) sb.append(", ");
      sb.append("float_literal:");
      if (this.float_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.float_literal);
      }
      first = false;
    }
    if (isSetInt_literal()) {
      if (!first) sb.append(", ");
      sb.append("int_literal:");
      if (this.int_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.int_literal);
      }
      first = false;
    }
    if (isSetIn_predicate()) {
      if (!first) sb.append(", ");
      sb.append("in_predicate:");
      if (this.in_predicate == null) {
        sb.append("null");
      } else {
        sb.append(this.in_predicate);
      }
      first = false;
    }
    if (isSetIs_null_pred()) {
      if (!first) sb.append(", ");
      sb.append("is_null_pred:");
      if (this.is_null_pred == null) {
        sb.append("null");
      } else {
        sb.append(this.is_null_pred);
      }
      first = false;
    }
    if (isSetLike_pred()) {
      if (!first) sb.append(", ");
      sb.append("like_pred:");
      if (this.like_pred == null) {
        sb.append("null");
      } else {
        sb.append(this.like_pred);
      }
      first = false;
    }
    if (isSetLiteral_pred()) {
      if (!first) sb.append(", ");
      sb.append("literal_pred:");
      if (this.literal_pred == null) {
        sb.append("null");
      } else {
        sb.append(this.literal_pred);
      }
      first = false;
    }
    if (isSetSlot_ref()) {
      if (!first) sb.append(", ");
      sb.append("slot_ref:");
      if (this.slot_ref == null) {
        sb.append("null");
      } else {
        sb.append(this.slot_ref);
      }
      first = false;
    }
    if (isSetString_literal()) {
      if (!first) sb.append(", ");
      sb.append("string_literal:");
      if (this.string_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.string_literal);
      }
      first = false;
    }
    if (isSetTuple_is_null_pred()) {
      if (!first) sb.append(", ");
      sb.append("tuple_is_null_pred:");
      if (this.tuple_is_null_pred == null) {
        sb.append("null");
      } else {
        sb.append(this.tuple_is_null_pred);
      }
      first = false;
    }
    if (isSetInfo_func()) {
      if (!first) sb.append(", ");
      sb.append("info_func:");
      if (this.info_func == null) {
        sb.append("null");
      } else {
        sb.append(this.info_func);
      }
      first = false;
    }
    if (isSetDecimal_literal()) {
      if (!first) sb.append(", ");
      sb.append("decimal_literal:");
      if (this.decimal_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.decimal_literal);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("output_scale:");
    sb.append(this.output_scale);
    first = false;
    if (isSetFn_call_expr()) {
      if (!first) sb.append(", ");
      sb.append("fn_call_expr:");
      if (this.fn_call_expr == null) {
        sb.append("null");
      } else {
        sb.append(this.fn_call_expr);
      }
      first = false;
    }
    if (isSetLarge_int_literal()) {
      if (!first) sb.append(", ");
      sb.append("large_int_literal:");
      if (this.large_int_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.large_int_literal);
      }
      first = false;
    }
    if (isSetOutput_column()) {
      if (!first) sb.append(", ");
      sb.append("output_column:");
      sb.append(this.output_column);
      first = false;
    }
    if (isSetOutput_type()) {
      if (!first) sb.append(", ");
      sb.append("output_type:");
      if (this.output_type == null) {
        sb.append("null");
      } else {
        sb.append(this.output_type);
      }
      first = false;
    }
    if (isSetVector_opcode()) {
      if (!first) sb.append(", ");
      sb.append("vector_opcode:");
      if (this.vector_opcode == null) {
        sb.append("null");
      } else {
        sb.append(this.vector_opcode);
      }
      first = false;
    }
    if (isSetFn()) {
      if (!first) sb.append(", ");
      sb.append("fn:");
      if (this.fn == null) {
        sb.append("null");
      } else {
        sb.append(this.fn);
      }
      first = false;
    }
    if (isSetVararg_start_idx()) {
      if (!first) sb.append(", ");
      sb.append("vararg_start_idx:");
      sb.append(this.vararg_start_idx);
      first = false;
    }
    if (isSetChild_type()) {
      if (!first) sb.append(", ");
      sb.append("child_type:");
      if (this.child_type == null) {
        sb.append("null");
      } else {
        sb.append(this.child_type);
      }
      first = false;
    }
    if (isSetVslot_ref()) {
      if (!first) sb.append(", ");
      sb.append("vslot_ref:");
      if (this.vslot_ref == null) {
        sb.append("null");
      } else {
        sb.append(this.vslot_ref);
      }
      first = false;
    }
    if (isSetUsed_subfield_names()) {
      if (!first) sb.append(", ");
      sb.append("used_subfield_names:");
      if (this.used_subfield_names == null) {
        sb.append("null");
      } else {
        sb.append(this.used_subfield_names);
      }
      first = false;
    }
    if (isSetBinary_literal()) {
      if (!first) sb.append(", ");
      sb.append("binary_literal:");
      if (this.binary_literal == null) {
        sb.append("null");
      } else {
        sb.append(this.binary_literal);
      }
      first = false;
    }
    if (isSetCopy_flag()) {
      if (!first) sb.append(", ");
      sb.append("copy_flag:");
      sb.append(this.copy_flag);
      first = false;
    }
    if (isSetCheck_is_out_of_bounds()) {
      if (!first) sb.append(", ");
      sb.append("check_is_out_of_bounds:");
      sb.append(this.check_is_out_of_bounds);
      first = false;
    }
    if (isSetUse_vectorized()) {
      if (!first) sb.append(", ");
      sb.append("use_vectorized:");
      sb.append(this.use_vectorized);
      first = false;
    }
    if (isSetHas_nullable_child()) {
      if (!first) sb.append(", ");
      sb.append("has_nullable_child:");
      sb.append(this.has_nullable_child);
      first = false;
    }
    if (isSetIs_nullable()) {
      if (!first) sb.append(", ");
      sb.append("is_nullable:");
      sb.append(this.is_nullable);
      first = false;
    }
    if (isSetChild_type_desc()) {
      if (!first) sb.append(", ");
      sb.append("child_type_desc:");
      if (this.child_type_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.child_type_desc);
      }
      first = false;
    }
    if (isSetIs_monotonic()) {
      if (!first) sb.append(", ");
      sb.append("is_monotonic:");
      sb.append(this.is_monotonic);
      first = false;
    }
    if (isSetDict_query_expr()) {
      if (!first) sb.append(", ");
      sb.append("dict_query_expr:");
      if (this.dict_query_expr == null) {
        sb.append("null");
      } else {
        sb.append(this.dict_query_expr);
      }
      first = false;
    }
    if (isSetDictionary_get_expr()) {
      if (!first) sb.append(", ");
      sb.append("dictionary_get_expr:");
      if (this.dictionary_get_expr == null) {
        sb.append("null");
      } else {
        sb.append(this.dictionary_get_expr);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (node_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'node_type' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'num_children' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'output_scale' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (type != null) {
      type.validate();
    }
    if (agg_expr != null) {
      agg_expr.validate();
    }
    if (bool_literal != null) {
      bool_literal.validate();
    }
    if (case_expr != null) {
      case_expr.validate();
    }
    if (date_literal != null) {
      date_literal.validate();
    }
    if (float_literal != null) {
      float_literal.validate();
    }
    if (int_literal != null) {
      int_literal.validate();
    }
    if (in_predicate != null) {
      in_predicate.validate();
    }
    if (is_null_pred != null) {
      is_null_pred.validate();
    }
    if (like_pred != null) {
      like_pred.validate();
    }
    if (literal_pred != null) {
      literal_pred.validate();
    }
    if (slot_ref != null) {
      slot_ref.validate();
    }
    if (string_literal != null) {
      string_literal.validate();
    }
    if (tuple_is_null_pred != null) {
      tuple_is_null_pred.validate();
    }
    if (info_func != null) {
      info_func.validate();
    }
    if (decimal_literal != null) {
      decimal_literal.validate();
    }
    if (fn_call_expr != null) {
      fn_call_expr.validate();
    }
    if (large_int_literal != null) {
      large_int_literal.validate();
    }
    if (output_type != null) {
      output_type.validate();
    }
    if (fn != null) {
      fn.validate();
    }
    if (vslot_ref != null) {
      vslot_ref.validate();
    }
    if (binary_literal != null) {
      binary_literal.validate();
    }
    if (child_type_desc != null) {
      child_type_desc.validate();
    }
    if (dict_query_expr != null) {
      dict_query_expr.validate();
    }
    if (dictionary_get_expr != null) {
      dictionary_get_expr.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExprNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExprNodeStandardScheme getScheme() {
      return new TExprNodeStandardScheme();
    }
  }

  private static class TExprNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TExprNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TExprNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.node_type = io.datafibre.fibre.thrift.TExprNodeType.findByValue(iprot.readI32());
              struct.setNode_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.type = new io.datafibre.fibre.thrift.TTypeDesc();
              struct.type.read(iprot);
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.opcode = io.datafibre.fibre.thrift.TExprOpcode.findByValue(iprot.readI32());
              struct.setOpcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_CHILDREN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_children = iprot.readI32();
              struct.setNum_childrenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AGG_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.agg_expr = new TAggregateExpr();
              struct.agg_expr.read(iprot);
              struct.setAgg_exprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BOOL_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bool_literal = new TBoolLiteral();
              struct.bool_literal.read(iprot);
              struct.setBool_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CASE_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.case_expr = new TCaseExpr();
              struct.case_expr.read(iprot);
              struct.setCase_exprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DATE_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.date_literal = new TDateLiteral();
              struct.date_literal.read(iprot);
              struct.setDate_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FLOAT_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.float_literal = new TFloatLiteral();
              struct.float_literal.read(iprot);
              struct.setFloat_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INT_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.int_literal = new TIntLiteral();
              struct.int_literal.read(iprot);
              struct.setInt_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IN_PREDICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.in_predicate = new TInPredicate();
              struct.in_predicate.read(iprot);
              struct.setIn_predicateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_NULL_PRED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.is_null_pred = new TIsNullPredicate();
              struct.is_null_pred.read(iprot);
              struct.setIs_null_predIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LIKE_PRED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.like_pred = new TLikePredicate();
              struct.like_pred.read(iprot);
              struct.setLike_predIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LITERAL_PRED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.literal_pred = new TLiteralPredicate();
              struct.literal_pred.read(iprot);
              struct.setLiteral_predIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SLOT_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.slot_ref = new TSlotRef();
              struct.slot_ref.read(iprot);
              struct.setSlot_refIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // STRING_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.string_literal = new TStringLiteral();
              struct.string_literal.read(iprot);
              struct.setString_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TUPLE_IS_NULL_PRED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tuple_is_null_pred = new TTupleIsNullPredicate();
              struct.tuple_is_null_pred.read(iprot);
              struct.setTuple_is_null_predIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // INFO_FUNC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.info_func = new TInfoFunc();
              struct.info_func.read(iprot);
              struct.setInfo_funcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // DECIMAL_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.decimal_literal = new TDecimalLiteral();
              struct.decimal_literal.read(iprot);
              struct.setDecimal_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // OUTPUT_SCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.output_scale = iprot.readI32();
              struct.setOutput_scaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // FN_CALL_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fn_call_expr = new TFunctionCallExpr();
              struct.fn_call_expr.read(iprot);
              struct.setFn_call_exprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LARGE_INT_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.large_int_literal = new TLargeIntLiteral();
              struct.large_int_literal.read(iprot);
              struct.setLarge_int_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // OUTPUT_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.output_column = iprot.readI32();
              struct.setOutput_columnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // OUTPUT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.output_type = new io.datafibre.fibre.thrift.TColumnType();
              struct.output_type.read(iprot);
              struct.setOutput_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // VECTOR_OPCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vector_opcode = io.datafibre.fibre.thrift.TExprOpcode.findByValue(iprot.readI32());
              struct.setVector_opcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // FN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fn = new io.datafibre.fibre.thrift.TFunction();
              struct.fn.read(iprot);
              struct.setFnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // VARARG_START_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vararg_start_idx = iprot.readI32();
              struct.setVararg_start_idxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // CHILD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.child_type = io.datafibre.fibre.thrift.TPrimitiveType.findByValue(iprot.readI32());
              struct.setChild_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // VSLOT_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.vslot_ref = new TPlaceHolder();
              struct.vslot_ref.read(iprot);
              struct.setVslot_refIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // USED_SUBFIELD_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.used_subfield_names = new java.util.ArrayList<java.lang.String>(_list26.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = iprot.readString();
                  struct.used_subfield_names.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setUsed_subfield_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // BINARY_LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.binary_literal = new TBinaryLiteral();
              struct.binary_literal.read(iprot);
              struct.setBinary_literalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // COPY_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.copy_flag = iprot.readBool();
              struct.setCopy_flagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // CHECK_IS_OUT_OF_BOUNDS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.check_is_out_of_bounds = iprot.readBool();
              struct.setCheck_is_out_of_boundsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // USE_VECTORIZED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_vectorized = iprot.readBool();
              struct.setUse_vectorizedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // HAS_NULLABLE_CHILD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_nullable_child = iprot.readBool();
              struct.setHas_nullable_childIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // IS_NULLABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_nullable = iprot.readBool();
              struct.setIs_nullableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // CHILD_TYPE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.child_type_desc = new io.datafibre.fibre.thrift.TTypeDesc();
              struct.child_type_desc.read(iprot);
              struct.setChild_type_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // IS_MONOTONIC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_monotonic = iprot.readBool();
              struct.setIs_monotonicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // DICT_QUERY_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dict_query_expr = new TDictQueryExpr();
              struct.dict_query_expr.read(iprot);
              struct.setDict_query_exprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // DICTIONARY_GET_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dictionary_get_expr = new TDictionaryGetExpr();
              struct.dictionary_get_expr.read(iprot);
              struct.setDictionary_get_exprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNum_children()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_children' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOutput_scale()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'output_scale' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TExprNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.node_type != null) {
        oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.node_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        struct.type.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.opcode != null) {
        if (struct.isSetOpcode()) {
          oprot.writeFieldBegin(OPCODE_FIELD_DESC);
          oprot.writeI32(struct.opcode.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(NUM_CHILDREN_FIELD_DESC);
      oprot.writeI32(struct.num_children);
      oprot.writeFieldEnd();
      if (struct.agg_expr != null) {
        if (struct.isSetAgg_expr()) {
          oprot.writeFieldBegin(AGG_EXPR_FIELD_DESC);
          struct.agg_expr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bool_literal != null) {
        if (struct.isSetBool_literal()) {
          oprot.writeFieldBegin(BOOL_LITERAL_FIELD_DESC);
          struct.bool_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.case_expr != null) {
        if (struct.isSetCase_expr()) {
          oprot.writeFieldBegin(CASE_EXPR_FIELD_DESC);
          struct.case_expr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.date_literal != null) {
        if (struct.isSetDate_literal()) {
          oprot.writeFieldBegin(DATE_LITERAL_FIELD_DESC);
          struct.date_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.float_literal != null) {
        if (struct.isSetFloat_literal()) {
          oprot.writeFieldBegin(FLOAT_LITERAL_FIELD_DESC);
          struct.float_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.int_literal != null) {
        if (struct.isSetInt_literal()) {
          oprot.writeFieldBegin(INT_LITERAL_FIELD_DESC);
          struct.int_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.in_predicate != null) {
        if (struct.isSetIn_predicate()) {
          oprot.writeFieldBegin(IN_PREDICATE_FIELD_DESC);
          struct.in_predicate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.is_null_pred != null) {
        if (struct.isSetIs_null_pred()) {
          oprot.writeFieldBegin(IS_NULL_PRED_FIELD_DESC);
          struct.is_null_pred.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.like_pred != null) {
        if (struct.isSetLike_pred()) {
          oprot.writeFieldBegin(LIKE_PRED_FIELD_DESC);
          struct.like_pred.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.literal_pred != null) {
        if (struct.isSetLiteral_pred()) {
          oprot.writeFieldBegin(LITERAL_PRED_FIELD_DESC);
          struct.literal_pred.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.slot_ref != null) {
        if (struct.isSetSlot_ref()) {
          oprot.writeFieldBegin(SLOT_REF_FIELD_DESC);
          struct.slot_ref.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.string_literal != null) {
        if (struct.isSetString_literal()) {
          oprot.writeFieldBegin(STRING_LITERAL_FIELD_DESC);
          struct.string_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tuple_is_null_pred != null) {
        if (struct.isSetTuple_is_null_pred()) {
          oprot.writeFieldBegin(TUPLE_IS_NULL_PRED_FIELD_DESC);
          struct.tuple_is_null_pred.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.info_func != null) {
        if (struct.isSetInfo_func()) {
          oprot.writeFieldBegin(INFO_FUNC_FIELD_DESC);
          struct.info_func.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.decimal_literal != null) {
        if (struct.isSetDecimal_literal()) {
          oprot.writeFieldBegin(DECIMAL_LITERAL_FIELD_DESC);
          struct.decimal_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(OUTPUT_SCALE_FIELD_DESC);
      oprot.writeI32(struct.output_scale);
      oprot.writeFieldEnd();
      if (struct.fn_call_expr != null) {
        if (struct.isSetFn_call_expr()) {
          oprot.writeFieldBegin(FN_CALL_EXPR_FIELD_DESC);
          struct.fn_call_expr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.large_int_literal != null) {
        if (struct.isSetLarge_int_literal()) {
          oprot.writeFieldBegin(LARGE_INT_LITERAL_FIELD_DESC);
          struct.large_int_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOutput_column()) {
        oprot.writeFieldBegin(OUTPUT_COLUMN_FIELD_DESC);
        oprot.writeI32(struct.output_column);
        oprot.writeFieldEnd();
      }
      if (struct.output_type != null) {
        if (struct.isSetOutput_type()) {
          oprot.writeFieldBegin(OUTPUT_TYPE_FIELD_DESC);
          struct.output_type.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.vector_opcode != null) {
        if (struct.isSetVector_opcode()) {
          oprot.writeFieldBegin(VECTOR_OPCODE_FIELD_DESC);
          oprot.writeI32(struct.vector_opcode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.fn != null) {
        if (struct.isSetFn()) {
          oprot.writeFieldBegin(FN_FIELD_DESC);
          struct.fn.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVararg_start_idx()) {
        oprot.writeFieldBegin(VARARG_START_IDX_FIELD_DESC);
        oprot.writeI32(struct.vararg_start_idx);
        oprot.writeFieldEnd();
      }
      if (struct.child_type != null) {
        if (struct.isSetChild_type()) {
          oprot.writeFieldBegin(CHILD_TYPE_FIELD_DESC);
          oprot.writeI32(struct.child_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.vslot_ref != null) {
        if (struct.isSetVslot_ref()) {
          oprot.writeFieldBegin(VSLOT_REF_FIELD_DESC);
          struct.vslot_ref.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.used_subfield_names != null) {
        if (struct.isSetUsed_subfield_names()) {
          oprot.writeFieldBegin(USED_SUBFIELD_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.used_subfield_names.size()));
            for (java.lang.String _iter29 : struct.used_subfield_names)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.binary_literal != null) {
        if (struct.isSetBinary_literal()) {
          oprot.writeFieldBegin(BINARY_LITERAL_FIELD_DESC);
          struct.binary_literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCopy_flag()) {
        oprot.writeFieldBegin(COPY_FLAG_FIELD_DESC);
        oprot.writeBool(struct.copy_flag);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheck_is_out_of_bounds()) {
        oprot.writeFieldBegin(CHECK_IS_OUT_OF_BOUNDS_FIELD_DESC);
        oprot.writeBool(struct.check_is_out_of_bounds);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUse_vectorized()) {
        oprot.writeFieldBegin(USE_VECTORIZED_FIELD_DESC);
        oprot.writeBool(struct.use_vectorized);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHas_nullable_child()) {
        oprot.writeFieldBegin(HAS_NULLABLE_CHILD_FIELD_DESC);
        oprot.writeBool(struct.has_nullable_child);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_nullable()) {
        oprot.writeFieldBegin(IS_NULLABLE_FIELD_DESC);
        oprot.writeBool(struct.is_nullable);
        oprot.writeFieldEnd();
      }
      if (struct.child_type_desc != null) {
        if (struct.isSetChild_type_desc()) {
          oprot.writeFieldBegin(CHILD_TYPE_DESC_FIELD_DESC);
          struct.child_type_desc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_monotonic()) {
        oprot.writeFieldBegin(IS_MONOTONIC_FIELD_DESC);
        oprot.writeBool(struct.is_monotonic);
        oprot.writeFieldEnd();
      }
      if (struct.dict_query_expr != null) {
        if (struct.isSetDict_query_expr()) {
          oprot.writeFieldBegin(DICT_QUERY_EXPR_FIELD_DESC);
          struct.dict_query_expr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dictionary_get_expr != null) {
        if (struct.isSetDictionary_get_expr()) {
          oprot.writeFieldBegin(DICTIONARY_GET_EXPR_FIELD_DESC);
          struct.dictionary_get_expr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExprNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExprNodeTupleScheme getScheme() {
      return new TExprNodeTupleScheme();
    }
  }

  private static class TExprNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TExprNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExprNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.node_type.getValue());
      struct.type.write(oprot);
      oprot.writeI32(struct.num_children);
      oprot.writeI32(struct.output_scale);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOpcode()) {
        optionals.set(0);
      }
      if (struct.isSetAgg_expr()) {
        optionals.set(1);
      }
      if (struct.isSetBool_literal()) {
        optionals.set(2);
      }
      if (struct.isSetCase_expr()) {
        optionals.set(3);
      }
      if (struct.isSetDate_literal()) {
        optionals.set(4);
      }
      if (struct.isSetFloat_literal()) {
        optionals.set(5);
      }
      if (struct.isSetInt_literal()) {
        optionals.set(6);
      }
      if (struct.isSetIn_predicate()) {
        optionals.set(7);
      }
      if (struct.isSetIs_null_pred()) {
        optionals.set(8);
      }
      if (struct.isSetLike_pred()) {
        optionals.set(9);
      }
      if (struct.isSetLiteral_pred()) {
        optionals.set(10);
      }
      if (struct.isSetSlot_ref()) {
        optionals.set(11);
      }
      if (struct.isSetString_literal()) {
        optionals.set(12);
      }
      if (struct.isSetTuple_is_null_pred()) {
        optionals.set(13);
      }
      if (struct.isSetInfo_func()) {
        optionals.set(14);
      }
      if (struct.isSetDecimal_literal()) {
        optionals.set(15);
      }
      if (struct.isSetFn_call_expr()) {
        optionals.set(16);
      }
      if (struct.isSetLarge_int_literal()) {
        optionals.set(17);
      }
      if (struct.isSetOutput_column()) {
        optionals.set(18);
      }
      if (struct.isSetOutput_type()) {
        optionals.set(19);
      }
      if (struct.isSetVector_opcode()) {
        optionals.set(20);
      }
      if (struct.isSetFn()) {
        optionals.set(21);
      }
      if (struct.isSetVararg_start_idx()) {
        optionals.set(22);
      }
      if (struct.isSetChild_type()) {
        optionals.set(23);
      }
      if (struct.isSetVslot_ref()) {
        optionals.set(24);
      }
      if (struct.isSetUsed_subfield_names()) {
        optionals.set(25);
      }
      if (struct.isSetBinary_literal()) {
        optionals.set(26);
      }
      if (struct.isSetCopy_flag()) {
        optionals.set(27);
      }
      if (struct.isSetCheck_is_out_of_bounds()) {
        optionals.set(28);
      }
      if (struct.isSetUse_vectorized()) {
        optionals.set(29);
      }
      if (struct.isSetHas_nullable_child()) {
        optionals.set(30);
      }
      if (struct.isSetIs_nullable()) {
        optionals.set(31);
      }
      if (struct.isSetChild_type_desc()) {
        optionals.set(32);
      }
      if (struct.isSetIs_monotonic()) {
        optionals.set(33);
      }
      if (struct.isSetDict_query_expr()) {
        optionals.set(34);
      }
      if (struct.isSetDictionary_get_expr()) {
        optionals.set(35);
      }
      oprot.writeBitSet(optionals, 36);
      if (struct.isSetOpcode()) {
        oprot.writeI32(struct.opcode.getValue());
      }
      if (struct.isSetAgg_expr()) {
        struct.agg_expr.write(oprot);
      }
      if (struct.isSetBool_literal()) {
        struct.bool_literal.write(oprot);
      }
      if (struct.isSetCase_expr()) {
        struct.case_expr.write(oprot);
      }
      if (struct.isSetDate_literal()) {
        struct.date_literal.write(oprot);
      }
      if (struct.isSetFloat_literal()) {
        struct.float_literal.write(oprot);
      }
      if (struct.isSetInt_literal()) {
        struct.int_literal.write(oprot);
      }
      if (struct.isSetIn_predicate()) {
        struct.in_predicate.write(oprot);
      }
      if (struct.isSetIs_null_pred()) {
        struct.is_null_pred.write(oprot);
      }
      if (struct.isSetLike_pred()) {
        struct.like_pred.write(oprot);
      }
      if (struct.isSetLiteral_pred()) {
        struct.literal_pred.write(oprot);
      }
      if (struct.isSetSlot_ref()) {
        struct.slot_ref.write(oprot);
      }
      if (struct.isSetString_literal()) {
        struct.string_literal.write(oprot);
      }
      if (struct.isSetTuple_is_null_pred()) {
        struct.tuple_is_null_pred.write(oprot);
      }
      if (struct.isSetInfo_func()) {
        struct.info_func.write(oprot);
      }
      if (struct.isSetDecimal_literal()) {
        struct.decimal_literal.write(oprot);
      }
      if (struct.isSetFn_call_expr()) {
        struct.fn_call_expr.write(oprot);
      }
      if (struct.isSetLarge_int_literal()) {
        struct.large_int_literal.write(oprot);
      }
      if (struct.isSetOutput_column()) {
        oprot.writeI32(struct.output_column);
      }
      if (struct.isSetOutput_type()) {
        struct.output_type.write(oprot);
      }
      if (struct.isSetVector_opcode()) {
        oprot.writeI32(struct.vector_opcode.getValue());
      }
      if (struct.isSetFn()) {
        struct.fn.write(oprot);
      }
      if (struct.isSetVararg_start_idx()) {
        oprot.writeI32(struct.vararg_start_idx);
      }
      if (struct.isSetChild_type()) {
        oprot.writeI32(struct.child_type.getValue());
      }
      if (struct.isSetVslot_ref()) {
        struct.vslot_ref.write(oprot);
      }
      if (struct.isSetUsed_subfield_names()) {
        {
          oprot.writeI32(struct.used_subfield_names.size());
          for (java.lang.String _iter30 : struct.used_subfield_names)
          {
            oprot.writeString(_iter30);
          }
        }
      }
      if (struct.isSetBinary_literal()) {
        struct.binary_literal.write(oprot);
      }
      if (struct.isSetCopy_flag()) {
        oprot.writeBool(struct.copy_flag);
      }
      if (struct.isSetCheck_is_out_of_bounds()) {
        oprot.writeBool(struct.check_is_out_of_bounds);
      }
      if (struct.isSetUse_vectorized()) {
        oprot.writeBool(struct.use_vectorized);
      }
      if (struct.isSetHas_nullable_child()) {
        oprot.writeBool(struct.has_nullable_child);
      }
      if (struct.isSetIs_nullable()) {
        oprot.writeBool(struct.is_nullable);
      }
      if (struct.isSetChild_type_desc()) {
        struct.child_type_desc.write(oprot);
      }
      if (struct.isSetIs_monotonic()) {
        oprot.writeBool(struct.is_monotonic);
      }
      if (struct.isSetDict_query_expr()) {
        struct.dict_query_expr.write(oprot);
      }
      if (struct.isSetDictionary_get_expr()) {
        struct.dictionary_get_expr.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExprNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.node_type = io.datafibre.fibre.thrift.TExprNodeType.findByValue(iprot.readI32());
      struct.setNode_typeIsSet(true);
      struct.type = new io.datafibre.fibre.thrift.TTypeDesc();
      struct.type.read(iprot);
      struct.setTypeIsSet(true);
      struct.num_children = iprot.readI32();
      struct.setNum_childrenIsSet(true);
      struct.output_scale = iprot.readI32();
      struct.setOutput_scaleIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(36);
      if (incoming.get(0)) {
        struct.opcode = io.datafibre.fibre.thrift.TExprOpcode.findByValue(iprot.readI32());
        struct.setOpcodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.agg_expr = new TAggregateExpr();
        struct.agg_expr.read(iprot);
        struct.setAgg_exprIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bool_literal = new TBoolLiteral();
        struct.bool_literal.read(iprot);
        struct.setBool_literalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.case_expr = new TCaseExpr();
        struct.case_expr.read(iprot);
        struct.setCase_exprIsSet(true);
      }
      if (incoming.get(4)) {
        struct.date_literal = new TDateLiteral();
        struct.date_literal.read(iprot);
        struct.setDate_literalIsSet(true);
      }
      if (incoming.get(5)) {
        struct.float_literal = new TFloatLiteral();
        struct.float_literal.read(iprot);
        struct.setFloat_literalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.int_literal = new TIntLiteral();
        struct.int_literal.read(iprot);
        struct.setInt_literalIsSet(true);
      }
      if (incoming.get(7)) {
        struct.in_predicate = new TInPredicate();
        struct.in_predicate.read(iprot);
        struct.setIn_predicateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.is_null_pred = new TIsNullPredicate();
        struct.is_null_pred.read(iprot);
        struct.setIs_null_predIsSet(true);
      }
      if (incoming.get(9)) {
        struct.like_pred = new TLikePredicate();
        struct.like_pred.read(iprot);
        struct.setLike_predIsSet(true);
      }
      if (incoming.get(10)) {
        struct.literal_pred = new TLiteralPredicate();
        struct.literal_pred.read(iprot);
        struct.setLiteral_predIsSet(true);
      }
      if (incoming.get(11)) {
        struct.slot_ref = new TSlotRef();
        struct.slot_ref.read(iprot);
        struct.setSlot_refIsSet(true);
      }
      if (incoming.get(12)) {
        struct.string_literal = new TStringLiteral();
        struct.string_literal.read(iprot);
        struct.setString_literalIsSet(true);
      }
      if (incoming.get(13)) {
        struct.tuple_is_null_pred = new TTupleIsNullPredicate();
        struct.tuple_is_null_pred.read(iprot);
        struct.setTuple_is_null_predIsSet(true);
      }
      if (incoming.get(14)) {
        struct.info_func = new TInfoFunc();
        struct.info_func.read(iprot);
        struct.setInfo_funcIsSet(true);
      }
      if (incoming.get(15)) {
        struct.decimal_literal = new TDecimalLiteral();
        struct.decimal_literal.read(iprot);
        struct.setDecimal_literalIsSet(true);
      }
      if (incoming.get(16)) {
        struct.fn_call_expr = new TFunctionCallExpr();
        struct.fn_call_expr.read(iprot);
        struct.setFn_call_exprIsSet(true);
      }
      if (incoming.get(17)) {
        struct.large_int_literal = new TLargeIntLiteral();
        struct.large_int_literal.read(iprot);
        struct.setLarge_int_literalIsSet(true);
      }
      if (incoming.get(18)) {
        struct.output_column = iprot.readI32();
        struct.setOutput_columnIsSet(true);
      }
      if (incoming.get(19)) {
        struct.output_type = new io.datafibre.fibre.thrift.TColumnType();
        struct.output_type.read(iprot);
        struct.setOutput_typeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.vector_opcode = io.datafibre.fibre.thrift.TExprOpcode.findByValue(iprot.readI32());
        struct.setVector_opcodeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.fn = new io.datafibre.fibre.thrift.TFunction();
        struct.fn.read(iprot);
        struct.setFnIsSet(true);
      }
      if (incoming.get(22)) {
        struct.vararg_start_idx = iprot.readI32();
        struct.setVararg_start_idxIsSet(true);
      }
      if (incoming.get(23)) {
        struct.child_type = io.datafibre.fibre.thrift.TPrimitiveType.findByValue(iprot.readI32());
        struct.setChild_typeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.vslot_ref = new TPlaceHolder();
        struct.vslot_ref.read(iprot);
        struct.setVslot_refIsSet(true);
      }
      if (incoming.get(25)) {
        {
          org.apache.thrift.protocol.TList _list31 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.used_subfield_names = new java.util.ArrayList<java.lang.String>(_list31.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = iprot.readString();
            struct.used_subfield_names.add(_elem32);
          }
        }
        struct.setUsed_subfield_namesIsSet(true);
      }
      if (incoming.get(26)) {
        struct.binary_literal = new TBinaryLiteral();
        struct.binary_literal.read(iprot);
        struct.setBinary_literalIsSet(true);
      }
      if (incoming.get(27)) {
        struct.copy_flag = iprot.readBool();
        struct.setCopy_flagIsSet(true);
      }
      if (incoming.get(28)) {
        struct.check_is_out_of_bounds = iprot.readBool();
        struct.setCheck_is_out_of_boundsIsSet(true);
      }
      if (incoming.get(29)) {
        struct.use_vectorized = iprot.readBool();
        struct.setUse_vectorizedIsSet(true);
      }
      if (incoming.get(30)) {
        struct.has_nullable_child = iprot.readBool();
        struct.setHas_nullable_childIsSet(true);
      }
      if (incoming.get(31)) {
        struct.is_nullable = iprot.readBool();
        struct.setIs_nullableIsSet(true);
      }
      if (incoming.get(32)) {
        struct.child_type_desc = new io.datafibre.fibre.thrift.TTypeDesc();
        struct.child_type_desc.read(iprot);
        struct.setChild_type_descIsSet(true);
      }
      if (incoming.get(33)) {
        struct.is_monotonic = iprot.readBool();
        struct.setIs_monotonicIsSet(true);
      }
      if (incoming.get(34)) {
        struct.dict_query_expr = new TDictQueryExpr();
        struct.dict_query_expr.read(iprot);
        struct.setDict_query_exprIsSet(true);
      }
      if (incoming.get(35)) {
        struct.dictionary_get_expr = new TDictionaryGetExpr();
        struct.dictionary_get_expr.read(iprot);
        struct.setDictionary_get_exprIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

