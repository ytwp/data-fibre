// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: segment.proto

package com.starrocks.proto;

public interface DataPageFooterPBOrBuilder extends
    // @@protoc_insertion_point(interface_extends:starrocks.DataPageFooterPB)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * required: ordinal of the first value
   * </pre>
   *
   * <code>optional uint64 first_ordinal = 1;</code>
   * @return Whether the firstOrdinal field is set.
   */
  boolean hasFirstOrdinal();
  /**
   * <pre>
   * required: ordinal of the first value
   * </pre>
   *
   * <code>optional uint64 first_ordinal = 1;</code>
   * @return The firstOrdinal.
   */
  long getFirstOrdinal();

  /**
   * <pre>
   * required: number of values, including NULLs
   * </pre>
   *
   * <code>optional uint64 num_values = 2;</code>
   * @return Whether the numValues field is set.
   */
  boolean hasNumValues();
  /**
   * <pre>
   * required: number of values, including NULLs
   * </pre>
   *
   * <code>optional uint64 num_values = 2;</code>
   * @return The numValues.
   */
  long getNumValues();

  /**
   * <pre>
   * required: size of nullmap, 0 if the page doesn't contain NULL
   * </pre>
   *
   * <code>optional uint32 nullmap_size = 3;</code>
   * @return Whether the nullmapSize field is set.
   */
  boolean hasNullmapSize();
  /**
   * <pre>
   * required: size of nullmap, 0 if the page doesn't contain NULL
   * </pre>
   *
   * <code>optional uint32 nullmap_size = 3;</code>
   * @return The nullmapSize.
   */
  int getNullmapSize();

  /**
   * <pre>
   * array column is made up of offset and element.
   * every ordinal in offset column corresponds to a ordinal element.
   * If there is a array column like [1, 2, 3], [4, 5, 6]
   * The ordinal 2 in offset column corresponds to ordinal 4 in element column.
   * ordinal of element column only for array column, largest array item ordinal + 1,
   * used to calculate the length of last array in this page
   * </pre>
   *
   * <code>optional uint64 corresponding_element_ordinal = 4;</code>
   * @return Whether the correspondingElementOrdinal field is set.
   */
  boolean hasCorrespondingElementOrdinal();
  /**
   * <pre>
   * array column is made up of offset and element.
   * every ordinal in offset column corresponds to a ordinal element.
   * If there is a array column like [1, 2, 3], [4, 5, 6]
   * The ordinal 2 in offset column corresponds to ordinal 4 in element column.
   * ordinal of element column only for array column, largest array item ordinal + 1,
   * used to calculate the length of last array in this page
   * </pre>
   *
   * <code>optional uint64 corresponding_element_ordinal = 4;</code>
   * @return The correspondingElementOrdinal.
   */
  long getCorrespondingElementOrdinal();

  /**
   * <pre>
   * possible values: 1, 2
   * if format_version is 1, no value will be stored in this page for NULL records;
   * if format_version is 2, a default value will be stored for each NULL record.
   * another difference is that the format 1 use Run-Length encoding to encode the null map,
   * while format 2 use the bitshuffle.
   * </pre>
   *
   * <code>optional uint32 format_version = 20;</code>
   * @return Whether the formatVersion field is set.
   */
  boolean hasFormatVersion();
  /**
   * <pre>
   * possible values: 1, 2
   * if format_version is 1, no value will be stored in this page for NULL records;
   * if format_version is 2, a default value will be stored for each NULL record.
   * another difference is that the format 1 use Run-Length encoding to encode the null map,
   * while format 2 use the bitshuffle.
   * </pre>
   *
   * <code>optional uint32 format_version = 20;</code>
   * @return The formatVersion.
   */
  int getFormatVersion();

  /**
   * <code>optional .starrocks.NullEncodingPB null_encoding = 21;</code>
   * @return Whether the nullEncoding field is set.
   */
  boolean hasNullEncoding();
  /**
   * <code>optional .starrocks.NullEncodingPB null_encoding = 21;</code>
   * @return The nullEncoding.
   */
  com.starrocks.proto.NullEncodingPB getNullEncoding();
}
