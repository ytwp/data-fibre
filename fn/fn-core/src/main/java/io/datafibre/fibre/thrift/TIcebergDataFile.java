/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TIcebergDataFile implements org.apache.thrift.TBase<TIcebergDataFile, TIcebergDataFile._Fields>, java.io.Serializable, Cloneable, Comparable<TIcebergDataFile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIcebergDataFile");

  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("format", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RECORD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("record_count", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_IN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("file_size_in_bytes", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField PARTITION_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_path", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SPLIT_OFFSETS_FIELD_DESC = new org.apache.thrift.protocol.TField("split_offsets", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField COLUMN_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("column_stats", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TIcebergDataFileStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TIcebergDataFileTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String path; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String format; // optional
  public long record_count; // optional
  public long file_size_in_bytes; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String partition_path; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> split_offsets; // optional
  public @org.apache.thrift.annotation.Nullable TIcebergColumnStats column_stats; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PATH((short)1, "path"),
    FORMAT((short)2, "format"),
    RECORD_COUNT((short)3, "record_count"),
    FILE_SIZE_IN_BYTES((short)4, "file_size_in_bytes"),
    PARTITION_PATH((short)5, "partition_path"),
    SPLIT_OFFSETS((short)6, "split_offsets"),
    COLUMN_STATS((short)7, "column_stats");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PATH
          return PATH;
        case 2: // FORMAT
          return FORMAT;
        case 3: // RECORD_COUNT
          return RECORD_COUNT;
        case 4: // FILE_SIZE_IN_BYTES
          return FILE_SIZE_IN_BYTES;
        case 5: // PARTITION_PATH
          return PARTITION_PATH;
        case 6: // SPLIT_OFFSETS
          return SPLIT_OFFSETS;
        case 7: // COLUMN_STATS
          return COLUMN_STATS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECORD_COUNT_ISSET_ID = 0;
  private static final int __FILE_SIZE_IN_BYTES_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PATH,_Fields.FORMAT,_Fields.RECORD_COUNT,_Fields.FILE_SIZE_IN_BYTES,_Fields.PARTITION_PATH,_Fields.SPLIT_OFFSETS,_Fields.COLUMN_STATS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORMAT, new org.apache.thrift.meta_data.FieldMetaData("format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("record_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_SIZE_IN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("file_size_in_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_PATH, new org.apache.thrift.meta_data.FieldMetaData("partition_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPLIT_OFFSETS, new org.apache.thrift.meta_data.FieldMetaData("split_offsets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.COLUMN_STATS, new org.apache.thrift.meta_data.FieldMetaData("column_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIcebergColumnStats.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TIcebergDataFile.class, metaDataMap);
  }

  public TIcebergDataFile() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TIcebergDataFile(TIcebergDataFile other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetFormat()) {
      this.format = other.format;
    }
    this.record_count = other.record_count;
    this.file_size_in_bytes = other.file_size_in_bytes;
    if (other.isSetPartition_path()) {
      this.partition_path = other.partition_path;
    }
    if (other.isSetSplit_offsets()) {
      java.util.List<java.lang.Long> __this__split_offsets = new java.util.ArrayList<java.lang.Long>(other.split_offsets);
      this.split_offsets = __this__split_offsets;
    }
    if (other.isSetColumn_stats()) {
      this.column_stats = new TIcebergColumnStats(other.column_stats);
    }
  }

  @Override
  public TIcebergDataFile deepCopy() {
    return new TIcebergDataFile(this);
  }

  @Override
  public void clear() {
    this.path = null;
    this.format = null;
    setRecord_countIsSet(false);
    this.record_count = 0;
    setFile_size_in_bytesIsSet(false);
    this.file_size_in_bytes = 0;
    this.partition_path = null;
    this.split_offsets = null;
    this.column_stats = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPath() {
    return this.path;
  }

  public TIcebergDataFile setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFormat() {
    return this.format;
  }

  public TIcebergDataFile setFormat(@org.apache.thrift.annotation.Nullable java.lang.String format) {
    this.format = format;
    return this;
  }

  public void unsetFormat() {
    this.format = null;
  }

  /** Returns true if field format is set (has been assigned a value) and false otherwise */
  public boolean isSetFormat() {
    return this.format != null;
  }

  public void setFormatIsSet(boolean value) {
    if (!value) {
      this.format = null;
    }
  }

  public long getRecord_count() {
    return this.record_count;
  }

  public TIcebergDataFile setRecord_count(long record_count) {
    this.record_count = record_count;
    setRecord_countIsSet(true);
    return this;
  }

  public void unsetRecord_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORD_COUNT_ISSET_ID);
  }

  /** Returns true if field record_count is set (has been assigned a value) and false otherwise */
  public boolean isSetRecord_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORD_COUNT_ISSET_ID);
  }

  public void setRecord_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORD_COUNT_ISSET_ID, value);
  }

  public long getFile_size_in_bytes() {
    return this.file_size_in_bytes;
  }

  public TIcebergDataFile setFile_size_in_bytes(long file_size_in_bytes) {
    this.file_size_in_bytes = file_size_in_bytes;
    setFile_size_in_bytesIsSet(true);
    return this;
  }

  public void unsetFile_size_in_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILE_SIZE_IN_BYTES_ISSET_ID);
  }

  /** Returns true if field file_size_in_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_size_in_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILE_SIZE_IN_BYTES_ISSET_ID);
  }

  public void setFile_size_in_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILE_SIZE_IN_BYTES_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartition_path() {
    return this.partition_path;
  }

  public TIcebergDataFile setPartition_path(@org.apache.thrift.annotation.Nullable java.lang.String partition_path) {
    this.partition_path = partition_path;
    return this;
  }

  public void unsetPartition_path() {
    this.partition_path = null;
  }

  /** Returns true if field partition_path is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_path() {
    return this.partition_path != null;
  }

  public void setPartition_pathIsSet(boolean value) {
    if (!value) {
      this.partition_path = null;
    }
  }

  public int getSplit_offsetsSize() {
    return (this.split_offsets == null) ? 0 : this.split_offsets.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getSplit_offsetsIterator() {
    return (this.split_offsets == null) ? null : this.split_offsets.iterator();
  }

  public void addToSplit_offsets(long elem) {
    if (this.split_offsets == null) {
      this.split_offsets = new java.util.ArrayList<java.lang.Long>();
    }
    this.split_offsets.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getSplit_offsets() {
    return this.split_offsets;
  }

  public TIcebergDataFile setSplit_offsets(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> split_offsets) {
    this.split_offsets = split_offsets;
    return this;
  }

  public void unsetSplit_offsets() {
    this.split_offsets = null;
  }

  /** Returns true if field split_offsets is set (has been assigned a value) and false otherwise */
  public boolean isSetSplit_offsets() {
    return this.split_offsets != null;
  }

  public void setSplit_offsetsIsSet(boolean value) {
    if (!value) {
      this.split_offsets = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TIcebergColumnStats getColumn_stats() {
    return this.column_stats;
  }

  public TIcebergDataFile setColumn_stats(@org.apache.thrift.annotation.Nullable TIcebergColumnStats column_stats) {
    this.column_stats = column_stats;
    return this;
  }

  public void unsetColumn_stats() {
    this.column_stats = null;
  }

  /** Returns true if field column_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_stats() {
    return this.column_stats != null;
  }

  public void setColumn_statsIsSet(boolean value) {
    if (!value) {
      this.column_stats = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((java.lang.String)value);
      }
      break;

    case FORMAT:
      if (value == null) {
        unsetFormat();
      } else {
        setFormat((java.lang.String)value);
      }
      break;

    case RECORD_COUNT:
      if (value == null) {
        unsetRecord_count();
      } else {
        setRecord_count((java.lang.Long)value);
      }
      break;

    case FILE_SIZE_IN_BYTES:
      if (value == null) {
        unsetFile_size_in_bytes();
      } else {
        setFile_size_in_bytes((java.lang.Long)value);
      }
      break;

    case PARTITION_PATH:
      if (value == null) {
        unsetPartition_path();
      } else {
        setPartition_path((java.lang.String)value);
      }
      break;

    case SPLIT_OFFSETS:
      if (value == null) {
        unsetSplit_offsets();
      } else {
        setSplit_offsets((java.util.List<java.lang.Long>)value);
      }
      break;

    case COLUMN_STATS:
      if (value == null) {
        unsetColumn_stats();
      } else {
        setColumn_stats((TIcebergColumnStats)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PATH:
      return getPath();

    case FORMAT:
      return getFormat();

    case RECORD_COUNT:
      return getRecord_count();

    case FILE_SIZE_IN_BYTES:
      return getFile_size_in_bytes();

    case PARTITION_PATH:
      return getPartition_path();

    case SPLIT_OFFSETS:
      return getSplit_offsets();

    case COLUMN_STATS:
      return getColumn_stats();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PATH:
      return isSetPath();
    case FORMAT:
      return isSetFormat();
    case RECORD_COUNT:
      return isSetRecord_count();
    case FILE_SIZE_IN_BYTES:
      return isSetFile_size_in_bytes();
    case PARTITION_PATH:
      return isSetPartition_path();
    case SPLIT_OFFSETS:
      return isSetSplit_offsets();
    case COLUMN_STATS:
      return isSetColumn_stats();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TIcebergDataFile)
      return this.equals((TIcebergDataFile)that);
    return false;
  }

  public boolean equals(TIcebergDataFile that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_format = true && this.isSetFormat();
    boolean that_present_format = true && that.isSetFormat();
    if (this_present_format || that_present_format) {
      if (!(this_present_format && that_present_format))
        return false;
      if (!this.format.equals(that.format))
        return false;
    }

    boolean this_present_record_count = true && this.isSetRecord_count();
    boolean that_present_record_count = true && that.isSetRecord_count();
    if (this_present_record_count || that_present_record_count) {
      if (!(this_present_record_count && that_present_record_count))
        return false;
      if (this.record_count != that.record_count)
        return false;
    }

    boolean this_present_file_size_in_bytes = true && this.isSetFile_size_in_bytes();
    boolean that_present_file_size_in_bytes = true && that.isSetFile_size_in_bytes();
    if (this_present_file_size_in_bytes || that_present_file_size_in_bytes) {
      if (!(this_present_file_size_in_bytes && that_present_file_size_in_bytes))
        return false;
      if (this.file_size_in_bytes != that.file_size_in_bytes)
        return false;
    }

    boolean this_present_partition_path = true && this.isSetPartition_path();
    boolean that_present_partition_path = true && that.isSetPartition_path();
    if (this_present_partition_path || that_present_partition_path) {
      if (!(this_present_partition_path && that_present_partition_path))
        return false;
      if (!this.partition_path.equals(that.partition_path))
        return false;
    }

    boolean this_present_split_offsets = true && this.isSetSplit_offsets();
    boolean that_present_split_offsets = true && that.isSetSplit_offsets();
    if (this_present_split_offsets || that_present_split_offsets) {
      if (!(this_present_split_offsets && that_present_split_offsets))
        return false;
      if (!this.split_offsets.equals(that.split_offsets))
        return false;
    }

    boolean this_present_column_stats = true && this.isSetColumn_stats();
    boolean that_present_column_stats = true && that.isSetColumn_stats();
    if (this_present_column_stats || that_present_column_stats) {
      if (!(this_present_column_stats && that_present_column_stats))
        return false;
      if (!this.column_stats.equals(that.column_stats))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
    if (isSetPath())
      hashCode = hashCode * 8191 + path.hashCode();

    hashCode = hashCode * 8191 + ((isSetFormat()) ? 131071 : 524287);
    if (isSetFormat())
      hashCode = hashCode * 8191 + format.hashCode();

    hashCode = hashCode * 8191 + ((isSetRecord_count()) ? 131071 : 524287);
    if (isSetRecord_count())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(record_count);

    hashCode = hashCode * 8191 + ((isSetFile_size_in_bytes()) ? 131071 : 524287);
    if (isSetFile_size_in_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(file_size_in_bytes);

    hashCode = hashCode * 8191 + ((isSetPartition_path()) ? 131071 : 524287);
    if (isSetPartition_path())
      hashCode = hashCode * 8191 + partition_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetSplit_offsets()) ? 131071 : 524287);
    if (isSetSplit_offsets())
      hashCode = hashCode * 8191 + split_offsets.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumn_stats()) ? 131071 : 524287);
    if (isSetColumn_stats())
      hashCode = hashCode * 8191 + column_stats.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TIcebergDataFile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFormat(), other.isSetFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format, other.format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRecord_count(), other.isSetRecord_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecord_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record_count, other.record_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_size_in_bytes(), other.isSetFile_size_in_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_size_in_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_size_in_bytes, other.file_size_in_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_path(), other.isSetPartition_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_path, other.partition_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSplit_offsets(), other.isSetSplit_offsets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplit_offsets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.split_offsets, other.split_offsets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumn_stats(), other.isSetColumn_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_stats, other.column_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TIcebergDataFile(");
    boolean first = true;

    if (isSetPath()) {
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
    }
    if (isSetFormat()) {
      if (!first) sb.append(", ");
      sb.append("format:");
      if (this.format == null) {
        sb.append("null");
      } else {
        sb.append(this.format);
      }
      first = false;
    }
    if (isSetRecord_count()) {
      if (!first) sb.append(", ");
      sb.append("record_count:");
      sb.append(this.record_count);
      first = false;
    }
    if (isSetFile_size_in_bytes()) {
      if (!first) sb.append(", ");
      sb.append("file_size_in_bytes:");
      sb.append(this.file_size_in_bytes);
      first = false;
    }
    if (isSetPartition_path()) {
      if (!first) sb.append(", ");
      sb.append("partition_path:");
      if (this.partition_path == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_path);
      }
      first = false;
    }
    if (isSetSplit_offsets()) {
      if (!first) sb.append(", ");
      sb.append("split_offsets:");
      if (this.split_offsets == null) {
        sb.append("null");
      } else {
        sb.append(this.split_offsets);
      }
      first = false;
    }
    if (isSetColumn_stats()) {
      if (!first) sb.append(", ");
      sb.append("column_stats:");
      if (this.column_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.column_stats);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (column_stats != null) {
      column_stats.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TIcebergDataFileStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIcebergDataFileStandardScheme getScheme() {
      return new TIcebergDataFileStandardScheme();
    }
  }

  private static class TIcebergDataFileStandardScheme extends org.apache.thrift.scheme.StandardScheme<TIcebergDataFile> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TIcebergDataFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.format = iprot.readString();
              struct.setFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECORD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.record_count = iprot.readI64();
              struct.setRecord_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_SIZE_IN_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.file_size_in_bytes = iprot.readI64();
              struct.setFile_size_in_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARTITION_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partition_path = iprot.readString();
              struct.setPartition_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SPLIT_OFFSETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list140 = iprot.readListBegin();
                struct.split_offsets = new java.util.ArrayList<java.lang.Long>(_list140.size);
                long _elem141;
                for (int _i142 = 0; _i142 < _list140.size; ++_i142)
                {
                  _elem141 = iprot.readI64();
                  struct.split_offsets.add(_elem141);
                }
                iprot.readListEnd();
              }
              struct.setSplit_offsetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COLUMN_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.column_stats = new TIcebergColumnStats();
              struct.column_stats.read(iprot);
              struct.setColumn_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TIcebergDataFile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.path != null) {
        if (struct.isSetPath()) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.format != null) {
        if (struct.isSetFormat()) {
          oprot.writeFieldBegin(FORMAT_FIELD_DESC);
          oprot.writeString(struct.format);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRecord_count()) {
        oprot.writeFieldBegin(RECORD_COUNT_FIELD_DESC);
        oprot.writeI64(struct.record_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFile_size_in_bytes()) {
        oprot.writeFieldBegin(FILE_SIZE_IN_BYTES_FIELD_DESC);
        oprot.writeI64(struct.file_size_in_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.partition_path != null) {
        if (struct.isSetPartition_path()) {
          oprot.writeFieldBegin(PARTITION_PATH_FIELD_DESC);
          oprot.writeString(struct.partition_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.split_offsets != null) {
        if (struct.isSetSplit_offsets()) {
          oprot.writeFieldBegin(SPLIT_OFFSETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.split_offsets.size()));
            for (long _iter143 : struct.split_offsets)
            {
              oprot.writeI64(_iter143);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_stats != null) {
        if (struct.isSetColumn_stats()) {
          oprot.writeFieldBegin(COLUMN_STATS_FIELD_DESC);
          struct.column_stats.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TIcebergDataFileTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIcebergDataFileTupleScheme getScheme() {
      return new TIcebergDataFileTupleScheme();
    }
  }

  private static class TIcebergDataFileTupleScheme extends org.apache.thrift.scheme.TupleScheme<TIcebergDataFile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TIcebergDataFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPath()) {
        optionals.set(0);
      }
      if (struct.isSetFormat()) {
        optionals.set(1);
      }
      if (struct.isSetRecord_count()) {
        optionals.set(2);
      }
      if (struct.isSetFile_size_in_bytes()) {
        optionals.set(3);
      }
      if (struct.isSetPartition_path()) {
        optionals.set(4);
      }
      if (struct.isSetSplit_offsets()) {
        optionals.set(5);
      }
      if (struct.isSetColumn_stats()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetFormat()) {
        oprot.writeString(struct.format);
      }
      if (struct.isSetRecord_count()) {
        oprot.writeI64(struct.record_count);
      }
      if (struct.isSetFile_size_in_bytes()) {
        oprot.writeI64(struct.file_size_in_bytes);
      }
      if (struct.isSetPartition_path()) {
        oprot.writeString(struct.partition_path);
      }
      if (struct.isSetSplit_offsets()) {
        {
          oprot.writeI32(struct.split_offsets.size());
          for (long _iter144 : struct.split_offsets)
          {
            oprot.writeI64(_iter144);
          }
        }
      }
      if (struct.isSetColumn_stats()) {
        struct.column_stats.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TIcebergDataFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.format = iprot.readString();
        struct.setFormatIsSet(true);
      }
      if (incoming.get(2)) {
        struct.record_count = iprot.readI64();
        struct.setRecord_countIsSet(true);
      }
      if (incoming.get(3)) {
        struct.file_size_in_bytes = iprot.readI64();
        struct.setFile_size_in_bytesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.partition_path = iprot.readString();
        struct.setPartition_pathIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list145 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.split_offsets = new java.util.ArrayList<java.lang.Long>(_list145.size);
          long _elem146;
          for (int _i147 = 0; _i147 < _list145.size; ++_i147)
          {
            _elem146 = iprot.readI64();
            struct.split_offsets.add(_elem146);
          }
        }
        struct.setSplit_offsetsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.column_stats = new TIcebergColumnStats();
        struct.column_stats.read(iprot);
        struct.setColumn_statsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

