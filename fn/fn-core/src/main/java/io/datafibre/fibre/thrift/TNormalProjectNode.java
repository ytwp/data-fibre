/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TNormalProjectNode implements org.apache.thrift.TBase<TNormalProjectNode, TNormalProjectNode._Fields>, java.io.Serializable, Cloneable, Comparable<TNormalProjectNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNormalProjectNode");

  private static final org.apache.thrift.protocol.TField SLOT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("slot_ids", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("exprs", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CSE_SLOT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cse_slot_ids", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CSE_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("cse_exprs", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TNormalProjectNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TNormalProjectNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> slot_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> exprs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> cse_slot_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> cse_exprs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLOT_IDS((short)1, "slot_ids"),
    EXPRS((short)2, "exprs"),
    CSE_SLOT_IDS((short)3, "cse_slot_ids"),
    CSE_EXPRS((short)4, "cse_exprs");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLOT_IDS
          return SLOT_IDS;
        case 2: // EXPRS
          return EXPRS;
        case 3: // CSE_SLOT_IDS
          return CSE_SLOT_IDS;
        case 4: // CSE_EXPRS
          return CSE_EXPRS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SLOT_IDS,_Fields.EXPRS,_Fields.CSE_SLOT_IDS,_Fields.CSE_EXPRS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLOT_IDS, new org.apache.thrift.meta_data.FieldMetaData("slot_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    tmpMap.put(_Fields.EXPRS, new org.apache.thrift.meta_data.FieldMetaData("exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.CSE_SLOT_IDS, new org.apache.thrift.meta_data.FieldMetaData("cse_slot_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    tmpMap.put(_Fields.CSE_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("cse_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNormalProjectNode.class, metaDataMap);
  }

  public TNormalProjectNode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNormalProjectNode(TNormalProjectNode other) {
    if (other.isSetSlot_ids()) {
      java.util.List<java.lang.Integer> __this__slot_ids = new java.util.ArrayList<java.lang.Integer>(other.slot_ids.size());
      for (java.lang.Integer other_element : other.slot_ids) {
        __this__slot_ids.add(other_element);
      }
      this.slot_ids = __this__slot_ids;
    }
    if (other.isSetExprs()) {
      java.util.List<java.nio.ByteBuffer> __this__exprs = new java.util.ArrayList<java.nio.ByteBuffer>(other.exprs);
      this.exprs = __this__exprs;
    }
    if (other.isSetCse_slot_ids()) {
      java.util.List<java.lang.Integer> __this__cse_slot_ids = new java.util.ArrayList<java.lang.Integer>(other.cse_slot_ids.size());
      for (java.lang.Integer other_element : other.cse_slot_ids) {
        __this__cse_slot_ids.add(other_element);
      }
      this.cse_slot_ids = __this__cse_slot_ids;
    }
    if (other.isSetCse_exprs()) {
      java.util.List<java.nio.ByteBuffer> __this__cse_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(other.cse_exprs);
      this.cse_exprs = __this__cse_exprs;
    }
  }

  @Override
  public TNormalProjectNode deepCopy() {
    return new TNormalProjectNode(this);
  }

  @Override
  public void clear() {
    this.slot_ids = null;
    this.exprs = null;
    this.cse_slot_ids = null;
    this.cse_exprs = null;
  }

  public int getSlot_idsSize() {
    return (this.slot_ids == null) ? 0 : this.slot_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getSlot_idsIterator() {
    return (this.slot_ids == null) ? null : this.slot_ids.iterator();
  }

  public void addToSlot_ids(int elem) {
    if (this.slot_ids == null) {
      this.slot_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.slot_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getSlot_ids() {
    return this.slot_ids;
  }

  public TNormalProjectNode setSlot_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> slot_ids) {
    this.slot_ids = slot_ids;
    return this;
  }

  public void unsetSlot_ids() {
    this.slot_ids = null;
  }

  /** Returns true if field slot_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetSlot_ids() {
    return this.slot_ids != null;
  }

  public void setSlot_idsIsSet(boolean value) {
    if (!value) {
      this.slot_ids = null;
    }
  }

  public int getExprsSize() {
    return (this.exprs == null) ? 0 : this.exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getExprsIterator() {
    return (this.exprs == null) ? null : this.exprs.iterator();
  }

  public void addToExprs(java.nio.ByteBuffer elem) {
    if (this.exprs == null) {
      this.exprs = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getExprs() {
    return this.exprs;
  }

  public TNormalProjectNode setExprs(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> exprs) {
    this.exprs = exprs;
    return this;
  }

  public void unsetExprs() {
    this.exprs = null;
  }

  /** Returns true if field exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetExprs() {
    return this.exprs != null;
  }

  public void setExprsIsSet(boolean value) {
    if (!value) {
      this.exprs = null;
    }
  }

  public int getCse_slot_idsSize() {
    return (this.cse_slot_ids == null) ? 0 : this.cse_slot_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getCse_slot_idsIterator() {
    return (this.cse_slot_ids == null) ? null : this.cse_slot_ids.iterator();
  }

  public void addToCse_slot_ids(int elem) {
    if (this.cse_slot_ids == null) {
      this.cse_slot_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.cse_slot_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getCse_slot_ids() {
    return this.cse_slot_ids;
  }

  public TNormalProjectNode setCse_slot_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> cse_slot_ids) {
    this.cse_slot_ids = cse_slot_ids;
    return this;
  }

  public void unsetCse_slot_ids() {
    this.cse_slot_ids = null;
  }

  /** Returns true if field cse_slot_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetCse_slot_ids() {
    return this.cse_slot_ids != null;
  }

  public void setCse_slot_idsIsSet(boolean value) {
    if (!value) {
      this.cse_slot_ids = null;
    }
  }

  public int getCse_exprsSize() {
    return (this.cse_exprs == null) ? 0 : this.cse_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getCse_exprsIterator() {
    return (this.cse_exprs == null) ? null : this.cse_exprs.iterator();
  }

  public void addToCse_exprs(java.nio.ByteBuffer elem) {
    if (this.cse_exprs == null) {
      this.cse_exprs = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.cse_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getCse_exprs() {
    return this.cse_exprs;
  }

  public TNormalProjectNode setCse_exprs(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> cse_exprs) {
    this.cse_exprs = cse_exprs;
    return this;
  }

  public void unsetCse_exprs() {
    this.cse_exprs = null;
  }

  /** Returns true if field cse_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetCse_exprs() {
    return this.cse_exprs != null;
  }

  public void setCse_exprsIsSet(boolean value) {
    if (!value) {
      this.cse_exprs = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SLOT_IDS:
      if (value == null) {
        unsetSlot_ids();
      } else {
        setSlot_ids((java.util.List<java.lang.Integer>)value);
      }
      break;

    case EXPRS:
      if (value == null) {
        unsetExprs();
      } else {
        setExprs((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case CSE_SLOT_IDS:
      if (value == null) {
        unsetCse_slot_ids();
      } else {
        setCse_slot_ids((java.util.List<java.lang.Integer>)value);
      }
      break;

    case CSE_EXPRS:
      if (value == null) {
        unsetCse_exprs();
      } else {
        setCse_exprs((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SLOT_IDS:
      return getSlot_ids();

    case EXPRS:
      return getExprs();

    case CSE_SLOT_IDS:
      return getCse_slot_ids();

    case CSE_EXPRS:
      return getCse_exprs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SLOT_IDS:
      return isSetSlot_ids();
    case EXPRS:
      return isSetExprs();
    case CSE_SLOT_IDS:
      return isSetCse_slot_ids();
    case CSE_EXPRS:
      return isSetCse_exprs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TNormalProjectNode)
      return this.equals((TNormalProjectNode)that);
    return false;
  }

  public boolean equals(TNormalProjectNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_slot_ids = true && this.isSetSlot_ids();
    boolean that_present_slot_ids = true && that.isSetSlot_ids();
    if (this_present_slot_ids || that_present_slot_ids) {
      if (!(this_present_slot_ids && that_present_slot_ids))
        return false;
      if (!this.slot_ids.equals(that.slot_ids))
        return false;
    }

    boolean this_present_exprs = true && this.isSetExprs();
    boolean that_present_exprs = true && that.isSetExprs();
    if (this_present_exprs || that_present_exprs) {
      if (!(this_present_exprs && that_present_exprs))
        return false;
      if (!this.exprs.equals(that.exprs))
        return false;
    }

    boolean this_present_cse_slot_ids = true && this.isSetCse_slot_ids();
    boolean that_present_cse_slot_ids = true && that.isSetCse_slot_ids();
    if (this_present_cse_slot_ids || that_present_cse_slot_ids) {
      if (!(this_present_cse_slot_ids && that_present_cse_slot_ids))
        return false;
      if (!this.cse_slot_ids.equals(that.cse_slot_ids))
        return false;
    }

    boolean this_present_cse_exprs = true && this.isSetCse_exprs();
    boolean that_present_cse_exprs = true && that.isSetCse_exprs();
    if (this_present_cse_exprs || that_present_cse_exprs) {
      if (!(this_present_cse_exprs && that_present_cse_exprs))
        return false;
      if (!this.cse_exprs.equals(that.cse_exprs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSlot_ids()) ? 131071 : 524287);
    if (isSetSlot_ids())
      hashCode = hashCode * 8191 + slot_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetExprs()) ? 131071 : 524287);
    if (isSetExprs())
      hashCode = hashCode * 8191 + exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetCse_slot_ids()) ? 131071 : 524287);
    if (isSetCse_slot_ids())
      hashCode = hashCode * 8191 + cse_slot_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetCse_exprs()) ? 131071 : 524287);
    if (isSetCse_exprs())
      hashCode = hashCode * 8191 + cse_exprs.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TNormalProjectNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSlot_ids(), other.isSetSlot_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlot_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slot_ids, other.slot_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExprs(), other.isSetExprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exprs, other.exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCse_slot_ids(), other.isSetCse_slot_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCse_slot_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cse_slot_ids, other.cse_slot_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCse_exprs(), other.isSetCse_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCse_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cse_exprs, other.cse_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TNormalProjectNode(");
    boolean first = true;

    if (isSetSlot_ids()) {
      sb.append("slot_ids:");
      if (this.slot_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.slot_ids);
      }
      first = false;
    }
    if (isSetExprs()) {
      if (!first) sb.append(", ");
      sb.append("exprs:");
      if (this.exprs == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.exprs, sb);
      }
      first = false;
    }
    if (isSetCse_slot_ids()) {
      if (!first) sb.append(", ");
      sb.append("cse_slot_ids:");
      if (this.cse_slot_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.cse_slot_ids);
      }
      first = false;
    }
    if (isSetCse_exprs()) {
      if (!first) sb.append(", ");
      sb.append("cse_exprs:");
      if (this.cse_exprs == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.cse_exprs, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNormalProjectNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalProjectNodeStandardScheme getScheme() {
      return new TNormalProjectNodeStandardScheme();
    }
  }

  private static class TNormalProjectNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TNormalProjectNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TNormalProjectNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLOT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.slot_ids = new java.util.ArrayList<java.lang.Integer>(_list72.size);
                int _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = iprot.readI32();
                  struct.slot_ids.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setSlot_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                struct.exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list75.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem76;
                for (int _i77 = 0; _i77 < _list75.size; ++_i77)
                {
                  _elem76 = iprot.readBinary();
                  struct.exprs.add(_elem76);
                }
                iprot.readListEnd();
              }
              struct.setExprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CSE_SLOT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list78 = iprot.readListBegin();
                struct.cse_slot_ids = new java.util.ArrayList<java.lang.Integer>(_list78.size);
                int _elem79;
                for (int _i80 = 0; _i80 < _list78.size; ++_i80)
                {
                  _elem79 = iprot.readI32();
                  struct.cse_slot_ids.add(_elem79);
                }
                iprot.readListEnd();
              }
              struct.setCse_slot_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CSE_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list81 = iprot.readListBegin();
                struct.cse_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list81.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem82;
                for (int _i83 = 0; _i83 < _list81.size; ++_i83)
                {
                  _elem82 = iprot.readBinary();
                  struct.cse_exprs.add(_elem82);
                }
                iprot.readListEnd();
              }
              struct.setCse_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TNormalProjectNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.slot_ids != null) {
        if (struct.isSetSlot_ids()) {
          oprot.writeFieldBegin(SLOT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.slot_ids.size()));
            for (int _iter84 : struct.slot_ids)
            {
              oprot.writeI32(_iter84);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.exprs != null) {
        if (struct.isSetExprs()) {
          oprot.writeFieldBegin(EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.exprs.size()));
            for (java.nio.ByteBuffer _iter85 : struct.exprs)
            {
              oprot.writeBinary(_iter85);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.cse_slot_ids != null) {
        if (struct.isSetCse_slot_ids()) {
          oprot.writeFieldBegin(CSE_SLOT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.cse_slot_ids.size()));
            for (int _iter86 : struct.cse_slot_ids)
            {
              oprot.writeI32(_iter86);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.cse_exprs != null) {
        if (struct.isSetCse_exprs()) {
          oprot.writeFieldBegin(CSE_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cse_exprs.size()));
            for (java.nio.ByteBuffer _iter87 : struct.cse_exprs)
            {
              oprot.writeBinary(_iter87);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNormalProjectNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalProjectNodeTupleScheme getScheme() {
      return new TNormalProjectNodeTupleScheme();
    }
  }

  private static class TNormalProjectNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TNormalProjectNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNormalProjectNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSlot_ids()) {
        optionals.set(0);
      }
      if (struct.isSetExprs()) {
        optionals.set(1);
      }
      if (struct.isSetCse_slot_ids()) {
        optionals.set(2);
      }
      if (struct.isSetCse_exprs()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSlot_ids()) {
        {
          oprot.writeI32(struct.slot_ids.size());
          for (int _iter88 : struct.slot_ids)
          {
            oprot.writeI32(_iter88);
          }
        }
      }
      if (struct.isSetExprs()) {
        {
          oprot.writeI32(struct.exprs.size());
          for (java.nio.ByteBuffer _iter89 : struct.exprs)
          {
            oprot.writeBinary(_iter89);
          }
        }
      }
      if (struct.isSetCse_slot_ids()) {
        {
          oprot.writeI32(struct.cse_slot_ids.size());
          for (int _iter90 : struct.cse_slot_ids)
          {
            oprot.writeI32(_iter90);
          }
        }
      }
      if (struct.isSetCse_exprs()) {
        {
          oprot.writeI32(struct.cse_exprs.size());
          for (java.nio.ByteBuffer _iter91 : struct.cse_exprs)
          {
            oprot.writeBinary(_iter91);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNormalProjectNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list92 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.slot_ids = new java.util.ArrayList<java.lang.Integer>(_list92.size);
          int _elem93;
          for (int _i94 = 0; _i94 < _list92.size; ++_i94)
          {
            _elem93 = iprot.readI32();
            struct.slot_ids.add(_elem93);
          }
        }
        struct.setSlot_idsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list95 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list95.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem96;
          for (int _i97 = 0; _i97 < _list95.size; ++_i97)
          {
            _elem96 = iprot.readBinary();
            struct.exprs.add(_elem96);
          }
        }
        struct.setExprsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list98 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.cse_slot_ids = new java.util.ArrayList<java.lang.Integer>(_list98.size);
          int _elem99;
          for (int _i100 = 0; _i100 < _list98.size; ++_i100)
          {
            _elem99 = iprot.readI32();
            struct.cse_slot_ids.add(_elem99);
          }
        }
        struct.setCse_slot_idsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list101 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.cse_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list101.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem102;
          for (int _i103 = 0; _i103 < _list101.size; ++_i103)
          {
            _elem102 = iprot.readBinary();
            struct.cse_exprs.add(_elem102);
          }
        }
        struct.setCse_exprsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

