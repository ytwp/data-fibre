/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TGetTableMetaResponse implements org.apache.thrift.TBase<TGetTableMetaResponse, TGetTableMetaResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TGetTableMetaResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGetTableMetaResponse");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_META_FIELD_DESC = new org.apache.thrift.protocol.TField("table_meta", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField BACKENDS_FIELD_DESC = new org.apache.thrift.protocol.TField("backends", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TGetTableMetaResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TGetTableMetaResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TStatus status; // optional
  public @org.apache.thrift.annotation.Nullable TTableMeta table_meta; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TBackendMeta> backends; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    TABLE_META((short)2, "table_meta"),
    BACKENDS((short)3, "backends");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // TABLE_META
          return TABLE_META;
        case 3: // BACKENDS
          return BACKENDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.STATUS,_Fields.TABLE_META,_Fields.BACKENDS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TStatus.class)));
    tmpMap.put(_Fields.TABLE_META, new org.apache.thrift.meta_data.FieldMetaData("table_meta", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableMeta.class)));
    tmpMap.put(_Fields.BACKENDS, new org.apache.thrift.meta_data.FieldMetaData("backends", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBackendMeta.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGetTableMetaResponse.class, metaDataMap);
  }

  public TGetTableMetaResponse() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGetTableMetaResponse(TGetTableMetaResponse other) {
    if (other.isSetStatus()) {
      this.status = new io.datafibre.fibre.thrift.TStatus(other.status);
    }
    if (other.isSetTable_meta()) {
      this.table_meta = new TTableMeta(other.table_meta);
    }
    if (other.isSetBackends()) {
      java.util.List<TBackendMeta> __this__backends = new java.util.ArrayList<TBackendMeta>(other.backends.size());
      for (TBackendMeta other_element : other.backends) {
        __this__backends.add(new TBackendMeta(other_element));
      }
      this.backends = __this__backends;
    }
  }

  @Override
  public TGetTableMetaResponse deepCopy() {
    return new TGetTableMetaResponse(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.table_meta = null;
    this.backends = null;
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TStatus getStatus() {
    return this.status;
  }

  public TGetTableMetaResponse setStatus(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TTableMeta getTable_meta() {
    return this.table_meta;
  }

  public TGetTableMetaResponse setTable_meta(@org.apache.thrift.annotation.Nullable TTableMeta table_meta) {
    this.table_meta = table_meta;
    return this;
  }

  public void unsetTable_meta() {
    this.table_meta = null;
  }

  /** Returns true if field table_meta is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_meta() {
    return this.table_meta != null;
  }

  public void setTable_metaIsSet(boolean value) {
    if (!value) {
      this.table_meta = null;
    }
  }

  public int getBackendsSize() {
    return (this.backends == null) ? 0 : this.backends.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TBackendMeta> getBackendsIterator() {
    return (this.backends == null) ? null : this.backends.iterator();
  }

  public void addToBackends(TBackendMeta elem) {
    if (this.backends == null) {
      this.backends = new java.util.ArrayList<TBackendMeta>();
    }
    this.backends.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TBackendMeta> getBackends() {
    return this.backends;
  }

  public TGetTableMetaResponse setBackends(@org.apache.thrift.annotation.Nullable java.util.List<TBackendMeta> backends) {
    this.backends = backends;
    return this;
  }

  public void unsetBackends() {
    this.backends = null;
  }

  /** Returns true if field backends is set (has been assigned a value) and false otherwise */
  public boolean isSetBackends() {
    return this.backends != null;
  }

  public void setBackendsIsSet(boolean value) {
    if (!value) {
      this.backends = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((io.datafibre.fibre.thrift.TStatus)value);
      }
      break;

    case TABLE_META:
      if (value == null) {
        unsetTable_meta();
      } else {
        setTable_meta((TTableMeta)value);
      }
      break;

    case BACKENDS:
      if (value == null) {
        unsetBackends();
      } else {
        setBackends((java.util.List<TBackendMeta>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case TABLE_META:
      return getTable_meta();

    case BACKENDS:
      return getBackends();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case TABLE_META:
      return isSetTable_meta();
    case BACKENDS:
      return isSetBackends();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TGetTableMetaResponse)
      return this.equals((TGetTableMetaResponse)that);
    return false;
  }

  public boolean equals(TGetTableMetaResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_table_meta = true && this.isSetTable_meta();
    boolean that_present_table_meta = true && that.isSetTable_meta();
    if (this_present_table_meta || that_present_table_meta) {
      if (!(this_present_table_meta && that_present_table_meta))
        return false;
      if (!this.table_meta.equals(that.table_meta))
        return false;
    }

    boolean this_present_backends = true && this.isSetBackends();
    boolean that_present_backends = true && that.isSetBackends();
    if (this_present_backends || that_present_backends) {
      if (!(this_present_backends && that_present_backends))
        return false;
      if (!this.backends.equals(that.backends))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_meta()) ? 131071 : 524287);
    if (isSetTable_meta())
      hashCode = hashCode * 8191 + table_meta.hashCode();

    hashCode = hashCode * 8191 + ((isSetBackends()) ? 131071 : 524287);
    if (isSetBackends())
      hashCode = hashCode * 8191 + backends.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TGetTableMetaResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_meta(), other.isSetTable_meta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_meta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_meta, other.table_meta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBackends(), other.isSetBackends());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackends()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backends, other.backends);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TGetTableMetaResponse(");
    boolean first = true;

    if (isSetStatus()) {
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetTable_meta()) {
      if (!first) sb.append(", ");
      sb.append("table_meta:");
      if (this.table_meta == null) {
        sb.append("null");
      } else {
        sb.append(this.table_meta);
      }
      first = false;
    }
    if (isSetBackends()) {
      if (!first) sb.append(", ");
      sb.append("backends:");
      if (this.backends == null) {
        sb.append("null");
      } else {
        sb.append(this.backends);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
    if (table_meta != null) {
      table_meta.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetTableMetaResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGetTableMetaResponseStandardScheme getScheme() {
      return new TGetTableMetaResponseStandardScheme();
    }
  }

  private static class TGetTableMetaResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<TGetTableMetaResponse> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetTableMetaResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new io.datafibre.fibre.thrift.TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_META
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_meta = new TTableMeta();
              struct.table_meta.read(iprot);
              struct.setTable_metaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BACKENDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list534 = iprot.readListBegin();
                struct.backends = new java.util.ArrayList<TBackendMeta>(_list534.size);
                @org.apache.thrift.annotation.Nullable TBackendMeta _elem535;
                for (int _i536 = 0; _i536 < _list534.size; ++_i536)
                {
                  _elem535 = new TBackendMeta();
                  _elem535.read(iprot);
                  struct.backends.add(_elem535);
                }
                iprot.readListEnd();
              }
              struct.setBackendsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetTableMetaResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          struct.status.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_meta != null) {
        if (struct.isSetTable_meta()) {
          oprot.writeFieldBegin(TABLE_META_FIELD_DESC);
          struct.table_meta.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.backends != null) {
        if (struct.isSetBackends()) {
          oprot.writeFieldBegin(BACKENDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.backends.size()));
            for (TBackendMeta _iter537 : struct.backends)
            {
              _iter537.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGetTableMetaResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGetTableMetaResponseTupleScheme getScheme() {
      return new TGetTableMetaResponseTupleScheme();
    }
  }

  private static class TGetTableMetaResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<TGetTableMetaResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetTableMetaResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetTable_meta()) {
        optionals.set(1);
      }
      if (struct.isSetBackends()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
      if (struct.isSetTable_meta()) {
        struct.table_meta.write(oprot);
      }
      if (struct.isSetBackends()) {
        {
          oprot.writeI32(struct.backends.size());
          for (TBackendMeta _iter538 : struct.backends)
          {
            _iter538.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetTableMetaResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.status = new io.datafibre.fibre.thrift.TStatus();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.table_meta = new TTableMeta();
        struct.table_meta.read(iprot);
        struct.setTable_metaIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list539 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.backends = new java.util.ArrayList<TBackendMeta>(_list539.size);
          @org.apache.thrift.annotation.Nullable TBackendMeta _elem540;
          for (int _i541 = 0; _i541 < _list539.size; ++_i541)
          {
            _elem540 = new TBackendMeta();
            _elem540.read(iprot);
            struct.backends.add(_elem540);
          }
        }
        struct.setBackendsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

