/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TResultBatch implements org.apache.thrift.TBase<TResultBatch, TResultBatch._Fields>, java.io.Serializable, Cloneable, Comparable<TResultBatch> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResultBatch");

  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField IS_COMPRESSED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_compressed", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField PACKET_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("packet_seq", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField STATISTIC_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("statistic_version", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TResultBatchStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TResultBatchTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> rows; // required
  public boolean is_compressed; // required
  public long packet_seq; // required
  public int statistic_version; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROWS((short)1, "rows"),
    IS_COMPRESSED((short)2, "is_compressed"),
    PACKET_SEQ((short)3, "packet_seq"),
    STATISTIC_VERSION((short)10, "statistic_version");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROWS
          return ROWS;
        case 2: // IS_COMPRESSED
          return IS_COMPRESSED;
        case 3: // PACKET_SEQ
          return PACKET_SEQ;
        case 10: // STATISTIC_VERSION
          return STATISTIC_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_COMPRESSED_ISSET_ID = 0;
  private static final int __PACKET_SEQ_ISSET_ID = 1;
  private static final int __STATISTIC_VERSION_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STATISTIC_VERSION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.IS_COMPRESSED, new org.apache.thrift.meta_data.FieldMetaData("is_compressed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PACKET_SEQ, new org.apache.thrift.meta_data.FieldMetaData("packet_seq", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATISTIC_VERSION, new org.apache.thrift.meta_data.FieldMetaData("statistic_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResultBatch.class, metaDataMap);
  }

  public TResultBatch() {
  }

  public TResultBatch(
    java.util.List<java.nio.ByteBuffer> rows,
    boolean is_compressed,
    long packet_seq)
  {
    this();
    this.rows = rows;
    this.is_compressed = is_compressed;
    setIs_compressedIsSet(true);
    this.packet_seq = packet_seq;
    setPacket_seqIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResultBatch(TResultBatch other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRows()) {
      java.util.List<java.nio.ByteBuffer> __this__rows = new java.util.ArrayList<java.nio.ByteBuffer>(other.rows);
      this.rows = __this__rows;
    }
    this.is_compressed = other.is_compressed;
    this.packet_seq = other.packet_seq;
    this.statistic_version = other.statistic_version;
  }

  @Override
  public TResultBatch deepCopy() {
    return new TResultBatch(this);
  }

  @Override
  public void clear() {
    this.rows = null;
    setIs_compressedIsSet(false);
    this.is_compressed = false;
    setPacket_seqIsSet(false);
    this.packet_seq = 0;
    setStatistic_versionIsSet(false);
    this.statistic_version = 0;
  }

  public int getRowsSize() {
    return (this.rows == null) ? 0 : this.rows.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getRowsIterator() {
    return (this.rows == null) ? null : this.rows.iterator();
  }

  public void addToRows(java.nio.ByteBuffer elem) {
    if (this.rows == null) {
      this.rows = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.rows.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getRows() {
    return this.rows;
  }

  public TResultBatch setRows(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> rows) {
    this.rows = rows;
    return this;
  }

  public void unsetRows() {
    this.rows = null;
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return this.rows != null;
  }

  public void setRowsIsSet(boolean value) {
    if (!value) {
      this.rows = null;
    }
  }

  public boolean isIs_compressed() {
    return this.is_compressed;
  }

  public TResultBatch setIs_compressed(boolean is_compressed) {
    this.is_compressed = is_compressed;
    setIs_compressedIsSet(true);
    return this;
  }

  public void unsetIs_compressed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_COMPRESSED_ISSET_ID);
  }

  /** Returns true if field is_compressed is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_compressed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_COMPRESSED_ISSET_ID);
  }

  public void setIs_compressedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_COMPRESSED_ISSET_ID, value);
  }

  public long getPacket_seq() {
    return this.packet_seq;
  }

  public TResultBatch setPacket_seq(long packet_seq) {
    this.packet_seq = packet_seq;
    setPacket_seqIsSet(true);
    return this;
  }

  public void unsetPacket_seq() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PACKET_SEQ_ISSET_ID);
  }

  /** Returns true if field packet_seq is set (has been assigned a value) and false otherwise */
  public boolean isSetPacket_seq() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PACKET_SEQ_ISSET_ID);
  }

  public void setPacket_seqIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PACKET_SEQ_ISSET_ID, value);
  }

  public int getStatistic_version() {
    return this.statistic_version;
  }

  public TResultBatch setStatistic_version(int statistic_version) {
    this.statistic_version = statistic_version;
    setStatistic_versionIsSet(true);
    return this;
  }

  public void unsetStatistic_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATISTIC_VERSION_ISSET_ID);
  }

  /** Returns true if field statistic_version is set (has been assigned a value) and false otherwise */
  public boolean isSetStatistic_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATISTIC_VERSION_ISSET_ID);
  }

  public void setStatistic_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATISTIC_VERSION_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case IS_COMPRESSED:
      if (value == null) {
        unsetIs_compressed();
      } else {
        setIs_compressed((java.lang.Boolean)value);
      }
      break;

    case PACKET_SEQ:
      if (value == null) {
        unsetPacket_seq();
      } else {
        setPacket_seq((java.lang.Long)value);
      }
      break;

    case STATISTIC_VERSION:
      if (value == null) {
        unsetStatistic_version();
      } else {
        setStatistic_version((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ROWS:
      return getRows();

    case IS_COMPRESSED:
      return isIs_compressed();

    case PACKET_SEQ:
      return getPacket_seq();

    case STATISTIC_VERSION:
      return getStatistic_version();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ROWS:
      return isSetRows();
    case IS_COMPRESSED:
      return isSetIs_compressed();
    case PACKET_SEQ:
      return isSetPacket_seq();
    case STATISTIC_VERSION:
      return isSetStatistic_version();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TResultBatch)
      return this.equals((TResultBatch)that);
    return false;
  }

  public boolean equals(TResultBatch that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_rows = true && this.isSetRows();
    boolean that_present_rows = true && that.isSetRows();
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (!this.rows.equals(that.rows))
        return false;
    }

    boolean this_present_is_compressed = true;
    boolean that_present_is_compressed = true;
    if (this_present_is_compressed || that_present_is_compressed) {
      if (!(this_present_is_compressed && that_present_is_compressed))
        return false;
      if (this.is_compressed != that.is_compressed)
        return false;
    }

    boolean this_present_packet_seq = true;
    boolean that_present_packet_seq = true;
    if (this_present_packet_seq || that_present_packet_seq) {
      if (!(this_present_packet_seq && that_present_packet_seq))
        return false;
      if (this.packet_seq != that.packet_seq)
        return false;
    }

    boolean this_present_statistic_version = true && this.isSetStatistic_version();
    boolean that_present_statistic_version = true && that.isSetStatistic_version();
    if (this_present_statistic_version || that_present_statistic_version) {
      if (!(this_present_statistic_version && that_present_statistic_version))
        return false;
      if (this.statistic_version != that.statistic_version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRows()) ? 131071 : 524287);
    if (isSetRows())
      hashCode = hashCode * 8191 + rows.hashCode();

    hashCode = hashCode * 8191 + ((is_compressed) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(packet_seq);

    hashCode = hashCode * 8191 + ((isSetStatistic_version()) ? 131071 : 524287);
    if (isSetStatistic_version())
      hashCode = hashCode * 8191 + statistic_version;

    return hashCode;
  }

  @Override
  public int compareTo(TResultBatch other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetRows(), other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_compressed(), other.isSetIs_compressed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_compressed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_compressed, other.is_compressed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPacket_seq(), other.isSetPacket_seq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPacket_seq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packet_seq, other.packet_seq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatistic_version(), other.isSetStatistic_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatistic_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statistic_version, other.statistic_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TResultBatch(");
    boolean first = true;

    sb.append("rows:");
    if (this.rows == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.rows, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_compressed:");
    sb.append(this.is_compressed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("packet_seq:");
    sb.append(this.packet_seq);
    first = false;
    if (isSetStatistic_version()) {
      if (!first) sb.append(", ");
      sb.append("statistic_version:");
      sb.append(this.statistic_version);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (rows == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rows' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'is_compressed' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'packet_seq' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResultBatchStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TResultBatchStandardScheme getScheme() {
      return new TResultBatchStandardScheme();
    }
  }

  private static class TResultBatchStandardScheme extends org.apache.thrift.scheme.StandardScheme<TResultBatch> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TResultBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.rows = new java.util.ArrayList<java.nio.ByteBuffer>(_list24.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readBinary();
                  struct.rows.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_COMPRESSED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_compressed = iprot.readBool();
              struct.setIs_compressedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PACKET_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.packet_seq = iprot.readI64();
              struct.setPacket_seqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATISTIC_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.statistic_version = iprot.readI32();
              struct.setStatistic_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIs_compressed()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_compressed' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPacket_seq()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'packet_seq' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TResultBatch struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rows != null) {
        oprot.writeFieldBegin(ROWS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.rows.size()));
          for (java.nio.ByteBuffer _iter27 : struct.rows)
          {
            oprot.writeBinary(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_COMPRESSED_FIELD_DESC);
      oprot.writeBool(struct.is_compressed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PACKET_SEQ_FIELD_DESC);
      oprot.writeI64(struct.packet_seq);
      oprot.writeFieldEnd();
      if (struct.isSetStatistic_version()) {
        oprot.writeFieldBegin(STATISTIC_VERSION_FIELD_DESC);
        oprot.writeI32(struct.statistic_version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResultBatchTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TResultBatchTupleScheme getScheme() {
      return new TResultBatchTupleScheme();
    }
  }

  private static class TResultBatchTupleScheme extends org.apache.thrift.scheme.TupleScheme<TResultBatch> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResultBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.rows.size());
        for (java.nio.ByteBuffer _iter28 : struct.rows)
        {
          oprot.writeBinary(_iter28);
        }
      }
      oprot.writeBool(struct.is_compressed);
      oprot.writeI64(struct.packet_seq);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStatistic_version()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetStatistic_version()) {
        oprot.writeI32(struct.statistic_version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResultBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.rows = new java.util.ArrayList<java.nio.ByteBuffer>(_list29.size);
        @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem30;
        for (int _i31 = 0; _i31 < _list29.size; ++_i31)
        {
          _elem30 = iprot.readBinary();
          struct.rows.add(_elem30);
        }
      }
      struct.setRowsIsSet(true);
      struct.is_compressed = iprot.readBool();
      struct.setIs_compressedIsSet(true);
      struct.packet_seq = iprot.readI64();
      struct.setPacket_seqIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.statistic_version = iprot.readI32();
        struct.setStatistic_versionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

