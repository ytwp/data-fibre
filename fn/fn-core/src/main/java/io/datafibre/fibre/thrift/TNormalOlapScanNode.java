/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TNormalOlapScanNode implements org.apache.thrift.TBase<TNormalOlapScanNode, TNormalOlapScanNode._Fields>, java.io.Serializable, Cloneable, Comparable<TNormalOlapScanNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNormalOlapScanNode");

  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField INDEX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("index_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REMAPPED_SLOT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("remapped_slot_ids", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SELECTED_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("selected_column", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField KEY_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("key_column_names", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField KEY_COLUMN_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("key_column_types", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField IS_PREAGGREGATION_FIELD_DESC = new org.apache.thrift.protocol.TField("is_preaggregation", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField SORT_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_column", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ROLLUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("rollup_name", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DICT_STRING_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("dict_string_ids", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField DICT_INT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("dict_int_ids", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField UNUSED_OUTPUT_COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("unused_output_column_name", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField SELECTED_PARTITION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("selected_partition_ids", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField SELECTED_PARTITION_VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("selected_partition_versions", org.apache.thrift.protocol.TType.LIST, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TNormalOlapScanNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TNormalOlapScanNodeTupleSchemeFactory();

  public long tablet_id; // optional
  public long index_id; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> remapped_slot_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> selected_column; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> key_column_names; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TPrimitiveType> key_column_types; // optional
  public boolean is_preaggregation; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sort_column; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String rollup_name; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> dict_string_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> dict_int_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> unused_output_column_name; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> selected_partition_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> selected_partition_versions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLET_ID((short)1, "tablet_id"),
    INDEX_ID((short)2, "index_id"),
    REMAPPED_SLOT_IDS((short)3, "remapped_slot_ids"),
    SELECTED_COLUMN((short)4, "selected_column"),
    KEY_COLUMN_NAMES((short)5, "key_column_names"),
    KEY_COLUMN_TYPES((short)6, "key_column_types"),
    IS_PREAGGREGATION((short)7, "is_preaggregation"),
    SORT_COLUMN((short)8, "sort_column"),
    ROLLUP_NAME((short)9, "rollup_name"),
    DICT_STRING_IDS((short)10, "dict_string_ids"),
    DICT_INT_IDS((short)11, "dict_int_ids"),
    UNUSED_OUTPUT_COLUMN_NAME((short)12, "unused_output_column_name"),
    SELECTED_PARTITION_IDS((short)13, "selected_partition_ids"),
    SELECTED_PARTITION_VERSIONS((short)14, "selected_partition_versions");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLET_ID
          return TABLET_ID;
        case 2: // INDEX_ID
          return INDEX_ID;
        case 3: // REMAPPED_SLOT_IDS
          return REMAPPED_SLOT_IDS;
        case 4: // SELECTED_COLUMN
          return SELECTED_COLUMN;
        case 5: // KEY_COLUMN_NAMES
          return KEY_COLUMN_NAMES;
        case 6: // KEY_COLUMN_TYPES
          return KEY_COLUMN_TYPES;
        case 7: // IS_PREAGGREGATION
          return IS_PREAGGREGATION;
        case 8: // SORT_COLUMN
          return SORT_COLUMN;
        case 9: // ROLLUP_NAME
          return ROLLUP_NAME;
        case 10: // DICT_STRING_IDS
          return DICT_STRING_IDS;
        case 11: // DICT_INT_IDS
          return DICT_INT_IDS;
        case 12: // UNUSED_OUTPUT_COLUMN_NAME
          return UNUSED_OUTPUT_COLUMN_NAME;
        case 13: // SELECTED_PARTITION_IDS
          return SELECTED_PARTITION_IDS;
        case 14: // SELECTED_PARTITION_VERSIONS
          return SELECTED_PARTITION_VERSIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLET_ID_ISSET_ID = 0;
  private static final int __INDEX_ID_ISSET_ID = 1;
  private static final int __IS_PREAGGREGATION_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TABLET_ID,_Fields.INDEX_ID,_Fields.REMAPPED_SLOT_IDS,_Fields.SELECTED_COLUMN,_Fields.KEY_COLUMN_NAMES,_Fields.KEY_COLUMN_TYPES,_Fields.IS_PREAGGREGATION,_Fields.SORT_COLUMN,_Fields.ROLLUP_NAME,_Fields.DICT_STRING_IDS,_Fields.DICT_INT_IDS,_Fields.UNUSED_OUTPUT_COLUMN_NAME,_Fields.SELECTED_PARTITION_IDS,_Fields.SELECTED_PARTITION_VERSIONS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INDEX_ID, new org.apache.thrift.meta_data.FieldMetaData("index_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REMAPPED_SLOT_IDS, new org.apache.thrift.meta_data.FieldMetaData("remapped_slot_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SELECTED_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("selected_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.KEY_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("key_column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.KEY_COLUMN_TYPES, new org.apache.thrift.meta_data.FieldMetaData("key_column_types", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, io.datafibre.fibre.thrift.TPrimitiveType.class))));
    tmpMap.put(_Fields.IS_PREAGGREGATION, new org.apache.thrift.meta_data.FieldMetaData("is_preaggregation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SORT_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("sort_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLLUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("rollup_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DICT_STRING_IDS, new org.apache.thrift.meta_data.FieldMetaData("dict_string_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DICT_INT_IDS, new org.apache.thrift.meta_data.FieldMetaData("dict_int_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.UNUSED_OUTPUT_COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("unused_output_column_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SELECTED_PARTITION_IDS, new org.apache.thrift.meta_data.FieldMetaData("selected_partition_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.SELECTED_PARTITION_VERSIONS, new org.apache.thrift.meta_data.FieldMetaData("selected_partition_versions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNormalOlapScanNode.class, metaDataMap);
  }

  public TNormalOlapScanNode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNormalOlapScanNode(TNormalOlapScanNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tablet_id = other.tablet_id;
    this.index_id = other.index_id;
    if (other.isSetRemapped_slot_ids()) {
      java.util.List<java.lang.Integer> __this__remapped_slot_ids = new java.util.ArrayList<java.lang.Integer>(other.remapped_slot_ids);
      this.remapped_slot_ids = __this__remapped_slot_ids;
    }
    if (other.isSetSelected_column()) {
      java.util.List<java.lang.String> __this__selected_column = new java.util.ArrayList<java.lang.String>(other.selected_column);
      this.selected_column = __this__selected_column;
    }
    if (other.isSetKey_column_names()) {
      java.util.List<java.lang.String> __this__key_column_names = new java.util.ArrayList<java.lang.String>(other.key_column_names);
      this.key_column_names = __this__key_column_names;
    }
    if (other.isSetKey_column_types()) {
      java.util.List<io.datafibre.fibre.thrift.TPrimitiveType> __this__key_column_types = new java.util.ArrayList<io.datafibre.fibre.thrift.TPrimitiveType>(other.key_column_types.size());
      for (io.datafibre.fibre.thrift.TPrimitiveType other_element : other.key_column_types) {
        __this__key_column_types.add(other_element);
      }
      this.key_column_types = __this__key_column_types;
    }
    this.is_preaggregation = other.is_preaggregation;
    if (other.isSetSort_column()) {
      this.sort_column = other.sort_column;
    }
    if (other.isSetRollup_name()) {
      this.rollup_name = other.rollup_name;
    }
    if (other.isSetDict_string_ids()) {
      java.util.List<java.lang.Integer> __this__dict_string_ids = new java.util.ArrayList<java.lang.Integer>(other.dict_string_ids);
      this.dict_string_ids = __this__dict_string_ids;
    }
    if (other.isSetDict_int_ids()) {
      java.util.List<java.lang.Integer> __this__dict_int_ids = new java.util.ArrayList<java.lang.Integer>(other.dict_int_ids);
      this.dict_int_ids = __this__dict_int_ids;
    }
    if (other.isSetUnused_output_column_name()) {
      java.util.List<java.lang.String> __this__unused_output_column_name = new java.util.ArrayList<java.lang.String>(other.unused_output_column_name);
      this.unused_output_column_name = __this__unused_output_column_name;
    }
    if (other.isSetSelected_partition_ids()) {
      java.util.List<java.lang.Long> __this__selected_partition_ids = new java.util.ArrayList<java.lang.Long>(other.selected_partition_ids);
      this.selected_partition_ids = __this__selected_partition_ids;
    }
    if (other.isSetSelected_partition_versions()) {
      java.util.List<java.lang.Long> __this__selected_partition_versions = new java.util.ArrayList<java.lang.Long>(other.selected_partition_versions);
      this.selected_partition_versions = __this__selected_partition_versions;
    }
  }

  @Override
  public TNormalOlapScanNode deepCopy() {
    return new TNormalOlapScanNode(this);
  }

  @Override
  public void clear() {
    setTablet_idIsSet(false);
    this.tablet_id = 0;
    setIndex_idIsSet(false);
    this.index_id = 0;
    this.remapped_slot_ids = null;
    this.selected_column = null;
    this.key_column_names = null;
    this.key_column_types = null;
    setIs_preaggregationIsSet(false);
    this.is_preaggregation = false;
    this.sort_column = null;
    this.rollup_name = null;
    this.dict_string_ids = null;
    this.dict_int_ids = null;
    this.unused_output_column_name = null;
    this.selected_partition_ids = null;
    this.selected_partition_versions = null;
  }

  public long getTablet_id() {
    return this.tablet_id;
  }

  public TNormalOlapScanNode setTablet_id(long tablet_id) {
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    return this;
  }

  public void unsetTablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  public long getIndex_id() {
    return this.index_id;
  }

  public TNormalOlapScanNode setIndex_id(long index_id) {
    this.index_id = index_id;
    setIndex_idIsSet(true);
    return this;
  }

  public void unsetIndex_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_ID_ISSET_ID);
  }

  /** Returns true if field index_id is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_ID_ISSET_ID);
  }

  public void setIndex_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_ID_ISSET_ID, value);
  }

  public int getRemapped_slot_idsSize() {
    return (this.remapped_slot_ids == null) ? 0 : this.remapped_slot_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getRemapped_slot_idsIterator() {
    return (this.remapped_slot_ids == null) ? null : this.remapped_slot_ids.iterator();
  }

  public void addToRemapped_slot_ids(int elem) {
    if (this.remapped_slot_ids == null) {
      this.remapped_slot_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.remapped_slot_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getRemapped_slot_ids() {
    return this.remapped_slot_ids;
  }

  public TNormalOlapScanNode setRemapped_slot_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> remapped_slot_ids) {
    this.remapped_slot_ids = remapped_slot_ids;
    return this;
  }

  public void unsetRemapped_slot_ids() {
    this.remapped_slot_ids = null;
  }

  /** Returns true if field remapped_slot_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetRemapped_slot_ids() {
    return this.remapped_slot_ids != null;
  }

  public void setRemapped_slot_idsIsSet(boolean value) {
    if (!value) {
      this.remapped_slot_ids = null;
    }
  }

  public int getSelected_columnSize() {
    return (this.selected_column == null) ? 0 : this.selected_column.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getSelected_columnIterator() {
    return (this.selected_column == null) ? null : this.selected_column.iterator();
  }

  public void addToSelected_column(java.lang.String elem) {
    if (this.selected_column == null) {
      this.selected_column = new java.util.ArrayList<java.lang.String>();
    }
    this.selected_column.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getSelected_column() {
    return this.selected_column;
  }

  public TNormalOlapScanNode setSelected_column(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> selected_column) {
    this.selected_column = selected_column;
    return this;
  }

  public void unsetSelected_column() {
    this.selected_column = null;
  }

  /** Returns true if field selected_column is set (has been assigned a value) and false otherwise */
  public boolean isSetSelected_column() {
    return this.selected_column != null;
  }

  public void setSelected_columnIsSet(boolean value) {
    if (!value) {
      this.selected_column = null;
    }
  }

  public int getKey_column_namesSize() {
    return (this.key_column_names == null) ? 0 : this.key_column_names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getKey_column_namesIterator() {
    return (this.key_column_names == null) ? null : this.key_column_names.iterator();
  }

  public void addToKey_column_names(java.lang.String elem) {
    if (this.key_column_names == null) {
      this.key_column_names = new java.util.ArrayList<java.lang.String>();
    }
    this.key_column_names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getKey_column_names() {
    return this.key_column_names;
  }

  public TNormalOlapScanNode setKey_column_names(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> key_column_names) {
    this.key_column_names = key_column_names;
    return this;
  }

  public void unsetKey_column_names() {
    this.key_column_names = null;
  }

  /** Returns true if field key_column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_column_names() {
    return this.key_column_names != null;
  }

  public void setKey_column_namesIsSet(boolean value) {
    if (!value) {
      this.key_column_names = null;
    }
  }

  public int getKey_column_typesSize() {
    return (this.key_column_types == null) ? 0 : this.key_column_types.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TPrimitiveType> getKey_column_typesIterator() {
    return (this.key_column_types == null) ? null : this.key_column_types.iterator();
  }

  public void addToKey_column_types(io.datafibre.fibre.thrift.TPrimitiveType elem) {
    if (this.key_column_types == null) {
      this.key_column_types = new java.util.ArrayList<io.datafibre.fibre.thrift.TPrimitiveType>();
    }
    this.key_column_types.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TPrimitiveType> getKey_column_types() {
    return this.key_column_types;
  }

  public TNormalOlapScanNode setKey_column_types(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TPrimitiveType> key_column_types) {
    this.key_column_types = key_column_types;
    return this;
  }

  public void unsetKey_column_types() {
    this.key_column_types = null;
  }

  /** Returns true if field key_column_types is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_column_types() {
    return this.key_column_types != null;
  }

  public void setKey_column_typesIsSet(boolean value) {
    if (!value) {
      this.key_column_types = null;
    }
  }

  public boolean isIs_preaggregation() {
    return this.is_preaggregation;
  }

  public TNormalOlapScanNode setIs_preaggregation(boolean is_preaggregation) {
    this.is_preaggregation = is_preaggregation;
    setIs_preaggregationIsSet(true);
    return this;
  }

  public void unsetIs_preaggregation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_PREAGGREGATION_ISSET_ID);
  }

  /** Returns true if field is_preaggregation is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_preaggregation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_PREAGGREGATION_ISSET_ID);
  }

  public void setIs_preaggregationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_PREAGGREGATION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSort_column() {
    return this.sort_column;
  }

  public TNormalOlapScanNode setSort_column(@org.apache.thrift.annotation.Nullable java.lang.String sort_column) {
    this.sort_column = sort_column;
    return this;
  }

  public void unsetSort_column() {
    this.sort_column = null;
  }

  /** Returns true if field sort_column is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_column() {
    return this.sort_column != null;
  }

  public void setSort_columnIsSet(boolean value) {
    if (!value) {
      this.sort_column = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRollup_name() {
    return this.rollup_name;
  }

  public TNormalOlapScanNode setRollup_name(@org.apache.thrift.annotation.Nullable java.lang.String rollup_name) {
    this.rollup_name = rollup_name;
    return this;
  }

  public void unsetRollup_name() {
    this.rollup_name = null;
  }

  /** Returns true if field rollup_name is set (has been assigned a value) and false otherwise */
  public boolean isSetRollup_name() {
    return this.rollup_name != null;
  }

  public void setRollup_nameIsSet(boolean value) {
    if (!value) {
      this.rollup_name = null;
    }
  }

  public int getDict_string_idsSize() {
    return (this.dict_string_ids == null) ? 0 : this.dict_string_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getDict_string_idsIterator() {
    return (this.dict_string_ids == null) ? null : this.dict_string_ids.iterator();
  }

  public void addToDict_string_ids(int elem) {
    if (this.dict_string_ids == null) {
      this.dict_string_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.dict_string_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getDict_string_ids() {
    return this.dict_string_ids;
  }

  public TNormalOlapScanNode setDict_string_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> dict_string_ids) {
    this.dict_string_ids = dict_string_ids;
    return this;
  }

  public void unsetDict_string_ids() {
    this.dict_string_ids = null;
  }

  /** Returns true if field dict_string_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetDict_string_ids() {
    return this.dict_string_ids != null;
  }

  public void setDict_string_idsIsSet(boolean value) {
    if (!value) {
      this.dict_string_ids = null;
    }
  }

  public int getDict_int_idsSize() {
    return (this.dict_int_ids == null) ? 0 : this.dict_int_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getDict_int_idsIterator() {
    return (this.dict_int_ids == null) ? null : this.dict_int_ids.iterator();
  }

  public void addToDict_int_ids(int elem) {
    if (this.dict_int_ids == null) {
      this.dict_int_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.dict_int_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getDict_int_ids() {
    return this.dict_int_ids;
  }

  public TNormalOlapScanNode setDict_int_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> dict_int_ids) {
    this.dict_int_ids = dict_int_ids;
    return this;
  }

  public void unsetDict_int_ids() {
    this.dict_int_ids = null;
  }

  /** Returns true if field dict_int_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetDict_int_ids() {
    return this.dict_int_ids != null;
  }

  public void setDict_int_idsIsSet(boolean value) {
    if (!value) {
      this.dict_int_ids = null;
    }
  }

  public int getUnused_output_column_nameSize() {
    return (this.unused_output_column_name == null) ? 0 : this.unused_output_column_name.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getUnused_output_column_nameIterator() {
    return (this.unused_output_column_name == null) ? null : this.unused_output_column_name.iterator();
  }

  public void addToUnused_output_column_name(java.lang.String elem) {
    if (this.unused_output_column_name == null) {
      this.unused_output_column_name = new java.util.ArrayList<java.lang.String>();
    }
    this.unused_output_column_name.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getUnused_output_column_name() {
    return this.unused_output_column_name;
  }

  public TNormalOlapScanNode setUnused_output_column_name(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> unused_output_column_name) {
    this.unused_output_column_name = unused_output_column_name;
    return this;
  }

  public void unsetUnused_output_column_name() {
    this.unused_output_column_name = null;
  }

  /** Returns true if field unused_output_column_name is set (has been assigned a value) and false otherwise */
  public boolean isSetUnused_output_column_name() {
    return this.unused_output_column_name != null;
  }

  public void setUnused_output_column_nameIsSet(boolean value) {
    if (!value) {
      this.unused_output_column_name = null;
    }
  }

  public int getSelected_partition_idsSize() {
    return (this.selected_partition_ids == null) ? 0 : this.selected_partition_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getSelected_partition_idsIterator() {
    return (this.selected_partition_ids == null) ? null : this.selected_partition_ids.iterator();
  }

  public void addToSelected_partition_ids(long elem) {
    if (this.selected_partition_ids == null) {
      this.selected_partition_ids = new java.util.ArrayList<java.lang.Long>();
    }
    this.selected_partition_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getSelected_partition_ids() {
    return this.selected_partition_ids;
  }

  public TNormalOlapScanNode setSelected_partition_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> selected_partition_ids) {
    this.selected_partition_ids = selected_partition_ids;
    return this;
  }

  public void unsetSelected_partition_ids() {
    this.selected_partition_ids = null;
  }

  /** Returns true if field selected_partition_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetSelected_partition_ids() {
    return this.selected_partition_ids != null;
  }

  public void setSelected_partition_idsIsSet(boolean value) {
    if (!value) {
      this.selected_partition_ids = null;
    }
  }

  public int getSelected_partition_versionsSize() {
    return (this.selected_partition_versions == null) ? 0 : this.selected_partition_versions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getSelected_partition_versionsIterator() {
    return (this.selected_partition_versions == null) ? null : this.selected_partition_versions.iterator();
  }

  public void addToSelected_partition_versions(long elem) {
    if (this.selected_partition_versions == null) {
      this.selected_partition_versions = new java.util.ArrayList<java.lang.Long>();
    }
    this.selected_partition_versions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getSelected_partition_versions() {
    return this.selected_partition_versions;
  }

  public TNormalOlapScanNode setSelected_partition_versions(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> selected_partition_versions) {
    this.selected_partition_versions = selected_partition_versions;
    return this;
  }

  public void unsetSelected_partition_versions() {
    this.selected_partition_versions = null;
  }

  /** Returns true if field selected_partition_versions is set (has been assigned a value) and false otherwise */
  public boolean isSetSelected_partition_versions() {
    return this.selected_partition_versions != null;
  }

  public void setSelected_partition_versionsIsSet(boolean value) {
    if (!value) {
      this.selected_partition_versions = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLET_ID:
      if (value == null) {
        unsetTablet_id();
      } else {
        setTablet_id((java.lang.Long)value);
      }
      break;

    case INDEX_ID:
      if (value == null) {
        unsetIndex_id();
      } else {
        setIndex_id((java.lang.Long)value);
      }
      break;

    case REMAPPED_SLOT_IDS:
      if (value == null) {
        unsetRemapped_slot_ids();
      } else {
        setRemapped_slot_ids((java.util.List<java.lang.Integer>)value);
      }
      break;

    case SELECTED_COLUMN:
      if (value == null) {
        unsetSelected_column();
      } else {
        setSelected_column((java.util.List<java.lang.String>)value);
      }
      break;

    case KEY_COLUMN_NAMES:
      if (value == null) {
        unsetKey_column_names();
      } else {
        setKey_column_names((java.util.List<java.lang.String>)value);
      }
      break;

    case KEY_COLUMN_TYPES:
      if (value == null) {
        unsetKey_column_types();
      } else {
        setKey_column_types((java.util.List<io.datafibre.fibre.thrift.TPrimitiveType>)value);
      }
      break;

    case IS_PREAGGREGATION:
      if (value == null) {
        unsetIs_preaggregation();
      } else {
        setIs_preaggregation((java.lang.Boolean)value);
      }
      break;

    case SORT_COLUMN:
      if (value == null) {
        unsetSort_column();
      } else {
        setSort_column((java.lang.String)value);
      }
      break;

    case ROLLUP_NAME:
      if (value == null) {
        unsetRollup_name();
      } else {
        setRollup_name((java.lang.String)value);
      }
      break;

    case DICT_STRING_IDS:
      if (value == null) {
        unsetDict_string_ids();
      } else {
        setDict_string_ids((java.util.List<java.lang.Integer>)value);
      }
      break;

    case DICT_INT_IDS:
      if (value == null) {
        unsetDict_int_ids();
      } else {
        setDict_int_ids((java.util.List<java.lang.Integer>)value);
      }
      break;

    case UNUSED_OUTPUT_COLUMN_NAME:
      if (value == null) {
        unsetUnused_output_column_name();
      } else {
        setUnused_output_column_name((java.util.List<java.lang.String>)value);
      }
      break;

    case SELECTED_PARTITION_IDS:
      if (value == null) {
        unsetSelected_partition_ids();
      } else {
        setSelected_partition_ids((java.util.List<java.lang.Long>)value);
      }
      break;

    case SELECTED_PARTITION_VERSIONS:
      if (value == null) {
        unsetSelected_partition_versions();
      } else {
        setSelected_partition_versions((java.util.List<java.lang.Long>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLET_ID:
      return getTablet_id();

    case INDEX_ID:
      return getIndex_id();

    case REMAPPED_SLOT_IDS:
      return getRemapped_slot_ids();

    case SELECTED_COLUMN:
      return getSelected_column();

    case KEY_COLUMN_NAMES:
      return getKey_column_names();

    case KEY_COLUMN_TYPES:
      return getKey_column_types();

    case IS_PREAGGREGATION:
      return isIs_preaggregation();

    case SORT_COLUMN:
      return getSort_column();

    case ROLLUP_NAME:
      return getRollup_name();

    case DICT_STRING_IDS:
      return getDict_string_ids();

    case DICT_INT_IDS:
      return getDict_int_ids();

    case UNUSED_OUTPUT_COLUMN_NAME:
      return getUnused_output_column_name();

    case SELECTED_PARTITION_IDS:
      return getSelected_partition_ids();

    case SELECTED_PARTITION_VERSIONS:
      return getSelected_partition_versions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLET_ID:
      return isSetTablet_id();
    case INDEX_ID:
      return isSetIndex_id();
    case REMAPPED_SLOT_IDS:
      return isSetRemapped_slot_ids();
    case SELECTED_COLUMN:
      return isSetSelected_column();
    case KEY_COLUMN_NAMES:
      return isSetKey_column_names();
    case KEY_COLUMN_TYPES:
      return isSetKey_column_types();
    case IS_PREAGGREGATION:
      return isSetIs_preaggregation();
    case SORT_COLUMN:
      return isSetSort_column();
    case ROLLUP_NAME:
      return isSetRollup_name();
    case DICT_STRING_IDS:
      return isSetDict_string_ids();
    case DICT_INT_IDS:
      return isSetDict_int_ids();
    case UNUSED_OUTPUT_COLUMN_NAME:
      return isSetUnused_output_column_name();
    case SELECTED_PARTITION_IDS:
      return isSetSelected_partition_ids();
    case SELECTED_PARTITION_VERSIONS:
      return isSetSelected_partition_versions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TNormalOlapScanNode)
      return this.equals((TNormalOlapScanNode)that);
    return false;
  }

  public boolean equals(TNormalOlapScanNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tablet_id = true && this.isSetTablet_id();
    boolean that_present_tablet_id = true && that.isSetTablet_id();
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_index_id = true && this.isSetIndex_id();
    boolean that_present_index_id = true && that.isSetIndex_id();
    if (this_present_index_id || that_present_index_id) {
      if (!(this_present_index_id && that_present_index_id))
        return false;
      if (this.index_id != that.index_id)
        return false;
    }

    boolean this_present_remapped_slot_ids = true && this.isSetRemapped_slot_ids();
    boolean that_present_remapped_slot_ids = true && that.isSetRemapped_slot_ids();
    if (this_present_remapped_slot_ids || that_present_remapped_slot_ids) {
      if (!(this_present_remapped_slot_ids && that_present_remapped_slot_ids))
        return false;
      if (!this.remapped_slot_ids.equals(that.remapped_slot_ids))
        return false;
    }

    boolean this_present_selected_column = true && this.isSetSelected_column();
    boolean that_present_selected_column = true && that.isSetSelected_column();
    if (this_present_selected_column || that_present_selected_column) {
      if (!(this_present_selected_column && that_present_selected_column))
        return false;
      if (!this.selected_column.equals(that.selected_column))
        return false;
    }

    boolean this_present_key_column_names = true && this.isSetKey_column_names();
    boolean that_present_key_column_names = true && that.isSetKey_column_names();
    if (this_present_key_column_names || that_present_key_column_names) {
      if (!(this_present_key_column_names && that_present_key_column_names))
        return false;
      if (!this.key_column_names.equals(that.key_column_names))
        return false;
    }

    boolean this_present_key_column_types = true && this.isSetKey_column_types();
    boolean that_present_key_column_types = true && that.isSetKey_column_types();
    if (this_present_key_column_types || that_present_key_column_types) {
      if (!(this_present_key_column_types && that_present_key_column_types))
        return false;
      if (!this.key_column_types.equals(that.key_column_types))
        return false;
    }

    boolean this_present_is_preaggregation = true && this.isSetIs_preaggregation();
    boolean that_present_is_preaggregation = true && that.isSetIs_preaggregation();
    if (this_present_is_preaggregation || that_present_is_preaggregation) {
      if (!(this_present_is_preaggregation && that_present_is_preaggregation))
        return false;
      if (this.is_preaggregation != that.is_preaggregation)
        return false;
    }

    boolean this_present_sort_column = true && this.isSetSort_column();
    boolean that_present_sort_column = true && that.isSetSort_column();
    if (this_present_sort_column || that_present_sort_column) {
      if (!(this_present_sort_column && that_present_sort_column))
        return false;
      if (!this.sort_column.equals(that.sort_column))
        return false;
    }

    boolean this_present_rollup_name = true && this.isSetRollup_name();
    boolean that_present_rollup_name = true && that.isSetRollup_name();
    if (this_present_rollup_name || that_present_rollup_name) {
      if (!(this_present_rollup_name && that_present_rollup_name))
        return false;
      if (!this.rollup_name.equals(that.rollup_name))
        return false;
    }

    boolean this_present_dict_string_ids = true && this.isSetDict_string_ids();
    boolean that_present_dict_string_ids = true && that.isSetDict_string_ids();
    if (this_present_dict_string_ids || that_present_dict_string_ids) {
      if (!(this_present_dict_string_ids && that_present_dict_string_ids))
        return false;
      if (!this.dict_string_ids.equals(that.dict_string_ids))
        return false;
    }

    boolean this_present_dict_int_ids = true && this.isSetDict_int_ids();
    boolean that_present_dict_int_ids = true && that.isSetDict_int_ids();
    if (this_present_dict_int_ids || that_present_dict_int_ids) {
      if (!(this_present_dict_int_ids && that_present_dict_int_ids))
        return false;
      if (!this.dict_int_ids.equals(that.dict_int_ids))
        return false;
    }

    boolean this_present_unused_output_column_name = true && this.isSetUnused_output_column_name();
    boolean that_present_unused_output_column_name = true && that.isSetUnused_output_column_name();
    if (this_present_unused_output_column_name || that_present_unused_output_column_name) {
      if (!(this_present_unused_output_column_name && that_present_unused_output_column_name))
        return false;
      if (!this.unused_output_column_name.equals(that.unused_output_column_name))
        return false;
    }

    boolean this_present_selected_partition_ids = true && this.isSetSelected_partition_ids();
    boolean that_present_selected_partition_ids = true && that.isSetSelected_partition_ids();
    if (this_present_selected_partition_ids || that_present_selected_partition_ids) {
      if (!(this_present_selected_partition_ids && that_present_selected_partition_ids))
        return false;
      if (!this.selected_partition_ids.equals(that.selected_partition_ids))
        return false;
    }

    boolean this_present_selected_partition_versions = true && this.isSetSelected_partition_versions();
    boolean that_present_selected_partition_versions = true && that.isSetSelected_partition_versions();
    if (this_present_selected_partition_versions || that_present_selected_partition_versions) {
      if (!(this_present_selected_partition_versions && that_present_selected_partition_versions))
        return false;
      if (!this.selected_partition_versions.equals(that.selected_partition_versions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTablet_id()) ? 131071 : 524287);
    if (isSetTablet_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tablet_id);

    hashCode = hashCode * 8191 + ((isSetIndex_id()) ? 131071 : 524287);
    if (isSetIndex_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(index_id);

    hashCode = hashCode * 8191 + ((isSetRemapped_slot_ids()) ? 131071 : 524287);
    if (isSetRemapped_slot_ids())
      hashCode = hashCode * 8191 + remapped_slot_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetSelected_column()) ? 131071 : 524287);
    if (isSetSelected_column())
      hashCode = hashCode * 8191 + selected_column.hashCode();

    hashCode = hashCode * 8191 + ((isSetKey_column_names()) ? 131071 : 524287);
    if (isSetKey_column_names())
      hashCode = hashCode * 8191 + key_column_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetKey_column_types()) ? 131071 : 524287);
    if (isSetKey_column_types())
      hashCode = hashCode * 8191 + key_column_types.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_preaggregation()) ? 131071 : 524287);
    if (isSetIs_preaggregation())
      hashCode = hashCode * 8191 + ((is_preaggregation) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSort_column()) ? 131071 : 524287);
    if (isSetSort_column())
      hashCode = hashCode * 8191 + sort_column.hashCode();

    hashCode = hashCode * 8191 + ((isSetRollup_name()) ? 131071 : 524287);
    if (isSetRollup_name())
      hashCode = hashCode * 8191 + rollup_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDict_string_ids()) ? 131071 : 524287);
    if (isSetDict_string_ids())
      hashCode = hashCode * 8191 + dict_string_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetDict_int_ids()) ? 131071 : 524287);
    if (isSetDict_int_ids())
      hashCode = hashCode * 8191 + dict_int_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnused_output_column_name()) ? 131071 : 524287);
    if (isSetUnused_output_column_name())
      hashCode = hashCode * 8191 + unused_output_column_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetSelected_partition_ids()) ? 131071 : 524287);
    if (isSetSelected_partition_ids())
      hashCode = hashCode * 8191 + selected_partition_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetSelected_partition_versions()) ? 131071 : 524287);
    if (isSetSelected_partition_versions())
      hashCode = hashCode * 8191 + selected_partition_versions.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TNormalOlapScanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTablet_id(), other.isSetTablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIndex_id(), other.isSetIndex_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_id, other.index_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRemapped_slot_ids(), other.isSetRemapped_slot_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemapped_slot_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remapped_slot_ids, other.remapped_slot_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSelected_column(), other.isSetSelected_column());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelected_column()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selected_column, other.selected_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKey_column_names(), other.isSetKey_column_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_column_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_column_names, other.key_column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKey_column_types(), other.isSetKey_column_types());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_column_types()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_column_types, other.key_column_types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_preaggregation(), other.isSetIs_preaggregation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_preaggregation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_preaggregation, other.is_preaggregation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSort_column(), other.isSetSort_column());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_column()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_column, other.sort_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRollup_name(), other.isSetRollup_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRollup_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rollup_name, other.rollup_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDict_string_ids(), other.isSetDict_string_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDict_string_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dict_string_ids, other.dict_string_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDict_int_ids(), other.isSetDict_int_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDict_int_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dict_int_ids, other.dict_int_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUnused_output_column_name(), other.isSetUnused_output_column_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnused_output_column_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unused_output_column_name, other.unused_output_column_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSelected_partition_ids(), other.isSetSelected_partition_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelected_partition_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selected_partition_ids, other.selected_partition_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSelected_partition_versions(), other.isSetSelected_partition_versions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelected_partition_versions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selected_partition_versions, other.selected_partition_versions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TNormalOlapScanNode(");
    boolean first = true;

    if (isSetTablet_id()) {
      sb.append("tablet_id:");
      sb.append(this.tablet_id);
      first = false;
    }
    if (isSetIndex_id()) {
      if (!first) sb.append(", ");
      sb.append("index_id:");
      sb.append(this.index_id);
      first = false;
    }
    if (isSetRemapped_slot_ids()) {
      if (!first) sb.append(", ");
      sb.append("remapped_slot_ids:");
      if (this.remapped_slot_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.remapped_slot_ids);
      }
      first = false;
    }
    if (isSetSelected_column()) {
      if (!first) sb.append(", ");
      sb.append("selected_column:");
      if (this.selected_column == null) {
        sb.append("null");
      } else {
        sb.append(this.selected_column);
      }
      first = false;
    }
    if (isSetKey_column_names()) {
      if (!first) sb.append(", ");
      sb.append("key_column_names:");
      if (this.key_column_names == null) {
        sb.append("null");
      } else {
        sb.append(this.key_column_names);
      }
      first = false;
    }
    if (isSetKey_column_types()) {
      if (!first) sb.append(", ");
      sb.append("key_column_types:");
      if (this.key_column_types == null) {
        sb.append("null");
      } else {
        sb.append(this.key_column_types);
      }
      first = false;
    }
    if (isSetIs_preaggregation()) {
      if (!first) sb.append(", ");
      sb.append("is_preaggregation:");
      sb.append(this.is_preaggregation);
      first = false;
    }
    if (isSetSort_column()) {
      if (!first) sb.append(", ");
      sb.append("sort_column:");
      if (this.sort_column == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_column);
      }
      first = false;
    }
    if (isSetRollup_name()) {
      if (!first) sb.append(", ");
      sb.append("rollup_name:");
      if (this.rollup_name == null) {
        sb.append("null");
      } else {
        sb.append(this.rollup_name);
      }
      first = false;
    }
    if (isSetDict_string_ids()) {
      if (!first) sb.append(", ");
      sb.append("dict_string_ids:");
      if (this.dict_string_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.dict_string_ids);
      }
      first = false;
    }
    if (isSetDict_int_ids()) {
      if (!first) sb.append(", ");
      sb.append("dict_int_ids:");
      if (this.dict_int_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.dict_int_ids);
      }
      first = false;
    }
    if (isSetUnused_output_column_name()) {
      if (!first) sb.append(", ");
      sb.append("unused_output_column_name:");
      if (this.unused_output_column_name == null) {
        sb.append("null");
      } else {
        sb.append(this.unused_output_column_name);
      }
      first = false;
    }
    if (isSetSelected_partition_ids()) {
      if (!first) sb.append(", ");
      sb.append("selected_partition_ids:");
      if (this.selected_partition_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.selected_partition_ids);
      }
      first = false;
    }
    if (isSetSelected_partition_versions()) {
      if (!first) sb.append(", ");
      sb.append("selected_partition_versions:");
      if (this.selected_partition_versions == null) {
        sb.append("null");
      } else {
        sb.append(this.selected_partition_versions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNormalOlapScanNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalOlapScanNodeStandardScheme getScheme() {
      return new TNormalOlapScanNodeStandardScheme();
    }
  }

  private static class TNormalOlapScanNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TNormalOlapScanNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TNormalOlapScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INDEX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.index_id = iprot.readI64();
              struct.setIndex_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMAPPED_SLOT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.remapped_slot_ids = new java.util.ArrayList<java.lang.Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.remapped_slot_ids.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setRemapped_slot_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SELECTED_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.selected_column = new java.util.ArrayList<java.lang.String>(_list3.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.selected_column.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setSelected_columnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // KEY_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.key_column_names = new java.util.ArrayList<java.lang.String>(_list6.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readString();
                  struct.key_column_names.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setKey_column_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KEY_COLUMN_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.key_column_types = new java.util.ArrayList<io.datafibre.fibre.thrift.TPrimitiveType>(_list9.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPrimitiveType _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = io.datafibre.fibre.thrift.TPrimitiveType.findByValue(iprot.readI32());
                  if (_elem10 != null)
                  {
                    struct.key_column_types.add(_elem10);
                  }
                }
                iprot.readListEnd();
              }
              struct.setKey_column_typesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_PREAGGREGATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_preaggregation = iprot.readBool();
              struct.setIs_preaggregationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SORT_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sort_column = iprot.readString();
              struct.setSort_columnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ROLLUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rollup_name = iprot.readString();
              struct.setRollup_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DICT_STRING_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.dict_string_ids = new java.util.ArrayList<java.lang.Integer>(_list12.size);
                int _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = iprot.readI32();
                  struct.dict_string_ids.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setDict_string_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DICT_INT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.dict_int_ids = new java.util.ArrayList<java.lang.Integer>(_list15.size);
                int _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = iprot.readI32();
                  struct.dict_int_ids.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setDict_int_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UNUSED_OUTPUT_COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.unused_output_column_name = new java.util.ArrayList<java.lang.String>(_list18.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = iprot.readString();
                  struct.unused_output_column_name.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setUnused_output_column_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SELECTED_PARTITION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.selected_partition_ids = new java.util.ArrayList<java.lang.Long>(_list21.size);
                long _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  _elem22 = iprot.readI64();
                  struct.selected_partition_ids.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setSelected_partition_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SELECTED_PARTITION_VERSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.selected_partition_versions = new java.util.ArrayList<java.lang.Long>(_list24.size);
                long _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readI64();
                  struct.selected_partition_versions.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setSelected_partition_versionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TNormalOlapScanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTablet_id()) {
        oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
        oprot.writeI64(struct.tablet_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIndex_id()) {
        oprot.writeFieldBegin(INDEX_ID_FIELD_DESC);
        oprot.writeI64(struct.index_id);
        oprot.writeFieldEnd();
      }
      if (struct.remapped_slot_ids != null) {
        if (struct.isSetRemapped_slot_ids()) {
          oprot.writeFieldBegin(REMAPPED_SLOT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.remapped_slot_ids.size()));
            for (int _iter27 : struct.remapped_slot_ids)
            {
              oprot.writeI32(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.selected_column != null) {
        if (struct.isSetSelected_column()) {
          oprot.writeFieldBegin(SELECTED_COLUMN_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.selected_column.size()));
            for (java.lang.String _iter28 : struct.selected_column)
            {
              oprot.writeString(_iter28);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.key_column_names != null) {
        if (struct.isSetKey_column_names()) {
          oprot.writeFieldBegin(KEY_COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.key_column_names.size()));
            for (java.lang.String _iter29 : struct.key_column_names)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.key_column_types != null) {
        if (struct.isSetKey_column_types()) {
          oprot.writeFieldBegin(KEY_COLUMN_TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.key_column_types.size()));
            for (io.datafibre.fibre.thrift.TPrimitiveType _iter30 : struct.key_column_types)
            {
              oprot.writeI32(_iter30.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_preaggregation()) {
        oprot.writeFieldBegin(IS_PREAGGREGATION_FIELD_DESC);
        oprot.writeBool(struct.is_preaggregation);
        oprot.writeFieldEnd();
      }
      if (struct.sort_column != null) {
        if (struct.isSetSort_column()) {
          oprot.writeFieldBegin(SORT_COLUMN_FIELD_DESC);
          oprot.writeString(struct.sort_column);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rollup_name != null) {
        if (struct.isSetRollup_name()) {
          oprot.writeFieldBegin(ROLLUP_NAME_FIELD_DESC);
          oprot.writeString(struct.rollup_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dict_string_ids != null) {
        if (struct.isSetDict_string_ids()) {
          oprot.writeFieldBegin(DICT_STRING_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.dict_string_ids.size()));
            for (int _iter31 : struct.dict_string_ids)
            {
              oprot.writeI32(_iter31);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.dict_int_ids != null) {
        if (struct.isSetDict_int_ids()) {
          oprot.writeFieldBegin(DICT_INT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.dict_int_ids.size()));
            for (int _iter32 : struct.dict_int_ids)
            {
              oprot.writeI32(_iter32);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.unused_output_column_name != null) {
        if (struct.isSetUnused_output_column_name()) {
          oprot.writeFieldBegin(UNUSED_OUTPUT_COLUMN_NAME_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.unused_output_column_name.size()));
            for (java.lang.String _iter33 : struct.unused_output_column_name)
            {
              oprot.writeString(_iter33);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.selected_partition_ids != null) {
        if (struct.isSetSelected_partition_ids()) {
          oprot.writeFieldBegin(SELECTED_PARTITION_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.selected_partition_ids.size()));
            for (long _iter34 : struct.selected_partition_ids)
            {
              oprot.writeI64(_iter34);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.selected_partition_versions != null) {
        if (struct.isSetSelected_partition_versions()) {
          oprot.writeFieldBegin(SELECTED_PARTITION_VERSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.selected_partition_versions.size()));
            for (long _iter35 : struct.selected_partition_versions)
            {
              oprot.writeI64(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNormalOlapScanNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalOlapScanNodeTupleScheme getScheme() {
      return new TNormalOlapScanNodeTupleScheme();
    }
  }

  private static class TNormalOlapScanNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TNormalOlapScanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNormalOlapScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTablet_id()) {
        optionals.set(0);
      }
      if (struct.isSetIndex_id()) {
        optionals.set(1);
      }
      if (struct.isSetRemapped_slot_ids()) {
        optionals.set(2);
      }
      if (struct.isSetSelected_column()) {
        optionals.set(3);
      }
      if (struct.isSetKey_column_names()) {
        optionals.set(4);
      }
      if (struct.isSetKey_column_types()) {
        optionals.set(5);
      }
      if (struct.isSetIs_preaggregation()) {
        optionals.set(6);
      }
      if (struct.isSetSort_column()) {
        optionals.set(7);
      }
      if (struct.isSetRollup_name()) {
        optionals.set(8);
      }
      if (struct.isSetDict_string_ids()) {
        optionals.set(9);
      }
      if (struct.isSetDict_int_ids()) {
        optionals.set(10);
      }
      if (struct.isSetUnused_output_column_name()) {
        optionals.set(11);
      }
      if (struct.isSetSelected_partition_ids()) {
        optionals.set(12);
      }
      if (struct.isSetSelected_partition_versions()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetTablet_id()) {
        oprot.writeI64(struct.tablet_id);
      }
      if (struct.isSetIndex_id()) {
        oprot.writeI64(struct.index_id);
      }
      if (struct.isSetRemapped_slot_ids()) {
        {
          oprot.writeI32(struct.remapped_slot_ids.size());
          for (int _iter36 : struct.remapped_slot_ids)
          {
            oprot.writeI32(_iter36);
          }
        }
      }
      if (struct.isSetSelected_column()) {
        {
          oprot.writeI32(struct.selected_column.size());
          for (java.lang.String _iter37 : struct.selected_column)
          {
            oprot.writeString(_iter37);
          }
        }
      }
      if (struct.isSetKey_column_names()) {
        {
          oprot.writeI32(struct.key_column_names.size());
          for (java.lang.String _iter38 : struct.key_column_names)
          {
            oprot.writeString(_iter38);
          }
        }
      }
      if (struct.isSetKey_column_types()) {
        {
          oprot.writeI32(struct.key_column_types.size());
          for (io.datafibre.fibre.thrift.TPrimitiveType _iter39 : struct.key_column_types)
          {
            oprot.writeI32(_iter39.getValue());
          }
        }
      }
      if (struct.isSetIs_preaggregation()) {
        oprot.writeBool(struct.is_preaggregation);
      }
      if (struct.isSetSort_column()) {
        oprot.writeString(struct.sort_column);
      }
      if (struct.isSetRollup_name()) {
        oprot.writeString(struct.rollup_name);
      }
      if (struct.isSetDict_string_ids()) {
        {
          oprot.writeI32(struct.dict_string_ids.size());
          for (int _iter40 : struct.dict_string_ids)
          {
            oprot.writeI32(_iter40);
          }
        }
      }
      if (struct.isSetDict_int_ids()) {
        {
          oprot.writeI32(struct.dict_int_ids.size());
          for (int _iter41 : struct.dict_int_ids)
          {
            oprot.writeI32(_iter41);
          }
        }
      }
      if (struct.isSetUnused_output_column_name()) {
        {
          oprot.writeI32(struct.unused_output_column_name.size());
          for (java.lang.String _iter42 : struct.unused_output_column_name)
          {
            oprot.writeString(_iter42);
          }
        }
      }
      if (struct.isSetSelected_partition_ids()) {
        {
          oprot.writeI32(struct.selected_partition_ids.size());
          for (long _iter43 : struct.selected_partition_ids)
          {
            oprot.writeI64(_iter43);
          }
        }
      }
      if (struct.isSetSelected_partition_versions()) {
        {
          oprot.writeI32(struct.selected_partition_versions.size());
          for (long _iter44 : struct.selected_partition_versions)
          {
            oprot.writeI64(_iter44);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNormalOlapScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.tablet_id = iprot.readI64();
        struct.setTablet_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.index_id = iprot.readI64();
        struct.setIndex_idIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list45 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.remapped_slot_ids = new java.util.ArrayList<java.lang.Integer>(_list45.size);
          int _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readI32();
            struct.remapped_slot_ids.add(_elem46);
          }
        }
        struct.setRemapped_slot_idsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list48 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.selected_column = new java.util.ArrayList<java.lang.String>(_list48.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem49;
          for (int _i50 = 0; _i50 < _list48.size; ++_i50)
          {
            _elem49 = iprot.readString();
            struct.selected_column.add(_elem49);
          }
        }
        struct.setSelected_columnIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list51 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.key_column_names = new java.util.ArrayList<java.lang.String>(_list51.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem52;
          for (int _i53 = 0; _i53 < _list51.size; ++_i53)
          {
            _elem52 = iprot.readString();
            struct.key_column_names.add(_elem52);
          }
        }
        struct.setKey_column_namesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list54 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.key_column_types = new java.util.ArrayList<io.datafibre.fibre.thrift.TPrimitiveType>(_list54.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TPrimitiveType _elem55;
          for (int _i56 = 0; _i56 < _list54.size; ++_i56)
          {
            _elem55 = io.datafibre.fibre.thrift.TPrimitiveType.findByValue(iprot.readI32());
            if (_elem55 != null)
            {
              struct.key_column_types.add(_elem55);
            }
          }
        }
        struct.setKey_column_typesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.is_preaggregation = iprot.readBool();
        struct.setIs_preaggregationIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sort_column = iprot.readString();
        struct.setSort_columnIsSet(true);
      }
      if (incoming.get(8)) {
        struct.rollup_name = iprot.readString();
        struct.setRollup_nameIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list57 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.dict_string_ids = new java.util.ArrayList<java.lang.Integer>(_list57.size);
          int _elem58;
          for (int _i59 = 0; _i59 < _list57.size; ++_i59)
          {
            _elem58 = iprot.readI32();
            struct.dict_string_ids.add(_elem58);
          }
        }
        struct.setDict_string_idsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list60 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.dict_int_ids = new java.util.ArrayList<java.lang.Integer>(_list60.size);
          int _elem61;
          for (int _i62 = 0; _i62 < _list60.size; ++_i62)
          {
            _elem61 = iprot.readI32();
            struct.dict_int_ids.add(_elem61);
          }
        }
        struct.setDict_int_idsIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list63 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.unused_output_column_name = new java.util.ArrayList<java.lang.String>(_list63.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem64;
          for (int _i65 = 0; _i65 < _list63.size; ++_i65)
          {
            _elem64 = iprot.readString();
            struct.unused_output_column_name.add(_elem64);
          }
        }
        struct.setUnused_output_column_nameIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list66 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.selected_partition_ids = new java.util.ArrayList<java.lang.Long>(_list66.size);
          long _elem67;
          for (int _i68 = 0; _i68 < _list66.size; ++_i68)
          {
            _elem67 = iprot.readI64();
            struct.selected_partition_ids.add(_elem67);
          }
        }
        struct.setSelected_partition_idsIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list69 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.selected_partition_versions = new java.util.ArrayList<java.lang.Long>(_list69.size);
          long _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = iprot.readI64();
            struct.selected_partition_versions.add(_elem70);
          }
        }
        struct.setSelected_partition_versionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

