/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class THdfsProperties implements org.apache.thrift.TBase<THdfsProperties, THdfsProperties._Fields>, java.io.Serializable, Cloneable, Comparable<THdfsProperties> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THdfsProperties");

  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField OBJECT_STORE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("object_store_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OBJECT_STORE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("object_store_path", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("access_key", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SECRET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("secret_key", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField END_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("end_point", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DISABLE_CACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_cache", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField SSL_ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("ssl_enable", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField MAX_CONNECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("max_connection", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField HDFS_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hdfs_username", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CLOUD_CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("cloud_configuration", org.apache.thrift.protocol.TType.STRUCT, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new THdfsPropertiesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new THdfsPropertiesTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<THdfsProperty> properties; // optional
  /**
   * 
   * @see TObjectStoreType
   */
  public @org.apache.thrift.annotation.Nullable TObjectStoreType object_store_type; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String object_store_path; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String access_key; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String secret_key; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String end_point; // optional
  public boolean disable_cache; // optional
  public boolean ssl_enable; // optional
  public int max_connection; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String region; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String hdfs_username; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TCloudConfiguration cloud_configuration; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROPERTIES((short)1, "properties"),
    /**
     * 
     * @see TObjectStoreType
     */
    OBJECT_STORE_TYPE((short)2, "object_store_type"),
    OBJECT_STORE_PATH((short)3, "object_store_path"),
    ACCESS_KEY((short)4, "access_key"),
    SECRET_KEY((short)5, "secret_key"),
    END_POINT((short)6, "end_point"),
    DISABLE_CACHE((short)7, "disable_cache"),
    SSL_ENABLE((short)8, "ssl_enable"),
    MAX_CONNECTION((short)9, "max_connection"),
    REGION((short)10, "region"),
    HDFS_USERNAME((short)11, "hdfs_username"),
    CLOUD_CONFIGURATION((short)12, "cloud_configuration");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROPERTIES
          return PROPERTIES;
        case 2: // OBJECT_STORE_TYPE
          return OBJECT_STORE_TYPE;
        case 3: // OBJECT_STORE_PATH
          return OBJECT_STORE_PATH;
        case 4: // ACCESS_KEY
          return ACCESS_KEY;
        case 5: // SECRET_KEY
          return SECRET_KEY;
        case 6: // END_POINT
          return END_POINT;
        case 7: // DISABLE_CACHE
          return DISABLE_CACHE;
        case 8: // SSL_ENABLE
          return SSL_ENABLE;
        case 9: // MAX_CONNECTION
          return MAX_CONNECTION;
        case 10: // REGION
          return REGION;
        case 11: // HDFS_USERNAME
          return HDFS_USERNAME;
        case 12: // CLOUD_CONFIGURATION
          return CLOUD_CONFIGURATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DISABLE_CACHE_ISSET_ID = 0;
  private static final int __SSL_ENABLE_ISSET_ID = 1;
  private static final int __MAX_CONNECTION_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PROPERTIES,_Fields.OBJECT_STORE_TYPE,_Fields.OBJECT_STORE_PATH,_Fields.ACCESS_KEY,_Fields.SECRET_KEY,_Fields.END_POINT,_Fields.DISABLE_CACHE,_Fields.SSL_ENABLE,_Fields.MAX_CONNECTION,_Fields.REGION,_Fields.HDFS_USERNAME,_Fields.CLOUD_CONFIGURATION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsProperty.class))));
    tmpMap.put(_Fields.OBJECT_STORE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("object_store_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TObjectStoreType.class)));
    tmpMap.put(_Fields.OBJECT_STORE_PATH, new org.apache.thrift.meta_data.FieldMetaData("object_store_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("access_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECRET_KEY, new org.apache.thrift.meta_data.FieldMetaData("secret_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_POINT, new org.apache.thrift.meta_data.FieldMetaData("end_point", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISABLE_CACHE, new org.apache.thrift.meta_data.FieldMetaData("disable_cache", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SSL_ENABLE, new org.apache.thrift.meta_data.FieldMetaData("ssl_enable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MAX_CONNECTION, new org.apache.thrift.meta_data.FieldMetaData("max_connection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HDFS_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("hdfs_username", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLOUD_CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("cloud_configuration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TCloudConfiguration.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THdfsProperties.class, metaDataMap);
  }

  public THdfsProperties() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THdfsProperties(THdfsProperties other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProperties()) {
      java.util.List<THdfsProperty> __this__properties = new java.util.ArrayList<THdfsProperty>(other.properties.size());
      for (THdfsProperty other_element : other.properties) {
        __this__properties.add(new THdfsProperty(other_element));
      }
      this.properties = __this__properties;
    }
    if (other.isSetObject_store_type()) {
      this.object_store_type = other.object_store_type;
    }
    if (other.isSetObject_store_path()) {
      this.object_store_path = other.object_store_path;
    }
    if (other.isSetAccess_key()) {
      this.access_key = other.access_key;
    }
    if (other.isSetSecret_key()) {
      this.secret_key = other.secret_key;
    }
    if (other.isSetEnd_point()) {
      this.end_point = other.end_point;
    }
    this.disable_cache = other.disable_cache;
    this.ssl_enable = other.ssl_enable;
    this.max_connection = other.max_connection;
    if (other.isSetRegion()) {
      this.region = other.region;
    }
    if (other.isSetHdfs_username()) {
      this.hdfs_username = other.hdfs_username;
    }
    if (other.isSetCloud_configuration()) {
      this.cloud_configuration = new io.datafibre.fibre.thrift.TCloudConfiguration(other.cloud_configuration);
    }
  }

  @Override
  public THdfsProperties deepCopy() {
    return new THdfsProperties(this);
  }

  @Override
  public void clear() {
    this.properties = null;
    this.object_store_type = null;
    this.object_store_path = null;
    this.access_key = null;
    this.secret_key = null;
    this.end_point = null;
    setDisable_cacheIsSet(false);
    this.disable_cache = false;
    setSsl_enableIsSet(false);
    this.ssl_enable = false;
    setMax_connectionIsSet(false);
    this.max_connection = 0;
    this.region = null;
    this.hdfs_username = null;
    this.cloud_configuration = null;
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<THdfsProperty> getPropertiesIterator() {
    return (this.properties == null) ? null : this.properties.iterator();
  }

  public void addToProperties(THdfsProperty elem) {
    if (this.properties == null) {
      this.properties = new java.util.ArrayList<THdfsProperty>();
    }
    this.properties.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<THdfsProperty> getProperties() {
    return this.properties;
  }

  public THdfsProperties setProperties(@org.apache.thrift.annotation.Nullable java.util.List<THdfsProperty> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  /**
   * 
   * @see TObjectStoreType
   */
  @org.apache.thrift.annotation.Nullable
  public TObjectStoreType getObject_store_type() {
    return this.object_store_type;
  }

  /**
   * 
   * @see TObjectStoreType
   */
  public THdfsProperties setObject_store_type(@org.apache.thrift.annotation.Nullable TObjectStoreType object_store_type) {
    this.object_store_type = object_store_type;
    return this;
  }

  public void unsetObject_store_type() {
    this.object_store_type = null;
  }

  /** Returns true if field object_store_type is set (has been assigned a value) and false otherwise */
  public boolean isSetObject_store_type() {
    return this.object_store_type != null;
  }

  public void setObject_store_typeIsSet(boolean value) {
    if (!value) {
      this.object_store_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getObject_store_path() {
    return this.object_store_path;
  }

  public THdfsProperties setObject_store_path(@org.apache.thrift.annotation.Nullable java.lang.String object_store_path) {
    this.object_store_path = object_store_path;
    return this;
  }

  public void unsetObject_store_path() {
    this.object_store_path = null;
  }

  /** Returns true if field object_store_path is set (has been assigned a value) and false otherwise */
  public boolean isSetObject_store_path() {
    return this.object_store_path != null;
  }

  public void setObject_store_pathIsSet(boolean value) {
    if (!value) {
      this.object_store_path = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAccess_key() {
    return this.access_key;
  }

  public THdfsProperties setAccess_key(@org.apache.thrift.annotation.Nullable java.lang.String access_key) {
    this.access_key = access_key;
    return this;
  }

  public void unsetAccess_key() {
    this.access_key = null;
  }

  /** Returns true if field access_key is set (has been assigned a value) and false otherwise */
  public boolean isSetAccess_key() {
    return this.access_key != null;
  }

  public void setAccess_keyIsSet(boolean value) {
    if (!value) {
      this.access_key = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSecret_key() {
    return this.secret_key;
  }

  public THdfsProperties setSecret_key(@org.apache.thrift.annotation.Nullable java.lang.String secret_key) {
    this.secret_key = secret_key;
    return this;
  }

  public void unsetSecret_key() {
    this.secret_key = null;
  }

  /** Returns true if field secret_key is set (has been assigned a value) and false otherwise */
  public boolean isSetSecret_key() {
    return this.secret_key != null;
  }

  public void setSecret_keyIsSet(boolean value) {
    if (!value) {
      this.secret_key = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEnd_point() {
    return this.end_point;
  }

  public THdfsProperties setEnd_point(@org.apache.thrift.annotation.Nullable java.lang.String end_point) {
    this.end_point = end_point;
    return this;
  }

  public void unsetEnd_point() {
    this.end_point = null;
  }

  /** Returns true if field end_point is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_point() {
    return this.end_point != null;
  }

  public void setEnd_pointIsSet(boolean value) {
    if (!value) {
      this.end_point = null;
    }
  }

  public boolean isDisable_cache() {
    return this.disable_cache;
  }

  public THdfsProperties setDisable_cache(boolean disable_cache) {
    this.disable_cache = disable_cache;
    setDisable_cacheIsSet(true);
    return this;
  }

  public void unsetDisable_cache() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISABLE_CACHE_ISSET_ID);
  }

  /** Returns true if field disable_cache is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_cache() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISABLE_CACHE_ISSET_ID);
  }

  public void setDisable_cacheIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISABLE_CACHE_ISSET_ID, value);
  }

  public boolean isSsl_enable() {
    return this.ssl_enable;
  }

  public THdfsProperties setSsl_enable(boolean ssl_enable) {
    this.ssl_enable = ssl_enable;
    setSsl_enableIsSet(true);
    return this;
  }

  public void unsetSsl_enable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SSL_ENABLE_ISSET_ID);
  }

  /** Returns true if field ssl_enable is set (has been assigned a value) and false otherwise */
  public boolean isSetSsl_enable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SSL_ENABLE_ISSET_ID);
  }

  public void setSsl_enableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SSL_ENABLE_ISSET_ID, value);
  }

  public int getMax_connection() {
    return this.max_connection;
  }

  public THdfsProperties setMax_connection(int max_connection) {
    this.max_connection = max_connection;
    setMax_connectionIsSet(true);
    return this;
  }

  public void unsetMax_connection() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_CONNECTION_ISSET_ID);
  }

  /** Returns true if field max_connection is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_connection() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_CONNECTION_ISSET_ID);
  }

  public void setMax_connectionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_CONNECTION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRegion() {
    return this.region;
  }

  public THdfsProperties setRegion(@org.apache.thrift.annotation.Nullable java.lang.String region) {
    this.region = region;
    return this;
  }

  public void unsetRegion() {
    this.region = null;
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return this.region != null;
  }

  public void setRegionIsSet(boolean value) {
    if (!value) {
      this.region = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHdfs_username() {
    return this.hdfs_username;
  }

  public THdfsProperties setHdfs_username(@org.apache.thrift.annotation.Nullable java.lang.String hdfs_username) {
    this.hdfs_username = hdfs_username;
    return this;
  }

  public void unsetHdfs_username() {
    this.hdfs_username = null;
  }

  /** Returns true if field hdfs_username is set (has been assigned a value) and false otherwise */
  public boolean isSetHdfs_username() {
    return this.hdfs_username != null;
  }

  public void setHdfs_usernameIsSet(boolean value) {
    if (!value) {
      this.hdfs_username = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TCloudConfiguration getCloud_configuration() {
    return this.cloud_configuration;
  }

  public THdfsProperties setCloud_configuration(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TCloudConfiguration cloud_configuration) {
    this.cloud_configuration = cloud_configuration;
    return this;
  }

  public void unsetCloud_configuration() {
    this.cloud_configuration = null;
  }

  /** Returns true if field cloud_configuration is set (has been assigned a value) and false otherwise */
  public boolean isSetCloud_configuration() {
    return this.cloud_configuration != null;
  }

  public void setCloud_configurationIsSet(boolean value) {
    if (!value) {
      this.cloud_configuration = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.List<THdfsProperty>)value);
      }
      break;

    case OBJECT_STORE_TYPE:
      if (value == null) {
        unsetObject_store_type();
      } else {
        setObject_store_type((TObjectStoreType)value);
      }
      break;

    case OBJECT_STORE_PATH:
      if (value == null) {
        unsetObject_store_path();
      } else {
        setObject_store_path((java.lang.String)value);
      }
      break;

    case ACCESS_KEY:
      if (value == null) {
        unsetAccess_key();
      } else {
        setAccess_key((java.lang.String)value);
      }
      break;

    case SECRET_KEY:
      if (value == null) {
        unsetSecret_key();
      } else {
        setSecret_key((java.lang.String)value);
      }
      break;

    case END_POINT:
      if (value == null) {
        unsetEnd_point();
      } else {
        setEnd_point((java.lang.String)value);
      }
      break;

    case DISABLE_CACHE:
      if (value == null) {
        unsetDisable_cache();
      } else {
        setDisable_cache((java.lang.Boolean)value);
      }
      break;

    case SSL_ENABLE:
      if (value == null) {
        unsetSsl_enable();
      } else {
        setSsl_enable((java.lang.Boolean)value);
      }
      break;

    case MAX_CONNECTION:
      if (value == null) {
        unsetMax_connection();
      } else {
        setMax_connection((java.lang.Integer)value);
      }
      break;

    case REGION:
      if (value == null) {
        unsetRegion();
      } else {
        setRegion((java.lang.String)value);
      }
      break;

    case HDFS_USERNAME:
      if (value == null) {
        unsetHdfs_username();
      } else {
        setHdfs_username((java.lang.String)value);
      }
      break;

    case CLOUD_CONFIGURATION:
      if (value == null) {
        unsetCloud_configuration();
      } else {
        setCloud_configuration((io.datafibre.fibre.thrift.TCloudConfiguration)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PROPERTIES:
      return getProperties();

    case OBJECT_STORE_TYPE:
      return getObject_store_type();

    case OBJECT_STORE_PATH:
      return getObject_store_path();

    case ACCESS_KEY:
      return getAccess_key();

    case SECRET_KEY:
      return getSecret_key();

    case END_POINT:
      return getEnd_point();

    case DISABLE_CACHE:
      return isDisable_cache();

    case SSL_ENABLE:
      return isSsl_enable();

    case MAX_CONNECTION:
      return getMax_connection();

    case REGION:
      return getRegion();

    case HDFS_USERNAME:
      return getHdfs_username();

    case CLOUD_CONFIGURATION:
      return getCloud_configuration();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PROPERTIES:
      return isSetProperties();
    case OBJECT_STORE_TYPE:
      return isSetObject_store_type();
    case OBJECT_STORE_PATH:
      return isSetObject_store_path();
    case ACCESS_KEY:
      return isSetAccess_key();
    case SECRET_KEY:
      return isSetSecret_key();
    case END_POINT:
      return isSetEnd_point();
    case DISABLE_CACHE:
      return isSetDisable_cache();
    case SSL_ENABLE:
      return isSetSsl_enable();
    case MAX_CONNECTION:
      return isSetMax_connection();
    case REGION:
      return isSetRegion();
    case HDFS_USERNAME:
      return isSetHdfs_username();
    case CLOUD_CONFIGURATION:
      return isSetCloud_configuration();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof THdfsProperties)
      return this.equals((THdfsProperties)that);
    return false;
  }

  public boolean equals(THdfsProperties that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_object_store_type = true && this.isSetObject_store_type();
    boolean that_present_object_store_type = true && that.isSetObject_store_type();
    if (this_present_object_store_type || that_present_object_store_type) {
      if (!(this_present_object_store_type && that_present_object_store_type))
        return false;
      if (!this.object_store_type.equals(that.object_store_type))
        return false;
    }

    boolean this_present_object_store_path = true && this.isSetObject_store_path();
    boolean that_present_object_store_path = true && that.isSetObject_store_path();
    if (this_present_object_store_path || that_present_object_store_path) {
      if (!(this_present_object_store_path && that_present_object_store_path))
        return false;
      if (!this.object_store_path.equals(that.object_store_path))
        return false;
    }

    boolean this_present_access_key = true && this.isSetAccess_key();
    boolean that_present_access_key = true && that.isSetAccess_key();
    if (this_present_access_key || that_present_access_key) {
      if (!(this_present_access_key && that_present_access_key))
        return false;
      if (!this.access_key.equals(that.access_key))
        return false;
    }

    boolean this_present_secret_key = true && this.isSetSecret_key();
    boolean that_present_secret_key = true && that.isSetSecret_key();
    if (this_present_secret_key || that_present_secret_key) {
      if (!(this_present_secret_key && that_present_secret_key))
        return false;
      if (!this.secret_key.equals(that.secret_key))
        return false;
    }

    boolean this_present_end_point = true && this.isSetEnd_point();
    boolean that_present_end_point = true && that.isSetEnd_point();
    if (this_present_end_point || that_present_end_point) {
      if (!(this_present_end_point && that_present_end_point))
        return false;
      if (!this.end_point.equals(that.end_point))
        return false;
    }

    boolean this_present_disable_cache = true && this.isSetDisable_cache();
    boolean that_present_disable_cache = true && that.isSetDisable_cache();
    if (this_present_disable_cache || that_present_disable_cache) {
      if (!(this_present_disable_cache && that_present_disable_cache))
        return false;
      if (this.disable_cache != that.disable_cache)
        return false;
    }

    boolean this_present_ssl_enable = true && this.isSetSsl_enable();
    boolean that_present_ssl_enable = true && that.isSetSsl_enable();
    if (this_present_ssl_enable || that_present_ssl_enable) {
      if (!(this_present_ssl_enable && that_present_ssl_enable))
        return false;
      if (this.ssl_enable != that.ssl_enable)
        return false;
    }

    boolean this_present_max_connection = true && this.isSetMax_connection();
    boolean that_present_max_connection = true && that.isSetMax_connection();
    if (this_present_max_connection || that_present_max_connection) {
      if (!(this_present_max_connection && that_present_max_connection))
        return false;
      if (this.max_connection != that.max_connection)
        return false;
    }

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (!this.region.equals(that.region))
        return false;
    }

    boolean this_present_hdfs_username = true && this.isSetHdfs_username();
    boolean that_present_hdfs_username = true && that.isSetHdfs_username();
    if (this_present_hdfs_username || that_present_hdfs_username) {
      if (!(this_present_hdfs_username && that_present_hdfs_username))
        return false;
      if (!this.hdfs_username.equals(that.hdfs_username))
        return false;
    }

    boolean this_present_cloud_configuration = true && this.isSetCloud_configuration();
    boolean that_present_cloud_configuration = true && that.isSetCloud_configuration();
    if (this_present_cloud_configuration || that_present_cloud_configuration) {
      if (!(this_present_cloud_configuration && that_present_cloud_configuration))
        return false;
      if (!this.cloud_configuration.equals(that.cloud_configuration))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetObject_store_type()) ? 131071 : 524287);
    if (isSetObject_store_type())
      hashCode = hashCode * 8191 + object_store_type.getValue();

    hashCode = hashCode * 8191 + ((isSetObject_store_path()) ? 131071 : 524287);
    if (isSetObject_store_path())
      hashCode = hashCode * 8191 + object_store_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccess_key()) ? 131071 : 524287);
    if (isSetAccess_key())
      hashCode = hashCode * 8191 + access_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetSecret_key()) ? 131071 : 524287);
    if (isSetSecret_key())
      hashCode = hashCode * 8191 + secret_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnd_point()) ? 131071 : 524287);
    if (isSetEnd_point())
      hashCode = hashCode * 8191 + end_point.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisable_cache()) ? 131071 : 524287);
    if (isSetDisable_cache())
      hashCode = hashCode * 8191 + ((disable_cache) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSsl_enable()) ? 131071 : 524287);
    if (isSetSsl_enable())
      hashCode = hashCode * 8191 + ((ssl_enable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMax_connection()) ? 131071 : 524287);
    if (isSetMax_connection())
      hashCode = hashCode * 8191 + max_connection;

    hashCode = hashCode * 8191 + ((isSetRegion()) ? 131071 : 524287);
    if (isSetRegion())
      hashCode = hashCode * 8191 + region.hashCode();

    hashCode = hashCode * 8191 + ((isSetHdfs_username()) ? 131071 : 524287);
    if (isSetHdfs_username())
      hashCode = hashCode * 8191 + hdfs_username.hashCode();

    hashCode = hashCode * 8191 + ((isSetCloud_configuration()) ? 131071 : 524287);
    if (isSetCloud_configuration())
      hashCode = hashCode * 8191 + cloud_configuration.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(THdfsProperties other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetProperties(), other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetObject_store_type(), other.isSetObject_store_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject_store_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_store_type, other.object_store_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetObject_store_path(), other.isSetObject_store_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject_store_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_store_path, other.object_store_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAccess_key(), other.isSetAccess_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccess_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_key, other.access_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSecret_key(), other.isSetSecret_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecret_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secret_key, other.secret_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnd_point(), other.isSetEnd_point());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_point()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_point, other.end_point);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDisable_cache(), other.isSetDisable_cache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_cache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_cache, other.disable_cache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSsl_enable(), other.isSetSsl_enable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSsl_enable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ssl_enable, other.ssl_enable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_connection(), other.isSetMax_connection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_connection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_connection, other.max_connection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRegion(), other.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, other.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHdfs_username(), other.isSetHdfs_username());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHdfs_username()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hdfs_username, other.hdfs_username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCloud_configuration(), other.isSetCloud_configuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloud_configuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloud_configuration, other.cloud_configuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("THdfsProperties(");
    boolean first = true;

    if (isSetProperties()) {
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    if (isSetObject_store_type()) {
      if (!first) sb.append(", ");
      sb.append("object_store_type:");
      if (this.object_store_type == null) {
        sb.append("null");
      } else {
        sb.append(this.object_store_type);
      }
      first = false;
    }
    if (isSetObject_store_path()) {
      if (!first) sb.append(", ");
      sb.append("object_store_path:");
      if (this.object_store_path == null) {
        sb.append("null");
      } else {
        sb.append(this.object_store_path);
      }
      first = false;
    }
    if (isSetAccess_key()) {
      if (!first) sb.append(", ");
      sb.append("access_key:");
      if (this.access_key == null) {
        sb.append("null");
      } else {
        sb.append(this.access_key);
      }
      first = false;
    }
    if (isSetSecret_key()) {
      if (!first) sb.append(", ");
      sb.append("secret_key:");
      if (this.secret_key == null) {
        sb.append("null");
      } else {
        sb.append(this.secret_key);
      }
      first = false;
    }
    if (isSetEnd_point()) {
      if (!first) sb.append(", ");
      sb.append("end_point:");
      if (this.end_point == null) {
        sb.append("null");
      } else {
        sb.append(this.end_point);
      }
      first = false;
    }
    if (isSetDisable_cache()) {
      if (!first) sb.append(", ");
      sb.append("disable_cache:");
      sb.append(this.disable_cache);
      first = false;
    }
    if (isSetSsl_enable()) {
      if (!first) sb.append(", ");
      sb.append("ssl_enable:");
      sb.append(this.ssl_enable);
      first = false;
    }
    if (isSetMax_connection()) {
      if (!first) sb.append(", ");
      sb.append("max_connection:");
      sb.append(this.max_connection);
      first = false;
    }
    if (isSetRegion()) {
      if (!first) sb.append(", ");
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
    }
    if (isSetHdfs_username()) {
      if (!first) sb.append(", ");
      sb.append("hdfs_username:");
      if (this.hdfs_username == null) {
        sb.append("null");
      } else {
        sb.append(this.hdfs_username);
      }
      first = false;
    }
    if (isSetCloud_configuration()) {
      if (!first) sb.append(", ");
      sb.append("cloud_configuration:");
      if (this.cloud_configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.cloud_configuration);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cloud_configuration != null) {
      cloud_configuration.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THdfsPropertiesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THdfsPropertiesStandardScheme getScheme() {
      return new THdfsPropertiesStandardScheme();
    }
  }

  private static class THdfsPropertiesStandardScheme extends org.apache.thrift.scheme.StandardScheme<THdfsProperties> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, THdfsProperties struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.properties = new java.util.ArrayList<THdfsProperty>(_list24.size);
                @org.apache.thrift.annotation.Nullable THdfsProperty _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new THdfsProperty();
                  _elem25.read(iprot);
                  struct.properties.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OBJECT_STORE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.object_store_type = io.datafibre.fibre.thrift.TObjectStoreType.findByValue(iprot.readI32());
              struct.setObject_store_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OBJECT_STORE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.object_store_path = iprot.readString();
              struct.setObject_store_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCESS_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.access_key = iprot.readString();
              struct.setAccess_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SECRET_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secret_key = iprot.readString();
              struct.setSecret_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.end_point = iprot.readString();
              struct.setEnd_pointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DISABLE_CACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_cache = iprot.readBool();
              struct.setDisable_cacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SSL_ENABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ssl_enable = iprot.readBool();
              struct.setSsl_enableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAX_CONNECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_connection = iprot.readI32();
              struct.setMax_connectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.region = iprot.readString();
              struct.setRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HDFS_USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hdfs_username = iprot.readString();
              struct.setHdfs_usernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CLOUD_CONFIGURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cloud_configuration = new io.datafibre.fibre.thrift.TCloudConfiguration();
              struct.cloud_configuration.read(iprot);
              struct.setCloud_configurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, THdfsProperties struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.properties.size()));
            for (THdfsProperty _iter27 : struct.properties)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.object_store_type != null) {
        if (struct.isSetObject_store_type()) {
          oprot.writeFieldBegin(OBJECT_STORE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.object_store_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.object_store_path != null) {
        if (struct.isSetObject_store_path()) {
          oprot.writeFieldBegin(OBJECT_STORE_PATH_FIELD_DESC);
          oprot.writeString(struct.object_store_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.access_key != null) {
        if (struct.isSetAccess_key()) {
          oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.access_key);
          oprot.writeFieldEnd();
        }
      }
      if (struct.secret_key != null) {
        if (struct.isSetSecret_key()) {
          oprot.writeFieldBegin(SECRET_KEY_FIELD_DESC);
          oprot.writeString(struct.secret_key);
          oprot.writeFieldEnd();
        }
      }
      if (struct.end_point != null) {
        if (struct.isSetEnd_point()) {
          oprot.writeFieldBegin(END_POINT_FIELD_DESC);
          oprot.writeString(struct.end_point);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDisable_cache()) {
        oprot.writeFieldBegin(DISABLE_CACHE_FIELD_DESC);
        oprot.writeBool(struct.disable_cache);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSsl_enable()) {
        oprot.writeFieldBegin(SSL_ENABLE_FIELD_DESC);
        oprot.writeBool(struct.ssl_enable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_connection()) {
        oprot.writeFieldBegin(MAX_CONNECTION_FIELD_DESC);
        oprot.writeI32(struct.max_connection);
        oprot.writeFieldEnd();
      }
      if (struct.region != null) {
        if (struct.isSetRegion()) {
          oprot.writeFieldBegin(REGION_FIELD_DESC);
          oprot.writeString(struct.region);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hdfs_username != null) {
        if (struct.isSetHdfs_username()) {
          oprot.writeFieldBegin(HDFS_USERNAME_FIELD_DESC);
          oprot.writeString(struct.hdfs_username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cloud_configuration != null) {
        if (struct.isSetCloud_configuration()) {
          oprot.writeFieldBegin(CLOUD_CONFIGURATION_FIELD_DESC);
          struct.cloud_configuration.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THdfsPropertiesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THdfsPropertiesTupleScheme getScheme() {
      return new THdfsPropertiesTupleScheme();
    }
  }

  private static class THdfsPropertiesTupleScheme extends org.apache.thrift.scheme.TupleScheme<THdfsProperties> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THdfsProperties struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetProperties()) {
        optionals.set(0);
      }
      if (struct.isSetObject_store_type()) {
        optionals.set(1);
      }
      if (struct.isSetObject_store_path()) {
        optionals.set(2);
      }
      if (struct.isSetAccess_key()) {
        optionals.set(3);
      }
      if (struct.isSetSecret_key()) {
        optionals.set(4);
      }
      if (struct.isSetEnd_point()) {
        optionals.set(5);
      }
      if (struct.isSetDisable_cache()) {
        optionals.set(6);
      }
      if (struct.isSetSsl_enable()) {
        optionals.set(7);
      }
      if (struct.isSetMax_connection()) {
        optionals.set(8);
      }
      if (struct.isSetRegion()) {
        optionals.set(9);
      }
      if (struct.isSetHdfs_username()) {
        optionals.set(10);
      }
      if (struct.isSetCloud_configuration()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (THdfsProperty _iter28 : struct.properties)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetObject_store_type()) {
        oprot.writeI32(struct.object_store_type.getValue());
      }
      if (struct.isSetObject_store_path()) {
        oprot.writeString(struct.object_store_path);
      }
      if (struct.isSetAccess_key()) {
        oprot.writeString(struct.access_key);
      }
      if (struct.isSetSecret_key()) {
        oprot.writeString(struct.secret_key);
      }
      if (struct.isSetEnd_point()) {
        oprot.writeString(struct.end_point);
      }
      if (struct.isSetDisable_cache()) {
        oprot.writeBool(struct.disable_cache);
      }
      if (struct.isSetSsl_enable()) {
        oprot.writeBool(struct.ssl_enable);
      }
      if (struct.isSetMax_connection()) {
        oprot.writeI32(struct.max_connection);
      }
      if (struct.isSetRegion()) {
        oprot.writeString(struct.region);
      }
      if (struct.isSetHdfs_username()) {
        oprot.writeString(struct.hdfs_username);
      }
      if (struct.isSetCloud_configuration()) {
        struct.cloud_configuration.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THdfsProperties struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.properties = new java.util.ArrayList<THdfsProperty>(_list29.size);
          @org.apache.thrift.annotation.Nullable THdfsProperty _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new THdfsProperty();
            _elem30.read(iprot);
            struct.properties.add(_elem30);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.object_store_type = io.datafibre.fibre.thrift.TObjectStoreType.findByValue(iprot.readI32());
        struct.setObject_store_typeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.object_store_path = iprot.readString();
        struct.setObject_store_pathIsSet(true);
      }
      if (incoming.get(3)) {
        struct.access_key = iprot.readString();
        struct.setAccess_keyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.secret_key = iprot.readString();
        struct.setSecret_keyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.end_point = iprot.readString();
        struct.setEnd_pointIsSet(true);
      }
      if (incoming.get(6)) {
        struct.disable_cache = iprot.readBool();
        struct.setDisable_cacheIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ssl_enable = iprot.readBool();
        struct.setSsl_enableIsSet(true);
      }
      if (incoming.get(8)) {
        struct.max_connection = iprot.readI32();
        struct.setMax_connectionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.region = iprot.readString();
        struct.setRegionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.hdfs_username = iprot.readString();
        struct.setHdfs_usernameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cloud_configuration = new io.datafibre.fibre.thrift.TCloudConfiguration();
        struct.cloud_configuration.read(iprot);
        struct.setCloud_configurationIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

