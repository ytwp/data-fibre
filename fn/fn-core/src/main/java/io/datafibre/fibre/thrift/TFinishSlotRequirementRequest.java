/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TFinishSlotRequirementRequest implements org.apache.thrift.TBase<TFinishSlotRequirementRequest, TFinishSlotRequirementRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TFinishSlotRequirementRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFinishSlotRequirementRequest");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SLOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("slot_id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PIPELINE_DOP_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeline_dop", org.apache.thrift.protocol.TType.I32, (short)100);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TFinishSlotRequirementRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TFinishSlotRequirementRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TStatus status; // optional
  public @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUniqueId slot_id; // optional
  public int pipeline_dop; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    SLOT_ID((short)2, "slot_id"),
    PIPELINE_DOP((short)100, "pipeline_dop");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // SLOT_ID
          return SLOT_ID;
        case 100: // PIPELINE_DOP
          return PIPELINE_DOP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PIPELINE_DOP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STATUS,_Fields.SLOT_ID,_Fields.PIPELINE_DOP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TStatus.class)));
    tmpMap.put(_Fields.SLOT_ID, new org.apache.thrift.meta_data.FieldMetaData("slot_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.PIPELINE_DOP, new org.apache.thrift.meta_data.FieldMetaData("pipeline_dop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFinishSlotRequirementRequest.class, metaDataMap);
  }

  public TFinishSlotRequirementRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFinishSlotRequirementRequest(TFinishSlotRequirementRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = new io.datafibre.fibre.thrift.TStatus(other.status);
    }
    if (other.isSetSlot_id()) {
      this.slot_id = new io.datafibre.fibre.thrift.TUniqueId(other.slot_id);
    }
    this.pipeline_dop = other.pipeline_dop;
  }

  @Override
  public TFinishSlotRequirementRequest deepCopy() {
    return new TFinishSlotRequirementRequest(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.slot_id = null;
    setPipeline_dopIsSet(false);
    this.pipeline_dop = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TStatus getStatus() {
    return this.status;
  }

  public TFinishSlotRequirementRequest setStatus(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public io.datafibre.fibre.thrift.TUniqueId getSlot_id() {
    return this.slot_id;
  }

  public TFinishSlotRequirementRequest setSlot_id(@org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TUniqueId slot_id) {
    this.slot_id = slot_id;
    return this;
  }

  public void unsetSlot_id() {
    this.slot_id = null;
  }

  /** Returns true if field slot_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSlot_id() {
    return this.slot_id != null;
  }

  public void setSlot_idIsSet(boolean value) {
    if (!value) {
      this.slot_id = null;
    }
  }

  public int getPipeline_dop() {
    return this.pipeline_dop;
  }

  public TFinishSlotRequirementRequest setPipeline_dop(int pipeline_dop) {
    this.pipeline_dop = pipeline_dop;
    setPipeline_dopIsSet(true);
    return this;
  }

  public void unsetPipeline_dop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PIPELINE_DOP_ISSET_ID);
  }

  /** Returns true if field pipeline_dop is set (has been assigned a value) and false otherwise */
  public boolean isSetPipeline_dop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PIPELINE_DOP_ISSET_ID);
  }

  public void setPipeline_dopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PIPELINE_DOP_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((io.datafibre.fibre.thrift.TStatus)value);
      }
      break;

    case SLOT_ID:
      if (value == null) {
        unsetSlot_id();
      } else {
        setSlot_id((io.datafibre.fibre.thrift.TUniqueId)value);
      }
      break;

    case PIPELINE_DOP:
      if (value == null) {
        unsetPipeline_dop();
      } else {
        setPipeline_dop((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case SLOT_ID:
      return getSlot_id();

    case PIPELINE_DOP:
      return getPipeline_dop();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case SLOT_ID:
      return isSetSlot_id();
    case PIPELINE_DOP:
      return isSetPipeline_dop();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TFinishSlotRequirementRequest)
      return this.equals((TFinishSlotRequirementRequest)that);
    return false;
  }

  public boolean equals(TFinishSlotRequirementRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_slot_id = true && this.isSetSlot_id();
    boolean that_present_slot_id = true && that.isSetSlot_id();
    if (this_present_slot_id || that_present_slot_id) {
      if (!(this_present_slot_id && that_present_slot_id))
        return false;
      if (!this.slot_id.equals(that.slot_id))
        return false;
    }

    boolean this_present_pipeline_dop = true && this.isSetPipeline_dop();
    boolean that_present_pipeline_dop = true && that.isSetPipeline_dop();
    if (this_present_pipeline_dop || that_present_pipeline_dop) {
      if (!(this_present_pipeline_dop && that_present_pipeline_dop))
        return false;
      if (this.pipeline_dop != that.pipeline_dop)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetSlot_id()) ? 131071 : 524287);
    if (isSetSlot_id())
      hashCode = hashCode * 8191 + slot_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetPipeline_dop()) ? 131071 : 524287);
    if (isSetPipeline_dop())
      hashCode = hashCode * 8191 + pipeline_dop;

    return hashCode;
  }

  @Override
  public int compareTo(TFinishSlotRequirementRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSlot_id(), other.isSetSlot_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlot_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slot_id, other.slot_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPipeline_dop(), other.isSetPipeline_dop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipeline_dop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeline_dop, other.pipeline_dop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TFinishSlotRequirementRequest(");
    boolean first = true;

    if (isSetStatus()) {
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetSlot_id()) {
      if (!first) sb.append(", ");
      sb.append("slot_id:");
      if (this.slot_id == null) {
        sb.append("null");
      } else {
        sb.append(this.slot_id);
      }
      first = false;
    }
    if (isSetPipeline_dop()) {
      if (!first) sb.append(", ");
      sb.append("pipeline_dop:");
      sb.append(this.pipeline_dop);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
    if (slot_id != null) {
      slot_id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFinishSlotRequirementRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TFinishSlotRequirementRequestStandardScheme getScheme() {
      return new TFinishSlotRequirementRequestStandardScheme();
    }
  }

  private static class TFinishSlotRequirementRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TFinishSlotRequirementRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TFinishSlotRequirementRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new io.datafibre.fibre.thrift.TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLOT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.slot_id = new io.datafibre.fibre.thrift.TUniqueId();
              struct.slot_id.read(iprot);
              struct.setSlot_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // PIPELINE_DOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pipeline_dop = iprot.readI32();
              struct.setPipeline_dopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TFinishSlotRequirementRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          struct.status.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.slot_id != null) {
        if (struct.isSetSlot_id()) {
          oprot.writeFieldBegin(SLOT_ID_FIELD_DESC);
          struct.slot_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPipeline_dop()) {
        oprot.writeFieldBegin(PIPELINE_DOP_FIELD_DESC);
        oprot.writeI32(struct.pipeline_dop);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFinishSlotRequirementRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TFinishSlotRequirementRequestTupleScheme getScheme() {
      return new TFinishSlotRequirementRequestTupleScheme();
    }
  }

  private static class TFinishSlotRequirementRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TFinishSlotRequirementRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFinishSlotRequirementRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetSlot_id()) {
        optionals.set(1);
      }
      if (struct.isSetPipeline_dop()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
      if (struct.isSetSlot_id()) {
        struct.slot_id.write(oprot);
      }
      if (struct.isSetPipeline_dop()) {
        oprot.writeI32(struct.pipeline_dop);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFinishSlotRequirementRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.status = new io.datafibre.fibre.thrift.TStatus();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.slot_id = new io.datafibre.fibre.thrift.TUniqueId();
        struct.slot_id.read(iprot);
        struct.setSlot_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pipeline_dop = iprot.readI32();
        struct.setPipeline_dopIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

