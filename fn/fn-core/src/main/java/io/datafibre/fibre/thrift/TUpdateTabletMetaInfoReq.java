/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TUpdateTabletMetaInfoReq implements org.apache.thrift.TBase<TUpdateTabletMetaInfoReq, TUpdateTabletMetaInfoReq._Fields>, java.io.Serializable, Cloneable, Comparable<TUpdateTabletMetaInfoReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUpdateTabletMetaInfoReq");

  private static final org.apache.thrift.protocol.TField TABLET_META_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("tabletMetaInfos", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TABLET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_id", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TUpdateTabletMetaInfoReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TUpdateTabletMetaInfoReqTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<TTabletMetaInfo> tabletMetaInfos; // optional
  /**
   * 
   * @see TTabletType
   */
  public @org.apache.thrift.annotation.Nullable TTabletType tablet_type; // optional
  public long txn_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLET_META_INFOS((short)1, "tabletMetaInfos"),
    /**
     * 
     * @see TTabletType
     */
    TABLET_TYPE((short)2, "tablet_type"),
    TXN_ID((short)3, "txn_id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLET_META_INFOS
          return TABLET_META_INFOS;
        case 2: // TABLET_TYPE
          return TABLET_TYPE;
        case 3: // TXN_ID
          return TXN_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TXN_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TABLET_META_INFOS,_Fields.TABLET_TYPE,_Fields.TXN_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLET_META_INFOS, new org.apache.thrift.meta_data.FieldMetaData("tabletMetaInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTabletMetaInfo.class))));
    tmpMap.put(_Fields.TABLET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tablet_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTabletType.class)));
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txn_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUpdateTabletMetaInfoReq.class, metaDataMap);
  }

  public TUpdateTabletMetaInfoReq() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUpdateTabletMetaInfoReq(TUpdateTabletMetaInfoReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTabletMetaInfos()) {
      java.util.List<TTabletMetaInfo> __this__tabletMetaInfos = new java.util.ArrayList<TTabletMetaInfo>(other.tabletMetaInfos.size());
      for (TTabletMetaInfo other_element : other.tabletMetaInfos) {
        __this__tabletMetaInfos.add(new TTabletMetaInfo(other_element));
      }
      this.tabletMetaInfos = __this__tabletMetaInfos;
    }
    if (other.isSetTablet_type()) {
      this.tablet_type = other.tablet_type;
    }
    this.txn_id = other.txn_id;
  }

  @Override
  public TUpdateTabletMetaInfoReq deepCopy() {
    return new TUpdateTabletMetaInfoReq(this);
  }

  @Override
  public void clear() {
    this.tabletMetaInfos = null;
    this.tablet_type = null;
    setTxn_idIsSet(false);
    this.txn_id = 0;
  }

  public int getTabletMetaInfosSize() {
    return (this.tabletMetaInfos == null) ? 0 : this.tabletMetaInfos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TTabletMetaInfo> getTabletMetaInfosIterator() {
    return (this.tabletMetaInfos == null) ? null : this.tabletMetaInfos.iterator();
  }

  public void addToTabletMetaInfos(TTabletMetaInfo elem) {
    if (this.tabletMetaInfos == null) {
      this.tabletMetaInfos = new java.util.ArrayList<TTabletMetaInfo>();
    }
    this.tabletMetaInfos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TTabletMetaInfo> getTabletMetaInfos() {
    return this.tabletMetaInfos;
  }

  public TUpdateTabletMetaInfoReq setTabletMetaInfos(@org.apache.thrift.annotation.Nullable java.util.List<TTabletMetaInfo> tabletMetaInfos) {
    this.tabletMetaInfos = tabletMetaInfos;
    return this;
  }

  public void unsetTabletMetaInfos() {
    this.tabletMetaInfos = null;
  }

  /** Returns true if field tabletMetaInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetTabletMetaInfos() {
    return this.tabletMetaInfos != null;
  }

  public void setTabletMetaInfosIsSet(boolean value) {
    if (!value) {
      this.tabletMetaInfos = null;
    }
  }

  /**
   * 
   * @see TTabletType
   */
  @org.apache.thrift.annotation.Nullable
  public TTabletType getTablet_type() {
    return this.tablet_type;
  }

  /**
   * 
   * @see TTabletType
   */
  public TUpdateTabletMetaInfoReq setTablet_type(@org.apache.thrift.annotation.Nullable TTabletType tablet_type) {
    this.tablet_type = tablet_type;
    return this;
  }

  public void unsetTablet_type() {
    this.tablet_type = null;
  }

  /** Returns true if field tablet_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_type() {
    return this.tablet_type != null;
  }

  public void setTablet_typeIsSet(boolean value) {
    if (!value) {
      this.tablet_type = null;
    }
  }

  public long getTxn_id() {
    return this.txn_id;
  }

  public TUpdateTabletMetaInfoReq setTxn_id(long txn_id) {
    this.txn_id = txn_id;
    setTxn_idIsSet(true);
    return this;
  }

  public void unsetTxn_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  /** Returns true if field txn_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  public void setTxn_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXN_ID_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLET_META_INFOS:
      if (value == null) {
        unsetTabletMetaInfos();
      } else {
        setTabletMetaInfos((java.util.List<TTabletMetaInfo>)value);
      }
      break;

    case TABLET_TYPE:
      if (value == null) {
        unsetTablet_type();
      } else {
        setTablet_type((TTabletType)value);
      }
      break;

    case TXN_ID:
      if (value == null) {
        unsetTxn_id();
      } else {
        setTxn_id((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLET_META_INFOS:
      return getTabletMetaInfos();

    case TABLET_TYPE:
      return getTablet_type();

    case TXN_ID:
      return getTxn_id();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLET_META_INFOS:
      return isSetTabletMetaInfos();
    case TABLET_TYPE:
      return isSetTablet_type();
    case TXN_ID:
      return isSetTxn_id();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TUpdateTabletMetaInfoReq)
      return this.equals((TUpdateTabletMetaInfoReq)that);
    return false;
  }

  public boolean equals(TUpdateTabletMetaInfoReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tabletMetaInfos = true && this.isSetTabletMetaInfos();
    boolean that_present_tabletMetaInfos = true && that.isSetTabletMetaInfos();
    if (this_present_tabletMetaInfos || that_present_tabletMetaInfos) {
      if (!(this_present_tabletMetaInfos && that_present_tabletMetaInfos))
        return false;
      if (!this.tabletMetaInfos.equals(that.tabletMetaInfos))
        return false;
    }

    boolean this_present_tablet_type = true && this.isSetTablet_type();
    boolean that_present_tablet_type = true && that.isSetTablet_type();
    if (this_present_tablet_type || that_present_tablet_type) {
      if (!(this_present_tablet_type && that_present_tablet_type))
        return false;
      if (!this.tablet_type.equals(that.tablet_type))
        return false;
    }

    boolean this_present_txn_id = true && this.isSetTxn_id();
    boolean that_present_txn_id = true && that.isSetTxn_id();
    if (this_present_txn_id || that_present_txn_id) {
      if (!(this_present_txn_id && that_present_txn_id))
        return false;
      if (this.txn_id != that.txn_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTabletMetaInfos()) ? 131071 : 524287);
    if (isSetTabletMetaInfos())
      hashCode = hashCode * 8191 + tabletMetaInfos.hashCode();

    hashCode = hashCode * 8191 + ((isSetTablet_type()) ? 131071 : 524287);
    if (isSetTablet_type())
      hashCode = hashCode * 8191 + tablet_type.getValue();

    hashCode = hashCode * 8191 + ((isSetTxn_id()) ? 131071 : 524287);
    if (isSetTxn_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txn_id);

    return hashCode;
  }

  @Override
  public int compareTo(TUpdateTabletMetaInfoReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTabletMetaInfos(), other.isSetTabletMetaInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTabletMetaInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tabletMetaInfos, other.tabletMetaInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_type(), other.isSetTablet_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_type, other.tablet_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxn_id(), other.isSetTxn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_id, other.txn_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TUpdateTabletMetaInfoReq(");
    boolean first = true;

    if (isSetTabletMetaInfos()) {
      sb.append("tabletMetaInfos:");
      if (this.tabletMetaInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.tabletMetaInfos);
      }
      first = false;
    }
    if (isSetTablet_type()) {
      if (!first) sb.append(", ");
      sb.append("tablet_type:");
      if (this.tablet_type == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet_type);
      }
      first = false;
    }
    if (isSetTxn_id()) {
      if (!first) sb.append(", ");
      sb.append("txn_id:");
      sb.append(this.txn_id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUpdateTabletMetaInfoReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TUpdateTabletMetaInfoReqStandardScheme getScheme() {
      return new TUpdateTabletMetaInfoReqStandardScheme();
    }
  }

  private static class TUpdateTabletMetaInfoReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<TUpdateTabletMetaInfoReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TUpdateTabletMetaInfoReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLET_META_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list204 = iprot.readListBegin();
                struct.tabletMetaInfos = new java.util.ArrayList<TTabletMetaInfo>(_list204.size);
                @org.apache.thrift.annotation.Nullable TTabletMetaInfo _elem205;
                for (int _i206 = 0; _i206 < _list204.size; ++_i206)
                {
                  _elem205 = new TTabletMetaInfo();
                  _elem205.read(iprot);
                  struct.tabletMetaInfos.add(_elem205);
                }
                iprot.readListEnd();
              }
              struct.setTabletMetaInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tablet_type = io.datafibre.fibre.thrift.TTabletType.findByValue(iprot.readI32());
              struct.setTablet_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txn_id = iprot.readI64();
              struct.setTxn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TUpdateTabletMetaInfoReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tabletMetaInfos != null) {
        if (struct.isSetTabletMetaInfos()) {
          oprot.writeFieldBegin(TABLET_META_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tabletMetaInfos.size()));
            for (TTabletMetaInfo _iter207 : struct.tabletMetaInfos)
            {
              _iter207.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tablet_type != null) {
        if (struct.isSetTablet_type()) {
          oprot.writeFieldBegin(TABLET_TYPE_FIELD_DESC);
          oprot.writeI32(struct.tablet_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTxn_id()) {
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txn_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUpdateTabletMetaInfoReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TUpdateTabletMetaInfoReqTupleScheme getScheme() {
      return new TUpdateTabletMetaInfoReqTupleScheme();
    }
  }

  private static class TUpdateTabletMetaInfoReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<TUpdateTabletMetaInfoReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUpdateTabletMetaInfoReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTabletMetaInfos()) {
        optionals.set(0);
      }
      if (struct.isSetTablet_type()) {
        optionals.set(1);
      }
      if (struct.isSetTxn_id()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTabletMetaInfos()) {
        {
          oprot.writeI32(struct.tabletMetaInfos.size());
          for (TTabletMetaInfo _iter208 : struct.tabletMetaInfos)
          {
            _iter208.write(oprot);
          }
        }
      }
      if (struct.isSetTablet_type()) {
        oprot.writeI32(struct.tablet_type.getValue());
      }
      if (struct.isSetTxn_id()) {
        oprot.writeI64(struct.txn_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUpdateTabletMetaInfoReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list209 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.tabletMetaInfos = new java.util.ArrayList<TTabletMetaInfo>(_list209.size);
          @org.apache.thrift.annotation.Nullable TTabletMetaInfo _elem210;
          for (int _i211 = 0; _i211 < _list209.size; ++_i211)
          {
            _elem210 = new TTabletMetaInfo();
            _elem210.read(iprot);
            struct.tabletMetaInfos.add(_elem210);
          }
        }
        struct.setTabletMetaInfosIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tablet_type = io.datafibre.fibre.thrift.TTabletType.findByValue(iprot.readI32());
        struct.setTablet_typeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.txn_id = iprot.readI64();
        struct.setTxn_idIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

