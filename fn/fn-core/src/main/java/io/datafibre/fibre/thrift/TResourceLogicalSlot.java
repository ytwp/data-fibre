/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TResourceLogicalSlot implements org.apache.thrift.TBase<TResourceLogicalSlot, TResourceLogicalSlot._Fields>, java.io.Serializable, Cloneable, Comparable<TResourceLogicalSlot> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResourceLogicalSlot");

  private static final org.apache.thrift.protocol.TField SLOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("slot_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField REQUEST_FE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("request_fe_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_SLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_slots", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField EXPIRED_PENDING_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("expired_pending_time_ms", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField EXPIRED_ALLOCATED_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("expired_allocated_time_ms", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField FE_START_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("fe_start_time_ms", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField NUM_FRAGMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_fragments", org.apache.thrift.protocol.TType.I32, (short)100);
  private static final org.apache.thrift.protocol.TField PIPELINE_DOP_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeline_dop", org.apache.thrift.protocol.TType.I32, (short)101);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TResourceLogicalSlotStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TResourceLogicalSlotTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId slot_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String request_fe_name; // optional
  public long group_id; // optional
  public int num_slots; // optional
  public long expired_pending_time_ms; // optional
  public long expired_allocated_time_ms; // optional
  public long fe_start_time_ms; // optional
  public int num_fragments; // optional
  public int pipeline_dop; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLOT_ID((short)1, "slot_id"),
    REQUEST_FE_NAME((short)2, "request_fe_name"),
    GROUP_ID((short)3, "group_id"),
    NUM_SLOTS((short)4, "num_slots"),
    EXPIRED_PENDING_TIME_MS((short)5, "expired_pending_time_ms"),
    EXPIRED_ALLOCATED_TIME_MS((short)6, "expired_allocated_time_ms"),
    FE_START_TIME_MS((short)7, "fe_start_time_ms"),
    NUM_FRAGMENTS((short)100, "num_fragments"),
    PIPELINE_DOP((short)101, "pipeline_dop");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLOT_ID
          return SLOT_ID;
        case 2: // REQUEST_FE_NAME
          return REQUEST_FE_NAME;
        case 3: // GROUP_ID
          return GROUP_ID;
        case 4: // NUM_SLOTS
          return NUM_SLOTS;
        case 5: // EXPIRED_PENDING_TIME_MS
          return EXPIRED_PENDING_TIME_MS;
        case 6: // EXPIRED_ALLOCATED_TIME_MS
          return EXPIRED_ALLOCATED_TIME_MS;
        case 7: // FE_START_TIME_MS
          return FE_START_TIME_MS;
        case 100: // NUM_FRAGMENTS
          return NUM_FRAGMENTS;
        case 101: // PIPELINE_DOP
          return PIPELINE_DOP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GROUP_ID_ISSET_ID = 0;
  private static final int __NUM_SLOTS_ISSET_ID = 1;
  private static final int __EXPIRED_PENDING_TIME_MS_ISSET_ID = 2;
  private static final int __EXPIRED_ALLOCATED_TIME_MS_ISSET_ID = 3;
  private static final int __FE_START_TIME_MS_ISSET_ID = 4;
  private static final int __NUM_FRAGMENTS_ISSET_ID = 5;
  private static final int __PIPELINE_DOP_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SLOT_ID,_Fields.REQUEST_FE_NAME,_Fields.GROUP_ID,_Fields.NUM_SLOTS,_Fields.EXPIRED_PENDING_TIME_MS,_Fields.EXPIRED_ALLOCATED_TIME_MS,_Fields.FE_START_TIME_MS,_Fields.NUM_FRAGMENTS,_Fields.PIPELINE_DOP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLOT_ID, new org.apache.thrift.meta_data.FieldMetaData("slot_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.REQUEST_FE_NAME, new org.apache.thrift.meta_data.FieldMetaData("request_fe_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_SLOTS, new org.apache.thrift.meta_data.FieldMetaData("num_slots", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPIRED_PENDING_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("expired_pending_time_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPIRED_ALLOCATED_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("expired_allocated_time_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FE_START_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("fe_start_time_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_FRAGMENTS, new org.apache.thrift.meta_data.FieldMetaData("num_fragments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PIPELINE_DOP, new org.apache.thrift.meta_data.FieldMetaData("pipeline_dop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResourceLogicalSlot.class, metaDataMap);
  }

  public TResourceLogicalSlot() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResourceLogicalSlot(TResourceLogicalSlot other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSlot_id()) {
      this.slot_id = new com.starrocks.thrift.TUniqueId(other.slot_id);
    }
    if (other.isSetRequest_fe_name()) {
      this.request_fe_name = other.request_fe_name;
    }
    this.group_id = other.group_id;
    this.num_slots = other.num_slots;
    this.expired_pending_time_ms = other.expired_pending_time_ms;
    this.expired_allocated_time_ms = other.expired_allocated_time_ms;
    this.fe_start_time_ms = other.fe_start_time_ms;
    this.num_fragments = other.num_fragments;
    this.pipeline_dop = other.pipeline_dop;
  }

  @Override
  public TResourceLogicalSlot deepCopy() {
    return new TResourceLogicalSlot(this);
  }

  @Override
  public void clear() {
    this.slot_id = null;
    this.request_fe_name = null;
    setGroup_idIsSet(false);
    this.group_id = 0;
    setNum_slotsIsSet(false);
    this.num_slots = 0;
    setExpired_pending_time_msIsSet(false);
    this.expired_pending_time_ms = 0;
    setExpired_allocated_time_msIsSet(false);
    this.expired_allocated_time_ms = 0;
    setFe_start_time_msIsSet(false);
    this.fe_start_time_ms = 0;
    setNum_fragmentsIsSet(false);
    this.num_fragments = 0;
    setPipeline_dopIsSet(false);
    this.pipeline_dop = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TUniqueId getSlot_id() {
    return this.slot_id;
  }

  public TResourceLogicalSlot setSlot_id(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId slot_id) {
    this.slot_id = slot_id;
    return this;
  }

  public void unsetSlot_id() {
    this.slot_id = null;
  }

  /** Returns true if field slot_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSlot_id() {
    return this.slot_id != null;
  }

  public void setSlot_idIsSet(boolean value) {
    if (!value) {
      this.slot_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRequest_fe_name() {
    return this.request_fe_name;
  }

  public TResourceLogicalSlot setRequest_fe_name(@org.apache.thrift.annotation.Nullable java.lang.String request_fe_name) {
    this.request_fe_name = request_fe_name;
    return this;
  }

  public void unsetRequest_fe_name() {
    this.request_fe_name = null;
  }

  /** Returns true if field request_fe_name is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_fe_name() {
    return this.request_fe_name != null;
  }

  public void setRequest_fe_nameIsSet(boolean value) {
    if (!value) {
      this.request_fe_name = null;
    }
  }

  public long getGroup_id() {
    return this.group_id;
  }

  public TResourceLogicalSlot setGroup_id(long group_id) {
    this.group_id = group_id;
    setGroup_idIsSet(true);
    return this;
  }

  public void unsetGroup_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
  }

  /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
  }

  public void setGroup_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GROUP_ID_ISSET_ID, value);
  }

  public int getNum_slots() {
    return this.num_slots;
  }

  public TResourceLogicalSlot setNum_slots(int num_slots) {
    this.num_slots = num_slots;
    setNum_slotsIsSet(true);
    return this;
  }

  public void unsetNum_slots() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_SLOTS_ISSET_ID);
  }

  /** Returns true if field num_slots is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_slots() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_SLOTS_ISSET_ID);
  }

  public void setNum_slotsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_SLOTS_ISSET_ID, value);
  }

  public long getExpired_pending_time_ms() {
    return this.expired_pending_time_ms;
  }

  public TResourceLogicalSlot setExpired_pending_time_ms(long expired_pending_time_ms) {
    this.expired_pending_time_ms = expired_pending_time_ms;
    setExpired_pending_time_msIsSet(true);
    return this;
  }

  public void unsetExpired_pending_time_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPIRED_PENDING_TIME_MS_ISSET_ID);
  }

  /** Returns true if field expired_pending_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetExpired_pending_time_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPIRED_PENDING_TIME_MS_ISSET_ID);
  }

  public void setExpired_pending_time_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPIRED_PENDING_TIME_MS_ISSET_ID, value);
  }

  public long getExpired_allocated_time_ms() {
    return this.expired_allocated_time_ms;
  }

  public TResourceLogicalSlot setExpired_allocated_time_ms(long expired_allocated_time_ms) {
    this.expired_allocated_time_ms = expired_allocated_time_ms;
    setExpired_allocated_time_msIsSet(true);
    return this;
  }

  public void unsetExpired_allocated_time_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPIRED_ALLOCATED_TIME_MS_ISSET_ID);
  }

  /** Returns true if field expired_allocated_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetExpired_allocated_time_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPIRED_ALLOCATED_TIME_MS_ISSET_ID);
  }

  public void setExpired_allocated_time_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPIRED_ALLOCATED_TIME_MS_ISSET_ID, value);
  }

  public long getFe_start_time_ms() {
    return this.fe_start_time_ms;
  }

  public TResourceLogicalSlot setFe_start_time_ms(long fe_start_time_ms) {
    this.fe_start_time_ms = fe_start_time_ms;
    setFe_start_time_msIsSet(true);
    return this;
  }

  public void unsetFe_start_time_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FE_START_TIME_MS_ISSET_ID);
  }

  /** Returns true if field fe_start_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetFe_start_time_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FE_START_TIME_MS_ISSET_ID);
  }

  public void setFe_start_time_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FE_START_TIME_MS_ISSET_ID, value);
  }

  public int getNum_fragments() {
    return this.num_fragments;
  }

  public TResourceLogicalSlot setNum_fragments(int num_fragments) {
    this.num_fragments = num_fragments;
    setNum_fragmentsIsSet(true);
    return this;
  }

  public void unsetNum_fragments() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_FRAGMENTS_ISSET_ID);
  }

  /** Returns true if field num_fragments is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_fragments() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_FRAGMENTS_ISSET_ID);
  }

  public void setNum_fragmentsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_FRAGMENTS_ISSET_ID, value);
  }

  public int getPipeline_dop() {
    return this.pipeline_dop;
  }

  public TResourceLogicalSlot setPipeline_dop(int pipeline_dop) {
    this.pipeline_dop = pipeline_dop;
    setPipeline_dopIsSet(true);
    return this;
  }

  public void unsetPipeline_dop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PIPELINE_DOP_ISSET_ID);
  }

  /** Returns true if field pipeline_dop is set (has been assigned a value) and false otherwise */
  public boolean isSetPipeline_dop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PIPELINE_DOP_ISSET_ID);
  }

  public void setPipeline_dopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PIPELINE_DOP_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SLOT_ID:
      if (value == null) {
        unsetSlot_id();
      } else {
        setSlot_id((com.starrocks.thrift.TUniqueId)value);
      }
      break;

    case REQUEST_FE_NAME:
      if (value == null) {
        unsetRequest_fe_name();
      } else {
        setRequest_fe_name((java.lang.String)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroup_id();
      } else {
        setGroup_id((java.lang.Long)value);
      }
      break;

    case NUM_SLOTS:
      if (value == null) {
        unsetNum_slots();
      } else {
        setNum_slots((java.lang.Integer)value);
      }
      break;

    case EXPIRED_PENDING_TIME_MS:
      if (value == null) {
        unsetExpired_pending_time_ms();
      } else {
        setExpired_pending_time_ms((java.lang.Long)value);
      }
      break;

    case EXPIRED_ALLOCATED_TIME_MS:
      if (value == null) {
        unsetExpired_allocated_time_ms();
      } else {
        setExpired_allocated_time_ms((java.lang.Long)value);
      }
      break;

    case FE_START_TIME_MS:
      if (value == null) {
        unsetFe_start_time_ms();
      } else {
        setFe_start_time_ms((java.lang.Long)value);
      }
      break;

    case NUM_FRAGMENTS:
      if (value == null) {
        unsetNum_fragments();
      } else {
        setNum_fragments((java.lang.Integer)value);
      }
      break;

    case PIPELINE_DOP:
      if (value == null) {
        unsetPipeline_dop();
      } else {
        setPipeline_dop((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SLOT_ID:
      return getSlot_id();

    case REQUEST_FE_NAME:
      return getRequest_fe_name();

    case GROUP_ID:
      return getGroup_id();

    case NUM_SLOTS:
      return getNum_slots();

    case EXPIRED_PENDING_TIME_MS:
      return getExpired_pending_time_ms();

    case EXPIRED_ALLOCATED_TIME_MS:
      return getExpired_allocated_time_ms();

    case FE_START_TIME_MS:
      return getFe_start_time_ms();

    case NUM_FRAGMENTS:
      return getNum_fragments();

    case PIPELINE_DOP:
      return getPipeline_dop();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SLOT_ID:
      return isSetSlot_id();
    case REQUEST_FE_NAME:
      return isSetRequest_fe_name();
    case GROUP_ID:
      return isSetGroup_id();
    case NUM_SLOTS:
      return isSetNum_slots();
    case EXPIRED_PENDING_TIME_MS:
      return isSetExpired_pending_time_ms();
    case EXPIRED_ALLOCATED_TIME_MS:
      return isSetExpired_allocated_time_ms();
    case FE_START_TIME_MS:
      return isSetFe_start_time_ms();
    case NUM_FRAGMENTS:
      return isSetNum_fragments();
    case PIPELINE_DOP:
      return isSetPipeline_dop();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TResourceLogicalSlot)
      return this.equals((TResourceLogicalSlot)that);
    return false;
  }

  public boolean equals(TResourceLogicalSlot that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_slot_id = true && this.isSetSlot_id();
    boolean that_present_slot_id = true && that.isSetSlot_id();
    if (this_present_slot_id || that_present_slot_id) {
      if (!(this_present_slot_id && that_present_slot_id))
        return false;
      if (!this.slot_id.equals(that.slot_id))
        return false;
    }

    boolean this_present_request_fe_name = true && this.isSetRequest_fe_name();
    boolean that_present_request_fe_name = true && that.isSetRequest_fe_name();
    if (this_present_request_fe_name || that_present_request_fe_name) {
      if (!(this_present_request_fe_name && that_present_request_fe_name))
        return false;
      if (!this.request_fe_name.equals(that.request_fe_name))
        return false;
    }

    boolean this_present_group_id = true && this.isSetGroup_id();
    boolean that_present_group_id = true && that.isSetGroup_id();
    if (this_present_group_id || that_present_group_id) {
      if (!(this_present_group_id && that_present_group_id))
        return false;
      if (this.group_id != that.group_id)
        return false;
    }

    boolean this_present_num_slots = true && this.isSetNum_slots();
    boolean that_present_num_slots = true && that.isSetNum_slots();
    if (this_present_num_slots || that_present_num_slots) {
      if (!(this_present_num_slots && that_present_num_slots))
        return false;
      if (this.num_slots != that.num_slots)
        return false;
    }

    boolean this_present_expired_pending_time_ms = true && this.isSetExpired_pending_time_ms();
    boolean that_present_expired_pending_time_ms = true && that.isSetExpired_pending_time_ms();
    if (this_present_expired_pending_time_ms || that_present_expired_pending_time_ms) {
      if (!(this_present_expired_pending_time_ms && that_present_expired_pending_time_ms))
        return false;
      if (this.expired_pending_time_ms != that.expired_pending_time_ms)
        return false;
    }

    boolean this_present_expired_allocated_time_ms = true && this.isSetExpired_allocated_time_ms();
    boolean that_present_expired_allocated_time_ms = true && that.isSetExpired_allocated_time_ms();
    if (this_present_expired_allocated_time_ms || that_present_expired_allocated_time_ms) {
      if (!(this_present_expired_allocated_time_ms && that_present_expired_allocated_time_ms))
        return false;
      if (this.expired_allocated_time_ms != that.expired_allocated_time_ms)
        return false;
    }

    boolean this_present_fe_start_time_ms = true && this.isSetFe_start_time_ms();
    boolean that_present_fe_start_time_ms = true && that.isSetFe_start_time_ms();
    if (this_present_fe_start_time_ms || that_present_fe_start_time_ms) {
      if (!(this_present_fe_start_time_ms && that_present_fe_start_time_ms))
        return false;
      if (this.fe_start_time_ms != that.fe_start_time_ms)
        return false;
    }

    boolean this_present_num_fragments = true && this.isSetNum_fragments();
    boolean that_present_num_fragments = true && that.isSetNum_fragments();
    if (this_present_num_fragments || that_present_num_fragments) {
      if (!(this_present_num_fragments && that_present_num_fragments))
        return false;
      if (this.num_fragments != that.num_fragments)
        return false;
    }

    boolean this_present_pipeline_dop = true && this.isSetPipeline_dop();
    boolean that_present_pipeline_dop = true && that.isSetPipeline_dop();
    if (this_present_pipeline_dop || that_present_pipeline_dop) {
      if (!(this_present_pipeline_dop && that_present_pipeline_dop))
        return false;
      if (this.pipeline_dop != that.pipeline_dop)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSlot_id()) ? 131071 : 524287);
    if (isSetSlot_id())
      hashCode = hashCode * 8191 + slot_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequest_fe_name()) ? 131071 : 524287);
    if (isSetRequest_fe_name())
      hashCode = hashCode * 8191 + request_fe_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetGroup_id()) ? 131071 : 524287);
    if (isSetGroup_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(group_id);

    hashCode = hashCode * 8191 + ((isSetNum_slots()) ? 131071 : 524287);
    if (isSetNum_slots())
      hashCode = hashCode * 8191 + num_slots;

    hashCode = hashCode * 8191 + ((isSetExpired_pending_time_ms()) ? 131071 : 524287);
    if (isSetExpired_pending_time_ms())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(expired_pending_time_ms);

    hashCode = hashCode * 8191 + ((isSetExpired_allocated_time_ms()) ? 131071 : 524287);
    if (isSetExpired_allocated_time_ms())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(expired_allocated_time_ms);

    hashCode = hashCode * 8191 + ((isSetFe_start_time_ms()) ? 131071 : 524287);
    if (isSetFe_start_time_ms())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fe_start_time_ms);

    hashCode = hashCode * 8191 + ((isSetNum_fragments()) ? 131071 : 524287);
    if (isSetNum_fragments())
      hashCode = hashCode * 8191 + num_fragments;

    hashCode = hashCode * 8191 + ((isSetPipeline_dop()) ? 131071 : 524287);
    if (isSetPipeline_dop())
      hashCode = hashCode * 8191 + pipeline_dop;

    return hashCode;
  }

  @Override
  public int compareTo(TResourceLogicalSlot other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSlot_id(), other.isSetSlot_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlot_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slot_id, other.slot_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRequest_fe_name(), other.isSetRequest_fe_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_fe_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_fe_name, other.request_fe_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGroup_id(), other.isSetGroup_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, other.group_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_slots(), other.isSetNum_slots());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_slots()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_slots, other.num_slots);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExpired_pending_time_ms(), other.isSetExpired_pending_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpired_pending_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expired_pending_time_ms, other.expired_pending_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExpired_allocated_time_ms(), other.isSetExpired_allocated_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpired_allocated_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expired_allocated_time_ms, other.expired_allocated_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFe_start_time_ms(), other.isSetFe_start_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFe_start_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe_start_time_ms, other.fe_start_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_fragments(), other.isSetNum_fragments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_fragments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_fragments, other.num_fragments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPipeline_dop(), other.isSetPipeline_dop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipeline_dop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeline_dop, other.pipeline_dop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TResourceLogicalSlot(");
    boolean first = true;

    if (isSetSlot_id()) {
      sb.append("slot_id:");
      if (this.slot_id == null) {
        sb.append("null");
      } else {
        sb.append(this.slot_id);
      }
      first = false;
    }
    if (isSetRequest_fe_name()) {
      if (!first) sb.append(", ");
      sb.append("request_fe_name:");
      if (this.request_fe_name == null) {
        sb.append("null");
      } else {
        sb.append(this.request_fe_name);
      }
      first = false;
    }
    if (isSetGroup_id()) {
      if (!first) sb.append(", ");
      sb.append("group_id:");
      sb.append(this.group_id);
      first = false;
    }
    if (isSetNum_slots()) {
      if (!first) sb.append(", ");
      sb.append("num_slots:");
      sb.append(this.num_slots);
      first = false;
    }
    if (isSetExpired_pending_time_ms()) {
      if (!first) sb.append(", ");
      sb.append("expired_pending_time_ms:");
      sb.append(this.expired_pending_time_ms);
      first = false;
    }
    if (isSetExpired_allocated_time_ms()) {
      if (!first) sb.append(", ");
      sb.append("expired_allocated_time_ms:");
      sb.append(this.expired_allocated_time_ms);
      first = false;
    }
    if (isSetFe_start_time_ms()) {
      if (!first) sb.append(", ");
      sb.append("fe_start_time_ms:");
      sb.append(this.fe_start_time_ms);
      first = false;
    }
    if (isSetNum_fragments()) {
      if (!first) sb.append(", ");
      sb.append("num_fragments:");
      sb.append(this.num_fragments);
      first = false;
    }
    if (isSetPipeline_dop()) {
      if (!first) sb.append(", ");
      sb.append("pipeline_dop:");
      sb.append(this.pipeline_dop);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (slot_id != null) {
      slot_id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResourceLogicalSlotStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TResourceLogicalSlotStandardScheme getScheme() {
      return new TResourceLogicalSlotStandardScheme();
    }
  }

  private static class TResourceLogicalSlotStandardScheme extends org.apache.thrift.scheme.StandardScheme<TResourceLogicalSlot> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TResourceLogicalSlot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLOT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.slot_id = new com.starrocks.thrift.TUniqueId();
              struct.slot_id.read(iprot);
              struct.setSlot_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQUEST_FE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.request_fe_name = iprot.readString();
              struct.setRequest_fe_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.group_id = iprot.readI64();
              struct.setGroup_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_SLOTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_slots = iprot.readI32();
              struct.setNum_slotsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXPIRED_PENDING_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expired_pending_time_ms = iprot.readI64();
              struct.setExpired_pending_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPIRED_ALLOCATED_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expired_allocated_time_ms = iprot.readI64();
              struct.setExpired_allocated_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FE_START_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fe_start_time_ms = iprot.readI64();
              struct.setFe_start_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // NUM_FRAGMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_fragments = iprot.readI32();
              struct.setNum_fragmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // PIPELINE_DOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pipeline_dop = iprot.readI32();
              struct.setPipeline_dopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TResourceLogicalSlot struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.slot_id != null) {
        if (struct.isSetSlot_id()) {
          oprot.writeFieldBegin(SLOT_ID_FIELD_DESC);
          struct.slot_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.request_fe_name != null) {
        if (struct.isSetRequest_fe_name()) {
          oprot.writeFieldBegin(REQUEST_FE_NAME_FIELD_DESC);
          oprot.writeString(struct.request_fe_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGroup_id()) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.group_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_slots()) {
        oprot.writeFieldBegin(NUM_SLOTS_FIELD_DESC);
        oprot.writeI32(struct.num_slots);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExpired_pending_time_ms()) {
        oprot.writeFieldBegin(EXPIRED_PENDING_TIME_MS_FIELD_DESC);
        oprot.writeI64(struct.expired_pending_time_ms);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExpired_allocated_time_ms()) {
        oprot.writeFieldBegin(EXPIRED_ALLOCATED_TIME_MS_FIELD_DESC);
        oprot.writeI64(struct.expired_allocated_time_ms);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFe_start_time_ms()) {
        oprot.writeFieldBegin(FE_START_TIME_MS_FIELD_DESC);
        oprot.writeI64(struct.fe_start_time_ms);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_fragments()) {
        oprot.writeFieldBegin(NUM_FRAGMENTS_FIELD_DESC);
        oprot.writeI32(struct.num_fragments);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPipeline_dop()) {
        oprot.writeFieldBegin(PIPELINE_DOP_FIELD_DESC);
        oprot.writeI32(struct.pipeline_dop);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResourceLogicalSlotTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TResourceLogicalSlotTupleScheme getScheme() {
      return new TResourceLogicalSlotTupleScheme();
    }
  }

  private static class TResourceLogicalSlotTupleScheme extends org.apache.thrift.scheme.TupleScheme<TResourceLogicalSlot> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResourceLogicalSlot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSlot_id()) {
        optionals.set(0);
      }
      if (struct.isSetRequest_fe_name()) {
        optionals.set(1);
      }
      if (struct.isSetGroup_id()) {
        optionals.set(2);
      }
      if (struct.isSetNum_slots()) {
        optionals.set(3);
      }
      if (struct.isSetExpired_pending_time_ms()) {
        optionals.set(4);
      }
      if (struct.isSetExpired_allocated_time_ms()) {
        optionals.set(5);
      }
      if (struct.isSetFe_start_time_ms()) {
        optionals.set(6);
      }
      if (struct.isSetNum_fragments()) {
        optionals.set(7);
      }
      if (struct.isSetPipeline_dop()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetSlot_id()) {
        struct.slot_id.write(oprot);
      }
      if (struct.isSetRequest_fe_name()) {
        oprot.writeString(struct.request_fe_name);
      }
      if (struct.isSetGroup_id()) {
        oprot.writeI64(struct.group_id);
      }
      if (struct.isSetNum_slots()) {
        oprot.writeI32(struct.num_slots);
      }
      if (struct.isSetExpired_pending_time_ms()) {
        oprot.writeI64(struct.expired_pending_time_ms);
      }
      if (struct.isSetExpired_allocated_time_ms()) {
        oprot.writeI64(struct.expired_allocated_time_ms);
      }
      if (struct.isSetFe_start_time_ms()) {
        oprot.writeI64(struct.fe_start_time_ms);
      }
      if (struct.isSetNum_fragments()) {
        oprot.writeI32(struct.num_fragments);
      }
      if (struct.isSetPipeline_dop()) {
        oprot.writeI32(struct.pipeline_dop);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResourceLogicalSlot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.slot_id = new com.starrocks.thrift.TUniqueId();
        struct.slot_id.read(iprot);
        struct.setSlot_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.request_fe_name = iprot.readString();
        struct.setRequest_fe_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.group_id = iprot.readI64();
        struct.setGroup_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.num_slots = iprot.readI32();
        struct.setNum_slotsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.expired_pending_time_ms = iprot.readI64();
        struct.setExpired_pending_time_msIsSet(true);
      }
      if (incoming.get(5)) {
        struct.expired_allocated_time_ms = iprot.readI64();
        struct.setExpired_allocated_time_msIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fe_start_time_ms = iprot.readI64();
        struct.setFe_start_time_msIsSet(true);
      }
      if (incoming.get(7)) {
        struct.num_fragments = iprot.readI32();
        struct.setNum_fragmentsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.pipeline_dop = iprot.readI32();
        struct.setPipeline_dopIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

