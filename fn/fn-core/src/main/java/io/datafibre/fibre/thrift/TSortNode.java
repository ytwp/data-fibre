/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TSortNode implements org.apache.thrift.TBase<TSortNode, TSortNode._Fields>, java.io.Serializable, Cloneable, Comparable<TSortNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSortNode");

  private static final org.apache.thrift.protocol.TField SORT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_info", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField USE_TOP_N_FIELD_DESC = new org.apache.thrift.protocol.TField("use_top_n", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ORDERING_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("ordering_exprs", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField IS_ASC_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("is_asc_order", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField IS_DEFAULT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_default_limit", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField NULLS_FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("nulls_first", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField SORT_TUPLE_SLOT_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_tuple_slot_exprs", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField HAS_OUTER_JOIN_CHILD_FIELD_DESC = new org.apache.thrift.protocol.TField("has_outer_join_child", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField SQL_SORT_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_sort_keys", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ANALYTIC_PARTITION_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("analytic_partition_exprs", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField PARTITION_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_exprs", org.apache.thrift.protocol.TType.LIST, (short)23);
  private static final org.apache.thrift.protocol.TField PARTITION_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_limit", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField TOPN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("topn_type", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField BUILD_RUNTIME_FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("build_runtime_filters", org.apache.thrift.protocol.TType.LIST, (short)26);
  private static final org.apache.thrift.protocol.TField MAX_BUFFERED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_buffered_rows", org.apache.thrift.protocol.TType.I64, (short)27);
  private static final org.apache.thrift.protocol.TField MAX_BUFFERED_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("max_buffered_bytes", org.apache.thrift.protocol.TType.I64, (short)28);
  private static final org.apache.thrift.protocol.TField LATE_MATERIALIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("late_materialization", org.apache.thrift.protocol.TType.BOOL, (short)29);
  private static final org.apache.thrift.protocol.TField ENABLE_PARALLEL_MERGE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_parallel_merge", org.apache.thrift.protocol.TType.BOOL, (short)30);
  private static final org.apache.thrift.protocol.TField ANALYTIC_PARTITION_SKEWED_FIELD_DESC = new org.apache.thrift.protocol.TField("analytic_partition_skewed", org.apache.thrift.protocol.TType.BOOL, (short)31);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSortNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSortNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TSortInfo sort_info; // required
  public boolean use_top_n; // required
  public long offset; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> ordering_exprs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> is_asc_order; // optional
  public boolean is_default_limit; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> nulls_first; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> sort_tuple_slot_exprs; // optional
  public boolean has_outer_join_child; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sql_sort_keys; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> analytic_partition_exprs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> partition_exprs; // optional
  public long partition_limit; // optional
  /**
   * 
   * @see TTopNType
   */
  public @org.apache.thrift.annotation.Nullable TTopNType topn_type; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TRuntimeFilterDescription> build_runtime_filters; // optional
  public long max_buffered_rows; // optional
  public long max_buffered_bytes; // optional
  public boolean late_materialization; // optional
  public boolean enable_parallel_merge; // optional
  public boolean analytic_partition_skewed; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SORT_INFO((short)1, "sort_info"),
    USE_TOP_N((short)2, "use_top_n"),
    OFFSET((short)3, "offset"),
    ORDERING_EXPRS((short)4, "ordering_exprs"),
    IS_ASC_ORDER((short)5, "is_asc_order"),
    IS_DEFAULT_LIMIT((short)6, "is_default_limit"),
    NULLS_FIRST((short)7, "nulls_first"),
    SORT_TUPLE_SLOT_EXPRS((short)8, "sort_tuple_slot_exprs"),
    HAS_OUTER_JOIN_CHILD((short)20, "has_outer_join_child"),
    SQL_SORT_KEYS((short)21, "sql_sort_keys"),
    ANALYTIC_PARTITION_EXPRS((short)22, "analytic_partition_exprs"),
    PARTITION_EXPRS((short)23, "partition_exprs"),
    PARTITION_LIMIT((short)24, "partition_limit"),
    /**
     * 
     * @see TTopNType
     */
    TOPN_TYPE((short)25, "topn_type"),
    BUILD_RUNTIME_FILTERS((short)26, "build_runtime_filters"),
    MAX_BUFFERED_ROWS((short)27, "max_buffered_rows"),
    MAX_BUFFERED_BYTES((short)28, "max_buffered_bytes"),
    LATE_MATERIALIZATION((short)29, "late_materialization"),
    ENABLE_PARALLEL_MERGE((short)30, "enable_parallel_merge"),
    ANALYTIC_PARTITION_SKEWED((short)31, "analytic_partition_skewed");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SORT_INFO
          return SORT_INFO;
        case 2: // USE_TOP_N
          return USE_TOP_N;
        case 3: // OFFSET
          return OFFSET;
        case 4: // ORDERING_EXPRS
          return ORDERING_EXPRS;
        case 5: // IS_ASC_ORDER
          return IS_ASC_ORDER;
        case 6: // IS_DEFAULT_LIMIT
          return IS_DEFAULT_LIMIT;
        case 7: // NULLS_FIRST
          return NULLS_FIRST;
        case 8: // SORT_TUPLE_SLOT_EXPRS
          return SORT_TUPLE_SLOT_EXPRS;
        case 20: // HAS_OUTER_JOIN_CHILD
          return HAS_OUTER_JOIN_CHILD;
        case 21: // SQL_SORT_KEYS
          return SQL_SORT_KEYS;
        case 22: // ANALYTIC_PARTITION_EXPRS
          return ANALYTIC_PARTITION_EXPRS;
        case 23: // PARTITION_EXPRS
          return PARTITION_EXPRS;
        case 24: // PARTITION_LIMIT
          return PARTITION_LIMIT;
        case 25: // TOPN_TYPE
          return TOPN_TYPE;
        case 26: // BUILD_RUNTIME_FILTERS
          return BUILD_RUNTIME_FILTERS;
        case 27: // MAX_BUFFERED_ROWS
          return MAX_BUFFERED_ROWS;
        case 28: // MAX_BUFFERED_BYTES
          return MAX_BUFFERED_BYTES;
        case 29: // LATE_MATERIALIZATION
          return LATE_MATERIALIZATION;
        case 30: // ENABLE_PARALLEL_MERGE
          return ENABLE_PARALLEL_MERGE;
        case 31: // ANALYTIC_PARTITION_SKEWED
          return ANALYTIC_PARTITION_SKEWED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USE_TOP_N_ISSET_ID = 0;
  private static final int __OFFSET_ISSET_ID = 1;
  private static final int __IS_DEFAULT_LIMIT_ISSET_ID = 2;
  private static final int __HAS_OUTER_JOIN_CHILD_ISSET_ID = 3;
  private static final int __PARTITION_LIMIT_ISSET_ID = 4;
  private static final int __MAX_BUFFERED_ROWS_ISSET_ID = 5;
  private static final int __MAX_BUFFERED_BYTES_ISSET_ID = 6;
  private static final int __LATE_MATERIALIZATION_ISSET_ID = 7;
  private static final int __ENABLE_PARALLEL_MERGE_ISSET_ID = 8;
  private static final int __ANALYTIC_PARTITION_SKEWED_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OFFSET,_Fields.ORDERING_EXPRS,_Fields.IS_ASC_ORDER,_Fields.IS_DEFAULT_LIMIT,_Fields.NULLS_FIRST,_Fields.SORT_TUPLE_SLOT_EXPRS,_Fields.HAS_OUTER_JOIN_CHILD,_Fields.SQL_SORT_KEYS,_Fields.ANALYTIC_PARTITION_EXPRS,_Fields.PARTITION_EXPRS,_Fields.PARTITION_LIMIT,_Fields.TOPN_TYPE,_Fields.BUILD_RUNTIME_FILTERS,_Fields.MAX_BUFFERED_ROWS,_Fields.MAX_BUFFERED_BYTES,_Fields.LATE_MATERIALIZATION,_Fields.ENABLE_PARALLEL_MERGE,_Fields.ANALYTIC_PARTITION_SKEWED};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SORT_INFO, new org.apache.thrift.meta_data.FieldMetaData("sort_info", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSortInfo.class)));
    tmpMap.put(_Fields.USE_TOP_N, new org.apache.thrift.meta_data.FieldMetaData("use_top_n", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDERING_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("ordering_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TExpr.class))));
    tmpMap.put(_Fields.IS_ASC_ORDER, new org.apache.thrift.meta_data.FieldMetaData("is_asc_order", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.IS_DEFAULT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("is_default_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NULLS_FIRST, new org.apache.thrift.meta_data.FieldMetaData("nulls_first", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.SORT_TUPLE_SLOT_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("sort_tuple_slot_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TExpr.class))));
    tmpMap.put(_Fields.HAS_OUTER_JOIN_CHILD, new org.apache.thrift.meta_data.FieldMetaData("has_outer_join_child", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SQL_SORT_KEYS, new org.apache.thrift.meta_data.FieldMetaData("sql_sort_keys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANALYTIC_PARTITION_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("analytic_partition_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TExpr.class))));
    tmpMap.put(_Fields.PARTITION_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("partition_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TExpr.class))));
    tmpMap.put(_Fields.PARTITION_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("partition_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOPN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("topn_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTopNType.class)));
    tmpMap.put(_Fields.BUILD_RUNTIME_FILTERS, new org.apache.thrift.meta_data.FieldMetaData("build_runtime_filters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TRuntimeFilterDescription.class))));
    tmpMap.put(_Fields.MAX_BUFFERED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("max_buffered_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_BUFFERED_BYTES, new org.apache.thrift.meta_data.FieldMetaData("max_buffered_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LATE_MATERIALIZATION, new org.apache.thrift.meta_data.FieldMetaData("late_materialization", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_PARALLEL_MERGE, new org.apache.thrift.meta_data.FieldMetaData("enable_parallel_merge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ANALYTIC_PARTITION_SKEWED, new org.apache.thrift.meta_data.FieldMetaData("analytic_partition_skewed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSortNode.class, metaDataMap);
  }

  public TSortNode() {
  }

  public TSortNode(
    TSortInfo sort_info,
    boolean use_top_n)
  {
    this();
    this.sort_info = sort_info;
    this.use_top_n = use_top_n;
    setUse_top_nIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSortNode(TSortNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSort_info()) {
      this.sort_info = new TSortInfo(other.sort_info);
    }
    this.use_top_n = other.use_top_n;
    this.offset = other.offset;
    if (other.isSetOrdering_exprs()) {
      java.util.List<io.datafibre.fibre.thrift.TExpr> __this__ordering_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(other.ordering_exprs.size());
      for (io.datafibre.fibre.thrift.TExpr other_element : other.ordering_exprs) {
        __this__ordering_exprs.add(new io.datafibre.fibre.thrift.TExpr(other_element));
      }
      this.ordering_exprs = __this__ordering_exprs;
    }
    if (other.isSetIs_asc_order()) {
      java.util.List<java.lang.Boolean> __this__is_asc_order = new java.util.ArrayList<java.lang.Boolean>(other.is_asc_order);
      this.is_asc_order = __this__is_asc_order;
    }
    this.is_default_limit = other.is_default_limit;
    if (other.isSetNulls_first()) {
      java.util.List<java.lang.Boolean> __this__nulls_first = new java.util.ArrayList<java.lang.Boolean>(other.nulls_first);
      this.nulls_first = __this__nulls_first;
    }
    if (other.isSetSort_tuple_slot_exprs()) {
      java.util.List<io.datafibre.fibre.thrift.TExpr> __this__sort_tuple_slot_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(other.sort_tuple_slot_exprs.size());
      for (io.datafibre.fibre.thrift.TExpr other_element : other.sort_tuple_slot_exprs) {
        __this__sort_tuple_slot_exprs.add(new io.datafibre.fibre.thrift.TExpr(other_element));
      }
      this.sort_tuple_slot_exprs = __this__sort_tuple_slot_exprs;
    }
    this.has_outer_join_child = other.has_outer_join_child;
    if (other.isSetSql_sort_keys()) {
      this.sql_sort_keys = other.sql_sort_keys;
    }
    if (other.isSetAnalytic_partition_exprs()) {
      java.util.List<io.datafibre.fibre.thrift.TExpr> __this__analytic_partition_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(other.analytic_partition_exprs.size());
      for (io.datafibre.fibre.thrift.TExpr other_element : other.analytic_partition_exprs) {
        __this__analytic_partition_exprs.add(new io.datafibre.fibre.thrift.TExpr(other_element));
      }
      this.analytic_partition_exprs = __this__analytic_partition_exprs;
    }
    if (other.isSetPartition_exprs()) {
      java.util.List<io.datafibre.fibre.thrift.TExpr> __this__partition_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(other.partition_exprs.size());
      for (io.datafibre.fibre.thrift.TExpr other_element : other.partition_exprs) {
        __this__partition_exprs.add(new io.datafibre.fibre.thrift.TExpr(other_element));
      }
      this.partition_exprs = __this__partition_exprs;
    }
    this.partition_limit = other.partition_limit;
    if (other.isSetTopn_type()) {
      this.topn_type = other.topn_type;
    }
    if (other.isSetBuild_runtime_filters()) {
      java.util.List<io.datafibre.fibre.thrift.TRuntimeFilterDescription> __this__build_runtime_filters = new java.util.ArrayList<io.datafibre.fibre.thrift.TRuntimeFilterDescription>(other.build_runtime_filters.size());
      for (io.datafibre.fibre.thrift.TRuntimeFilterDescription other_element : other.build_runtime_filters) {
        __this__build_runtime_filters.add(new io.datafibre.fibre.thrift.TRuntimeFilterDescription(other_element));
      }
      this.build_runtime_filters = __this__build_runtime_filters;
    }
    this.max_buffered_rows = other.max_buffered_rows;
    this.max_buffered_bytes = other.max_buffered_bytes;
    this.late_materialization = other.late_materialization;
    this.enable_parallel_merge = other.enable_parallel_merge;
    this.analytic_partition_skewed = other.analytic_partition_skewed;
  }

  @Override
  public TSortNode deepCopy() {
    return new TSortNode(this);
  }

  @Override
  public void clear() {
    this.sort_info = null;
    setUse_top_nIsSet(false);
    this.use_top_n = false;
    setOffsetIsSet(false);
    this.offset = 0;
    this.ordering_exprs = null;
    this.is_asc_order = null;
    setIs_default_limitIsSet(false);
    this.is_default_limit = false;
    this.nulls_first = null;
    this.sort_tuple_slot_exprs = null;
    setHas_outer_join_childIsSet(false);
    this.has_outer_join_child = false;
    this.sql_sort_keys = null;
    this.analytic_partition_exprs = null;
    this.partition_exprs = null;
    setPartition_limitIsSet(false);
    this.partition_limit = 0;
    this.topn_type = null;
    this.build_runtime_filters = null;
    setMax_buffered_rowsIsSet(false);
    this.max_buffered_rows = 0;
    setMax_buffered_bytesIsSet(false);
    this.max_buffered_bytes = 0;
    setLate_materializationIsSet(false);
    this.late_materialization = false;
    setEnable_parallel_mergeIsSet(false);
    this.enable_parallel_merge = false;
    setAnalytic_partition_skewedIsSet(false);
    this.analytic_partition_skewed = false;
  }

  @org.apache.thrift.annotation.Nullable
  public TSortInfo getSort_info() {
    return this.sort_info;
  }

  public TSortNode setSort_info(@org.apache.thrift.annotation.Nullable TSortInfo sort_info) {
    this.sort_info = sort_info;
    return this;
  }

  public void unsetSort_info() {
    this.sort_info = null;
  }

  /** Returns true if field sort_info is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_info() {
    return this.sort_info != null;
  }

  public void setSort_infoIsSet(boolean value) {
    if (!value) {
      this.sort_info = null;
    }
  }

  public boolean isUse_top_n() {
    return this.use_top_n;
  }

  public TSortNode setUse_top_n(boolean use_top_n) {
    this.use_top_n = use_top_n;
    setUse_top_nIsSet(true);
    return this;
  }

  public void unsetUse_top_n() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_TOP_N_ISSET_ID);
  }

  /** Returns true if field use_top_n is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_top_n() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_TOP_N_ISSET_ID);
  }

  public void setUse_top_nIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_TOP_N_ISSET_ID, value);
  }

  public long getOffset() {
    return this.offset;
  }

  public TSortNode setOffset(long offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public int getOrdering_exprsSize() {
    return (this.ordering_exprs == null) ? 0 : this.ordering_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TExpr> getOrdering_exprsIterator() {
    return (this.ordering_exprs == null) ? null : this.ordering_exprs.iterator();
  }

  public void addToOrdering_exprs(io.datafibre.fibre.thrift.TExpr elem) {
    if (this.ordering_exprs == null) {
      this.ordering_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>();
    }
    this.ordering_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TExpr> getOrdering_exprs() {
    return this.ordering_exprs;
  }

  public TSortNode setOrdering_exprs(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> ordering_exprs) {
    this.ordering_exprs = ordering_exprs;
    return this;
  }

  public void unsetOrdering_exprs() {
    this.ordering_exprs = null;
  }

  /** Returns true if field ordering_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetOrdering_exprs() {
    return this.ordering_exprs != null;
  }

  public void setOrdering_exprsIsSet(boolean value) {
    if (!value) {
      this.ordering_exprs = null;
    }
  }

  public int getIs_asc_orderSize() {
    return (this.is_asc_order == null) ? 0 : this.is_asc_order.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getIs_asc_orderIterator() {
    return (this.is_asc_order == null) ? null : this.is_asc_order.iterator();
  }

  public void addToIs_asc_order(boolean elem) {
    if (this.is_asc_order == null) {
      this.is_asc_order = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.is_asc_order.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getIs_asc_order() {
    return this.is_asc_order;
  }

  public TSortNode setIs_asc_order(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> is_asc_order) {
    this.is_asc_order = is_asc_order;
    return this;
  }

  public void unsetIs_asc_order() {
    this.is_asc_order = null;
  }

  /** Returns true if field is_asc_order is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_asc_order() {
    return this.is_asc_order != null;
  }

  public void setIs_asc_orderIsSet(boolean value) {
    if (!value) {
      this.is_asc_order = null;
    }
  }

  public boolean isIs_default_limit() {
    return this.is_default_limit;
  }

  public TSortNode setIs_default_limit(boolean is_default_limit) {
    this.is_default_limit = is_default_limit;
    setIs_default_limitIsSet(true);
    return this;
  }

  public void unsetIs_default_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_DEFAULT_LIMIT_ISSET_ID);
  }

  /** Returns true if field is_default_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_default_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_DEFAULT_LIMIT_ISSET_ID);
  }

  public void setIs_default_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_DEFAULT_LIMIT_ISSET_ID, value);
  }

  public int getNulls_firstSize() {
    return (this.nulls_first == null) ? 0 : this.nulls_first.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getNulls_firstIterator() {
    return (this.nulls_first == null) ? null : this.nulls_first.iterator();
  }

  public void addToNulls_first(boolean elem) {
    if (this.nulls_first == null) {
      this.nulls_first = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.nulls_first.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getNulls_first() {
    return this.nulls_first;
  }

  public TSortNode setNulls_first(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> nulls_first) {
    this.nulls_first = nulls_first;
    return this;
  }

  public void unsetNulls_first() {
    this.nulls_first = null;
  }

  /** Returns true if field nulls_first is set (has been assigned a value) and false otherwise */
  public boolean isSetNulls_first() {
    return this.nulls_first != null;
  }

  public void setNulls_firstIsSet(boolean value) {
    if (!value) {
      this.nulls_first = null;
    }
  }

  public int getSort_tuple_slot_exprsSize() {
    return (this.sort_tuple_slot_exprs == null) ? 0 : this.sort_tuple_slot_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TExpr> getSort_tuple_slot_exprsIterator() {
    return (this.sort_tuple_slot_exprs == null) ? null : this.sort_tuple_slot_exprs.iterator();
  }

  public void addToSort_tuple_slot_exprs(io.datafibre.fibre.thrift.TExpr elem) {
    if (this.sort_tuple_slot_exprs == null) {
      this.sort_tuple_slot_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>();
    }
    this.sort_tuple_slot_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TExpr> getSort_tuple_slot_exprs() {
    return this.sort_tuple_slot_exprs;
  }

  public TSortNode setSort_tuple_slot_exprs(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> sort_tuple_slot_exprs) {
    this.sort_tuple_slot_exprs = sort_tuple_slot_exprs;
    return this;
  }

  public void unsetSort_tuple_slot_exprs() {
    this.sort_tuple_slot_exprs = null;
  }

  /** Returns true if field sort_tuple_slot_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_tuple_slot_exprs() {
    return this.sort_tuple_slot_exprs != null;
  }

  public void setSort_tuple_slot_exprsIsSet(boolean value) {
    if (!value) {
      this.sort_tuple_slot_exprs = null;
    }
  }

  public boolean isHas_outer_join_child() {
    return this.has_outer_join_child;
  }

  public TSortNode setHas_outer_join_child(boolean has_outer_join_child) {
    this.has_outer_join_child = has_outer_join_child;
    setHas_outer_join_childIsSet(true);
    return this;
  }

  public void unsetHas_outer_join_child() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HAS_OUTER_JOIN_CHILD_ISSET_ID);
  }

  /** Returns true if field has_outer_join_child is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_outer_join_child() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HAS_OUTER_JOIN_CHILD_ISSET_ID);
  }

  public void setHas_outer_join_childIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HAS_OUTER_JOIN_CHILD_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSql_sort_keys() {
    return this.sql_sort_keys;
  }

  public TSortNode setSql_sort_keys(@org.apache.thrift.annotation.Nullable java.lang.String sql_sort_keys) {
    this.sql_sort_keys = sql_sort_keys;
    return this;
  }

  public void unsetSql_sort_keys() {
    this.sql_sort_keys = null;
  }

  /** Returns true if field sql_sort_keys is set (has been assigned a value) and false otherwise */
  public boolean isSetSql_sort_keys() {
    return this.sql_sort_keys != null;
  }

  public void setSql_sort_keysIsSet(boolean value) {
    if (!value) {
      this.sql_sort_keys = null;
    }
  }

  public int getAnalytic_partition_exprsSize() {
    return (this.analytic_partition_exprs == null) ? 0 : this.analytic_partition_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TExpr> getAnalytic_partition_exprsIterator() {
    return (this.analytic_partition_exprs == null) ? null : this.analytic_partition_exprs.iterator();
  }

  public void addToAnalytic_partition_exprs(io.datafibre.fibre.thrift.TExpr elem) {
    if (this.analytic_partition_exprs == null) {
      this.analytic_partition_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>();
    }
    this.analytic_partition_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TExpr> getAnalytic_partition_exprs() {
    return this.analytic_partition_exprs;
  }

  public TSortNode setAnalytic_partition_exprs(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> analytic_partition_exprs) {
    this.analytic_partition_exprs = analytic_partition_exprs;
    return this;
  }

  public void unsetAnalytic_partition_exprs() {
    this.analytic_partition_exprs = null;
  }

  /** Returns true if field analytic_partition_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalytic_partition_exprs() {
    return this.analytic_partition_exprs != null;
  }

  public void setAnalytic_partition_exprsIsSet(boolean value) {
    if (!value) {
      this.analytic_partition_exprs = null;
    }
  }

  public int getPartition_exprsSize() {
    return (this.partition_exprs == null) ? 0 : this.partition_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TExpr> getPartition_exprsIterator() {
    return (this.partition_exprs == null) ? null : this.partition_exprs.iterator();
  }

  public void addToPartition_exprs(io.datafibre.fibre.thrift.TExpr elem) {
    if (this.partition_exprs == null) {
      this.partition_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>();
    }
    this.partition_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TExpr> getPartition_exprs() {
    return this.partition_exprs;
  }

  public TSortNode setPartition_exprs(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TExpr> partition_exprs) {
    this.partition_exprs = partition_exprs;
    return this;
  }

  public void unsetPartition_exprs() {
    this.partition_exprs = null;
  }

  /** Returns true if field partition_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_exprs() {
    return this.partition_exprs != null;
  }

  public void setPartition_exprsIsSet(boolean value) {
    if (!value) {
      this.partition_exprs = null;
    }
  }

  public long getPartition_limit() {
    return this.partition_limit;
  }

  public TSortNode setPartition_limit(long partition_limit) {
    this.partition_limit = partition_limit;
    setPartition_limitIsSet(true);
    return this;
  }

  public void unsetPartition_limit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_LIMIT_ISSET_ID);
  }

  /** Returns true if field partition_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_limit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_LIMIT_ISSET_ID);
  }

  public void setPartition_limitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_LIMIT_ISSET_ID, value);
  }

  /**
   * 
   * @see TTopNType
   */
  @org.apache.thrift.annotation.Nullable
  public TTopNType getTopn_type() {
    return this.topn_type;
  }

  /**
   * 
   * @see TTopNType
   */
  public TSortNode setTopn_type(@org.apache.thrift.annotation.Nullable TTopNType topn_type) {
    this.topn_type = topn_type;
    return this;
  }

  public void unsetTopn_type() {
    this.topn_type = null;
  }

  /** Returns true if field topn_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTopn_type() {
    return this.topn_type != null;
  }

  public void setTopn_typeIsSet(boolean value) {
    if (!value) {
      this.topn_type = null;
    }
  }

  public int getBuild_runtime_filtersSize() {
    return (this.build_runtime_filters == null) ? 0 : this.build_runtime_filters.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TRuntimeFilterDescription> getBuild_runtime_filtersIterator() {
    return (this.build_runtime_filters == null) ? null : this.build_runtime_filters.iterator();
  }

  public void addToBuild_runtime_filters(io.datafibre.fibre.thrift.TRuntimeFilterDescription elem) {
    if (this.build_runtime_filters == null) {
      this.build_runtime_filters = new java.util.ArrayList<io.datafibre.fibre.thrift.TRuntimeFilterDescription>();
    }
    this.build_runtime_filters.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TRuntimeFilterDescription> getBuild_runtime_filters() {
    return this.build_runtime_filters;
  }

  public TSortNode setBuild_runtime_filters(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TRuntimeFilterDescription> build_runtime_filters) {
    this.build_runtime_filters = build_runtime_filters;
    return this;
  }

  public void unsetBuild_runtime_filters() {
    this.build_runtime_filters = null;
  }

  /** Returns true if field build_runtime_filters is set (has been assigned a value) and false otherwise */
  public boolean isSetBuild_runtime_filters() {
    return this.build_runtime_filters != null;
  }

  public void setBuild_runtime_filtersIsSet(boolean value) {
    if (!value) {
      this.build_runtime_filters = null;
    }
  }

  public long getMax_buffered_rows() {
    return this.max_buffered_rows;
  }

  public TSortNode setMax_buffered_rows(long max_buffered_rows) {
    this.max_buffered_rows = max_buffered_rows;
    setMax_buffered_rowsIsSet(true);
    return this;
  }

  public void unsetMax_buffered_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_BUFFERED_ROWS_ISSET_ID);
  }

  /** Returns true if field max_buffered_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_buffered_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_BUFFERED_ROWS_ISSET_ID);
  }

  public void setMax_buffered_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_BUFFERED_ROWS_ISSET_ID, value);
  }

  public long getMax_buffered_bytes() {
    return this.max_buffered_bytes;
  }

  public TSortNode setMax_buffered_bytes(long max_buffered_bytes) {
    this.max_buffered_bytes = max_buffered_bytes;
    setMax_buffered_bytesIsSet(true);
    return this;
  }

  public void unsetMax_buffered_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_BUFFERED_BYTES_ISSET_ID);
  }

  /** Returns true if field max_buffered_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_buffered_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_BUFFERED_BYTES_ISSET_ID);
  }

  public void setMax_buffered_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_BUFFERED_BYTES_ISSET_ID, value);
  }

  public boolean isLate_materialization() {
    return this.late_materialization;
  }

  public TSortNode setLate_materialization(boolean late_materialization) {
    this.late_materialization = late_materialization;
    setLate_materializationIsSet(true);
    return this;
  }

  public void unsetLate_materialization() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LATE_MATERIALIZATION_ISSET_ID);
  }

  /** Returns true if field late_materialization is set (has been assigned a value) and false otherwise */
  public boolean isSetLate_materialization() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LATE_MATERIALIZATION_ISSET_ID);
  }

  public void setLate_materializationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LATE_MATERIALIZATION_ISSET_ID, value);
  }

  public boolean isEnable_parallel_merge() {
    return this.enable_parallel_merge;
  }

  public TSortNode setEnable_parallel_merge(boolean enable_parallel_merge) {
    this.enable_parallel_merge = enable_parallel_merge;
    setEnable_parallel_mergeIsSet(true);
    return this;
  }

  public void unsetEnable_parallel_merge() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_PARALLEL_MERGE_ISSET_ID);
  }

  /** Returns true if field enable_parallel_merge is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_parallel_merge() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_PARALLEL_MERGE_ISSET_ID);
  }

  public void setEnable_parallel_mergeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_PARALLEL_MERGE_ISSET_ID, value);
  }

  public boolean isAnalytic_partition_skewed() {
    return this.analytic_partition_skewed;
  }

  public TSortNode setAnalytic_partition_skewed(boolean analytic_partition_skewed) {
    this.analytic_partition_skewed = analytic_partition_skewed;
    setAnalytic_partition_skewedIsSet(true);
    return this;
  }

  public void unsetAnalytic_partition_skewed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANALYTIC_PARTITION_SKEWED_ISSET_ID);
  }

  /** Returns true if field analytic_partition_skewed is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalytic_partition_skewed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANALYTIC_PARTITION_SKEWED_ISSET_ID);
  }

  public void setAnalytic_partition_skewedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANALYTIC_PARTITION_SKEWED_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SORT_INFO:
      if (value == null) {
        unsetSort_info();
      } else {
        setSort_info((TSortInfo)value);
      }
      break;

    case USE_TOP_N:
      if (value == null) {
        unsetUse_top_n();
      } else {
        setUse_top_n((java.lang.Boolean)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((java.lang.Long)value);
      }
      break;

    case ORDERING_EXPRS:
      if (value == null) {
        unsetOrdering_exprs();
      } else {
        setOrdering_exprs((java.util.List<io.datafibre.fibre.thrift.TExpr>)value);
      }
      break;

    case IS_ASC_ORDER:
      if (value == null) {
        unsetIs_asc_order();
      } else {
        setIs_asc_order((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case IS_DEFAULT_LIMIT:
      if (value == null) {
        unsetIs_default_limit();
      } else {
        setIs_default_limit((java.lang.Boolean)value);
      }
      break;

    case NULLS_FIRST:
      if (value == null) {
        unsetNulls_first();
      } else {
        setNulls_first((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case SORT_TUPLE_SLOT_EXPRS:
      if (value == null) {
        unsetSort_tuple_slot_exprs();
      } else {
        setSort_tuple_slot_exprs((java.util.List<io.datafibre.fibre.thrift.TExpr>)value);
      }
      break;

    case HAS_OUTER_JOIN_CHILD:
      if (value == null) {
        unsetHas_outer_join_child();
      } else {
        setHas_outer_join_child((java.lang.Boolean)value);
      }
      break;

    case SQL_SORT_KEYS:
      if (value == null) {
        unsetSql_sort_keys();
      } else {
        setSql_sort_keys((java.lang.String)value);
      }
      break;

    case ANALYTIC_PARTITION_EXPRS:
      if (value == null) {
        unsetAnalytic_partition_exprs();
      } else {
        setAnalytic_partition_exprs((java.util.List<io.datafibre.fibre.thrift.TExpr>)value);
      }
      break;

    case PARTITION_EXPRS:
      if (value == null) {
        unsetPartition_exprs();
      } else {
        setPartition_exprs((java.util.List<io.datafibre.fibre.thrift.TExpr>)value);
      }
      break;

    case PARTITION_LIMIT:
      if (value == null) {
        unsetPartition_limit();
      } else {
        setPartition_limit((java.lang.Long)value);
      }
      break;

    case TOPN_TYPE:
      if (value == null) {
        unsetTopn_type();
      } else {
        setTopn_type((TTopNType)value);
      }
      break;

    case BUILD_RUNTIME_FILTERS:
      if (value == null) {
        unsetBuild_runtime_filters();
      } else {
        setBuild_runtime_filters((java.util.List<io.datafibre.fibre.thrift.TRuntimeFilterDescription>)value);
      }
      break;

    case MAX_BUFFERED_ROWS:
      if (value == null) {
        unsetMax_buffered_rows();
      } else {
        setMax_buffered_rows((java.lang.Long)value);
      }
      break;

    case MAX_BUFFERED_BYTES:
      if (value == null) {
        unsetMax_buffered_bytes();
      } else {
        setMax_buffered_bytes((java.lang.Long)value);
      }
      break;

    case LATE_MATERIALIZATION:
      if (value == null) {
        unsetLate_materialization();
      } else {
        setLate_materialization((java.lang.Boolean)value);
      }
      break;

    case ENABLE_PARALLEL_MERGE:
      if (value == null) {
        unsetEnable_parallel_merge();
      } else {
        setEnable_parallel_merge((java.lang.Boolean)value);
      }
      break;

    case ANALYTIC_PARTITION_SKEWED:
      if (value == null) {
        unsetAnalytic_partition_skewed();
      } else {
        setAnalytic_partition_skewed((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SORT_INFO:
      return getSort_info();

    case USE_TOP_N:
      return isUse_top_n();

    case OFFSET:
      return getOffset();

    case ORDERING_EXPRS:
      return getOrdering_exprs();

    case IS_ASC_ORDER:
      return getIs_asc_order();

    case IS_DEFAULT_LIMIT:
      return isIs_default_limit();

    case NULLS_FIRST:
      return getNulls_first();

    case SORT_TUPLE_SLOT_EXPRS:
      return getSort_tuple_slot_exprs();

    case HAS_OUTER_JOIN_CHILD:
      return isHas_outer_join_child();

    case SQL_SORT_KEYS:
      return getSql_sort_keys();

    case ANALYTIC_PARTITION_EXPRS:
      return getAnalytic_partition_exprs();

    case PARTITION_EXPRS:
      return getPartition_exprs();

    case PARTITION_LIMIT:
      return getPartition_limit();

    case TOPN_TYPE:
      return getTopn_type();

    case BUILD_RUNTIME_FILTERS:
      return getBuild_runtime_filters();

    case MAX_BUFFERED_ROWS:
      return getMax_buffered_rows();

    case MAX_BUFFERED_BYTES:
      return getMax_buffered_bytes();

    case LATE_MATERIALIZATION:
      return isLate_materialization();

    case ENABLE_PARALLEL_MERGE:
      return isEnable_parallel_merge();

    case ANALYTIC_PARTITION_SKEWED:
      return isAnalytic_partition_skewed();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SORT_INFO:
      return isSetSort_info();
    case USE_TOP_N:
      return isSetUse_top_n();
    case OFFSET:
      return isSetOffset();
    case ORDERING_EXPRS:
      return isSetOrdering_exprs();
    case IS_ASC_ORDER:
      return isSetIs_asc_order();
    case IS_DEFAULT_LIMIT:
      return isSetIs_default_limit();
    case NULLS_FIRST:
      return isSetNulls_first();
    case SORT_TUPLE_SLOT_EXPRS:
      return isSetSort_tuple_slot_exprs();
    case HAS_OUTER_JOIN_CHILD:
      return isSetHas_outer_join_child();
    case SQL_SORT_KEYS:
      return isSetSql_sort_keys();
    case ANALYTIC_PARTITION_EXPRS:
      return isSetAnalytic_partition_exprs();
    case PARTITION_EXPRS:
      return isSetPartition_exprs();
    case PARTITION_LIMIT:
      return isSetPartition_limit();
    case TOPN_TYPE:
      return isSetTopn_type();
    case BUILD_RUNTIME_FILTERS:
      return isSetBuild_runtime_filters();
    case MAX_BUFFERED_ROWS:
      return isSetMax_buffered_rows();
    case MAX_BUFFERED_BYTES:
      return isSetMax_buffered_bytes();
    case LATE_MATERIALIZATION:
      return isSetLate_materialization();
    case ENABLE_PARALLEL_MERGE:
      return isSetEnable_parallel_merge();
    case ANALYTIC_PARTITION_SKEWED:
      return isSetAnalytic_partition_skewed();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSortNode)
      return this.equals((TSortNode)that);
    return false;
  }

  public boolean equals(TSortNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sort_info = true && this.isSetSort_info();
    boolean that_present_sort_info = true && that.isSetSort_info();
    if (this_present_sort_info || that_present_sort_info) {
      if (!(this_present_sort_info && that_present_sort_info))
        return false;
      if (!this.sort_info.equals(that.sort_info))
        return false;
    }

    boolean this_present_use_top_n = true;
    boolean that_present_use_top_n = true;
    if (this_present_use_top_n || that_present_use_top_n) {
      if (!(this_present_use_top_n && that_present_use_top_n))
        return false;
      if (this.use_top_n != that.use_top_n)
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_ordering_exprs = true && this.isSetOrdering_exprs();
    boolean that_present_ordering_exprs = true && that.isSetOrdering_exprs();
    if (this_present_ordering_exprs || that_present_ordering_exprs) {
      if (!(this_present_ordering_exprs && that_present_ordering_exprs))
        return false;
      if (!this.ordering_exprs.equals(that.ordering_exprs))
        return false;
    }

    boolean this_present_is_asc_order = true && this.isSetIs_asc_order();
    boolean that_present_is_asc_order = true && that.isSetIs_asc_order();
    if (this_present_is_asc_order || that_present_is_asc_order) {
      if (!(this_present_is_asc_order && that_present_is_asc_order))
        return false;
      if (!this.is_asc_order.equals(that.is_asc_order))
        return false;
    }

    boolean this_present_is_default_limit = true && this.isSetIs_default_limit();
    boolean that_present_is_default_limit = true && that.isSetIs_default_limit();
    if (this_present_is_default_limit || that_present_is_default_limit) {
      if (!(this_present_is_default_limit && that_present_is_default_limit))
        return false;
      if (this.is_default_limit != that.is_default_limit)
        return false;
    }

    boolean this_present_nulls_first = true && this.isSetNulls_first();
    boolean that_present_nulls_first = true && that.isSetNulls_first();
    if (this_present_nulls_first || that_present_nulls_first) {
      if (!(this_present_nulls_first && that_present_nulls_first))
        return false;
      if (!this.nulls_first.equals(that.nulls_first))
        return false;
    }

    boolean this_present_sort_tuple_slot_exprs = true && this.isSetSort_tuple_slot_exprs();
    boolean that_present_sort_tuple_slot_exprs = true && that.isSetSort_tuple_slot_exprs();
    if (this_present_sort_tuple_slot_exprs || that_present_sort_tuple_slot_exprs) {
      if (!(this_present_sort_tuple_slot_exprs && that_present_sort_tuple_slot_exprs))
        return false;
      if (!this.sort_tuple_slot_exprs.equals(that.sort_tuple_slot_exprs))
        return false;
    }

    boolean this_present_has_outer_join_child = true && this.isSetHas_outer_join_child();
    boolean that_present_has_outer_join_child = true && that.isSetHas_outer_join_child();
    if (this_present_has_outer_join_child || that_present_has_outer_join_child) {
      if (!(this_present_has_outer_join_child && that_present_has_outer_join_child))
        return false;
      if (this.has_outer_join_child != that.has_outer_join_child)
        return false;
    }

    boolean this_present_sql_sort_keys = true && this.isSetSql_sort_keys();
    boolean that_present_sql_sort_keys = true && that.isSetSql_sort_keys();
    if (this_present_sql_sort_keys || that_present_sql_sort_keys) {
      if (!(this_present_sql_sort_keys && that_present_sql_sort_keys))
        return false;
      if (!this.sql_sort_keys.equals(that.sql_sort_keys))
        return false;
    }

    boolean this_present_analytic_partition_exprs = true && this.isSetAnalytic_partition_exprs();
    boolean that_present_analytic_partition_exprs = true && that.isSetAnalytic_partition_exprs();
    if (this_present_analytic_partition_exprs || that_present_analytic_partition_exprs) {
      if (!(this_present_analytic_partition_exprs && that_present_analytic_partition_exprs))
        return false;
      if (!this.analytic_partition_exprs.equals(that.analytic_partition_exprs))
        return false;
    }

    boolean this_present_partition_exprs = true && this.isSetPartition_exprs();
    boolean that_present_partition_exprs = true && that.isSetPartition_exprs();
    if (this_present_partition_exprs || that_present_partition_exprs) {
      if (!(this_present_partition_exprs && that_present_partition_exprs))
        return false;
      if (!this.partition_exprs.equals(that.partition_exprs))
        return false;
    }

    boolean this_present_partition_limit = true && this.isSetPartition_limit();
    boolean that_present_partition_limit = true && that.isSetPartition_limit();
    if (this_present_partition_limit || that_present_partition_limit) {
      if (!(this_present_partition_limit && that_present_partition_limit))
        return false;
      if (this.partition_limit != that.partition_limit)
        return false;
    }

    boolean this_present_topn_type = true && this.isSetTopn_type();
    boolean that_present_topn_type = true && that.isSetTopn_type();
    if (this_present_topn_type || that_present_topn_type) {
      if (!(this_present_topn_type && that_present_topn_type))
        return false;
      if (!this.topn_type.equals(that.topn_type))
        return false;
    }

    boolean this_present_build_runtime_filters = true && this.isSetBuild_runtime_filters();
    boolean that_present_build_runtime_filters = true && that.isSetBuild_runtime_filters();
    if (this_present_build_runtime_filters || that_present_build_runtime_filters) {
      if (!(this_present_build_runtime_filters && that_present_build_runtime_filters))
        return false;
      if (!this.build_runtime_filters.equals(that.build_runtime_filters))
        return false;
    }

    boolean this_present_max_buffered_rows = true && this.isSetMax_buffered_rows();
    boolean that_present_max_buffered_rows = true && that.isSetMax_buffered_rows();
    if (this_present_max_buffered_rows || that_present_max_buffered_rows) {
      if (!(this_present_max_buffered_rows && that_present_max_buffered_rows))
        return false;
      if (this.max_buffered_rows != that.max_buffered_rows)
        return false;
    }

    boolean this_present_max_buffered_bytes = true && this.isSetMax_buffered_bytes();
    boolean that_present_max_buffered_bytes = true && that.isSetMax_buffered_bytes();
    if (this_present_max_buffered_bytes || that_present_max_buffered_bytes) {
      if (!(this_present_max_buffered_bytes && that_present_max_buffered_bytes))
        return false;
      if (this.max_buffered_bytes != that.max_buffered_bytes)
        return false;
    }

    boolean this_present_late_materialization = true && this.isSetLate_materialization();
    boolean that_present_late_materialization = true && that.isSetLate_materialization();
    if (this_present_late_materialization || that_present_late_materialization) {
      if (!(this_present_late_materialization && that_present_late_materialization))
        return false;
      if (this.late_materialization != that.late_materialization)
        return false;
    }

    boolean this_present_enable_parallel_merge = true && this.isSetEnable_parallel_merge();
    boolean that_present_enable_parallel_merge = true && that.isSetEnable_parallel_merge();
    if (this_present_enable_parallel_merge || that_present_enable_parallel_merge) {
      if (!(this_present_enable_parallel_merge && that_present_enable_parallel_merge))
        return false;
      if (this.enable_parallel_merge != that.enable_parallel_merge)
        return false;
    }

    boolean this_present_analytic_partition_skewed = true && this.isSetAnalytic_partition_skewed();
    boolean that_present_analytic_partition_skewed = true && that.isSetAnalytic_partition_skewed();
    if (this_present_analytic_partition_skewed || that_present_analytic_partition_skewed) {
      if (!(this_present_analytic_partition_skewed && that_present_analytic_partition_skewed))
        return false;
      if (this.analytic_partition_skewed != that.analytic_partition_skewed)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSort_info()) ? 131071 : 524287);
    if (isSetSort_info())
      hashCode = hashCode * 8191 + sort_info.hashCode();

    hashCode = hashCode * 8191 + ((use_top_n) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetOffset()) ? 131071 : 524287);
    if (isSetOffset())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(offset);

    hashCode = hashCode * 8191 + ((isSetOrdering_exprs()) ? 131071 : 524287);
    if (isSetOrdering_exprs())
      hashCode = hashCode * 8191 + ordering_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_asc_order()) ? 131071 : 524287);
    if (isSetIs_asc_order())
      hashCode = hashCode * 8191 + is_asc_order.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_default_limit()) ? 131071 : 524287);
    if (isSetIs_default_limit())
      hashCode = hashCode * 8191 + ((is_default_limit) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetNulls_first()) ? 131071 : 524287);
    if (isSetNulls_first())
      hashCode = hashCode * 8191 + nulls_first.hashCode();

    hashCode = hashCode * 8191 + ((isSetSort_tuple_slot_exprs()) ? 131071 : 524287);
    if (isSetSort_tuple_slot_exprs())
      hashCode = hashCode * 8191 + sort_tuple_slot_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetHas_outer_join_child()) ? 131071 : 524287);
    if (isSetHas_outer_join_child())
      hashCode = hashCode * 8191 + ((has_outer_join_child) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSql_sort_keys()) ? 131071 : 524287);
    if (isSetSql_sort_keys())
      hashCode = hashCode * 8191 + sql_sort_keys.hashCode();

    hashCode = hashCode * 8191 + ((isSetAnalytic_partition_exprs()) ? 131071 : 524287);
    if (isSetAnalytic_partition_exprs())
      hashCode = hashCode * 8191 + analytic_partition_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_exprs()) ? 131071 : 524287);
    if (isSetPartition_exprs())
      hashCode = hashCode * 8191 + partition_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_limit()) ? 131071 : 524287);
    if (isSetPartition_limit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_limit);

    hashCode = hashCode * 8191 + ((isSetTopn_type()) ? 131071 : 524287);
    if (isSetTopn_type())
      hashCode = hashCode * 8191 + topn_type.getValue();

    hashCode = hashCode * 8191 + ((isSetBuild_runtime_filters()) ? 131071 : 524287);
    if (isSetBuild_runtime_filters())
      hashCode = hashCode * 8191 + build_runtime_filters.hashCode();

    hashCode = hashCode * 8191 + ((isSetMax_buffered_rows()) ? 131071 : 524287);
    if (isSetMax_buffered_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_buffered_rows);

    hashCode = hashCode * 8191 + ((isSetMax_buffered_bytes()) ? 131071 : 524287);
    if (isSetMax_buffered_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_buffered_bytes);

    hashCode = hashCode * 8191 + ((isSetLate_materialization()) ? 131071 : 524287);
    if (isSetLate_materialization())
      hashCode = hashCode * 8191 + ((late_materialization) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnable_parallel_merge()) ? 131071 : 524287);
    if (isSetEnable_parallel_merge())
      hashCode = hashCode * 8191 + ((enable_parallel_merge) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAnalytic_partition_skewed()) ? 131071 : 524287);
    if (isSetAnalytic_partition_skewed())
      hashCode = hashCode * 8191 + ((analytic_partition_skewed) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TSortNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSort_info(), other.isSetSort_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_info, other.sort_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_top_n(), other.isSetUse_top_n());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_top_n()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_top_n, other.use_top_n);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOffset(), other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOrdering_exprs(), other.isSetOrdering_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrdering_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordering_exprs, other.ordering_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_asc_order(), other.isSetIs_asc_order());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_asc_order()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_asc_order, other.is_asc_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_default_limit(), other.isSetIs_default_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_default_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_default_limit, other.is_default_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNulls_first(), other.isSetNulls_first());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNulls_first()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nulls_first, other.nulls_first);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSort_tuple_slot_exprs(), other.isSetSort_tuple_slot_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_tuple_slot_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_tuple_slot_exprs, other.sort_tuple_slot_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHas_outer_join_child(), other.isSetHas_outer_join_child());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_outer_join_child()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_outer_join_child, other.has_outer_join_child);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSql_sort_keys(), other.isSetSql_sort_keys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql_sort_keys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_sort_keys, other.sql_sort_keys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAnalytic_partition_exprs(), other.isSetAnalytic_partition_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalytic_partition_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analytic_partition_exprs, other.analytic_partition_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_exprs(), other.isSetPartition_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_exprs, other.partition_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_limit(), other.isSetPartition_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_limit, other.partition_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTopn_type(), other.isSetTopn_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopn_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topn_type, other.topn_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBuild_runtime_filters(), other.isSetBuild_runtime_filters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuild_runtime_filters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.build_runtime_filters, other.build_runtime_filters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_buffered_rows(), other.isSetMax_buffered_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_buffered_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_buffered_rows, other.max_buffered_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_buffered_bytes(), other.isSetMax_buffered_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_buffered_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_buffered_bytes, other.max_buffered_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLate_materialization(), other.isSetLate_materialization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLate_materialization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.late_materialization, other.late_materialization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_parallel_merge(), other.isSetEnable_parallel_merge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_parallel_merge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_parallel_merge, other.enable_parallel_merge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAnalytic_partition_skewed(), other.isSetAnalytic_partition_skewed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalytic_partition_skewed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analytic_partition_skewed, other.analytic_partition_skewed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSortNode(");
    boolean first = true;

    sb.append("sort_info:");
    if (this.sort_info == null) {
      sb.append("null");
    } else {
      sb.append(this.sort_info);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("use_top_n:");
    sb.append(this.use_top_n);
    first = false;
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetOrdering_exprs()) {
      if (!first) sb.append(", ");
      sb.append("ordering_exprs:");
      if (this.ordering_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.ordering_exprs);
      }
      first = false;
    }
    if (isSetIs_asc_order()) {
      if (!first) sb.append(", ");
      sb.append("is_asc_order:");
      if (this.is_asc_order == null) {
        sb.append("null");
      } else {
        sb.append(this.is_asc_order);
      }
      first = false;
    }
    if (isSetIs_default_limit()) {
      if (!first) sb.append(", ");
      sb.append("is_default_limit:");
      sb.append(this.is_default_limit);
      first = false;
    }
    if (isSetNulls_first()) {
      if (!first) sb.append(", ");
      sb.append("nulls_first:");
      if (this.nulls_first == null) {
        sb.append("null");
      } else {
        sb.append(this.nulls_first);
      }
      first = false;
    }
    if (isSetSort_tuple_slot_exprs()) {
      if (!first) sb.append(", ");
      sb.append("sort_tuple_slot_exprs:");
      if (this.sort_tuple_slot_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_tuple_slot_exprs);
      }
      first = false;
    }
    if (isSetHas_outer_join_child()) {
      if (!first) sb.append(", ");
      sb.append("has_outer_join_child:");
      sb.append(this.has_outer_join_child);
      first = false;
    }
    if (isSetSql_sort_keys()) {
      if (!first) sb.append(", ");
      sb.append("sql_sort_keys:");
      if (this.sql_sort_keys == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_sort_keys);
      }
      first = false;
    }
    if (isSetAnalytic_partition_exprs()) {
      if (!first) sb.append(", ");
      sb.append("analytic_partition_exprs:");
      if (this.analytic_partition_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.analytic_partition_exprs);
      }
      first = false;
    }
    if (isSetPartition_exprs()) {
      if (!first) sb.append(", ");
      sb.append("partition_exprs:");
      if (this.partition_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_exprs);
      }
      first = false;
    }
    if (isSetPartition_limit()) {
      if (!first) sb.append(", ");
      sb.append("partition_limit:");
      sb.append(this.partition_limit);
      first = false;
    }
    if (isSetTopn_type()) {
      if (!first) sb.append(", ");
      sb.append("topn_type:");
      if (this.topn_type == null) {
        sb.append("null");
      } else {
        sb.append(this.topn_type);
      }
      first = false;
    }
    if (isSetBuild_runtime_filters()) {
      if (!first) sb.append(", ");
      sb.append("build_runtime_filters:");
      if (this.build_runtime_filters == null) {
        sb.append("null");
      } else {
        sb.append(this.build_runtime_filters);
      }
      first = false;
    }
    if (isSetMax_buffered_rows()) {
      if (!first) sb.append(", ");
      sb.append("max_buffered_rows:");
      sb.append(this.max_buffered_rows);
      first = false;
    }
    if (isSetMax_buffered_bytes()) {
      if (!first) sb.append(", ");
      sb.append("max_buffered_bytes:");
      sb.append(this.max_buffered_bytes);
      first = false;
    }
    if (isSetLate_materialization()) {
      if (!first) sb.append(", ");
      sb.append("late_materialization:");
      sb.append(this.late_materialization);
      first = false;
    }
    if (isSetEnable_parallel_merge()) {
      if (!first) sb.append(", ");
      sb.append("enable_parallel_merge:");
      sb.append(this.enable_parallel_merge);
      first = false;
    }
    if (isSetAnalytic_partition_skewed()) {
      if (!first) sb.append(", ");
      sb.append("analytic_partition_skewed:");
      sb.append(this.analytic_partition_skewed);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sort_info == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sort_info' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'use_top_n' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (sort_info != null) {
      sort_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSortNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSortNodeStandardScheme getScheme() {
      return new TSortNodeStandardScheme();
    }
  }

  private static class TSortNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSortNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSortNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SORT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sort_info = new TSortInfo();
              struct.sort_info.read(iprot);
              struct.setSort_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USE_TOP_N
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_top_n = iprot.readBool();
              struct.setUse_top_nIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset = iprot.readI64();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDERING_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list562 = iprot.readListBegin();
                struct.ordering_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list562.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem563;
                for (int _i564 = 0; _i564 < _list562.size; ++_i564)
                {
                  _elem563 = new io.datafibre.fibre.thrift.TExpr();
                  _elem563.read(iprot);
                  struct.ordering_exprs.add(_elem563);
                }
                iprot.readListEnd();
              }
              struct.setOrdering_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_ASC_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list565 = iprot.readListBegin();
                struct.is_asc_order = new java.util.ArrayList<java.lang.Boolean>(_list565.size);
                boolean _elem566;
                for (int _i567 = 0; _i567 < _list565.size; ++_i567)
                {
                  _elem566 = iprot.readBool();
                  struct.is_asc_order.add(_elem566);
                }
                iprot.readListEnd();
              }
              struct.setIs_asc_orderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_DEFAULT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_default_limit = iprot.readBool();
              struct.setIs_default_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NULLS_FIRST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list568 = iprot.readListBegin();
                struct.nulls_first = new java.util.ArrayList<java.lang.Boolean>(_list568.size);
                boolean _elem569;
                for (int _i570 = 0; _i570 < _list568.size; ++_i570)
                {
                  _elem569 = iprot.readBool();
                  struct.nulls_first.add(_elem569);
                }
                iprot.readListEnd();
              }
              struct.setNulls_firstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SORT_TUPLE_SLOT_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list571 = iprot.readListBegin();
                struct.sort_tuple_slot_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list571.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem572;
                for (int _i573 = 0; _i573 < _list571.size; ++_i573)
                {
                  _elem572 = new io.datafibre.fibre.thrift.TExpr();
                  _elem572.read(iprot);
                  struct.sort_tuple_slot_exprs.add(_elem572);
                }
                iprot.readListEnd();
              }
              struct.setSort_tuple_slot_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // HAS_OUTER_JOIN_CHILD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_outer_join_child = iprot.readBool();
              struct.setHas_outer_join_childIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SQL_SORT_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql_sort_keys = iprot.readString();
              struct.setSql_sort_keysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ANALYTIC_PARTITION_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list574 = iprot.readListBegin();
                struct.analytic_partition_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list574.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem575;
                for (int _i576 = 0; _i576 < _list574.size; ++_i576)
                {
                  _elem575 = new io.datafibre.fibre.thrift.TExpr();
                  _elem575.read(iprot);
                  struct.analytic_partition_exprs.add(_elem575);
                }
                iprot.readListEnd();
              }
              struct.setAnalytic_partition_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PARTITION_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list577 = iprot.readListBegin();
                struct.partition_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list577.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem578;
                for (int _i579 = 0; _i579 < _list577.size; ++_i579)
                {
                  _elem578 = new io.datafibre.fibre.thrift.TExpr();
                  _elem578.read(iprot);
                  struct.partition_exprs.add(_elem578);
                }
                iprot.readListEnd();
              }
              struct.setPartition_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PARTITION_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_limit = iprot.readI64();
              struct.setPartition_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TOPN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.topn_type = io.datafibre.fibre.thrift.TTopNType.findByValue(iprot.readI32());
              struct.setTopn_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // BUILD_RUNTIME_FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list580 = iprot.readListBegin();
                struct.build_runtime_filters = new java.util.ArrayList<io.datafibre.fibre.thrift.TRuntimeFilterDescription>(_list580.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TRuntimeFilterDescription _elem581;
                for (int _i582 = 0; _i582 < _list580.size; ++_i582)
                {
                  _elem581 = new io.datafibre.fibre.thrift.TRuntimeFilterDescription();
                  _elem581.read(iprot);
                  struct.build_runtime_filters.add(_elem581);
                }
                iprot.readListEnd();
              }
              struct.setBuild_runtime_filtersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MAX_BUFFERED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_buffered_rows = iprot.readI64();
              struct.setMax_buffered_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // MAX_BUFFERED_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_buffered_bytes = iprot.readI64();
              struct.setMax_buffered_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // LATE_MATERIALIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.late_materialization = iprot.readBool();
              struct.setLate_materializationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ENABLE_PARALLEL_MERGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_parallel_merge = iprot.readBool();
              struct.setEnable_parallel_mergeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // ANALYTIC_PARTITION_SKEWED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.analytic_partition_skewed = iprot.readBool();
              struct.setAnalytic_partition_skewedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUse_top_n()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'use_top_n' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSortNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sort_info != null) {
        oprot.writeFieldBegin(SORT_INFO_FIELD_DESC);
        struct.sort_info.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USE_TOP_N_FIELD_DESC);
      oprot.writeBool(struct.use_top_n);
      oprot.writeFieldEnd();
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI64(struct.offset);
        oprot.writeFieldEnd();
      }
      if (struct.ordering_exprs != null) {
        if (struct.isSetOrdering_exprs()) {
          oprot.writeFieldBegin(ORDERING_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ordering_exprs.size()));
            for (io.datafibre.fibre.thrift.TExpr _iter583 : struct.ordering_exprs)
            {
              _iter583.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.is_asc_order != null) {
        if (struct.isSetIs_asc_order()) {
          oprot.writeFieldBegin(IS_ASC_ORDER_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.is_asc_order.size()));
            for (boolean _iter584 : struct.is_asc_order)
            {
              oprot.writeBool(_iter584);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_default_limit()) {
        oprot.writeFieldBegin(IS_DEFAULT_LIMIT_FIELD_DESC);
        oprot.writeBool(struct.is_default_limit);
        oprot.writeFieldEnd();
      }
      if (struct.nulls_first != null) {
        if (struct.isSetNulls_first()) {
          oprot.writeFieldBegin(NULLS_FIRST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.nulls_first.size()));
            for (boolean _iter585 : struct.nulls_first)
            {
              oprot.writeBool(_iter585);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sort_tuple_slot_exprs != null) {
        if (struct.isSetSort_tuple_slot_exprs()) {
          oprot.writeFieldBegin(SORT_TUPLE_SLOT_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sort_tuple_slot_exprs.size()));
            for (io.datafibre.fibre.thrift.TExpr _iter586 : struct.sort_tuple_slot_exprs)
            {
              _iter586.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHas_outer_join_child()) {
        oprot.writeFieldBegin(HAS_OUTER_JOIN_CHILD_FIELD_DESC);
        oprot.writeBool(struct.has_outer_join_child);
        oprot.writeFieldEnd();
      }
      if (struct.sql_sort_keys != null) {
        if (struct.isSetSql_sort_keys()) {
          oprot.writeFieldBegin(SQL_SORT_KEYS_FIELD_DESC);
          oprot.writeString(struct.sql_sort_keys);
          oprot.writeFieldEnd();
        }
      }
      if (struct.analytic_partition_exprs != null) {
        if (struct.isSetAnalytic_partition_exprs()) {
          oprot.writeFieldBegin(ANALYTIC_PARTITION_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.analytic_partition_exprs.size()));
            for (io.datafibre.fibre.thrift.TExpr _iter587 : struct.analytic_partition_exprs)
            {
              _iter587.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_exprs != null) {
        if (struct.isSetPartition_exprs()) {
          oprot.writeFieldBegin(PARTITION_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_exprs.size()));
            for (io.datafibre.fibre.thrift.TExpr _iter588 : struct.partition_exprs)
            {
              _iter588.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPartition_limit()) {
        oprot.writeFieldBegin(PARTITION_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.partition_limit);
        oprot.writeFieldEnd();
      }
      if (struct.topn_type != null) {
        if (struct.isSetTopn_type()) {
          oprot.writeFieldBegin(TOPN_TYPE_FIELD_DESC);
          oprot.writeI32(struct.topn_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.build_runtime_filters != null) {
        if (struct.isSetBuild_runtime_filters()) {
          oprot.writeFieldBegin(BUILD_RUNTIME_FILTERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.build_runtime_filters.size()));
            for (io.datafibre.fibre.thrift.TRuntimeFilterDescription _iter589 : struct.build_runtime_filters)
            {
              _iter589.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMax_buffered_rows()) {
        oprot.writeFieldBegin(MAX_BUFFERED_ROWS_FIELD_DESC);
        oprot.writeI64(struct.max_buffered_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_buffered_bytes()) {
        oprot.writeFieldBegin(MAX_BUFFERED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.max_buffered_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLate_materialization()) {
        oprot.writeFieldBegin(LATE_MATERIALIZATION_FIELD_DESC);
        oprot.writeBool(struct.late_materialization);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_parallel_merge()) {
        oprot.writeFieldBegin(ENABLE_PARALLEL_MERGE_FIELD_DESC);
        oprot.writeBool(struct.enable_parallel_merge);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAnalytic_partition_skewed()) {
        oprot.writeFieldBegin(ANALYTIC_PARTITION_SKEWED_FIELD_DESC);
        oprot.writeBool(struct.analytic_partition_skewed);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSortNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSortNodeTupleScheme getScheme() {
      return new TSortNodeTupleScheme();
    }
  }

  private static class TSortNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSortNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSortNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sort_info.write(oprot);
      oprot.writeBool(struct.use_top_n);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOffset()) {
        optionals.set(0);
      }
      if (struct.isSetOrdering_exprs()) {
        optionals.set(1);
      }
      if (struct.isSetIs_asc_order()) {
        optionals.set(2);
      }
      if (struct.isSetIs_default_limit()) {
        optionals.set(3);
      }
      if (struct.isSetNulls_first()) {
        optionals.set(4);
      }
      if (struct.isSetSort_tuple_slot_exprs()) {
        optionals.set(5);
      }
      if (struct.isSetHas_outer_join_child()) {
        optionals.set(6);
      }
      if (struct.isSetSql_sort_keys()) {
        optionals.set(7);
      }
      if (struct.isSetAnalytic_partition_exprs()) {
        optionals.set(8);
      }
      if (struct.isSetPartition_exprs()) {
        optionals.set(9);
      }
      if (struct.isSetPartition_limit()) {
        optionals.set(10);
      }
      if (struct.isSetTopn_type()) {
        optionals.set(11);
      }
      if (struct.isSetBuild_runtime_filters()) {
        optionals.set(12);
      }
      if (struct.isSetMax_buffered_rows()) {
        optionals.set(13);
      }
      if (struct.isSetMax_buffered_bytes()) {
        optionals.set(14);
      }
      if (struct.isSetLate_materialization()) {
        optionals.set(15);
      }
      if (struct.isSetEnable_parallel_merge()) {
        optionals.set(16);
      }
      if (struct.isSetAnalytic_partition_skewed()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetOffset()) {
        oprot.writeI64(struct.offset);
      }
      if (struct.isSetOrdering_exprs()) {
        {
          oprot.writeI32(struct.ordering_exprs.size());
          for (io.datafibre.fibre.thrift.TExpr _iter590 : struct.ordering_exprs)
          {
            _iter590.write(oprot);
          }
        }
      }
      if (struct.isSetIs_asc_order()) {
        {
          oprot.writeI32(struct.is_asc_order.size());
          for (boolean _iter591 : struct.is_asc_order)
          {
            oprot.writeBool(_iter591);
          }
        }
      }
      if (struct.isSetIs_default_limit()) {
        oprot.writeBool(struct.is_default_limit);
      }
      if (struct.isSetNulls_first()) {
        {
          oprot.writeI32(struct.nulls_first.size());
          for (boolean _iter592 : struct.nulls_first)
          {
            oprot.writeBool(_iter592);
          }
        }
      }
      if (struct.isSetSort_tuple_slot_exprs()) {
        {
          oprot.writeI32(struct.sort_tuple_slot_exprs.size());
          for (io.datafibre.fibre.thrift.TExpr _iter593 : struct.sort_tuple_slot_exprs)
          {
            _iter593.write(oprot);
          }
        }
      }
      if (struct.isSetHas_outer_join_child()) {
        oprot.writeBool(struct.has_outer_join_child);
      }
      if (struct.isSetSql_sort_keys()) {
        oprot.writeString(struct.sql_sort_keys);
      }
      if (struct.isSetAnalytic_partition_exprs()) {
        {
          oprot.writeI32(struct.analytic_partition_exprs.size());
          for (io.datafibre.fibre.thrift.TExpr _iter594 : struct.analytic_partition_exprs)
          {
            _iter594.write(oprot);
          }
        }
      }
      if (struct.isSetPartition_exprs()) {
        {
          oprot.writeI32(struct.partition_exprs.size());
          for (io.datafibre.fibre.thrift.TExpr _iter595 : struct.partition_exprs)
          {
            _iter595.write(oprot);
          }
        }
      }
      if (struct.isSetPartition_limit()) {
        oprot.writeI64(struct.partition_limit);
      }
      if (struct.isSetTopn_type()) {
        oprot.writeI32(struct.topn_type.getValue());
      }
      if (struct.isSetBuild_runtime_filters()) {
        {
          oprot.writeI32(struct.build_runtime_filters.size());
          for (io.datafibre.fibre.thrift.TRuntimeFilterDescription _iter596 : struct.build_runtime_filters)
          {
            _iter596.write(oprot);
          }
        }
      }
      if (struct.isSetMax_buffered_rows()) {
        oprot.writeI64(struct.max_buffered_rows);
      }
      if (struct.isSetMax_buffered_bytes()) {
        oprot.writeI64(struct.max_buffered_bytes);
      }
      if (struct.isSetLate_materialization()) {
        oprot.writeBool(struct.late_materialization);
      }
      if (struct.isSetEnable_parallel_merge()) {
        oprot.writeBool(struct.enable_parallel_merge);
      }
      if (struct.isSetAnalytic_partition_skewed()) {
        oprot.writeBool(struct.analytic_partition_skewed);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSortNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sort_info = new TSortInfo();
      struct.sort_info.read(iprot);
      struct.setSort_infoIsSet(true);
      struct.use_top_n = iprot.readBool();
      struct.setUse_top_nIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.offset = iprot.readI64();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list597 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.ordering_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list597.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem598;
          for (int _i599 = 0; _i599 < _list597.size; ++_i599)
          {
            _elem598 = new io.datafibre.fibre.thrift.TExpr();
            _elem598.read(iprot);
            struct.ordering_exprs.add(_elem598);
          }
        }
        struct.setOrdering_exprsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list600 = iprot.readListBegin(org.apache.thrift.protocol.TType.BOOL);
          struct.is_asc_order = new java.util.ArrayList<java.lang.Boolean>(_list600.size);
          boolean _elem601;
          for (int _i602 = 0; _i602 < _list600.size; ++_i602)
          {
            _elem601 = iprot.readBool();
            struct.is_asc_order.add(_elem601);
          }
        }
        struct.setIs_asc_orderIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_default_limit = iprot.readBool();
        struct.setIs_default_limitIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list603 = iprot.readListBegin(org.apache.thrift.protocol.TType.BOOL);
          struct.nulls_first = new java.util.ArrayList<java.lang.Boolean>(_list603.size);
          boolean _elem604;
          for (int _i605 = 0; _i605 < _list603.size; ++_i605)
          {
            _elem604 = iprot.readBool();
            struct.nulls_first.add(_elem604);
          }
        }
        struct.setNulls_firstIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list606 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.sort_tuple_slot_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list606.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem607;
          for (int _i608 = 0; _i608 < _list606.size; ++_i608)
          {
            _elem607 = new io.datafibre.fibre.thrift.TExpr();
            _elem607.read(iprot);
            struct.sort_tuple_slot_exprs.add(_elem607);
          }
        }
        struct.setSort_tuple_slot_exprsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.has_outer_join_child = iprot.readBool();
        struct.setHas_outer_join_childIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sql_sort_keys = iprot.readString();
        struct.setSql_sort_keysIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list609 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.analytic_partition_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list609.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem610;
          for (int _i611 = 0; _i611 < _list609.size; ++_i611)
          {
            _elem610 = new io.datafibre.fibre.thrift.TExpr();
            _elem610.read(iprot);
            struct.analytic_partition_exprs.add(_elem610);
          }
        }
        struct.setAnalytic_partition_exprsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list612 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.partition_exprs = new java.util.ArrayList<io.datafibre.fibre.thrift.TExpr>(_list612.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TExpr _elem613;
          for (int _i614 = 0; _i614 < _list612.size; ++_i614)
          {
            _elem613 = new io.datafibre.fibre.thrift.TExpr();
            _elem613.read(iprot);
            struct.partition_exprs.add(_elem613);
          }
        }
        struct.setPartition_exprsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.partition_limit = iprot.readI64();
        struct.setPartition_limitIsSet(true);
      }
      if (incoming.get(11)) {
        struct.topn_type = io.datafibre.fibre.thrift.TTopNType.findByValue(iprot.readI32());
        struct.setTopn_typeIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list615 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.build_runtime_filters = new java.util.ArrayList<io.datafibre.fibre.thrift.TRuntimeFilterDescription>(_list615.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TRuntimeFilterDescription _elem616;
          for (int _i617 = 0; _i617 < _list615.size; ++_i617)
          {
            _elem616 = new io.datafibre.fibre.thrift.TRuntimeFilterDescription();
            _elem616.read(iprot);
            struct.build_runtime_filters.add(_elem616);
          }
        }
        struct.setBuild_runtime_filtersIsSet(true);
      }
      if (incoming.get(13)) {
        struct.max_buffered_rows = iprot.readI64();
        struct.setMax_buffered_rowsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.max_buffered_bytes = iprot.readI64();
        struct.setMax_buffered_bytesIsSet(true);
      }
      if (incoming.get(15)) {
        struct.late_materialization = iprot.readBool();
        struct.setLate_materializationIsSet(true);
      }
      if (incoming.get(16)) {
        struct.enable_parallel_merge = iprot.readBool();
        struct.setEnable_parallel_mergeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.analytic_partition_skewed = iprot.readBool();
        struct.setAnalytic_partition_skewedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

