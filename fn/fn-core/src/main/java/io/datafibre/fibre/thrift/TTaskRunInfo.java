/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TTaskRunInfo implements org.apache.thrift.TBase<TTaskRunInfo, TTaskRunInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TTaskRunInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTaskRunInfo");

  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("query_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("task_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("finish_time", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DEFINITION_FIELD_DESC = new org.apache.thrift.protocol.TField("definition", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expire_time", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("error_code", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("error_message", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField EXTRA_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("extra_message", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTaskRunInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTaskRunInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String query_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String task_name; // optional
  public long create_time; // optional
  public long finish_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String state; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String database; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String definition; // optional
  public long expire_time; // optional
  public int error_code; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String error_message; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String progress; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String extra_message; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String properties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY_ID((short)1, "query_id"),
    TASK_NAME((short)2, "task_name"),
    CREATE_TIME((short)3, "create_time"),
    FINISH_TIME((short)4, "finish_time"),
    STATE((short)5, "state"),
    DATABASE((short)6, "database"),
    DEFINITION((short)7, "definition"),
    EXPIRE_TIME((short)8, "expire_time"),
    ERROR_CODE((short)9, "error_code"),
    ERROR_MESSAGE((short)10, "error_message"),
    PROGRESS((short)11, "progress"),
    EXTRA_MESSAGE((short)12, "extra_message"),
    PROPERTIES((short)13, "properties");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_ID
          return QUERY_ID;
        case 2: // TASK_NAME
          return TASK_NAME;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // FINISH_TIME
          return FINISH_TIME;
        case 5: // STATE
          return STATE;
        case 6: // DATABASE
          return DATABASE;
        case 7: // DEFINITION
          return DEFINITION;
        case 8: // EXPIRE_TIME
          return EXPIRE_TIME;
        case 9: // ERROR_CODE
          return ERROR_CODE;
        case 10: // ERROR_MESSAGE
          return ERROR_MESSAGE;
        case 11: // PROGRESS
          return PROGRESS;
        case 12: // EXTRA_MESSAGE
          return EXTRA_MESSAGE;
        case 13: // PROPERTIES
          return PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATE_TIME_ISSET_ID = 0;
  private static final int __FINISH_TIME_ISSET_ID = 1;
  private static final int __EXPIRE_TIME_ISSET_ID = 2;
  private static final int __ERROR_CODE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.QUERY_ID,_Fields.TASK_NAME,_Fields.CREATE_TIME,_Fields.FINISH_TIME,_Fields.STATE,_Fields.DATABASE,_Fields.DEFINITION,_Fields.EXPIRE_TIME,_Fields.ERROR_CODE,_Fields.ERROR_MESSAGE,_Fields.PROGRESS,_Fields.EXTRA_MESSAGE,_Fields.PROPERTIES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("query_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_NAME, new org.apache.thrift.meta_data.FieldMetaData("task_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("finish_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFINITION, new org.apache.thrift.meta_data.FieldMetaData("definition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expire_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("error_code", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("error_message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("progress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTRA_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("extra_message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTaskRunInfo.class, metaDataMap);
  }

  public TTaskRunInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTaskRunInfo(TTaskRunInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQuery_id()) {
      this.query_id = other.query_id;
    }
    if (other.isSetTask_name()) {
      this.task_name = other.task_name;
    }
    this.create_time = other.create_time;
    this.finish_time = other.finish_time;
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetDatabase()) {
      this.database = other.database;
    }
    if (other.isSetDefinition()) {
      this.definition = other.definition;
    }
    this.expire_time = other.expire_time;
    this.error_code = other.error_code;
    if (other.isSetError_message()) {
      this.error_message = other.error_message;
    }
    if (other.isSetProgress()) {
      this.progress = other.progress;
    }
    if (other.isSetExtra_message()) {
      this.extra_message = other.extra_message;
    }
    if (other.isSetProperties()) {
      this.properties = other.properties;
    }
  }

  @Override
  public TTaskRunInfo deepCopy() {
    return new TTaskRunInfo(this);
  }

  @Override
  public void clear() {
    this.query_id = null;
    this.task_name = null;
    setCreate_timeIsSet(false);
    this.create_time = 0;
    setFinish_timeIsSet(false);
    this.finish_time = 0;
    this.state = null;
    this.database = null;
    this.definition = null;
    setExpire_timeIsSet(false);
    this.expire_time = 0;
    setError_codeIsSet(false);
    this.error_code = 0;
    this.error_message = null;
    this.progress = null;
    this.extra_message = null;
    this.properties = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQuery_id() {
    return this.query_id;
  }

  public TTaskRunInfo setQuery_id(@org.apache.thrift.annotation.Nullable java.lang.String query_id) {
    this.query_id = query_id;
    return this;
  }

  public void unsetQuery_id() {
    this.query_id = null;
  }

  /** Returns true if field query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_id() {
    return this.query_id != null;
  }

  public void setQuery_idIsSet(boolean value) {
    if (!value) {
      this.query_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTask_name() {
    return this.task_name;
  }

  public TTaskRunInfo setTask_name(@org.apache.thrift.annotation.Nullable java.lang.String task_name) {
    this.task_name = task_name;
    return this;
  }

  public void unsetTask_name() {
    this.task_name = null;
  }

  /** Returns true if field task_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_name() {
    return this.task_name != null;
  }

  public void setTask_nameIsSet(boolean value) {
    if (!value) {
      this.task_name = null;
    }
  }

  public long getCreate_time() {
    return this.create_time;
  }

  public TTaskRunInfo setCreate_time(long create_time) {
    this.create_time = create_time;
    setCreate_timeIsSet(true);
    return this;
  }

  public void unsetCreate_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  public void setCreate_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATE_TIME_ISSET_ID, value);
  }

  public long getFinish_time() {
    return this.finish_time;
  }

  public TTaskRunInfo setFinish_time(long finish_time) {
    this.finish_time = finish_time;
    setFinish_timeIsSet(true);
    return this;
  }

  public void unsetFinish_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FINISH_TIME_ISSET_ID);
  }

  /** Returns true if field finish_time is set (has been assigned a value) and false otherwise */
  public boolean isSetFinish_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FINISH_TIME_ISSET_ID);
  }

  public void setFinish_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FINISH_TIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getState() {
    return this.state;
  }

  public TTaskRunInfo setState(@org.apache.thrift.annotation.Nullable java.lang.String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDatabase() {
    return this.database;
  }

  public TTaskRunInfo setDatabase(@org.apache.thrift.annotation.Nullable java.lang.String database) {
    this.database = database;
    return this;
  }

  public void unsetDatabase() {
    this.database = null;
  }

  /** Returns true if field database is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabase() {
    return this.database != null;
  }

  public void setDatabaseIsSet(boolean value) {
    if (!value) {
      this.database = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDefinition() {
    return this.definition;
  }

  public TTaskRunInfo setDefinition(@org.apache.thrift.annotation.Nullable java.lang.String definition) {
    this.definition = definition;
    return this;
  }

  public void unsetDefinition() {
    this.definition = null;
  }

  /** Returns true if field definition is set (has been assigned a value) and false otherwise */
  public boolean isSetDefinition() {
    return this.definition != null;
  }

  public void setDefinitionIsSet(boolean value) {
    if (!value) {
      this.definition = null;
    }
  }

  public long getExpire_time() {
    return this.expire_time;
  }

  public TTaskRunInfo setExpire_time(long expire_time) {
    this.expire_time = expire_time;
    setExpire_timeIsSet(true);
    return this;
  }

  public void unsetExpire_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPIRE_TIME_ISSET_ID);
  }

  /** Returns true if field expire_time is set (has been assigned a value) and false otherwise */
  public boolean isSetExpire_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPIRE_TIME_ISSET_ID);
  }

  public void setExpire_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPIRE_TIME_ISSET_ID, value);
  }

  public int getError_code() {
    return this.error_code;
  }

  public TTaskRunInfo setError_code(int error_code) {
    this.error_code = error_code;
    setError_codeIsSet(true);
    return this;
  }

  public void unsetError_code() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERROR_CODE_ISSET_ID);
  }

  /** Returns true if field error_code is set (has been assigned a value) and false otherwise */
  public boolean isSetError_code() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERROR_CODE_ISSET_ID);
  }

  public void setError_codeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERROR_CODE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getError_message() {
    return this.error_message;
  }

  public TTaskRunInfo setError_message(@org.apache.thrift.annotation.Nullable java.lang.String error_message) {
    this.error_message = error_message;
    return this;
  }

  public void unsetError_message() {
    this.error_message = null;
  }

  /** Returns true if field error_message is set (has been assigned a value) and false otherwise */
  public boolean isSetError_message() {
    return this.error_message != null;
  }

  public void setError_messageIsSet(boolean value) {
    if (!value) {
      this.error_message = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getProgress() {
    return this.progress;
  }

  public TTaskRunInfo setProgress(@org.apache.thrift.annotation.Nullable java.lang.String progress) {
    this.progress = progress;
    return this;
  }

  public void unsetProgress() {
    this.progress = null;
  }

  /** Returns true if field progress is set (has been assigned a value) and false otherwise */
  public boolean isSetProgress() {
    return this.progress != null;
  }

  public void setProgressIsSet(boolean value) {
    if (!value) {
      this.progress = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getExtra_message() {
    return this.extra_message;
  }

  public TTaskRunInfo setExtra_message(@org.apache.thrift.annotation.Nullable java.lang.String extra_message) {
    this.extra_message = extra_message;
    return this;
  }

  public void unsetExtra_message() {
    this.extra_message = null;
  }

  /** Returns true if field extra_message is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra_message() {
    return this.extra_message != null;
  }

  public void setExtra_messageIsSet(boolean value) {
    if (!value) {
      this.extra_message = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getProperties() {
    return this.properties;
  }

  public TTaskRunInfo setProperties(@org.apache.thrift.annotation.Nullable java.lang.String properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case QUERY_ID:
      if (value == null) {
        unsetQuery_id();
      } else {
        setQuery_id((java.lang.String)value);
      }
      break;

    case TASK_NAME:
      if (value == null) {
        unsetTask_name();
      } else {
        setTask_name((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((java.lang.Long)value);
      }
      break;

    case FINISH_TIME:
      if (value == null) {
        unsetFinish_time();
      } else {
        setFinish_time((java.lang.Long)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.String)value);
      }
      break;

    case DATABASE:
      if (value == null) {
        unsetDatabase();
      } else {
        setDatabase((java.lang.String)value);
      }
      break;

    case DEFINITION:
      if (value == null) {
        unsetDefinition();
      } else {
        setDefinition((java.lang.String)value);
      }
      break;

    case EXPIRE_TIME:
      if (value == null) {
        unsetExpire_time();
      } else {
        setExpire_time((java.lang.Long)value);
      }
      break;

    case ERROR_CODE:
      if (value == null) {
        unsetError_code();
      } else {
        setError_code((java.lang.Integer)value);
      }
      break;

    case ERROR_MESSAGE:
      if (value == null) {
        unsetError_message();
      } else {
        setError_message((java.lang.String)value);
      }
      break;

    case PROGRESS:
      if (value == null) {
        unsetProgress();
      } else {
        setProgress((java.lang.String)value);
      }
      break;

    case EXTRA_MESSAGE:
      if (value == null) {
        unsetExtra_message();
      } else {
        setExtra_message((java.lang.String)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_ID:
      return getQuery_id();

    case TASK_NAME:
      return getTask_name();

    case CREATE_TIME:
      return getCreate_time();

    case FINISH_TIME:
      return getFinish_time();

    case STATE:
      return getState();

    case DATABASE:
      return getDatabase();

    case DEFINITION:
      return getDefinition();

    case EXPIRE_TIME:
      return getExpire_time();

    case ERROR_CODE:
      return getError_code();

    case ERROR_MESSAGE:
      return getError_message();

    case PROGRESS:
      return getProgress();

    case EXTRA_MESSAGE:
      return getExtra_message();

    case PROPERTIES:
      return getProperties();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case QUERY_ID:
      return isSetQuery_id();
    case TASK_NAME:
      return isSetTask_name();
    case CREATE_TIME:
      return isSetCreate_time();
    case FINISH_TIME:
      return isSetFinish_time();
    case STATE:
      return isSetState();
    case DATABASE:
      return isSetDatabase();
    case DEFINITION:
      return isSetDefinition();
    case EXPIRE_TIME:
      return isSetExpire_time();
    case ERROR_CODE:
      return isSetError_code();
    case ERROR_MESSAGE:
      return isSetError_message();
    case PROGRESS:
      return isSetProgress();
    case EXTRA_MESSAGE:
      return isSetExtra_message();
    case PROPERTIES:
      return isSetProperties();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTaskRunInfo)
      return this.equals((TTaskRunInfo)that);
    return false;
  }

  public boolean equals(TTaskRunInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_query_id = true && this.isSetQuery_id();
    boolean that_present_query_id = true && that.isSetQuery_id();
    if (this_present_query_id || that_present_query_id) {
      if (!(this_present_query_id && that_present_query_id))
        return false;
      if (!this.query_id.equals(that.query_id))
        return false;
    }

    boolean this_present_task_name = true && this.isSetTask_name();
    boolean that_present_task_name = true && that.isSetTask_name();
    if (this_present_task_name || that_present_task_name) {
      if (!(this_present_task_name && that_present_task_name))
        return false;
      if (!this.task_name.equals(that.task_name))
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (this.create_time != that.create_time)
        return false;
    }

    boolean this_present_finish_time = true && this.isSetFinish_time();
    boolean that_present_finish_time = true && that.isSetFinish_time();
    if (this_present_finish_time || that_present_finish_time) {
      if (!(this_present_finish_time && that_present_finish_time))
        return false;
      if (this.finish_time != that.finish_time)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_database = true && this.isSetDatabase();
    boolean that_present_database = true && that.isSetDatabase();
    if (this_present_database || that_present_database) {
      if (!(this_present_database && that_present_database))
        return false;
      if (!this.database.equals(that.database))
        return false;
    }

    boolean this_present_definition = true && this.isSetDefinition();
    boolean that_present_definition = true && that.isSetDefinition();
    if (this_present_definition || that_present_definition) {
      if (!(this_present_definition && that_present_definition))
        return false;
      if (!this.definition.equals(that.definition))
        return false;
    }

    boolean this_present_expire_time = true && this.isSetExpire_time();
    boolean that_present_expire_time = true && that.isSetExpire_time();
    if (this_present_expire_time || that_present_expire_time) {
      if (!(this_present_expire_time && that_present_expire_time))
        return false;
      if (this.expire_time != that.expire_time)
        return false;
    }

    boolean this_present_error_code = true && this.isSetError_code();
    boolean that_present_error_code = true && that.isSetError_code();
    if (this_present_error_code || that_present_error_code) {
      if (!(this_present_error_code && that_present_error_code))
        return false;
      if (this.error_code != that.error_code)
        return false;
    }

    boolean this_present_error_message = true && this.isSetError_message();
    boolean that_present_error_message = true && that.isSetError_message();
    if (this_present_error_message || that_present_error_message) {
      if (!(this_present_error_message && that_present_error_message))
        return false;
      if (!this.error_message.equals(that.error_message))
        return false;
    }

    boolean this_present_progress = true && this.isSetProgress();
    boolean that_present_progress = true && that.isSetProgress();
    if (this_present_progress || that_present_progress) {
      if (!(this_present_progress && that_present_progress))
        return false;
      if (!this.progress.equals(that.progress))
        return false;
    }

    boolean this_present_extra_message = true && this.isSetExtra_message();
    boolean that_present_extra_message = true && that.isSetExtra_message();
    if (this_present_extra_message || that_present_extra_message) {
      if (!(this_present_extra_message && that_present_extra_message))
        return false;
      if (!this.extra_message.equals(that.extra_message))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetQuery_id()) ? 131071 : 524287);
    if (isSetQuery_id())
      hashCode = hashCode * 8191 + query_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetTask_name()) ? 131071 : 524287);
    if (isSetTask_name())
      hashCode = hashCode * 8191 + task_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreate_time()) ? 131071 : 524287);
    if (isSetCreate_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(create_time);

    hashCode = hashCode * 8191 + ((isSetFinish_time()) ? 131071 : 524287);
    if (isSetFinish_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(finish_time);

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatabase()) ? 131071 : 524287);
    if (isSetDatabase())
      hashCode = hashCode * 8191 + database.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefinition()) ? 131071 : 524287);
    if (isSetDefinition())
      hashCode = hashCode * 8191 + definition.hashCode();

    hashCode = hashCode * 8191 + ((isSetExpire_time()) ? 131071 : 524287);
    if (isSetExpire_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(expire_time);

    hashCode = hashCode * 8191 + ((isSetError_code()) ? 131071 : 524287);
    if (isSetError_code())
      hashCode = hashCode * 8191 + error_code;

    hashCode = hashCode * 8191 + ((isSetError_message()) ? 131071 : 524287);
    if (isSetError_message())
      hashCode = hashCode * 8191 + error_message.hashCode();

    hashCode = hashCode * 8191 + ((isSetProgress()) ? 131071 : 524287);
    if (isSetProgress())
      hashCode = hashCode * 8191 + progress.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtra_message()) ? 131071 : 524287);
    if (isSetExtra_message())
      hashCode = hashCode * 8191 + extra_message.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TTaskRunInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetQuery_id(), other.isSetQuery_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_id, other.query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTask_name(), other.isSetTask_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_name, other.task_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreate_time(), other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFinish_time(), other.isSetFinish_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinish_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish_time, other.finish_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDatabase(), other.isSetDatabase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDefinition(), other.isSetDefinition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefinition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.definition, other.definition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExpire_time(), other.isSetExpire_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpire_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expire_time, other.expire_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetError_code(), other.isSetError_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_code, other.error_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetError_message(), other.isSetError_message());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_message()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_message, other.error_message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProgress(), other.isSetProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress, other.progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtra_message(), other.isSetExtra_message());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra_message()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra_message, other.extra_message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProperties(), other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTaskRunInfo(");
    boolean first = true;

    if (isSetQuery_id()) {
      sb.append("query_id:");
      if (this.query_id == null) {
        sb.append("null");
      } else {
        sb.append(this.query_id);
      }
      first = false;
    }
    if (isSetTask_name()) {
      if (!first) sb.append(", ");
      sb.append("task_name:");
      if (this.task_name == null) {
        sb.append("null");
      } else {
        sb.append(this.task_name);
      }
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      sb.append(this.create_time);
      first = false;
    }
    if (isSetFinish_time()) {
      if (!first) sb.append(", ");
      sb.append("finish_time:");
      sb.append(this.finish_time);
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetDatabase()) {
      if (!first) sb.append(", ");
      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
    }
    if (isSetDefinition()) {
      if (!first) sb.append(", ");
      sb.append("definition:");
      if (this.definition == null) {
        sb.append("null");
      } else {
        sb.append(this.definition);
      }
      first = false;
    }
    if (isSetExpire_time()) {
      if (!first) sb.append(", ");
      sb.append("expire_time:");
      sb.append(this.expire_time);
      first = false;
    }
    if (isSetError_code()) {
      if (!first) sb.append(", ");
      sb.append("error_code:");
      sb.append(this.error_code);
      first = false;
    }
    if (isSetError_message()) {
      if (!first) sb.append(", ");
      sb.append("error_message:");
      if (this.error_message == null) {
        sb.append("null");
      } else {
        sb.append(this.error_message);
      }
      first = false;
    }
    if (isSetProgress()) {
      if (!first) sb.append(", ");
      sb.append("progress:");
      if (this.progress == null) {
        sb.append("null");
      } else {
        sb.append(this.progress);
      }
      first = false;
    }
    if (isSetExtra_message()) {
      if (!first) sb.append(", ");
      sb.append("extra_message:");
      if (this.extra_message == null) {
        sb.append("null");
      } else {
        sb.append(this.extra_message);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTaskRunInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTaskRunInfoStandardScheme getScheme() {
      return new TTaskRunInfoStandardScheme();
    }
  }

  private static class TTaskRunInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTaskRunInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTaskRunInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query_id = iprot.readString();
              struct.setQuery_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.task_name = iprot.readString();
              struct.setTask_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.create_time = iprot.readI64();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.finish_time = iprot.readI64();
              struct.setFinish_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.database = iprot.readString();
              struct.setDatabaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEFINITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.definition = iprot.readString();
              struct.setDefinitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXPIRE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expire_time = iprot.readI64();
              struct.setExpire_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.error_code = iprot.readI32();
              struct.setError_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ERROR_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error_message = iprot.readString();
              struct.setError_messageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.progress = iprot.readString();
              struct.setProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EXTRA_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extra_message = iprot.readString();
              struct.setExtra_messageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.properties = iprot.readString();
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTaskRunInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query_id != null) {
        if (struct.isSetQuery_id()) {
          oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
          oprot.writeString(struct.query_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.task_name != null) {
        if (struct.isSetTask_name()) {
          oprot.writeFieldBegin(TASK_NAME_FIELD_DESC);
          oprot.writeString(struct.task_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreate_time()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.create_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFinish_time()) {
        oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
        oprot.writeI64(struct.finish_time);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.database != null) {
        if (struct.isSetDatabase()) {
          oprot.writeFieldBegin(DATABASE_FIELD_DESC);
          oprot.writeString(struct.database);
          oprot.writeFieldEnd();
        }
      }
      if (struct.definition != null) {
        if (struct.isSetDefinition()) {
          oprot.writeFieldBegin(DEFINITION_FIELD_DESC);
          oprot.writeString(struct.definition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExpire_time()) {
        oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
        oprot.writeI64(struct.expire_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetError_code()) {
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.error_code);
        oprot.writeFieldEnd();
      }
      if (struct.error_message != null) {
        if (struct.isSetError_message()) {
          oprot.writeFieldBegin(ERROR_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.error_message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.progress != null) {
        if (struct.isSetProgress()) {
          oprot.writeFieldBegin(PROGRESS_FIELD_DESC);
          oprot.writeString(struct.progress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extra_message != null) {
        if (struct.isSetExtra_message()) {
          oprot.writeFieldBegin(EXTRA_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.extra_message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          oprot.writeString(struct.properties);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTaskRunInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTaskRunInfoTupleScheme getScheme() {
      return new TTaskRunInfoTupleScheme();
    }
  }

  private static class TTaskRunInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTaskRunInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTaskRunInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetQuery_id()) {
        optionals.set(0);
      }
      if (struct.isSetTask_name()) {
        optionals.set(1);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(2);
      }
      if (struct.isSetFinish_time()) {
        optionals.set(3);
      }
      if (struct.isSetState()) {
        optionals.set(4);
      }
      if (struct.isSetDatabase()) {
        optionals.set(5);
      }
      if (struct.isSetDefinition()) {
        optionals.set(6);
      }
      if (struct.isSetExpire_time()) {
        optionals.set(7);
      }
      if (struct.isSetError_code()) {
        optionals.set(8);
      }
      if (struct.isSetError_message()) {
        optionals.set(9);
      }
      if (struct.isSetProgress()) {
        optionals.set(10);
      }
      if (struct.isSetExtra_message()) {
        optionals.set(11);
      }
      if (struct.isSetProperties()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetQuery_id()) {
        oprot.writeString(struct.query_id);
      }
      if (struct.isSetTask_name()) {
        oprot.writeString(struct.task_name);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeI64(struct.create_time);
      }
      if (struct.isSetFinish_time()) {
        oprot.writeI64(struct.finish_time);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetDatabase()) {
        oprot.writeString(struct.database);
      }
      if (struct.isSetDefinition()) {
        oprot.writeString(struct.definition);
      }
      if (struct.isSetExpire_time()) {
        oprot.writeI64(struct.expire_time);
      }
      if (struct.isSetError_code()) {
        oprot.writeI32(struct.error_code);
      }
      if (struct.isSetError_message()) {
        oprot.writeString(struct.error_message);
      }
      if (struct.isSetProgress()) {
        oprot.writeString(struct.progress);
      }
      if (struct.isSetExtra_message()) {
        oprot.writeString(struct.extra_message);
      }
      if (struct.isSetProperties()) {
        oprot.writeString(struct.properties);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTaskRunInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.query_id = iprot.readString();
        struct.setQuery_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.task_name = iprot.readString();
        struct.setTask_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.create_time = iprot.readI64();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.finish_time = iprot.readI64();
        struct.setFinish_timeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.database = iprot.readString();
        struct.setDatabaseIsSet(true);
      }
      if (incoming.get(6)) {
        struct.definition = iprot.readString();
        struct.setDefinitionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.expire_time = iprot.readI64();
        struct.setExpire_timeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.error_code = iprot.readI32();
        struct.setError_codeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.error_message = iprot.readString();
        struct.setError_messageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.progress = iprot.readString();
        struct.setProgressIsSet(true);
      }
      if (incoming.get(11)) {
        struct.extra_message = iprot.readString();
        struct.setExtra_messageIsSet(true);
      }
      if (incoming.get(12)) {
        struct.properties = iprot.readString();
        struct.setPropertiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

