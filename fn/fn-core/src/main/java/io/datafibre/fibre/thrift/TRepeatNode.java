/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TRepeatNode implements org.apache.thrift.TBase<TRepeatNode, TRepeatNode._Fields>, java.io.Serializable, Cloneable, Comparable<TRepeatNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRepeatNode");

  private static final org.apache.thrift.protocol.TField OUTPUT_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("output_tuple_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SLOT_ID_SET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("slot_id_set_list", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField REPEAT_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("repeat_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField GROUPING_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("grouping_list", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField ALL_SLOT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_slot_ids", org.apache.thrift.protocol.TType.SET, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRepeatNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRepeatNodeTupleSchemeFactory();

  public int output_tuple_id; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Set<java.lang.Integer>> slot_id_set_list; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> repeat_id_list; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Long>> grouping_list; // required
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> all_slot_ids; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OUTPUT_TUPLE_ID((short)1, "output_tuple_id"),
    SLOT_ID_SET_LIST((short)2, "slot_id_set_list"),
    REPEAT_ID_LIST((short)3, "repeat_id_list"),
    GROUPING_LIST((short)4, "grouping_list"),
    ALL_SLOT_IDS((short)5, "all_slot_ids");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OUTPUT_TUPLE_ID
          return OUTPUT_TUPLE_ID;
        case 2: // SLOT_ID_SET_LIST
          return SLOT_ID_SET_LIST;
        case 3: // REPEAT_ID_LIST
          return REPEAT_ID_LIST;
        case 4: // GROUPING_LIST
          return GROUPING_LIST;
        case 5: // ALL_SLOT_IDS
          return ALL_SLOT_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OUTPUT_TUPLE_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OUTPUT_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("output_tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.SLOT_ID_SET_LIST, new org.apache.thrift.meta_data.FieldMetaData("slot_id_set_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32                , "TSlotId")))));
    tmpMap.put(_Fields.REPEAT_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("repeat_id_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.GROUPING_LIST, new org.apache.thrift.meta_data.FieldMetaData("grouping_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.ALL_SLOT_IDS, new org.apache.thrift.meta_data.FieldMetaData("all_slot_ids", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRepeatNode.class, metaDataMap);
  }

  public TRepeatNode() {
  }

  public TRepeatNode(
    int output_tuple_id,
    java.util.List<java.util.Set<java.lang.Integer>> slot_id_set_list,
    java.util.List<java.lang.Long> repeat_id_list,
    java.util.List<java.util.List<java.lang.Long>> grouping_list,
    java.util.Set<java.lang.Integer> all_slot_ids)
  {
    this();
    this.output_tuple_id = output_tuple_id;
    setOutput_tuple_idIsSet(true);
    this.slot_id_set_list = slot_id_set_list;
    this.repeat_id_list = repeat_id_list;
    this.grouping_list = grouping_list;
    this.all_slot_ids = all_slot_ids;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRepeatNode(TRepeatNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.output_tuple_id = other.output_tuple_id;
    if (other.isSetSlot_id_set_list()) {
      java.util.List<java.util.Set<java.lang.Integer>> __this__slot_id_set_list = new java.util.ArrayList<java.util.Set<java.lang.Integer>>(other.slot_id_set_list.size());
      for (java.util.Set<java.lang.Integer> other_element : other.slot_id_set_list) {
        java.util.Set<java.lang.Integer> __this__slot_id_set_list_copy = new java.util.HashSet<java.lang.Integer>(other_element.size());
        for (java.lang.Integer other_element_element : other_element) {
          __this__slot_id_set_list_copy.add(other_element_element);
        }
        __this__slot_id_set_list.add(__this__slot_id_set_list_copy);
      }
      this.slot_id_set_list = __this__slot_id_set_list;
    }
    if (other.isSetRepeat_id_list()) {
      java.util.List<java.lang.Long> __this__repeat_id_list = new java.util.ArrayList<java.lang.Long>(other.repeat_id_list);
      this.repeat_id_list = __this__repeat_id_list;
    }
    if (other.isSetGrouping_list()) {
      java.util.List<java.util.List<java.lang.Long>> __this__grouping_list = new java.util.ArrayList<java.util.List<java.lang.Long>>(other.grouping_list.size());
      for (java.util.List<java.lang.Long> other_element : other.grouping_list) {
        java.util.List<java.lang.Long> __this__grouping_list_copy = new java.util.ArrayList<java.lang.Long>(other_element);
        __this__grouping_list.add(__this__grouping_list_copy);
      }
      this.grouping_list = __this__grouping_list;
    }
    if (other.isSetAll_slot_ids()) {
      java.util.Set<java.lang.Integer> __this__all_slot_ids = new java.util.HashSet<java.lang.Integer>(other.all_slot_ids.size());
      for (java.lang.Integer other_element : other.all_slot_ids) {
        __this__all_slot_ids.add(other_element);
      }
      this.all_slot_ids = __this__all_slot_ids;
    }
  }

  @Override
  public TRepeatNode deepCopy() {
    return new TRepeatNode(this);
  }

  @Override
  public void clear() {
    setOutput_tuple_idIsSet(false);
    this.output_tuple_id = 0;
    this.slot_id_set_list = null;
    this.repeat_id_list = null;
    this.grouping_list = null;
    this.all_slot_ids = null;
  }

  public int getOutput_tuple_id() {
    return this.output_tuple_id;
  }

  public TRepeatNode setOutput_tuple_id(int output_tuple_id) {
    this.output_tuple_id = output_tuple_id;
    setOutput_tuple_idIsSet(true);
    return this;
  }

  public void unsetOutput_tuple_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field output_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_tuple_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID);
  }

  public void setOutput_tuple_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID, value);
  }

  public int getSlot_id_set_listSize() {
    return (this.slot_id_set_list == null) ? 0 : this.slot_id_set_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.Set<java.lang.Integer>> getSlot_id_set_listIterator() {
    return (this.slot_id_set_list == null) ? null : this.slot_id_set_list.iterator();
  }

  public void addToSlot_id_set_list(java.util.Set<java.lang.Integer> elem) {
    if (this.slot_id_set_list == null) {
      this.slot_id_set_list = new java.util.ArrayList<java.util.Set<java.lang.Integer>>();
    }
    this.slot_id_set_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.Set<java.lang.Integer>> getSlot_id_set_list() {
    return this.slot_id_set_list;
  }

  public TRepeatNode setSlot_id_set_list(@org.apache.thrift.annotation.Nullable java.util.List<java.util.Set<java.lang.Integer>> slot_id_set_list) {
    this.slot_id_set_list = slot_id_set_list;
    return this;
  }

  public void unsetSlot_id_set_list() {
    this.slot_id_set_list = null;
  }

  /** Returns true if field slot_id_set_list is set (has been assigned a value) and false otherwise */
  public boolean isSetSlot_id_set_list() {
    return this.slot_id_set_list != null;
  }

  public void setSlot_id_set_listIsSet(boolean value) {
    if (!value) {
      this.slot_id_set_list = null;
    }
  }

  public int getRepeat_id_listSize() {
    return (this.repeat_id_list == null) ? 0 : this.repeat_id_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getRepeat_id_listIterator() {
    return (this.repeat_id_list == null) ? null : this.repeat_id_list.iterator();
  }

  public void addToRepeat_id_list(long elem) {
    if (this.repeat_id_list == null) {
      this.repeat_id_list = new java.util.ArrayList<java.lang.Long>();
    }
    this.repeat_id_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getRepeat_id_list() {
    return this.repeat_id_list;
  }

  public TRepeatNode setRepeat_id_list(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> repeat_id_list) {
    this.repeat_id_list = repeat_id_list;
    return this;
  }

  public void unsetRepeat_id_list() {
    this.repeat_id_list = null;
  }

  /** Returns true if field repeat_id_list is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeat_id_list() {
    return this.repeat_id_list != null;
  }

  public void setRepeat_id_listIsSet(boolean value) {
    if (!value) {
      this.repeat_id_list = null;
    }
  }

  public int getGrouping_listSize() {
    return (this.grouping_list == null) ? 0 : this.grouping_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Long>> getGrouping_listIterator() {
    return (this.grouping_list == null) ? null : this.grouping_list.iterator();
  }

  public void addToGrouping_list(java.util.List<java.lang.Long> elem) {
    if (this.grouping_list == null) {
      this.grouping_list = new java.util.ArrayList<java.util.List<java.lang.Long>>();
    }
    this.grouping_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Long>> getGrouping_list() {
    return this.grouping_list;
  }

  public TRepeatNode setGrouping_list(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Long>> grouping_list) {
    this.grouping_list = grouping_list;
    return this;
  }

  public void unsetGrouping_list() {
    this.grouping_list = null;
  }

  /** Returns true if field grouping_list is set (has been assigned a value) and false otherwise */
  public boolean isSetGrouping_list() {
    return this.grouping_list != null;
  }

  public void setGrouping_listIsSet(boolean value) {
    if (!value) {
      this.grouping_list = null;
    }
  }

  public int getAll_slot_idsSize() {
    return (this.all_slot_ids == null) ? 0 : this.all_slot_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getAll_slot_idsIterator() {
    return (this.all_slot_ids == null) ? null : this.all_slot_ids.iterator();
  }

  public void addToAll_slot_ids(int elem) {
    if (this.all_slot_ids == null) {
      this.all_slot_ids = new java.util.HashSet<java.lang.Integer>();
    }
    this.all_slot_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.Integer> getAll_slot_ids() {
    return this.all_slot_ids;
  }

  public TRepeatNode setAll_slot_ids(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> all_slot_ids) {
    this.all_slot_ids = all_slot_ids;
    return this;
  }

  public void unsetAll_slot_ids() {
    this.all_slot_ids = null;
  }

  /** Returns true if field all_slot_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetAll_slot_ids() {
    return this.all_slot_ids != null;
  }

  public void setAll_slot_idsIsSet(boolean value) {
    if (!value) {
      this.all_slot_ids = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case OUTPUT_TUPLE_ID:
      if (value == null) {
        unsetOutput_tuple_id();
      } else {
        setOutput_tuple_id((java.lang.Integer)value);
      }
      break;

    case SLOT_ID_SET_LIST:
      if (value == null) {
        unsetSlot_id_set_list();
      } else {
        setSlot_id_set_list((java.util.List<java.util.Set<java.lang.Integer>>)value);
      }
      break;

    case REPEAT_ID_LIST:
      if (value == null) {
        unsetRepeat_id_list();
      } else {
        setRepeat_id_list((java.util.List<java.lang.Long>)value);
      }
      break;

    case GROUPING_LIST:
      if (value == null) {
        unsetGrouping_list();
      } else {
        setGrouping_list((java.util.List<java.util.List<java.lang.Long>>)value);
      }
      break;

    case ALL_SLOT_IDS:
      if (value == null) {
        unsetAll_slot_ids();
      } else {
        setAll_slot_ids((java.util.Set<java.lang.Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OUTPUT_TUPLE_ID:
      return getOutput_tuple_id();

    case SLOT_ID_SET_LIST:
      return getSlot_id_set_list();

    case REPEAT_ID_LIST:
      return getRepeat_id_list();

    case GROUPING_LIST:
      return getGrouping_list();

    case ALL_SLOT_IDS:
      return getAll_slot_ids();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OUTPUT_TUPLE_ID:
      return isSetOutput_tuple_id();
    case SLOT_ID_SET_LIST:
      return isSetSlot_id_set_list();
    case REPEAT_ID_LIST:
      return isSetRepeat_id_list();
    case GROUPING_LIST:
      return isSetGrouping_list();
    case ALL_SLOT_IDS:
      return isSetAll_slot_ids();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRepeatNode)
      return this.equals((TRepeatNode)that);
    return false;
  }

  public boolean equals(TRepeatNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_output_tuple_id = true;
    boolean that_present_output_tuple_id = true;
    if (this_present_output_tuple_id || that_present_output_tuple_id) {
      if (!(this_present_output_tuple_id && that_present_output_tuple_id))
        return false;
      if (this.output_tuple_id != that.output_tuple_id)
        return false;
    }

    boolean this_present_slot_id_set_list = true && this.isSetSlot_id_set_list();
    boolean that_present_slot_id_set_list = true && that.isSetSlot_id_set_list();
    if (this_present_slot_id_set_list || that_present_slot_id_set_list) {
      if (!(this_present_slot_id_set_list && that_present_slot_id_set_list))
        return false;
      if (!this.slot_id_set_list.equals(that.slot_id_set_list))
        return false;
    }

    boolean this_present_repeat_id_list = true && this.isSetRepeat_id_list();
    boolean that_present_repeat_id_list = true && that.isSetRepeat_id_list();
    if (this_present_repeat_id_list || that_present_repeat_id_list) {
      if (!(this_present_repeat_id_list && that_present_repeat_id_list))
        return false;
      if (!this.repeat_id_list.equals(that.repeat_id_list))
        return false;
    }

    boolean this_present_grouping_list = true && this.isSetGrouping_list();
    boolean that_present_grouping_list = true && that.isSetGrouping_list();
    if (this_present_grouping_list || that_present_grouping_list) {
      if (!(this_present_grouping_list && that_present_grouping_list))
        return false;
      if (!this.grouping_list.equals(that.grouping_list))
        return false;
    }

    boolean this_present_all_slot_ids = true && this.isSetAll_slot_ids();
    boolean that_present_all_slot_ids = true && that.isSetAll_slot_ids();
    if (this_present_all_slot_ids || that_present_all_slot_ids) {
      if (!(this_present_all_slot_ids && that_present_all_slot_ids))
        return false;
      if (!this.all_slot_ids.equals(that.all_slot_ids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + output_tuple_id;

    hashCode = hashCode * 8191 + ((isSetSlot_id_set_list()) ? 131071 : 524287);
    if (isSetSlot_id_set_list())
      hashCode = hashCode * 8191 + slot_id_set_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetRepeat_id_list()) ? 131071 : 524287);
    if (isSetRepeat_id_list())
      hashCode = hashCode * 8191 + repeat_id_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetGrouping_list()) ? 131071 : 524287);
    if (isSetGrouping_list())
      hashCode = hashCode * 8191 + grouping_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetAll_slot_ids()) ? 131071 : 524287);
    if (isSetAll_slot_ids())
      hashCode = hashCode * 8191 + all_slot_ids.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TRepeatNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetOutput_tuple_id(), other.isSetOutput_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_tuple_id, other.output_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSlot_id_set_list(), other.isSetSlot_id_set_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlot_id_set_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slot_id_set_list, other.slot_id_set_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRepeat_id_list(), other.isSetRepeat_id_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeat_id_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeat_id_list, other.repeat_id_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGrouping_list(), other.isSetGrouping_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrouping_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grouping_list, other.grouping_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAll_slot_ids(), other.isSetAll_slot_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAll_slot_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_slot_ids, other.all_slot_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRepeatNode(");
    boolean first = true;

    sb.append("output_tuple_id:");
    sb.append(this.output_tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("slot_id_set_list:");
    if (this.slot_id_set_list == null) {
      sb.append("null");
    } else {
      sb.append(this.slot_id_set_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repeat_id_list:");
    if (this.repeat_id_list == null) {
      sb.append("null");
    } else {
      sb.append(this.repeat_id_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("grouping_list:");
    if (this.grouping_list == null) {
      sb.append("null");
    } else {
      sb.append(this.grouping_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("all_slot_ids:");
    if (this.all_slot_ids == null) {
      sb.append("null");
    } else {
      sb.append(this.all_slot_ids);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'output_tuple_id' because it's a primitive and you chose the non-beans generator.
    if (slot_id_set_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'slot_id_set_list' was not present! Struct: " + toString());
    }
    if (repeat_id_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'repeat_id_list' was not present! Struct: " + toString());
    }
    if (grouping_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'grouping_list' was not present! Struct: " + toString());
    }
    if (all_slot_ids == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'all_slot_ids' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRepeatNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRepeatNodeStandardScheme getScheme() {
      return new TRepeatNodeStandardScheme();
    }
  }

  private static class TRepeatNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRepeatNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TRepeatNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OUTPUT_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.output_tuple_id = iprot.readI32();
              struct.setOutput_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLOT_ID_SET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list482 = iprot.readListBegin();
                struct.slot_id_set_list = new java.util.ArrayList<java.util.Set<java.lang.Integer>>(_list482.size);
                @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> _elem483;
                for (int _i484 = 0; _i484 < _list482.size; ++_i484)
                {
                  {
                    org.apache.thrift.protocol.TSet _set485 = iprot.readSetBegin();
                    _elem483 = new java.util.HashSet<java.lang.Integer>(2*_set485.size);
                    int _elem486;
                    for (int _i487 = 0; _i487 < _set485.size; ++_i487)
                    {
                      _elem486 = iprot.readI32();
                      _elem483.add(_elem486);
                    }
                    iprot.readSetEnd();
                  }
                  struct.slot_id_set_list.add(_elem483);
                }
                iprot.readListEnd();
              }
              struct.setSlot_id_set_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPEAT_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list488 = iprot.readListBegin();
                struct.repeat_id_list = new java.util.ArrayList<java.lang.Long>(_list488.size);
                long _elem489;
                for (int _i490 = 0; _i490 < _list488.size; ++_i490)
                {
                  _elem489 = iprot.readI64();
                  struct.repeat_id_list.add(_elem489);
                }
                iprot.readListEnd();
              }
              struct.setRepeat_id_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GROUPING_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list491 = iprot.readListBegin();
                struct.grouping_list = new java.util.ArrayList<java.util.List<java.lang.Long>>(_list491.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> _elem492;
                for (int _i493 = 0; _i493 < _list491.size; ++_i493)
                {
                  {
                    org.apache.thrift.protocol.TList _list494 = iprot.readListBegin();
                    _elem492 = new java.util.ArrayList<java.lang.Long>(_list494.size);
                    long _elem495;
                    for (int _i496 = 0; _i496 < _list494.size; ++_i496)
                    {
                      _elem495 = iprot.readI64();
                      _elem492.add(_elem495);
                    }
                    iprot.readListEnd();
                  }
                  struct.grouping_list.add(_elem492);
                }
                iprot.readListEnd();
              }
              struct.setGrouping_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALL_SLOT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set497 = iprot.readSetBegin();
                struct.all_slot_ids = new java.util.HashSet<java.lang.Integer>(2*_set497.size);
                int _elem498;
                for (int _i499 = 0; _i499 < _set497.size; ++_i499)
                {
                  _elem498 = iprot.readI32();
                  struct.all_slot_ids.add(_elem498);
                }
                iprot.readSetEnd();
              }
              struct.setAll_slot_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOutput_tuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'output_tuple_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TRepeatNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OUTPUT_TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.output_tuple_id);
      oprot.writeFieldEnd();
      if (struct.slot_id_set_list != null) {
        oprot.writeFieldBegin(SLOT_ID_SET_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.SET, struct.slot_id_set_list.size()));
          for (java.util.Set<java.lang.Integer> _iter500 : struct.slot_id_set_list)
          {
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, _iter500.size()));
              for (int _iter501 : _iter500)
              {
                oprot.writeI32(_iter501);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.repeat_id_list != null) {
        oprot.writeFieldBegin(REPEAT_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.repeat_id_list.size()));
          for (long _iter502 : struct.repeat_id_list)
          {
            oprot.writeI64(_iter502);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.grouping_list != null) {
        oprot.writeFieldBegin(GROUPING_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.grouping_list.size()));
          for (java.util.List<java.lang.Long> _iter503 : struct.grouping_list)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter503.size()));
              for (long _iter504 : _iter503)
              {
                oprot.writeI64(_iter504);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.all_slot_ids != null) {
        oprot.writeFieldBegin(ALL_SLOT_IDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.all_slot_ids.size()));
          for (int _iter505 : struct.all_slot_ids)
          {
            oprot.writeI32(_iter505);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRepeatNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRepeatNodeTupleScheme getScheme() {
      return new TRepeatNodeTupleScheme();
    }
  }

  private static class TRepeatNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRepeatNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRepeatNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.output_tuple_id);
      {
        oprot.writeI32(struct.slot_id_set_list.size());
        for (java.util.Set<java.lang.Integer> _iter506 : struct.slot_id_set_list)
        {
          {
            oprot.writeI32(_iter506.size());
            for (int _iter507 : _iter506)
            {
              oprot.writeI32(_iter507);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.repeat_id_list.size());
        for (long _iter508 : struct.repeat_id_list)
        {
          oprot.writeI64(_iter508);
        }
      }
      {
        oprot.writeI32(struct.grouping_list.size());
        for (java.util.List<java.lang.Long> _iter509 : struct.grouping_list)
        {
          {
            oprot.writeI32(_iter509.size());
            for (long _iter510 : _iter509)
            {
              oprot.writeI64(_iter510);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.all_slot_ids.size());
        for (int _iter511 : struct.all_slot_ids)
        {
          oprot.writeI32(_iter511);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRepeatNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.output_tuple_id = iprot.readI32();
      struct.setOutput_tuple_idIsSet(true);
      {
        org.apache.thrift.protocol.TList _list512 = iprot.readListBegin(org.apache.thrift.protocol.TType.SET);
        struct.slot_id_set_list = new java.util.ArrayList<java.util.Set<java.lang.Integer>>(_list512.size);
        @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> _elem513;
        for (int _i514 = 0; _i514 < _list512.size; ++_i514)
        {
          {
            org.apache.thrift.protocol.TSet _set515 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I32);
            _elem513 = new java.util.HashSet<java.lang.Integer>(2*_set515.size);
            int _elem516;
            for (int _i517 = 0; _i517 < _set515.size; ++_i517)
            {
              _elem516 = iprot.readI32();
              _elem513.add(_elem516);
            }
          }
          struct.slot_id_set_list.add(_elem513);
        }
      }
      struct.setSlot_id_set_listIsSet(true);
      {
        org.apache.thrift.protocol.TList _list518 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
        struct.repeat_id_list = new java.util.ArrayList<java.lang.Long>(_list518.size);
        long _elem519;
        for (int _i520 = 0; _i520 < _list518.size; ++_i520)
        {
          _elem519 = iprot.readI64();
          struct.repeat_id_list.add(_elem519);
        }
      }
      struct.setRepeat_id_listIsSet(true);
      {
        org.apache.thrift.protocol.TList _list521 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
        struct.grouping_list = new java.util.ArrayList<java.util.List<java.lang.Long>>(_list521.size);
        @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> _elem522;
        for (int _i523 = 0; _i523 < _list521.size; ++_i523)
        {
          {
            org.apache.thrift.protocol.TList _list524 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
            _elem522 = new java.util.ArrayList<java.lang.Long>(_list524.size);
            long _elem525;
            for (int _i526 = 0; _i526 < _list524.size; ++_i526)
            {
              _elem525 = iprot.readI64();
              _elem522.add(_elem525);
            }
          }
          struct.grouping_list.add(_elem522);
        }
      }
      struct.setGrouping_listIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set527 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I32);
        struct.all_slot_ids = new java.util.HashSet<java.lang.Integer>(2*_set527.size);
        int _elem528;
        for (int _i529 = 0; _i529 < _set527.size; ++_i529)
        {
          _elem528 = iprot.readI32();
          struct.all_slot_ids.add(_elem528);
        }
      }
      struct.setAll_slot_idsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

