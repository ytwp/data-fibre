/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TDataCacheMetrics implements org.apache.thrift.TBase<TDataCacheMetrics, TDataCacheMetrics._Fields>, java.io.Serializable, Cloneable, Comparable<TDataCacheMetrics> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDataCacheMetrics");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MEM_QUOTA_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_quota_bytes", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MEM_USED_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_used_bytes", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField DISK_QUOTA_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("disk_quota_bytes", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DISK_USED_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("disk_used_bytes", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDataCacheMetricsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDataCacheMetricsTupleSchemeFactory();

  /**
   * 
   * @see TDataCacheStatus
   */
  public @org.apache.thrift.annotation.Nullable TDataCacheStatus status; // optional
  public long mem_quota_bytes; // optional
  public long mem_used_bytes; // optional
  public long disk_quota_bytes; // optional
  public long disk_used_bytes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TDataCacheStatus
     */
    STATUS((short)1, "status"),
    MEM_QUOTA_BYTES((short)2, "mem_quota_bytes"),
    MEM_USED_BYTES((short)3, "mem_used_bytes"),
    DISK_QUOTA_BYTES((short)4, "disk_quota_bytes"),
    DISK_USED_BYTES((short)5, "disk_used_bytes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // MEM_QUOTA_BYTES
          return MEM_QUOTA_BYTES;
        case 3: // MEM_USED_BYTES
          return MEM_USED_BYTES;
        case 4: // DISK_QUOTA_BYTES
          return DISK_QUOTA_BYTES;
        case 5: // DISK_USED_BYTES
          return DISK_USED_BYTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEM_QUOTA_BYTES_ISSET_ID = 0;
  private static final int __MEM_USED_BYTES_ISSET_ID = 1;
  private static final int __DISK_QUOTA_BYTES_ISSET_ID = 2;
  private static final int __DISK_USED_BYTES_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STATUS,_Fields.MEM_QUOTA_BYTES,_Fields.MEM_USED_BYTES,_Fields.DISK_QUOTA_BYTES,_Fields.DISK_USED_BYTES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDataCacheStatus.class)));
    tmpMap.put(_Fields.MEM_QUOTA_BYTES, new org.apache.thrift.meta_data.FieldMetaData("mem_quota_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEM_USED_BYTES, new org.apache.thrift.meta_data.FieldMetaData("mem_used_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISK_QUOTA_BYTES, new org.apache.thrift.meta_data.FieldMetaData("disk_quota_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISK_USED_BYTES, new org.apache.thrift.meta_data.FieldMetaData("disk_used_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDataCacheMetrics.class, metaDataMap);
  }

  public TDataCacheMetrics() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDataCacheMetrics(TDataCacheMetrics other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.mem_quota_bytes = other.mem_quota_bytes;
    this.mem_used_bytes = other.mem_used_bytes;
    this.disk_quota_bytes = other.disk_quota_bytes;
    this.disk_used_bytes = other.disk_used_bytes;
  }

  @Override
  public TDataCacheMetrics deepCopy() {
    return new TDataCacheMetrics(this);
  }

  @Override
  public void clear() {
    this.status = null;
    setMem_quota_bytesIsSet(false);
    this.mem_quota_bytes = 0;
    setMem_used_bytesIsSet(false);
    this.mem_used_bytes = 0;
    setDisk_quota_bytesIsSet(false);
    this.disk_quota_bytes = 0;
    setDisk_used_bytesIsSet(false);
    this.disk_used_bytes = 0;
  }

  /**
   * 
   * @see TDataCacheStatus
   */
  @org.apache.thrift.annotation.Nullable
  public TDataCacheStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see TDataCacheStatus
   */
  public TDataCacheMetrics setStatus(@org.apache.thrift.annotation.Nullable TDataCacheStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public long getMem_quota_bytes() {
    return this.mem_quota_bytes;
  }

  public TDataCacheMetrics setMem_quota_bytes(long mem_quota_bytes) {
    this.mem_quota_bytes = mem_quota_bytes;
    setMem_quota_bytesIsSet(true);
    return this;
  }

  public void unsetMem_quota_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEM_QUOTA_BYTES_ISSET_ID);
  }

  /** Returns true if field mem_quota_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_quota_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEM_QUOTA_BYTES_ISSET_ID);
  }

  public void setMem_quota_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEM_QUOTA_BYTES_ISSET_ID, value);
  }

  public long getMem_used_bytes() {
    return this.mem_used_bytes;
  }

  public TDataCacheMetrics setMem_used_bytes(long mem_used_bytes) {
    this.mem_used_bytes = mem_used_bytes;
    setMem_used_bytesIsSet(true);
    return this;
  }

  public void unsetMem_used_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEM_USED_BYTES_ISSET_ID);
  }

  /** Returns true if field mem_used_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_used_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEM_USED_BYTES_ISSET_ID);
  }

  public void setMem_used_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEM_USED_BYTES_ISSET_ID, value);
  }

  public long getDisk_quota_bytes() {
    return this.disk_quota_bytes;
  }

  public TDataCacheMetrics setDisk_quota_bytes(long disk_quota_bytes) {
    this.disk_quota_bytes = disk_quota_bytes;
    setDisk_quota_bytesIsSet(true);
    return this;
  }

  public void unsetDisk_quota_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISK_QUOTA_BYTES_ISSET_ID);
  }

  /** Returns true if field disk_quota_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetDisk_quota_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISK_QUOTA_BYTES_ISSET_ID);
  }

  public void setDisk_quota_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISK_QUOTA_BYTES_ISSET_ID, value);
  }

  public long getDisk_used_bytes() {
    return this.disk_used_bytes;
  }

  public TDataCacheMetrics setDisk_used_bytes(long disk_used_bytes) {
    this.disk_used_bytes = disk_used_bytes;
    setDisk_used_bytesIsSet(true);
    return this;
  }

  public void unsetDisk_used_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISK_USED_BYTES_ISSET_ID);
  }

  /** Returns true if field disk_used_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetDisk_used_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISK_USED_BYTES_ISSET_ID);
  }

  public void setDisk_used_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISK_USED_BYTES_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((TDataCacheStatus)value);
      }
      break;

    case MEM_QUOTA_BYTES:
      if (value == null) {
        unsetMem_quota_bytes();
      } else {
        setMem_quota_bytes((java.lang.Long)value);
      }
      break;

    case MEM_USED_BYTES:
      if (value == null) {
        unsetMem_used_bytes();
      } else {
        setMem_used_bytes((java.lang.Long)value);
      }
      break;

    case DISK_QUOTA_BYTES:
      if (value == null) {
        unsetDisk_quota_bytes();
      } else {
        setDisk_quota_bytes((java.lang.Long)value);
      }
      break;

    case DISK_USED_BYTES:
      if (value == null) {
        unsetDisk_used_bytes();
      } else {
        setDisk_used_bytes((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case MEM_QUOTA_BYTES:
      return getMem_quota_bytes();

    case MEM_USED_BYTES:
      return getMem_used_bytes();

    case DISK_QUOTA_BYTES:
      return getDisk_quota_bytes();

    case DISK_USED_BYTES:
      return getDisk_used_bytes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case MEM_QUOTA_BYTES:
      return isSetMem_quota_bytes();
    case MEM_USED_BYTES:
      return isSetMem_used_bytes();
    case DISK_QUOTA_BYTES:
      return isSetDisk_quota_bytes();
    case DISK_USED_BYTES:
      return isSetDisk_used_bytes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TDataCacheMetrics)
      return this.equals((TDataCacheMetrics)that);
    return false;
  }

  public boolean equals(TDataCacheMetrics that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_mem_quota_bytes = true && this.isSetMem_quota_bytes();
    boolean that_present_mem_quota_bytes = true && that.isSetMem_quota_bytes();
    if (this_present_mem_quota_bytes || that_present_mem_quota_bytes) {
      if (!(this_present_mem_quota_bytes && that_present_mem_quota_bytes))
        return false;
      if (this.mem_quota_bytes != that.mem_quota_bytes)
        return false;
    }

    boolean this_present_mem_used_bytes = true && this.isSetMem_used_bytes();
    boolean that_present_mem_used_bytes = true && that.isSetMem_used_bytes();
    if (this_present_mem_used_bytes || that_present_mem_used_bytes) {
      if (!(this_present_mem_used_bytes && that_present_mem_used_bytes))
        return false;
      if (this.mem_used_bytes != that.mem_used_bytes)
        return false;
    }

    boolean this_present_disk_quota_bytes = true && this.isSetDisk_quota_bytes();
    boolean that_present_disk_quota_bytes = true && that.isSetDisk_quota_bytes();
    if (this_present_disk_quota_bytes || that_present_disk_quota_bytes) {
      if (!(this_present_disk_quota_bytes && that_present_disk_quota_bytes))
        return false;
      if (this.disk_quota_bytes != that.disk_quota_bytes)
        return false;
    }

    boolean this_present_disk_used_bytes = true && this.isSetDisk_used_bytes();
    boolean that_present_disk_used_bytes = true && that.isSetDisk_used_bytes();
    if (this_present_disk_used_bytes || that_present_disk_used_bytes) {
      if (!(this_present_disk_used_bytes && that_present_disk_used_bytes))
        return false;
      if (this.disk_used_bytes != that.disk_used_bytes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.getValue();

    hashCode = hashCode * 8191 + ((isSetMem_quota_bytes()) ? 131071 : 524287);
    if (isSetMem_quota_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mem_quota_bytes);

    hashCode = hashCode * 8191 + ((isSetMem_used_bytes()) ? 131071 : 524287);
    if (isSetMem_used_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mem_used_bytes);

    hashCode = hashCode * 8191 + ((isSetDisk_quota_bytes()) ? 131071 : 524287);
    if (isSetDisk_quota_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(disk_quota_bytes);

    hashCode = hashCode * 8191 + ((isSetDisk_used_bytes()) ? 131071 : 524287);
    if (isSetDisk_used_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(disk_used_bytes);

    return hashCode;
  }

  @Override
  public int compareTo(TDataCacheMetrics other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMem_quota_bytes(), other.isSetMem_quota_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_quota_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_quota_bytes, other.mem_quota_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMem_used_bytes(), other.isSetMem_used_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_used_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_used_bytes, other.mem_used_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDisk_quota_bytes(), other.isSetDisk_quota_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisk_quota_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disk_quota_bytes, other.disk_quota_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDisk_used_bytes(), other.isSetDisk_used_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisk_used_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disk_used_bytes, other.disk_used_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDataCacheMetrics(");
    boolean first = true;

    if (isSetStatus()) {
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetMem_quota_bytes()) {
      if (!first) sb.append(", ");
      sb.append("mem_quota_bytes:");
      sb.append(this.mem_quota_bytes);
      first = false;
    }
    if (isSetMem_used_bytes()) {
      if (!first) sb.append(", ");
      sb.append("mem_used_bytes:");
      sb.append(this.mem_used_bytes);
      first = false;
    }
    if (isSetDisk_quota_bytes()) {
      if (!first) sb.append(", ");
      sb.append("disk_quota_bytes:");
      sb.append(this.disk_quota_bytes);
      first = false;
    }
    if (isSetDisk_used_bytes()) {
      if (!first) sb.append(", ");
      sb.append("disk_used_bytes:");
      sb.append(this.disk_used_bytes);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDataCacheMetricsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDataCacheMetricsStandardScheme getScheme() {
      return new TDataCacheMetricsStandardScheme();
    }
  }

  private static class TDataCacheMetricsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDataCacheMetrics> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TDataCacheMetrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = io.datafibre.fibre.thrift.TDataCacheStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEM_QUOTA_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem_quota_bytes = iprot.readI64();
              struct.setMem_quota_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEM_USED_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem_used_bytes = iprot.readI64();
              struct.setMem_used_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISK_QUOTA_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.disk_quota_bytes = iprot.readI64();
              struct.setDisk_quota_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISK_USED_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.disk_used_bytes = iprot.readI64();
              struct.setDisk_used_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TDataCacheMetrics struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMem_quota_bytes()) {
        oprot.writeFieldBegin(MEM_QUOTA_BYTES_FIELD_DESC);
        oprot.writeI64(struct.mem_quota_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMem_used_bytes()) {
        oprot.writeFieldBegin(MEM_USED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.mem_used_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisk_quota_bytes()) {
        oprot.writeFieldBegin(DISK_QUOTA_BYTES_FIELD_DESC);
        oprot.writeI64(struct.disk_quota_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisk_used_bytes()) {
        oprot.writeFieldBegin(DISK_USED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.disk_used_bytes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDataCacheMetricsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDataCacheMetricsTupleScheme getScheme() {
      return new TDataCacheMetricsTupleScheme();
    }
  }

  private static class TDataCacheMetricsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDataCacheMetrics> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDataCacheMetrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetMem_quota_bytes()) {
        optionals.set(1);
      }
      if (struct.isSetMem_used_bytes()) {
        optionals.set(2);
      }
      if (struct.isSetDisk_quota_bytes()) {
        optionals.set(3);
      }
      if (struct.isSetDisk_used_bytes()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetMem_quota_bytes()) {
        oprot.writeI64(struct.mem_quota_bytes);
      }
      if (struct.isSetMem_used_bytes()) {
        oprot.writeI64(struct.mem_used_bytes);
      }
      if (struct.isSetDisk_quota_bytes()) {
        oprot.writeI64(struct.disk_quota_bytes);
      }
      if (struct.isSetDisk_used_bytes()) {
        oprot.writeI64(struct.disk_used_bytes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDataCacheMetrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.status = io.datafibre.fibre.thrift.TDataCacheStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mem_quota_bytes = iprot.readI64();
        struct.setMem_quota_bytesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mem_used_bytes = iprot.readI64();
        struct.setMem_used_bytesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.disk_quota_bytes = iprot.readI64();
        struct.setDisk_quota_bytesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.disk_used_bytes = iprot.readI64();
        struct.setDisk_used_bytesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

