/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TMVMaintenanceTasks implements org.apache.thrift.TBase<TMVMaintenanceTasks, TMVMaintenanceTasks._Fields>, java.io.Serializable, Cloneable, Comparable<TMVMaintenanceTasks> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMVMaintenanceTasks");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("task_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MV_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("mv_name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("db_id", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField MV_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mv_id", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("job_id", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("task_id", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("query_id", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField START_MAINTENANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("start_maintenance", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField STOP_MAINTENANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("stop_maintenance", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField START_EPOCH_FIELD_DESC = new org.apache.thrift.protocol.TField("start_epoch", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField COMMIT_EPOCH_FIELD_DESC = new org.apache.thrift.protocol.TField("commit_epoch", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField ABORT_EPOCH_FIELD_DESC = new org.apache.thrift.protocol.TField("abort_epoch", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField REPORT_EPOCH_FIELD_DESC = new org.apache.thrift.protocol.TField("report_epoch", org.apache.thrift.protocol.TType.STRUCT, (short)31);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMVMaintenanceTasksStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMVMaintenanceTasksTupleSchemeFactory();

  /**
   * 
   * @see com.starrocks.thrift.TAgentServiceVersion
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TAgentServiceVersion protocol_version; // optional
  /**
   * 
   * @see MVTaskType
   */
  public @org.apache.thrift.annotation.Nullable MVTaskType task_type; // optional
  public long signature; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String mv_name; // optional
  public long db_id; // optional
  public long mv_id; // optional
  public long job_id; // optional
  public long task_id; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId query_id; // optional
  public @org.apache.thrift.annotation.Nullable TMVMaintenanceStartTask start_maintenance; // optional
  public @org.apache.thrift.annotation.Nullable TMVMaintenanceStopTask stop_maintenance; // optional
  public @org.apache.thrift.annotation.Nullable TMVStartEpochTask start_epoch; // optional
  public @org.apache.thrift.annotation.Nullable TMVCommitEpochTask commit_epoch; // optional
  public @org.apache.thrift.annotation.Nullable TMVAbortEpochTask abort_epoch; // optional
  public @org.apache.thrift.annotation.Nullable TMVReportEpochTask report_epoch; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.starrocks.thrift.TAgentServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    /**
     * 
     * @see MVTaskType
     */
    TASK_TYPE((short)2, "task_type"),
    SIGNATURE((short)3, "signature"),
    DB_NAME((short)4, "db_name"),
    MV_NAME((short)5, "mv_name"),
    DB_ID((short)6, "db_id"),
    MV_ID((short)7, "mv_id"),
    JOB_ID((short)8, "job_id"),
    TASK_ID((short)9, "task_id"),
    QUERY_ID((short)10, "query_id"),
    START_MAINTENANCE((short)11, "start_maintenance"),
    STOP_MAINTENANCE((short)12, "stop_maintenance"),
    START_EPOCH((short)13, "start_epoch"),
    COMMIT_EPOCH((short)14, "commit_epoch"),
    ABORT_EPOCH((short)15, "abort_epoch"),
    REPORT_EPOCH((short)31, "report_epoch");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // TASK_TYPE
          return TASK_TYPE;
        case 3: // SIGNATURE
          return SIGNATURE;
        case 4: // DB_NAME
          return DB_NAME;
        case 5: // MV_NAME
          return MV_NAME;
        case 6: // DB_ID
          return DB_ID;
        case 7: // MV_ID
          return MV_ID;
        case 8: // JOB_ID
          return JOB_ID;
        case 9: // TASK_ID
          return TASK_ID;
        case 10: // QUERY_ID
          return QUERY_ID;
        case 11: // START_MAINTENANCE
          return START_MAINTENANCE;
        case 12: // STOP_MAINTENANCE
          return STOP_MAINTENANCE;
        case 13: // START_EPOCH
          return START_EPOCH;
        case 14: // COMMIT_EPOCH
          return COMMIT_EPOCH;
        case 15: // ABORT_EPOCH
          return ABORT_EPOCH;
        case 31: // REPORT_EPOCH
          return REPORT_EPOCH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIGNATURE_ISSET_ID = 0;
  private static final int __DB_ID_ISSET_ID = 1;
  private static final int __MV_ID_ISSET_ID = 2;
  private static final int __JOB_ID_ISSET_ID = 3;
  private static final int __TASK_ID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PROTOCOL_VERSION,_Fields.TASK_TYPE,_Fields.SIGNATURE,_Fields.DB_NAME,_Fields.MV_NAME,_Fields.DB_ID,_Fields.MV_ID,_Fields.JOB_ID,_Fields.TASK_ID,_Fields.QUERY_ID,_Fields.START_MAINTENANCE,_Fields.STOP_MAINTENANCE,_Fields.START_EPOCH,_Fields.COMMIT_EPOCH,_Fields.ABORT_EPOCH,_Fields.REPORT_EPOCH};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TAgentServiceVersion.class)));
    tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("task_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MVTaskType.class)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MV_NAME, new org.apache.thrift.meta_data.FieldMetaData("mv_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_ID, new org.apache.thrift.meta_data.FieldMetaData("db_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MV_ID, new org.apache.thrift.meta_data.FieldMetaData("mv_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("job_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("task_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("query_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.START_MAINTENANCE, new org.apache.thrift.meta_data.FieldMetaData("start_maintenance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMVMaintenanceStartTask.class)));
    tmpMap.put(_Fields.STOP_MAINTENANCE, new org.apache.thrift.meta_data.FieldMetaData("stop_maintenance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMVMaintenanceStopTask.class)));
    tmpMap.put(_Fields.START_EPOCH, new org.apache.thrift.meta_data.FieldMetaData("start_epoch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMVStartEpochTask.class)));
    tmpMap.put(_Fields.COMMIT_EPOCH, new org.apache.thrift.meta_data.FieldMetaData("commit_epoch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMVCommitEpochTask.class)));
    tmpMap.put(_Fields.ABORT_EPOCH, new org.apache.thrift.meta_data.FieldMetaData("abort_epoch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMVAbortEpochTask.class)));
    tmpMap.put(_Fields.REPORT_EPOCH, new org.apache.thrift.meta_data.FieldMetaData("report_epoch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMVReportEpochTask.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMVMaintenanceTasks.class, metaDataMap);
  }

  public TMVMaintenanceTasks() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMVMaintenanceTasks(TMVMaintenanceTasks other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocol_version()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetTask_type()) {
      this.task_type = other.task_type;
    }
    this.signature = other.signature;
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    if (other.isSetMv_name()) {
      this.mv_name = other.mv_name;
    }
    this.db_id = other.db_id;
    this.mv_id = other.mv_id;
    this.job_id = other.job_id;
    this.task_id = other.task_id;
    if (other.isSetQuery_id()) {
      this.query_id = new com.starrocks.thrift.TUniqueId(other.query_id);
    }
    if (other.isSetStart_maintenance()) {
      this.start_maintenance = new TMVMaintenanceStartTask(other.start_maintenance);
    }
    if (other.isSetStop_maintenance()) {
      this.stop_maintenance = new TMVMaintenanceStopTask(other.stop_maintenance);
    }
    if (other.isSetStart_epoch()) {
      this.start_epoch = new TMVStartEpochTask(other.start_epoch);
    }
    if (other.isSetCommit_epoch()) {
      this.commit_epoch = new TMVCommitEpochTask(other.commit_epoch);
    }
    if (other.isSetAbort_epoch()) {
      this.abort_epoch = new TMVAbortEpochTask(other.abort_epoch);
    }
    if (other.isSetReport_epoch()) {
      this.report_epoch = new TMVReportEpochTask(other.report_epoch);
    }
  }

  @Override
  public TMVMaintenanceTasks deepCopy() {
    return new TMVMaintenanceTasks(this);
  }

  @Override
  public void clear() {
    this.protocol_version = null;
    this.task_type = null;
    setSignatureIsSet(false);
    this.signature = 0;
    this.db_name = null;
    this.mv_name = null;
    setDb_idIsSet(false);
    this.db_id = 0;
    setMv_idIsSet(false);
    this.mv_id = 0;
    setJob_idIsSet(false);
    this.job_id = 0;
    setTask_idIsSet(false);
    this.task_id = 0;
    this.query_id = null;
    this.start_maintenance = null;
    this.stop_maintenance = null;
    this.start_epoch = null;
    this.commit_epoch = null;
    this.abort_epoch = null;
    this.report_epoch = null;
  }

  /**
   * 
   * @see com.starrocks.thrift.TAgentServiceVersion
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TAgentServiceVersion getProtocol_version() {
    return this.protocol_version;
  }

  /**
   * 
   * @see com.starrocks.thrift.TAgentServiceVersion
   */
  public TMVMaintenanceTasks setProtocol_version(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TAgentServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocol_version() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol_version() {
    return this.protocol_version != null;
  }

  public void setProtocol_versionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  /**
   * 
   * @see MVTaskType
   */
  @org.apache.thrift.annotation.Nullable
  public MVTaskType getTask_type() {
    return this.task_type;
  }

  /**
   * 
   * @see MVTaskType
   */
  public TMVMaintenanceTasks setTask_type(@org.apache.thrift.annotation.Nullable MVTaskType task_type) {
    this.task_type = task_type;
    return this;
  }

  public void unsetTask_type() {
    this.task_type = null;
  }

  /** Returns true if field task_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_type() {
    return this.task_type != null;
  }

  public void setTask_typeIsSet(boolean value) {
    if (!value) {
      this.task_type = null;
    }
  }

  public long getSignature() {
    return this.signature;
  }

  public TMVMaintenanceTasks setSignature(long signature) {
    this.signature = signature;
    setSignatureIsSet(true);
    return this;
  }

  public void unsetSignature() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIGNATURE_ISSET_ID);
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIGNATURE_ISSET_ID);
  }

  public void setSignatureIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIGNATURE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb_name() {
    return this.db_name;
  }

  public TMVMaintenanceTasks setDb_name(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMv_name() {
    return this.mv_name;
  }

  public TMVMaintenanceTasks setMv_name(@org.apache.thrift.annotation.Nullable java.lang.String mv_name) {
    this.mv_name = mv_name;
    return this;
  }

  public void unsetMv_name() {
    this.mv_name = null;
  }

  /** Returns true if field mv_name is set (has been assigned a value) and false otherwise */
  public boolean isSetMv_name() {
    return this.mv_name != null;
  }

  public void setMv_nameIsSet(boolean value) {
    if (!value) {
      this.mv_name = null;
    }
  }

  public long getDb_id() {
    return this.db_id;
  }

  public TMVMaintenanceTasks setDb_id(long db_id) {
    this.db_id = db_id;
    setDb_idIsSet(true);
    return this;
  }

  public void unsetDb_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  /** Returns true if field db_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DB_ID_ISSET_ID);
  }

  public void setDb_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DB_ID_ISSET_ID, value);
  }

  public long getMv_id() {
    return this.mv_id;
  }

  public TMVMaintenanceTasks setMv_id(long mv_id) {
    this.mv_id = mv_id;
    setMv_idIsSet(true);
    return this;
  }

  public void unsetMv_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MV_ID_ISSET_ID);
  }

  /** Returns true if field mv_id is set (has been assigned a value) and false otherwise */
  public boolean isSetMv_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MV_ID_ISSET_ID);
  }

  public void setMv_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MV_ID_ISSET_ID, value);
  }

  public long getJob_id() {
    return this.job_id;
  }

  public TMVMaintenanceTasks setJob_id(long job_id) {
    this.job_id = job_id;
    setJob_idIsSet(true);
    return this;
  }

  public void unsetJob_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOB_ID_ISSET_ID);
  }

  /** Returns true if field job_id is set (has been assigned a value) and false otherwise */
  public boolean isSetJob_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOB_ID_ISSET_ID);
  }

  public void setJob_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOB_ID_ISSET_ID, value);
  }

  public long getTask_id() {
    return this.task_id;
  }

  public TMVMaintenanceTasks setTask_id(long task_id) {
    this.task_id = task_id;
    setTask_idIsSet(true);
    return this;
  }

  public void unsetTask_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASK_ID_ISSET_ID);
  }

  /** Returns true if field task_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASK_ID_ISSET_ID);
  }

  public void setTask_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASK_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TUniqueId getQuery_id() {
    return this.query_id;
  }

  public TMVMaintenanceTasks setQuery_id(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TUniqueId query_id) {
    this.query_id = query_id;
    return this;
  }

  public void unsetQuery_id() {
    this.query_id = null;
  }

  /** Returns true if field query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_id() {
    return this.query_id != null;
  }

  public void setQuery_idIsSet(boolean value) {
    if (!value) {
      this.query_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TMVMaintenanceStartTask getStart_maintenance() {
    return this.start_maintenance;
  }

  public TMVMaintenanceTasks setStart_maintenance(@org.apache.thrift.annotation.Nullable TMVMaintenanceStartTask start_maintenance) {
    this.start_maintenance = start_maintenance;
    return this;
  }

  public void unsetStart_maintenance() {
    this.start_maintenance = null;
  }

  /** Returns true if field start_maintenance is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_maintenance() {
    return this.start_maintenance != null;
  }

  public void setStart_maintenanceIsSet(boolean value) {
    if (!value) {
      this.start_maintenance = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TMVMaintenanceStopTask getStop_maintenance() {
    return this.stop_maintenance;
  }

  public TMVMaintenanceTasks setStop_maintenance(@org.apache.thrift.annotation.Nullable TMVMaintenanceStopTask stop_maintenance) {
    this.stop_maintenance = stop_maintenance;
    return this;
  }

  public void unsetStop_maintenance() {
    this.stop_maintenance = null;
  }

  /** Returns true if field stop_maintenance is set (has been assigned a value) and false otherwise */
  public boolean isSetStop_maintenance() {
    return this.stop_maintenance != null;
  }

  public void setStop_maintenanceIsSet(boolean value) {
    if (!value) {
      this.stop_maintenance = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TMVStartEpochTask getStart_epoch() {
    return this.start_epoch;
  }

  public TMVMaintenanceTasks setStart_epoch(@org.apache.thrift.annotation.Nullable TMVStartEpochTask start_epoch) {
    this.start_epoch = start_epoch;
    return this;
  }

  public void unsetStart_epoch() {
    this.start_epoch = null;
  }

  /** Returns true if field start_epoch is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_epoch() {
    return this.start_epoch != null;
  }

  public void setStart_epochIsSet(boolean value) {
    if (!value) {
      this.start_epoch = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TMVCommitEpochTask getCommit_epoch() {
    return this.commit_epoch;
  }

  public TMVMaintenanceTasks setCommit_epoch(@org.apache.thrift.annotation.Nullable TMVCommitEpochTask commit_epoch) {
    this.commit_epoch = commit_epoch;
    return this;
  }

  public void unsetCommit_epoch() {
    this.commit_epoch = null;
  }

  /** Returns true if field commit_epoch is set (has been assigned a value) and false otherwise */
  public boolean isSetCommit_epoch() {
    return this.commit_epoch != null;
  }

  public void setCommit_epochIsSet(boolean value) {
    if (!value) {
      this.commit_epoch = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TMVAbortEpochTask getAbort_epoch() {
    return this.abort_epoch;
  }

  public TMVMaintenanceTasks setAbort_epoch(@org.apache.thrift.annotation.Nullable TMVAbortEpochTask abort_epoch) {
    this.abort_epoch = abort_epoch;
    return this;
  }

  public void unsetAbort_epoch() {
    this.abort_epoch = null;
  }

  /** Returns true if field abort_epoch is set (has been assigned a value) and false otherwise */
  public boolean isSetAbort_epoch() {
    return this.abort_epoch != null;
  }

  public void setAbort_epochIsSet(boolean value) {
    if (!value) {
      this.abort_epoch = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TMVReportEpochTask getReport_epoch() {
    return this.report_epoch;
  }

  public TMVMaintenanceTasks setReport_epoch(@org.apache.thrift.annotation.Nullable TMVReportEpochTask report_epoch) {
    this.report_epoch = report_epoch;
    return this;
  }

  public void unsetReport_epoch() {
    this.report_epoch = null;
  }

  /** Returns true if field report_epoch is set (has been assigned a value) and false otherwise */
  public boolean isSetReport_epoch() {
    return this.report_epoch != null;
  }

  public void setReport_epochIsSet(boolean value) {
    if (!value) {
      this.report_epoch = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocol_version();
      } else {
        setProtocol_version((com.starrocks.thrift.TAgentServiceVersion)value);
      }
      break;

    case TASK_TYPE:
      if (value == null) {
        unsetTask_type();
      } else {
        setTask_type((MVTaskType)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((java.lang.Long)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((java.lang.String)value);
      }
      break;

    case MV_NAME:
      if (value == null) {
        unsetMv_name();
      } else {
        setMv_name((java.lang.String)value);
      }
      break;

    case DB_ID:
      if (value == null) {
        unsetDb_id();
      } else {
        setDb_id((java.lang.Long)value);
      }
      break;

    case MV_ID:
      if (value == null) {
        unsetMv_id();
      } else {
        setMv_id((java.lang.Long)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJob_id();
      } else {
        setJob_id((java.lang.Long)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTask_id();
      } else {
        setTask_id((java.lang.Long)value);
      }
      break;

    case QUERY_ID:
      if (value == null) {
        unsetQuery_id();
      } else {
        setQuery_id((com.starrocks.thrift.TUniqueId)value);
      }
      break;

    case START_MAINTENANCE:
      if (value == null) {
        unsetStart_maintenance();
      } else {
        setStart_maintenance((TMVMaintenanceStartTask)value);
      }
      break;

    case STOP_MAINTENANCE:
      if (value == null) {
        unsetStop_maintenance();
      } else {
        setStop_maintenance((TMVMaintenanceStopTask)value);
      }
      break;

    case START_EPOCH:
      if (value == null) {
        unsetStart_epoch();
      } else {
        setStart_epoch((TMVStartEpochTask)value);
      }
      break;

    case COMMIT_EPOCH:
      if (value == null) {
        unsetCommit_epoch();
      } else {
        setCommit_epoch((TMVCommitEpochTask)value);
      }
      break;

    case ABORT_EPOCH:
      if (value == null) {
        unsetAbort_epoch();
      } else {
        setAbort_epoch((TMVAbortEpochTask)value);
      }
      break;

    case REPORT_EPOCH:
      if (value == null) {
        unsetReport_epoch();
      } else {
        setReport_epoch((TMVReportEpochTask)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocol_version();

    case TASK_TYPE:
      return getTask_type();

    case SIGNATURE:
      return getSignature();

    case DB_NAME:
      return getDb_name();

    case MV_NAME:
      return getMv_name();

    case DB_ID:
      return getDb_id();

    case MV_ID:
      return getMv_id();

    case JOB_ID:
      return getJob_id();

    case TASK_ID:
      return getTask_id();

    case QUERY_ID:
      return getQuery_id();

    case START_MAINTENANCE:
      return getStart_maintenance();

    case STOP_MAINTENANCE:
      return getStop_maintenance();

    case START_EPOCH:
      return getStart_epoch();

    case COMMIT_EPOCH:
      return getCommit_epoch();

    case ABORT_EPOCH:
      return getAbort_epoch();

    case REPORT_EPOCH:
      return getReport_epoch();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocol_version();
    case TASK_TYPE:
      return isSetTask_type();
    case SIGNATURE:
      return isSetSignature();
    case DB_NAME:
      return isSetDb_name();
    case MV_NAME:
      return isSetMv_name();
    case DB_ID:
      return isSetDb_id();
    case MV_ID:
      return isSetMv_id();
    case JOB_ID:
      return isSetJob_id();
    case TASK_ID:
      return isSetTask_id();
    case QUERY_ID:
      return isSetQuery_id();
    case START_MAINTENANCE:
      return isSetStart_maintenance();
    case STOP_MAINTENANCE:
      return isSetStop_maintenance();
    case START_EPOCH:
      return isSetStart_epoch();
    case COMMIT_EPOCH:
      return isSetCommit_epoch();
    case ABORT_EPOCH:
      return isSetAbort_epoch();
    case REPORT_EPOCH:
      return isSetReport_epoch();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TMVMaintenanceTasks)
      return this.equals((TMVMaintenanceTasks)that);
    return false;
  }

  public boolean equals(TMVMaintenanceTasks that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_protocol_version = true && this.isSetProtocol_version();
    boolean that_present_protocol_version = true && that.isSetProtocol_version();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_task_type = true && this.isSetTask_type();
    boolean that_present_task_type = true && that.isSetTask_type();
    if (this_present_task_type || that_present_task_type) {
      if (!(this_present_task_type && that_present_task_type))
        return false;
      if (!this.task_type.equals(that.task_type))
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (this.signature != that.signature)
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_mv_name = true && this.isSetMv_name();
    boolean that_present_mv_name = true && that.isSetMv_name();
    if (this_present_mv_name || that_present_mv_name) {
      if (!(this_present_mv_name && that_present_mv_name))
        return false;
      if (!this.mv_name.equals(that.mv_name))
        return false;
    }

    boolean this_present_db_id = true && this.isSetDb_id();
    boolean that_present_db_id = true && that.isSetDb_id();
    if (this_present_db_id || that_present_db_id) {
      if (!(this_present_db_id && that_present_db_id))
        return false;
      if (this.db_id != that.db_id)
        return false;
    }

    boolean this_present_mv_id = true && this.isSetMv_id();
    boolean that_present_mv_id = true && that.isSetMv_id();
    if (this_present_mv_id || that_present_mv_id) {
      if (!(this_present_mv_id && that_present_mv_id))
        return false;
      if (this.mv_id != that.mv_id)
        return false;
    }

    boolean this_present_job_id = true && this.isSetJob_id();
    boolean that_present_job_id = true && that.isSetJob_id();
    if (this_present_job_id || that_present_job_id) {
      if (!(this_present_job_id && that_present_job_id))
        return false;
      if (this.job_id != that.job_id)
        return false;
    }

    boolean this_present_task_id = true && this.isSetTask_id();
    boolean that_present_task_id = true && that.isSetTask_id();
    if (this_present_task_id || that_present_task_id) {
      if (!(this_present_task_id && that_present_task_id))
        return false;
      if (this.task_id != that.task_id)
        return false;
    }

    boolean this_present_query_id = true && this.isSetQuery_id();
    boolean that_present_query_id = true && that.isSetQuery_id();
    if (this_present_query_id || that_present_query_id) {
      if (!(this_present_query_id && that_present_query_id))
        return false;
      if (!this.query_id.equals(that.query_id))
        return false;
    }

    boolean this_present_start_maintenance = true && this.isSetStart_maintenance();
    boolean that_present_start_maintenance = true && that.isSetStart_maintenance();
    if (this_present_start_maintenance || that_present_start_maintenance) {
      if (!(this_present_start_maintenance && that_present_start_maintenance))
        return false;
      if (!this.start_maintenance.equals(that.start_maintenance))
        return false;
    }

    boolean this_present_stop_maintenance = true && this.isSetStop_maintenance();
    boolean that_present_stop_maintenance = true && that.isSetStop_maintenance();
    if (this_present_stop_maintenance || that_present_stop_maintenance) {
      if (!(this_present_stop_maintenance && that_present_stop_maintenance))
        return false;
      if (!this.stop_maintenance.equals(that.stop_maintenance))
        return false;
    }

    boolean this_present_start_epoch = true && this.isSetStart_epoch();
    boolean that_present_start_epoch = true && that.isSetStart_epoch();
    if (this_present_start_epoch || that_present_start_epoch) {
      if (!(this_present_start_epoch && that_present_start_epoch))
        return false;
      if (!this.start_epoch.equals(that.start_epoch))
        return false;
    }

    boolean this_present_commit_epoch = true && this.isSetCommit_epoch();
    boolean that_present_commit_epoch = true && that.isSetCommit_epoch();
    if (this_present_commit_epoch || that_present_commit_epoch) {
      if (!(this_present_commit_epoch && that_present_commit_epoch))
        return false;
      if (!this.commit_epoch.equals(that.commit_epoch))
        return false;
    }

    boolean this_present_abort_epoch = true && this.isSetAbort_epoch();
    boolean that_present_abort_epoch = true && that.isSetAbort_epoch();
    if (this_present_abort_epoch || that_present_abort_epoch) {
      if (!(this_present_abort_epoch && that_present_abort_epoch))
        return false;
      if (!this.abort_epoch.equals(that.abort_epoch))
        return false;
    }

    boolean this_present_report_epoch = true && this.isSetReport_epoch();
    boolean that_present_report_epoch = true && that.isSetReport_epoch();
    if (this_present_report_epoch || that_present_report_epoch) {
      if (!(this_present_report_epoch && that_present_report_epoch))
        return false;
      if (!this.report_epoch.equals(that.report_epoch))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProtocol_version()) ? 131071 : 524287);
    if (isSetProtocol_version())
      hashCode = hashCode * 8191 + protocol_version.getValue();

    hashCode = hashCode * 8191 + ((isSetTask_type()) ? 131071 : 524287);
    if (isSetTask_type())
      hashCode = hashCode * 8191 + task_type.getValue();

    hashCode = hashCode * 8191 + ((isSetSignature()) ? 131071 : 524287);
    if (isSetSignature())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(signature);

    hashCode = hashCode * 8191 + ((isSetDb_name()) ? 131071 : 524287);
    if (isSetDb_name())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetMv_name()) ? 131071 : 524287);
    if (isSetMv_name())
      hashCode = hashCode * 8191 + mv_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb_id()) ? 131071 : 524287);
    if (isSetDb_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(db_id);

    hashCode = hashCode * 8191 + ((isSetMv_id()) ? 131071 : 524287);
    if (isSetMv_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mv_id);

    hashCode = hashCode * 8191 + ((isSetJob_id()) ? 131071 : 524287);
    if (isSetJob_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(job_id);

    hashCode = hashCode * 8191 + ((isSetTask_id()) ? 131071 : 524287);
    if (isSetTask_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(task_id);

    hashCode = hashCode * 8191 + ((isSetQuery_id()) ? 131071 : 524287);
    if (isSetQuery_id())
      hashCode = hashCode * 8191 + query_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetStart_maintenance()) ? 131071 : 524287);
    if (isSetStart_maintenance())
      hashCode = hashCode * 8191 + start_maintenance.hashCode();

    hashCode = hashCode * 8191 + ((isSetStop_maintenance()) ? 131071 : 524287);
    if (isSetStop_maintenance())
      hashCode = hashCode * 8191 + stop_maintenance.hashCode();

    hashCode = hashCode * 8191 + ((isSetStart_epoch()) ? 131071 : 524287);
    if (isSetStart_epoch())
      hashCode = hashCode * 8191 + start_epoch.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommit_epoch()) ? 131071 : 524287);
    if (isSetCommit_epoch())
      hashCode = hashCode * 8191 + commit_epoch.hashCode();

    hashCode = hashCode * 8191 + ((isSetAbort_epoch()) ? 131071 : 524287);
    if (isSetAbort_epoch())
      hashCode = hashCode * 8191 + abort_epoch.hashCode();

    hashCode = hashCode * 8191 + ((isSetReport_epoch()) ? 131071 : 524287);
    if (isSetReport_epoch())
      hashCode = hashCode * 8191 + report_epoch.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TMVMaintenanceTasks other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetProtocol_version(), other.isSetProtocol_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, other.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTask_type(), other.isSetTask_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_type, other.task_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSignature(), other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb_name(), other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMv_name(), other.isSetMv_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMv_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mv_name, other.mv_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb_id(), other.isSetDb_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_id, other.db_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMv_id(), other.isSetMv_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMv_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mv_id, other.mv_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJob_id(), other.isSetJob_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job_id, other.job_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTask_id(), other.isSetTask_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_id, other.task_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_id(), other.isSetQuery_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_id, other.query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStart_maintenance(), other.isSetStart_maintenance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_maintenance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_maintenance, other.start_maintenance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStop_maintenance(), other.isSetStop_maintenance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStop_maintenance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stop_maintenance, other.stop_maintenance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStart_epoch(), other.isSetStart_epoch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_epoch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_epoch, other.start_epoch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCommit_epoch(), other.isSetCommit_epoch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommit_epoch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commit_epoch, other.commit_epoch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAbort_epoch(), other.isSetAbort_epoch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbort_epoch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abort_epoch, other.abort_epoch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReport_epoch(), other.isSetReport_epoch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReport_epoch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.report_epoch, other.report_epoch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMVMaintenanceTasks(");
    boolean first = true;

    if (isSetProtocol_version()) {
      sb.append("protocol_version:");
      if (this.protocol_version == null) {
        sb.append("null");
      } else {
        sb.append(this.protocol_version);
      }
      first = false;
    }
    if (isSetTask_type()) {
      if (!first) sb.append(", ");
      sb.append("task_type:");
      if (this.task_type == null) {
        sb.append("null");
      } else {
        sb.append(this.task_type);
      }
      first = false;
    }
    if (isSetSignature()) {
      if (!first) sb.append(", ");
      sb.append("signature:");
      sb.append(this.signature);
      first = false;
    }
    if (isSetDb_name()) {
      if (!first) sb.append(", ");
      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
    }
    if (isSetMv_name()) {
      if (!first) sb.append(", ");
      sb.append("mv_name:");
      if (this.mv_name == null) {
        sb.append("null");
      } else {
        sb.append(this.mv_name);
      }
      first = false;
    }
    if (isSetDb_id()) {
      if (!first) sb.append(", ");
      sb.append("db_id:");
      sb.append(this.db_id);
      first = false;
    }
    if (isSetMv_id()) {
      if (!first) sb.append(", ");
      sb.append("mv_id:");
      sb.append(this.mv_id);
      first = false;
    }
    if (isSetJob_id()) {
      if (!first) sb.append(", ");
      sb.append("job_id:");
      sb.append(this.job_id);
      first = false;
    }
    if (isSetTask_id()) {
      if (!first) sb.append(", ");
      sb.append("task_id:");
      sb.append(this.task_id);
      first = false;
    }
    if (isSetQuery_id()) {
      if (!first) sb.append(", ");
      sb.append("query_id:");
      if (this.query_id == null) {
        sb.append("null");
      } else {
        sb.append(this.query_id);
      }
      first = false;
    }
    if (isSetStart_maintenance()) {
      if (!first) sb.append(", ");
      sb.append("start_maintenance:");
      if (this.start_maintenance == null) {
        sb.append("null");
      } else {
        sb.append(this.start_maintenance);
      }
      first = false;
    }
    if (isSetStop_maintenance()) {
      if (!first) sb.append(", ");
      sb.append("stop_maintenance:");
      if (this.stop_maintenance == null) {
        sb.append("null");
      } else {
        sb.append(this.stop_maintenance);
      }
      first = false;
    }
    if (isSetStart_epoch()) {
      if (!first) sb.append(", ");
      sb.append("start_epoch:");
      if (this.start_epoch == null) {
        sb.append("null");
      } else {
        sb.append(this.start_epoch);
      }
      first = false;
    }
    if (isSetCommit_epoch()) {
      if (!first) sb.append(", ");
      sb.append("commit_epoch:");
      if (this.commit_epoch == null) {
        sb.append("null");
      } else {
        sb.append(this.commit_epoch);
      }
      first = false;
    }
    if (isSetAbort_epoch()) {
      if (!first) sb.append(", ");
      sb.append("abort_epoch:");
      if (this.abort_epoch == null) {
        sb.append("null");
      } else {
        sb.append(this.abort_epoch);
      }
      first = false;
    }
    if (isSetReport_epoch()) {
      if (!first) sb.append(", ");
      sb.append("report_epoch:");
      if (this.report_epoch == null) {
        sb.append("null");
      } else {
        sb.append(this.report_epoch);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (query_id != null) {
      query_id.validate();
    }
    if (start_maintenance != null) {
      start_maintenance.validate();
    }
    if (stop_maintenance != null) {
      stop_maintenance.validate();
    }
    if (start_epoch != null) {
      start_epoch.validate();
    }
    if (commit_epoch != null) {
      commit_epoch.validate();
    }
    if (abort_epoch != null) {
      abort_epoch.validate();
    }
    if (report_epoch != null) {
      report_epoch.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMVMaintenanceTasksStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMVMaintenanceTasksStandardScheme getScheme() {
      return new TMVMaintenanceTasksStandardScheme();
    }
  }

  private static class TMVMaintenanceTasksStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMVMaintenanceTasks> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TMVMaintenanceTasks struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = com.starrocks.thrift.TAgentServiceVersion.findByValue(iprot.readI32());
              struct.setProtocol_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.task_type = com.starrocks.thrift.MVTaskType.findByValue(iprot.readI32());
              struct.setTask_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.signature = iprot.readI64();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MV_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mv_name = iprot.readString();
              struct.setMv_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.db_id = iprot.readI64();
              struct.setDb_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MV_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mv_id = iprot.readI64();
              struct.setMv_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.job_id = iprot.readI64();
              struct.setJob_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.task_id = iprot.readI64();
              struct.setTask_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_id = new com.starrocks.thrift.TUniqueId();
              struct.query_id.read(iprot);
              struct.setQuery_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // START_MAINTENANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.start_maintenance = new TMVMaintenanceStartTask();
              struct.start_maintenance.read(iprot);
              struct.setStart_maintenanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STOP_MAINTENANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stop_maintenance = new TMVMaintenanceStopTask();
              struct.stop_maintenance.read(iprot);
              struct.setStop_maintenanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // START_EPOCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.start_epoch = new TMVStartEpochTask();
              struct.start_epoch.read(iprot);
              struct.setStart_epochIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COMMIT_EPOCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commit_epoch = new TMVCommitEpochTask();
              struct.commit_epoch.read(iprot);
              struct.setCommit_epochIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ABORT_EPOCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.abort_epoch = new TMVAbortEpochTask();
              struct.abort_epoch.read(iprot);
              struct.setAbort_epochIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // REPORT_EPOCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.report_epoch = new TMVReportEpochTask();
              struct.report_epoch.read(iprot);
              struct.setReport_epochIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TMVMaintenanceTasks struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        if (struct.isSetProtocol_version()) {
          oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
          oprot.writeI32(struct.protocol_version.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.task_type != null) {
        if (struct.isSetTask_type()) {
          oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
          oprot.writeI32(struct.task_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSignature()) {
        oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
        oprot.writeI64(struct.signature);
        oprot.writeFieldEnd();
      }
      if (struct.db_name != null) {
        if (struct.isSetDb_name()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.db_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mv_name != null) {
        if (struct.isSetMv_name()) {
          oprot.writeFieldBegin(MV_NAME_FIELD_DESC);
          oprot.writeString(struct.mv_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDb_id()) {
        oprot.writeFieldBegin(DB_ID_FIELD_DESC);
        oprot.writeI64(struct.db_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMv_id()) {
        oprot.writeFieldBegin(MV_ID_FIELD_DESC);
        oprot.writeI64(struct.mv_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetJob_id()) {
        oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
        oprot.writeI64(struct.job_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTask_id()) {
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.task_id);
        oprot.writeFieldEnd();
      }
      if (struct.query_id != null) {
        if (struct.isSetQuery_id()) {
          oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
          struct.query_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.start_maintenance != null) {
        if (struct.isSetStart_maintenance()) {
          oprot.writeFieldBegin(START_MAINTENANCE_FIELD_DESC);
          struct.start_maintenance.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stop_maintenance != null) {
        if (struct.isSetStop_maintenance()) {
          oprot.writeFieldBegin(STOP_MAINTENANCE_FIELD_DESC);
          struct.stop_maintenance.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.start_epoch != null) {
        if (struct.isSetStart_epoch()) {
          oprot.writeFieldBegin(START_EPOCH_FIELD_DESC);
          struct.start_epoch.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commit_epoch != null) {
        if (struct.isSetCommit_epoch()) {
          oprot.writeFieldBegin(COMMIT_EPOCH_FIELD_DESC);
          struct.commit_epoch.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.abort_epoch != null) {
        if (struct.isSetAbort_epoch()) {
          oprot.writeFieldBegin(ABORT_EPOCH_FIELD_DESC);
          struct.abort_epoch.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.report_epoch != null) {
        if (struct.isSetReport_epoch()) {
          oprot.writeFieldBegin(REPORT_EPOCH_FIELD_DESC);
          struct.report_epoch.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMVMaintenanceTasksTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMVMaintenanceTasksTupleScheme getScheme() {
      return new TMVMaintenanceTasksTupleScheme();
    }
  }

  private static class TMVMaintenanceTasksTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMVMaintenanceTasks> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMVMaintenanceTasks struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetProtocol_version()) {
        optionals.set(0);
      }
      if (struct.isSetTask_type()) {
        optionals.set(1);
      }
      if (struct.isSetSignature()) {
        optionals.set(2);
      }
      if (struct.isSetDb_name()) {
        optionals.set(3);
      }
      if (struct.isSetMv_name()) {
        optionals.set(4);
      }
      if (struct.isSetDb_id()) {
        optionals.set(5);
      }
      if (struct.isSetMv_id()) {
        optionals.set(6);
      }
      if (struct.isSetJob_id()) {
        optionals.set(7);
      }
      if (struct.isSetTask_id()) {
        optionals.set(8);
      }
      if (struct.isSetQuery_id()) {
        optionals.set(9);
      }
      if (struct.isSetStart_maintenance()) {
        optionals.set(10);
      }
      if (struct.isSetStop_maintenance()) {
        optionals.set(11);
      }
      if (struct.isSetStart_epoch()) {
        optionals.set(12);
      }
      if (struct.isSetCommit_epoch()) {
        optionals.set(13);
      }
      if (struct.isSetAbort_epoch()) {
        optionals.set(14);
      }
      if (struct.isSetReport_epoch()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetProtocol_version()) {
        oprot.writeI32(struct.protocol_version.getValue());
      }
      if (struct.isSetTask_type()) {
        oprot.writeI32(struct.task_type.getValue());
      }
      if (struct.isSetSignature()) {
        oprot.writeI64(struct.signature);
      }
      if (struct.isSetDb_name()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetMv_name()) {
        oprot.writeString(struct.mv_name);
      }
      if (struct.isSetDb_id()) {
        oprot.writeI64(struct.db_id);
      }
      if (struct.isSetMv_id()) {
        oprot.writeI64(struct.mv_id);
      }
      if (struct.isSetJob_id()) {
        oprot.writeI64(struct.job_id);
      }
      if (struct.isSetTask_id()) {
        oprot.writeI64(struct.task_id);
      }
      if (struct.isSetQuery_id()) {
        struct.query_id.write(oprot);
      }
      if (struct.isSetStart_maintenance()) {
        struct.start_maintenance.write(oprot);
      }
      if (struct.isSetStop_maintenance()) {
        struct.stop_maintenance.write(oprot);
      }
      if (struct.isSetStart_epoch()) {
        struct.start_epoch.write(oprot);
      }
      if (struct.isSetCommit_epoch()) {
        struct.commit_epoch.write(oprot);
      }
      if (struct.isSetAbort_epoch()) {
        struct.abort_epoch.write(oprot);
      }
      if (struct.isSetReport_epoch()) {
        struct.report_epoch.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMVMaintenanceTasks struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.protocol_version = com.starrocks.thrift.TAgentServiceVersion.findByValue(iprot.readI32());
        struct.setProtocol_versionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.task_type = com.starrocks.thrift.MVTaskType.findByValue(iprot.readI32());
        struct.setTask_typeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.signature = iprot.readI64();
        struct.setSignatureIsSet(true);
      }
      if (incoming.get(3)) {
        struct.db_name = iprot.readString();
        struct.setDb_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mv_name = iprot.readString();
        struct.setMv_nameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.db_id = iprot.readI64();
        struct.setDb_idIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mv_id = iprot.readI64();
        struct.setMv_idIsSet(true);
      }
      if (incoming.get(7)) {
        struct.job_id = iprot.readI64();
        struct.setJob_idIsSet(true);
      }
      if (incoming.get(8)) {
        struct.task_id = iprot.readI64();
        struct.setTask_idIsSet(true);
      }
      if (incoming.get(9)) {
        struct.query_id = new com.starrocks.thrift.TUniqueId();
        struct.query_id.read(iprot);
        struct.setQuery_idIsSet(true);
      }
      if (incoming.get(10)) {
        struct.start_maintenance = new TMVMaintenanceStartTask();
        struct.start_maintenance.read(iprot);
        struct.setStart_maintenanceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.stop_maintenance = new TMVMaintenanceStopTask();
        struct.stop_maintenance.read(iprot);
        struct.setStop_maintenanceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.start_epoch = new TMVStartEpochTask();
        struct.start_epoch.read(iprot);
        struct.setStart_epochIsSet(true);
      }
      if (incoming.get(13)) {
        struct.commit_epoch = new TMVCommitEpochTask();
        struct.commit_epoch.read(iprot);
        struct.setCommit_epochIsSet(true);
      }
      if (incoming.get(14)) {
        struct.abort_epoch = new TMVAbortEpochTask();
        struct.abort_epoch.read(iprot);
        struct.setAbort_epochIsSet(true);
      }
      if (incoming.get(15)) {
        struct.report_epoch = new TMVReportEpochTask();
        struct.report_epoch.read(iprot);
        struct.setReport_epochIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

