/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TFeLocksItem implements org.apache.thrift.TBase<TFeLocksItem, TFeLocksItem._Fields>, java.io.Serializable, Cloneable, Comparable<TFeLocksItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFeLocksItem");

  private static final org.apache.thrift.protocol.TField LOCK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("lock_type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOCK_OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("lock_object", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOCK_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("lock_mode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("start_time", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField HOLD_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("hold_time_ms", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField THREAD_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("thread_info", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField GRANTED_FIELD_DESC = new org.apache.thrift.protocol.TField("granted", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField WAITER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("waiter_list", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TFeLocksItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TFeLocksItemTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String lock_type; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String lock_object; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String lock_mode; // optional
  public long start_time; // optional
  public long hold_time_ms; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String thread_info; // optional
  public boolean granted; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String waiter_list; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCK_TYPE((short)1, "lock_type"),
    LOCK_OBJECT((short)2, "lock_object"),
    LOCK_MODE((short)3, "lock_mode"),
    START_TIME((short)4, "start_time"),
    HOLD_TIME_MS((short)5, "hold_time_ms"),
    THREAD_INFO((short)11, "thread_info"),
    GRANTED((short)12, "granted"),
    WAITER_LIST((short)14, "waiter_list");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCK_TYPE
          return LOCK_TYPE;
        case 2: // LOCK_OBJECT
          return LOCK_OBJECT;
        case 3: // LOCK_MODE
          return LOCK_MODE;
        case 4: // START_TIME
          return START_TIME;
        case 5: // HOLD_TIME_MS
          return HOLD_TIME_MS;
        case 11: // THREAD_INFO
          return THREAD_INFO;
        case 12: // GRANTED
          return GRANTED;
        case 14: // WAITER_LIST
          return WAITER_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __START_TIME_ISSET_ID = 0;
  private static final int __HOLD_TIME_MS_ISSET_ID = 1;
  private static final int __GRANTED_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LOCK_TYPE,_Fields.LOCK_OBJECT,_Fields.LOCK_MODE,_Fields.START_TIME,_Fields.HOLD_TIME_MS,_Fields.THREAD_INFO,_Fields.GRANTED,_Fields.WAITER_LIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("lock_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCK_OBJECT, new org.apache.thrift.meta_data.FieldMetaData("lock_object", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCK_MODE, new org.apache.thrift.meta_data.FieldMetaData("lock_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("start_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HOLD_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("hold_time_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.THREAD_INFO, new org.apache.thrift.meta_data.FieldMetaData("thread_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GRANTED, new org.apache.thrift.meta_data.FieldMetaData("granted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WAITER_LIST, new org.apache.thrift.meta_data.FieldMetaData("waiter_list", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFeLocksItem.class, metaDataMap);
  }

  public TFeLocksItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFeLocksItem(TFeLocksItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLock_type()) {
      this.lock_type = other.lock_type;
    }
    if (other.isSetLock_object()) {
      this.lock_object = other.lock_object;
    }
    if (other.isSetLock_mode()) {
      this.lock_mode = other.lock_mode;
    }
    this.start_time = other.start_time;
    this.hold_time_ms = other.hold_time_ms;
    if (other.isSetThread_info()) {
      this.thread_info = other.thread_info;
    }
    this.granted = other.granted;
    if (other.isSetWaiter_list()) {
      this.waiter_list = other.waiter_list;
    }
  }

  @Override
  public TFeLocksItem deepCopy() {
    return new TFeLocksItem(this);
  }

  @Override
  public void clear() {
    this.lock_type = null;
    this.lock_object = null;
    this.lock_mode = null;
    setStart_timeIsSet(false);
    this.start_time = 0;
    setHold_time_msIsSet(false);
    this.hold_time_ms = 0;
    this.thread_info = null;
    setGrantedIsSet(false);
    this.granted = false;
    this.waiter_list = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLock_type() {
    return this.lock_type;
  }

  public TFeLocksItem setLock_type(@org.apache.thrift.annotation.Nullable java.lang.String lock_type) {
    this.lock_type = lock_type;
    return this;
  }

  public void unsetLock_type() {
    this.lock_type = null;
  }

  /** Returns true if field lock_type is set (has been assigned a value) and false otherwise */
  public boolean isSetLock_type() {
    return this.lock_type != null;
  }

  public void setLock_typeIsSet(boolean value) {
    if (!value) {
      this.lock_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLock_object() {
    return this.lock_object;
  }

  public TFeLocksItem setLock_object(@org.apache.thrift.annotation.Nullable java.lang.String lock_object) {
    this.lock_object = lock_object;
    return this;
  }

  public void unsetLock_object() {
    this.lock_object = null;
  }

  /** Returns true if field lock_object is set (has been assigned a value) and false otherwise */
  public boolean isSetLock_object() {
    return this.lock_object != null;
  }

  public void setLock_objectIsSet(boolean value) {
    if (!value) {
      this.lock_object = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLock_mode() {
    return this.lock_mode;
  }

  public TFeLocksItem setLock_mode(@org.apache.thrift.annotation.Nullable java.lang.String lock_mode) {
    this.lock_mode = lock_mode;
    return this;
  }

  public void unsetLock_mode() {
    this.lock_mode = null;
  }

  /** Returns true if field lock_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetLock_mode() {
    return this.lock_mode != null;
  }

  public void setLock_modeIsSet(boolean value) {
    if (!value) {
      this.lock_mode = null;
    }
  }

  public long getStart_time() {
    return this.start_time;
  }

  public TFeLocksItem setStart_time(long start_time) {
    this.start_time = start_time;
    setStart_timeIsSet(true);
    return this;
  }

  public void unsetStart_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_TIME_ISSET_ID);
  }

  /** Returns true if field start_time is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_TIME_ISSET_ID);
  }

  public void setStart_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_TIME_ISSET_ID, value);
  }

  public long getHold_time_ms() {
    return this.hold_time_ms;
  }

  public TFeLocksItem setHold_time_ms(long hold_time_ms) {
    this.hold_time_ms = hold_time_ms;
    setHold_time_msIsSet(true);
    return this;
  }

  public void unsetHold_time_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HOLD_TIME_MS_ISSET_ID);
  }

  /** Returns true if field hold_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetHold_time_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HOLD_TIME_MS_ISSET_ID);
  }

  public void setHold_time_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HOLD_TIME_MS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getThread_info() {
    return this.thread_info;
  }

  public TFeLocksItem setThread_info(@org.apache.thrift.annotation.Nullable java.lang.String thread_info) {
    this.thread_info = thread_info;
    return this;
  }

  public void unsetThread_info() {
    this.thread_info = null;
  }

  /** Returns true if field thread_info is set (has been assigned a value) and false otherwise */
  public boolean isSetThread_info() {
    return this.thread_info != null;
  }

  public void setThread_infoIsSet(boolean value) {
    if (!value) {
      this.thread_info = null;
    }
  }

  public boolean isGranted() {
    return this.granted;
  }

  public TFeLocksItem setGranted(boolean granted) {
    this.granted = granted;
    setGrantedIsSet(true);
    return this;
  }

  public void unsetGranted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GRANTED_ISSET_ID);
  }

  /** Returns true if field granted is set (has been assigned a value) and false otherwise */
  public boolean isSetGranted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GRANTED_ISSET_ID);
  }

  public void setGrantedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GRANTED_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getWaiter_list() {
    return this.waiter_list;
  }

  public TFeLocksItem setWaiter_list(@org.apache.thrift.annotation.Nullable java.lang.String waiter_list) {
    this.waiter_list = waiter_list;
    return this;
  }

  public void unsetWaiter_list() {
    this.waiter_list = null;
  }

  /** Returns true if field waiter_list is set (has been assigned a value) and false otherwise */
  public boolean isSetWaiter_list() {
    return this.waiter_list != null;
  }

  public void setWaiter_listIsSet(boolean value) {
    if (!value) {
      this.waiter_list = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LOCK_TYPE:
      if (value == null) {
        unsetLock_type();
      } else {
        setLock_type((java.lang.String)value);
      }
      break;

    case LOCK_OBJECT:
      if (value == null) {
        unsetLock_object();
      } else {
        setLock_object((java.lang.String)value);
      }
      break;

    case LOCK_MODE:
      if (value == null) {
        unsetLock_mode();
      } else {
        setLock_mode((java.lang.String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStart_time();
      } else {
        setStart_time((java.lang.Long)value);
      }
      break;

    case HOLD_TIME_MS:
      if (value == null) {
        unsetHold_time_ms();
      } else {
        setHold_time_ms((java.lang.Long)value);
      }
      break;

    case THREAD_INFO:
      if (value == null) {
        unsetThread_info();
      } else {
        setThread_info((java.lang.String)value);
      }
      break;

    case GRANTED:
      if (value == null) {
        unsetGranted();
      } else {
        setGranted((java.lang.Boolean)value);
      }
      break;

    case WAITER_LIST:
      if (value == null) {
        unsetWaiter_list();
      } else {
        setWaiter_list((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCK_TYPE:
      return getLock_type();

    case LOCK_OBJECT:
      return getLock_object();

    case LOCK_MODE:
      return getLock_mode();

    case START_TIME:
      return getStart_time();

    case HOLD_TIME_MS:
      return getHold_time_ms();

    case THREAD_INFO:
      return getThread_info();

    case GRANTED:
      return isGranted();

    case WAITER_LIST:
      return getWaiter_list();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LOCK_TYPE:
      return isSetLock_type();
    case LOCK_OBJECT:
      return isSetLock_object();
    case LOCK_MODE:
      return isSetLock_mode();
    case START_TIME:
      return isSetStart_time();
    case HOLD_TIME_MS:
      return isSetHold_time_ms();
    case THREAD_INFO:
      return isSetThread_info();
    case GRANTED:
      return isSetGranted();
    case WAITER_LIST:
      return isSetWaiter_list();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TFeLocksItem)
      return this.equals((TFeLocksItem)that);
    return false;
  }

  public boolean equals(TFeLocksItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_lock_type = true && this.isSetLock_type();
    boolean that_present_lock_type = true && that.isSetLock_type();
    if (this_present_lock_type || that_present_lock_type) {
      if (!(this_present_lock_type && that_present_lock_type))
        return false;
      if (!this.lock_type.equals(that.lock_type))
        return false;
    }

    boolean this_present_lock_object = true && this.isSetLock_object();
    boolean that_present_lock_object = true && that.isSetLock_object();
    if (this_present_lock_object || that_present_lock_object) {
      if (!(this_present_lock_object && that_present_lock_object))
        return false;
      if (!this.lock_object.equals(that.lock_object))
        return false;
    }

    boolean this_present_lock_mode = true && this.isSetLock_mode();
    boolean that_present_lock_mode = true && that.isSetLock_mode();
    if (this_present_lock_mode || that_present_lock_mode) {
      if (!(this_present_lock_mode && that_present_lock_mode))
        return false;
      if (!this.lock_mode.equals(that.lock_mode))
        return false;
    }

    boolean this_present_start_time = true && this.isSetStart_time();
    boolean that_present_start_time = true && that.isSetStart_time();
    if (this_present_start_time || that_present_start_time) {
      if (!(this_present_start_time && that_present_start_time))
        return false;
      if (this.start_time != that.start_time)
        return false;
    }

    boolean this_present_hold_time_ms = true && this.isSetHold_time_ms();
    boolean that_present_hold_time_ms = true && that.isSetHold_time_ms();
    if (this_present_hold_time_ms || that_present_hold_time_ms) {
      if (!(this_present_hold_time_ms && that_present_hold_time_ms))
        return false;
      if (this.hold_time_ms != that.hold_time_ms)
        return false;
    }

    boolean this_present_thread_info = true && this.isSetThread_info();
    boolean that_present_thread_info = true && that.isSetThread_info();
    if (this_present_thread_info || that_present_thread_info) {
      if (!(this_present_thread_info && that_present_thread_info))
        return false;
      if (!this.thread_info.equals(that.thread_info))
        return false;
    }

    boolean this_present_granted = true && this.isSetGranted();
    boolean that_present_granted = true && that.isSetGranted();
    if (this_present_granted || that_present_granted) {
      if (!(this_present_granted && that_present_granted))
        return false;
      if (this.granted != that.granted)
        return false;
    }

    boolean this_present_waiter_list = true && this.isSetWaiter_list();
    boolean that_present_waiter_list = true && that.isSetWaiter_list();
    if (this_present_waiter_list || that_present_waiter_list) {
      if (!(this_present_waiter_list && that_present_waiter_list))
        return false;
      if (!this.waiter_list.equals(that.waiter_list))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLock_type()) ? 131071 : 524287);
    if (isSetLock_type())
      hashCode = hashCode * 8191 + lock_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetLock_object()) ? 131071 : 524287);
    if (isSetLock_object())
      hashCode = hashCode * 8191 + lock_object.hashCode();

    hashCode = hashCode * 8191 + ((isSetLock_mode()) ? 131071 : 524287);
    if (isSetLock_mode())
      hashCode = hashCode * 8191 + lock_mode.hashCode();

    hashCode = hashCode * 8191 + ((isSetStart_time()) ? 131071 : 524287);
    if (isSetStart_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(start_time);

    hashCode = hashCode * 8191 + ((isSetHold_time_ms()) ? 131071 : 524287);
    if (isSetHold_time_ms())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(hold_time_ms);

    hashCode = hashCode * 8191 + ((isSetThread_info()) ? 131071 : 524287);
    if (isSetThread_info())
      hashCode = hashCode * 8191 + thread_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetGranted()) ? 131071 : 524287);
    if (isSetGranted())
      hashCode = hashCode * 8191 + ((granted) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetWaiter_list()) ? 131071 : 524287);
    if (isSetWaiter_list())
      hashCode = hashCode * 8191 + waiter_list.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TFeLocksItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLock_type(), other.isSetLock_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLock_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lock_type, other.lock_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLock_object(), other.isSetLock_object());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLock_object()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lock_object, other.lock_object);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLock_mode(), other.isSetLock_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLock_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lock_mode, other.lock_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStart_time(), other.isSetStart_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_time, other.start_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHold_time_ms(), other.isSetHold_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHold_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hold_time_ms, other.hold_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetThread_info(), other.isSetThread_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThread_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thread_info, other.thread_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGranted(), other.isSetGranted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGranted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.granted, other.granted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWaiter_list(), other.isSetWaiter_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaiter_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waiter_list, other.waiter_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TFeLocksItem(");
    boolean first = true;

    if (isSetLock_type()) {
      sb.append("lock_type:");
      if (this.lock_type == null) {
        sb.append("null");
      } else {
        sb.append(this.lock_type);
      }
      first = false;
    }
    if (isSetLock_object()) {
      if (!first) sb.append(", ");
      sb.append("lock_object:");
      if (this.lock_object == null) {
        sb.append("null");
      } else {
        sb.append(this.lock_object);
      }
      first = false;
    }
    if (isSetLock_mode()) {
      if (!first) sb.append(", ");
      sb.append("lock_mode:");
      if (this.lock_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.lock_mode);
      }
      first = false;
    }
    if (isSetStart_time()) {
      if (!first) sb.append(", ");
      sb.append("start_time:");
      sb.append(this.start_time);
      first = false;
    }
    if (isSetHold_time_ms()) {
      if (!first) sb.append(", ");
      sb.append("hold_time_ms:");
      sb.append(this.hold_time_ms);
      first = false;
    }
    if (isSetThread_info()) {
      if (!first) sb.append(", ");
      sb.append("thread_info:");
      if (this.thread_info == null) {
        sb.append("null");
      } else {
        sb.append(this.thread_info);
      }
      first = false;
    }
    if (isSetGranted()) {
      if (!first) sb.append(", ");
      sb.append("granted:");
      sb.append(this.granted);
      first = false;
    }
    if (isSetWaiter_list()) {
      if (!first) sb.append(", ");
      sb.append("waiter_list:");
      if (this.waiter_list == null) {
        sb.append("null");
      } else {
        sb.append(this.waiter_list);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFeLocksItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TFeLocksItemStandardScheme getScheme() {
      return new TFeLocksItemStandardScheme();
    }
  }

  private static class TFeLocksItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<TFeLocksItem> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TFeLocksItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lock_type = iprot.readString();
              struct.setLock_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCK_OBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lock_object = iprot.readString();
              struct.setLock_objectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCK_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lock_mode = iprot.readString();
              struct.setLock_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start_time = iprot.readI64();
              struct.setStart_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HOLD_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.hold_time_ms = iprot.readI64();
              struct.setHold_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // THREAD_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thread_info = iprot.readString();
              struct.setThread_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // GRANTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.granted = iprot.readBool();
              struct.setGrantedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // WAITER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.waiter_list = iprot.readString();
              struct.setWaiter_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TFeLocksItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lock_type != null) {
        if (struct.isSetLock_type()) {
          oprot.writeFieldBegin(LOCK_TYPE_FIELD_DESC);
          oprot.writeString(struct.lock_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lock_object != null) {
        if (struct.isSetLock_object()) {
          oprot.writeFieldBegin(LOCK_OBJECT_FIELD_DESC);
          oprot.writeString(struct.lock_object);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lock_mode != null) {
        if (struct.isSetLock_mode()) {
          oprot.writeFieldBegin(LOCK_MODE_FIELD_DESC);
          oprot.writeString(struct.lock_mode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStart_time()) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.start_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHold_time_ms()) {
        oprot.writeFieldBegin(HOLD_TIME_MS_FIELD_DESC);
        oprot.writeI64(struct.hold_time_ms);
        oprot.writeFieldEnd();
      }
      if (struct.thread_info != null) {
        if (struct.isSetThread_info()) {
          oprot.writeFieldBegin(THREAD_INFO_FIELD_DESC);
          oprot.writeString(struct.thread_info);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGranted()) {
        oprot.writeFieldBegin(GRANTED_FIELD_DESC);
        oprot.writeBool(struct.granted);
        oprot.writeFieldEnd();
      }
      if (struct.waiter_list != null) {
        if (struct.isSetWaiter_list()) {
          oprot.writeFieldBegin(WAITER_LIST_FIELD_DESC);
          oprot.writeString(struct.waiter_list);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFeLocksItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TFeLocksItemTupleScheme getScheme() {
      return new TFeLocksItemTupleScheme();
    }
  }

  private static class TFeLocksItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<TFeLocksItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFeLocksItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLock_type()) {
        optionals.set(0);
      }
      if (struct.isSetLock_object()) {
        optionals.set(1);
      }
      if (struct.isSetLock_mode()) {
        optionals.set(2);
      }
      if (struct.isSetStart_time()) {
        optionals.set(3);
      }
      if (struct.isSetHold_time_ms()) {
        optionals.set(4);
      }
      if (struct.isSetThread_info()) {
        optionals.set(5);
      }
      if (struct.isSetGranted()) {
        optionals.set(6);
      }
      if (struct.isSetWaiter_list()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetLock_type()) {
        oprot.writeString(struct.lock_type);
      }
      if (struct.isSetLock_object()) {
        oprot.writeString(struct.lock_object);
      }
      if (struct.isSetLock_mode()) {
        oprot.writeString(struct.lock_mode);
      }
      if (struct.isSetStart_time()) {
        oprot.writeI64(struct.start_time);
      }
      if (struct.isSetHold_time_ms()) {
        oprot.writeI64(struct.hold_time_ms);
      }
      if (struct.isSetThread_info()) {
        oprot.writeString(struct.thread_info);
      }
      if (struct.isSetGranted()) {
        oprot.writeBool(struct.granted);
      }
      if (struct.isSetWaiter_list()) {
        oprot.writeString(struct.waiter_list);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFeLocksItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.lock_type = iprot.readString();
        struct.setLock_typeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lock_object = iprot.readString();
        struct.setLock_objectIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lock_mode = iprot.readString();
        struct.setLock_modeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.start_time = iprot.readI64();
        struct.setStart_timeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hold_time_ms = iprot.readI64();
        struct.setHold_time_msIsSet(true);
      }
      if (incoming.get(5)) {
        struct.thread_info = iprot.readString();
        struct.setThread_infoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.granted = iprot.readBool();
        struct.setGrantedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.waiter_list = iprot.readString();
        struct.setWaiter_listIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

