/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TMiniLoadEtlStatusResult implements org.apache.thrift.TBase<TMiniLoadEtlStatusResult, TMiniLoadEtlStatusResult._Fields>, java.io.Serializable, Cloneable, Comparable<TMiniLoadEtlStatusResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMiniLoadEtlStatusResult");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ETL_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("etl_state", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("file_map", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField COUNTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("counters", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField TRACKING_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("tracking_url", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMiniLoadEtlStatusResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMiniLoadEtlStatusResultTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TStatus status; // required
  /**
   * 
   * @see com.starrocks.thrift.TEtlState
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TEtlState etl_state; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Long> file_map; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> counters; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String tracking_url; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    /**
     * 
     * @see com.starrocks.thrift.TEtlState
     */
    ETL_STATE((short)2, "etl_state"),
    FILE_MAP((short)3, "file_map"),
    COUNTERS((short)4, "counters"),
    TRACKING_URL((short)5, "tracking_url");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // ETL_STATE
          return ETL_STATE;
        case 3: // FILE_MAP
          return FILE_MAP;
        case 4: // COUNTERS
          return COUNTERS;
        case 5: // TRACKING_URL
          return TRACKING_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.FILE_MAP,_Fields.COUNTERS,_Fields.TRACKING_URL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TStatus.class)));
    tmpMap.put(_Fields.ETL_STATE, new org.apache.thrift.meta_data.FieldMetaData("etl_state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TEtlState.class)));
    tmpMap.put(_Fields.FILE_MAP, new org.apache.thrift.meta_data.FieldMetaData("file_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.COUNTERS, new org.apache.thrift.meta_data.FieldMetaData("counters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TRACKING_URL, new org.apache.thrift.meta_data.FieldMetaData("tracking_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMiniLoadEtlStatusResult.class, metaDataMap);
  }

  public TMiniLoadEtlStatusResult() {
  }

  public TMiniLoadEtlStatusResult(
    com.starrocks.thrift.TStatus status,
    com.starrocks.thrift.TEtlState etl_state)
  {
    this();
    this.status = status;
    this.etl_state = etl_state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMiniLoadEtlStatusResult(TMiniLoadEtlStatusResult other) {
    if (other.isSetStatus()) {
      this.status = new com.starrocks.thrift.TStatus(other.status);
    }
    if (other.isSetEtl_state()) {
      this.etl_state = other.etl_state;
    }
    if (other.isSetFile_map()) {
      java.util.Map<java.lang.String,java.lang.Long> __this__file_map = new java.util.HashMap<java.lang.String,java.lang.Long>(other.file_map);
      this.file_map = __this__file_map;
    }
    if (other.isSetCounters()) {
      java.util.Map<java.lang.String,java.lang.String> __this__counters = new java.util.HashMap<java.lang.String,java.lang.String>(other.counters);
      this.counters = __this__counters;
    }
    if (other.isSetTracking_url()) {
      this.tracking_url = other.tracking_url;
    }
  }

  @Override
  public TMiniLoadEtlStatusResult deepCopy() {
    return new TMiniLoadEtlStatusResult(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.etl_state = null;
    this.file_map = null;
    this.counters = null;
    this.tracking_url = null;
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TStatus getStatus() {
    return this.status;
  }

  public TMiniLoadEtlStatusResult setStatus(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * 
   * @see com.starrocks.thrift.TEtlState
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TEtlState getEtl_state() {
    return this.etl_state;
  }

  /**
   * 
   * @see com.starrocks.thrift.TEtlState
   */
  public TMiniLoadEtlStatusResult setEtl_state(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TEtlState etl_state) {
    this.etl_state = etl_state;
    return this;
  }

  public void unsetEtl_state() {
    this.etl_state = null;
  }

  /** Returns true if field etl_state is set (has been assigned a value) and false otherwise */
  public boolean isSetEtl_state() {
    return this.etl_state != null;
  }

  public void setEtl_stateIsSet(boolean value) {
    if (!value) {
      this.etl_state = null;
    }
  }

  public int getFile_mapSize() {
    return (this.file_map == null) ? 0 : this.file_map.size();
  }

  public void putToFile_map(java.lang.String key, long val) {
    if (this.file_map == null) {
      this.file_map = new java.util.HashMap<java.lang.String,java.lang.Long>();
    }
    this.file_map.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.Long> getFile_map() {
    return this.file_map;
  }

  public TMiniLoadEtlStatusResult setFile_map(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Long> file_map) {
    this.file_map = file_map;
    return this;
  }

  public void unsetFile_map() {
    this.file_map = null;
  }

  /** Returns true if field file_map is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_map() {
    return this.file_map != null;
  }

  public void setFile_mapIsSet(boolean value) {
    if (!value) {
      this.file_map = null;
    }
  }

  public int getCountersSize() {
    return (this.counters == null) ? 0 : this.counters.size();
  }

  public void putToCounters(java.lang.String key, java.lang.String val) {
    if (this.counters == null) {
      this.counters = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.counters.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getCounters() {
    return this.counters;
  }

  public TMiniLoadEtlStatusResult setCounters(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> counters) {
    this.counters = counters;
    return this;
  }

  public void unsetCounters() {
    this.counters = null;
  }

  /** Returns true if field counters is set (has been assigned a value) and false otherwise */
  public boolean isSetCounters() {
    return this.counters != null;
  }

  public void setCountersIsSet(boolean value) {
    if (!value) {
      this.counters = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTracking_url() {
    return this.tracking_url;
  }

  public TMiniLoadEtlStatusResult setTracking_url(@org.apache.thrift.annotation.Nullable java.lang.String tracking_url) {
    this.tracking_url = tracking_url;
    return this;
  }

  public void unsetTracking_url() {
    this.tracking_url = null;
  }

  /** Returns true if field tracking_url is set (has been assigned a value) and false otherwise */
  public boolean isSetTracking_url() {
    return this.tracking_url != null;
  }

  public void setTracking_urlIsSet(boolean value) {
    if (!value) {
      this.tracking_url = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.starrocks.thrift.TStatus)value);
      }
      break;

    case ETL_STATE:
      if (value == null) {
        unsetEtl_state();
      } else {
        setEtl_state((com.starrocks.thrift.TEtlState)value);
      }
      break;

    case FILE_MAP:
      if (value == null) {
        unsetFile_map();
      } else {
        setFile_map((java.util.Map<java.lang.String,java.lang.Long>)value);
      }
      break;

    case COUNTERS:
      if (value == null) {
        unsetCounters();
      } else {
        setCounters((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case TRACKING_URL:
      if (value == null) {
        unsetTracking_url();
      } else {
        setTracking_url((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case ETL_STATE:
      return getEtl_state();

    case FILE_MAP:
      return getFile_map();

    case COUNTERS:
      return getCounters();

    case TRACKING_URL:
      return getTracking_url();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case ETL_STATE:
      return isSetEtl_state();
    case FILE_MAP:
      return isSetFile_map();
    case COUNTERS:
      return isSetCounters();
    case TRACKING_URL:
      return isSetTracking_url();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TMiniLoadEtlStatusResult)
      return this.equals((TMiniLoadEtlStatusResult)that);
    return false;
  }

  public boolean equals(TMiniLoadEtlStatusResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_etl_state = true && this.isSetEtl_state();
    boolean that_present_etl_state = true && that.isSetEtl_state();
    if (this_present_etl_state || that_present_etl_state) {
      if (!(this_present_etl_state && that_present_etl_state))
        return false;
      if (!this.etl_state.equals(that.etl_state))
        return false;
    }

    boolean this_present_file_map = true && this.isSetFile_map();
    boolean that_present_file_map = true && that.isSetFile_map();
    if (this_present_file_map || that_present_file_map) {
      if (!(this_present_file_map && that_present_file_map))
        return false;
      if (!this.file_map.equals(that.file_map))
        return false;
    }

    boolean this_present_counters = true && this.isSetCounters();
    boolean that_present_counters = true && that.isSetCounters();
    if (this_present_counters || that_present_counters) {
      if (!(this_present_counters && that_present_counters))
        return false;
      if (!this.counters.equals(that.counters))
        return false;
    }

    boolean this_present_tracking_url = true && this.isSetTracking_url();
    boolean that_present_tracking_url = true && that.isSetTracking_url();
    if (this_present_tracking_url || that_present_tracking_url) {
      if (!(this_present_tracking_url && that_present_tracking_url))
        return false;
      if (!this.tracking_url.equals(that.tracking_url))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetEtl_state()) ? 131071 : 524287);
    if (isSetEtl_state())
      hashCode = hashCode * 8191 + etl_state.getValue();

    hashCode = hashCode * 8191 + ((isSetFile_map()) ? 131071 : 524287);
    if (isSetFile_map())
      hashCode = hashCode * 8191 + file_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetCounters()) ? 131071 : 524287);
    if (isSetCounters())
      hashCode = hashCode * 8191 + counters.hashCode();

    hashCode = hashCode * 8191 + ((isSetTracking_url()) ? 131071 : 524287);
    if (isSetTracking_url())
      hashCode = hashCode * 8191 + tracking_url.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TMiniLoadEtlStatusResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEtl_state(), other.isSetEtl_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEtl_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.etl_state, other.etl_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_map(), other.isSetFile_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_map, other.file_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCounters(), other.isSetCounters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counters, other.counters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTracking_url(), other.isSetTracking_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTracking_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracking_url, other.tracking_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMiniLoadEtlStatusResult(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("etl_state:");
    if (this.etl_state == null) {
      sb.append("null");
    } else {
      sb.append(this.etl_state);
    }
    first = false;
    if (isSetFile_map()) {
      if (!first) sb.append(", ");
      sb.append("file_map:");
      if (this.file_map == null) {
        sb.append("null");
      } else {
        sb.append(this.file_map);
      }
      first = false;
    }
    if (isSetCounters()) {
      if (!first) sb.append(", ");
      sb.append("counters:");
      if (this.counters == null) {
        sb.append("null");
      } else {
        sb.append(this.counters);
      }
      first = false;
    }
    if (isSetTracking_url()) {
      if (!first) sb.append(", ");
      sb.append("tracking_url:");
      if (this.tracking_url == null) {
        sb.append("null");
      } else {
        sb.append(this.tracking_url);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    if (etl_state == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'etl_state' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMiniLoadEtlStatusResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMiniLoadEtlStatusResultStandardScheme getScheme() {
      return new TMiniLoadEtlStatusResultStandardScheme();
    }
  }

  private static class TMiniLoadEtlStatusResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMiniLoadEtlStatusResult> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TMiniLoadEtlStatusResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new com.starrocks.thrift.TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ETL_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.etl_state = com.starrocks.thrift.TEtlState.findByValue(iprot.readI32());
              struct.setEtl_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map236 = iprot.readMapBegin();
                struct.file_map = new java.util.HashMap<java.lang.String,java.lang.Long>(2*_map236.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key237;
                long _val238;
                for (int _i239 = 0; _i239 < _map236.size; ++_i239)
                {
                  _key237 = iprot.readString();
                  _val238 = iprot.readI64();
                  struct.file_map.put(_key237, _val238);
                }
                iprot.readMapEnd();
              }
              struct.setFile_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COUNTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map240 = iprot.readMapBegin();
                struct.counters = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map240.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key241;
                @org.apache.thrift.annotation.Nullable java.lang.String _val242;
                for (int _i243 = 0; _i243 < _map240.size; ++_i243)
                {
                  _key241 = iprot.readString();
                  _val242 = iprot.readString();
                  struct.counters.put(_key241, _val242);
                }
                iprot.readMapEnd();
              }
              struct.setCountersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRACKING_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tracking_url = iprot.readString();
              struct.setTracking_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TMiniLoadEtlStatusResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.etl_state != null) {
        oprot.writeFieldBegin(ETL_STATE_FIELD_DESC);
        oprot.writeI32(struct.etl_state.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.file_map != null) {
        if (struct.isSetFile_map()) {
          oprot.writeFieldBegin(FILE_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.file_map.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Long> _iter244 : struct.file_map.entrySet())
            {
              oprot.writeString(_iter244.getKey());
              oprot.writeI64(_iter244.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.counters != null) {
        if (struct.isSetCounters()) {
          oprot.writeFieldBegin(COUNTERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.counters.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter245 : struct.counters.entrySet())
            {
              oprot.writeString(_iter245.getKey());
              oprot.writeString(_iter245.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tracking_url != null) {
        if (struct.isSetTracking_url()) {
          oprot.writeFieldBegin(TRACKING_URL_FIELD_DESC);
          oprot.writeString(struct.tracking_url);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMiniLoadEtlStatusResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMiniLoadEtlStatusResultTupleScheme getScheme() {
      return new TMiniLoadEtlStatusResultTupleScheme();
    }
  }

  private static class TMiniLoadEtlStatusResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMiniLoadEtlStatusResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMiniLoadEtlStatusResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.status.write(oprot);
      oprot.writeI32(struct.etl_state.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFile_map()) {
        optionals.set(0);
      }
      if (struct.isSetCounters()) {
        optionals.set(1);
      }
      if (struct.isSetTracking_url()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFile_map()) {
        {
          oprot.writeI32(struct.file_map.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Long> _iter246 : struct.file_map.entrySet())
          {
            oprot.writeString(_iter246.getKey());
            oprot.writeI64(_iter246.getValue());
          }
        }
      }
      if (struct.isSetCounters()) {
        {
          oprot.writeI32(struct.counters.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter247 : struct.counters.entrySet())
          {
            oprot.writeString(_iter247.getKey());
            oprot.writeString(_iter247.getValue());
          }
        }
      }
      if (struct.isSetTracking_url()) {
        oprot.writeString(struct.tracking_url);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMiniLoadEtlStatusResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.status = new com.starrocks.thrift.TStatus();
      struct.status.read(iprot);
      struct.setStatusIsSet(true);
      struct.etl_state = com.starrocks.thrift.TEtlState.findByValue(iprot.readI32());
      struct.setEtl_stateIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map248 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64); 
          struct.file_map = new java.util.HashMap<java.lang.String,java.lang.Long>(2*_map248.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key249;
          long _val250;
          for (int _i251 = 0; _i251 < _map248.size; ++_i251)
          {
            _key249 = iprot.readString();
            _val250 = iprot.readI64();
            struct.file_map.put(_key249, _val250);
          }
        }
        struct.setFile_mapIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map252 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.counters = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map252.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key253;
          @org.apache.thrift.annotation.Nullable java.lang.String _val254;
          for (int _i255 = 0; _i255 < _map252.size; ++_i255)
          {
            _key253 = iprot.readString();
            _val254 = iprot.readString();
            struct.counters.put(_key253, _val254);
          }
        }
        struct.setCountersIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tracking_url = iprot.readString();
        struct.setTracking_urlIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

