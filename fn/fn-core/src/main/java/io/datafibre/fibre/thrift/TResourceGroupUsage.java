/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TResourceGroupUsage implements org.apache.thrift.TBase<TResourceGroupUsage, TResourceGroupUsage._Fields>, java.io.Serializable, Cloneable, Comparable<TResourceGroupUsage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResourceGroupUsage");

  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CPU_CORE_USED_PERMILLE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu_core_used_permille", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MEM_USED_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_used_bytes", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_RUNNING_QUERIES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_running_queries", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TResourceGroupUsageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TResourceGroupUsageTupleSchemeFactory();

  public long group_id; // optional
  public int cpu_core_used_permille; // optional
  public long mem_used_bytes; // optional
  public int num_running_queries; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_ID((short)1, "group_id"),
    CPU_CORE_USED_PERMILLE((short)2, "cpu_core_used_permille"),
    MEM_USED_BYTES((short)3, "mem_used_bytes"),
    NUM_RUNNING_QUERIES((short)4, "num_running_queries");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_ID
          return GROUP_ID;
        case 2: // CPU_CORE_USED_PERMILLE
          return CPU_CORE_USED_PERMILLE;
        case 3: // MEM_USED_BYTES
          return MEM_USED_BYTES;
        case 4: // NUM_RUNNING_QUERIES
          return NUM_RUNNING_QUERIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GROUP_ID_ISSET_ID = 0;
  private static final int __CPU_CORE_USED_PERMILLE_ISSET_ID = 1;
  private static final int __MEM_USED_BYTES_ISSET_ID = 2;
  private static final int __NUM_RUNNING_QUERIES_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GROUP_ID,_Fields.CPU_CORE_USED_PERMILLE,_Fields.MEM_USED_BYTES,_Fields.NUM_RUNNING_QUERIES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CPU_CORE_USED_PERMILLE, new org.apache.thrift.meta_data.FieldMetaData("cpu_core_used_permille", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEM_USED_BYTES, new org.apache.thrift.meta_data.FieldMetaData("mem_used_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_RUNNING_QUERIES, new org.apache.thrift.meta_data.FieldMetaData("num_running_queries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResourceGroupUsage.class, metaDataMap);
  }

  public TResourceGroupUsage() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResourceGroupUsage(TResourceGroupUsage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.group_id = other.group_id;
    this.cpu_core_used_permille = other.cpu_core_used_permille;
    this.mem_used_bytes = other.mem_used_bytes;
    this.num_running_queries = other.num_running_queries;
  }

  @Override
  public TResourceGroupUsage deepCopy() {
    return new TResourceGroupUsage(this);
  }

  @Override
  public void clear() {
    setGroup_idIsSet(false);
    this.group_id = 0;
    setCpu_core_used_permilleIsSet(false);
    this.cpu_core_used_permille = 0;
    setMem_used_bytesIsSet(false);
    this.mem_used_bytes = 0;
    setNum_running_queriesIsSet(false);
    this.num_running_queries = 0;
  }

  public long getGroup_id() {
    return this.group_id;
  }

  public TResourceGroupUsage setGroup_id(long group_id) {
    this.group_id = group_id;
    setGroup_idIsSet(true);
    return this;
  }

  public void unsetGroup_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
  }

  /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
  }

  public void setGroup_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GROUP_ID_ISSET_ID, value);
  }

  public int getCpu_core_used_permille() {
    return this.cpu_core_used_permille;
  }

  public TResourceGroupUsage setCpu_core_used_permille(int cpu_core_used_permille) {
    this.cpu_core_used_permille = cpu_core_used_permille;
    setCpu_core_used_permilleIsSet(true);
    return this;
  }

  public void unsetCpu_core_used_permille() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPU_CORE_USED_PERMILLE_ISSET_ID);
  }

  /** Returns true if field cpu_core_used_permille is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu_core_used_permille() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPU_CORE_USED_PERMILLE_ISSET_ID);
  }

  public void setCpu_core_used_permilleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPU_CORE_USED_PERMILLE_ISSET_ID, value);
  }

  public long getMem_used_bytes() {
    return this.mem_used_bytes;
  }

  public TResourceGroupUsage setMem_used_bytes(long mem_used_bytes) {
    this.mem_used_bytes = mem_used_bytes;
    setMem_used_bytesIsSet(true);
    return this;
  }

  public void unsetMem_used_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEM_USED_BYTES_ISSET_ID);
  }

  /** Returns true if field mem_used_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_used_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEM_USED_BYTES_ISSET_ID);
  }

  public void setMem_used_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEM_USED_BYTES_ISSET_ID, value);
  }

  public int getNum_running_queries() {
    return this.num_running_queries;
  }

  public TResourceGroupUsage setNum_running_queries(int num_running_queries) {
    this.num_running_queries = num_running_queries;
    setNum_running_queriesIsSet(true);
    return this;
  }

  public void unsetNum_running_queries() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_RUNNING_QUERIES_ISSET_ID);
  }

  /** Returns true if field num_running_queries is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_running_queries() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_RUNNING_QUERIES_ISSET_ID);
  }

  public void setNum_running_queriesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_RUNNING_QUERIES_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case GROUP_ID:
      if (value == null) {
        unsetGroup_id();
      } else {
        setGroup_id((java.lang.Long)value);
      }
      break;

    case CPU_CORE_USED_PERMILLE:
      if (value == null) {
        unsetCpu_core_used_permille();
      } else {
        setCpu_core_used_permille((java.lang.Integer)value);
      }
      break;

    case MEM_USED_BYTES:
      if (value == null) {
        unsetMem_used_bytes();
      } else {
        setMem_used_bytes((java.lang.Long)value);
      }
      break;

    case NUM_RUNNING_QUERIES:
      if (value == null) {
        unsetNum_running_queries();
      } else {
        setNum_running_queries((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_ID:
      return getGroup_id();

    case CPU_CORE_USED_PERMILLE:
      return getCpu_core_used_permille();

    case MEM_USED_BYTES:
      return getMem_used_bytes();

    case NUM_RUNNING_QUERIES:
      return getNum_running_queries();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case GROUP_ID:
      return isSetGroup_id();
    case CPU_CORE_USED_PERMILLE:
      return isSetCpu_core_used_permille();
    case MEM_USED_BYTES:
      return isSetMem_used_bytes();
    case NUM_RUNNING_QUERIES:
      return isSetNum_running_queries();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TResourceGroupUsage)
      return this.equals((TResourceGroupUsage)that);
    return false;
  }

  public boolean equals(TResourceGroupUsage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_group_id = true && this.isSetGroup_id();
    boolean that_present_group_id = true && that.isSetGroup_id();
    if (this_present_group_id || that_present_group_id) {
      if (!(this_present_group_id && that_present_group_id))
        return false;
      if (this.group_id != that.group_id)
        return false;
    }

    boolean this_present_cpu_core_used_permille = true && this.isSetCpu_core_used_permille();
    boolean that_present_cpu_core_used_permille = true && that.isSetCpu_core_used_permille();
    if (this_present_cpu_core_used_permille || that_present_cpu_core_used_permille) {
      if (!(this_present_cpu_core_used_permille && that_present_cpu_core_used_permille))
        return false;
      if (this.cpu_core_used_permille != that.cpu_core_used_permille)
        return false;
    }

    boolean this_present_mem_used_bytes = true && this.isSetMem_used_bytes();
    boolean that_present_mem_used_bytes = true && that.isSetMem_used_bytes();
    if (this_present_mem_used_bytes || that_present_mem_used_bytes) {
      if (!(this_present_mem_used_bytes && that_present_mem_used_bytes))
        return false;
      if (this.mem_used_bytes != that.mem_used_bytes)
        return false;
    }

    boolean this_present_num_running_queries = true && this.isSetNum_running_queries();
    boolean that_present_num_running_queries = true && that.isSetNum_running_queries();
    if (this_present_num_running_queries || that_present_num_running_queries) {
      if (!(this_present_num_running_queries && that_present_num_running_queries))
        return false;
      if (this.num_running_queries != that.num_running_queries)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGroup_id()) ? 131071 : 524287);
    if (isSetGroup_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(group_id);

    hashCode = hashCode * 8191 + ((isSetCpu_core_used_permille()) ? 131071 : 524287);
    if (isSetCpu_core_used_permille())
      hashCode = hashCode * 8191 + cpu_core_used_permille;

    hashCode = hashCode * 8191 + ((isSetMem_used_bytes()) ? 131071 : 524287);
    if (isSetMem_used_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mem_used_bytes);

    hashCode = hashCode * 8191 + ((isSetNum_running_queries()) ? 131071 : 524287);
    if (isSetNum_running_queries())
      hashCode = hashCode * 8191 + num_running_queries;

    return hashCode;
  }

  @Override
  public int compareTo(TResourceGroupUsage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetGroup_id(), other.isSetGroup_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, other.group_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCpu_core_used_permille(), other.isSetCpu_core_used_permille());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu_core_used_permille()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu_core_used_permille, other.cpu_core_used_permille);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMem_used_bytes(), other.isSetMem_used_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_used_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_used_bytes, other.mem_used_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_running_queries(), other.isSetNum_running_queries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_running_queries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_running_queries, other.num_running_queries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TResourceGroupUsage(");
    boolean first = true;

    if (isSetGroup_id()) {
      sb.append("group_id:");
      sb.append(this.group_id);
      first = false;
    }
    if (isSetCpu_core_used_permille()) {
      if (!first) sb.append(", ");
      sb.append("cpu_core_used_permille:");
      sb.append(this.cpu_core_used_permille);
      first = false;
    }
    if (isSetMem_used_bytes()) {
      if (!first) sb.append(", ");
      sb.append("mem_used_bytes:");
      sb.append(this.mem_used_bytes);
      first = false;
    }
    if (isSetNum_running_queries()) {
      if (!first) sb.append(", ");
      sb.append("num_running_queries:");
      sb.append(this.num_running_queries);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResourceGroupUsageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TResourceGroupUsageStandardScheme getScheme() {
      return new TResourceGroupUsageStandardScheme();
    }
  }

  private static class TResourceGroupUsageStandardScheme extends org.apache.thrift.scheme.StandardScheme<TResourceGroupUsage> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TResourceGroupUsage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.group_id = iprot.readI64();
              struct.setGroup_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CPU_CORE_USED_PERMILLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpu_core_used_permille = iprot.readI32();
              struct.setCpu_core_used_permilleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEM_USED_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem_used_bytes = iprot.readI64();
              struct.setMem_used_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_RUNNING_QUERIES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_running_queries = iprot.readI32();
              struct.setNum_running_queriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TResourceGroupUsage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetGroup_id()) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.group_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCpu_core_used_permille()) {
        oprot.writeFieldBegin(CPU_CORE_USED_PERMILLE_FIELD_DESC);
        oprot.writeI32(struct.cpu_core_used_permille);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMem_used_bytes()) {
        oprot.writeFieldBegin(MEM_USED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.mem_used_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_running_queries()) {
        oprot.writeFieldBegin(NUM_RUNNING_QUERIES_FIELD_DESC);
        oprot.writeI32(struct.num_running_queries);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResourceGroupUsageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TResourceGroupUsageTupleScheme getScheme() {
      return new TResourceGroupUsageTupleScheme();
    }
  }

  private static class TResourceGroupUsageTupleScheme extends org.apache.thrift.scheme.TupleScheme<TResourceGroupUsage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResourceGroupUsage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGroup_id()) {
        optionals.set(0);
      }
      if (struct.isSetCpu_core_used_permille()) {
        optionals.set(1);
      }
      if (struct.isSetMem_used_bytes()) {
        optionals.set(2);
      }
      if (struct.isSetNum_running_queries()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetGroup_id()) {
        oprot.writeI64(struct.group_id);
      }
      if (struct.isSetCpu_core_used_permille()) {
        oprot.writeI32(struct.cpu_core_used_permille);
      }
      if (struct.isSetMem_used_bytes()) {
        oprot.writeI64(struct.mem_used_bytes);
      }
      if (struct.isSetNum_running_queries()) {
        oprot.writeI32(struct.num_running_queries);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResourceGroupUsage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.group_id = iprot.readI64();
        struct.setGroup_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cpu_core_used_permille = iprot.readI32();
        struct.setCpu_core_used_permilleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mem_used_bytes = iprot.readI64();
        struct.setMem_used_bytesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.num_running_queries = iprot.readI32();
        struct.setNum_running_queriesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

