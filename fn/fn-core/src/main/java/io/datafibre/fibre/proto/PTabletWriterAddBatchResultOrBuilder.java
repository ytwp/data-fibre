// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal_service.proto

package io.datafibre.fibre.proto;

public interface PTabletWriterAddBatchResultOrBuilder extends
    // @@protoc_insertion_point(interface_extends:starrocks.PTabletWriterAddBatchResult)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>required .starrocks.StatusPB status = 1;</code>
   * @return Whether the status field is set.
   */
  boolean hasStatus();
  /**
   * <code>required .starrocks.StatusPB status = 1;</code>
   * @return The status.
   */
  io.datafibre.fibre.proto.StatusPB getStatus();
  /**
   * <code>required .starrocks.StatusPB status = 1;</code>
   */
  io.datafibre.fibre.proto.StatusPBOrBuilder getStatusOrBuilder();

  /**
   * <code>repeated .starrocks.PTabletInfo tablet_vec = 2;</code>
   */
  java.util.List<io.datafibre.fibre.proto.PTabletInfo>
      getTabletVecList();
  /**
   * <code>repeated .starrocks.PTabletInfo tablet_vec = 2;</code>
   */
  io.datafibre.fibre.proto.PTabletInfo getTabletVec(int index);
  /**
   * <code>repeated .starrocks.PTabletInfo tablet_vec = 2;</code>
   */
  int getTabletVecCount();
  /**
   * <code>repeated .starrocks.PTabletInfo tablet_vec = 2;</code>
   */
  java.util.List<? extends io.datafibre.fibre.proto.PTabletInfoOrBuilder>
      getTabletVecOrBuilderList();
  /**
   * <code>repeated .starrocks.PTabletInfo tablet_vec = 2;</code>
   */
  io.datafibre.fibre.proto.PTabletInfoOrBuilder getTabletVecOrBuilder(
      int index);

  /**
   * <code>optional int64 execution_time_us = 3;</code>
   * @return Whether the executionTimeUs field is set.
   */
  boolean hasExecutionTimeUs();
  /**
   * <code>optional int64 execution_time_us = 3;</code>
   * @return The executionTimeUs.
   */
  long getExecutionTimeUs();

  /**
   * <code>optional int64 wait_lock_time_us = 4;</code>
   * @return Whether the waitLockTimeUs field is set.
   */
  boolean hasWaitLockTimeUs();
  /**
   * <code>optional int64 wait_lock_time_us = 4;</code>
   * @return The waitLockTimeUs.
   */
  long getWaitLockTimeUs();

  /**
   * <code>repeated .starrocks.PTabletInfo failed_tablet_vec = 5;</code>
   */
  java.util.List<io.datafibre.fibre.proto.PTabletInfo>
      getFailedTabletVecList();
  /**
   * <code>repeated .starrocks.PTabletInfo failed_tablet_vec = 5;</code>
   */
  io.datafibre.fibre.proto.PTabletInfo getFailedTabletVec(int index);
  /**
   * <code>repeated .starrocks.PTabletInfo failed_tablet_vec = 5;</code>
   */
  int getFailedTabletVecCount();
  /**
   * <code>repeated .starrocks.PTabletInfo failed_tablet_vec = 5;</code>
   */
  java.util.List<? extends io.datafibre.fibre.proto.PTabletInfoOrBuilder>
      getFailedTabletVecOrBuilderList();
  /**
   * <code>repeated .starrocks.PTabletInfo failed_tablet_vec = 5;</code>
   */
  io.datafibre.fibre.proto.PTabletInfoOrBuilder getFailedTabletVecOrBuilder(
      int index);

  /**
   * <code>optional int64 wait_memtable_flush_time_us = 6;</code>
   * @return Whether the waitMemtableFlushTimeUs field is set.
   */
  boolean hasWaitMemtableFlushTimeUs();
  /**
   * <code>optional int64 wait_memtable_flush_time_us = 6;</code>
   * @return The waitMemtableFlushTimeUs.
   */
  long getWaitMemtableFlushTimeUs();

  /**
   * <code>repeated int64 immutable_tablet_ids = 7;</code>
   * @return A list containing the immutableTabletIds.
   */
  java.util.List<java.lang.Long> getImmutableTabletIdsList();
  /**
   * <code>repeated int64 immutable_tablet_ids = 7;</code>
   * @return The count of immutableTabletIds.
   */
  int getImmutableTabletIdsCount();
  /**
   * <code>repeated int64 immutable_tablet_ids = 7;</code>
   * @param index The index of the element to return.
   * @return The immutableTabletIds at the given index.
   */
  long getImmutableTabletIds(int index);

  /**
   * <code>repeated int64 immutable_partition_ids = 8;</code>
   * @return A list containing the immutablePartitionIds.
   */
  java.util.List<java.lang.Long> getImmutablePartitionIdsList();
  /**
   * <code>repeated int64 immutable_partition_ids = 8;</code>
   * @return The count of immutablePartitionIds.
   */
  int getImmutablePartitionIdsCount();
  /**
   * <code>repeated int64 immutable_partition_ids = 8;</code>
   * @param index The index of the element to return.
   * @return The immutablePartitionIds at the given index.
   */
  long getImmutablePartitionIds(int index);
}
