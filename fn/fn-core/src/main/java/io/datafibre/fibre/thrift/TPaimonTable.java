/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TPaimonTable implements org.apache.thrift.TBase<TPaimonTable, TPaimonTable._Fields>, java.io.Serializable, Cloneable, Comparable<TPaimonTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPaimonTable");

  private static final org.apache.thrift.protocol.TField PAIMON_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("paimon_options", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PAIMON_NATIVE_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("paimon_native_table", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("time_zone", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPaimonTableStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPaimonTableTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String paimon_options; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String paimon_native_table; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String time_zone; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAIMON_OPTIONS((short)1, "paimon_options"),
    PAIMON_NATIVE_TABLE((short)2, "paimon_native_table"),
    TIME_ZONE((short)3, "time_zone");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAIMON_OPTIONS
          return PAIMON_OPTIONS;
        case 2: // PAIMON_NATIVE_TABLE
          return PAIMON_NATIVE_TABLE;
        case 3: // TIME_ZONE
          return TIME_ZONE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PAIMON_OPTIONS,_Fields.PAIMON_NATIVE_TABLE,_Fields.TIME_ZONE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAIMON_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("paimon_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAIMON_NATIVE_TABLE, new org.apache.thrift.meta_data.FieldMetaData("paimon_native_table", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_ZONE, new org.apache.thrift.meta_data.FieldMetaData("time_zone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPaimonTable.class, metaDataMap);
  }

  public TPaimonTable() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPaimonTable(TPaimonTable other) {
    if (other.isSetPaimon_options()) {
      this.paimon_options = other.paimon_options;
    }
    if (other.isSetPaimon_native_table()) {
      this.paimon_native_table = other.paimon_native_table;
    }
    if (other.isSetTime_zone()) {
      this.time_zone = other.time_zone;
    }
  }

  @Override
  public TPaimonTable deepCopy() {
    return new TPaimonTable(this);
  }

  @Override
  public void clear() {
    this.paimon_options = null;
    this.paimon_native_table = null;
    this.time_zone = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPaimon_options() {
    return this.paimon_options;
  }

  public TPaimonTable setPaimon_options(@org.apache.thrift.annotation.Nullable java.lang.String paimon_options) {
    this.paimon_options = paimon_options;
    return this;
  }

  public void unsetPaimon_options() {
    this.paimon_options = null;
  }

  /** Returns true if field paimon_options is set (has been assigned a value) and false otherwise */
  public boolean isSetPaimon_options() {
    return this.paimon_options != null;
  }

  public void setPaimon_optionsIsSet(boolean value) {
    if (!value) {
      this.paimon_options = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPaimon_native_table() {
    return this.paimon_native_table;
  }

  public TPaimonTable setPaimon_native_table(@org.apache.thrift.annotation.Nullable java.lang.String paimon_native_table) {
    this.paimon_native_table = paimon_native_table;
    return this;
  }

  public void unsetPaimon_native_table() {
    this.paimon_native_table = null;
  }

  /** Returns true if field paimon_native_table is set (has been assigned a value) and false otherwise */
  public boolean isSetPaimon_native_table() {
    return this.paimon_native_table != null;
  }

  public void setPaimon_native_tableIsSet(boolean value) {
    if (!value) {
      this.paimon_native_table = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTime_zone() {
    return this.time_zone;
  }

  public TPaimonTable setTime_zone(@org.apache.thrift.annotation.Nullable java.lang.String time_zone) {
    this.time_zone = time_zone;
    return this;
  }

  public void unsetTime_zone() {
    this.time_zone = null;
  }

  /** Returns true if field time_zone is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_zone() {
    return this.time_zone != null;
  }

  public void setTime_zoneIsSet(boolean value) {
    if (!value) {
      this.time_zone = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PAIMON_OPTIONS:
      if (value == null) {
        unsetPaimon_options();
      } else {
        setPaimon_options((java.lang.String)value);
      }
      break;

    case PAIMON_NATIVE_TABLE:
      if (value == null) {
        unsetPaimon_native_table();
      } else {
        setPaimon_native_table((java.lang.String)value);
      }
      break;

    case TIME_ZONE:
      if (value == null) {
        unsetTime_zone();
      } else {
        setTime_zone((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PAIMON_OPTIONS:
      return getPaimon_options();

    case PAIMON_NATIVE_TABLE:
      return getPaimon_native_table();

    case TIME_ZONE:
      return getTime_zone();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PAIMON_OPTIONS:
      return isSetPaimon_options();
    case PAIMON_NATIVE_TABLE:
      return isSetPaimon_native_table();
    case TIME_ZONE:
      return isSetTime_zone();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TPaimonTable)
      return this.equals((TPaimonTable)that);
    return false;
  }

  public boolean equals(TPaimonTable that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_paimon_options = true && this.isSetPaimon_options();
    boolean that_present_paimon_options = true && that.isSetPaimon_options();
    if (this_present_paimon_options || that_present_paimon_options) {
      if (!(this_present_paimon_options && that_present_paimon_options))
        return false;
      if (!this.paimon_options.equals(that.paimon_options))
        return false;
    }

    boolean this_present_paimon_native_table = true && this.isSetPaimon_native_table();
    boolean that_present_paimon_native_table = true && that.isSetPaimon_native_table();
    if (this_present_paimon_native_table || that_present_paimon_native_table) {
      if (!(this_present_paimon_native_table && that_present_paimon_native_table))
        return false;
      if (!this.paimon_native_table.equals(that.paimon_native_table))
        return false;
    }

    boolean this_present_time_zone = true && this.isSetTime_zone();
    boolean that_present_time_zone = true && that.isSetTime_zone();
    if (this_present_time_zone || that_present_time_zone) {
      if (!(this_present_time_zone && that_present_time_zone))
        return false;
      if (!this.time_zone.equals(that.time_zone))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPaimon_options()) ? 131071 : 524287);
    if (isSetPaimon_options())
      hashCode = hashCode * 8191 + paimon_options.hashCode();

    hashCode = hashCode * 8191 + ((isSetPaimon_native_table()) ? 131071 : 524287);
    if (isSetPaimon_native_table())
      hashCode = hashCode * 8191 + paimon_native_table.hashCode();

    hashCode = hashCode * 8191 + ((isSetTime_zone()) ? 131071 : 524287);
    if (isSetTime_zone())
      hashCode = hashCode * 8191 + time_zone.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TPaimonTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPaimon_options(), other.isSetPaimon_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaimon_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paimon_options, other.paimon_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPaimon_native_table(), other.isSetPaimon_native_table());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaimon_native_table()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paimon_native_table, other.paimon_native_table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTime_zone(), other.isSetTime_zone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_zone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_zone, other.time_zone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPaimonTable(");
    boolean first = true;

    if (isSetPaimon_options()) {
      sb.append("paimon_options:");
      if (this.paimon_options == null) {
        sb.append("null");
      } else {
        sb.append(this.paimon_options);
      }
      first = false;
    }
    if (isSetPaimon_native_table()) {
      if (!first) sb.append(", ");
      sb.append("paimon_native_table:");
      if (this.paimon_native_table == null) {
        sb.append("null");
      } else {
        sb.append(this.paimon_native_table);
      }
      first = false;
    }
    if (isSetTime_zone()) {
      if (!first) sb.append(", ");
      sb.append("time_zone:");
      if (this.time_zone == null) {
        sb.append("null");
      } else {
        sb.append(this.time_zone);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPaimonTableStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPaimonTableStandardScheme getScheme() {
      return new TPaimonTableStandardScheme();
    }
  }

  private static class TPaimonTableStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPaimonTable> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TPaimonTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAIMON_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paimon_options = iprot.readString();
              struct.setPaimon_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAIMON_NATIVE_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paimon_native_table = iprot.readString();
              struct.setPaimon_native_tableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME_ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time_zone = iprot.readString();
              struct.setTime_zoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TPaimonTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.paimon_options != null) {
        if (struct.isSetPaimon_options()) {
          oprot.writeFieldBegin(PAIMON_OPTIONS_FIELD_DESC);
          oprot.writeString(struct.paimon_options);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paimon_native_table != null) {
        if (struct.isSetPaimon_native_table()) {
          oprot.writeFieldBegin(PAIMON_NATIVE_TABLE_FIELD_DESC);
          oprot.writeString(struct.paimon_native_table);
          oprot.writeFieldEnd();
        }
      }
      if (struct.time_zone != null) {
        if (struct.isSetTime_zone()) {
          oprot.writeFieldBegin(TIME_ZONE_FIELD_DESC);
          oprot.writeString(struct.time_zone);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPaimonTableTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPaimonTableTupleScheme getScheme() {
      return new TPaimonTableTupleScheme();
    }
  }

  private static class TPaimonTableTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPaimonTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPaimonTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPaimon_options()) {
        optionals.set(0);
      }
      if (struct.isSetPaimon_native_table()) {
        optionals.set(1);
      }
      if (struct.isSetTime_zone()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPaimon_options()) {
        oprot.writeString(struct.paimon_options);
      }
      if (struct.isSetPaimon_native_table()) {
        oprot.writeString(struct.paimon_native_table);
      }
      if (struct.isSetTime_zone()) {
        oprot.writeString(struct.time_zone);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPaimonTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.paimon_options = iprot.readString();
        struct.setPaimon_optionsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.paimon_native_table = iprot.readString();
        struct.setPaimon_native_tableIsSet(true);
      }
      if (incoming.get(2)) {
        struct.time_zone = iprot.readString();
        struct.setTime_zoneIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

