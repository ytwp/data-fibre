/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TStreamLoadInfo implements org.apache.thrift.TBase<TStreamLoadInfo, TStreamLoadInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TStreamLoadInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStreamLoadInfo");

  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LOAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("load_id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("error_msg", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TRACKING_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("tracking_url", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CHANNEL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_num", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField PREPARED_CHANNEL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("prepared_channel_num", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField NUM_ROWS_NORMAL_FIELD_DESC = new org.apache.thrift.protocol.TField("num_rows_normal", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField NUM_ROWS_AB_NORMAL_FIELD_DESC = new org.apache.thrift.protocol.TField("num_rows_ab_normal", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField NUM_ROWS_UNSELECTED_FIELD_DESC = new org.apache.thrift.protocol.TField("num_rows_unselected", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField NUM_LOAD_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_load_bytes", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField TIMEOUT_SECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout_second", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time_ms", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField BEFORE_LOAD_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("before_load_time_ms", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField START_LOADING_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("start_loading_time_ms", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField START_PREPARING_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("start_preparing_time_ms", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField FINISH_PREPARING_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("finish_preparing_time_ms", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField END_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("end_time_ms", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CHANNEL_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_state", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField TRACKING_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("tracking_sql", org.apache.thrift.protocol.TType.STRING, (short)25);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TStreamLoadInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TStreamLoadInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String label; // required
  public long id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String load_id; // required
  public long txn_id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String state; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String error_msg; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tracking_url; // required
  public long channel_num; // required
  public long prepared_channel_num; // required
  public long num_rows_normal; // required
  public long num_rows_ab_normal; // required
  public long num_rows_unselected; // required
  public long num_load_bytes; // required
  public long timeout_second; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String create_time_ms; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String before_load_time_ms; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String start_loading_time_ms; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String start_preparing_time_ms; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String finish_preparing_time_ms; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String end_time_ms; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String channel_state; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String type; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tracking_sql; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LABEL((short)1, "label"),
    ID((short)2, "id"),
    LOAD_ID((short)3, "load_id"),
    TXN_ID((short)4, "txn_id"),
    DB_NAME((short)5, "db_name"),
    TABLE_NAME((short)6, "table_name"),
    STATE((short)7, "state"),
    ERROR_MSG((short)8, "error_msg"),
    TRACKING_URL((short)9, "tracking_url"),
    CHANNEL_NUM((short)10, "channel_num"),
    PREPARED_CHANNEL_NUM((short)11, "prepared_channel_num"),
    NUM_ROWS_NORMAL((short)12, "num_rows_normal"),
    NUM_ROWS_AB_NORMAL((short)13, "num_rows_ab_normal"),
    NUM_ROWS_UNSELECTED((short)14, "num_rows_unselected"),
    NUM_LOAD_BYTES((short)15, "num_load_bytes"),
    TIMEOUT_SECOND((short)16, "timeout_second"),
    CREATE_TIME_MS((short)17, "create_time_ms"),
    BEFORE_LOAD_TIME_MS((short)18, "before_load_time_ms"),
    START_LOADING_TIME_MS((short)19, "start_loading_time_ms"),
    START_PREPARING_TIME_MS((short)20, "start_preparing_time_ms"),
    FINISH_PREPARING_TIME_MS((short)21, "finish_preparing_time_ms"),
    END_TIME_MS((short)22, "end_time_ms"),
    CHANNEL_STATE((short)23, "channel_state"),
    TYPE((short)24, "type"),
    TRACKING_SQL((short)25, "tracking_sql");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LABEL
          return LABEL;
        case 2: // ID
          return ID;
        case 3: // LOAD_ID
          return LOAD_ID;
        case 4: // TXN_ID
          return TXN_ID;
        case 5: // DB_NAME
          return DB_NAME;
        case 6: // TABLE_NAME
          return TABLE_NAME;
        case 7: // STATE
          return STATE;
        case 8: // ERROR_MSG
          return ERROR_MSG;
        case 9: // TRACKING_URL
          return TRACKING_URL;
        case 10: // CHANNEL_NUM
          return CHANNEL_NUM;
        case 11: // PREPARED_CHANNEL_NUM
          return PREPARED_CHANNEL_NUM;
        case 12: // NUM_ROWS_NORMAL
          return NUM_ROWS_NORMAL;
        case 13: // NUM_ROWS_AB_NORMAL
          return NUM_ROWS_AB_NORMAL;
        case 14: // NUM_ROWS_UNSELECTED
          return NUM_ROWS_UNSELECTED;
        case 15: // NUM_LOAD_BYTES
          return NUM_LOAD_BYTES;
        case 16: // TIMEOUT_SECOND
          return TIMEOUT_SECOND;
        case 17: // CREATE_TIME_MS
          return CREATE_TIME_MS;
        case 18: // BEFORE_LOAD_TIME_MS
          return BEFORE_LOAD_TIME_MS;
        case 19: // START_LOADING_TIME_MS
          return START_LOADING_TIME_MS;
        case 20: // START_PREPARING_TIME_MS
          return START_PREPARING_TIME_MS;
        case 21: // FINISH_PREPARING_TIME_MS
          return FINISH_PREPARING_TIME_MS;
        case 22: // END_TIME_MS
          return END_TIME_MS;
        case 23: // CHANNEL_STATE
          return CHANNEL_STATE;
        case 24: // TYPE
          return TYPE;
        case 25: // TRACKING_SQL
          return TRACKING_SQL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TXN_ID_ISSET_ID = 1;
  private static final int __CHANNEL_NUM_ISSET_ID = 2;
  private static final int __PREPARED_CHANNEL_NUM_ISSET_ID = 3;
  private static final int __NUM_ROWS_NORMAL_ISSET_ID = 4;
  private static final int __NUM_ROWS_AB_NORMAL_ISSET_ID = 5;
  private static final int __NUM_ROWS_UNSELECTED_ISSET_ID = 6;
  private static final int __NUM_LOAD_BYTES_ISSET_ID = 7;
  private static final int __TIMEOUT_SECOND_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOAD_ID, new org.apache.thrift.meta_data.FieldMetaData("load_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txn_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("error_msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACKING_URL, new org.apache.thrift.meta_data.FieldMetaData("tracking_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_NUM, new org.apache.thrift.meta_data.FieldMetaData("channel_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PREPARED_CHANNEL_NUM, new org.apache.thrift.meta_data.FieldMetaData("prepared_channel_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_ROWS_NORMAL, new org.apache.thrift.meta_data.FieldMetaData("num_rows_normal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_ROWS_AB_NORMAL, new org.apache.thrift.meta_data.FieldMetaData("num_rows_ab_normal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_ROWS_UNSELECTED, new org.apache.thrift.meta_data.FieldMetaData("num_rows_unselected", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_LOAD_BYTES, new org.apache.thrift.meta_data.FieldMetaData("num_load_bytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIMEOUT_SECOND, new org.apache.thrift.meta_data.FieldMetaData("timeout_second", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("create_time_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEFORE_LOAD_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("before_load_time_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_LOADING_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("start_loading_time_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_PREPARING_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("start_preparing_time_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINISH_PREPARING_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("finish_preparing_time_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("end_time_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_STATE, new org.apache.thrift.meta_data.FieldMetaData("channel_state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACKING_SQL, new org.apache.thrift.meta_data.FieldMetaData("tracking_sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStreamLoadInfo.class, metaDataMap);
  }

  public TStreamLoadInfo() {
  }

  public TStreamLoadInfo(
    java.lang.String label,
    long id,
    java.lang.String load_id,
    long txn_id,
    java.lang.String db_name,
    java.lang.String table_name,
    java.lang.String state,
    java.lang.String error_msg,
    java.lang.String tracking_url,
    long channel_num,
    long prepared_channel_num,
    long num_rows_normal,
    long num_rows_ab_normal,
    long num_rows_unselected,
    long num_load_bytes,
    long timeout_second,
    java.lang.String create_time_ms,
    java.lang.String before_load_time_ms,
    java.lang.String start_loading_time_ms,
    java.lang.String start_preparing_time_ms,
    java.lang.String finish_preparing_time_ms,
    java.lang.String end_time_ms,
    java.lang.String channel_state,
    java.lang.String type,
    java.lang.String tracking_sql)
  {
    this();
    this.label = label;
    this.id = id;
    setIdIsSet(true);
    this.load_id = load_id;
    this.txn_id = txn_id;
    setTxn_idIsSet(true);
    this.db_name = db_name;
    this.table_name = table_name;
    this.state = state;
    this.error_msg = error_msg;
    this.tracking_url = tracking_url;
    this.channel_num = channel_num;
    setChannel_numIsSet(true);
    this.prepared_channel_num = prepared_channel_num;
    setPrepared_channel_numIsSet(true);
    this.num_rows_normal = num_rows_normal;
    setNum_rows_normalIsSet(true);
    this.num_rows_ab_normal = num_rows_ab_normal;
    setNum_rows_ab_normalIsSet(true);
    this.num_rows_unselected = num_rows_unselected;
    setNum_rows_unselectedIsSet(true);
    this.num_load_bytes = num_load_bytes;
    setNum_load_bytesIsSet(true);
    this.timeout_second = timeout_second;
    setTimeout_secondIsSet(true);
    this.create_time_ms = create_time_ms;
    this.before_load_time_ms = before_load_time_ms;
    this.start_loading_time_ms = start_loading_time_ms;
    this.start_preparing_time_ms = start_preparing_time_ms;
    this.finish_preparing_time_ms = finish_preparing_time_ms;
    this.end_time_ms = end_time_ms;
    this.channel_state = channel_state;
    this.type = type;
    this.tracking_sql = tracking_sql;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStreamLoadInfo(TStreamLoadInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    this.id = other.id;
    if (other.isSetLoad_id()) {
      this.load_id = other.load_id;
    }
    this.txn_id = other.txn_id;
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetError_msg()) {
      this.error_msg = other.error_msg;
    }
    if (other.isSetTracking_url()) {
      this.tracking_url = other.tracking_url;
    }
    this.channel_num = other.channel_num;
    this.prepared_channel_num = other.prepared_channel_num;
    this.num_rows_normal = other.num_rows_normal;
    this.num_rows_ab_normal = other.num_rows_ab_normal;
    this.num_rows_unselected = other.num_rows_unselected;
    this.num_load_bytes = other.num_load_bytes;
    this.timeout_second = other.timeout_second;
    if (other.isSetCreate_time_ms()) {
      this.create_time_ms = other.create_time_ms;
    }
    if (other.isSetBefore_load_time_ms()) {
      this.before_load_time_ms = other.before_load_time_ms;
    }
    if (other.isSetStart_loading_time_ms()) {
      this.start_loading_time_ms = other.start_loading_time_ms;
    }
    if (other.isSetStart_preparing_time_ms()) {
      this.start_preparing_time_ms = other.start_preparing_time_ms;
    }
    if (other.isSetFinish_preparing_time_ms()) {
      this.finish_preparing_time_ms = other.finish_preparing_time_ms;
    }
    if (other.isSetEnd_time_ms()) {
      this.end_time_ms = other.end_time_ms;
    }
    if (other.isSetChannel_state()) {
      this.channel_state = other.channel_state;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetTracking_sql()) {
      this.tracking_sql = other.tracking_sql;
    }
  }

  @Override
  public TStreamLoadInfo deepCopy() {
    return new TStreamLoadInfo(this);
  }

  @Override
  public void clear() {
    this.label = null;
    setIdIsSet(false);
    this.id = 0;
    this.load_id = null;
    setTxn_idIsSet(false);
    this.txn_id = 0;
    this.db_name = null;
    this.table_name = null;
    this.state = null;
    this.error_msg = null;
    this.tracking_url = null;
    setChannel_numIsSet(false);
    this.channel_num = 0;
    setPrepared_channel_numIsSet(false);
    this.prepared_channel_num = 0;
    setNum_rows_normalIsSet(false);
    this.num_rows_normal = 0;
    setNum_rows_ab_normalIsSet(false);
    this.num_rows_ab_normal = 0;
    setNum_rows_unselectedIsSet(false);
    this.num_rows_unselected = 0;
    setNum_load_bytesIsSet(false);
    this.num_load_bytes = 0;
    setTimeout_secondIsSet(false);
    this.timeout_second = 0;
    this.create_time_ms = null;
    this.before_load_time_ms = null;
    this.start_loading_time_ms = null;
    this.start_preparing_time_ms = null;
    this.finish_preparing_time_ms = null;
    this.end_time_ms = null;
    this.channel_state = null;
    this.type = null;
    this.tracking_sql = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLabel() {
    return this.label;
  }

  public TStreamLoadInfo setLabel(@org.apache.thrift.annotation.Nullable java.lang.String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public long getId() {
    return this.id;
  }

  public TStreamLoadInfo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLoad_id() {
    return this.load_id;
  }

  public TStreamLoadInfo setLoad_id(@org.apache.thrift.annotation.Nullable java.lang.String load_id) {
    this.load_id = load_id;
    return this;
  }

  public void unsetLoad_id() {
    this.load_id = null;
  }

  /** Returns true if field load_id is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_id() {
    return this.load_id != null;
  }

  public void setLoad_idIsSet(boolean value) {
    if (!value) {
      this.load_id = null;
    }
  }

  public long getTxn_id() {
    return this.txn_id;
  }

  public TStreamLoadInfo setTxn_id(long txn_id) {
    this.txn_id = txn_id;
    setTxn_idIsSet(true);
    return this;
  }

  public void unsetTxn_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  /** Returns true if field txn_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  public void setTxn_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXN_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb_name() {
    return this.db_name;
  }

  public TStreamLoadInfo setDb_name(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_name() {
    return this.table_name;
  }

  public TStreamLoadInfo setTable_name(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getState() {
    return this.state;
  }

  public TStreamLoadInfo setState(@org.apache.thrift.annotation.Nullable java.lang.String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getError_msg() {
    return this.error_msg;
  }

  public TStreamLoadInfo setError_msg(@org.apache.thrift.annotation.Nullable java.lang.String error_msg) {
    this.error_msg = error_msg;
    return this;
  }

  public void unsetError_msg() {
    this.error_msg = null;
  }

  /** Returns true if field error_msg is set (has been assigned a value) and false otherwise */
  public boolean isSetError_msg() {
    return this.error_msg != null;
  }

  public void setError_msgIsSet(boolean value) {
    if (!value) {
      this.error_msg = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTracking_url() {
    return this.tracking_url;
  }

  public TStreamLoadInfo setTracking_url(@org.apache.thrift.annotation.Nullable java.lang.String tracking_url) {
    this.tracking_url = tracking_url;
    return this;
  }

  public void unsetTracking_url() {
    this.tracking_url = null;
  }

  /** Returns true if field tracking_url is set (has been assigned a value) and false otherwise */
  public boolean isSetTracking_url() {
    return this.tracking_url != null;
  }

  public void setTracking_urlIsSet(boolean value) {
    if (!value) {
      this.tracking_url = null;
    }
  }

  public long getChannel_num() {
    return this.channel_num;
  }

  public TStreamLoadInfo setChannel_num(long channel_num) {
    this.channel_num = channel_num;
    setChannel_numIsSet(true);
    return this;
  }

  public void unsetChannel_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_NUM_ISSET_ID);
  }

  /** Returns true if field channel_num is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_NUM_ISSET_ID);
  }

  public void setChannel_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_NUM_ISSET_ID, value);
  }

  public long getPrepared_channel_num() {
    return this.prepared_channel_num;
  }

  public TStreamLoadInfo setPrepared_channel_num(long prepared_channel_num) {
    this.prepared_channel_num = prepared_channel_num;
    setPrepared_channel_numIsSet(true);
    return this;
  }

  public void unsetPrepared_channel_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PREPARED_CHANNEL_NUM_ISSET_ID);
  }

  /** Returns true if field prepared_channel_num is set (has been assigned a value) and false otherwise */
  public boolean isSetPrepared_channel_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PREPARED_CHANNEL_NUM_ISSET_ID);
  }

  public void setPrepared_channel_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PREPARED_CHANNEL_NUM_ISSET_ID, value);
  }

  public long getNum_rows_normal() {
    return this.num_rows_normal;
  }

  public TStreamLoadInfo setNum_rows_normal(long num_rows_normal) {
    this.num_rows_normal = num_rows_normal;
    setNum_rows_normalIsSet(true);
    return this;
  }

  public void unsetNum_rows_normal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_ROWS_NORMAL_ISSET_ID);
  }

  /** Returns true if field num_rows_normal is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_rows_normal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_ROWS_NORMAL_ISSET_ID);
  }

  public void setNum_rows_normalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_ROWS_NORMAL_ISSET_ID, value);
  }

  public long getNum_rows_ab_normal() {
    return this.num_rows_ab_normal;
  }

  public TStreamLoadInfo setNum_rows_ab_normal(long num_rows_ab_normal) {
    this.num_rows_ab_normal = num_rows_ab_normal;
    setNum_rows_ab_normalIsSet(true);
    return this;
  }

  public void unsetNum_rows_ab_normal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_ROWS_AB_NORMAL_ISSET_ID);
  }

  /** Returns true if field num_rows_ab_normal is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_rows_ab_normal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_ROWS_AB_NORMAL_ISSET_ID);
  }

  public void setNum_rows_ab_normalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_ROWS_AB_NORMAL_ISSET_ID, value);
  }

  public long getNum_rows_unselected() {
    return this.num_rows_unselected;
  }

  public TStreamLoadInfo setNum_rows_unselected(long num_rows_unselected) {
    this.num_rows_unselected = num_rows_unselected;
    setNum_rows_unselectedIsSet(true);
    return this;
  }

  public void unsetNum_rows_unselected() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_ROWS_UNSELECTED_ISSET_ID);
  }

  /** Returns true if field num_rows_unselected is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_rows_unselected() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_ROWS_UNSELECTED_ISSET_ID);
  }

  public void setNum_rows_unselectedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_ROWS_UNSELECTED_ISSET_ID, value);
  }

  public long getNum_load_bytes() {
    return this.num_load_bytes;
  }

  public TStreamLoadInfo setNum_load_bytes(long num_load_bytes) {
    this.num_load_bytes = num_load_bytes;
    setNum_load_bytesIsSet(true);
    return this;
  }

  public void unsetNum_load_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_LOAD_BYTES_ISSET_ID);
  }

  /** Returns true if field num_load_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_load_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_LOAD_BYTES_ISSET_ID);
  }

  public void setNum_load_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_LOAD_BYTES_ISSET_ID, value);
  }

  public long getTimeout_second() {
    return this.timeout_second;
  }

  public TStreamLoadInfo setTimeout_second(long timeout_second) {
    this.timeout_second = timeout_second;
    setTimeout_secondIsSet(true);
    return this;
  }

  public void unsetTimeout_second() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_SECOND_ISSET_ID);
  }

  /** Returns true if field timeout_second is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout_second() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_SECOND_ISSET_ID);
  }

  public void setTimeout_secondIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_SECOND_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCreate_time_ms() {
    return this.create_time_ms;
  }

  public TStreamLoadInfo setCreate_time_ms(@org.apache.thrift.annotation.Nullable java.lang.String create_time_ms) {
    this.create_time_ms = create_time_ms;
    return this;
  }

  public void unsetCreate_time_ms() {
    this.create_time_ms = null;
  }

  /** Returns true if field create_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time_ms() {
    return this.create_time_ms != null;
  }

  public void setCreate_time_msIsSet(boolean value) {
    if (!value) {
      this.create_time_ms = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBefore_load_time_ms() {
    return this.before_load_time_ms;
  }

  public TStreamLoadInfo setBefore_load_time_ms(@org.apache.thrift.annotation.Nullable java.lang.String before_load_time_ms) {
    this.before_load_time_ms = before_load_time_ms;
    return this;
  }

  public void unsetBefore_load_time_ms() {
    this.before_load_time_ms = null;
  }

  /** Returns true if field before_load_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetBefore_load_time_ms() {
    return this.before_load_time_ms != null;
  }

  public void setBefore_load_time_msIsSet(boolean value) {
    if (!value) {
      this.before_load_time_ms = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStart_loading_time_ms() {
    return this.start_loading_time_ms;
  }

  public TStreamLoadInfo setStart_loading_time_ms(@org.apache.thrift.annotation.Nullable java.lang.String start_loading_time_ms) {
    this.start_loading_time_ms = start_loading_time_ms;
    return this;
  }

  public void unsetStart_loading_time_ms() {
    this.start_loading_time_ms = null;
  }

  /** Returns true if field start_loading_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_loading_time_ms() {
    return this.start_loading_time_ms != null;
  }

  public void setStart_loading_time_msIsSet(boolean value) {
    if (!value) {
      this.start_loading_time_ms = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStart_preparing_time_ms() {
    return this.start_preparing_time_ms;
  }

  public TStreamLoadInfo setStart_preparing_time_ms(@org.apache.thrift.annotation.Nullable java.lang.String start_preparing_time_ms) {
    this.start_preparing_time_ms = start_preparing_time_ms;
    return this;
  }

  public void unsetStart_preparing_time_ms() {
    this.start_preparing_time_ms = null;
  }

  /** Returns true if field start_preparing_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_preparing_time_ms() {
    return this.start_preparing_time_ms != null;
  }

  public void setStart_preparing_time_msIsSet(boolean value) {
    if (!value) {
      this.start_preparing_time_ms = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFinish_preparing_time_ms() {
    return this.finish_preparing_time_ms;
  }

  public TStreamLoadInfo setFinish_preparing_time_ms(@org.apache.thrift.annotation.Nullable java.lang.String finish_preparing_time_ms) {
    this.finish_preparing_time_ms = finish_preparing_time_ms;
    return this;
  }

  public void unsetFinish_preparing_time_ms() {
    this.finish_preparing_time_ms = null;
  }

  /** Returns true if field finish_preparing_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetFinish_preparing_time_ms() {
    return this.finish_preparing_time_ms != null;
  }

  public void setFinish_preparing_time_msIsSet(boolean value) {
    if (!value) {
      this.finish_preparing_time_ms = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEnd_time_ms() {
    return this.end_time_ms;
  }

  public TStreamLoadInfo setEnd_time_ms(@org.apache.thrift.annotation.Nullable java.lang.String end_time_ms) {
    this.end_time_ms = end_time_ms;
    return this;
  }

  public void unsetEnd_time_ms() {
    this.end_time_ms = null;
  }

  /** Returns true if field end_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_time_ms() {
    return this.end_time_ms != null;
  }

  public void setEnd_time_msIsSet(boolean value) {
    if (!value) {
      this.end_time_ms = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getChannel_state() {
    return this.channel_state;
  }

  public TStreamLoadInfo setChannel_state(@org.apache.thrift.annotation.Nullable java.lang.String channel_state) {
    this.channel_state = channel_state;
    return this;
  }

  public void unsetChannel_state() {
    this.channel_state = null;
  }

  /** Returns true if field channel_state is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_state() {
    return this.channel_state != null;
  }

  public void setChannel_stateIsSet(boolean value) {
    if (!value) {
      this.channel_state = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getType() {
    return this.type;
  }

  public TStreamLoadInfo setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTracking_sql() {
    return this.tracking_sql;
  }

  public TStreamLoadInfo setTracking_sql(@org.apache.thrift.annotation.Nullable java.lang.String tracking_sql) {
    this.tracking_sql = tracking_sql;
    return this;
  }

  public void unsetTracking_sql() {
    this.tracking_sql = null;
  }

  /** Returns true if field tracking_sql is set (has been assigned a value) and false otherwise */
  public boolean isSetTracking_sql() {
    return this.tracking_sql != null;
  }

  public void setTracking_sqlIsSet(boolean value) {
    if (!value) {
      this.tracking_sql = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((java.lang.String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case LOAD_ID:
      if (value == null) {
        unsetLoad_id();
      } else {
        setLoad_id((java.lang.String)value);
      }
      break;

    case TXN_ID:
      if (value == null) {
        unsetTxn_id();
      } else {
        setTxn_id((java.lang.Long)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((java.lang.String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.String)value);
      }
      break;

    case ERROR_MSG:
      if (value == null) {
        unsetError_msg();
      } else {
        setError_msg((java.lang.String)value);
      }
      break;

    case TRACKING_URL:
      if (value == null) {
        unsetTracking_url();
      } else {
        setTracking_url((java.lang.String)value);
      }
      break;

    case CHANNEL_NUM:
      if (value == null) {
        unsetChannel_num();
      } else {
        setChannel_num((java.lang.Long)value);
      }
      break;

    case PREPARED_CHANNEL_NUM:
      if (value == null) {
        unsetPrepared_channel_num();
      } else {
        setPrepared_channel_num((java.lang.Long)value);
      }
      break;

    case NUM_ROWS_NORMAL:
      if (value == null) {
        unsetNum_rows_normal();
      } else {
        setNum_rows_normal((java.lang.Long)value);
      }
      break;

    case NUM_ROWS_AB_NORMAL:
      if (value == null) {
        unsetNum_rows_ab_normal();
      } else {
        setNum_rows_ab_normal((java.lang.Long)value);
      }
      break;

    case NUM_ROWS_UNSELECTED:
      if (value == null) {
        unsetNum_rows_unselected();
      } else {
        setNum_rows_unselected((java.lang.Long)value);
      }
      break;

    case NUM_LOAD_BYTES:
      if (value == null) {
        unsetNum_load_bytes();
      } else {
        setNum_load_bytes((java.lang.Long)value);
      }
      break;

    case TIMEOUT_SECOND:
      if (value == null) {
        unsetTimeout_second();
      } else {
        setTimeout_second((java.lang.Long)value);
      }
      break;

    case CREATE_TIME_MS:
      if (value == null) {
        unsetCreate_time_ms();
      } else {
        setCreate_time_ms((java.lang.String)value);
      }
      break;

    case BEFORE_LOAD_TIME_MS:
      if (value == null) {
        unsetBefore_load_time_ms();
      } else {
        setBefore_load_time_ms((java.lang.String)value);
      }
      break;

    case START_LOADING_TIME_MS:
      if (value == null) {
        unsetStart_loading_time_ms();
      } else {
        setStart_loading_time_ms((java.lang.String)value);
      }
      break;

    case START_PREPARING_TIME_MS:
      if (value == null) {
        unsetStart_preparing_time_ms();
      } else {
        setStart_preparing_time_ms((java.lang.String)value);
      }
      break;

    case FINISH_PREPARING_TIME_MS:
      if (value == null) {
        unsetFinish_preparing_time_ms();
      } else {
        setFinish_preparing_time_ms((java.lang.String)value);
      }
      break;

    case END_TIME_MS:
      if (value == null) {
        unsetEnd_time_ms();
      } else {
        setEnd_time_ms((java.lang.String)value);
      }
      break;

    case CHANNEL_STATE:
      if (value == null) {
        unsetChannel_state();
      } else {
        setChannel_state((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case TRACKING_SQL:
      if (value == null) {
        unsetTracking_sql();
      } else {
        setTracking_sql((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LABEL:
      return getLabel();

    case ID:
      return getId();

    case LOAD_ID:
      return getLoad_id();

    case TXN_ID:
      return getTxn_id();

    case DB_NAME:
      return getDb_name();

    case TABLE_NAME:
      return getTable_name();

    case STATE:
      return getState();

    case ERROR_MSG:
      return getError_msg();

    case TRACKING_URL:
      return getTracking_url();

    case CHANNEL_NUM:
      return getChannel_num();

    case PREPARED_CHANNEL_NUM:
      return getPrepared_channel_num();

    case NUM_ROWS_NORMAL:
      return getNum_rows_normal();

    case NUM_ROWS_AB_NORMAL:
      return getNum_rows_ab_normal();

    case NUM_ROWS_UNSELECTED:
      return getNum_rows_unselected();

    case NUM_LOAD_BYTES:
      return getNum_load_bytes();

    case TIMEOUT_SECOND:
      return getTimeout_second();

    case CREATE_TIME_MS:
      return getCreate_time_ms();

    case BEFORE_LOAD_TIME_MS:
      return getBefore_load_time_ms();

    case START_LOADING_TIME_MS:
      return getStart_loading_time_ms();

    case START_PREPARING_TIME_MS:
      return getStart_preparing_time_ms();

    case FINISH_PREPARING_TIME_MS:
      return getFinish_preparing_time_ms();

    case END_TIME_MS:
      return getEnd_time_ms();

    case CHANNEL_STATE:
      return getChannel_state();

    case TYPE:
      return getType();

    case TRACKING_SQL:
      return getTracking_sql();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LABEL:
      return isSetLabel();
    case ID:
      return isSetId();
    case LOAD_ID:
      return isSetLoad_id();
    case TXN_ID:
      return isSetTxn_id();
    case DB_NAME:
      return isSetDb_name();
    case TABLE_NAME:
      return isSetTable_name();
    case STATE:
      return isSetState();
    case ERROR_MSG:
      return isSetError_msg();
    case TRACKING_URL:
      return isSetTracking_url();
    case CHANNEL_NUM:
      return isSetChannel_num();
    case PREPARED_CHANNEL_NUM:
      return isSetPrepared_channel_num();
    case NUM_ROWS_NORMAL:
      return isSetNum_rows_normal();
    case NUM_ROWS_AB_NORMAL:
      return isSetNum_rows_ab_normal();
    case NUM_ROWS_UNSELECTED:
      return isSetNum_rows_unselected();
    case NUM_LOAD_BYTES:
      return isSetNum_load_bytes();
    case TIMEOUT_SECOND:
      return isSetTimeout_second();
    case CREATE_TIME_MS:
      return isSetCreate_time_ms();
    case BEFORE_LOAD_TIME_MS:
      return isSetBefore_load_time_ms();
    case START_LOADING_TIME_MS:
      return isSetStart_loading_time_ms();
    case START_PREPARING_TIME_MS:
      return isSetStart_preparing_time_ms();
    case FINISH_PREPARING_TIME_MS:
      return isSetFinish_preparing_time_ms();
    case END_TIME_MS:
      return isSetEnd_time_ms();
    case CHANNEL_STATE:
      return isSetChannel_state();
    case TYPE:
      return isSetType();
    case TRACKING_SQL:
      return isSetTracking_sql();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TStreamLoadInfo)
      return this.equals((TStreamLoadInfo)that);
    return false;
  }

  public boolean equals(TStreamLoadInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_load_id = true && this.isSetLoad_id();
    boolean that_present_load_id = true && that.isSetLoad_id();
    if (this_present_load_id || that_present_load_id) {
      if (!(this_present_load_id && that_present_load_id))
        return false;
      if (!this.load_id.equals(that.load_id))
        return false;
    }

    boolean this_present_txn_id = true;
    boolean that_present_txn_id = true;
    if (this_present_txn_id || that_present_txn_id) {
      if (!(this_present_txn_id && that_present_txn_id))
        return false;
      if (this.txn_id != that.txn_id)
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_error_msg = true && this.isSetError_msg();
    boolean that_present_error_msg = true && that.isSetError_msg();
    if (this_present_error_msg || that_present_error_msg) {
      if (!(this_present_error_msg && that_present_error_msg))
        return false;
      if (!this.error_msg.equals(that.error_msg))
        return false;
    }

    boolean this_present_tracking_url = true && this.isSetTracking_url();
    boolean that_present_tracking_url = true && that.isSetTracking_url();
    if (this_present_tracking_url || that_present_tracking_url) {
      if (!(this_present_tracking_url && that_present_tracking_url))
        return false;
      if (!this.tracking_url.equals(that.tracking_url))
        return false;
    }

    boolean this_present_channel_num = true;
    boolean that_present_channel_num = true;
    if (this_present_channel_num || that_present_channel_num) {
      if (!(this_present_channel_num && that_present_channel_num))
        return false;
      if (this.channel_num != that.channel_num)
        return false;
    }

    boolean this_present_prepared_channel_num = true;
    boolean that_present_prepared_channel_num = true;
    if (this_present_prepared_channel_num || that_present_prepared_channel_num) {
      if (!(this_present_prepared_channel_num && that_present_prepared_channel_num))
        return false;
      if (this.prepared_channel_num != that.prepared_channel_num)
        return false;
    }

    boolean this_present_num_rows_normal = true;
    boolean that_present_num_rows_normal = true;
    if (this_present_num_rows_normal || that_present_num_rows_normal) {
      if (!(this_present_num_rows_normal && that_present_num_rows_normal))
        return false;
      if (this.num_rows_normal != that.num_rows_normal)
        return false;
    }

    boolean this_present_num_rows_ab_normal = true;
    boolean that_present_num_rows_ab_normal = true;
    if (this_present_num_rows_ab_normal || that_present_num_rows_ab_normal) {
      if (!(this_present_num_rows_ab_normal && that_present_num_rows_ab_normal))
        return false;
      if (this.num_rows_ab_normal != that.num_rows_ab_normal)
        return false;
    }

    boolean this_present_num_rows_unselected = true;
    boolean that_present_num_rows_unselected = true;
    if (this_present_num_rows_unselected || that_present_num_rows_unselected) {
      if (!(this_present_num_rows_unselected && that_present_num_rows_unselected))
        return false;
      if (this.num_rows_unselected != that.num_rows_unselected)
        return false;
    }

    boolean this_present_num_load_bytes = true;
    boolean that_present_num_load_bytes = true;
    if (this_present_num_load_bytes || that_present_num_load_bytes) {
      if (!(this_present_num_load_bytes && that_present_num_load_bytes))
        return false;
      if (this.num_load_bytes != that.num_load_bytes)
        return false;
    }

    boolean this_present_timeout_second = true;
    boolean that_present_timeout_second = true;
    if (this_present_timeout_second || that_present_timeout_second) {
      if (!(this_present_timeout_second && that_present_timeout_second))
        return false;
      if (this.timeout_second != that.timeout_second)
        return false;
    }

    boolean this_present_create_time_ms = true && this.isSetCreate_time_ms();
    boolean that_present_create_time_ms = true && that.isSetCreate_time_ms();
    if (this_present_create_time_ms || that_present_create_time_ms) {
      if (!(this_present_create_time_ms && that_present_create_time_ms))
        return false;
      if (!this.create_time_ms.equals(that.create_time_ms))
        return false;
    }

    boolean this_present_before_load_time_ms = true && this.isSetBefore_load_time_ms();
    boolean that_present_before_load_time_ms = true && that.isSetBefore_load_time_ms();
    if (this_present_before_load_time_ms || that_present_before_load_time_ms) {
      if (!(this_present_before_load_time_ms && that_present_before_load_time_ms))
        return false;
      if (!this.before_load_time_ms.equals(that.before_load_time_ms))
        return false;
    }

    boolean this_present_start_loading_time_ms = true && this.isSetStart_loading_time_ms();
    boolean that_present_start_loading_time_ms = true && that.isSetStart_loading_time_ms();
    if (this_present_start_loading_time_ms || that_present_start_loading_time_ms) {
      if (!(this_present_start_loading_time_ms && that_present_start_loading_time_ms))
        return false;
      if (!this.start_loading_time_ms.equals(that.start_loading_time_ms))
        return false;
    }

    boolean this_present_start_preparing_time_ms = true && this.isSetStart_preparing_time_ms();
    boolean that_present_start_preparing_time_ms = true && that.isSetStart_preparing_time_ms();
    if (this_present_start_preparing_time_ms || that_present_start_preparing_time_ms) {
      if (!(this_present_start_preparing_time_ms && that_present_start_preparing_time_ms))
        return false;
      if (!this.start_preparing_time_ms.equals(that.start_preparing_time_ms))
        return false;
    }

    boolean this_present_finish_preparing_time_ms = true && this.isSetFinish_preparing_time_ms();
    boolean that_present_finish_preparing_time_ms = true && that.isSetFinish_preparing_time_ms();
    if (this_present_finish_preparing_time_ms || that_present_finish_preparing_time_ms) {
      if (!(this_present_finish_preparing_time_ms && that_present_finish_preparing_time_ms))
        return false;
      if (!this.finish_preparing_time_ms.equals(that.finish_preparing_time_ms))
        return false;
    }

    boolean this_present_end_time_ms = true && this.isSetEnd_time_ms();
    boolean that_present_end_time_ms = true && that.isSetEnd_time_ms();
    if (this_present_end_time_ms || that_present_end_time_ms) {
      if (!(this_present_end_time_ms && that_present_end_time_ms))
        return false;
      if (!this.end_time_ms.equals(that.end_time_ms))
        return false;
    }

    boolean this_present_channel_state = true && this.isSetChannel_state();
    boolean that_present_channel_state = true && that.isSetChannel_state();
    if (this_present_channel_state || that_present_channel_state) {
      if (!(this_present_channel_state && that_present_channel_state))
        return false;
      if (!this.channel_state.equals(that.channel_state))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_tracking_sql = true && this.isSetTracking_sql();
    boolean that_present_tracking_sql = true && that.isSetTracking_sql();
    if (this_present_tracking_sql || that_present_tracking_sql) {
      if (!(this_present_tracking_sql && that_present_tracking_sql))
        return false;
      if (!this.tracking_sql.equals(that.tracking_sql))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLabel()) ? 131071 : 524287);
    if (isSetLabel())
      hashCode = hashCode * 8191 + label.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetLoad_id()) ? 131071 : 524287);
    if (isSetLoad_id())
      hashCode = hashCode * 8191 + load_id.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txn_id);

    hashCode = hashCode * 8191 + ((isSetDb_name()) ? 131071 : 524287);
    if (isSetDb_name())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.hashCode();

    hashCode = hashCode * 8191 + ((isSetError_msg()) ? 131071 : 524287);
    if (isSetError_msg())
      hashCode = hashCode * 8191 + error_msg.hashCode();

    hashCode = hashCode * 8191 + ((isSetTracking_url()) ? 131071 : 524287);
    if (isSetTracking_url())
      hashCode = hashCode * 8191 + tracking_url.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(channel_num);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(prepared_channel_num);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(num_rows_normal);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(num_rows_ab_normal);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(num_rows_unselected);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(num_load_bytes);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeout_second);

    hashCode = hashCode * 8191 + ((isSetCreate_time_ms()) ? 131071 : 524287);
    if (isSetCreate_time_ms())
      hashCode = hashCode * 8191 + create_time_ms.hashCode();

    hashCode = hashCode * 8191 + ((isSetBefore_load_time_ms()) ? 131071 : 524287);
    if (isSetBefore_load_time_ms())
      hashCode = hashCode * 8191 + before_load_time_ms.hashCode();

    hashCode = hashCode * 8191 + ((isSetStart_loading_time_ms()) ? 131071 : 524287);
    if (isSetStart_loading_time_ms())
      hashCode = hashCode * 8191 + start_loading_time_ms.hashCode();

    hashCode = hashCode * 8191 + ((isSetStart_preparing_time_ms()) ? 131071 : 524287);
    if (isSetStart_preparing_time_ms())
      hashCode = hashCode * 8191 + start_preparing_time_ms.hashCode();

    hashCode = hashCode * 8191 + ((isSetFinish_preparing_time_ms()) ? 131071 : 524287);
    if (isSetFinish_preparing_time_ms())
      hashCode = hashCode * 8191 + finish_preparing_time_ms.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnd_time_ms()) ? 131071 : 524287);
    if (isSetEnd_time_ms())
      hashCode = hashCode * 8191 + end_time_ms.hashCode();

    hashCode = hashCode * 8191 + ((isSetChannel_state()) ? 131071 : 524287);
    if (isSetChannel_state())
      hashCode = hashCode * 8191 + channel_state.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetTracking_sql()) ? 131071 : 524287);
    if (isSetTracking_sql())
      hashCode = hashCode * 8191 + tracking_sql.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TStreamLoadInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLabel(), other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoad_id(), other.isSetLoad_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_id, other.load_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxn_id(), other.isSetTxn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_id, other.txn_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb_name(), other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_name(), other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetError_msg(), other.isSetError_msg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_msg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_msg, other.error_msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTracking_url(), other.isSetTracking_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTracking_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracking_url, other.tracking_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChannel_num(), other.isSetChannel_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_num, other.channel_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPrepared_channel_num(), other.isSetPrepared_channel_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrepared_channel_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prepared_channel_num, other.prepared_channel_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_rows_normal(), other.isSetNum_rows_normal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_rows_normal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_rows_normal, other.num_rows_normal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_rows_ab_normal(), other.isSetNum_rows_ab_normal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_rows_ab_normal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_rows_ab_normal, other.num_rows_ab_normal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_rows_unselected(), other.isSetNum_rows_unselected());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_rows_unselected()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_rows_unselected, other.num_rows_unselected);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_load_bytes(), other.isSetNum_load_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_load_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_load_bytes, other.num_load_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimeout_second(), other.isSetTimeout_second());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout_second()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout_second, other.timeout_second);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreate_time_ms(), other.isSetCreate_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time_ms, other.create_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBefore_load_time_ms(), other.isSetBefore_load_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBefore_load_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.before_load_time_ms, other.before_load_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStart_loading_time_ms(), other.isSetStart_loading_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_loading_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_loading_time_ms, other.start_loading_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStart_preparing_time_ms(), other.isSetStart_preparing_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_preparing_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_preparing_time_ms, other.start_preparing_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFinish_preparing_time_ms(), other.isSetFinish_preparing_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinish_preparing_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish_preparing_time_ms, other.finish_preparing_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnd_time_ms(), other.isSetEnd_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_time_ms, other.end_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChannel_state(), other.isSetChannel_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_state, other.channel_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTracking_sql(), other.isSetTracking_sql());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTracking_sql()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracking_sql, other.tracking_sql);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TStreamLoadInfo(");
    boolean first = true;

    sb.append("label:");
    if (this.label == null) {
      sb.append("null");
    } else {
      sb.append(this.label);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("load_id:");
    if (this.load_id == null) {
      sb.append("null");
    } else {
      sb.append(this.load_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("txn_id:");
    sb.append(this.txn_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("db_name:");
    if (this.db_name == null) {
      sb.append("null");
    } else {
      sb.append(this.db_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("table_name:");
    if (this.table_name == null) {
      sb.append("null");
    } else {
      sb.append(this.table_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("error_msg:");
    if (this.error_msg == null) {
      sb.append("null");
    } else {
      sb.append(this.error_msg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tracking_url:");
    if (this.tracking_url == null) {
      sb.append("null");
    } else {
      sb.append(this.tracking_url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_num:");
    sb.append(this.channel_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prepared_channel_num:");
    sb.append(this.prepared_channel_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_rows_normal:");
    sb.append(this.num_rows_normal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_rows_ab_normal:");
    sb.append(this.num_rows_ab_normal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_rows_unselected:");
    sb.append(this.num_rows_unselected);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_load_bytes:");
    sb.append(this.num_load_bytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeout_second:");
    sb.append(this.timeout_second);
    first = false;
    if (!first) sb.append(", ");
    sb.append("create_time_ms:");
    if (this.create_time_ms == null) {
      sb.append("null");
    } else {
      sb.append(this.create_time_ms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("before_load_time_ms:");
    if (this.before_load_time_ms == null) {
      sb.append("null");
    } else {
      sb.append(this.before_load_time_ms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_loading_time_ms:");
    if (this.start_loading_time_ms == null) {
      sb.append("null");
    } else {
      sb.append(this.start_loading_time_ms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_preparing_time_ms:");
    if (this.start_preparing_time_ms == null) {
      sb.append("null");
    } else {
      sb.append(this.start_preparing_time_ms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("finish_preparing_time_ms:");
    if (this.finish_preparing_time_ms == null) {
      sb.append("null");
    } else {
      sb.append(this.finish_preparing_time_ms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_time_ms:");
    if (this.end_time_ms == null) {
      sb.append("null");
    } else {
      sb.append(this.end_time_ms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_state:");
    if (this.channel_state == null) {
      sb.append("null");
    } else {
      sb.append(this.channel_state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tracking_sql:");
    if (this.tracking_sql == null) {
      sb.append("null");
    } else {
      sb.append(this.tracking_sql);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStreamLoadInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamLoadInfoStandardScheme getScheme() {
      return new TStreamLoadInfoStandardScheme();
    }
  }

  private static class TStreamLoadInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TStreamLoadInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TStreamLoadInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.load_id = iprot.readString();
              struct.setLoad_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txn_id = iprot.readI64();
              struct.setTxn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ERROR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error_msg = iprot.readString();
              struct.setError_msgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRACKING_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tracking_url = iprot.readString();
              struct.setTracking_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CHANNEL_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.channel_num = iprot.readI64();
              struct.setChannel_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PREPARED_CHANNEL_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.prepared_channel_num = iprot.readI64();
              struct.setPrepared_channel_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NUM_ROWS_NORMAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_rows_normal = iprot.readI64();
              struct.setNum_rows_normalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NUM_ROWS_AB_NORMAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_rows_ab_normal = iprot.readI64();
              struct.setNum_rows_ab_normalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NUM_ROWS_UNSELECTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_rows_unselected = iprot.readI64();
              struct.setNum_rows_unselectedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NUM_LOAD_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_load_bytes = iprot.readI64();
              struct.setNum_load_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TIMEOUT_SECOND
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeout_second = iprot.readI64();
              struct.setTimeout_secondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time_ms = iprot.readString();
              struct.setCreate_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BEFORE_LOAD_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.before_load_time_ms = iprot.readString();
              struct.setBefore_load_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // START_LOADING_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.start_loading_time_ms = iprot.readString();
              struct.setStart_loading_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // START_PREPARING_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.start_preparing_time_ms = iprot.readString();
              struct.setStart_preparing_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // FINISH_PREPARING_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.finish_preparing_time_ms = iprot.readString();
              struct.setFinish_preparing_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // END_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.end_time_ms = iprot.readString();
              struct.setEnd_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CHANNEL_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel_state = iprot.readString();
              struct.setChannel_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TRACKING_SQL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tracking_sql = iprot.readString();
              struct.setTracking_sqlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TStreamLoadInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.label != null) {
        oprot.writeFieldBegin(LABEL_FIELD_DESC);
        oprot.writeString(struct.label);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.load_id != null) {
        oprot.writeFieldBegin(LOAD_ID_FIELD_DESC);
        oprot.writeString(struct.load_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
      oprot.writeI64(struct.txn_id);
      oprot.writeFieldEnd();
      if (struct.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.db_name);
        oprot.writeFieldEnd();
      }
      if (struct.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.table_name);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeString(struct.state);
        oprot.writeFieldEnd();
      }
      if (struct.error_msg != null) {
        oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
        oprot.writeString(struct.error_msg);
        oprot.writeFieldEnd();
      }
      if (struct.tracking_url != null) {
        oprot.writeFieldBegin(TRACKING_URL_FIELD_DESC);
        oprot.writeString(struct.tracking_url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHANNEL_NUM_FIELD_DESC);
      oprot.writeI64(struct.channel_num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PREPARED_CHANNEL_NUM_FIELD_DESC);
      oprot.writeI64(struct.prepared_channel_num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_ROWS_NORMAL_FIELD_DESC);
      oprot.writeI64(struct.num_rows_normal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_ROWS_AB_NORMAL_FIELD_DESC);
      oprot.writeI64(struct.num_rows_ab_normal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_ROWS_UNSELECTED_FIELD_DESC);
      oprot.writeI64(struct.num_rows_unselected);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_LOAD_BYTES_FIELD_DESC);
      oprot.writeI64(struct.num_load_bytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMEOUT_SECOND_FIELD_DESC);
      oprot.writeI64(struct.timeout_second);
      oprot.writeFieldEnd();
      if (struct.create_time_ms != null) {
        oprot.writeFieldBegin(CREATE_TIME_MS_FIELD_DESC);
        oprot.writeString(struct.create_time_ms);
        oprot.writeFieldEnd();
      }
      if (struct.before_load_time_ms != null) {
        oprot.writeFieldBegin(BEFORE_LOAD_TIME_MS_FIELD_DESC);
        oprot.writeString(struct.before_load_time_ms);
        oprot.writeFieldEnd();
      }
      if (struct.start_loading_time_ms != null) {
        oprot.writeFieldBegin(START_LOADING_TIME_MS_FIELD_DESC);
        oprot.writeString(struct.start_loading_time_ms);
        oprot.writeFieldEnd();
      }
      if (struct.start_preparing_time_ms != null) {
        oprot.writeFieldBegin(START_PREPARING_TIME_MS_FIELD_DESC);
        oprot.writeString(struct.start_preparing_time_ms);
        oprot.writeFieldEnd();
      }
      if (struct.finish_preparing_time_ms != null) {
        oprot.writeFieldBegin(FINISH_PREPARING_TIME_MS_FIELD_DESC);
        oprot.writeString(struct.finish_preparing_time_ms);
        oprot.writeFieldEnd();
      }
      if (struct.end_time_ms != null) {
        oprot.writeFieldBegin(END_TIME_MS_FIELD_DESC);
        oprot.writeString(struct.end_time_ms);
        oprot.writeFieldEnd();
      }
      if (struct.channel_state != null) {
        oprot.writeFieldBegin(CHANNEL_STATE_FIELD_DESC);
        oprot.writeString(struct.channel_state);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.tracking_sql != null) {
        oprot.writeFieldBegin(TRACKING_SQL_FIELD_DESC);
        oprot.writeString(struct.tracking_sql);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStreamLoadInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamLoadInfoTupleScheme getScheme() {
      return new TStreamLoadInfoTupleScheme();
    }
  }

  private static class TStreamLoadInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TStreamLoadInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStreamLoadInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLabel()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetLoad_id()) {
        optionals.set(2);
      }
      if (struct.isSetTxn_id()) {
        optionals.set(3);
      }
      if (struct.isSetDb_name()) {
        optionals.set(4);
      }
      if (struct.isSetTable_name()) {
        optionals.set(5);
      }
      if (struct.isSetState()) {
        optionals.set(6);
      }
      if (struct.isSetError_msg()) {
        optionals.set(7);
      }
      if (struct.isSetTracking_url()) {
        optionals.set(8);
      }
      if (struct.isSetChannel_num()) {
        optionals.set(9);
      }
      if (struct.isSetPrepared_channel_num()) {
        optionals.set(10);
      }
      if (struct.isSetNum_rows_normal()) {
        optionals.set(11);
      }
      if (struct.isSetNum_rows_ab_normal()) {
        optionals.set(12);
      }
      if (struct.isSetNum_rows_unselected()) {
        optionals.set(13);
      }
      if (struct.isSetNum_load_bytes()) {
        optionals.set(14);
      }
      if (struct.isSetTimeout_second()) {
        optionals.set(15);
      }
      if (struct.isSetCreate_time_ms()) {
        optionals.set(16);
      }
      if (struct.isSetBefore_load_time_ms()) {
        optionals.set(17);
      }
      if (struct.isSetStart_loading_time_ms()) {
        optionals.set(18);
      }
      if (struct.isSetStart_preparing_time_ms()) {
        optionals.set(19);
      }
      if (struct.isSetFinish_preparing_time_ms()) {
        optionals.set(20);
      }
      if (struct.isSetEnd_time_ms()) {
        optionals.set(21);
      }
      if (struct.isSetChannel_state()) {
        optionals.set(22);
      }
      if (struct.isSetType()) {
        optionals.set(23);
      }
      if (struct.isSetTracking_sql()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetLoad_id()) {
        oprot.writeString(struct.load_id);
      }
      if (struct.isSetTxn_id()) {
        oprot.writeI64(struct.txn_id);
      }
      if (struct.isSetDb_name()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetError_msg()) {
        oprot.writeString(struct.error_msg);
      }
      if (struct.isSetTracking_url()) {
        oprot.writeString(struct.tracking_url);
      }
      if (struct.isSetChannel_num()) {
        oprot.writeI64(struct.channel_num);
      }
      if (struct.isSetPrepared_channel_num()) {
        oprot.writeI64(struct.prepared_channel_num);
      }
      if (struct.isSetNum_rows_normal()) {
        oprot.writeI64(struct.num_rows_normal);
      }
      if (struct.isSetNum_rows_ab_normal()) {
        oprot.writeI64(struct.num_rows_ab_normal);
      }
      if (struct.isSetNum_rows_unselected()) {
        oprot.writeI64(struct.num_rows_unselected);
      }
      if (struct.isSetNum_load_bytes()) {
        oprot.writeI64(struct.num_load_bytes);
      }
      if (struct.isSetTimeout_second()) {
        oprot.writeI64(struct.timeout_second);
      }
      if (struct.isSetCreate_time_ms()) {
        oprot.writeString(struct.create_time_ms);
      }
      if (struct.isSetBefore_load_time_ms()) {
        oprot.writeString(struct.before_load_time_ms);
      }
      if (struct.isSetStart_loading_time_ms()) {
        oprot.writeString(struct.start_loading_time_ms);
      }
      if (struct.isSetStart_preparing_time_ms()) {
        oprot.writeString(struct.start_preparing_time_ms);
      }
      if (struct.isSetFinish_preparing_time_ms()) {
        oprot.writeString(struct.finish_preparing_time_ms);
      }
      if (struct.isSetEnd_time_ms()) {
        oprot.writeString(struct.end_time_ms);
      }
      if (struct.isSetChannel_state()) {
        oprot.writeString(struct.channel_state);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetTracking_sql()) {
        oprot.writeString(struct.tracking_sql);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStreamLoadInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.load_id = iprot.readString();
        struct.setLoad_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.txn_id = iprot.readI64();
        struct.setTxn_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.db_name = iprot.readString();
        struct.setDb_nameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.error_msg = iprot.readString();
        struct.setError_msgIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tracking_url = iprot.readString();
        struct.setTracking_urlIsSet(true);
      }
      if (incoming.get(9)) {
        struct.channel_num = iprot.readI64();
        struct.setChannel_numIsSet(true);
      }
      if (incoming.get(10)) {
        struct.prepared_channel_num = iprot.readI64();
        struct.setPrepared_channel_numIsSet(true);
      }
      if (incoming.get(11)) {
        struct.num_rows_normal = iprot.readI64();
        struct.setNum_rows_normalIsSet(true);
      }
      if (incoming.get(12)) {
        struct.num_rows_ab_normal = iprot.readI64();
        struct.setNum_rows_ab_normalIsSet(true);
      }
      if (incoming.get(13)) {
        struct.num_rows_unselected = iprot.readI64();
        struct.setNum_rows_unselectedIsSet(true);
      }
      if (incoming.get(14)) {
        struct.num_load_bytes = iprot.readI64();
        struct.setNum_load_bytesIsSet(true);
      }
      if (incoming.get(15)) {
        struct.timeout_second = iprot.readI64();
        struct.setTimeout_secondIsSet(true);
      }
      if (incoming.get(16)) {
        struct.create_time_ms = iprot.readString();
        struct.setCreate_time_msIsSet(true);
      }
      if (incoming.get(17)) {
        struct.before_load_time_ms = iprot.readString();
        struct.setBefore_load_time_msIsSet(true);
      }
      if (incoming.get(18)) {
        struct.start_loading_time_ms = iprot.readString();
        struct.setStart_loading_time_msIsSet(true);
      }
      if (incoming.get(19)) {
        struct.start_preparing_time_ms = iprot.readString();
        struct.setStart_preparing_time_msIsSet(true);
      }
      if (incoming.get(20)) {
        struct.finish_preparing_time_ms = iprot.readString();
        struct.setFinish_preparing_time_msIsSet(true);
      }
      if (incoming.get(21)) {
        struct.end_time_ms = iprot.readString();
        struct.setEnd_time_msIsSet(true);
      }
      if (incoming.get(22)) {
        struct.channel_state = iprot.readString();
        struct.setChannel_stateIsSet(true);
      }
      if (incoming.get(23)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.tracking_sql = iprot.readString();
        struct.setTracking_sqlIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

