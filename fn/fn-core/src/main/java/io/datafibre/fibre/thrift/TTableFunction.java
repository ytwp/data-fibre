/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TTableFunction implements org.apache.thrift.TBase<TTableFunction, TTableFunction._Fields>, java.io.Serializable, Cloneable, Comparable<TTableFunction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableFunction");

  private static final org.apache.thrift.protocol.TField RET_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("ret_types", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("symbol", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTableFunctionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTableFunctionTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<TTypeDesc> ret_types; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String symbol; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RET_TYPES((short)1, "ret_types"),
    SYMBOL((short)2, "symbol");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RET_TYPES
          return RET_TYPES;
        case 2: // SYMBOL
          return SYMBOL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SYMBOL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RET_TYPES, new org.apache.thrift.meta_data.FieldMetaData("ret_types", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTypeDesc.class))));
    tmpMap.put(_Fields.SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("symbol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableFunction.class, metaDataMap);
  }

  public TTableFunction() {
  }

  public TTableFunction(
    java.util.List<TTypeDesc> ret_types)
  {
    this();
    this.ret_types = ret_types;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableFunction(TTableFunction other) {
    if (other.isSetRet_types()) {
      java.util.List<TTypeDesc> __this__ret_types = new java.util.ArrayList<TTypeDesc>(other.ret_types.size());
      for (TTypeDesc other_element : other.ret_types) {
        __this__ret_types.add(new TTypeDesc(other_element));
      }
      this.ret_types = __this__ret_types;
    }
    if (other.isSetSymbol()) {
      this.symbol = other.symbol;
    }
  }

  @Override
  public TTableFunction deepCopy() {
    return new TTableFunction(this);
  }

  @Override
  public void clear() {
    this.ret_types = null;
    this.symbol = null;
  }

  public int getRet_typesSize() {
    return (this.ret_types == null) ? 0 : this.ret_types.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TTypeDesc> getRet_typesIterator() {
    return (this.ret_types == null) ? null : this.ret_types.iterator();
  }

  public void addToRet_types(TTypeDesc elem) {
    if (this.ret_types == null) {
      this.ret_types = new java.util.ArrayList<TTypeDesc>();
    }
    this.ret_types.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TTypeDesc> getRet_types() {
    return this.ret_types;
  }

  public TTableFunction setRet_types(@org.apache.thrift.annotation.Nullable java.util.List<TTypeDesc> ret_types) {
    this.ret_types = ret_types;
    return this;
  }

  public void unsetRet_types() {
    this.ret_types = null;
  }

  /** Returns true if field ret_types is set (has been assigned a value) and false otherwise */
  public boolean isSetRet_types() {
    return this.ret_types != null;
  }

  public void setRet_typesIsSet(boolean value) {
    if (!value) {
      this.ret_types = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSymbol() {
    return this.symbol;
  }

  public TTableFunction setSymbol(@org.apache.thrift.annotation.Nullable java.lang.String symbol) {
    this.symbol = symbol;
    return this;
  }

  public void unsetSymbol() {
    this.symbol = null;
  }

  /** Returns true if field symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetSymbol() {
    return this.symbol != null;
  }

  public void setSymbolIsSet(boolean value) {
    if (!value) {
      this.symbol = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case RET_TYPES:
      if (value == null) {
        unsetRet_types();
      } else {
        setRet_types((java.util.List<TTypeDesc>)value);
      }
      break;

    case SYMBOL:
      if (value == null) {
        unsetSymbol();
      } else {
        setSymbol((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RET_TYPES:
      return getRet_types();

    case SYMBOL:
      return getSymbol();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RET_TYPES:
      return isSetRet_types();
    case SYMBOL:
      return isSetSymbol();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTableFunction)
      return this.equals((TTableFunction)that);
    return false;
  }

  public boolean equals(TTableFunction that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ret_types = true && this.isSetRet_types();
    boolean that_present_ret_types = true && that.isSetRet_types();
    if (this_present_ret_types || that_present_ret_types) {
      if (!(this_present_ret_types && that_present_ret_types))
        return false;
      if (!this.ret_types.equals(that.ret_types))
        return false;
    }

    boolean this_present_symbol = true && this.isSetSymbol();
    boolean that_present_symbol = true && that.isSetSymbol();
    if (this_present_symbol || that_present_symbol) {
      if (!(this_present_symbol && that_present_symbol))
        return false;
      if (!this.symbol.equals(that.symbol))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRet_types()) ? 131071 : 524287);
    if (isSetRet_types())
      hashCode = hashCode * 8191 + ret_types.hashCode();

    hashCode = hashCode * 8191 + ((isSetSymbol()) ? 131071 : 524287);
    if (isSetSymbol())
      hashCode = hashCode * 8191 + symbol.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TTableFunction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetRet_types(), other.isSetRet_types());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRet_types()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ret_types, other.ret_types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSymbol(), other.isSetSymbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSymbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbol, other.symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTableFunction(");
    boolean first = true;

    sb.append("ret_types:");
    if (this.ret_types == null) {
      sb.append("null");
    } else {
      sb.append(this.ret_types);
    }
    first = false;
    if (isSetSymbol()) {
      if (!first) sb.append(", ");
      sb.append("symbol:");
      if (this.symbol == null) {
        sb.append("null");
      } else {
        sb.append(this.symbol);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ret_types == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ret_types' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableFunctionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTableFunctionStandardScheme getScheme() {
      return new TTableFunctionStandardScheme();
    }
  }

  private static class TTableFunctionStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTableFunction> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableFunction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RET_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.ret_types = new java.util.ArrayList<TTypeDesc>(_list32.size);
                @org.apache.thrift.annotation.Nullable TTypeDesc _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new TTypeDesc();
                  _elem33.read(iprot);
                  struct.ret_types.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setRet_typesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.symbol = iprot.readString();
              struct.setSymbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableFunction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ret_types != null) {
        oprot.writeFieldBegin(RET_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ret_types.size()));
          for (TTypeDesc _iter35 : struct.ret_types)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.symbol != null) {
        if (struct.isSetSymbol()) {
          oprot.writeFieldBegin(SYMBOL_FIELD_DESC);
          oprot.writeString(struct.symbol);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableFunctionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTableFunctionTupleScheme getScheme() {
      return new TTableFunctionTupleScheme();
    }
  }

  private static class TTableFunctionTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTableFunction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableFunction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.ret_types.size());
        for (TTypeDesc _iter36 : struct.ret_types)
        {
          _iter36.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSymbol()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSymbol()) {
        oprot.writeString(struct.symbol);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableFunction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list37 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.ret_types = new java.util.ArrayList<TTypeDesc>(_list37.size);
        @org.apache.thrift.annotation.Nullable TTypeDesc _elem38;
        for (int _i39 = 0; _i39 < _list37.size; ++_i39)
        {
          _elem38 = new TTypeDesc();
          _elem38.read(iprot);
          struct.ret_types.add(_elem38);
        }
      }
      struct.setRet_typesIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.symbol = iprot.readString();
        struct.setSymbolIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

