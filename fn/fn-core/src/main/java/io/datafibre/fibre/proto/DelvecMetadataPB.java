// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lake_types.proto

package io.datafibre.fibre.proto;

/**
 * Protobuf type {@code starrocks.lake.DelvecMetadataPB}
 */
public final class DelvecMetadataPB extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:starrocks.lake.DelvecMetadataPB)
    DelvecMetadataPBOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DelvecMetadataPB.newBuilder() to construct.
  private DelvecMetadataPB(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DelvecMetadataPB() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DelvecMetadataPB();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.datafibre.fibre.proto.LakeTypes.internal_static_starrocks_lake_DelvecMetadataPB_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 1:
        return internalGetVersionToFile();
      case 2:
        return internalGetDelvecs();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.datafibre.fibre.proto.LakeTypes.internal_static_starrocks_lake_DelvecMetadataPB_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.datafibre.fibre.proto.DelvecMetadataPB.class, io.datafibre.fibre.proto.DelvecMetadataPB.Builder.class);
  }

  public static final int VERSION_TO_FILE_FIELD_NUMBER = 1;
  private static final class VersionToFileDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Long, io.datafibre.fibre.proto.FileMetaPB> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB>newDefaultInstance(
                io.datafibre.fibre.proto.LakeTypes.internal_static_starrocks_lake_DelvecMetadataPB_VersionToFileEntry_descriptor,
                com.google.protobuf.WireFormat.FieldType.INT64,
                0L,
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                io.datafibre.fibre.proto.FileMetaPB.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.Long, io.datafibre.fibre.proto.FileMetaPB> versionToFile_;
  private com.google.protobuf.MapField<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB>
  internalGetVersionToFile() {
    if (versionToFile_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          VersionToFileDefaultEntryHolder.defaultEntry);
    }
    return versionToFile_;
  }

  public int getVersionToFileCount() {
    return internalGetVersionToFile().getMap().size();
  }
  /**
   * <pre>
   * map from version to delete vector file meta
   * so that we no need to keep file name (consume more memory) in each DelvecPagePB
   * instead we can lookup delete vector file name by version saved in DelvecPagePB
   * </pre>
   *
   * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
   */

  @java.lang.Override
  public boolean containsVersionToFile(
      long key) {
    
    return internalGetVersionToFile().getMap().containsKey(key);
  }
  /**
   * Use {@link #getVersionToFileMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB> getVersionToFile() {
    return getVersionToFileMap();
  }
  /**
   * <pre>
   * map from version to delete vector file meta
   * so that we no need to keep file name (consume more memory) in each DelvecPagePB
   * instead we can lookup delete vector file name by version saved in DelvecPagePB
   * </pre>
   *
   * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB> getVersionToFileMap() {
    return internalGetVersionToFile().getMap();
  }
  /**
   * <pre>
   * map from version to delete vector file meta
   * so that we no need to keep file name (consume more memory) in each DelvecPagePB
   * instead we can lookup delete vector file name by version saved in DelvecPagePB
   * </pre>
   *
   * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
   */
  @java.lang.Override

  public io.datafibre.fibre.proto.FileMetaPB getVersionToFileOrDefault(
      long key,
      io.datafibre.fibre.proto.FileMetaPB defaultValue) {
    
    java.util.Map<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB> map =
        internalGetVersionToFile().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * map from version to delete vector file meta
   * so that we no need to keep file name (consume more memory) in each DelvecPagePB
   * instead we can lookup delete vector file name by version saved in DelvecPagePB
   * </pre>
   *
   * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
   */
  @java.lang.Override

  public io.datafibre.fibre.proto.FileMetaPB getVersionToFileOrThrow(
      long key) {
    
    java.util.Map<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB> map =
        internalGetVersionToFile().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int DELVECS_FIELD_NUMBER = 2;
  private static final class DelvecsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB>newDefaultInstance(
                io.datafibre.fibre.proto.LakeTypes.internal_static_starrocks_lake_DelvecMetadataPB_DelvecsEntry_descriptor,
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0,
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                io.datafibre.fibre.proto.DelvecPagePB.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB> delvecs_;
  private com.google.protobuf.MapField<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB>
  internalGetDelvecs() {
    if (delvecs_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          DelvecsDefaultEntryHolder.defaultEntry);
    }
    return delvecs_;
  }

  public int getDelvecsCount() {
    return internalGetDelvecs().getMap().size();
  }
  /**
   * <pre>
   * from segment id to delvec page
   * </pre>
   *
   * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
   */

  @java.lang.Override
  public boolean containsDelvecs(
      int key) {
    
    return internalGetDelvecs().getMap().containsKey(key);
  }
  /**
   * Use {@link #getDelvecsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB> getDelvecs() {
    return getDelvecsMap();
  }
  /**
   * <pre>
   * from segment id to delvec page
   * </pre>
   *
   * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB> getDelvecsMap() {
    return internalGetDelvecs().getMap();
  }
  /**
   * <pre>
   * from segment id to delvec page
   * </pre>
   *
   * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
   */
  @java.lang.Override

  public io.datafibre.fibre.proto.DelvecPagePB getDelvecsOrDefault(
      int key,
      io.datafibre.fibre.proto.DelvecPagePB defaultValue) {
    
    java.util.Map<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB> map =
        internalGetDelvecs().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * from segment id to delvec page
   * </pre>
   *
   * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
   */
  @java.lang.Override

  public io.datafibre.fibre.proto.DelvecPagePB getDelvecsOrThrow(
      int key) {
    
    java.util.Map<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB> map =
        internalGetDelvecs().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3
      .serializeLongMapTo(
        output,
        internalGetVersionToFile(),
        VersionToFileDefaultEntryHolder.defaultEntry,
        1);
    com.google.protobuf.GeneratedMessageV3
      .serializeIntegerMapTo(
        output,
        internalGetDelvecs(),
        DelvecsDefaultEntryHolder.defaultEntry,
        2);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB> entry
         : internalGetVersionToFile().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB>
      versionToFile__ = VersionToFileDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, versionToFile__);
    }
    for (java.util.Map.Entry<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB> entry
         : internalGetDelvecs().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB>
      delvecs__ = DelvecsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, delvecs__);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.datafibre.fibre.proto.DelvecMetadataPB)) {
      return super.equals(obj);
    }
    io.datafibre.fibre.proto.DelvecMetadataPB other = (io.datafibre.fibre.proto.DelvecMetadataPB) obj;

    if (!internalGetVersionToFile().equals(
        other.internalGetVersionToFile())) return false;
    if (!internalGetDelvecs().equals(
        other.internalGetDelvecs())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (!internalGetVersionToFile().getMap().isEmpty()) {
      hash = (37 * hash) + VERSION_TO_FILE_FIELD_NUMBER;
      hash = (53 * hash) + internalGetVersionToFile().hashCode();
    }
    if (!internalGetDelvecs().getMap().isEmpty()) {
      hash = (37 * hash) + DELVECS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetDelvecs().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.datafibre.fibre.proto.DelvecMetadataPB parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.datafibre.fibre.proto.DelvecMetadataPB parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.datafibre.fibre.proto.DelvecMetadataPB parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.datafibre.fibre.proto.DelvecMetadataPB parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.datafibre.fibre.proto.DelvecMetadataPB parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.datafibre.fibre.proto.DelvecMetadataPB parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.datafibre.fibre.proto.DelvecMetadataPB parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.datafibre.fibre.proto.DelvecMetadataPB parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.datafibre.fibre.proto.DelvecMetadataPB parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.datafibre.fibre.proto.DelvecMetadataPB parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.datafibre.fibre.proto.DelvecMetadataPB parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.datafibre.fibre.proto.DelvecMetadataPB parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.datafibre.fibre.proto.DelvecMetadataPB prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code starrocks.lake.DelvecMetadataPB}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:starrocks.lake.DelvecMetadataPB)
      io.datafibre.fibre.proto.DelvecMetadataPBOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.datafibre.fibre.proto.LakeTypes.internal_static_starrocks_lake_DelvecMetadataPB_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetVersionToFile();
        case 2:
          return internalGetDelvecs();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetMutableVersionToFile();
        case 2:
          return internalGetMutableDelvecs();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.datafibre.fibre.proto.LakeTypes.internal_static_starrocks_lake_DelvecMetadataPB_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.datafibre.fibre.proto.DelvecMetadataPB.class, io.datafibre.fibre.proto.DelvecMetadataPB.Builder.class);
    }

    // Construct using io.datafibre.fibre.proto.DelvecMetadataPB.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      internalGetMutableVersionToFile().clear();
      internalGetMutableDelvecs().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.datafibre.fibre.proto.LakeTypes.internal_static_starrocks_lake_DelvecMetadataPB_descriptor;
    }

    @java.lang.Override
    public io.datafibre.fibre.proto.DelvecMetadataPB getDefaultInstanceForType() {
      return io.datafibre.fibre.proto.DelvecMetadataPB.getDefaultInstance();
    }

    @java.lang.Override
    public io.datafibre.fibre.proto.DelvecMetadataPB build() {
      io.datafibre.fibre.proto.DelvecMetadataPB result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.datafibre.fibre.proto.DelvecMetadataPB buildPartial() {
      io.datafibre.fibre.proto.DelvecMetadataPB result = new io.datafibre.fibre.proto.DelvecMetadataPB(this);
      int from_bitField0_ = bitField0_;
      result.versionToFile_ = internalGetVersionToFile();
      result.versionToFile_.makeImmutable();
      result.delvecs_ = internalGetDelvecs();
      result.delvecs_.makeImmutable();
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.datafibre.fibre.proto.DelvecMetadataPB) {
        return mergeFrom((io.datafibre.fibre.proto.DelvecMetadataPB)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.datafibre.fibre.proto.DelvecMetadataPB other) {
      if (other == io.datafibre.fibre.proto.DelvecMetadataPB.getDefaultInstance()) return this;
      internalGetMutableVersionToFile().mergeFrom(
          other.internalGetVersionToFile());
      internalGetMutableDelvecs().mergeFrom(
          other.internalGetDelvecs());
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.MapEntry<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB>
              versionToFile__ = input.readMessage(
                  VersionToFileDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableVersionToFile().getMutableMap().put(
                  versionToFile__.getKey(), versionToFile__.getValue());
              break;
            } // case 10
            case 18: {
              com.google.protobuf.MapEntry<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB>
              delvecs__ = input.readMessage(
                  DelvecsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableDelvecs().getMutableMap().put(
                  delvecs__.getKey(), delvecs__.getValue());
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.MapField<
        java.lang.Long, io.datafibre.fibre.proto.FileMetaPB> versionToFile_;
    private com.google.protobuf.MapField<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB>
    internalGetVersionToFile() {
      if (versionToFile_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            VersionToFileDefaultEntryHolder.defaultEntry);
      }
      return versionToFile_;
    }
    private com.google.protobuf.MapField<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB>
    internalGetMutableVersionToFile() {
      onChanged();;
      if (versionToFile_ == null) {
        versionToFile_ = com.google.protobuf.MapField.newMapField(
            VersionToFileDefaultEntryHolder.defaultEntry);
      }
      if (!versionToFile_.isMutable()) {
        versionToFile_ = versionToFile_.copy();
      }
      return versionToFile_;
    }

    public int getVersionToFileCount() {
      return internalGetVersionToFile().getMap().size();
    }
    /**
     * <pre>
     * map from version to delete vector file meta
     * so that we no need to keep file name (consume more memory) in each DelvecPagePB
     * instead we can lookup delete vector file name by version saved in DelvecPagePB
     * </pre>
     *
     * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
     */

    @java.lang.Override
    public boolean containsVersionToFile(
        long key) {
      
      return internalGetVersionToFile().getMap().containsKey(key);
    }
    /**
     * Use {@link #getVersionToFileMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB> getVersionToFile() {
      return getVersionToFileMap();
    }
    /**
     * <pre>
     * map from version to delete vector file meta
     * so that we no need to keep file name (consume more memory) in each DelvecPagePB
     * instead we can lookup delete vector file name by version saved in DelvecPagePB
     * </pre>
     *
     * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB> getVersionToFileMap() {
      return internalGetVersionToFile().getMap();
    }
    /**
     * <pre>
     * map from version to delete vector file meta
     * so that we no need to keep file name (consume more memory) in each DelvecPagePB
     * instead we can lookup delete vector file name by version saved in DelvecPagePB
     * </pre>
     *
     * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
     */
    @java.lang.Override

    public io.datafibre.fibre.proto.FileMetaPB getVersionToFileOrDefault(
        long key,
        io.datafibre.fibre.proto.FileMetaPB defaultValue) {
      
      java.util.Map<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB> map =
          internalGetVersionToFile().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * map from version to delete vector file meta
     * so that we no need to keep file name (consume more memory) in each DelvecPagePB
     * instead we can lookup delete vector file name by version saved in DelvecPagePB
     * </pre>
     *
     * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
     */
    @java.lang.Override

    public io.datafibre.fibre.proto.FileMetaPB getVersionToFileOrThrow(
        long key) {
      
      java.util.Map<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB> map =
          internalGetVersionToFile().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearVersionToFile() {
      internalGetMutableVersionToFile().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * map from version to delete vector file meta
     * so that we no need to keep file name (consume more memory) in each DelvecPagePB
     * instead we can lookup delete vector file name by version saved in DelvecPagePB
     * </pre>
     *
     * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
     */

    public Builder removeVersionToFile(
        long key) {
      
      internalGetMutableVersionToFile().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB>
    getMutableVersionToFile() {
      return internalGetMutableVersionToFile().getMutableMap();
    }
    /**
     * <pre>
     * map from version to delete vector file meta
     * so that we no need to keep file name (consume more memory) in each DelvecPagePB
     * instead we can lookup delete vector file name by version saved in DelvecPagePB
     * </pre>
     *
     * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
     */
    public Builder putVersionToFile(
        long key,
        io.datafibre.fibre.proto.FileMetaPB value) {
      
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableVersionToFile().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * map from version to delete vector file meta
     * so that we no need to keep file name (consume more memory) in each DelvecPagePB
     * instead we can lookup delete vector file name by version saved in DelvecPagePB
     * </pre>
     *
     * <code>map&lt;int64, .starrocks.lake.FileMetaPB&gt; version_to_file = 1;</code>
     */

    public Builder putAllVersionToFile(
        java.util.Map<java.lang.Long, io.datafibre.fibre.proto.FileMetaPB> values) {
      internalGetMutableVersionToFile().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB> delvecs_;
    private com.google.protobuf.MapField<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB>
    internalGetDelvecs() {
      if (delvecs_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            DelvecsDefaultEntryHolder.defaultEntry);
      }
      return delvecs_;
    }
    private com.google.protobuf.MapField<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB>
    internalGetMutableDelvecs() {
      onChanged();;
      if (delvecs_ == null) {
        delvecs_ = com.google.protobuf.MapField.newMapField(
            DelvecsDefaultEntryHolder.defaultEntry);
      }
      if (!delvecs_.isMutable()) {
        delvecs_ = delvecs_.copy();
      }
      return delvecs_;
    }

    public int getDelvecsCount() {
      return internalGetDelvecs().getMap().size();
    }
    /**
     * <pre>
     * from segment id to delvec page
     * </pre>
     *
     * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
     */

    @java.lang.Override
    public boolean containsDelvecs(
        int key) {
      
      return internalGetDelvecs().getMap().containsKey(key);
    }
    /**
     * Use {@link #getDelvecsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB> getDelvecs() {
      return getDelvecsMap();
    }
    /**
     * <pre>
     * from segment id to delvec page
     * </pre>
     *
     * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB> getDelvecsMap() {
      return internalGetDelvecs().getMap();
    }
    /**
     * <pre>
     * from segment id to delvec page
     * </pre>
     *
     * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
     */
    @java.lang.Override

    public io.datafibre.fibre.proto.DelvecPagePB getDelvecsOrDefault(
        int key,
        io.datafibre.fibre.proto.DelvecPagePB defaultValue) {
      
      java.util.Map<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB> map =
          internalGetDelvecs().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * from segment id to delvec page
     * </pre>
     *
     * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
     */
    @java.lang.Override

    public io.datafibre.fibre.proto.DelvecPagePB getDelvecsOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB> map =
          internalGetDelvecs().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearDelvecs() {
      internalGetMutableDelvecs().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * from segment id to delvec page
     * </pre>
     *
     * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
     */

    public Builder removeDelvecs(
        int key) {
      
      internalGetMutableDelvecs().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB>
    getMutableDelvecs() {
      return internalGetMutableDelvecs().getMutableMap();
    }
    /**
     * <pre>
     * from segment id to delvec page
     * </pre>
     *
     * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
     */
    public Builder putDelvecs(
        int key,
        io.datafibre.fibre.proto.DelvecPagePB value) {
      
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableDelvecs().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * from segment id to delvec page
     * </pre>
     *
     * <code>map&lt;uint32, .starrocks.lake.DelvecPagePB&gt; delvecs = 2;</code>
     */

    public Builder putAllDelvecs(
        java.util.Map<java.lang.Integer, io.datafibre.fibre.proto.DelvecPagePB> values) {
      internalGetMutableDelvecs().getMutableMap()
          .putAll(values);
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:starrocks.lake.DelvecMetadataPB)
  }

  // @@protoc_insertion_point(class_scope:starrocks.lake.DelvecMetadataPB)
  private static final io.datafibre.fibre.proto.DelvecMetadataPB DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.datafibre.fibre.proto.DelvecMetadataPB();
  }

  public static io.datafibre.fibre.proto.DelvecMetadataPB getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<DelvecMetadataPB>
      PARSER = new com.google.protobuf.AbstractParser<DelvecMetadataPB>() {
    @java.lang.Override
    public DelvecMetadataPB parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<DelvecMetadataPB> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DelvecMetadataPB> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.datafibre.fibre.proto.DelvecMetadataPB getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

