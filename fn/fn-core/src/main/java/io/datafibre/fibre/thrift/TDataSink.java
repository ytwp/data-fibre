/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TDataSink implements org.apache.thrift.TBase<TDataSink, TDataSink._Fields>, java.io.Serializable, Cloneable, Comparable<TDataSink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDataSink");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STREAM_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("stream_sink", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("result_sink", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField MYSQL_TABLE_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("mysql_table_sink", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField EXPORT_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("export_sink", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField OLAP_TABLE_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("olap_table_sink", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField MEMORY_SCRATCH_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("memory_scratch_sink", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField MULTI_CAST_STREAM_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("multi_cast_stream_sink", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField SCHEMA_TABLE_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_table_sink", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField ICEBERG_TABLE_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("iceberg_table_sink", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField HIVE_TABLE_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("hive_table_sink", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField TABLE_FUNCTION_TABLE_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("table_function_table_sink", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField DICTIONARY_CACHE_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("dictionary_cache_sink", org.apache.thrift.protocol.TType.STRUCT, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDataSinkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDataSinkTupleSchemeFactory();

  /**
   * 
   * @see TDataSinkType
   */
  public @org.apache.thrift.annotation.Nullable TDataSinkType type; // required
  public @org.apache.thrift.annotation.Nullable TDataStreamSink stream_sink; // optional
  public @org.apache.thrift.annotation.Nullable TResultSink result_sink; // optional
  public @org.apache.thrift.annotation.Nullable TMysqlTableSink mysql_table_sink; // optional
  public @org.apache.thrift.annotation.Nullable TExportSink export_sink; // optional
  public @org.apache.thrift.annotation.Nullable TOlapTableSink olap_table_sink; // optional
  public @org.apache.thrift.annotation.Nullable TMemoryScratchSink memory_scratch_sink; // optional
  public @org.apache.thrift.annotation.Nullable TMultiCastDataStreamSink multi_cast_stream_sink; // optional
  public @org.apache.thrift.annotation.Nullable TSchemaTableSink schema_table_sink; // optional
  public @org.apache.thrift.annotation.Nullable TIcebergTableSink iceberg_table_sink; // optional
  public @org.apache.thrift.annotation.Nullable THiveTableSink hive_table_sink; // optional
  public @org.apache.thrift.annotation.Nullable TTableFunctionTableSink table_function_table_sink; // optional
  public @org.apache.thrift.annotation.Nullable TDictionaryCacheSink dictionary_cache_sink; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TDataSinkType
     */
    TYPE((short)1, "type"),
    STREAM_SINK((short)2, "stream_sink"),
    RESULT_SINK((short)3, "result_sink"),
    MYSQL_TABLE_SINK((short)5, "mysql_table_sink"),
    EXPORT_SINK((short)6, "export_sink"),
    OLAP_TABLE_SINK((short)7, "olap_table_sink"),
    MEMORY_SCRATCH_SINK((short)8, "memory_scratch_sink"),
    MULTI_CAST_STREAM_SINK((short)9, "multi_cast_stream_sink"),
    SCHEMA_TABLE_SINK((short)10, "schema_table_sink"),
    ICEBERG_TABLE_SINK((short)11, "iceberg_table_sink"),
    HIVE_TABLE_SINK((short)12, "hive_table_sink"),
    TABLE_FUNCTION_TABLE_SINK((short)13, "table_function_table_sink"),
    DICTIONARY_CACHE_SINK((short)14, "dictionary_cache_sink");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // STREAM_SINK
          return STREAM_SINK;
        case 3: // RESULT_SINK
          return RESULT_SINK;
        case 5: // MYSQL_TABLE_SINK
          return MYSQL_TABLE_SINK;
        case 6: // EXPORT_SINK
          return EXPORT_SINK;
        case 7: // OLAP_TABLE_SINK
          return OLAP_TABLE_SINK;
        case 8: // MEMORY_SCRATCH_SINK
          return MEMORY_SCRATCH_SINK;
        case 9: // MULTI_CAST_STREAM_SINK
          return MULTI_CAST_STREAM_SINK;
        case 10: // SCHEMA_TABLE_SINK
          return SCHEMA_TABLE_SINK;
        case 11: // ICEBERG_TABLE_SINK
          return ICEBERG_TABLE_SINK;
        case 12: // HIVE_TABLE_SINK
          return HIVE_TABLE_SINK;
        case 13: // TABLE_FUNCTION_TABLE_SINK
          return TABLE_FUNCTION_TABLE_SINK;
        case 14: // DICTIONARY_CACHE_SINK
          return DICTIONARY_CACHE_SINK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.STREAM_SINK,_Fields.RESULT_SINK,_Fields.MYSQL_TABLE_SINK,_Fields.EXPORT_SINK,_Fields.OLAP_TABLE_SINK,_Fields.MEMORY_SCRATCH_SINK,_Fields.MULTI_CAST_STREAM_SINK,_Fields.SCHEMA_TABLE_SINK,_Fields.ICEBERG_TABLE_SINK,_Fields.HIVE_TABLE_SINK,_Fields.TABLE_FUNCTION_TABLE_SINK,_Fields.DICTIONARY_CACHE_SINK};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDataSinkType.class)));
    tmpMap.put(_Fields.STREAM_SINK, new org.apache.thrift.meta_data.FieldMetaData("stream_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDataStreamSink.class)));
    tmpMap.put(_Fields.RESULT_SINK, new org.apache.thrift.meta_data.FieldMetaData("result_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResultSink.class)));
    tmpMap.put(_Fields.MYSQL_TABLE_SINK, new org.apache.thrift.meta_data.FieldMetaData("mysql_table_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMysqlTableSink.class)));
    tmpMap.put(_Fields.EXPORT_SINK, new org.apache.thrift.meta_data.FieldMetaData("export_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExportSink.class)));
    tmpMap.put(_Fields.OLAP_TABLE_SINK, new org.apache.thrift.meta_data.FieldMetaData("olap_table_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlapTableSink.class)));
    tmpMap.put(_Fields.MEMORY_SCRATCH_SINK, new org.apache.thrift.meta_data.FieldMetaData("memory_scratch_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMemoryScratchSink.class)));
    tmpMap.put(_Fields.MULTI_CAST_STREAM_SINK, new org.apache.thrift.meta_data.FieldMetaData("multi_cast_stream_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMultiCastDataStreamSink.class)));
    tmpMap.put(_Fields.SCHEMA_TABLE_SINK, new org.apache.thrift.meta_data.FieldMetaData("schema_table_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSchemaTableSink.class)));
    tmpMap.put(_Fields.ICEBERG_TABLE_SINK, new org.apache.thrift.meta_data.FieldMetaData("iceberg_table_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIcebergTableSink.class)));
    tmpMap.put(_Fields.HIVE_TABLE_SINK, new org.apache.thrift.meta_data.FieldMetaData("hive_table_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THiveTableSink.class)));
    tmpMap.put(_Fields.TABLE_FUNCTION_TABLE_SINK, new org.apache.thrift.meta_data.FieldMetaData("table_function_table_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableFunctionTableSink.class)));
    tmpMap.put(_Fields.DICTIONARY_CACHE_SINK, new org.apache.thrift.meta_data.FieldMetaData("dictionary_cache_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDictionaryCacheSink.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDataSink.class, metaDataMap);
  }

  public TDataSink() {
  }

  public TDataSink(
    TDataSinkType type)
  {
    this();
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDataSink(TDataSink other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetStream_sink()) {
      this.stream_sink = new TDataStreamSink(other.stream_sink);
    }
    if (other.isSetResult_sink()) {
      this.result_sink = new TResultSink(other.result_sink);
    }
    if (other.isSetMysql_table_sink()) {
      this.mysql_table_sink = new TMysqlTableSink(other.mysql_table_sink);
    }
    if (other.isSetExport_sink()) {
      this.export_sink = new TExportSink(other.export_sink);
    }
    if (other.isSetOlap_table_sink()) {
      this.olap_table_sink = new TOlapTableSink(other.olap_table_sink);
    }
    if (other.isSetMemory_scratch_sink()) {
      this.memory_scratch_sink = new TMemoryScratchSink(other.memory_scratch_sink);
    }
    if (other.isSetMulti_cast_stream_sink()) {
      this.multi_cast_stream_sink = new TMultiCastDataStreamSink(other.multi_cast_stream_sink);
    }
    if (other.isSetSchema_table_sink()) {
      this.schema_table_sink = new TSchemaTableSink(other.schema_table_sink);
    }
    if (other.isSetIceberg_table_sink()) {
      this.iceberg_table_sink = new TIcebergTableSink(other.iceberg_table_sink);
    }
    if (other.isSetHive_table_sink()) {
      this.hive_table_sink = new THiveTableSink(other.hive_table_sink);
    }
    if (other.isSetTable_function_table_sink()) {
      this.table_function_table_sink = new TTableFunctionTableSink(other.table_function_table_sink);
    }
    if (other.isSetDictionary_cache_sink()) {
      this.dictionary_cache_sink = new TDictionaryCacheSink(other.dictionary_cache_sink);
    }
  }

  @Override
  public TDataSink deepCopy() {
    return new TDataSink(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.stream_sink = null;
    this.result_sink = null;
    this.mysql_table_sink = null;
    this.export_sink = null;
    this.olap_table_sink = null;
    this.memory_scratch_sink = null;
    this.multi_cast_stream_sink = null;
    this.schema_table_sink = null;
    this.iceberg_table_sink = null;
    this.hive_table_sink = null;
    this.table_function_table_sink = null;
    this.dictionary_cache_sink = null;
  }

  /**
   * 
   * @see TDataSinkType
   */
  @org.apache.thrift.annotation.Nullable
  public TDataSinkType getType() {
    return this.type;
  }

  /**
   * 
   * @see TDataSinkType
   */
  public TDataSink setType(@org.apache.thrift.annotation.Nullable TDataSinkType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDataStreamSink getStream_sink() {
    return this.stream_sink;
  }

  public TDataSink setStream_sink(@org.apache.thrift.annotation.Nullable TDataStreamSink stream_sink) {
    this.stream_sink = stream_sink;
    return this;
  }

  public void unsetStream_sink() {
    this.stream_sink = null;
  }

  /** Returns true if field stream_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetStream_sink() {
    return this.stream_sink != null;
  }

  public void setStream_sinkIsSet(boolean value) {
    if (!value) {
      this.stream_sink = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TResultSink getResult_sink() {
    return this.result_sink;
  }

  public TDataSink setResult_sink(@org.apache.thrift.annotation.Nullable TResultSink result_sink) {
    this.result_sink = result_sink;
    return this;
  }

  public void unsetResult_sink() {
    this.result_sink = null;
  }

  /** Returns true if field result_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_sink() {
    return this.result_sink != null;
  }

  public void setResult_sinkIsSet(boolean value) {
    if (!value) {
      this.result_sink = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TMysqlTableSink getMysql_table_sink() {
    return this.mysql_table_sink;
  }

  public TDataSink setMysql_table_sink(@org.apache.thrift.annotation.Nullable TMysqlTableSink mysql_table_sink) {
    this.mysql_table_sink = mysql_table_sink;
    return this;
  }

  public void unsetMysql_table_sink() {
    this.mysql_table_sink = null;
  }

  /** Returns true if field mysql_table_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetMysql_table_sink() {
    return this.mysql_table_sink != null;
  }

  public void setMysql_table_sinkIsSet(boolean value) {
    if (!value) {
      this.mysql_table_sink = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TExportSink getExport_sink() {
    return this.export_sink;
  }

  public TDataSink setExport_sink(@org.apache.thrift.annotation.Nullable TExportSink export_sink) {
    this.export_sink = export_sink;
    return this;
  }

  public void unsetExport_sink() {
    this.export_sink = null;
  }

  /** Returns true if field export_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetExport_sink() {
    return this.export_sink != null;
  }

  public void setExport_sinkIsSet(boolean value) {
    if (!value) {
      this.export_sink = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TOlapTableSink getOlap_table_sink() {
    return this.olap_table_sink;
  }

  public TDataSink setOlap_table_sink(@org.apache.thrift.annotation.Nullable TOlapTableSink olap_table_sink) {
    this.olap_table_sink = olap_table_sink;
    return this;
  }

  public void unsetOlap_table_sink() {
    this.olap_table_sink = null;
  }

  /** Returns true if field olap_table_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetOlap_table_sink() {
    return this.olap_table_sink != null;
  }

  public void setOlap_table_sinkIsSet(boolean value) {
    if (!value) {
      this.olap_table_sink = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TMemoryScratchSink getMemory_scratch_sink() {
    return this.memory_scratch_sink;
  }

  public TDataSink setMemory_scratch_sink(@org.apache.thrift.annotation.Nullable TMemoryScratchSink memory_scratch_sink) {
    this.memory_scratch_sink = memory_scratch_sink;
    return this;
  }

  public void unsetMemory_scratch_sink() {
    this.memory_scratch_sink = null;
  }

  /** Returns true if field memory_scratch_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory_scratch_sink() {
    return this.memory_scratch_sink != null;
  }

  public void setMemory_scratch_sinkIsSet(boolean value) {
    if (!value) {
      this.memory_scratch_sink = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TMultiCastDataStreamSink getMulti_cast_stream_sink() {
    return this.multi_cast_stream_sink;
  }

  public TDataSink setMulti_cast_stream_sink(@org.apache.thrift.annotation.Nullable TMultiCastDataStreamSink multi_cast_stream_sink) {
    this.multi_cast_stream_sink = multi_cast_stream_sink;
    return this;
  }

  public void unsetMulti_cast_stream_sink() {
    this.multi_cast_stream_sink = null;
  }

  /** Returns true if field multi_cast_stream_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetMulti_cast_stream_sink() {
    return this.multi_cast_stream_sink != null;
  }

  public void setMulti_cast_stream_sinkIsSet(boolean value) {
    if (!value) {
      this.multi_cast_stream_sink = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TSchemaTableSink getSchema_table_sink() {
    return this.schema_table_sink;
  }

  public TDataSink setSchema_table_sink(@org.apache.thrift.annotation.Nullable TSchemaTableSink schema_table_sink) {
    this.schema_table_sink = schema_table_sink;
    return this;
  }

  public void unsetSchema_table_sink() {
    this.schema_table_sink = null;
  }

  /** Returns true if field schema_table_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_table_sink() {
    return this.schema_table_sink != null;
  }

  public void setSchema_table_sinkIsSet(boolean value) {
    if (!value) {
      this.schema_table_sink = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TIcebergTableSink getIceberg_table_sink() {
    return this.iceberg_table_sink;
  }

  public TDataSink setIceberg_table_sink(@org.apache.thrift.annotation.Nullable TIcebergTableSink iceberg_table_sink) {
    this.iceberg_table_sink = iceberg_table_sink;
    return this;
  }

  public void unsetIceberg_table_sink() {
    this.iceberg_table_sink = null;
  }

  /** Returns true if field iceberg_table_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetIceberg_table_sink() {
    return this.iceberg_table_sink != null;
  }

  public void setIceberg_table_sinkIsSet(boolean value) {
    if (!value) {
      this.iceberg_table_sink = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public THiveTableSink getHive_table_sink() {
    return this.hive_table_sink;
  }

  public TDataSink setHive_table_sink(@org.apache.thrift.annotation.Nullable THiveTableSink hive_table_sink) {
    this.hive_table_sink = hive_table_sink;
    return this;
  }

  public void unsetHive_table_sink() {
    this.hive_table_sink = null;
  }

  /** Returns true if field hive_table_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetHive_table_sink() {
    return this.hive_table_sink != null;
  }

  public void setHive_table_sinkIsSet(boolean value) {
    if (!value) {
      this.hive_table_sink = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TTableFunctionTableSink getTable_function_table_sink() {
    return this.table_function_table_sink;
  }

  public TDataSink setTable_function_table_sink(@org.apache.thrift.annotation.Nullable TTableFunctionTableSink table_function_table_sink) {
    this.table_function_table_sink = table_function_table_sink;
    return this;
  }

  public void unsetTable_function_table_sink() {
    this.table_function_table_sink = null;
  }

  /** Returns true if field table_function_table_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_function_table_sink() {
    return this.table_function_table_sink != null;
  }

  public void setTable_function_table_sinkIsSet(boolean value) {
    if (!value) {
      this.table_function_table_sink = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDictionaryCacheSink getDictionary_cache_sink() {
    return this.dictionary_cache_sink;
  }

  public TDataSink setDictionary_cache_sink(@org.apache.thrift.annotation.Nullable TDictionaryCacheSink dictionary_cache_sink) {
    this.dictionary_cache_sink = dictionary_cache_sink;
    return this;
  }

  public void unsetDictionary_cache_sink() {
    this.dictionary_cache_sink = null;
  }

  /** Returns true if field dictionary_cache_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetDictionary_cache_sink() {
    return this.dictionary_cache_sink != null;
  }

  public void setDictionary_cache_sinkIsSet(boolean value) {
    if (!value) {
      this.dictionary_cache_sink = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TDataSinkType)value);
      }
      break;

    case STREAM_SINK:
      if (value == null) {
        unsetStream_sink();
      } else {
        setStream_sink((TDataStreamSink)value);
      }
      break;

    case RESULT_SINK:
      if (value == null) {
        unsetResult_sink();
      } else {
        setResult_sink((TResultSink)value);
      }
      break;

    case MYSQL_TABLE_SINK:
      if (value == null) {
        unsetMysql_table_sink();
      } else {
        setMysql_table_sink((TMysqlTableSink)value);
      }
      break;

    case EXPORT_SINK:
      if (value == null) {
        unsetExport_sink();
      } else {
        setExport_sink((TExportSink)value);
      }
      break;

    case OLAP_TABLE_SINK:
      if (value == null) {
        unsetOlap_table_sink();
      } else {
        setOlap_table_sink((TOlapTableSink)value);
      }
      break;

    case MEMORY_SCRATCH_SINK:
      if (value == null) {
        unsetMemory_scratch_sink();
      } else {
        setMemory_scratch_sink((TMemoryScratchSink)value);
      }
      break;

    case MULTI_CAST_STREAM_SINK:
      if (value == null) {
        unsetMulti_cast_stream_sink();
      } else {
        setMulti_cast_stream_sink((TMultiCastDataStreamSink)value);
      }
      break;

    case SCHEMA_TABLE_SINK:
      if (value == null) {
        unsetSchema_table_sink();
      } else {
        setSchema_table_sink((TSchemaTableSink)value);
      }
      break;

    case ICEBERG_TABLE_SINK:
      if (value == null) {
        unsetIceberg_table_sink();
      } else {
        setIceberg_table_sink((TIcebergTableSink)value);
      }
      break;

    case HIVE_TABLE_SINK:
      if (value == null) {
        unsetHive_table_sink();
      } else {
        setHive_table_sink((THiveTableSink)value);
      }
      break;

    case TABLE_FUNCTION_TABLE_SINK:
      if (value == null) {
        unsetTable_function_table_sink();
      } else {
        setTable_function_table_sink((TTableFunctionTableSink)value);
      }
      break;

    case DICTIONARY_CACHE_SINK:
      if (value == null) {
        unsetDictionary_cache_sink();
      } else {
        setDictionary_cache_sink((TDictionaryCacheSink)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case STREAM_SINK:
      return getStream_sink();

    case RESULT_SINK:
      return getResult_sink();

    case MYSQL_TABLE_SINK:
      return getMysql_table_sink();

    case EXPORT_SINK:
      return getExport_sink();

    case OLAP_TABLE_SINK:
      return getOlap_table_sink();

    case MEMORY_SCRATCH_SINK:
      return getMemory_scratch_sink();

    case MULTI_CAST_STREAM_SINK:
      return getMulti_cast_stream_sink();

    case SCHEMA_TABLE_SINK:
      return getSchema_table_sink();

    case ICEBERG_TABLE_SINK:
      return getIceberg_table_sink();

    case HIVE_TABLE_SINK:
      return getHive_table_sink();

    case TABLE_FUNCTION_TABLE_SINK:
      return getTable_function_table_sink();

    case DICTIONARY_CACHE_SINK:
      return getDictionary_cache_sink();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case STREAM_SINK:
      return isSetStream_sink();
    case RESULT_SINK:
      return isSetResult_sink();
    case MYSQL_TABLE_SINK:
      return isSetMysql_table_sink();
    case EXPORT_SINK:
      return isSetExport_sink();
    case OLAP_TABLE_SINK:
      return isSetOlap_table_sink();
    case MEMORY_SCRATCH_SINK:
      return isSetMemory_scratch_sink();
    case MULTI_CAST_STREAM_SINK:
      return isSetMulti_cast_stream_sink();
    case SCHEMA_TABLE_SINK:
      return isSetSchema_table_sink();
    case ICEBERG_TABLE_SINK:
      return isSetIceberg_table_sink();
    case HIVE_TABLE_SINK:
      return isSetHive_table_sink();
    case TABLE_FUNCTION_TABLE_SINK:
      return isSetTable_function_table_sink();
    case DICTIONARY_CACHE_SINK:
      return isSetDictionary_cache_sink();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof TDataSink)
      return this.equals((TDataSink)that);
    return false;
  }

  public boolean equals(TDataSink that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_stream_sink = true && this.isSetStream_sink();
    boolean that_present_stream_sink = true && that.isSetStream_sink();
    if (this_present_stream_sink || that_present_stream_sink) {
      if (!(this_present_stream_sink && that_present_stream_sink))
        return false;
      if (!this.stream_sink.equals(that.stream_sink))
        return false;
    }

    boolean this_present_result_sink = true && this.isSetResult_sink();
    boolean that_present_result_sink = true && that.isSetResult_sink();
    if (this_present_result_sink || that_present_result_sink) {
      if (!(this_present_result_sink && that_present_result_sink))
        return false;
      if (!this.result_sink.equals(that.result_sink))
        return false;
    }

    boolean this_present_mysql_table_sink = true && this.isSetMysql_table_sink();
    boolean that_present_mysql_table_sink = true && that.isSetMysql_table_sink();
    if (this_present_mysql_table_sink || that_present_mysql_table_sink) {
      if (!(this_present_mysql_table_sink && that_present_mysql_table_sink))
        return false;
      if (!this.mysql_table_sink.equals(that.mysql_table_sink))
        return false;
    }

    boolean this_present_export_sink = true && this.isSetExport_sink();
    boolean that_present_export_sink = true && that.isSetExport_sink();
    if (this_present_export_sink || that_present_export_sink) {
      if (!(this_present_export_sink && that_present_export_sink))
        return false;
      if (!this.export_sink.equals(that.export_sink))
        return false;
    }

    boolean this_present_olap_table_sink = true && this.isSetOlap_table_sink();
    boolean that_present_olap_table_sink = true && that.isSetOlap_table_sink();
    if (this_present_olap_table_sink || that_present_olap_table_sink) {
      if (!(this_present_olap_table_sink && that_present_olap_table_sink))
        return false;
      if (!this.olap_table_sink.equals(that.olap_table_sink))
        return false;
    }

    boolean this_present_memory_scratch_sink = true && this.isSetMemory_scratch_sink();
    boolean that_present_memory_scratch_sink = true && that.isSetMemory_scratch_sink();
    if (this_present_memory_scratch_sink || that_present_memory_scratch_sink) {
      if (!(this_present_memory_scratch_sink && that_present_memory_scratch_sink))
        return false;
      if (!this.memory_scratch_sink.equals(that.memory_scratch_sink))
        return false;
    }

    boolean this_present_multi_cast_stream_sink = true && this.isSetMulti_cast_stream_sink();
    boolean that_present_multi_cast_stream_sink = true && that.isSetMulti_cast_stream_sink();
    if (this_present_multi_cast_stream_sink || that_present_multi_cast_stream_sink) {
      if (!(this_present_multi_cast_stream_sink && that_present_multi_cast_stream_sink))
        return false;
      if (!this.multi_cast_stream_sink.equals(that.multi_cast_stream_sink))
        return false;
    }

    boolean this_present_schema_table_sink = true && this.isSetSchema_table_sink();
    boolean that_present_schema_table_sink = true && that.isSetSchema_table_sink();
    if (this_present_schema_table_sink || that_present_schema_table_sink) {
      if (!(this_present_schema_table_sink && that_present_schema_table_sink))
        return false;
      if (!this.schema_table_sink.equals(that.schema_table_sink))
        return false;
    }

    boolean this_present_iceberg_table_sink = true && this.isSetIceberg_table_sink();
    boolean that_present_iceberg_table_sink = true && that.isSetIceberg_table_sink();
    if (this_present_iceberg_table_sink || that_present_iceberg_table_sink) {
      if (!(this_present_iceberg_table_sink && that_present_iceberg_table_sink))
        return false;
      if (!this.iceberg_table_sink.equals(that.iceberg_table_sink))
        return false;
    }

    boolean this_present_hive_table_sink = true && this.isSetHive_table_sink();
    boolean that_present_hive_table_sink = true && that.isSetHive_table_sink();
    if (this_present_hive_table_sink || that_present_hive_table_sink) {
      if (!(this_present_hive_table_sink && that_present_hive_table_sink))
        return false;
      if (!this.hive_table_sink.equals(that.hive_table_sink))
        return false;
    }

    boolean this_present_table_function_table_sink = true && this.isSetTable_function_table_sink();
    boolean that_present_table_function_table_sink = true && that.isSetTable_function_table_sink();
    if (this_present_table_function_table_sink || that_present_table_function_table_sink) {
      if (!(this_present_table_function_table_sink && that_present_table_function_table_sink))
        return false;
      if (!this.table_function_table_sink.equals(that.table_function_table_sink))
        return false;
    }

    boolean this_present_dictionary_cache_sink = true && this.isSetDictionary_cache_sink();
    boolean that_present_dictionary_cache_sink = true && that.isSetDictionary_cache_sink();
    if (this_present_dictionary_cache_sink || that_present_dictionary_cache_sink) {
      if (!(this_present_dictionary_cache_sink && that_present_dictionary_cache_sink))
        return false;
      if (!this.dictionary_cache_sink.equals(that.dictionary_cache_sink))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetStream_sink()) ? 131071 : 524287);
    if (isSetStream_sink())
      hashCode = hashCode * 8191 + stream_sink.hashCode();

    hashCode = hashCode * 8191 + ((isSetResult_sink()) ? 131071 : 524287);
    if (isSetResult_sink())
      hashCode = hashCode * 8191 + result_sink.hashCode();

    hashCode = hashCode * 8191 + ((isSetMysql_table_sink()) ? 131071 : 524287);
    if (isSetMysql_table_sink())
      hashCode = hashCode * 8191 + mysql_table_sink.hashCode();

    hashCode = hashCode * 8191 + ((isSetExport_sink()) ? 131071 : 524287);
    if (isSetExport_sink())
      hashCode = hashCode * 8191 + export_sink.hashCode();

    hashCode = hashCode * 8191 + ((isSetOlap_table_sink()) ? 131071 : 524287);
    if (isSetOlap_table_sink())
      hashCode = hashCode * 8191 + olap_table_sink.hashCode();

    hashCode = hashCode * 8191 + ((isSetMemory_scratch_sink()) ? 131071 : 524287);
    if (isSetMemory_scratch_sink())
      hashCode = hashCode * 8191 + memory_scratch_sink.hashCode();

    hashCode = hashCode * 8191 + ((isSetMulti_cast_stream_sink()) ? 131071 : 524287);
    if (isSetMulti_cast_stream_sink())
      hashCode = hashCode * 8191 + multi_cast_stream_sink.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchema_table_sink()) ? 131071 : 524287);
    if (isSetSchema_table_sink())
      hashCode = hashCode * 8191 + schema_table_sink.hashCode();

    hashCode = hashCode * 8191 + ((isSetIceberg_table_sink()) ? 131071 : 524287);
    if (isSetIceberg_table_sink())
      hashCode = hashCode * 8191 + iceberg_table_sink.hashCode();

    hashCode = hashCode * 8191 + ((isSetHive_table_sink()) ? 131071 : 524287);
    if (isSetHive_table_sink())
      hashCode = hashCode * 8191 + hive_table_sink.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_function_table_sink()) ? 131071 : 524287);
    if (isSetTable_function_table_sink())
      hashCode = hashCode * 8191 + table_function_table_sink.hashCode();

    hashCode = hashCode * 8191 + ((isSetDictionary_cache_sink()) ? 131071 : 524287);
    if (isSetDictionary_cache_sink())
      hashCode = hashCode * 8191 + dictionary_cache_sink.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDataSink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetStream_sink(), other.isSetStream_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStream_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream_sink, other.stream_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetResult_sink(), other.isSetResult_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_sink, other.result_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetMysql_table_sink(), other.isSetMysql_table_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMysql_table_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mysql_table_sink, other.mysql_table_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetExport_sink(), other.isSetExport_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExport_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.export_sink, other.export_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetOlap_table_sink(), other.isSetOlap_table_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOlap_table_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.olap_table_sink, other.olap_table_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetMemory_scratch_sink(), other.isSetMemory_scratch_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory_scratch_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory_scratch_sink, other.memory_scratch_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetMulti_cast_stream_sink(), other.isSetMulti_cast_stream_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMulti_cast_stream_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multi_cast_stream_sink, other.multi_cast_stream_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetSchema_table_sink(), other.isSetSchema_table_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_table_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_table_sink, other.schema_table_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetIceberg_table_sink(), other.isSetIceberg_table_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIceberg_table_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iceberg_table_sink, other.iceberg_table_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetHive_table_sink(), other.isSetHive_table_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHive_table_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hive_table_sink, other.hive_table_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTable_function_table_sink(), other.isSetTable_function_table_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_function_table_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_function_table_sink, other.table_function_table_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDictionary_cache_sink(), other.isSetDictionary_cache_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDictionary_cache_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictionary_cache_sink, other.dictionary_cache_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDataSink(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetStream_sink()) {
      if (!first) sb.append(", ");
      sb.append("stream_sink:");
      if (this.stream_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.stream_sink);
      }
      first = false;
    }
    if (isSetResult_sink()) {
      if (!first) sb.append(", ");
      sb.append("result_sink:");
      if (this.result_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.result_sink);
      }
      first = false;
    }
    if (isSetMysql_table_sink()) {
      if (!first) sb.append(", ");
      sb.append("mysql_table_sink:");
      if (this.mysql_table_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.mysql_table_sink);
      }
      first = false;
    }
    if (isSetExport_sink()) {
      if (!first) sb.append(", ");
      sb.append("export_sink:");
      if (this.export_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.export_sink);
      }
      first = false;
    }
    if (isSetOlap_table_sink()) {
      if (!first) sb.append(", ");
      sb.append("olap_table_sink:");
      if (this.olap_table_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.olap_table_sink);
      }
      first = false;
    }
    if (isSetMemory_scratch_sink()) {
      if (!first) sb.append(", ");
      sb.append("memory_scratch_sink:");
      if (this.memory_scratch_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.memory_scratch_sink);
      }
      first = false;
    }
    if (isSetMulti_cast_stream_sink()) {
      if (!first) sb.append(", ");
      sb.append("multi_cast_stream_sink:");
      if (this.multi_cast_stream_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.multi_cast_stream_sink);
      }
      first = false;
    }
    if (isSetSchema_table_sink()) {
      if (!first) sb.append(", ");
      sb.append("schema_table_sink:");
      if (this.schema_table_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.schema_table_sink);
      }
      first = false;
    }
    if (isSetIceberg_table_sink()) {
      if (!first) sb.append(", ");
      sb.append("iceberg_table_sink:");
      if (this.iceberg_table_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.iceberg_table_sink);
      }
      first = false;
    }
    if (isSetHive_table_sink()) {
      if (!first) sb.append(", ");
      sb.append("hive_table_sink:");
      if (this.hive_table_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.hive_table_sink);
      }
      first = false;
    }
    if (isSetTable_function_table_sink()) {
      if (!first) sb.append(", ");
      sb.append("table_function_table_sink:");
      if (this.table_function_table_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.table_function_table_sink);
      }
      first = false;
    }
    if (isSetDictionary_cache_sink()) {
      if (!first) sb.append(", ");
      sb.append("dictionary_cache_sink:");
      if (this.dictionary_cache_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.dictionary_cache_sink);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (stream_sink != null) {
      stream_sink.validate();
    }
    if (result_sink != null) {
      result_sink.validate();
    }
    if (mysql_table_sink != null) {
      mysql_table_sink.validate();
    }
    if (export_sink != null) {
      export_sink.validate();
    }
    if (olap_table_sink != null) {
      olap_table_sink.validate();
    }
    if (memory_scratch_sink != null) {
      memory_scratch_sink.validate();
    }
    if (multi_cast_stream_sink != null) {
      multi_cast_stream_sink.validate();
    }
    if (schema_table_sink != null) {
      schema_table_sink.validate();
    }
    if (iceberg_table_sink != null) {
      iceberg_table_sink.validate();
    }
    if (hive_table_sink != null) {
      hive_table_sink.validate();
    }
    if (table_function_table_sink != null) {
      table_function_table_sink.validate();
    }
    if (dictionary_cache_sink != null) {
      dictionary_cache_sink.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDataSinkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDataSinkStandardScheme getScheme() {
      return new TDataSinkStandardScheme();
    }
  }

  private static class TDataSinkStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDataSink> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TDataSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = TDataSinkType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STREAM_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stream_sink = new TDataStreamSink();
              struct.stream_sink.read(iprot);
              struct.setStream_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result_sink = new TResultSink();
              struct.result_sink.read(iprot);
              struct.setResult_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MYSQL_TABLE_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mysql_table_sink = new TMysqlTableSink();
              struct.mysql_table_sink.read(iprot);
              struct.setMysql_table_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPORT_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.export_sink = new TExportSink();
              struct.export_sink.read(iprot);
              struct.setExport_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OLAP_TABLE_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.olap_table_sink = new TOlapTableSink();
              struct.olap_table_sink.read(iprot);
              struct.setOlap_table_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MEMORY_SCRATCH_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.memory_scratch_sink = new TMemoryScratchSink();
              struct.memory_scratch_sink.read(iprot);
              struct.setMemory_scratch_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MULTI_CAST_STREAM_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.multi_cast_stream_sink = new TMultiCastDataStreamSink();
              struct.multi_cast_stream_sink.read(iprot);
              struct.setMulti_cast_stream_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SCHEMA_TABLE_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schema_table_sink = new TSchemaTableSink();
              struct.schema_table_sink.read(iprot);
              struct.setSchema_table_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ICEBERG_TABLE_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.iceberg_table_sink = new TIcebergTableSink();
              struct.iceberg_table_sink.read(iprot);
              struct.setIceberg_table_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HIVE_TABLE_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hive_table_sink = new THiveTableSink();
              struct.hive_table_sink.read(iprot);
              struct.setHive_table_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TABLE_FUNCTION_TABLE_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_function_table_sink = new TTableFunctionTableSink();
              struct.table_function_table_sink.read(iprot);
              struct.setTable_function_table_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DICTIONARY_CACHE_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dictionary_cache_sink = new TDictionaryCacheSink();
              struct.dictionary_cache_sink.read(iprot);
              struct.setDictionary_cache_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TDataSink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.stream_sink != null) {
        if (struct.isSetStream_sink()) {
          oprot.writeFieldBegin(STREAM_SINK_FIELD_DESC);
          struct.stream_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.result_sink != null) {
        if (struct.isSetResult_sink()) {
          oprot.writeFieldBegin(RESULT_SINK_FIELD_DESC);
          struct.result_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mysql_table_sink != null) {
        if (struct.isSetMysql_table_sink()) {
          oprot.writeFieldBegin(MYSQL_TABLE_SINK_FIELD_DESC);
          struct.mysql_table_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.export_sink != null) {
        if (struct.isSetExport_sink()) {
          oprot.writeFieldBegin(EXPORT_SINK_FIELD_DESC);
          struct.export_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.olap_table_sink != null) {
        if (struct.isSetOlap_table_sink()) {
          oprot.writeFieldBegin(OLAP_TABLE_SINK_FIELD_DESC);
          struct.olap_table_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.memory_scratch_sink != null) {
        if (struct.isSetMemory_scratch_sink()) {
          oprot.writeFieldBegin(MEMORY_SCRATCH_SINK_FIELD_DESC);
          struct.memory_scratch_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multi_cast_stream_sink != null) {
        if (struct.isSetMulti_cast_stream_sink()) {
          oprot.writeFieldBegin(MULTI_CAST_STREAM_SINK_FIELD_DESC);
          struct.multi_cast_stream_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.schema_table_sink != null) {
        if (struct.isSetSchema_table_sink()) {
          oprot.writeFieldBegin(SCHEMA_TABLE_SINK_FIELD_DESC);
          struct.schema_table_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.iceberg_table_sink != null) {
        if (struct.isSetIceberg_table_sink()) {
          oprot.writeFieldBegin(ICEBERG_TABLE_SINK_FIELD_DESC);
          struct.iceberg_table_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hive_table_sink != null) {
        if (struct.isSetHive_table_sink()) {
          oprot.writeFieldBegin(HIVE_TABLE_SINK_FIELD_DESC);
          struct.hive_table_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_function_table_sink != null) {
        if (struct.isSetTable_function_table_sink()) {
          oprot.writeFieldBegin(TABLE_FUNCTION_TABLE_SINK_FIELD_DESC);
          struct.table_function_table_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dictionary_cache_sink != null) {
        if (struct.isSetDictionary_cache_sink()) {
          oprot.writeFieldBegin(DICTIONARY_CACHE_SINK_FIELD_DESC);
          struct.dictionary_cache_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDataSinkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDataSinkTupleScheme getScheme() {
      return new TDataSinkTupleScheme();
    }
  }

  private static class TDataSinkTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDataSink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDataSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStream_sink()) {
        optionals.set(0);
      }
      if (struct.isSetResult_sink()) {
        optionals.set(1);
      }
      if (struct.isSetMysql_table_sink()) {
        optionals.set(2);
      }
      if (struct.isSetExport_sink()) {
        optionals.set(3);
      }
      if (struct.isSetOlap_table_sink()) {
        optionals.set(4);
      }
      if (struct.isSetMemory_scratch_sink()) {
        optionals.set(5);
      }
      if (struct.isSetMulti_cast_stream_sink()) {
        optionals.set(6);
      }
      if (struct.isSetSchema_table_sink()) {
        optionals.set(7);
      }
      if (struct.isSetIceberg_table_sink()) {
        optionals.set(8);
      }
      if (struct.isSetHive_table_sink()) {
        optionals.set(9);
      }
      if (struct.isSetTable_function_table_sink()) {
        optionals.set(10);
      }
      if (struct.isSetDictionary_cache_sink()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetStream_sink()) {
        struct.stream_sink.write(oprot);
      }
      if (struct.isSetResult_sink()) {
        struct.result_sink.write(oprot);
      }
      if (struct.isSetMysql_table_sink()) {
        struct.mysql_table_sink.write(oprot);
      }
      if (struct.isSetExport_sink()) {
        struct.export_sink.write(oprot);
      }
      if (struct.isSetOlap_table_sink()) {
        struct.olap_table_sink.write(oprot);
      }
      if (struct.isSetMemory_scratch_sink()) {
        struct.memory_scratch_sink.write(oprot);
      }
      if (struct.isSetMulti_cast_stream_sink()) {
        struct.multi_cast_stream_sink.write(oprot);
      }
      if (struct.isSetSchema_table_sink()) {
        struct.schema_table_sink.write(oprot);
      }
      if (struct.isSetIceberg_table_sink()) {
        struct.iceberg_table_sink.write(oprot);
      }
      if (struct.isSetHive_table_sink()) {
        struct.hive_table_sink.write(oprot);
      }
      if (struct.isSetTable_function_table_sink()) {
        struct.table_function_table_sink.write(oprot);
      }
      if (struct.isSetDictionary_cache_sink()) {
        struct.dictionary_cache_sink.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDataSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.type = TDataSinkType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.stream_sink = new TDataStreamSink();
        struct.stream_sink.read(iprot);
        struct.setStream_sinkIsSet(true);
      }
      if (incoming.get(1)) {
        struct.result_sink = new TResultSink();
        struct.result_sink.read(iprot);
        struct.setResult_sinkIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mysql_table_sink = new TMysqlTableSink();
        struct.mysql_table_sink.read(iprot);
        struct.setMysql_table_sinkIsSet(true);
      }
      if (incoming.get(3)) {
        struct.export_sink = new TExportSink();
        struct.export_sink.read(iprot);
        struct.setExport_sinkIsSet(true);
      }
      if (incoming.get(4)) {
        struct.olap_table_sink = new TOlapTableSink();
        struct.olap_table_sink.read(iprot);
        struct.setOlap_table_sinkIsSet(true);
      }
      if (incoming.get(5)) {
        struct.memory_scratch_sink = new TMemoryScratchSink();
        struct.memory_scratch_sink.read(iprot);
        struct.setMemory_scratch_sinkIsSet(true);
      }
      if (incoming.get(6)) {
        struct.multi_cast_stream_sink = new TMultiCastDataStreamSink();
        struct.multi_cast_stream_sink.read(iprot);
        struct.setMulti_cast_stream_sinkIsSet(true);
      }
      if (incoming.get(7)) {
        struct.schema_table_sink = new TSchemaTableSink();
        struct.schema_table_sink.read(iprot);
        struct.setSchema_table_sinkIsSet(true);
      }
      if (incoming.get(8)) {
        struct.iceberg_table_sink = new TIcebergTableSink();
        struct.iceberg_table_sink.read(iprot);
        struct.setIceberg_table_sinkIsSet(true);
      }
      if (incoming.get(9)) {
        struct.hive_table_sink = new THiveTableSink();
        struct.hive_table_sink.read(iprot);
        struct.setHive_table_sinkIsSet(true);
      }
      if (incoming.get(10)) {
        struct.table_function_table_sink = new TTableFunctionTableSink();
        struct.table_function_table_sink.read(iprot);
        struct.setTable_function_table_sinkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.dictionary_cache_sink = new TDictionaryCacheSink();
        struct.dictionary_cache_sink.read(iprot);
        struct.setDictionary_cache_sinkIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

