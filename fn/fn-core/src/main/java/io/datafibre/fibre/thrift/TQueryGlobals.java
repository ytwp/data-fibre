/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TQueryGlobals implements org.apache.thrift.TBase<TQueryGlobals, TQueryGlobals._Fields>, java.io.Serializable, Cloneable, Comparable<TQueryGlobals> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueryGlobals");

  private static final org.apache.thrift.protocol.TField NOW_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("now_string", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp_ms", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("time_zone", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("last_query_id", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_US_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp_us", org.apache.thrift.protocol.TType.I64, (short)31);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TQueryGlobalsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TQueryGlobalsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String now_string; // required
  public long timestamp_ms; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String time_zone; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String last_query_id; // optional
  public long timestamp_us; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NOW_STRING((short)1, "now_string"),
    TIMESTAMP_MS((short)2, "timestamp_ms"),
    TIME_ZONE((short)3, "time_zone"),
    LAST_QUERY_ID((short)30, "last_query_id"),
    TIMESTAMP_US((short)31, "timestamp_us");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOW_STRING
          return NOW_STRING;
        case 2: // TIMESTAMP_MS
          return TIMESTAMP_MS;
        case 3: // TIME_ZONE
          return TIME_ZONE;
        case 30: // LAST_QUERY_ID
          return LAST_QUERY_ID;
        case 31: // TIMESTAMP_US
          return TIMESTAMP_US;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_MS_ISSET_ID = 0;
  private static final int __TIMESTAMP_US_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TIMESTAMP_MS,_Fields.TIME_ZONE,_Fields.LAST_QUERY_ID,_Fields.TIMESTAMP_US};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOW_STRING, new org.apache.thrift.meta_data.FieldMetaData("now_string", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("timestamp_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIME_ZONE, new org.apache.thrift.meta_data.FieldMetaData("time_zone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("last_query_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP_US, new org.apache.thrift.meta_data.FieldMetaData("timestamp_us", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueryGlobals.class, metaDataMap);
  }

  public TQueryGlobals() {
  }

  public TQueryGlobals(
    java.lang.String now_string)
  {
    this();
    this.now_string = now_string;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryGlobals(TQueryGlobals other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNow_string()) {
      this.now_string = other.now_string;
    }
    this.timestamp_ms = other.timestamp_ms;
    if (other.isSetTime_zone()) {
      this.time_zone = other.time_zone;
    }
    if (other.isSetLast_query_id()) {
      this.last_query_id = other.last_query_id;
    }
    this.timestamp_us = other.timestamp_us;
  }

  @Override
  public TQueryGlobals deepCopy() {
    return new TQueryGlobals(this);
  }

  @Override
  public void clear() {
    this.now_string = null;
    setTimestamp_msIsSet(false);
    this.timestamp_ms = 0;
    this.time_zone = null;
    this.last_query_id = null;
    setTimestamp_usIsSet(false);
    this.timestamp_us = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNow_string() {
    return this.now_string;
  }

  public TQueryGlobals setNow_string(@org.apache.thrift.annotation.Nullable java.lang.String now_string) {
    this.now_string = now_string;
    return this;
  }

  public void unsetNow_string() {
    this.now_string = null;
  }

  /** Returns true if field now_string is set (has been assigned a value) and false otherwise */
  public boolean isSetNow_string() {
    return this.now_string != null;
  }

  public void setNow_stringIsSet(boolean value) {
    if (!value) {
      this.now_string = null;
    }
  }

  public long getTimestamp_ms() {
    return this.timestamp_ms;
  }

  public TQueryGlobals setTimestamp_ms(long timestamp_ms) {
    this.timestamp_ms = timestamp_ms;
    setTimestamp_msIsSet(true);
    return this;
  }

  public void unsetTimestamp_ms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_MS_ISSET_ID);
  }

  /** Returns true if field timestamp_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp_ms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_MS_ISSET_ID);
  }

  public void setTimestamp_msIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_MS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTime_zone() {
    return this.time_zone;
  }

  public TQueryGlobals setTime_zone(@org.apache.thrift.annotation.Nullable java.lang.String time_zone) {
    this.time_zone = time_zone;
    return this;
  }

  public void unsetTime_zone() {
    this.time_zone = null;
  }

  /** Returns true if field time_zone is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_zone() {
    return this.time_zone != null;
  }

  public void setTime_zoneIsSet(boolean value) {
    if (!value) {
      this.time_zone = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLast_query_id() {
    return this.last_query_id;
  }

  public TQueryGlobals setLast_query_id(@org.apache.thrift.annotation.Nullable java.lang.String last_query_id) {
    this.last_query_id = last_query_id;
    return this;
  }

  public void unsetLast_query_id() {
    this.last_query_id = null;
  }

  /** Returns true if field last_query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_query_id() {
    return this.last_query_id != null;
  }

  public void setLast_query_idIsSet(boolean value) {
    if (!value) {
      this.last_query_id = null;
    }
  }

  public long getTimestamp_us() {
    return this.timestamp_us;
  }

  public TQueryGlobals setTimestamp_us(long timestamp_us) {
    this.timestamp_us = timestamp_us;
    setTimestamp_usIsSet(true);
    return this;
  }

  public void unsetTimestamp_us() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_US_ISSET_ID);
  }

  /** Returns true if field timestamp_us is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp_us() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_US_ISSET_ID);
  }

  public void setTimestamp_usIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_US_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NOW_STRING:
      if (value == null) {
        unsetNow_string();
      } else {
        setNow_string((java.lang.String)value);
      }
      break;

    case TIMESTAMP_MS:
      if (value == null) {
        unsetTimestamp_ms();
      } else {
        setTimestamp_ms((java.lang.Long)value);
      }
      break;

    case TIME_ZONE:
      if (value == null) {
        unsetTime_zone();
      } else {
        setTime_zone((java.lang.String)value);
      }
      break;

    case LAST_QUERY_ID:
      if (value == null) {
        unsetLast_query_id();
      } else {
        setLast_query_id((java.lang.String)value);
      }
      break;

    case TIMESTAMP_US:
      if (value == null) {
        unsetTimestamp_us();
      } else {
        setTimestamp_us((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NOW_STRING:
      return getNow_string();

    case TIMESTAMP_MS:
      return getTimestamp_ms();

    case TIME_ZONE:
      return getTime_zone();

    case LAST_QUERY_ID:
      return getLast_query_id();

    case TIMESTAMP_US:
      return getTimestamp_us();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NOW_STRING:
      return isSetNow_string();
    case TIMESTAMP_MS:
      return isSetTimestamp_ms();
    case TIME_ZONE:
      return isSetTime_zone();
    case LAST_QUERY_ID:
      return isSetLast_query_id();
    case TIMESTAMP_US:
      return isSetTimestamp_us();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TQueryGlobals)
      return this.equals((TQueryGlobals)that);
    return false;
  }

  public boolean equals(TQueryGlobals that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_now_string = true && this.isSetNow_string();
    boolean that_present_now_string = true && that.isSetNow_string();
    if (this_present_now_string || that_present_now_string) {
      if (!(this_present_now_string && that_present_now_string))
        return false;
      if (!this.now_string.equals(that.now_string))
        return false;
    }

    boolean this_present_timestamp_ms = true && this.isSetTimestamp_ms();
    boolean that_present_timestamp_ms = true && that.isSetTimestamp_ms();
    if (this_present_timestamp_ms || that_present_timestamp_ms) {
      if (!(this_present_timestamp_ms && that_present_timestamp_ms))
        return false;
      if (this.timestamp_ms != that.timestamp_ms)
        return false;
    }

    boolean this_present_time_zone = true && this.isSetTime_zone();
    boolean that_present_time_zone = true && that.isSetTime_zone();
    if (this_present_time_zone || that_present_time_zone) {
      if (!(this_present_time_zone && that_present_time_zone))
        return false;
      if (!this.time_zone.equals(that.time_zone))
        return false;
    }

    boolean this_present_last_query_id = true && this.isSetLast_query_id();
    boolean that_present_last_query_id = true && that.isSetLast_query_id();
    if (this_present_last_query_id || that_present_last_query_id) {
      if (!(this_present_last_query_id && that_present_last_query_id))
        return false;
      if (!this.last_query_id.equals(that.last_query_id))
        return false;
    }

    boolean this_present_timestamp_us = true && this.isSetTimestamp_us();
    boolean that_present_timestamp_us = true && that.isSetTimestamp_us();
    if (this_present_timestamp_us || that_present_timestamp_us) {
      if (!(this_present_timestamp_us && that_present_timestamp_us))
        return false;
      if (this.timestamp_us != that.timestamp_us)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNow_string()) ? 131071 : 524287);
    if (isSetNow_string())
      hashCode = hashCode * 8191 + now_string.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimestamp_ms()) ? 131071 : 524287);
    if (isSetTimestamp_ms())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp_ms);

    hashCode = hashCode * 8191 + ((isSetTime_zone()) ? 131071 : 524287);
    if (isSetTime_zone())
      hashCode = hashCode * 8191 + time_zone.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_query_id()) ? 131071 : 524287);
    if (isSetLast_query_id())
      hashCode = hashCode * 8191 + last_query_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimestamp_us()) ? 131071 : 524287);
    if (isSetTimestamp_us())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp_us);

    return hashCode;
  }

  @Override
  public int compareTo(TQueryGlobals other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNow_string(), other.isSetNow_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNow_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.now_string, other.now_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestamp_ms(), other.isSetTimestamp_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp_ms, other.timestamp_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTime_zone(), other.isSetTime_zone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_zone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_zone, other.time_zone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_query_id(), other.isSetLast_query_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_query_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_query_id, other.last_query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestamp_us(), other.isSetTimestamp_us());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp_us()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp_us, other.timestamp_us);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TQueryGlobals(");
    boolean first = true;

    sb.append("now_string:");
    if (this.now_string == null) {
      sb.append("null");
    } else {
      sb.append(this.now_string);
    }
    first = false;
    if (isSetTimestamp_ms()) {
      if (!first) sb.append(", ");
      sb.append("timestamp_ms:");
      sb.append(this.timestamp_ms);
      first = false;
    }
    if (isSetTime_zone()) {
      if (!first) sb.append(", ");
      sb.append("time_zone:");
      if (this.time_zone == null) {
        sb.append("null");
      } else {
        sb.append(this.time_zone);
      }
      first = false;
    }
    if (isSetLast_query_id()) {
      if (!first) sb.append(", ");
      sb.append("last_query_id:");
      if (this.last_query_id == null) {
        sb.append("null");
      } else {
        sb.append(this.last_query_id);
      }
      first = false;
    }
    if (isSetTimestamp_us()) {
      if (!first) sb.append(", ");
      sb.append("timestamp_us:");
      sb.append(this.timestamp_us);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (now_string == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'now_string' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueryGlobalsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TQueryGlobalsStandardScheme getScheme() {
      return new TQueryGlobalsStandardScheme();
    }
  }

  private static class TQueryGlobalsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TQueryGlobals> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueryGlobals struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NOW_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.now_string = iprot.readString();
              struct.setNow_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp_ms = iprot.readI64();
              struct.setTimestamp_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME_ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time_zone = iprot.readString();
              struct.setTime_zoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // LAST_QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_query_id = iprot.readString();
              struct.setLast_query_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // TIMESTAMP_US
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp_us = iprot.readI64();
              struct.setTimestamp_usIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueryGlobals struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.now_string != null) {
        oprot.writeFieldBegin(NOW_STRING_FIELD_DESC);
        oprot.writeString(struct.now_string);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimestamp_ms()) {
        oprot.writeFieldBegin(TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.timestamp_ms);
        oprot.writeFieldEnd();
      }
      if (struct.time_zone != null) {
        if (struct.isSetTime_zone()) {
          oprot.writeFieldBegin(TIME_ZONE_FIELD_DESC);
          oprot.writeString(struct.time_zone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_query_id != null) {
        if (struct.isSetLast_query_id()) {
          oprot.writeFieldBegin(LAST_QUERY_ID_FIELD_DESC);
          oprot.writeString(struct.last_query_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimestamp_us()) {
        oprot.writeFieldBegin(TIMESTAMP_US_FIELD_DESC);
        oprot.writeI64(struct.timestamp_us);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueryGlobalsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TQueryGlobalsTupleScheme getScheme() {
      return new TQueryGlobalsTupleScheme();
    }
  }

  private static class TQueryGlobalsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TQueryGlobals> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueryGlobals struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.now_string);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTimestamp_ms()) {
        optionals.set(0);
      }
      if (struct.isSetTime_zone()) {
        optionals.set(1);
      }
      if (struct.isSetLast_query_id()) {
        optionals.set(2);
      }
      if (struct.isSetTimestamp_us()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTimestamp_ms()) {
        oprot.writeI64(struct.timestamp_ms);
      }
      if (struct.isSetTime_zone()) {
        oprot.writeString(struct.time_zone);
      }
      if (struct.isSetLast_query_id()) {
        oprot.writeString(struct.last_query_id);
      }
      if (struct.isSetTimestamp_us()) {
        oprot.writeI64(struct.timestamp_us);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueryGlobals struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.now_string = iprot.readString();
      struct.setNow_stringIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.timestamp_ms = iprot.readI64();
        struct.setTimestamp_msIsSet(true);
      }
      if (incoming.get(1)) {
        struct.time_zone = iprot.readString();
        struct.setTime_zoneIsSet(true);
      }
      if (incoming.get(2)) {
        struct.last_query_id = iprot.readString();
        struct.setLast_query_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.timestamp_us = iprot.readI64();
        struct.setTimestamp_usIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

