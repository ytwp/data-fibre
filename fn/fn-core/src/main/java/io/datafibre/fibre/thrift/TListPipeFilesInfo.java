/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TListPipeFilesInfo implements org.apache.thrift.TBase<TListPipeFilesInfo, TListPipeFilesInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TListPipeFilesInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TListPipeFilesInfo");

  private static final org.apache.thrift.protocol.TField PIPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipe_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PIPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pipe_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATABASE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("database_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("file_name", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FILE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("file_version", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("file_size", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField FILE_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("file_rows", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField LAST_MODIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("last_modified", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField STAGED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("staged_time", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField START_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("start_load", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField FINISH_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("finish_load", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField FIRST_ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("first_error_msg", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField ERROR_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("error_count", org.apache.thrift.protocol.TType.I64, (short)31);
  private static final org.apache.thrift.protocol.TField ERROR_LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("error_line", org.apache.thrift.protocol.TType.I64, (short)32);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TListPipeFilesInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TListPipeFilesInfoTupleSchemeFactory();

  public long pipe_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String pipe_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String database_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String file_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String file_version; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String state; // optional
  public long file_size; // optional
  public long file_rows; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String last_modified; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String staged_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String start_load; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String finish_load; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String first_error_msg; // optional
  public long error_count; // optional
  public long error_line; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PIPE_ID((short)1, "pipe_id"),
    PIPE_NAME((short)2, "pipe_name"),
    DATABASE_NAME((short)3, "database_name"),
    FILE_NAME((short)10, "file_name"),
    FILE_VERSION((short)11, "file_version"),
    STATE((short)12, "state"),
    FILE_SIZE((short)13, "file_size"),
    FILE_ROWS((short)14, "file_rows"),
    LAST_MODIFIED((short)15, "last_modified"),
    STAGED_TIME((short)20, "staged_time"),
    START_LOAD((short)21, "start_load"),
    FINISH_LOAD((short)22, "finish_load"),
    FIRST_ERROR_MSG((short)30, "first_error_msg"),
    ERROR_COUNT((short)31, "error_count"),
    ERROR_LINE((short)32, "error_line");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PIPE_ID
          return PIPE_ID;
        case 2: // PIPE_NAME
          return PIPE_NAME;
        case 3: // DATABASE_NAME
          return DATABASE_NAME;
        case 10: // FILE_NAME
          return FILE_NAME;
        case 11: // FILE_VERSION
          return FILE_VERSION;
        case 12: // STATE
          return STATE;
        case 13: // FILE_SIZE
          return FILE_SIZE;
        case 14: // FILE_ROWS
          return FILE_ROWS;
        case 15: // LAST_MODIFIED
          return LAST_MODIFIED;
        case 20: // STAGED_TIME
          return STAGED_TIME;
        case 21: // START_LOAD
          return START_LOAD;
        case 22: // FINISH_LOAD
          return FINISH_LOAD;
        case 30: // FIRST_ERROR_MSG
          return FIRST_ERROR_MSG;
        case 31: // ERROR_COUNT
          return ERROR_COUNT;
        case 32: // ERROR_LINE
          return ERROR_LINE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PIPE_ID_ISSET_ID = 0;
  private static final int __FILE_SIZE_ISSET_ID = 1;
  private static final int __FILE_ROWS_ISSET_ID = 2;
  private static final int __ERROR_COUNT_ISSET_ID = 3;
  private static final int __ERROR_LINE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PIPE_ID,_Fields.PIPE_NAME,_Fields.DATABASE_NAME,_Fields.FILE_NAME,_Fields.FILE_VERSION,_Fields.STATE,_Fields.FILE_SIZE,_Fields.FILE_ROWS,_Fields.LAST_MODIFIED,_Fields.STAGED_TIME,_Fields.START_LOAD,_Fields.FINISH_LOAD,_Fields.FIRST_ERROR_MSG,_Fields.ERROR_COUNT,_Fields.ERROR_LINE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PIPE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipe_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PIPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("pipe_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATABASE_NAME, new org.apache.thrift.meta_data.FieldMetaData("database_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("file_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("file_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("file_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_ROWS, new org.apache.thrift.meta_data.FieldMetaData("file_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFIED, new org.apache.thrift.meta_data.FieldMetaData("last_modified", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STAGED_TIME, new org.apache.thrift.meta_data.FieldMetaData("staged_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_LOAD, new org.apache.thrift.meta_data.FieldMetaData("start_load", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINISH_LOAD, new org.apache.thrift.meta_data.FieldMetaData("finish_load", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRST_ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("first_error_msg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR_COUNT, new org.apache.thrift.meta_data.FieldMetaData("error_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERROR_LINE, new org.apache.thrift.meta_data.FieldMetaData("error_line", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TListPipeFilesInfo.class, metaDataMap);
  }

  public TListPipeFilesInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TListPipeFilesInfo(TListPipeFilesInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pipe_id = other.pipe_id;
    if (other.isSetPipe_name()) {
      this.pipe_name = other.pipe_name;
    }
    if (other.isSetDatabase_name()) {
      this.database_name = other.database_name;
    }
    if (other.isSetFile_name()) {
      this.file_name = other.file_name;
    }
    if (other.isSetFile_version()) {
      this.file_version = other.file_version;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.file_size = other.file_size;
    this.file_rows = other.file_rows;
    if (other.isSetLast_modified()) {
      this.last_modified = other.last_modified;
    }
    if (other.isSetStaged_time()) {
      this.staged_time = other.staged_time;
    }
    if (other.isSetStart_load()) {
      this.start_load = other.start_load;
    }
    if (other.isSetFinish_load()) {
      this.finish_load = other.finish_load;
    }
    if (other.isSetFirst_error_msg()) {
      this.first_error_msg = other.first_error_msg;
    }
    this.error_count = other.error_count;
    this.error_line = other.error_line;
  }

  @Override
  public TListPipeFilesInfo deepCopy() {
    return new TListPipeFilesInfo(this);
  }

  @Override
  public void clear() {
    setPipe_idIsSet(false);
    this.pipe_id = 0;
    this.pipe_name = null;
    this.database_name = null;
    this.file_name = null;
    this.file_version = null;
    this.state = null;
    setFile_sizeIsSet(false);
    this.file_size = 0;
    setFile_rowsIsSet(false);
    this.file_rows = 0;
    this.last_modified = null;
    this.staged_time = null;
    this.start_load = null;
    this.finish_load = null;
    this.first_error_msg = null;
    setError_countIsSet(false);
    this.error_count = 0;
    setError_lineIsSet(false);
    this.error_line = 0;
  }

  public long getPipe_id() {
    return this.pipe_id;
  }

  public TListPipeFilesInfo setPipe_id(long pipe_id) {
    this.pipe_id = pipe_id;
    setPipe_idIsSet(true);
    return this;
  }

  public void unsetPipe_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PIPE_ID_ISSET_ID);
  }

  /** Returns true if field pipe_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPipe_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PIPE_ID_ISSET_ID);
  }

  public void setPipe_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PIPE_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPipe_name() {
    return this.pipe_name;
  }

  public TListPipeFilesInfo setPipe_name(@org.apache.thrift.annotation.Nullable java.lang.String pipe_name) {
    this.pipe_name = pipe_name;
    return this;
  }

  public void unsetPipe_name() {
    this.pipe_name = null;
  }

  /** Returns true if field pipe_name is set (has been assigned a value) and false otherwise */
  public boolean isSetPipe_name() {
    return this.pipe_name != null;
  }

  public void setPipe_nameIsSet(boolean value) {
    if (!value) {
      this.pipe_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDatabase_name() {
    return this.database_name;
  }

  public TListPipeFilesInfo setDatabase_name(@org.apache.thrift.annotation.Nullable java.lang.String database_name) {
    this.database_name = database_name;
    return this;
  }

  public void unsetDatabase_name() {
    this.database_name = null;
  }

  /** Returns true if field database_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabase_name() {
    return this.database_name != null;
  }

  public void setDatabase_nameIsSet(boolean value) {
    if (!value) {
      this.database_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFile_name() {
    return this.file_name;
  }

  public TListPipeFilesInfo setFile_name(@org.apache.thrift.annotation.Nullable java.lang.String file_name) {
    this.file_name = file_name;
    return this;
  }

  public void unsetFile_name() {
    this.file_name = null;
  }

  /** Returns true if field file_name is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_name() {
    return this.file_name != null;
  }

  public void setFile_nameIsSet(boolean value) {
    if (!value) {
      this.file_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFile_version() {
    return this.file_version;
  }

  public TListPipeFilesInfo setFile_version(@org.apache.thrift.annotation.Nullable java.lang.String file_version) {
    this.file_version = file_version;
    return this;
  }

  public void unsetFile_version() {
    this.file_version = null;
  }

  /** Returns true if field file_version is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_version() {
    return this.file_version != null;
  }

  public void setFile_versionIsSet(boolean value) {
    if (!value) {
      this.file_version = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getState() {
    return this.state;
  }

  public TListPipeFilesInfo setState(@org.apache.thrift.annotation.Nullable java.lang.String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public long getFile_size() {
    return this.file_size;
  }

  public TListPipeFilesInfo setFile_size(long file_size) {
    this.file_size = file_size;
    setFile_sizeIsSet(true);
    return this;
  }

  public void unsetFile_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILE_SIZE_ISSET_ID);
  }

  /** Returns true if field file_size is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILE_SIZE_ISSET_ID);
  }

  public void setFile_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILE_SIZE_ISSET_ID, value);
  }

  public long getFile_rows() {
    return this.file_rows;
  }

  public TListPipeFilesInfo setFile_rows(long file_rows) {
    this.file_rows = file_rows;
    setFile_rowsIsSet(true);
    return this;
  }

  public void unsetFile_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILE_ROWS_ISSET_ID);
  }

  /** Returns true if field file_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILE_ROWS_ISSET_ID);
  }

  public void setFile_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILE_ROWS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLast_modified() {
    return this.last_modified;
  }

  public TListPipeFilesInfo setLast_modified(@org.apache.thrift.annotation.Nullable java.lang.String last_modified) {
    this.last_modified = last_modified;
    return this;
  }

  public void unsetLast_modified() {
    this.last_modified = null;
  }

  /** Returns true if field last_modified is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_modified() {
    return this.last_modified != null;
  }

  public void setLast_modifiedIsSet(boolean value) {
    if (!value) {
      this.last_modified = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStaged_time() {
    return this.staged_time;
  }

  public TListPipeFilesInfo setStaged_time(@org.apache.thrift.annotation.Nullable java.lang.String staged_time) {
    this.staged_time = staged_time;
    return this;
  }

  public void unsetStaged_time() {
    this.staged_time = null;
  }

  /** Returns true if field staged_time is set (has been assigned a value) and false otherwise */
  public boolean isSetStaged_time() {
    return this.staged_time != null;
  }

  public void setStaged_timeIsSet(boolean value) {
    if (!value) {
      this.staged_time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStart_load() {
    return this.start_load;
  }

  public TListPipeFilesInfo setStart_load(@org.apache.thrift.annotation.Nullable java.lang.String start_load) {
    this.start_load = start_load;
    return this;
  }

  public void unsetStart_load() {
    this.start_load = null;
  }

  /** Returns true if field start_load is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_load() {
    return this.start_load != null;
  }

  public void setStart_loadIsSet(boolean value) {
    if (!value) {
      this.start_load = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFinish_load() {
    return this.finish_load;
  }

  public TListPipeFilesInfo setFinish_load(@org.apache.thrift.annotation.Nullable java.lang.String finish_load) {
    this.finish_load = finish_load;
    return this;
  }

  public void unsetFinish_load() {
    this.finish_load = null;
  }

  /** Returns true if field finish_load is set (has been assigned a value) and false otherwise */
  public boolean isSetFinish_load() {
    return this.finish_load != null;
  }

  public void setFinish_loadIsSet(boolean value) {
    if (!value) {
      this.finish_load = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFirst_error_msg() {
    return this.first_error_msg;
  }

  public TListPipeFilesInfo setFirst_error_msg(@org.apache.thrift.annotation.Nullable java.lang.String first_error_msg) {
    this.first_error_msg = first_error_msg;
    return this;
  }

  public void unsetFirst_error_msg() {
    this.first_error_msg = null;
  }

  /** Returns true if field first_error_msg is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst_error_msg() {
    return this.first_error_msg != null;
  }

  public void setFirst_error_msgIsSet(boolean value) {
    if (!value) {
      this.first_error_msg = null;
    }
  }

  public long getError_count() {
    return this.error_count;
  }

  public TListPipeFilesInfo setError_count(long error_count) {
    this.error_count = error_count;
    setError_countIsSet(true);
    return this;
  }

  public void unsetError_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERROR_COUNT_ISSET_ID);
  }

  /** Returns true if field error_count is set (has been assigned a value) and false otherwise */
  public boolean isSetError_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERROR_COUNT_ISSET_ID);
  }

  public void setError_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERROR_COUNT_ISSET_ID, value);
  }

  public long getError_line() {
    return this.error_line;
  }

  public TListPipeFilesInfo setError_line(long error_line) {
    this.error_line = error_line;
    setError_lineIsSet(true);
    return this;
  }

  public void unsetError_line() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERROR_LINE_ISSET_ID);
  }

  /** Returns true if field error_line is set (has been assigned a value) and false otherwise */
  public boolean isSetError_line() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERROR_LINE_ISSET_ID);
  }

  public void setError_lineIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERROR_LINE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PIPE_ID:
      if (value == null) {
        unsetPipe_id();
      } else {
        setPipe_id((java.lang.Long)value);
      }
      break;

    case PIPE_NAME:
      if (value == null) {
        unsetPipe_name();
      } else {
        setPipe_name((java.lang.String)value);
      }
      break;

    case DATABASE_NAME:
      if (value == null) {
        unsetDatabase_name();
      } else {
        setDatabase_name((java.lang.String)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFile_name();
      } else {
        setFile_name((java.lang.String)value);
      }
      break;

    case FILE_VERSION:
      if (value == null) {
        unsetFile_version();
      } else {
        setFile_version((java.lang.String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.String)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFile_size();
      } else {
        setFile_size((java.lang.Long)value);
      }
      break;

    case FILE_ROWS:
      if (value == null) {
        unsetFile_rows();
      } else {
        setFile_rows((java.lang.Long)value);
      }
      break;

    case LAST_MODIFIED:
      if (value == null) {
        unsetLast_modified();
      } else {
        setLast_modified((java.lang.String)value);
      }
      break;

    case STAGED_TIME:
      if (value == null) {
        unsetStaged_time();
      } else {
        setStaged_time((java.lang.String)value);
      }
      break;

    case START_LOAD:
      if (value == null) {
        unsetStart_load();
      } else {
        setStart_load((java.lang.String)value);
      }
      break;

    case FINISH_LOAD:
      if (value == null) {
        unsetFinish_load();
      } else {
        setFinish_load((java.lang.String)value);
      }
      break;

    case FIRST_ERROR_MSG:
      if (value == null) {
        unsetFirst_error_msg();
      } else {
        setFirst_error_msg((java.lang.String)value);
      }
      break;

    case ERROR_COUNT:
      if (value == null) {
        unsetError_count();
      } else {
        setError_count((java.lang.Long)value);
      }
      break;

    case ERROR_LINE:
      if (value == null) {
        unsetError_line();
      } else {
        setError_line((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PIPE_ID:
      return getPipe_id();

    case PIPE_NAME:
      return getPipe_name();

    case DATABASE_NAME:
      return getDatabase_name();

    case FILE_NAME:
      return getFile_name();

    case FILE_VERSION:
      return getFile_version();

    case STATE:
      return getState();

    case FILE_SIZE:
      return getFile_size();

    case FILE_ROWS:
      return getFile_rows();

    case LAST_MODIFIED:
      return getLast_modified();

    case STAGED_TIME:
      return getStaged_time();

    case START_LOAD:
      return getStart_load();

    case FINISH_LOAD:
      return getFinish_load();

    case FIRST_ERROR_MSG:
      return getFirst_error_msg();

    case ERROR_COUNT:
      return getError_count();

    case ERROR_LINE:
      return getError_line();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PIPE_ID:
      return isSetPipe_id();
    case PIPE_NAME:
      return isSetPipe_name();
    case DATABASE_NAME:
      return isSetDatabase_name();
    case FILE_NAME:
      return isSetFile_name();
    case FILE_VERSION:
      return isSetFile_version();
    case STATE:
      return isSetState();
    case FILE_SIZE:
      return isSetFile_size();
    case FILE_ROWS:
      return isSetFile_rows();
    case LAST_MODIFIED:
      return isSetLast_modified();
    case STAGED_TIME:
      return isSetStaged_time();
    case START_LOAD:
      return isSetStart_load();
    case FINISH_LOAD:
      return isSetFinish_load();
    case FIRST_ERROR_MSG:
      return isSetFirst_error_msg();
    case ERROR_COUNT:
      return isSetError_count();
    case ERROR_LINE:
      return isSetError_line();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TListPipeFilesInfo)
      return this.equals((TListPipeFilesInfo)that);
    return false;
  }

  public boolean equals(TListPipeFilesInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_pipe_id = true && this.isSetPipe_id();
    boolean that_present_pipe_id = true && that.isSetPipe_id();
    if (this_present_pipe_id || that_present_pipe_id) {
      if (!(this_present_pipe_id && that_present_pipe_id))
        return false;
      if (this.pipe_id != that.pipe_id)
        return false;
    }

    boolean this_present_pipe_name = true && this.isSetPipe_name();
    boolean that_present_pipe_name = true && that.isSetPipe_name();
    if (this_present_pipe_name || that_present_pipe_name) {
      if (!(this_present_pipe_name && that_present_pipe_name))
        return false;
      if (!this.pipe_name.equals(that.pipe_name))
        return false;
    }

    boolean this_present_database_name = true && this.isSetDatabase_name();
    boolean that_present_database_name = true && that.isSetDatabase_name();
    if (this_present_database_name || that_present_database_name) {
      if (!(this_present_database_name && that_present_database_name))
        return false;
      if (!this.database_name.equals(that.database_name))
        return false;
    }

    boolean this_present_file_name = true && this.isSetFile_name();
    boolean that_present_file_name = true && that.isSetFile_name();
    if (this_present_file_name || that_present_file_name) {
      if (!(this_present_file_name && that_present_file_name))
        return false;
      if (!this.file_name.equals(that.file_name))
        return false;
    }

    boolean this_present_file_version = true && this.isSetFile_version();
    boolean that_present_file_version = true && that.isSetFile_version();
    if (this_present_file_version || that_present_file_version) {
      if (!(this_present_file_version && that_present_file_version))
        return false;
      if (!this.file_version.equals(that.file_version))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_file_size = true && this.isSetFile_size();
    boolean that_present_file_size = true && that.isSetFile_size();
    if (this_present_file_size || that_present_file_size) {
      if (!(this_present_file_size && that_present_file_size))
        return false;
      if (this.file_size != that.file_size)
        return false;
    }

    boolean this_present_file_rows = true && this.isSetFile_rows();
    boolean that_present_file_rows = true && that.isSetFile_rows();
    if (this_present_file_rows || that_present_file_rows) {
      if (!(this_present_file_rows && that_present_file_rows))
        return false;
      if (this.file_rows != that.file_rows)
        return false;
    }

    boolean this_present_last_modified = true && this.isSetLast_modified();
    boolean that_present_last_modified = true && that.isSetLast_modified();
    if (this_present_last_modified || that_present_last_modified) {
      if (!(this_present_last_modified && that_present_last_modified))
        return false;
      if (!this.last_modified.equals(that.last_modified))
        return false;
    }

    boolean this_present_staged_time = true && this.isSetStaged_time();
    boolean that_present_staged_time = true && that.isSetStaged_time();
    if (this_present_staged_time || that_present_staged_time) {
      if (!(this_present_staged_time && that_present_staged_time))
        return false;
      if (!this.staged_time.equals(that.staged_time))
        return false;
    }

    boolean this_present_start_load = true && this.isSetStart_load();
    boolean that_present_start_load = true && that.isSetStart_load();
    if (this_present_start_load || that_present_start_load) {
      if (!(this_present_start_load && that_present_start_load))
        return false;
      if (!this.start_load.equals(that.start_load))
        return false;
    }

    boolean this_present_finish_load = true && this.isSetFinish_load();
    boolean that_present_finish_load = true && that.isSetFinish_load();
    if (this_present_finish_load || that_present_finish_load) {
      if (!(this_present_finish_load && that_present_finish_load))
        return false;
      if (!this.finish_load.equals(that.finish_load))
        return false;
    }

    boolean this_present_first_error_msg = true && this.isSetFirst_error_msg();
    boolean that_present_first_error_msg = true && that.isSetFirst_error_msg();
    if (this_present_first_error_msg || that_present_first_error_msg) {
      if (!(this_present_first_error_msg && that_present_first_error_msg))
        return false;
      if (!this.first_error_msg.equals(that.first_error_msg))
        return false;
    }

    boolean this_present_error_count = true && this.isSetError_count();
    boolean that_present_error_count = true && that.isSetError_count();
    if (this_present_error_count || that_present_error_count) {
      if (!(this_present_error_count && that_present_error_count))
        return false;
      if (this.error_count != that.error_count)
        return false;
    }

    boolean this_present_error_line = true && this.isSetError_line();
    boolean that_present_error_line = true && that.isSetError_line();
    if (this_present_error_line || that_present_error_line) {
      if (!(this_present_error_line && that_present_error_line))
        return false;
      if (this.error_line != that.error_line)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPipe_id()) ? 131071 : 524287);
    if (isSetPipe_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pipe_id);

    hashCode = hashCode * 8191 + ((isSetPipe_name()) ? 131071 : 524287);
    if (isSetPipe_name())
      hashCode = hashCode * 8191 + pipe_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatabase_name()) ? 131071 : 524287);
    if (isSetDatabase_name())
      hashCode = hashCode * 8191 + database_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetFile_name()) ? 131071 : 524287);
    if (isSetFile_name())
      hashCode = hashCode * 8191 + file_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetFile_version()) ? 131071 : 524287);
    if (isSetFile_version())
      hashCode = hashCode * 8191 + file_version.hashCode();

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.hashCode();

    hashCode = hashCode * 8191 + ((isSetFile_size()) ? 131071 : 524287);
    if (isSetFile_size())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(file_size);

    hashCode = hashCode * 8191 + ((isSetFile_rows()) ? 131071 : 524287);
    if (isSetFile_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(file_rows);

    hashCode = hashCode * 8191 + ((isSetLast_modified()) ? 131071 : 524287);
    if (isSetLast_modified())
      hashCode = hashCode * 8191 + last_modified.hashCode();

    hashCode = hashCode * 8191 + ((isSetStaged_time()) ? 131071 : 524287);
    if (isSetStaged_time())
      hashCode = hashCode * 8191 + staged_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetStart_load()) ? 131071 : 524287);
    if (isSetStart_load())
      hashCode = hashCode * 8191 + start_load.hashCode();

    hashCode = hashCode * 8191 + ((isSetFinish_load()) ? 131071 : 524287);
    if (isSetFinish_load())
      hashCode = hashCode * 8191 + finish_load.hashCode();

    hashCode = hashCode * 8191 + ((isSetFirst_error_msg()) ? 131071 : 524287);
    if (isSetFirst_error_msg())
      hashCode = hashCode * 8191 + first_error_msg.hashCode();

    hashCode = hashCode * 8191 + ((isSetError_count()) ? 131071 : 524287);
    if (isSetError_count())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(error_count);

    hashCode = hashCode * 8191 + ((isSetError_line()) ? 131071 : 524287);
    if (isSetError_line())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(error_line);

    return hashCode;
  }

  @Override
  public int compareTo(TListPipeFilesInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPipe_id(), other.isSetPipe_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipe_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipe_id, other.pipe_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPipe_name(), other.isSetPipe_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipe_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipe_name, other.pipe_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDatabase_name(), other.isSetDatabase_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabase_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database_name, other.database_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_name(), other.isSetFile_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_name, other.file_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_version(), other.isSetFile_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_version, other.file_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_size(), other.isSetFile_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_size, other.file_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_rows(), other.isSetFile_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_rows, other.file_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_modified(), other.isSetLast_modified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_modified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_modified, other.last_modified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStaged_time(), other.isSetStaged_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStaged_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.staged_time, other.staged_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStart_load(), other.isSetStart_load());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_load()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_load, other.start_load);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFinish_load(), other.isSetFinish_load());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinish_load()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish_load, other.finish_load);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFirst_error_msg(), other.isSetFirst_error_msg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst_error_msg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first_error_msg, other.first_error_msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetError_count(), other.isSetError_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_count, other.error_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetError_line(), other.isSetError_line());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_line()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_line, other.error_line);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TListPipeFilesInfo(");
    boolean first = true;

    if (isSetPipe_id()) {
      sb.append("pipe_id:");
      sb.append(this.pipe_id);
      first = false;
    }
    if (isSetPipe_name()) {
      if (!first) sb.append(", ");
      sb.append("pipe_name:");
      if (this.pipe_name == null) {
        sb.append("null");
      } else {
        sb.append(this.pipe_name);
      }
      first = false;
    }
    if (isSetDatabase_name()) {
      if (!first) sb.append(", ");
      sb.append("database_name:");
      if (this.database_name == null) {
        sb.append("null");
      } else {
        sb.append(this.database_name);
      }
      first = false;
    }
    if (isSetFile_name()) {
      if (!first) sb.append(", ");
      sb.append("file_name:");
      if (this.file_name == null) {
        sb.append("null");
      } else {
        sb.append(this.file_name);
      }
      first = false;
    }
    if (isSetFile_version()) {
      if (!first) sb.append(", ");
      sb.append("file_version:");
      if (this.file_version == null) {
        sb.append("null");
      } else {
        sb.append(this.file_version);
      }
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetFile_size()) {
      if (!first) sb.append(", ");
      sb.append("file_size:");
      sb.append(this.file_size);
      first = false;
    }
    if (isSetFile_rows()) {
      if (!first) sb.append(", ");
      sb.append("file_rows:");
      sb.append(this.file_rows);
      first = false;
    }
    if (isSetLast_modified()) {
      if (!first) sb.append(", ");
      sb.append("last_modified:");
      if (this.last_modified == null) {
        sb.append("null");
      } else {
        sb.append(this.last_modified);
      }
      first = false;
    }
    if (isSetStaged_time()) {
      if (!first) sb.append(", ");
      sb.append("staged_time:");
      if (this.staged_time == null) {
        sb.append("null");
      } else {
        sb.append(this.staged_time);
      }
      first = false;
    }
    if (isSetStart_load()) {
      if (!first) sb.append(", ");
      sb.append("start_load:");
      if (this.start_load == null) {
        sb.append("null");
      } else {
        sb.append(this.start_load);
      }
      first = false;
    }
    if (isSetFinish_load()) {
      if (!first) sb.append(", ");
      sb.append("finish_load:");
      if (this.finish_load == null) {
        sb.append("null");
      } else {
        sb.append(this.finish_load);
      }
      first = false;
    }
    if (isSetFirst_error_msg()) {
      if (!first) sb.append(", ");
      sb.append("first_error_msg:");
      if (this.first_error_msg == null) {
        sb.append("null");
      } else {
        sb.append(this.first_error_msg);
      }
      first = false;
    }
    if (isSetError_count()) {
      if (!first) sb.append(", ");
      sb.append("error_count:");
      sb.append(this.error_count);
      first = false;
    }
    if (isSetError_line()) {
      if (!first) sb.append(", ");
      sb.append("error_line:");
      sb.append(this.error_line);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TListPipeFilesInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TListPipeFilesInfoStandardScheme getScheme() {
      return new TListPipeFilesInfoStandardScheme();
    }
  }

  private static class TListPipeFilesInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TListPipeFilesInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TListPipeFilesInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PIPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pipe_id = iprot.readI64();
              struct.setPipe_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PIPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pipe_name = iprot.readString();
              struct.setPipe_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATABASE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.database_name = iprot.readString();
              struct.setDatabase_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_name = iprot.readString();
              struct.setFile_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FILE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_version = iprot.readString();
              struct.setFile_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.file_size = iprot.readI64();
              struct.setFile_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FILE_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.file_rows = iprot.readI64();
              struct.setFile_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LAST_MODIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_modified = iprot.readString();
              struct.setLast_modifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // STAGED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.staged_time = iprot.readString();
              struct.setStaged_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // START_LOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.start_load = iprot.readString();
              struct.setStart_loadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // FINISH_LOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.finish_load = iprot.readString();
              struct.setFinish_loadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // FIRST_ERROR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.first_error_msg = iprot.readString();
              struct.setFirst_error_msgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // ERROR_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.error_count = iprot.readI64();
              struct.setError_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ERROR_LINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.error_line = iprot.readI64();
              struct.setError_lineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TListPipeFilesInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPipe_id()) {
        oprot.writeFieldBegin(PIPE_ID_FIELD_DESC);
        oprot.writeI64(struct.pipe_id);
        oprot.writeFieldEnd();
      }
      if (struct.pipe_name != null) {
        if (struct.isSetPipe_name()) {
          oprot.writeFieldBegin(PIPE_NAME_FIELD_DESC);
          oprot.writeString(struct.pipe_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.database_name != null) {
        if (struct.isSetDatabase_name()) {
          oprot.writeFieldBegin(DATABASE_NAME_FIELD_DESC);
          oprot.writeString(struct.database_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.file_name != null) {
        if (struct.isSetFile_name()) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.file_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.file_version != null) {
        if (struct.isSetFile_version()) {
          oprot.writeFieldBegin(FILE_VERSION_FIELD_DESC);
          oprot.writeString(struct.file_version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFile_size()) {
        oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
        oprot.writeI64(struct.file_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFile_rows()) {
        oprot.writeFieldBegin(FILE_ROWS_FIELD_DESC);
        oprot.writeI64(struct.file_rows);
        oprot.writeFieldEnd();
      }
      if (struct.last_modified != null) {
        if (struct.isSetLast_modified()) {
          oprot.writeFieldBegin(LAST_MODIFIED_FIELD_DESC);
          oprot.writeString(struct.last_modified);
          oprot.writeFieldEnd();
        }
      }
      if (struct.staged_time != null) {
        if (struct.isSetStaged_time()) {
          oprot.writeFieldBegin(STAGED_TIME_FIELD_DESC);
          oprot.writeString(struct.staged_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.start_load != null) {
        if (struct.isSetStart_load()) {
          oprot.writeFieldBegin(START_LOAD_FIELD_DESC);
          oprot.writeString(struct.start_load);
          oprot.writeFieldEnd();
        }
      }
      if (struct.finish_load != null) {
        if (struct.isSetFinish_load()) {
          oprot.writeFieldBegin(FINISH_LOAD_FIELD_DESC);
          oprot.writeString(struct.finish_load);
          oprot.writeFieldEnd();
        }
      }
      if (struct.first_error_msg != null) {
        if (struct.isSetFirst_error_msg()) {
          oprot.writeFieldBegin(FIRST_ERROR_MSG_FIELD_DESC);
          oprot.writeString(struct.first_error_msg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetError_count()) {
        oprot.writeFieldBegin(ERROR_COUNT_FIELD_DESC);
        oprot.writeI64(struct.error_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetError_line()) {
        oprot.writeFieldBegin(ERROR_LINE_FIELD_DESC);
        oprot.writeI64(struct.error_line);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TListPipeFilesInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TListPipeFilesInfoTupleScheme getScheme() {
      return new TListPipeFilesInfoTupleScheme();
    }
  }

  private static class TListPipeFilesInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TListPipeFilesInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TListPipeFilesInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPipe_id()) {
        optionals.set(0);
      }
      if (struct.isSetPipe_name()) {
        optionals.set(1);
      }
      if (struct.isSetDatabase_name()) {
        optionals.set(2);
      }
      if (struct.isSetFile_name()) {
        optionals.set(3);
      }
      if (struct.isSetFile_version()) {
        optionals.set(4);
      }
      if (struct.isSetState()) {
        optionals.set(5);
      }
      if (struct.isSetFile_size()) {
        optionals.set(6);
      }
      if (struct.isSetFile_rows()) {
        optionals.set(7);
      }
      if (struct.isSetLast_modified()) {
        optionals.set(8);
      }
      if (struct.isSetStaged_time()) {
        optionals.set(9);
      }
      if (struct.isSetStart_load()) {
        optionals.set(10);
      }
      if (struct.isSetFinish_load()) {
        optionals.set(11);
      }
      if (struct.isSetFirst_error_msg()) {
        optionals.set(12);
      }
      if (struct.isSetError_count()) {
        optionals.set(13);
      }
      if (struct.isSetError_line()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetPipe_id()) {
        oprot.writeI64(struct.pipe_id);
      }
      if (struct.isSetPipe_name()) {
        oprot.writeString(struct.pipe_name);
      }
      if (struct.isSetDatabase_name()) {
        oprot.writeString(struct.database_name);
      }
      if (struct.isSetFile_name()) {
        oprot.writeString(struct.file_name);
      }
      if (struct.isSetFile_version()) {
        oprot.writeString(struct.file_version);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetFile_size()) {
        oprot.writeI64(struct.file_size);
      }
      if (struct.isSetFile_rows()) {
        oprot.writeI64(struct.file_rows);
      }
      if (struct.isSetLast_modified()) {
        oprot.writeString(struct.last_modified);
      }
      if (struct.isSetStaged_time()) {
        oprot.writeString(struct.staged_time);
      }
      if (struct.isSetStart_load()) {
        oprot.writeString(struct.start_load);
      }
      if (struct.isSetFinish_load()) {
        oprot.writeString(struct.finish_load);
      }
      if (struct.isSetFirst_error_msg()) {
        oprot.writeString(struct.first_error_msg);
      }
      if (struct.isSetError_count()) {
        oprot.writeI64(struct.error_count);
      }
      if (struct.isSetError_line()) {
        oprot.writeI64(struct.error_line);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TListPipeFilesInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.pipe_id = iprot.readI64();
        struct.setPipe_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pipe_name = iprot.readString();
        struct.setPipe_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.database_name = iprot.readString();
        struct.setDatabase_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.file_name = iprot.readString();
        struct.setFile_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.file_version = iprot.readString();
        struct.setFile_versionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.file_size = iprot.readI64();
        struct.setFile_sizeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.file_rows = iprot.readI64();
        struct.setFile_rowsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.last_modified = iprot.readString();
        struct.setLast_modifiedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.staged_time = iprot.readString();
        struct.setStaged_timeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.start_load = iprot.readString();
        struct.setStart_loadIsSet(true);
      }
      if (incoming.get(11)) {
        struct.finish_load = iprot.readString();
        struct.setFinish_loadIsSet(true);
      }
      if (incoming.get(12)) {
        struct.first_error_msg = iprot.readString();
        struct.setFirst_error_msgIsSet(true);
      }
      if (incoming.get(13)) {
        struct.error_count = iprot.readI64();
        struct.setError_countIsSet(true);
      }
      if (incoming.get(14)) {
        struct.error_line = iprot.readI64();
        struct.setError_lineIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

