/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TAlterTabletReqV2 implements org.apache.thrift.TBase<TAlterTabletReqV2, TAlterTabletReqV2._Fields>, java.io.Serializable, Cloneable, Comparable<TAlterTabletReqV2> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAlterTabletReqV2");

  private static final org.apache.thrift.protocol.TField BASE_TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("base_tablet_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NEW_TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("new_tablet_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField BASE_SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("base_schema_hash", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NEW_SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("new_schema_hash", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ALTER_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_version", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MATERIALIZED_VIEW_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("materialized_view_params", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField TABLET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_type", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_id", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField MATERIALIZED_COLUMN_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("materialized_column_req", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("job_id", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField QUERY_GLOBALS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_globals", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField QUERY_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_options", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField ALTER_JOB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_job_type", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField DESC_TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("desc_tbl", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField WHERE_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("where_expr", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField BASE_TABLE_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("base_table_column_names", org.apache.thrift.protocol.TType.LIST, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAlterTabletReqV2StandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAlterTabletReqV2TupleSchemeFactory();

  public long base_tablet_id; // required
  public long new_tablet_id; // required
  public int base_schema_hash; // required
  public int new_schema_hash; // required
  public long alter_version; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TAlterMaterializedViewParam> materialized_view_params; // optional
  /**
   * 
   * @see TTabletType
   */
  public @org.apache.thrift.annotation.Nullable TTabletType tablet_type; // optional
  public long txn_id; // optional
  public @org.apache.thrift.annotation.Nullable TAlterTabletMaterializedColumnReq materialized_column_req; // optional
  public long job_id; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TQueryGlobals query_globals; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TQueryOptions query_options; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TColumn> columns; // optional
  /**
   * 
   * @see TAlterJobType
   */
  public @org.apache.thrift.annotation.Nullable TAlterJobType alter_job_type; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TDescriptorTable desc_tbl; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr where_expr; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> base_table_column_names; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BASE_TABLET_ID((short)1, "base_tablet_id"),
    NEW_TABLET_ID((short)2, "new_tablet_id"),
    BASE_SCHEMA_HASH((short)3, "base_schema_hash"),
    NEW_SCHEMA_HASH((short)4, "new_schema_hash"),
    ALTER_VERSION((short)5, "alter_version"),
    MATERIALIZED_VIEW_PARAMS((short)7, "materialized_view_params"),
    /**
     * 
     * @see TTabletType
     */
    TABLET_TYPE((short)8, "tablet_type"),
    TXN_ID((short)9, "txn_id"),
    MATERIALIZED_COLUMN_REQ((short)10, "materialized_column_req"),
    JOB_ID((short)11, "job_id"),
    QUERY_GLOBALS((short)12, "query_globals"),
    QUERY_OPTIONS((short)13, "query_options"),
    COLUMNS((short)14, "columns"),
    /**
     * 
     * @see TAlterJobType
     */
    ALTER_JOB_TYPE((short)15, "alter_job_type"),
    DESC_TBL((short)16, "desc_tbl"),
    WHERE_EXPR((short)17, "where_expr"),
    BASE_TABLE_COLUMN_NAMES((short)18, "base_table_column_names");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BASE_TABLET_ID
          return BASE_TABLET_ID;
        case 2: // NEW_TABLET_ID
          return NEW_TABLET_ID;
        case 3: // BASE_SCHEMA_HASH
          return BASE_SCHEMA_HASH;
        case 4: // NEW_SCHEMA_HASH
          return NEW_SCHEMA_HASH;
        case 5: // ALTER_VERSION
          return ALTER_VERSION;
        case 7: // MATERIALIZED_VIEW_PARAMS
          return MATERIALIZED_VIEW_PARAMS;
        case 8: // TABLET_TYPE
          return TABLET_TYPE;
        case 9: // TXN_ID
          return TXN_ID;
        case 10: // MATERIALIZED_COLUMN_REQ
          return MATERIALIZED_COLUMN_REQ;
        case 11: // JOB_ID
          return JOB_ID;
        case 12: // QUERY_GLOBALS
          return QUERY_GLOBALS;
        case 13: // QUERY_OPTIONS
          return QUERY_OPTIONS;
        case 14: // COLUMNS
          return COLUMNS;
        case 15: // ALTER_JOB_TYPE
          return ALTER_JOB_TYPE;
        case 16: // DESC_TBL
          return DESC_TBL;
        case 17: // WHERE_EXPR
          return WHERE_EXPR;
        case 18: // BASE_TABLE_COLUMN_NAMES
          return BASE_TABLE_COLUMN_NAMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BASE_TABLET_ID_ISSET_ID = 0;
  private static final int __NEW_TABLET_ID_ISSET_ID = 1;
  private static final int __BASE_SCHEMA_HASH_ISSET_ID = 2;
  private static final int __NEW_SCHEMA_HASH_ISSET_ID = 3;
  private static final int __ALTER_VERSION_ISSET_ID = 4;
  private static final int __TXN_ID_ISSET_ID = 5;
  private static final int __JOB_ID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ALTER_VERSION,_Fields.MATERIALIZED_VIEW_PARAMS,_Fields.TABLET_TYPE,_Fields.TXN_ID,_Fields.MATERIALIZED_COLUMN_REQ,_Fields.JOB_ID,_Fields.QUERY_GLOBALS,_Fields.QUERY_OPTIONS,_Fields.COLUMNS,_Fields.ALTER_JOB_TYPE,_Fields.DESC_TBL,_Fields.WHERE_EXPR,_Fields.BASE_TABLE_COLUMN_NAMES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BASE_TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("base_tablet_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.NEW_TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("new_tablet_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.BASE_SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("base_schema_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSchemaHash")));
    tmpMap.put(_Fields.NEW_SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("new_schema_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSchemaHash")));
    tmpMap.put(_Fields.ALTER_VERSION, new org.apache.thrift.meta_data.FieldMetaData("alter_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersion")));
    tmpMap.put(_Fields.MATERIALIZED_VIEW_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("materialized_view_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterMaterializedViewParam.class))));
    tmpMap.put(_Fields.TABLET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tablet_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTabletType.class)));
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txn_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MATERIALIZED_COLUMN_REQ, new org.apache.thrift.meta_data.FieldMetaData("materialized_column_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterTabletMaterializedColumnReq.class)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("job_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_GLOBALS, new org.apache.thrift.meta_data.FieldMetaData("query_globals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TQueryGlobals.class)));
    tmpMap.put(_Fields.QUERY_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("query_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TQueryOptions.class)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TColumn.class))));
    tmpMap.put(_Fields.ALTER_JOB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("alter_job_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TAlterJobType.class)));
    tmpMap.put(_Fields.DESC_TBL, new org.apache.thrift.meta_data.FieldMetaData("desc_tbl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TDescriptorTable.class)));
    tmpMap.put(_Fields.WHERE_EXPR, new org.apache.thrift.meta_data.FieldMetaData("where_expr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class)));
    tmpMap.put(_Fields.BASE_TABLE_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("base_table_column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAlterTabletReqV2.class, metaDataMap);
  }

  public TAlterTabletReqV2() {
    this.alter_job_type = com.starrocks.thrift.TAlterJobType.SCHEMA_CHANGE;

  }

  public TAlterTabletReqV2(
    long base_tablet_id,
    long new_tablet_id,
    int base_schema_hash,
    int new_schema_hash)
  {
    this();
    this.base_tablet_id = base_tablet_id;
    setBase_tablet_idIsSet(true);
    this.new_tablet_id = new_tablet_id;
    setNew_tablet_idIsSet(true);
    this.base_schema_hash = base_schema_hash;
    setBase_schema_hashIsSet(true);
    this.new_schema_hash = new_schema_hash;
    setNew_schema_hashIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAlterTabletReqV2(TAlterTabletReqV2 other) {
    __isset_bitfield = other.__isset_bitfield;
    this.base_tablet_id = other.base_tablet_id;
    this.new_tablet_id = other.new_tablet_id;
    this.base_schema_hash = other.base_schema_hash;
    this.new_schema_hash = other.new_schema_hash;
    this.alter_version = other.alter_version;
    if (other.isSetMaterialized_view_params()) {
      java.util.List<TAlterMaterializedViewParam> __this__materialized_view_params = new java.util.ArrayList<TAlterMaterializedViewParam>(other.materialized_view_params.size());
      for (TAlterMaterializedViewParam other_element : other.materialized_view_params) {
        __this__materialized_view_params.add(new TAlterMaterializedViewParam(other_element));
      }
      this.materialized_view_params = __this__materialized_view_params;
    }
    if (other.isSetTablet_type()) {
      this.tablet_type = other.tablet_type;
    }
    this.txn_id = other.txn_id;
    if (other.isSetMaterialized_column_req()) {
      this.materialized_column_req = new TAlterTabletMaterializedColumnReq(other.materialized_column_req);
    }
    this.job_id = other.job_id;
    if (other.isSetQuery_globals()) {
      this.query_globals = new com.starrocks.thrift.TQueryGlobals(other.query_globals);
    }
    if (other.isSetQuery_options()) {
      this.query_options = new com.starrocks.thrift.TQueryOptions(other.query_options);
    }
    if (other.isSetColumns()) {
      java.util.List<com.starrocks.thrift.TColumn> __this__columns = new java.util.ArrayList<com.starrocks.thrift.TColumn>(other.columns.size());
      for (com.starrocks.thrift.TColumn other_element : other.columns) {
        __this__columns.add(new com.starrocks.thrift.TColumn(other_element));
      }
      this.columns = __this__columns;
    }
    if (other.isSetAlter_job_type()) {
      this.alter_job_type = other.alter_job_type;
    }
    if (other.isSetDesc_tbl()) {
      this.desc_tbl = new com.starrocks.thrift.TDescriptorTable(other.desc_tbl);
    }
    if (other.isSetWhere_expr()) {
      this.where_expr = new com.starrocks.thrift.TExpr(other.where_expr);
    }
    if (other.isSetBase_table_column_names()) {
      java.util.List<java.lang.String> __this__base_table_column_names = new java.util.ArrayList<java.lang.String>(other.base_table_column_names);
      this.base_table_column_names = __this__base_table_column_names;
    }
  }

  @Override
  public TAlterTabletReqV2 deepCopy() {
    return new TAlterTabletReqV2(this);
  }

  @Override
  public void clear() {
    setBase_tablet_idIsSet(false);
    this.base_tablet_id = 0;
    setNew_tablet_idIsSet(false);
    this.new_tablet_id = 0;
    setBase_schema_hashIsSet(false);
    this.base_schema_hash = 0;
    setNew_schema_hashIsSet(false);
    this.new_schema_hash = 0;
    setAlter_versionIsSet(false);
    this.alter_version = 0;
    this.materialized_view_params = null;
    this.tablet_type = null;
    setTxn_idIsSet(false);
    this.txn_id = 0;
    this.materialized_column_req = null;
    setJob_idIsSet(false);
    this.job_id = 0;
    this.query_globals = null;
    this.query_options = null;
    this.columns = null;
    this.alter_job_type = com.starrocks.thrift.TAlterJobType.SCHEMA_CHANGE;

    this.desc_tbl = null;
    this.where_expr = null;
    this.base_table_column_names = null;
  }

  public long getBase_tablet_id() {
    return this.base_tablet_id;
  }

  public TAlterTabletReqV2 setBase_tablet_id(long base_tablet_id) {
    this.base_tablet_id = base_tablet_id;
    setBase_tablet_idIsSet(true);
    return this;
  }

  public void unsetBase_tablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BASE_TABLET_ID_ISSET_ID);
  }

  /** Returns true if field base_tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBase_tablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BASE_TABLET_ID_ISSET_ID);
  }

  public void setBase_tablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BASE_TABLET_ID_ISSET_ID, value);
  }

  public long getNew_tablet_id() {
    return this.new_tablet_id;
  }

  public TAlterTabletReqV2 setNew_tablet_id(long new_tablet_id) {
    this.new_tablet_id = new_tablet_id;
    setNew_tablet_idIsSet(true);
    return this;
  }

  public void unsetNew_tablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEW_TABLET_ID_ISSET_ID);
  }

  /** Returns true if field new_tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetNew_tablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEW_TABLET_ID_ISSET_ID);
  }

  public void setNew_tablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEW_TABLET_ID_ISSET_ID, value);
  }

  public int getBase_schema_hash() {
    return this.base_schema_hash;
  }

  public TAlterTabletReqV2 setBase_schema_hash(int base_schema_hash) {
    this.base_schema_hash = base_schema_hash;
    setBase_schema_hashIsSet(true);
    return this;
  }

  public void unsetBase_schema_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BASE_SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field base_schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetBase_schema_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BASE_SCHEMA_HASH_ISSET_ID);
  }

  public void setBase_schema_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BASE_SCHEMA_HASH_ISSET_ID, value);
  }

  public int getNew_schema_hash() {
    return this.new_schema_hash;
  }

  public TAlterTabletReqV2 setNew_schema_hash(int new_schema_hash) {
    this.new_schema_hash = new_schema_hash;
    setNew_schema_hashIsSet(true);
    return this;
  }

  public void unsetNew_schema_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEW_SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field new_schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetNew_schema_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEW_SCHEMA_HASH_ISSET_ID);
  }

  public void setNew_schema_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEW_SCHEMA_HASH_ISSET_ID, value);
  }

  public long getAlter_version() {
    return this.alter_version;
  }

  public TAlterTabletReqV2 setAlter_version(long alter_version) {
    this.alter_version = alter_version;
    setAlter_versionIsSet(true);
    return this;
  }

  public void unsetAlter_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALTER_VERSION_ISSET_ID);
  }

  /** Returns true if field alter_version is set (has been assigned a value) and false otherwise */
  public boolean isSetAlter_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALTER_VERSION_ISSET_ID);
  }

  public void setAlter_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALTER_VERSION_ISSET_ID, value);
  }

  public int getMaterialized_view_paramsSize() {
    return (this.materialized_view_params == null) ? 0 : this.materialized_view_params.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TAlterMaterializedViewParam> getMaterialized_view_paramsIterator() {
    return (this.materialized_view_params == null) ? null : this.materialized_view_params.iterator();
  }

  public void addToMaterialized_view_params(TAlterMaterializedViewParam elem) {
    if (this.materialized_view_params == null) {
      this.materialized_view_params = new java.util.ArrayList<TAlterMaterializedViewParam>();
    }
    this.materialized_view_params.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TAlterMaterializedViewParam> getMaterialized_view_params() {
    return this.materialized_view_params;
  }

  public TAlterTabletReqV2 setMaterialized_view_params(@org.apache.thrift.annotation.Nullable java.util.List<TAlterMaterializedViewParam> materialized_view_params) {
    this.materialized_view_params = materialized_view_params;
    return this;
  }

  public void unsetMaterialized_view_params() {
    this.materialized_view_params = null;
  }

  /** Returns true if field materialized_view_params is set (has been assigned a value) and false otherwise */
  public boolean isSetMaterialized_view_params() {
    return this.materialized_view_params != null;
  }

  public void setMaterialized_view_paramsIsSet(boolean value) {
    if (!value) {
      this.materialized_view_params = null;
    }
  }

  /**
   * 
   * @see TTabletType
   */
  @org.apache.thrift.annotation.Nullable
  public TTabletType getTablet_type() {
    return this.tablet_type;
  }

  /**
   * 
   * @see TTabletType
   */
  public TAlterTabletReqV2 setTablet_type(@org.apache.thrift.annotation.Nullable TTabletType tablet_type) {
    this.tablet_type = tablet_type;
    return this;
  }

  public void unsetTablet_type() {
    this.tablet_type = null;
  }

  /** Returns true if field tablet_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_type() {
    return this.tablet_type != null;
  }

  public void setTablet_typeIsSet(boolean value) {
    if (!value) {
      this.tablet_type = null;
    }
  }

  public long getTxn_id() {
    return this.txn_id;
  }

  public TAlterTabletReqV2 setTxn_id(long txn_id) {
    this.txn_id = txn_id;
    setTxn_idIsSet(true);
    return this;
  }

  public void unsetTxn_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  /** Returns true if field txn_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTxn_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXN_ID_ISSET_ID);
  }

  public void setTxn_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXN_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TAlterTabletMaterializedColumnReq getMaterialized_column_req() {
    return this.materialized_column_req;
  }

  public TAlterTabletReqV2 setMaterialized_column_req(@org.apache.thrift.annotation.Nullable TAlterTabletMaterializedColumnReq materialized_column_req) {
    this.materialized_column_req = materialized_column_req;
    return this;
  }

  public void unsetMaterialized_column_req() {
    this.materialized_column_req = null;
  }

  /** Returns true if field materialized_column_req is set (has been assigned a value) and false otherwise */
  public boolean isSetMaterialized_column_req() {
    return this.materialized_column_req != null;
  }

  public void setMaterialized_column_reqIsSet(boolean value) {
    if (!value) {
      this.materialized_column_req = null;
    }
  }

  public long getJob_id() {
    return this.job_id;
  }

  public TAlterTabletReqV2 setJob_id(long job_id) {
    this.job_id = job_id;
    setJob_idIsSet(true);
    return this;
  }

  public void unsetJob_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOB_ID_ISSET_ID);
  }

  /** Returns true if field job_id is set (has been assigned a value) and false otherwise */
  public boolean isSetJob_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOB_ID_ISSET_ID);
  }

  public void setJob_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOB_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TQueryGlobals getQuery_globals() {
    return this.query_globals;
  }

  public TAlterTabletReqV2 setQuery_globals(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TQueryGlobals query_globals) {
    this.query_globals = query_globals;
    return this;
  }

  public void unsetQuery_globals() {
    this.query_globals = null;
  }

  /** Returns true if field query_globals is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_globals() {
    return this.query_globals != null;
  }

  public void setQuery_globalsIsSet(boolean value) {
    if (!value) {
      this.query_globals = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TQueryOptions getQuery_options() {
    return this.query_options;
  }

  public TAlterTabletReqV2 setQuery_options(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TQueryOptions query_options) {
    this.query_options = query_options;
    return this;
  }

  public void unsetQuery_options() {
    this.query_options = null;
  }

  /** Returns true if field query_options is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_options() {
    return this.query_options != null;
  }

  public void setQuery_optionsIsSet(boolean value) {
    if (!value) {
      this.query_options = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(com.starrocks.thrift.TColumn elem) {
    if (this.columns == null) {
      this.columns = new java.util.ArrayList<com.starrocks.thrift.TColumn>();
    }
    this.columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TColumn> getColumns() {
    return this.columns;
  }

  public TAlterTabletReqV2 setColumns(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TColumn> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  /**
   * 
   * @see TAlterJobType
   */
  @org.apache.thrift.annotation.Nullable
  public TAlterJobType getAlter_job_type() {
    return this.alter_job_type;
  }

  /**
   * 
   * @see TAlterJobType
   */
  public TAlterTabletReqV2 setAlter_job_type(@org.apache.thrift.annotation.Nullable TAlterJobType alter_job_type) {
    this.alter_job_type = alter_job_type;
    return this;
  }

  public void unsetAlter_job_type() {
    this.alter_job_type = null;
  }

  /** Returns true if field alter_job_type is set (has been assigned a value) and false otherwise */
  public boolean isSetAlter_job_type() {
    return this.alter_job_type != null;
  }

  public void setAlter_job_typeIsSet(boolean value) {
    if (!value) {
      this.alter_job_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TDescriptorTable getDesc_tbl() {
    return this.desc_tbl;
  }

  public TAlterTabletReqV2 setDesc_tbl(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TDescriptorTable desc_tbl) {
    this.desc_tbl = desc_tbl;
    return this;
  }

  public void unsetDesc_tbl() {
    this.desc_tbl = null;
  }

  /** Returns true if field desc_tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc_tbl() {
    return this.desc_tbl != null;
  }

  public void setDesc_tblIsSet(boolean value) {
    if (!value) {
      this.desc_tbl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TExpr getWhere_expr() {
    return this.where_expr;
  }

  public TAlterTabletReqV2 setWhere_expr(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr where_expr) {
    this.where_expr = where_expr;
    return this;
  }

  public void unsetWhere_expr() {
    this.where_expr = null;
  }

  /** Returns true if field where_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetWhere_expr() {
    return this.where_expr != null;
  }

  public void setWhere_exprIsSet(boolean value) {
    if (!value) {
      this.where_expr = null;
    }
  }

  public int getBase_table_column_namesSize() {
    return (this.base_table_column_names == null) ? 0 : this.base_table_column_names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getBase_table_column_namesIterator() {
    return (this.base_table_column_names == null) ? null : this.base_table_column_names.iterator();
  }

  public void addToBase_table_column_names(java.lang.String elem) {
    if (this.base_table_column_names == null) {
      this.base_table_column_names = new java.util.ArrayList<java.lang.String>();
    }
    this.base_table_column_names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getBase_table_column_names() {
    return this.base_table_column_names;
  }

  public TAlterTabletReqV2 setBase_table_column_names(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> base_table_column_names) {
    this.base_table_column_names = base_table_column_names;
    return this;
  }

  public void unsetBase_table_column_names() {
    this.base_table_column_names = null;
  }

  /** Returns true if field base_table_column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetBase_table_column_names() {
    return this.base_table_column_names != null;
  }

  public void setBase_table_column_namesIsSet(boolean value) {
    if (!value) {
      this.base_table_column_names = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case BASE_TABLET_ID:
      if (value == null) {
        unsetBase_tablet_id();
      } else {
        setBase_tablet_id((java.lang.Long)value);
      }
      break;

    case NEW_TABLET_ID:
      if (value == null) {
        unsetNew_tablet_id();
      } else {
        setNew_tablet_id((java.lang.Long)value);
      }
      break;

    case BASE_SCHEMA_HASH:
      if (value == null) {
        unsetBase_schema_hash();
      } else {
        setBase_schema_hash((java.lang.Integer)value);
      }
      break;

    case NEW_SCHEMA_HASH:
      if (value == null) {
        unsetNew_schema_hash();
      } else {
        setNew_schema_hash((java.lang.Integer)value);
      }
      break;

    case ALTER_VERSION:
      if (value == null) {
        unsetAlter_version();
      } else {
        setAlter_version((java.lang.Long)value);
      }
      break;

    case MATERIALIZED_VIEW_PARAMS:
      if (value == null) {
        unsetMaterialized_view_params();
      } else {
        setMaterialized_view_params((java.util.List<TAlterMaterializedViewParam>)value);
      }
      break;

    case TABLET_TYPE:
      if (value == null) {
        unsetTablet_type();
      } else {
        setTablet_type((TTabletType)value);
      }
      break;

    case TXN_ID:
      if (value == null) {
        unsetTxn_id();
      } else {
        setTxn_id((java.lang.Long)value);
      }
      break;

    case MATERIALIZED_COLUMN_REQ:
      if (value == null) {
        unsetMaterialized_column_req();
      } else {
        setMaterialized_column_req((TAlterTabletMaterializedColumnReq)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJob_id();
      } else {
        setJob_id((java.lang.Long)value);
      }
      break;

    case QUERY_GLOBALS:
      if (value == null) {
        unsetQuery_globals();
      } else {
        setQuery_globals((com.starrocks.thrift.TQueryGlobals)value);
      }
      break;

    case QUERY_OPTIONS:
      if (value == null) {
        unsetQuery_options();
      } else {
        setQuery_options((com.starrocks.thrift.TQueryOptions)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((java.util.List<com.starrocks.thrift.TColumn>)value);
      }
      break;

    case ALTER_JOB_TYPE:
      if (value == null) {
        unsetAlter_job_type();
      } else {
        setAlter_job_type((TAlterJobType)value);
      }
      break;

    case DESC_TBL:
      if (value == null) {
        unsetDesc_tbl();
      } else {
        setDesc_tbl((com.starrocks.thrift.TDescriptorTable)value);
      }
      break;

    case WHERE_EXPR:
      if (value == null) {
        unsetWhere_expr();
      } else {
        setWhere_expr((com.starrocks.thrift.TExpr)value);
      }
      break;

    case BASE_TABLE_COLUMN_NAMES:
      if (value == null) {
        unsetBase_table_column_names();
      } else {
        setBase_table_column_names((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BASE_TABLET_ID:
      return getBase_tablet_id();

    case NEW_TABLET_ID:
      return getNew_tablet_id();

    case BASE_SCHEMA_HASH:
      return getBase_schema_hash();

    case NEW_SCHEMA_HASH:
      return getNew_schema_hash();

    case ALTER_VERSION:
      return getAlter_version();

    case MATERIALIZED_VIEW_PARAMS:
      return getMaterialized_view_params();

    case TABLET_TYPE:
      return getTablet_type();

    case TXN_ID:
      return getTxn_id();

    case MATERIALIZED_COLUMN_REQ:
      return getMaterialized_column_req();

    case JOB_ID:
      return getJob_id();

    case QUERY_GLOBALS:
      return getQuery_globals();

    case QUERY_OPTIONS:
      return getQuery_options();

    case COLUMNS:
      return getColumns();

    case ALTER_JOB_TYPE:
      return getAlter_job_type();

    case DESC_TBL:
      return getDesc_tbl();

    case WHERE_EXPR:
      return getWhere_expr();

    case BASE_TABLE_COLUMN_NAMES:
      return getBase_table_column_names();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BASE_TABLET_ID:
      return isSetBase_tablet_id();
    case NEW_TABLET_ID:
      return isSetNew_tablet_id();
    case BASE_SCHEMA_HASH:
      return isSetBase_schema_hash();
    case NEW_SCHEMA_HASH:
      return isSetNew_schema_hash();
    case ALTER_VERSION:
      return isSetAlter_version();
    case MATERIALIZED_VIEW_PARAMS:
      return isSetMaterialized_view_params();
    case TABLET_TYPE:
      return isSetTablet_type();
    case TXN_ID:
      return isSetTxn_id();
    case MATERIALIZED_COLUMN_REQ:
      return isSetMaterialized_column_req();
    case JOB_ID:
      return isSetJob_id();
    case QUERY_GLOBALS:
      return isSetQuery_globals();
    case QUERY_OPTIONS:
      return isSetQuery_options();
    case COLUMNS:
      return isSetColumns();
    case ALTER_JOB_TYPE:
      return isSetAlter_job_type();
    case DESC_TBL:
      return isSetDesc_tbl();
    case WHERE_EXPR:
      return isSetWhere_expr();
    case BASE_TABLE_COLUMN_NAMES:
      return isSetBase_table_column_names();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TAlterTabletReqV2)
      return this.equals((TAlterTabletReqV2)that);
    return false;
  }

  public boolean equals(TAlterTabletReqV2 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_base_tablet_id = true;
    boolean that_present_base_tablet_id = true;
    if (this_present_base_tablet_id || that_present_base_tablet_id) {
      if (!(this_present_base_tablet_id && that_present_base_tablet_id))
        return false;
      if (this.base_tablet_id != that.base_tablet_id)
        return false;
    }

    boolean this_present_new_tablet_id = true;
    boolean that_present_new_tablet_id = true;
    if (this_present_new_tablet_id || that_present_new_tablet_id) {
      if (!(this_present_new_tablet_id && that_present_new_tablet_id))
        return false;
      if (this.new_tablet_id != that.new_tablet_id)
        return false;
    }

    boolean this_present_base_schema_hash = true;
    boolean that_present_base_schema_hash = true;
    if (this_present_base_schema_hash || that_present_base_schema_hash) {
      if (!(this_present_base_schema_hash && that_present_base_schema_hash))
        return false;
      if (this.base_schema_hash != that.base_schema_hash)
        return false;
    }

    boolean this_present_new_schema_hash = true;
    boolean that_present_new_schema_hash = true;
    if (this_present_new_schema_hash || that_present_new_schema_hash) {
      if (!(this_present_new_schema_hash && that_present_new_schema_hash))
        return false;
      if (this.new_schema_hash != that.new_schema_hash)
        return false;
    }

    boolean this_present_alter_version = true && this.isSetAlter_version();
    boolean that_present_alter_version = true && that.isSetAlter_version();
    if (this_present_alter_version || that_present_alter_version) {
      if (!(this_present_alter_version && that_present_alter_version))
        return false;
      if (this.alter_version != that.alter_version)
        return false;
    }

    boolean this_present_materialized_view_params = true && this.isSetMaterialized_view_params();
    boolean that_present_materialized_view_params = true && that.isSetMaterialized_view_params();
    if (this_present_materialized_view_params || that_present_materialized_view_params) {
      if (!(this_present_materialized_view_params && that_present_materialized_view_params))
        return false;
      if (!this.materialized_view_params.equals(that.materialized_view_params))
        return false;
    }

    boolean this_present_tablet_type = true && this.isSetTablet_type();
    boolean that_present_tablet_type = true && that.isSetTablet_type();
    if (this_present_tablet_type || that_present_tablet_type) {
      if (!(this_present_tablet_type && that_present_tablet_type))
        return false;
      if (!this.tablet_type.equals(that.tablet_type))
        return false;
    }

    boolean this_present_txn_id = true && this.isSetTxn_id();
    boolean that_present_txn_id = true && that.isSetTxn_id();
    if (this_present_txn_id || that_present_txn_id) {
      if (!(this_present_txn_id && that_present_txn_id))
        return false;
      if (this.txn_id != that.txn_id)
        return false;
    }

    boolean this_present_materialized_column_req = true && this.isSetMaterialized_column_req();
    boolean that_present_materialized_column_req = true && that.isSetMaterialized_column_req();
    if (this_present_materialized_column_req || that_present_materialized_column_req) {
      if (!(this_present_materialized_column_req && that_present_materialized_column_req))
        return false;
      if (!this.materialized_column_req.equals(that.materialized_column_req))
        return false;
    }

    boolean this_present_job_id = true && this.isSetJob_id();
    boolean that_present_job_id = true && that.isSetJob_id();
    if (this_present_job_id || that_present_job_id) {
      if (!(this_present_job_id && that_present_job_id))
        return false;
      if (this.job_id != that.job_id)
        return false;
    }

    boolean this_present_query_globals = true && this.isSetQuery_globals();
    boolean that_present_query_globals = true && that.isSetQuery_globals();
    if (this_present_query_globals || that_present_query_globals) {
      if (!(this_present_query_globals && that_present_query_globals))
        return false;
      if (!this.query_globals.equals(that.query_globals))
        return false;
    }

    boolean this_present_query_options = true && this.isSetQuery_options();
    boolean that_present_query_options = true && that.isSetQuery_options();
    if (this_present_query_options || that_present_query_options) {
      if (!(this_present_query_options && that_present_query_options))
        return false;
      if (!this.query_options.equals(that.query_options))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_alter_job_type = true && this.isSetAlter_job_type();
    boolean that_present_alter_job_type = true && that.isSetAlter_job_type();
    if (this_present_alter_job_type || that_present_alter_job_type) {
      if (!(this_present_alter_job_type && that_present_alter_job_type))
        return false;
      if (!this.alter_job_type.equals(that.alter_job_type))
        return false;
    }

    boolean this_present_desc_tbl = true && this.isSetDesc_tbl();
    boolean that_present_desc_tbl = true && that.isSetDesc_tbl();
    if (this_present_desc_tbl || that_present_desc_tbl) {
      if (!(this_present_desc_tbl && that_present_desc_tbl))
        return false;
      if (!this.desc_tbl.equals(that.desc_tbl))
        return false;
    }

    boolean this_present_where_expr = true && this.isSetWhere_expr();
    boolean that_present_where_expr = true && that.isSetWhere_expr();
    if (this_present_where_expr || that_present_where_expr) {
      if (!(this_present_where_expr && that_present_where_expr))
        return false;
      if (!this.where_expr.equals(that.where_expr))
        return false;
    }

    boolean this_present_base_table_column_names = true && this.isSetBase_table_column_names();
    boolean that_present_base_table_column_names = true && that.isSetBase_table_column_names();
    if (this_present_base_table_column_names || that_present_base_table_column_names) {
      if (!(this_present_base_table_column_names && that_present_base_table_column_names))
        return false;
      if (!this.base_table_column_names.equals(that.base_table_column_names))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(base_tablet_id);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(new_tablet_id);

    hashCode = hashCode * 8191 + base_schema_hash;

    hashCode = hashCode * 8191 + new_schema_hash;

    hashCode = hashCode * 8191 + ((isSetAlter_version()) ? 131071 : 524287);
    if (isSetAlter_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(alter_version);

    hashCode = hashCode * 8191 + ((isSetMaterialized_view_params()) ? 131071 : 524287);
    if (isSetMaterialized_view_params())
      hashCode = hashCode * 8191 + materialized_view_params.hashCode();

    hashCode = hashCode * 8191 + ((isSetTablet_type()) ? 131071 : 524287);
    if (isSetTablet_type())
      hashCode = hashCode * 8191 + tablet_type.getValue();

    hashCode = hashCode * 8191 + ((isSetTxn_id()) ? 131071 : 524287);
    if (isSetTxn_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txn_id);

    hashCode = hashCode * 8191 + ((isSetMaterialized_column_req()) ? 131071 : 524287);
    if (isSetMaterialized_column_req())
      hashCode = hashCode * 8191 + materialized_column_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetJob_id()) ? 131071 : 524287);
    if (isSetJob_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(job_id);

    hashCode = hashCode * 8191 + ((isSetQuery_globals()) ? 131071 : 524287);
    if (isSetQuery_globals())
      hashCode = hashCode * 8191 + query_globals.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuery_options()) ? 131071 : 524287);
    if (isSetQuery_options())
      hashCode = hashCode * 8191 + query_options.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
    if (isSetColumns())
      hashCode = hashCode * 8191 + columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetAlter_job_type()) ? 131071 : 524287);
    if (isSetAlter_job_type())
      hashCode = hashCode * 8191 + alter_job_type.getValue();

    hashCode = hashCode * 8191 + ((isSetDesc_tbl()) ? 131071 : 524287);
    if (isSetDesc_tbl())
      hashCode = hashCode * 8191 + desc_tbl.hashCode();

    hashCode = hashCode * 8191 + ((isSetWhere_expr()) ? 131071 : 524287);
    if (isSetWhere_expr())
      hashCode = hashCode * 8191 + where_expr.hashCode();

    hashCode = hashCode * 8191 + ((isSetBase_table_column_names()) ? 131071 : 524287);
    if (isSetBase_table_column_names())
      hashCode = hashCode * 8191 + base_table_column_names.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TAlterTabletReqV2 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetBase_tablet_id(), other.isSetBase_tablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase_tablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base_tablet_id, other.base_tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNew_tablet_id(), other.isSetNew_tablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNew_tablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_tablet_id, other.new_tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBase_schema_hash(), other.isSetBase_schema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase_schema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base_schema_hash, other.base_schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNew_schema_hash(), other.isSetNew_schema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNew_schema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_schema_hash, other.new_schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAlter_version(), other.isSetAlter_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlter_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_version, other.alter_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaterialized_view_params(), other.isSetMaterialized_view_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaterialized_view_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.materialized_view_params, other.materialized_view_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_type(), other.isSetTablet_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_type, other.tablet_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxn_id(), other.isSetTxn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_id, other.txn_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaterialized_column_req(), other.isSetMaterialized_column_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaterialized_column_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.materialized_column_req, other.materialized_column_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJob_id(), other.isSetJob_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job_id, other.job_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_globals(), other.isSetQuery_globals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_globals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_globals, other.query_globals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_options(), other.isSetQuery_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_options, other.query_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAlter_job_type(), other.isSetAlter_job_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlter_job_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_job_type, other.alter_job_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDesc_tbl(), other.isSetDesc_tbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc_tbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc_tbl, other.desc_tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWhere_expr(), other.isSetWhere_expr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhere_expr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where_expr, other.where_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBase_table_column_names(), other.isSetBase_table_column_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase_table_column_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base_table_column_names, other.base_table_column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAlterTabletReqV2(");
    boolean first = true;

    sb.append("base_tablet_id:");
    sb.append(this.base_tablet_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("new_tablet_id:");
    sb.append(this.new_tablet_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("base_schema_hash:");
    sb.append(this.base_schema_hash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("new_schema_hash:");
    sb.append(this.new_schema_hash);
    first = false;
    if (isSetAlter_version()) {
      if (!first) sb.append(", ");
      sb.append("alter_version:");
      sb.append(this.alter_version);
      first = false;
    }
    if (isSetMaterialized_view_params()) {
      if (!first) sb.append(", ");
      sb.append("materialized_view_params:");
      if (this.materialized_view_params == null) {
        sb.append("null");
      } else {
        sb.append(this.materialized_view_params);
      }
      first = false;
    }
    if (isSetTablet_type()) {
      if (!first) sb.append(", ");
      sb.append("tablet_type:");
      if (this.tablet_type == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet_type);
      }
      first = false;
    }
    if (isSetTxn_id()) {
      if (!first) sb.append(", ");
      sb.append("txn_id:");
      sb.append(this.txn_id);
      first = false;
    }
    if (isSetMaterialized_column_req()) {
      if (!first) sb.append(", ");
      sb.append("materialized_column_req:");
      if (this.materialized_column_req == null) {
        sb.append("null");
      } else {
        sb.append(this.materialized_column_req);
      }
      first = false;
    }
    if (isSetJob_id()) {
      if (!first) sb.append(", ");
      sb.append("job_id:");
      sb.append(this.job_id);
      first = false;
    }
    if (isSetQuery_globals()) {
      if (!first) sb.append(", ");
      sb.append("query_globals:");
      if (this.query_globals == null) {
        sb.append("null");
      } else {
        sb.append(this.query_globals);
      }
      first = false;
    }
    if (isSetQuery_options()) {
      if (!first) sb.append(", ");
      sb.append("query_options:");
      if (this.query_options == null) {
        sb.append("null");
      } else {
        sb.append(this.query_options);
      }
      first = false;
    }
    if (isSetColumns()) {
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
    }
    if (isSetAlter_job_type()) {
      if (!first) sb.append(", ");
      sb.append("alter_job_type:");
      if (this.alter_job_type == null) {
        sb.append("null");
      } else {
        sb.append(this.alter_job_type);
      }
      first = false;
    }
    if (isSetDesc_tbl()) {
      if (!first) sb.append(", ");
      sb.append("desc_tbl:");
      if (this.desc_tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.desc_tbl);
      }
      first = false;
    }
    if (isSetWhere_expr()) {
      if (!first) sb.append(", ");
      sb.append("where_expr:");
      if (this.where_expr == null) {
        sb.append("null");
      } else {
        sb.append(this.where_expr);
      }
      first = false;
    }
    if (isSetBase_table_column_names()) {
      if (!first) sb.append(", ");
      sb.append("base_table_column_names:");
      if (this.base_table_column_names == null) {
        sb.append("null");
      } else {
        sb.append(this.base_table_column_names);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'base_tablet_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'new_tablet_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'base_schema_hash' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'new_schema_hash' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (materialized_column_req != null) {
      materialized_column_req.validate();
    }
    if (query_globals != null) {
      query_globals.validate();
    }
    if (query_options != null) {
      query_options.validate();
    }
    if (desc_tbl != null) {
      desc_tbl.validate();
    }
    if (where_expr != null) {
      where_expr.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAlterTabletReqV2StandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAlterTabletReqV2StandardScheme getScheme() {
      return new TAlterTabletReqV2StandardScheme();
    }
  }

  private static class TAlterTabletReqV2StandardScheme extends org.apache.thrift.scheme.StandardScheme<TAlterTabletReqV2> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TAlterTabletReqV2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BASE_TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.base_tablet_id = iprot.readI64();
              struct.setBase_tablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEW_TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.new_tablet_id = iprot.readI64();
              struct.setNew_tablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BASE_SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.base_schema_hash = iprot.readI32();
              struct.setBase_schema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEW_SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.new_schema_hash = iprot.readI32();
              struct.setNew_schema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALTER_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.alter_version = iprot.readI64();
              struct.setAlter_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MATERIALIZED_VIEW_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.materialized_view_params = new java.util.ArrayList<TAlterMaterializedViewParam>(_list42.size);
                @org.apache.thrift.annotation.Nullable TAlterMaterializedViewParam _elem43;
                for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                {
                  _elem43 = new TAlterMaterializedViewParam();
                  _elem43.read(iprot);
                  struct.materialized_view_params.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setMaterialized_view_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TABLET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tablet_type = com.starrocks.thrift.TTabletType.findByValue(iprot.readI32());
              struct.setTablet_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txn_id = iprot.readI64();
              struct.setTxn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MATERIALIZED_COLUMN_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.materialized_column_req = new TAlterTabletMaterializedColumnReq();
              struct.materialized_column_req.read(iprot);
              struct.setMaterialized_column_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.job_id = iprot.readI64();
              struct.setJob_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // QUERY_GLOBALS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_globals = new com.starrocks.thrift.TQueryGlobals();
              struct.query_globals.read(iprot);
              struct.setQuery_globalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // QUERY_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_options = new com.starrocks.thrift.TQueryOptions();
              struct.query_options.read(iprot);
              struct.setQuery_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list45 = iprot.readListBegin();
                struct.columns = new java.util.ArrayList<com.starrocks.thrift.TColumn>(_list45.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TColumn _elem46;
                for (int _i47 = 0; _i47 < _list45.size; ++_i47)
                {
                  _elem46 = new com.starrocks.thrift.TColumn();
                  _elem46.read(iprot);
                  struct.columns.add(_elem46);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ALTER_JOB_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.alter_job_type = com.starrocks.thrift.TAlterJobType.findByValue(iprot.readI32());
              struct.setAlter_job_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DESC_TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.desc_tbl = new com.starrocks.thrift.TDescriptorTable();
              struct.desc_tbl.read(iprot);
              struct.setDesc_tblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // WHERE_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.where_expr = new com.starrocks.thrift.TExpr();
              struct.where_expr.read(iprot);
              struct.setWhere_exprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BASE_TABLE_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.base_table_column_names = new java.util.ArrayList<java.lang.String>(_list48.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = iprot.readString();
                  struct.base_table_column_names.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setBase_table_column_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBase_tablet_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'base_tablet_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNew_tablet_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'new_tablet_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBase_schema_hash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'base_schema_hash' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNew_schema_hash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'new_schema_hash' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TAlterTabletReqV2 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BASE_TABLET_ID_FIELD_DESC);
      oprot.writeI64(struct.base_tablet_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_TABLET_ID_FIELD_DESC);
      oprot.writeI64(struct.new_tablet_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BASE_SCHEMA_HASH_FIELD_DESC);
      oprot.writeI32(struct.base_schema_hash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_SCHEMA_HASH_FIELD_DESC);
      oprot.writeI32(struct.new_schema_hash);
      oprot.writeFieldEnd();
      if (struct.isSetAlter_version()) {
        oprot.writeFieldBegin(ALTER_VERSION_FIELD_DESC);
        oprot.writeI64(struct.alter_version);
        oprot.writeFieldEnd();
      }
      if (struct.materialized_view_params != null) {
        if (struct.isSetMaterialized_view_params()) {
          oprot.writeFieldBegin(MATERIALIZED_VIEW_PARAMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.materialized_view_params.size()));
            for (TAlterMaterializedViewParam _iter51 : struct.materialized_view_params)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tablet_type != null) {
        if (struct.isSetTablet_type()) {
          oprot.writeFieldBegin(TABLET_TYPE_FIELD_DESC);
          oprot.writeI32(struct.tablet_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTxn_id()) {
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txn_id);
        oprot.writeFieldEnd();
      }
      if (struct.materialized_column_req != null) {
        if (struct.isSetMaterialized_column_req()) {
          oprot.writeFieldBegin(MATERIALIZED_COLUMN_REQ_FIELD_DESC);
          struct.materialized_column_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetJob_id()) {
        oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
        oprot.writeI64(struct.job_id);
        oprot.writeFieldEnd();
      }
      if (struct.query_globals != null) {
        if (struct.isSetQuery_globals()) {
          oprot.writeFieldBegin(QUERY_GLOBALS_FIELD_DESC);
          struct.query_globals.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_options != null) {
        if (struct.isSetQuery_options()) {
          oprot.writeFieldBegin(QUERY_OPTIONS_FIELD_DESC);
          struct.query_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columns != null) {
        if (struct.isSetColumns()) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
            for (com.starrocks.thrift.TColumn _iter52 : struct.columns)
            {
              _iter52.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.alter_job_type != null) {
        if (struct.isSetAlter_job_type()) {
          oprot.writeFieldBegin(ALTER_JOB_TYPE_FIELD_DESC);
          oprot.writeI32(struct.alter_job_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc_tbl != null) {
        if (struct.isSetDesc_tbl()) {
          oprot.writeFieldBegin(DESC_TBL_FIELD_DESC);
          struct.desc_tbl.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.where_expr != null) {
        if (struct.isSetWhere_expr()) {
          oprot.writeFieldBegin(WHERE_EXPR_FIELD_DESC);
          struct.where_expr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.base_table_column_names != null) {
        if (struct.isSetBase_table_column_names()) {
          oprot.writeFieldBegin(BASE_TABLE_COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.base_table_column_names.size()));
            for (java.lang.String _iter53 : struct.base_table_column_names)
            {
              oprot.writeString(_iter53);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAlterTabletReqV2TupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAlterTabletReqV2TupleScheme getScheme() {
      return new TAlterTabletReqV2TupleScheme();
    }
  }

  private static class TAlterTabletReqV2TupleScheme extends org.apache.thrift.scheme.TupleScheme<TAlterTabletReqV2> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAlterTabletReqV2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.base_tablet_id);
      oprot.writeI64(struct.new_tablet_id);
      oprot.writeI32(struct.base_schema_hash);
      oprot.writeI32(struct.new_schema_hash);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAlter_version()) {
        optionals.set(0);
      }
      if (struct.isSetMaterialized_view_params()) {
        optionals.set(1);
      }
      if (struct.isSetTablet_type()) {
        optionals.set(2);
      }
      if (struct.isSetTxn_id()) {
        optionals.set(3);
      }
      if (struct.isSetMaterialized_column_req()) {
        optionals.set(4);
      }
      if (struct.isSetJob_id()) {
        optionals.set(5);
      }
      if (struct.isSetQuery_globals()) {
        optionals.set(6);
      }
      if (struct.isSetQuery_options()) {
        optionals.set(7);
      }
      if (struct.isSetColumns()) {
        optionals.set(8);
      }
      if (struct.isSetAlter_job_type()) {
        optionals.set(9);
      }
      if (struct.isSetDesc_tbl()) {
        optionals.set(10);
      }
      if (struct.isSetWhere_expr()) {
        optionals.set(11);
      }
      if (struct.isSetBase_table_column_names()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetAlter_version()) {
        oprot.writeI64(struct.alter_version);
      }
      if (struct.isSetMaterialized_view_params()) {
        {
          oprot.writeI32(struct.materialized_view_params.size());
          for (TAlterMaterializedViewParam _iter54 : struct.materialized_view_params)
          {
            _iter54.write(oprot);
          }
        }
      }
      if (struct.isSetTablet_type()) {
        oprot.writeI32(struct.tablet_type.getValue());
      }
      if (struct.isSetTxn_id()) {
        oprot.writeI64(struct.txn_id);
      }
      if (struct.isSetMaterialized_column_req()) {
        struct.materialized_column_req.write(oprot);
      }
      if (struct.isSetJob_id()) {
        oprot.writeI64(struct.job_id);
      }
      if (struct.isSetQuery_globals()) {
        struct.query_globals.write(oprot);
      }
      if (struct.isSetQuery_options()) {
        struct.query_options.write(oprot);
      }
      if (struct.isSetColumns()) {
        {
          oprot.writeI32(struct.columns.size());
          for (com.starrocks.thrift.TColumn _iter55 : struct.columns)
          {
            _iter55.write(oprot);
          }
        }
      }
      if (struct.isSetAlter_job_type()) {
        oprot.writeI32(struct.alter_job_type.getValue());
      }
      if (struct.isSetDesc_tbl()) {
        struct.desc_tbl.write(oprot);
      }
      if (struct.isSetWhere_expr()) {
        struct.where_expr.write(oprot);
      }
      if (struct.isSetBase_table_column_names()) {
        {
          oprot.writeI32(struct.base_table_column_names.size());
          for (java.lang.String _iter56 : struct.base_table_column_names)
          {
            oprot.writeString(_iter56);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAlterTabletReqV2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.base_tablet_id = iprot.readI64();
      struct.setBase_tablet_idIsSet(true);
      struct.new_tablet_id = iprot.readI64();
      struct.setNew_tablet_idIsSet(true);
      struct.base_schema_hash = iprot.readI32();
      struct.setBase_schema_hashIsSet(true);
      struct.new_schema_hash = iprot.readI32();
      struct.setNew_schema_hashIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.alter_version = iprot.readI64();
        struct.setAlter_versionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list57 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.materialized_view_params = new java.util.ArrayList<TAlterMaterializedViewParam>(_list57.size);
          @org.apache.thrift.annotation.Nullable TAlterMaterializedViewParam _elem58;
          for (int _i59 = 0; _i59 < _list57.size; ++_i59)
          {
            _elem58 = new TAlterMaterializedViewParam();
            _elem58.read(iprot);
            struct.materialized_view_params.add(_elem58);
          }
        }
        struct.setMaterialized_view_paramsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tablet_type = com.starrocks.thrift.TTabletType.findByValue(iprot.readI32());
        struct.setTablet_typeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.txn_id = iprot.readI64();
        struct.setTxn_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.materialized_column_req = new TAlterTabletMaterializedColumnReq();
        struct.materialized_column_req.read(iprot);
        struct.setMaterialized_column_reqIsSet(true);
      }
      if (incoming.get(5)) {
        struct.job_id = iprot.readI64();
        struct.setJob_idIsSet(true);
      }
      if (incoming.get(6)) {
        struct.query_globals = new com.starrocks.thrift.TQueryGlobals();
        struct.query_globals.read(iprot);
        struct.setQuery_globalsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.query_options = new com.starrocks.thrift.TQueryOptions();
        struct.query_options.read(iprot);
        struct.setQuery_optionsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list60 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.columns = new java.util.ArrayList<com.starrocks.thrift.TColumn>(_list60.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TColumn _elem61;
          for (int _i62 = 0; _i62 < _list60.size; ++_i62)
          {
            _elem61 = new com.starrocks.thrift.TColumn();
            _elem61.read(iprot);
            struct.columns.add(_elem61);
          }
        }
        struct.setColumnsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.alter_job_type = com.starrocks.thrift.TAlterJobType.findByValue(iprot.readI32());
        struct.setAlter_job_typeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.desc_tbl = new com.starrocks.thrift.TDescriptorTable();
        struct.desc_tbl.read(iprot);
        struct.setDesc_tblIsSet(true);
      }
      if (incoming.get(11)) {
        struct.where_expr = new com.starrocks.thrift.TExpr();
        struct.where_expr.read(iprot);
        struct.setWhere_exprIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list63 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.base_table_column_names = new java.util.ArrayList<java.lang.String>(_list63.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem64;
          for (int _i65 = 0; _i65 < _list63.size; ++_i65)
          {
            _elem64 = iprot.readString();
            struct.base_table_column_names.add(_elem64);
          }
        }
        struct.setBase_table_column_namesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

