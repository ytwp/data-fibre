/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;


@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public enum TPlanNodeType implements org.apache.thrift.TEnum {
  OLAP_SCAN_NODE(0),
  MYSQL_SCAN_NODE(1),
  CSV_SCAN_NODE(2),
  SCHEMA_SCAN_NODE(3),
  HASH_JOIN_NODE(4),
  MERGE_JOIN_NODE(5),
  AGGREGATION_NODE(6),
  PRE_AGGREGATION_NODE(7),
  SORT_NODE(8),
  EXCHANGE_NODE(9),
  MERGE_NODE(10),
  SELECT_NODE(11),
  CROSS_JOIN_NODE(12),
  META_SCAN_NODE(13),
  ANALYTIC_EVAL_NODE(14),
  OLAP_REWRITE_NODE(15),
  KUDU_SCAN_NODE(16),
  FILE_SCAN_NODE(17),
  EMPTY_SET_NODE(18),
  UNION_NODE(19),
  ES_SCAN_NODE(20),
  ES_HTTP_SCAN_NODE(21),
  REPEAT_NODE(22),
  ASSERT_NUM_ROWS_NODE(23),
  INTERSECT_NODE(24),
  EXCEPT_NODE(25),
  ADAPTER_NODE(26),
  HDFS_SCAN_NODE(27),
  PROJECT_NODE(28),
  TABLE_FUNCTION_NODE(29),
  DECODE_NODE(30),
  JDBC_SCAN_NODE(31),
  LAKE_SCAN_NODE(32),
  NESTLOOP_JOIN_NODE(33),
  STREAM_SCAN_NODE(34),
  STREAM_JOIN_NODE(35),
  STREAM_AGG_NODE(36),
  LAKE_META_SCAN_NODE(37);

  private final int value;

  private TPlanNodeType(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  @Override
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  @org.apache.thrift.annotation.Nullable
  public static TPlanNodeType findByValue(int value) { 
    switch (value) {
      case 0:
        return OLAP_SCAN_NODE;
      case 1:
        return MYSQL_SCAN_NODE;
      case 2:
        return CSV_SCAN_NODE;
      case 3:
        return SCHEMA_SCAN_NODE;
      case 4:
        return HASH_JOIN_NODE;
      case 5:
        return MERGE_JOIN_NODE;
      case 6:
        return AGGREGATION_NODE;
      case 7:
        return PRE_AGGREGATION_NODE;
      case 8:
        return SORT_NODE;
      case 9:
        return EXCHANGE_NODE;
      case 10:
        return MERGE_NODE;
      case 11:
        return SELECT_NODE;
      case 12:
        return CROSS_JOIN_NODE;
      case 13:
        return META_SCAN_NODE;
      case 14:
        return ANALYTIC_EVAL_NODE;
      case 15:
        return OLAP_REWRITE_NODE;
      case 16:
        return KUDU_SCAN_NODE;
      case 17:
        return FILE_SCAN_NODE;
      case 18:
        return EMPTY_SET_NODE;
      case 19:
        return UNION_NODE;
      case 20:
        return ES_SCAN_NODE;
      case 21:
        return ES_HTTP_SCAN_NODE;
      case 22:
        return REPEAT_NODE;
      case 23:
        return ASSERT_NUM_ROWS_NODE;
      case 24:
        return INTERSECT_NODE;
      case 25:
        return EXCEPT_NODE;
      case 26:
        return ADAPTER_NODE;
      case 27:
        return HDFS_SCAN_NODE;
      case 28:
        return PROJECT_NODE;
      case 29:
        return TABLE_FUNCTION_NODE;
      case 30:
        return DECODE_NODE;
      case 31:
        return JDBC_SCAN_NODE;
      case 32:
        return LAKE_SCAN_NODE;
      case 33:
        return NESTLOOP_JOIN_NODE;
      case 34:
        return STREAM_SCAN_NODE;
      case 35:
        return STREAM_JOIN_NODE;
      case 36:
        return STREAM_AGG_NODE;
      case 37:
        return LAKE_META_SCAN_NODE;
      default:
        return null;
    }
  }
}
