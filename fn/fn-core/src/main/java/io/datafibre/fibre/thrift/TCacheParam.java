/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TCacheParam implements org.apache.thrift.TBase<TCacheParam, TCacheParam._Fields>, java.io.Serializable, Cloneable, Comparable<TCacheParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCacheParam");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("digest", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SLOT_REMAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("slot_remapping", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField REGION_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("region_map", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField FORCE_POPULATE_FIELD_DESC = new org.apache.thrift.protocol.TField("force_populate", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField ENTRY_MAX_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("entry_max_bytes", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ENTRY_MAX_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("entry_max_rows", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CAN_USE_MULTIVERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("can_use_multiversion", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField KEYS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("keys_type", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CACHED_PLAN_NODE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cached_plan_node_ids", org.apache.thrift.protocol.TType.SET, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCacheParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCacheParamTupleSchemeFactory();

  public int id; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer digest; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> slot_remapping; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,java.lang.String> region_map; // optional
  public boolean force_populate; // optional
  public long entry_max_bytes; // optional
  public long entry_max_rows; // optional
  public boolean can_use_multiversion; // optional
  /**
   * 
   * @see com.starrocks.thrift.TKeysType
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TKeysType keys_type; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> cached_plan_node_ids; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DIGEST((short)2, "digest"),
    SLOT_REMAPPING((short)3, "slot_remapping"),
    REGION_MAP((short)4, "region_map"),
    FORCE_POPULATE((short)5, "force_populate"),
    ENTRY_MAX_BYTES((short)6, "entry_max_bytes"),
    ENTRY_MAX_ROWS((short)7, "entry_max_rows"),
    CAN_USE_MULTIVERSION((short)8, "can_use_multiversion"),
    /**
     * 
     * @see com.starrocks.thrift.TKeysType
     */
    KEYS_TYPE((short)10, "keys_type"),
    CACHED_PLAN_NODE_IDS((short)11, "cached_plan_node_ids");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DIGEST
          return DIGEST;
        case 3: // SLOT_REMAPPING
          return SLOT_REMAPPING;
        case 4: // REGION_MAP
          return REGION_MAP;
        case 5: // FORCE_POPULATE
          return FORCE_POPULATE;
        case 6: // ENTRY_MAX_BYTES
          return ENTRY_MAX_BYTES;
        case 7: // ENTRY_MAX_ROWS
          return ENTRY_MAX_ROWS;
        case 8: // CAN_USE_MULTIVERSION
          return CAN_USE_MULTIVERSION;
        case 10: // KEYS_TYPE
          return KEYS_TYPE;
        case 11: // CACHED_PLAN_NODE_IDS
          return CACHED_PLAN_NODE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __FORCE_POPULATE_ISSET_ID = 1;
  private static final int __ENTRY_MAX_BYTES_ISSET_ID = 2;
  private static final int __ENTRY_MAX_ROWS_ISSET_ID = 3;
  private static final int __CAN_USE_MULTIVERSION_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.DIGEST,_Fields.SLOT_REMAPPING,_Fields.REGION_MAP,_Fields.FORCE_POPULATE,_Fields.ENTRY_MAX_BYTES,_Fields.ENTRY_MAX_ROWS,_Fields.CAN_USE_MULTIVERSION,_Fields.KEYS_TYPE,_Fields.CACHED_PLAN_NODE_IDS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIGEST, new org.apache.thrift.meta_data.FieldMetaData("digest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SLOT_REMAPPING, new org.apache.thrift.meta_data.FieldMetaData("slot_remapping", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.REGION_MAP, new org.apache.thrift.meta_data.FieldMetaData("region_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FORCE_POPULATE, new org.apache.thrift.meta_data.FieldMetaData("force_populate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENTRY_MAX_BYTES, new org.apache.thrift.meta_data.FieldMetaData("entry_max_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENTRY_MAX_ROWS, new org.apache.thrift.meta_data.FieldMetaData("entry_max_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CAN_USE_MULTIVERSION, new org.apache.thrift.meta_data.FieldMetaData("can_use_multiversion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.KEYS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("keys_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TKeysType.class)));
    tmpMap.put(_Fields.CACHED_PLAN_NODE_IDS, new org.apache.thrift.meta_data.FieldMetaData("cached_plan_node_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCacheParam.class, metaDataMap);
  }

  public TCacheParam() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCacheParam(TCacheParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetDigest()) {
      this.digest = org.apache.thrift.TBaseHelper.copyBinary(other.digest);
    }
    if (other.isSetSlot_remapping()) {
      java.util.Map<java.lang.Integer,java.lang.Integer> __this__slot_remapping = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.slot_remapping);
      this.slot_remapping = __this__slot_remapping;
    }
    if (other.isSetRegion_map()) {
      java.util.Map<java.lang.Long,java.lang.String> __this__region_map = new java.util.HashMap<java.lang.Long,java.lang.String>(other.region_map);
      this.region_map = __this__region_map;
    }
    this.force_populate = other.force_populate;
    this.entry_max_bytes = other.entry_max_bytes;
    this.entry_max_rows = other.entry_max_rows;
    this.can_use_multiversion = other.can_use_multiversion;
    if (other.isSetKeys_type()) {
      this.keys_type = other.keys_type;
    }
    if (other.isSetCached_plan_node_ids()) {
      java.util.Set<java.lang.Integer> __this__cached_plan_node_ids = new java.util.HashSet<java.lang.Integer>(other.cached_plan_node_ids);
      this.cached_plan_node_ids = __this__cached_plan_node_ids;
    }
  }

  @Override
  public TCacheParam deepCopy() {
    return new TCacheParam(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.digest = null;
    this.slot_remapping = null;
    this.region_map = null;
    setForce_populateIsSet(false);
    this.force_populate = false;
    setEntry_max_bytesIsSet(false);
    this.entry_max_bytes = 0;
    setEntry_max_rowsIsSet(false);
    this.entry_max_rows = 0;
    setCan_use_multiversionIsSet(false);
    this.can_use_multiversion = false;
    this.keys_type = null;
    this.cached_plan_node_ids = null;
  }

  public int getId() {
    return this.id;
  }

  public TCacheParam setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public byte[] getDigest() {
    setDigest(org.apache.thrift.TBaseHelper.rightSize(digest));
    return digest == null ? null : digest.array();
  }

  public java.nio.ByteBuffer bufferForDigest() {
    return org.apache.thrift.TBaseHelper.copyBinary(digest);
  }

  public TCacheParam setDigest(byte[] digest) {
    this.digest = digest == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(digest.clone());
    return this;
  }

  public TCacheParam setDigest(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer digest) {
    this.digest = org.apache.thrift.TBaseHelper.copyBinary(digest);
    return this;
  }

  public void unsetDigest() {
    this.digest = null;
  }

  /** Returns true if field digest is set (has been assigned a value) and false otherwise */
  public boolean isSetDigest() {
    return this.digest != null;
  }

  public void setDigestIsSet(boolean value) {
    if (!value) {
      this.digest = null;
    }
  }

  public int getSlot_remappingSize() {
    return (this.slot_remapping == null) ? 0 : this.slot_remapping.size();
  }

  public void putToSlot_remapping(int key, int val) {
    if (this.slot_remapping == null) {
      this.slot_remapping = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
    }
    this.slot_remapping.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Integer> getSlot_remapping() {
    return this.slot_remapping;
  }

  public TCacheParam setSlot_remapping(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> slot_remapping) {
    this.slot_remapping = slot_remapping;
    return this;
  }

  public void unsetSlot_remapping() {
    this.slot_remapping = null;
  }

  /** Returns true if field slot_remapping is set (has been assigned a value) and false otherwise */
  public boolean isSetSlot_remapping() {
    return this.slot_remapping != null;
  }

  public void setSlot_remappingIsSet(boolean value) {
    if (!value) {
      this.slot_remapping = null;
    }
  }

  public int getRegion_mapSize() {
    return (this.region_map == null) ? 0 : this.region_map.size();
  }

  public void putToRegion_map(long key, java.lang.String val) {
    if (this.region_map == null) {
      this.region_map = new java.util.HashMap<java.lang.Long,java.lang.String>();
    }
    this.region_map.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Long,java.lang.String> getRegion_map() {
    return this.region_map;
  }

  public TCacheParam setRegion_map(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,java.lang.String> region_map) {
    this.region_map = region_map;
    return this;
  }

  public void unsetRegion_map() {
    this.region_map = null;
  }

  /** Returns true if field region_map is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion_map() {
    return this.region_map != null;
  }

  public void setRegion_mapIsSet(boolean value) {
    if (!value) {
      this.region_map = null;
    }
  }

  public boolean isForce_populate() {
    return this.force_populate;
  }

  public TCacheParam setForce_populate(boolean force_populate) {
    this.force_populate = force_populate;
    setForce_populateIsSet(true);
    return this;
  }

  public void unsetForce_populate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FORCE_POPULATE_ISSET_ID);
  }

  /** Returns true if field force_populate is set (has been assigned a value) and false otherwise */
  public boolean isSetForce_populate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FORCE_POPULATE_ISSET_ID);
  }

  public void setForce_populateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FORCE_POPULATE_ISSET_ID, value);
  }

  public long getEntry_max_bytes() {
    return this.entry_max_bytes;
  }

  public TCacheParam setEntry_max_bytes(long entry_max_bytes) {
    this.entry_max_bytes = entry_max_bytes;
    setEntry_max_bytesIsSet(true);
    return this;
  }

  public void unsetEntry_max_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENTRY_MAX_BYTES_ISSET_ID);
  }

  /** Returns true if field entry_max_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetEntry_max_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENTRY_MAX_BYTES_ISSET_ID);
  }

  public void setEntry_max_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENTRY_MAX_BYTES_ISSET_ID, value);
  }

  public long getEntry_max_rows() {
    return this.entry_max_rows;
  }

  public TCacheParam setEntry_max_rows(long entry_max_rows) {
    this.entry_max_rows = entry_max_rows;
    setEntry_max_rowsIsSet(true);
    return this;
  }

  public void unsetEntry_max_rows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENTRY_MAX_ROWS_ISSET_ID);
  }

  /** Returns true if field entry_max_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetEntry_max_rows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENTRY_MAX_ROWS_ISSET_ID);
  }

  public void setEntry_max_rowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENTRY_MAX_ROWS_ISSET_ID, value);
  }

  public boolean isCan_use_multiversion() {
    return this.can_use_multiversion;
  }

  public TCacheParam setCan_use_multiversion(boolean can_use_multiversion) {
    this.can_use_multiversion = can_use_multiversion;
    setCan_use_multiversionIsSet(true);
    return this;
  }

  public void unsetCan_use_multiversion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAN_USE_MULTIVERSION_ISSET_ID);
  }

  /** Returns true if field can_use_multiversion is set (has been assigned a value) and false otherwise */
  public boolean isSetCan_use_multiversion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAN_USE_MULTIVERSION_ISSET_ID);
  }

  public void setCan_use_multiversionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAN_USE_MULTIVERSION_ISSET_ID, value);
  }

  /**
   * 
   * @see com.starrocks.thrift.TKeysType
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TKeysType getKeys_type() {
    return this.keys_type;
  }

  /**
   * 
   * @see com.starrocks.thrift.TKeysType
   */
  public TCacheParam setKeys_type(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TKeysType keys_type) {
    this.keys_type = keys_type;
    return this;
  }

  public void unsetKeys_type() {
    this.keys_type = null;
  }

  /** Returns true if field keys_type is set (has been assigned a value) and false otherwise */
  public boolean isSetKeys_type() {
    return this.keys_type != null;
  }

  public void setKeys_typeIsSet(boolean value) {
    if (!value) {
      this.keys_type = null;
    }
  }

  public int getCached_plan_node_idsSize() {
    return (this.cached_plan_node_ids == null) ? 0 : this.cached_plan_node_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getCached_plan_node_idsIterator() {
    return (this.cached_plan_node_ids == null) ? null : this.cached_plan_node_ids.iterator();
  }

  public void addToCached_plan_node_ids(int elem) {
    if (this.cached_plan_node_ids == null) {
      this.cached_plan_node_ids = new java.util.HashSet<java.lang.Integer>();
    }
    this.cached_plan_node_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.Integer> getCached_plan_node_ids() {
    return this.cached_plan_node_ids;
  }

  public TCacheParam setCached_plan_node_ids(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> cached_plan_node_ids) {
    this.cached_plan_node_ids = cached_plan_node_ids;
    return this;
  }

  public void unsetCached_plan_node_ids() {
    this.cached_plan_node_ids = null;
  }

  /** Returns true if field cached_plan_node_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetCached_plan_node_ids() {
    return this.cached_plan_node_ids != null;
  }

  public void setCached_plan_node_idsIsSet(boolean value) {
    if (!value) {
      this.cached_plan_node_ids = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case DIGEST:
      if (value == null) {
        unsetDigest();
      } else {
        if (value instanceof byte[]) {
          setDigest((byte[])value);
        } else {
          setDigest((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SLOT_REMAPPING:
      if (value == null) {
        unsetSlot_remapping();
      } else {
        setSlot_remapping((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
      }
      break;

    case REGION_MAP:
      if (value == null) {
        unsetRegion_map();
      } else {
        setRegion_map((java.util.Map<java.lang.Long,java.lang.String>)value);
      }
      break;

    case FORCE_POPULATE:
      if (value == null) {
        unsetForce_populate();
      } else {
        setForce_populate((java.lang.Boolean)value);
      }
      break;

    case ENTRY_MAX_BYTES:
      if (value == null) {
        unsetEntry_max_bytes();
      } else {
        setEntry_max_bytes((java.lang.Long)value);
      }
      break;

    case ENTRY_MAX_ROWS:
      if (value == null) {
        unsetEntry_max_rows();
      } else {
        setEntry_max_rows((java.lang.Long)value);
      }
      break;

    case CAN_USE_MULTIVERSION:
      if (value == null) {
        unsetCan_use_multiversion();
      } else {
        setCan_use_multiversion((java.lang.Boolean)value);
      }
      break;

    case KEYS_TYPE:
      if (value == null) {
        unsetKeys_type();
      } else {
        setKeys_type((com.starrocks.thrift.TKeysType)value);
      }
      break;

    case CACHED_PLAN_NODE_IDS:
      if (value == null) {
        unsetCached_plan_node_ids();
      } else {
        setCached_plan_node_ids((java.util.Set<java.lang.Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case DIGEST:
      return getDigest();

    case SLOT_REMAPPING:
      return getSlot_remapping();

    case REGION_MAP:
      return getRegion_map();

    case FORCE_POPULATE:
      return isForce_populate();

    case ENTRY_MAX_BYTES:
      return getEntry_max_bytes();

    case ENTRY_MAX_ROWS:
      return getEntry_max_rows();

    case CAN_USE_MULTIVERSION:
      return isCan_use_multiversion();

    case KEYS_TYPE:
      return getKeys_type();

    case CACHED_PLAN_NODE_IDS:
      return getCached_plan_node_ids();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DIGEST:
      return isSetDigest();
    case SLOT_REMAPPING:
      return isSetSlot_remapping();
    case REGION_MAP:
      return isSetRegion_map();
    case FORCE_POPULATE:
      return isSetForce_populate();
    case ENTRY_MAX_BYTES:
      return isSetEntry_max_bytes();
    case ENTRY_MAX_ROWS:
      return isSetEntry_max_rows();
    case CAN_USE_MULTIVERSION:
      return isSetCan_use_multiversion();
    case KEYS_TYPE:
      return isSetKeys_type();
    case CACHED_PLAN_NODE_IDS:
      return isSetCached_plan_node_ids();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TCacheParam)
      return this.equals((TCacheParam)that);
    return false;
  }

  public boolean equals(TCacheParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_digest = true && this.isSetDigest();
    boolean that_present_digest = true && that.isSetDigest();
    if (this_present_digest || that_present_digest) {
      if (!(this_present_digest && that_present_digest))
        return false;
      if (!this.digest.equals(that.digest))
        return false;
    }

    boolean this_present_slot_remapping = true && this.isSetSlot_remapping();
    boolean that_present_slot_remapping = true && that.isSetSlot_remapping();
    if (this_present_slot_remapping || that_present_slot_remapping) {
      if (!(this_present_slot_remapping && that_present_slot_remapping))
        return false;
      if (!this.slot_remapping.equals(that.slot_remapping))
        return false;
    }

    boolean this_present_region_map = true && this.isSetRegion_map();
    boolean that_present_region_map = true && that.isSetRegion_map();
    if (this_present_region_map || that_present_region_map) {
      if (!(this_present_region_map && that_present_region_map))
        return false;
      if (!this.region_map.equals(that.region_map))
        return false;
    }

    boolean this_present_force_populate = true && this.isSetForce_populate();
    boolean that_present_force_populate = true && that.isSetForce_populate();
    if (this_present_force_populate || that_present_force_populate) {
      if (!(this_present_force_populate && that_present_force_populate))
        return false;
      if (this.force_populate != that.force_populate)
        return false;
    }

    boolean this_present_entry_max_bytes = true && this.isSetEntry_max_bytes();
    boolean that_present_entry_max_bytes = true && that.isSetEntry_max_bytes();
    if (this_present_entry_max_bytes || that_present_entry_max_bytes) {
      if (!(this_present_entry_max_bytes && that_present_entry_max_bytes))
        return false;
      if (this.entry_max_bytes != that.entry_max_bytes)
        return false;
    }

    boolean this_present_entry_max_rows = true && this.isSetEntry_max_rows();
    boolean that_present_entry_max_rows = true && that.isSetEntry_max_rows();
    if (this_present_entry_max_rows || that_present_entry_max_rows) {
      if (!(this_present_entry_max_rows && that_present_entry_max_rows))
        return false;
      if (this.entry_max_rows != that.entry_max_rows)
        return false;
    }

    boolean this_present_can_use_multiversion = true && this.isSetCan_use_multiversion();
    boolean that_present_can_use_multiversion = true && that.isSetCan_use_multiversion();
    if (this_present_can_use_multiversion || that_present_can_use_multiversion) {
      if (!(this_present_can_use_multiversion && that_present_can_use_multiversion))
        return false;
      if (this.can_use_multiversion != that.can_use_multiversion)
        return false;
    }

    boolean this_present_keys_type = true && this.isSetKeys_type();
    boolean that_present_keys_type = true && that.isSetKeys_type();
    if (this_present_keys_type || that_present_keys_type) {
      if (!(this_present_keys_type && that_present_keys_type))
        return false;
      if (!this.keys_type.equals(that.keys_type))
        return false;
    }

    boolean this_present_cached_plan_node_ids = true && this.isSetCached_plan_node_ids();
    boolean that_present_cached_plan_node_ids = true && that.isSetCached_plan_node_ids();
    if (this_present_cached_plan_node_ids || that_present_cached_plan_node_ids) {
      if (!(this_present_cached_plan_node_ids && that_present_cached_plan_node_ids))
        return false;
      if (!this.cached_plan_node_ids.equals(that.cached_plan_node_ids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetDigest()) ? 131071 : 524287);
    if (isSetDigest())
      hashCode = hashCode * 8191 + digest.hashCode();

    hashCode = hashCode * 8191 + ((isSetSlot_remapping()) ? 131071 : 524287);
    if (isSetSlot_remapping())
      hashCode = hashCode * 8191 + slot_remapping.hashCode();

    hashCode = hashCode * 8191 + ((isSetRegion_map()) ? 131071 : 524287);
    if (isSetRegion_map())
      hashCode = hashCode * 8191 + region_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetForce_populate()) ? 131071 : 524287);
    if (isSetForce_populate())
      hashCode = hashCode * 8191 + ((force_populate) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEntry_max_bytes()) ? 131071 : 524287);
    if (isSetEntry_max_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(entry_max_bytes);

    hashCode = hashCode * 8191 + ((isSetEntry_max_rows()) ? 131071 : 524287);
    if (isSetEntry_max_rows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(entry_max_rows);

    hashCode = hashCode * 8191 + ((isSetCan_use_multiversion()) ? 131071 : 524287);
    if (isSetCan_use_multiversion())
      hashCode = hashCode * 8191 + ((can_use_multiversion) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetKeys_type()) ? 131071 : 524287);
    if (isSetKeys_type())
      hashCode = hashCode * 8191 + keys_type.getValue();

    hashCode = hashCode * 8191 + ((isSetCached_plan_node_ids()) ? 131071 : 524287);
    if (isSetCached_plan_node_ids())
      hashCode = hashCode * 8191 + cached_plan_node_ids.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TCacheParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDigest(), other.isSetDigest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDigest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.digest, other.digest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSlot_remapping(), other.isSetSlot_remapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlot_remapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slot_remapping, other.slot_remapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRegion_map(), other.isSetRegion_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region_map, other.region_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetForce_populate(), other.isSetForce_populate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForce_populate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.force_populate, other.force_populate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEntry_max_bytes(), other.isSetEntry_max_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntry_max_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry_max_bytes, other.entry_max_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEntry_max_rows(), other.isSetEntry_max_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntry_max_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry_max_rows, other.entry_max_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCan_use_multiversion(), other.isSetCan_use_multiversion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCan_use_multiversion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.can_use_multiversion, other.can_use_multiversion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKeys_type(), other.isSetKeys_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeys_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys_type, other.keys_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCached_plan_node_ids(), other.isSetCached_plan_node_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCached_plan_node_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cached_plan_node_ids, other.cached_plan_node_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCacheParam(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetDigest()) {
      if (!first) sb.append(", ");
      sb.append("digest:");
      if (this.digest == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.digest, sb);
      }
      first = false;
    }
    if (isSetSlot_remapping()) {
      if (!first) sb.append(", ");
      sb.append("slot_remapping:");
      if (this.slot_remapping == null) {
        sb.append("null");
      } else {
        sb.append(this.slot_remapping);
      }
      first = false;
    }
    if (isSetRegion_map()) {
      if (!first) sb.append(", ");
      sb.append("region_map:");
      if (this.region_map == null) {
        sb.append("null");
      } else {
        sb.append(this.region_map);
      }
      first = false;
    }
    if (isSetForce_populate()) {
      if (!first) sb.append(", ");
      sb.append("force_populate:");
      sb.append(this.force_populate);
      first = false;
    }
    if (isSetEntry_max_bytes()) {
      if (!first) sb.append(", ");
      sb.append("entry_max_bytes:");
      sb.append(this.entry_max_bytes);
      first = false;
    }
    if (isSetEntry_max_rows()) {
      if (!first) sb.append(", ");
      sb.append("entry_max_rows:");
      sb.append(this.entry_max_rows);
      first = false;
    }
    if (isSetCan_use_multiversion()) {
      if (!first) sb.append(", ");
      sb.append("can_use_multiversion:");
      sb.append(this.can_use_multiversion);
      first = false;
    }
    if (isSetKeys_type()) {
      if (!first) sb.append(", ");
      sb.append("keys_type:");
      if (this.keys_type == null) {
        sb.append("null");
      } else {
        sb.append(this.keys_type);
      }
      first = false;
    }
    if (isSetCached_plan_node_ids()) {
      if (!first) sb.append(", ");
      sb.append("cached_plan_node_ids:");
      if (this.cached_plan_node_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.cached_plan_node_ids);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCacheParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TCacheParamStandardScheme getScheme() {
      return new TCacheParamStandardScheme();
    }
  }

  private static class TCacheParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCacheParam> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TCacheParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.digest = iprot.readBinary();
              struct.setDigestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLOT_REMAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.slot_remapping = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map0.size);
                int _key1;
                int _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readI32();
                  _val2 = iprot.readI32();
                  struct.slot_remapping.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setSlot_remappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REGION_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.region_map = new java.util.HashMap<java.lang.Long,java.lang.String>(2*_map4.size);
                long _key5;
                @org.apache.thrift.annotation.Nullable java.lang.String _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readI64();
                  _val6 = iprot.readString();
                  struct.region_map.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setRegion_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FORCE_POPULATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.force_populate = iprot.readBool();
              struct.setForce_populateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ENTRY_MAX_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.entry_max_bytes = iprot.readI64();
              struct.setEntry_max_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENTRY_MAX_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.entry_max_rows = iprot.readI64();
              struct.setEntry_max_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CAN_USE_MULTIVERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.can_use_multiversion = iprot.readBool();
              struct.setCan_use_multiversionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // KEYS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.keys_type = com.starrocks.thrift.TKeysType.findByValue(iprot.readI32());
              struct.setKeys_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CACHED_PLAN_NODE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set8 = iprot.readSetBegin();
                struct.cached_plan_node_ids = new java.util.HashSet<java.lang.Integer>(2*_set8.size);
                int _elem9;
                for (int _i10 = 0; _i10 < _set8.size; ++_i10)
                {
                  _elem9 = iprot.readI32();
                  struct.cached_plan_node_ids.add(_elem9);
                }
                iprot.readSetEnd();
              }
              struct.setCached_plan_node_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TCacheParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.digest != null) {
        if (struct.isSetDigest()) {
          oprot.writeFieldBegin(DIGEST_FIELD_DESC);
          oprot.writeBinary(struct.digest);
          oprot.writeFieldEnd();
        }
      }
      if (struct.slot_remapping != null) {
        if (struct.isSetSlot_remapping()) {
          oprot.writeFieldBegin(SLOT_REMAPPING_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.slot_remapping.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter11 : struct.slot_remapping.entrySet())
            {
              oprot.writeI32(_iter11.getKey());
              oprot.writeI32(_iter11.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.region_map != null) {
        if (struct.isSetRegion_map()) {
          oprot.writeFieldBegin(REGION_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, struct.region_map.size()));
            for (java.util.Map.Entry<java.lang.Long, java.lang.String> _iter12 : struct.region_map.entrySet())
            {
              oprot.writeI64(_iter12.getKey());
              oprot.writeString(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetForce_populate()) {
        oprot.writeFieldBegin(FORCE_POPULATE_FIELD_DESC);
        oprot.writeBool(struct.force_populate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEntry_max_bytes()) {
        oprot.writeFieldBegin(ENTRY_MAX_BYTES_FIELD_DESC);
        oprot.writeI64(struct.entry_max_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEntry_max_rows()) {
        oprot.writeFieldBegin(ENTRY_MAX_ROWS_FIELD_DESC);
        oprot.writeI64(struct.entry_max_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCan_use_multiversion()) {
        oprot.writeFieldBegin(CAN_USE_MULTIVERSION_FIELD_DESC);
        oprot.writeBool(struct.can_use_multiversion);
        oprot.writeFieldEnd();
      }
      if (struct.keys_type != null) {
        if (struct.isSetKeys_type()) {
          oprot.writeFieldBegin(KEYS_TYPE_FIELD_DESC);
          oprot.writeI32(struct.keys_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.cached_plan_node_ids != null) {
        if (struct.isSetCached_plan_node_ids()) {
          oprot.writeFieldBegin(CACHED_PLAN_NODE_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.cached_plan_node_ids.size()));
            for (int _iter13 : struct.cached_plan_node_ids)
            {
              oprot.writeI32(_iter13);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCacheParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TCacheParamTupleScheme getScheme() {
      return new TCacheParamTupleScheme();
    }
  }

  private static class TCacheParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCacheParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCacheParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDigest()) {
        optionals.set(1);
      }
      if (struct.isSetSlot_remapping()) {
        optionals.set(2);
      }
      if (struct.isSetRegion_map()) {
        optionals.set(3);
      }
      if (struct.isSetForce_populate()) {
        optionals.set(4);
      }
      if (struct.isSetEntry_max_bytes()) {
        optionals.set(5);
      }
      if (struct.isSetEntry_max_rows()) {
        optionals.set(6);
      }
      if (struct.isSetCan_use_multiversion()) {
        optionals.set(7);
      }
      if (struct.isSetKeys_type()) {
        optionals.set(8);
      }
      if (struct.isSetCached_plan_node_ids()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetDigest()) {
        oprot.writeBinary(struct.digest);
      }
      if (struct.isSetSlot_remapping()) {
        {
          oprot.writeI32(struct.slot_remapping.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter14 : struct.slot_remapping.entrySet())
          {
            oprot.writeI32(_iter14.getKey());
            oprot.writeI32(_iter14.getValue());
          }
        }
      }
      if (struct.isSetRegion_map()) {
        {
          oprot.writeI32(struct.region_map.size());
          for (java.util.Map.Entry<java.lang.Long, java.lang.String> _iter15 : struct.region_map.entrySet())
          {
            oprot.writeI64(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
        }
      }
      if (struct.isSetForce_populate()) {
        oprot.writeBool(struct.force_populate);
      }
      if (struct.isSetEntry_max_bytes()) {
        oprot.writeI64(struct.entry_max_bytes);
      }
      if (struct.isSetEntry_max_rows()) {
        oprot.writeI64(struct.entry_max_rows);
      }
      if (struct.isSetCan_use_multiversion()) {
        oprot.writeBool(struct.can_use_multiversion);
      }
      if (struct.isSetKeys_type()) {
        oprot.writeI32(struct.keys_type.getValue());
      }
      if (struct.isSetCached_plan_node_ids()) {
        {
          oprot.writeI32(struct.cached_plan_node_ids.size());
          for (int _iter16 : struct.cached_plan_node_ids)
          {
            oprot.writeI32(_iter16);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCacheParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.digest = iprot.readBinary();
        struct.setDigestIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map17 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32); 
          struct.slot_remapping = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map17.size);
          int _key18;
          int _val19;
          for (int _i20 = 0; _i20 < _map17.size; ++_i20)
          {
            _key18 = iprot.readI32();
            _val19 = iprot.readI32();
            struct.slot_remapping.put(_key18, _val19);
          }
        }
        struct.setSlot_remappingIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map21 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING); 
          struct.region_map = new java.util.HashMap<java.lang.Long,java.lang.String>(2*_map21.size);
          long _key22;
          @org.apache.thrift.annotation.Nullable java.lang.String _val23;
          for (int _i24 = 0; _i24 < _map21.size; ++_i24)
          {
            _key22 = iprot.readI64();
            _val23 = iprot.readString();
            struct.region_map.put(_key22, _val23);
          }
        }
        struct.setRegion_mapIsSet(true);
      }
      if (incoming.get(4)) {
        struct.force_populate = iprot.readBool();
        struct.setForce_populateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.entry_max_bytes = iprot.readI64();
        struct.setEntry_max_bytesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.entry_max_rows = iprot.readI64();
        struct.setEntry_max_rowsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.can_use_multiversion = iprot.readBool();
        struct.setCan_use_multiversionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.keys_type = com.starrocks.thrift.TKeysType.findByValue(iprot.readI32());
        struct.setKeys_typeIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set25 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I32);
          struct.cached_plan_node_ids = new java.util.HashSet<java.lang.Integer>(2*_set25.size);
          int _elem26;
          for (int _i27 = 0; _i27 < _set25.size; ++_i27)
          {
            _elem26 = iprot.readI32();
            struct.cached_plan_node_ids.add(_elem26);
          }
        }
        struct.setCached_plan_node_idsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

