/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TResultSink implements org.apache.thrift.TBase<TResultSink, TResultSink._Fields>, java.io.Serializable, Cloneable, Comparable<TResultSink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResultSink");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("file_options", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("format", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IS_BINARY_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("is_binary_row", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TResultSinkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TResultSinkTupleSchemeFactory();

  /**
   * 
   * @see TResultSinkType
   */
  public @org.apache.thrift.annotation.Nullable TResultSinkType type; // optional
  public @org.apache.thrift.annotation.Nullable TResultFileSinkOptions file_options; // optional
  /**
   * 
   * @see TResultSinkFormatType
   */
  public @org.apache.thrift.annotation.Nullable TResultSinkFormatType format; // optional
  public boolean is_binary_row; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TResultSinkType
     */
    TYPE((short)1, "type"),
    FILE_OPTIONS((short)2, "file_options"),
    /**
     * 
     * @see TResultSinkFormatType
     */
    FORMAT((short)3, "format"),
    IS_BINARY_ROW((short)4, "is_binary_row");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // FILE_OPTIONS
          return FILE_OPTIONS;
        case 3: // FORMAT
          return FORMAT;
        case 4: // IS_BINARY_ROW
          return IS_BINARY_ROW;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_BINARY_ROW_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TYPE,_Fields.FILE_OPTIONS,_Fields.FORMAT,_Fields.IS_BINARY_ROW};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TResultSinkType.class)));
    tmpMap.put(_Fields.FILE_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("file_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResultFileSinkOptions.class)));
    tmpMap.put(_Fields.FORMAT, new org.apache.thrift.meta_data.FieldMetaData("format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TResultSinkFormatType.class)));
    tmpMap.put(_Fields.IS_BINARY_ROW, new org.apache.thrift.meta_data.FieldMetaData("is_binary_row", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResultSink.class, metaDataMap);
  }

  public TResultSink() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResultSink(TResultSink other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetFile_options()) {
      this.file_options = new TResultFileSinkOptions(other.file_options);
    }
    if (other.isSetFormat()) {
      this.format = other.format;
    }
    this.is_binary_row = other.is_binary_row;
  }

  @Override
  public TResultSink deepCopy() {
    return new TResultSink(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.file_options = null;
    this.format = null;
    setIs_binary_rowIsSet(false);
    this.is_binary_row = false;
  }

  /**
   * 
   * @see TResultSinkType
   */
  @org.apache.thrift.annotation.Nullable
  public TResultSinkType getType() {
    return this.type;
  }

  /**
   * 
   * @see TResultSinkType
   */
  public TResultSink setType(@org.apache.thrift.annotation.Nullable TResultSinkType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TResultFileSinkOptions getFile_options() {
    return this.file_options;
  }

  public TResultSink setFile_options(@org.apache.thrift.annotation.Nullable TResultFileSinkOptions file_options) {
    this.file_options = file_options;
    return this;
  }

  public void unsetFile_options() {
    this.file_options = null;
  }

  /** Returns true if field file_options is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_options() {
    return this.file_options != null;
  }

  public void setFile_optionsIsSet(boolean value) {
    if (!value) {
      this.file_options = null;
    }
  }

  /**
   * 
   * @see TResultSinkFormatType
   */
  @org.apache.thrift.annotation.Nullable
  public TResultSinkFormatType getFormat() {
    return this.format;
  }

  /**
   * 
   * @see TResultSinkFormatType
   */
  public TResultSink setFormat(@org.apache.thrift.annotation.Nullable TResultSinkFormatType format) {
    this.format = format;
    return this;
  }

  public void unsetFormat() {
    this.format = null;
  }

  /** Returns true if field format is set (has been assigned a value) and false otherwise */
  public boolean isSetFormat() {
    return this.format != null;
  }

  public void setFormatIsSet(boolean value) {
    if (!value) {
      this.format = null;
    }
  }

  public boolean isIs_binary_row() {
    return this.is_binary_row;
  }

  public TResultSink setIs_binary_row(boolean is_binary_row) {
    this.is_binary_row = is_binary_row;
    setIs_binary_rowIsSet(true);
    return this;
  }

  public void unsetIs_binary_row() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_BINARY_ROW_ISSET_ID);
  }

  /** Returns true if field is_binary_row is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_binary_row() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_BINARY_ROW_ISSET_ID);
  }

  public void setIs_binary_rowIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_BINARY_ROW_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TResultSinkType)value);
      }
      break;

    case FILE_OPTIONS:
      if (value == null) {
        unsetFile_options();
      } else {
        setFile_options((TResultFileSinkOptions)value);
      }
      break;

    case FORMAT:
      if (value == null) {
        unsetFormat();
      } else {
        setFormat((TResultSinkFormatType)value);
      }
      break;

    case IS_BINARY_ROW:
      if (value == null) {
        unsetIs_binary_row();
      } else {
        setIs_binary_row((Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case FILE_OPTIONS:
      return getFile_options();

    case FORMAT:
      return getFormat();

    case IS_BINARY_ROW:
      return isIs_binary_row();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case FILE_OPTIONS:
      return isSetFile_options();
    case FORMAT:
      return isSetFormat();
    case IS_BINARY_ROW:
      return isSetIs_binary_row();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof TResultSink)
      return this.equals((TResultSink)that);
    return false;
  }

  public boolean equals(TResultSink that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_file_options = true && this.isSetFile_options();
    boolean that_present_file_options = true && that.isSetFile_options();
    if (this_present_file_options || that_present_file_options) {
      if (!(this_present_file_options && that_present_file_options))
        return false;
      if (!this.file_options.equals(that.file_options))
        return false;
    }

    boolean this_present_format = true && this.isSetFormat();
    boolean that_present_format = true && that.isSetFormat();
    if (this_present_format || that_present_format) {
      if (!(this_present_format && that_present_format))
        return false;
      if (!this.format.equals(that.format))
        return false;
    }

    boolean this_present_is_binary_row = true && this.isSetIs_binary_row();
    boolean that_present_is_binary_row = true && that.isSetIs_binary_row();
    if (this_present_is_binary_row || that_present_is_binary_row) {
      if (!(this_present_is_binary_row && that_present_is_binary_row))
        return false;
      if (this.is_binary_row != that.is_binary_row)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetFile_options()) ? 131071 : 524287);
    if (isSetFile_options())
      hashCode = hashCode * 8191 + file_options.hashCode();

    hashCode = hashCode * 8191 + ((isSetFormat()) ? 131071 : 524287);
    if (isSetFormat())
      hashCode = hashCode * 8191 + format.getValue();

    hashCode = hashCode * 8191 + ((isSetIs_binary_row()) ? 131071 : 524287);
    if (isSetIs_binary_row())
      hashCode = hashCode * 8191 + ((is_binary_row) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TResultSink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetFile_options(), other.isSetFile_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_options, other.file_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetFormat(), other.isSetFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format, other.format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetIs_binary_row(), other.isSetIs_binary_row());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_binary_row()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_binary_row, other.is_binary_row);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResultSink(");
    boolean first = true;

    if (isSetType()) {
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetFile_options()) {
      if (!first) sb.append(", ");
      sb.append("file_options:");
      if (this.file_options == null) {
        sb.append("null");
      } else {
        sb.append(this.file_options);
      }
      first = false;
    }
    if (isSetFormat()) {
      if (!first) sb.append(", ");
      sb.append("format:");
      if (this.format == null) {
        sb.append("null");
      } else {
        sb.append(this.format);
      }
      first = false;
    }
    if (isSetIs_binary_row()) {
      if (!first) sb.append(", ");
      sb.append("is_binary_row:");
      sb.append(this.is_binary_row);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (file_options != null) {
      file_options.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResultSinkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TResultSinkStandardScheme getScheme() {
      return new TResultSinkStandardScheme();
    }
  }

  private static class TResultSinkStandardScheme extends org.apache.thrift.scheme.StandardScheme<TResultSink> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TResultSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = TResultSinkType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.file_options = new TResultFileSinkOptions();
              struct.file_options.read(iprot);
              struct.setFile_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.format = TResultSinkFormatType.findByValue(iprot.readI32());
              struct.setFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_BINARY_ROW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_binary_row = iprot.readBool();
              struct.setIs_binary_rowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TResultSink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.file_options != null) {
        if (struct.isSetFile_options()) {
          oprot.writeFieldBegin(FILE_OPTIONS_FIELD_DESC);
          struct.file_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.format != null) {
        if (struct.isSetFormat()) {
          oprot.writeFieldBegin(FORMAT_FIELD_DESC);
          oprot.writeI32(struct.format.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_binary_row()) {
        oprot.writeFieldBegin(IS_BINARY_ROW_FIELD_DESC);
        oprot.writeBool(struct.is_binary_row);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResultSinkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TResultSinkTupleScheme getScheme() {
      return new TResultSinkTupleScheme();
    }
  }

  private static class TResultSinkTupleScheme extends org.apache.thrift.scheme.TupleScheme<TResultSink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResultSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetFile_options()) {
        optionals.set(1);
      }
      if (struct.isSetFormat()) {
        optionals.set(2);
      }
      if (struct.isSetIs_binary_row()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetFile_options()) {
        struct.file_options.write(oprot);
      }
      if (struct.isSetFormat()) {
        oprot.writeI32(struct.format.getValue());
      }
      if (struct.isSetIs_binary_row()) {
        oprot.writeBool(struct.is_binary_row);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResultSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.type = TResultSinkType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.file_options = new TResultFileSinkOptions();
        struct.file_options.read(iprot);
        struct.setFile_optionsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.format = TResultSinkFormatType.findByValue(iprot.readI32());
        struct.setFormatIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_binary_row = iprot.readBool();
        struct.setIs_binary_rowIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

