/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TPartitionMeta implements org.apache.thrift.TBase<TPartitionMeta, TPartitionMeta._Fields>, java.io.Serializable, Cloneable, Comparable<TPartitionMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPartitionMeta");

  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PARTITION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMMIT_VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("commit_version_hash", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField VISIBLE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("visible_version", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField VISIBLE_VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("visible_version_hash", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField VISIBLE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("visible_time", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField NEXT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("next_version", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField NEXT_VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("next_version_hash", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField IS_TEMP_FIELD_DESC = new org.apache.thrift.protocol.TField("is_temp", org.apache.thrift.protocol.TType.BOOL, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPartitionMetaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPartitionMetaTupleSchemeFactory();

  public long partition_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String partition_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String state; // optional
  public long commit_version_hash; // optional
  public long visible_version; // optional
  public long visible_version_hash; // optional
  public long visible_time; // optional
  public long next_version; // optional
  public long next_version_hash; // optional
  public boolean is_temp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTITION_ID((short)1, "partition_id"),
    PARTITION_NAME((short)2, "partition_name"),
    STATE((short)3, "state"),
    COMMIT_VERSION_HASH((short)4, "commit_version_hash"),
    VISIBLE_VERSION((short)5, "visible_version"),
    VISIBLE_VERSION_HASH((short)6, "visible_version_hash"),
    VISIBLE_TIME((short)7, "visible_time"),
    NEXT_VERSION((short)8, "next_version"),
    NEXT_VERSION_HASH((short)9, "next_version_hash"),
    IS_TEMP((short)10, "is_temp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTITION_ID
          return PARTITION_ID;
        case 2: // PARTITION_NAME
          return PARTITION_NAME;
        case 3: // STATE
          return STATE;
        case 4: // COMMIT_VERSION_HASH
          return COMMIT_VERSION_HASH;
        case 5: // VISIBLE_VERSION
          return VISIBLE_VERSION;
        case 6: // VISIBLE_VERSION_HASH
          return VISIBLE_VERSION_HASH;
        case 7: // VISIBLE_TIME
          return VISIBLE_TIME;
        case 8: // NEXT_VERSION
          return NEXT_VERSION;
        case 9: // NEXT_VERSION_HASH
          return NEXT_VERSION_HASH;
        case 10: // IS_TEMP
          return IS_TEMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARTITION_ID_ISSET_ID = 0;
  private static final int __COMMIT_VERSION_HASH_ISSET_ID = 1;
  private static final int __VISIBLE_VERSION_ISSET_ID = 2;
  private static final int __VISIBLE_VERSION_HASH_ISSET_ID = 3;
  private static final int __VISIBLE_TIME_ISSET_ID = 4;
  private static final int __NEXT_VERSION_ISSET_ID = 5;
  private static final int __NEXT_VERSION_HASH_ISSET_ID = 6;
  private static final int __IS_TEMP_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARTITION_ID,_Fields.PARTITION_NAME,_Fields.STATE,_Fields.COMMIT_VERSION_HASH,_Fields.VISIBLE_VERSION,_Fields.VISIBLE_VERSION_HASH,_Fields.VISIBLE_TIME,_Fields.NEXT_VERSION,_Fields.NEXT_VERSION_HASH,_Fields.IS_TEMP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_NAME, new org.apache.thrift.meta_data.FieldMetaData("partition_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMIT_VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("commit_version_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VISIBLE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("visible_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VISIBLE_VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("visible_version_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VISIBLE_TIME, new org.apache.thrift.meta_data.FieldMetaData("visible_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEXT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("next_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEXT_VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("next_version_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_TEMP, new org.apache.thrift.meta_data.FieldMetaData("is_temp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPartitionMeta.class, metaDataMap);
  }

  public TPartitionMeta() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPartitionMeta(TPartitionMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    this.partition_id = other.partition_id;
    if (other.isSetPartition_name()) {
      this.partition_name = other.partition_name;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.commit_version_hash = other.commit_version_hash;
    this.visible_version = other.visible_version;
    this.visible_version_hash = other.visible_version_hash;
    this.visible_time = other.visible_time;
    this.next_version = other.next_version;
    this.next_version_hash = other.next_version_hash;
    this.is_temp = other.is_temp;
  }

  @Override
  public TPartitionMeta deepCopy() {
    return new TPartitionMeta(this);
  }

  @Override
  public void clear() {
    setPartition_idIsSet(false);
    this.partition_id = 0;
    this.partition_name = null;
    this.state = null;
    setCommit_version_hashIsSet(false);
    this.commit_version_hash = 0;
    setVisible_versionIsSet(false);
    this.visible_version = 0;
    setVisible_version_hashIsSet(false);
    this.visible_version_hash = 0;
    setVisible_timeIsSet(false);
    this.visible_time = 0;
    setNext_versionIsSet(false);
    this.next_version = 0;
    setNext_version_hashIsSet(false);
    this.next_version_hash = 0;
    setIs_tempIsSet(false);
    this.is_temp = false;
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public TPartitionMeta setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    return this;
  }

  public void unsetPartition_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartition_name() {
    return this.partition_name;
  }

  public TPartitionMeta setPartition_name(@org.apache.thrift.annotation.Nullable java.lang.String partition_name) {
    this.partition_name = partition_name;
    return this;
  }

  public void unsetPartition_name() {
    this.partition_name = null;
  }

  /** Returns true if field partition_name is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_name() {
    return this.partition_name != null;
  }

  public void setPartition_nameIsSet(boolean value) {
    if (!value) {
      this.partition_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getState() {
    return this.state;
  }

  public TPartitionMeta setState(@org.apache.thrift.annotation.Nullable java.lang.String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public long getCommit_version_hash() {
    return this.commit_version_hash;
  }

  public TPartitionMeta setCommit_version_hash(long commit_version_hash) {
    this.commit_version_hash = commit_version_hash;
    setCommit_version_hashIsSet(true);
    return this;
  }

  public void unsetCommit_version_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMIT_VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field commit_version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetCommit_version_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMIT_VERSION_HASH_ISSET_ID);
  }

  public void setCommit_version_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMIT_VERSION_HASH_ISSET_ID, value);
  }

  public long getVisible_version() {
    return this.visible_version;
  }

  public TPartitionMeta setVisible_version(long visible_version) {
    this.visible_version = visible_version;
    setVisible_versionIsSet(true);
    return this;
  }

  public void unsetVisible_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VISIBLE_VERSION_ISSET_ID);
  }

  /** Returns true if field visible_version is set (has been assigned a value) and false otherwise */
  public boolean isSetVisible_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VISIBLE_VERSION_ISSET_ID);
  }

  public void setVisible_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VISIBLE_VERSION_ISSET_ID, value);
  }

  public long getVisible_version_hash() {
    return this.visible_version_hash;
  }

  public TPartitionMeta setVisible_version_hash(long visible_version_hash) {
    this.visible_version_hash = visible_version_hash;
    setVisible_version_hashIsSet(true);
    return this;
  }

  public void unsetVisible_version_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VISIBLE_VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field visible_version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetVisible_version_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VISIBLE_VERSION_HASH_ISSET_ID);
  }

  public void setVisible_version_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VISIBLE_VERSION_HASH_ISSET_ID, value);
  }

  public long getVisible_time() {
    return this.visible_time;
  }

  public TPartitionMeta setVisible_time(long visible_time) {
    this.visible_time = visible_time;
    setVisible_timeIsSet(true);
    return this;
  }

  public void unsetVisible_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VISIBLE_TIME_ISSET_ID);
  }

  /** Returns true if field visible_time is set (has been assigned a value) and false otherwise */
  public boolean isSetVisible_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VISIBLE_TIME_ISSET_ID);
  }

  public void setVisible_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VISIBLE_TIME_ISSET_ID, value);
  }

  public long getNext_version() {
    return this.next_version;
  }

  public TPartitionMeta setNext_version(long next_version) {
    this.next_version = next_version;
    setNext_versionIsSet(true);
    return this;
  }

  public void unsetNext_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEXT_VERSION_ISSET_ID);
  }

  /** Returns true if field next_version is set (has been assigned a value) and false otherwise */
  public boolean isSetNext_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEXT_VERSION_ISSET_ID);
  }

  public void setNext_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEXT_VERSION_ISSET_ID, value);
  }

  public long getNext_version_hash() {
    return this.next_version_hash;
  }

  public TPartitionMeta setNext_version_hash(long next_version_hash) {
    this.next_version_hash = next_version_hash;
    setNext_version_hashIsSet(true);
    return this;
  }

  public void unsetNext_version_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEXT_VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field next_version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetNext_version_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEXT_VERSION_HASH_ISSET_ID);
  }

  public void setNext_version_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEXT_VERSION_HASH_ISSET_ID, value);
  }

  public boolean isIs_temp() {
    return this.is_temp;
  }

  public TPartitionMeta setIs_temp(boolean is_temp) {
    this.is_temp = is_temp;
    setIs_tempIsSet(true);
    return this;
  }

  public void unsetIs_temp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_TEMP_ISSET_ID);
  }

  /** Returns true if field is_temp is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_temp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_TEMP_ISSET_ID);
  }

  public void setIs_tempIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_TEMP_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((java.lang.Long)value);
      }
      break;

    case PARTITION_NAME:
      if (value == null) {
        unsetPartition_name();
      } else {
        setPartition_name((java.lang.String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.String)value);
      }
      break;

    case COMMIT_VERSION_HASH:
      if (value == null) {
        unsetCommit_version_hash();
      } else {
        setCommit_version_hash((java.lang.Long)value);
      }
      break;

    case VISIBLE_VERSION:
      if (value == null) {
        unsetVisible_version();
      } else {
        setVisible_version((java.lang.Long)value);
      }
      break;

    case VISIBLE_VERSION_HASH:
      if (value == null) {
        unsetVisible_version_hash();
      } else {
        setVisible_version_hash((java.lang.Long)value);
      }
      break;

    case VISIBLE_TIME:
      if (value == null) {
        unsetVisible_time();
      } else {
        setVisible_time((java.lang.Long)value);
      }
      break;

    case NEXT_VERSION:
      if (value == null) {
        unsetNext_version();
      } else {
        setNext_version((java.lang.Long)value);
      }
      break;

    case NEXT_VERSION_HASH:
      if (value == null) {
        unsetNext_version_hash();
      } else {
        setNext_version_hash((java.lang.Long)value);
      }
      break;

    case IS_TEMP:
      if (value == null) {
        unsetIs_temp();
      } else {
        setIs_temp((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTITION_ID:
      return getPartition_id();

    case PARTITION_NAME:
      return getPartition_name();

    case STATE:
      return getState();

    case COMMIT_VERSION_HASH:
      return getCommit_version_hash();

    case VISIBLE_VERSION:
      return getVisible_version();

    case VISIBLE_VERSION_HASH:
      return getVisible_version_hash();

    case VISIBLE_TIME:
      return getVisible_time();

    case NEXT_VERSION:
      return getNext_version();

    case NEXT_VERSION_HASH:
      return getNext_version_hash();

    case IS_TEMP:
      return isIs_temp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PARTITION_ID:
      return isSetPartition_id();
    case PARTITION_NAME:
      return isSetPartition_name();
    case STATE:
      return isSetState();
    case COMMIT_VERSION_HASH:
      return isSetCommit_version_hash();
    case VISIBLE_VERSION:
      return isSetVisible_version();
    case VISIBLE_VERSION_HASH:
      return isSetVisible_version_hash();
    case VISIBLE_TIME:
      return isSetVisible_time();
    case NEXT_VERSION:
      return isSetNext_version();
    case NEXT_VERSION_HASH:
      return isSetNext_version_hash();
    case IS_TEMP:
      return isSetIs_temp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TPartitionMeta)
      return this.equals((TPartitionMeta)that);
    return false;
  }

  public boolean equals(TPartitionMeta that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_partition_id = true && this.isSetPartition_id();
    boolean that_present_partition_id = true && that.isSetPartition_id();
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_partition_name = true && this.isSetPartition_name();
    boolean that_present_partition_name = true && that.isSetPartition_name();
    if (this_present_partition_name || that_present_partition_name) {
      if (!(this_present_partition_name && that_present_partition_name))
        return false;
      if (!this.partition_name.equals(that.partition_name))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_commit_version_hash = true && this.isSetCommit_version_hash();
    boolean that_present_commit_version_hash = true && that.isSetCommit_version_hash();
    if (this_present_commit_version_hash || that_present_commit_version_hash) {
      if (!(this_present_commit_version_hash && that_present_commit_version_hash))
        return false;
      if (this.commit_version_hash != that.commit_version_hash)
        return false;
    }

    boolean this_present_visible_version = true && this.isSetVisible_version();
    boolean that_present_visible_version = true && that.isSetVisible_version();
    if (this_present_visible_version || that_present_visible_version) {
      if (!(this_present_visible_version && that_present_visible_version))
        return false;
      if (this.visible_version != that.visible_version)
        return false;
    }

    boolean this_present_visible_version_hash = true && this.isSetVisible_version_hash();
    boolean that_present_visible_version_hash = true && that.isSetVisible_version_hash();
    if (this_present_visible_version_hash || that_present_visible_version_hash) {
      if (!(this_present_visible_version_hash && that_present_visible_version_hash))
        return false;
      if (this.visible_version_hash != that.visible_version_hash)
        return false;
    }

    boolean this_present_visible_time = true && this.isSetVisible_time();
    boolean that_present_visible_time = true && that.isSetVisible_time();
    if (this_present_visible_time || that_present_visible_time) {
      if (!(this_present_visible_time && that_present_visible_time))
        return false;
      if (this.visible_time != that.visible_time)
        return false;
    }

    boolean this_present_next_version = true && this.isSetNext_version();
    boolean that_present_next_version = true && that.isSetNext_version();
    if (this_present_next_version || that_present_next_version) {
      if (!(this_present_next_version && that_present_next_version))
        return false;
      if (this.next_version != that.next_version)
        return false;
    }

    boolean this_present_next_version_hash = true && this.isSetNext_version_hash();
    boolean that_present_next_version_hash = true && that.isSetNext_version_hash();
    if (this_present_next_version_hash || that_present_next_version_hash) {
      if (!(this_present_next_version_hash && that_present_next_version_hash))
        return false;
      if (this.next_version_hash != that.next_version_hash)
        return false;
    }

    boolean this_present_is_temp = true && this.isSetIs_temp();
    boolean that_present_is_temp = true && that.isSetIs_temp();
    if (this_present_is_temp || that_present_is_temp) {
      if (!(this_present_is_temp && that_present_is_temp))
        return false;
      if (this.is_temp != that.is_temp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPartition_id()) ? 131071 : 524287);
    if (isSetPartition_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_id);

    hashCode = hashCode * 8191 + ((isSetPartition_name()) ? 131071 : 524287);
    if (isSetPartition_name())
      hashCode = hashCode * 8191 + partition_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommit_version_hash()) ? 131071 : 524287);
    if (isSetCommit_version_hash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(commit_version_hash);

    hashCode = hashCode * 8191 + ((isSetVisible_version()) ? 131071 : 524287);
    if (isSetVisible_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(visible_version);

    hashCode = hashCode * 8191 + ((isSetVisible_version_hash()) ? 131071 : 524287);
    if (isSetVisible_version_hash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(visible_version_hash);

    hashCode = hashCode * 8191 + ((isSetVisible_time()) ? 131071 : 524287);
    if (isSetVisible_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(visible_time);

    hashCode = hashCode * 8191 + ((isSetNext_version()) ? 131071 : 524287);
    if (isSetNext_version())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(next_version);

    hashCode = hashCode * 8191 + ((isSetNext_version_hash()) ? 131071 : 524287);
    if (isSetNext_version_hash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(next_version_hash);

    hashCode = hashCode * 8191 + ((isSetIs_temp()) ? 131071 : 524287);
    if (isSetIs_temp())
      hashCode = hashCode * 8191 + ((is_temp) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TPartitionMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPartition_id(), other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_name(), other.isSetPartition_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_name, other.partition_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCommit_version_hash(), other.isSetCommit_version_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommit_version_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commit_version_hash, other.commit_version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVisible_version(), other.isSetVisible_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisible_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visible_version, other.visible_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVisible_version_hash(), other.isSetVisible_version_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisible_version_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visible_version_hash, other.visible_version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVisible_time(), other.isSetVisible_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisible_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visible_time, other.visible_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNext_version(), other.isSetNext_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNext_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.next_version, other.next_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNext_version_hash(), other.isSetNext_version_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNext_version_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.next_version_hash, other.next_version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_temp(), other.isSetIs_temp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_temp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_temp, other.is_temp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPartitionMeta(");
    boolean first = true;

    if (isSetPartition_id()) {
      sb.append("partition_id:");
      sb.append(this.partition_id);
      first = false;
    }
    if (isSetPartition_name()) {
      if (!first) sb.append(", ");
      sb.append("partition_name:");
      if (this.partition_name == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_name);
      }
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetCommit_version_hash()) {
      if (!first) sb.append(", ");
      sb.append("commit_version_hash:");
      sb.append(this.commit_version_hash);
      first = false;
    }
    if (isSetVisible_version()) {
      if (!first) sb.append(", ");
      sb.append("visible_version:");
      sb.append(this.visible_version);
      first = false;
    }
    if (isSetVisible_version_hash()) {
      if (!first) sb.append(", ");
      sb.append("visible_version_hash:");
      sb.append(this.visible_version_hash);
      first = false;
    }
    if (isSetVisible_time()) {
      if (!first) sb.append(", ");
      sb.append("visible_time:");
      sb.append(this.visible_time);
      first = false;
    }
    if (isSetNext_version()) {
      if (!first) sb.append(", ");
      sb.append("next_version:");
      sb.append(this.next_version);
      first = false;
    }
    if (isSetNext_version_hash()) {
      if (!first) sb.append(", ");
      sb.append("next_version_hash:");
      sb.append(this.next_version_hash);
      first = false;
    }
    if (isSetIs_temp()) {
      if (!first) sb.append(", ");
      sb.append("is_temp:");
      sb.append(this.is_temp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPartitionMetaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPartitionMetaStandardScheme getScheme() {
      return new TPartitionMetaStandardScheme();
    }
  }

  private static class TPartitionMetaStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPartitionMeta> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TPartitionMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTITION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partition_name = iprot.readString();
              struct.setPartition_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMIT_VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commit_version_hash = iprot.readI64();
              struct.setCommit_version_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VISIBLE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.visible_version = iprot.readI64();
              struct.setVisible_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VISIBLE_VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.visible_version_hash = iprot.readI64();
              struct.setVisible_version_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VISIBLE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.visible_time = iprot.readI64();
              struct.setVisible_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NEXT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.next_version = iprot.readI64();
              struct.setNext_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NEXT_VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.next_version_hash = iprot.readI64();
              struct.setNext_version_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_TEMP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_temp = iprot.readBool();
              struct.setIs_tempIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TPartitionMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPartition_id()) {
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI64(struct.partition_id);
        oprot.writeFieldEnd();
      }
      if (struct.partition_name != null) {
        if (struct.isSetPartition_name()) {
          oprot.writeFieldBegin(PARTITION_NAME_FIELD_DESC);
          oprot.writeString(struct.partition_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCommit_version_hash()) {
        oprot.writeFieldBegin(COMMIT_VERSION_HASH_FIELD_DESC);
        oprot.writeI64(struct.commit_version_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVisible_version()) {
        oprot.writeFieldBegin(VISIBLE_VERSION_FIELD_DESC);
        oprot.writeI64(struct.visible_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVisible_version_hash()) {
        oprot.writeFieldBegin(VISIBLE_VERSION_HASH_FIELD_DESC);
        oprot.writeI64(struct.visible_version_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVisible_time()) {
        oprot.writeFieldBegin(VISIBLE_TIME_FIELD_DESC);
        oprot.writeI64(struct.visible_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNext_version()) {
        oprot.writeFieldBegin(NEXT_VERSION_FIELD_DESC);
        oprot.writeI64(struct.next_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNext_version_hash()) {
        oprot.writeFieldBegin(NEXT_VERSION_HASH_FIELD_DESC);
        oprot.writeI64(struct.next_version_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_temp()) {
        oprot.writeFieldBegin(IS_TEMP_FIELD_DESC);
        oprot.writeBool(struct.is_temp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPartitionMetaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPartitionMetaTupleScheme getScheme() {
      return new TPartitionMetaTupleScheme();
    }
  }

  private static class TPartitionMetaTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPartitionMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPartitionMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPartition_id()) {
        optionals.set(0);
      }
      if (struct.isSetPartition_name()) {
        optionals.set(1);
      }
      if (struct.isSetState()) {
        optionals.set(2);
      }
      if (struct.isSetCommit_version_hash()) {
        optionals.set(3);
      }
      if (struct.isSetVisible_version()) {
        optionals.set(4);
      }
      if (struct.isSetVisible_version_hash()) {
        optionals.set(5);
      }
      if (struct.isSetVisible_time()) {
        optionals.set(6);
      }
      if (struct.isSetNext_version()) {
        optionals.set(7);
      }
      if (struct.isSetNext_version_hash()) {
        optionals.set(8);
      }
      if (struct.isSetIs_temp()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPartition_id()) {
        oprot.writeI64(struct.partition_id);
      }
      if (struct.isSetPartition_name()) {
        oprot.writeString(struct.partition_name);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetCommit_version_hash()) {
        oprot.writeI64(struct.commit_version_hash);
      }
      if (struct.isSetVisible_version()) {
        oprot.writeI64(struct.visible_version);
      }
      if (struct.isSetVisible_version_hash()) {
        oprot.writeI64(struct.visible_version_hash);
      }
      if (struct.isSetVisible_time()) {
        oprot.writeI64(struct.visible_time);
      }
      if (struct.isSetNext_version()) {
        oprot.writeI64(struct.next_version);
      }
      if (struct.isSetNext_version_hash()) {
        oprot.writeI64(struct.next_version_hash);
      }
      if (struct.isSetIs_temp()) {
        oprot.writeBool(struct.is_temp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPartitionMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.partition_id = iprot.readI64();
        struct.setPartition_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partition_name = iprot.readString();
        struct.setPartition_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.commit_version_hash = iprot.readI64();
        struct.setCommit_version_hashIsSet(true);
      }
      if (incoming.get(4)) {
        struct.visible_version = iprot.readI64();
        struct.setVisible_versionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.visible_version_hash = iprot.readI64();
        struct.setVisible_version_hashIsSet(true);
      }
      if (incoming.get(6)) {
        struct.visible_time = iprot.readI64();
        struct.setVisible_timeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.next_version = iprot.readI64();
        struct.setNext_versionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.next_version_hash = iprot.readI64();
        struct.setNext_version_hashIsSet(true);
      }
      if (incoming.get(9)) {
        struct.is_temp = iprot.readBool();
        struct.setIs_tempIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

