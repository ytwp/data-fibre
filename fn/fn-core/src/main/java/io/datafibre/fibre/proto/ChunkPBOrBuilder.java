// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

package io.datafibre.fibre.proto;

public interface ChunkPBOrBuilder extends
    // @@protoc_insertion_point(interface_extends:starrocks.ChunkPB)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Content for this chunk.
   * </pre>
   *
   * <code>optional bytes data = 1;</code>
   * @return Whether the data field is set.
   */
  boolean hasData();
  /**
   * <pre>
   * Content for this chunk.
   * </pre>
   *
   * <code>optional bytes data = 1;</code>
   * @return The data.
   */
  com.google.protobuf.ByteString getData();

  /**
   * <code>optional .starrocks.CompressionTypePB compress_type = 2;</code>
   * @return Whether the compressType field is set.
   */
  boolean hasCompressType();
  /**
   * <code>optional .starrocks.CompressionTypePB compress_type = 2;</code>
   * @return The compressType.
   */
  io.datafibre.fibre.proto.CompressionTypePB getCompressType();

  /**
   * <pre>
   * Helper to allocate memory to decompress compressed data.
   * </pre>
   *
   * <code>optional int64 uncompressed_size = 3;</code>
   * @return Whether the uncompressedSize field is set.
   */
  boolean hasUncompressedSize();
  /**
   * <pre>
   * Helper to allocate memory to decompress compressed data.
   * </pre>
   *
   * <code>optional int64 uncompressed_size = 3;</code>
   * @return The uncompressedSize.
   */
  long getUncompressedSize();

  /**
   * <pre>
   * slot id to column id map
   * </pre>
   *
   * <code>repeated int32 slot_id_map = 4;</code>
   * @return A list containing the slotIdMap.
   */
  java.util.List<java.lang.Integer> getSlotIdMapList();
  /**
   * <pre>
   * slot id to column id map
   * </pre>
   *
   * <code>repeated int32 slot_id_map = 4;</code>
   * @return The count of slotIdMap.
   */
  int getSlotIdMapCount();
  /**
   * <pre>
   * slot id to column id map
   * </pre>
   *
   * <code>repeated int32 slot_id_map = 4;</code>
   * @param index The index of the element to return.
   * @return The slotIdMap at the given index.
   */
  int getSlotIdMap(int index);

  /**
   * <pre>
   * column is nullable
   * </pre>
   *
   * <code>repeated bool is_nulls = 5;</code>
   * @return A list containing the isNulls.
   */
  java.util.List<java.lang.Boolean> getIsNullsList();
  /**
   * <pre>
   * column is nullable
   * </pre>
   *
   * <code>repeated bool is_nulls = 5;</code>
   * @return The count of isNulls.
   */
  int getIsNullsCount();
  /**
   * <pre>
   * column is nullable
   * </pre>
   *
   * <code>repeated bool is_nulls = 5;</code>
   * @param index The index of the element to return.
   * @return The isNulls at the given index.
   */
  boolean getIsNulls(int index);

  /**
   * <pre>
   * column is const
   * </pre>
   *
   * <code>repeated bool is_consts = 6;</code>
   * @return A list containing the isConsts.
   */
  java.util.List<java.lang.Boolean> getIsConstsList();
  /**
   * <pre>
   * column is const
   * </pre>
   *
   * <code>repeated bool is_consts = 6;</code>
   * @return The count of isConsts.
   */
  int getIsConstsCount();
  /**
   * <pre>
   * column is const
   * </pre>
   *
   * <code>repeated bool is_consts = 6;</code>
   * @param index The index of the element to return.
   * @return The isConsts at the given index.
   */
  boolean getIsConsts(int index);

  /**
   * <pre>
   * tuple id to column id map
   * </pre>
   *
   * <code>repeated int32 tuple_id_map = 7;</code>
   * @return A list containing the tupleIdMap.
   */
  java.util.List<java.lang.Integer> getTupleIdMapList();
  /**
   * <pre>
   * tuple id to column id map
   * </pre>
   *
   * <code>repeated int32 tuple_id_map = 7;</code>
   * @return The count of tupleIdMap.
   */
  int getTupleIdMapCount();
  /**
   * <pre>
   * tuple id to column id map
   * </pre>
   *
   * <code>repeated int32 tuple_id_map = 7;</code>
   * @param index The index of the element to return.
   * @return The tupleIdMap at the given index.
   */
  int getTupleIdMap(int index);

  /**
   * <pre>
   * used to record size using brpc attachment
   * </pre>
   *
   * <code>optional int64 data_size = 8;</code>
   * @return Whether the dataSize field is set.
   */
  boolean hasDataSize();
  /**
   * <pre>
   * used to record size using brpc attachment
   * </pre>
   *
   * <code>optional int64 data_size = 8;</code>
   * @return The dataSize.
   */
  long getDataSize();

  /**
   * <pre>
   * For some object column types like bitmap/hll/percentile.
   * we may estimate larger serialized_size but actually don't use that much space.
   * </pre>
   *
   * <code>optional int64 serialized_size = 9;</code>
   * @return Whether the serializedSize field is set.
   */
  boolean hasSerializedSize_();
  /**
   * <pre>
   * For some object column types like bitmap/hll/percentile.
   * we may estimate larger serialized_size but actually don't use that much space.
   * </pre>
   *
   * <code>optional int64 serialized_size = 9;</code>
   * @return The serializedSize.
   */
  long getSerializedSize_();

  /**
   * <pre>
   * the encode level for data columns, during upgrade, this must be 0.
   * </pre>
   *
   * <code>repeated int32 encode_level = 10;</code>
   * @return A list containing the encodeLevel.
   */
  java.util.List<java.lang.Integer> getEncodeLevelList();
  /**
   * <pre>
   * the encode level for data columns, during upgrade, this must be 0.
   * </pre>
   *
   * <code>repeated int32 encode_level = 10;</code>
   * @return The count of encodeLevel.
   */
  int getEncodeLevelCount();
  /**
   * <pre>
   * the encode level for data columns, during upgrade, this must be 0.
   * </pre>
   *
   * <code>repeated int32 encode_level = 10;</code>
   * @param index The index of the element to return.
   * @return The encodeLevel at the given index.
   */
  int getEncodeLevel(int index);

  /**
   * <pre>
   * chunk's extra data meta.
   * </pre>
   *
   * <code>repeated .starrocks.ChunkExtraColumnsMetaPB extra_data_metas = 11;</code>
   */
  java.util.List<io.datafibre.fibre.proto.ChunkExtraColumnsMetaPB>
      getExtraDataMetasList();
  /**
   * <pre>
   * chunk's extra data meta.
   * </pre>
   *
   * <code>repeated .starrocks.ChunkExtraColumnsMetaPB extra_data_metas = 11;</code>
   */
  io.datafibre.fibre.proto.ChunkExtraColumnsMetaPB getExtraDataMetas(int index);
  /**
   * <pre>
   * chunk's extra data meta.
   * </pre>
   *
   * <code>repeated .starrocks.ChunkExtraColumnsMetaPB extra_data_metas = 11;</code>
   */
  int getExtraDataMetasCount();
  /**
   * <pre>
   * chunk's extra data meta.
   * </pre>
   *
   * <code>repeated .starrocks.ChunkExtraColumnsMetaPB extra_data_metas = 11;</code>
   */
  java.util.List<? extends io.datafibre.fibre.proto.ChunkExtraColumnsMetaPBOrBuilder>
      getExtraDataMetasOrBuilderList();
  /**
   * <pre>
   * chunk's extra data meta.
   * </pre>
   *
   * <code>repeated .starrocks.ChunkExtraColumnsMetaPB extra_data_metas = 11;</code>
   */
  io.datafibre.fibre.proto.ChunkExtraColumnsMetaPBOrBuilder getExtraDataMetasOrBuilder(
      int index);
}
