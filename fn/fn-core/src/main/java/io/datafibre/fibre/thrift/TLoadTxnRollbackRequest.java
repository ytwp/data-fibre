/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.datafibre.fibre.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2024-02-22")
public class TLoadTxnRollbackRequest implements org.apache.thrift.TBase<TLoadTxnRollbackRequest, TLoadTxnRollbackRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TLoadTxnRollbackRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLoadTxnRollbackRequest");

  private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("passwd", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("tbl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ip", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField AUTH_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("auth_code", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField TXN_COMMIT_ATTACHMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("txnCommitAttachment", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField FAIL_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("failInfos", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField COMMIT_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("commitInfos", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TLoadTxnRollbackRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TLoadTxnRollbackRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String cluster; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String user; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String passwd; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tbl; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String user_ip; // optional
  public long txnId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String reason; // optional
  public long auth_code; // optional
  public @org.apache.thrift.annotation.Nullable TTxnCommitAttachment txnCommitAttachment; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TTabletFailInfo> failInfos; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TTabletCommitInfo> commitInfos; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLUSTER((short)1, "cluster"),
    USER((short)2, "user"),
    PASSWD((short)3, "passwd"),
    DB((short)4, "db"),
    TBL((short)5, "tbl"),
    USER_IP((short)6, "user_ip"),
    TXN_ID((short)7, "txnId"),
    REASON((short)8, "reason"),
    AUTH_CODE((short)9, "auth_code"),
    TXN_COMMIT_ATTACHMENT((short)10, "txnCommitAttachment"),
    FAIL_INFOS((short)11, "failInfos"),
    COMMIT_INFOS((short)12, "commitInfos");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLUSTER
          return CLUSTER;
        case 2: // USER
          return USER;
        case 3: // PASSWD
          return PASSWD;
        case 4: // DB
          return DB;
        case 5: // TBL
          return TBL;
        case 6: // USER_IP
          return USER_IP;
        case 7: // TXN_ID
          return TXN_ID;
        case 8: // REASON
          return REASON;
        case 9: // AUTH_CODE
          return AUTH_CODE;
        case 10: // TXN_COMMIT_ATTACHMENT
          return TXN_COMMIT_ATTACHMENT;
        case 11: // FAIL_INFOS
          return FAIL_INFOS;
        case 12: // COMMIT_INFOS
          return COMMIT_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TXNID_ISSET_ID = 0;
  private static final int __AUTH_CODE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CLUSTER,_Fields.USER_IP,_Fields.REASON,_Fields.AUTH_CODE,_Fields.TXN_COMMIT_ATTACHMENT,_Fields.FAIL_INFOS,_Fields.COMMIT_INFOS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWD, new org.apache.thrift.meta_data.FieldMetaData("passwd", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TBL, new org.apache.thrift.meta_data.FieldMetaData("tbl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IP, new org.apache.thrift.meta_data.FieldMetaData("user_ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTH_CODE, new org.apache.thrift.meta_data.FieldMetaData("auth_code", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TXN_COMMIT_ATTACHMENT, new org.apache.thrift.meta_data.FieldMetaData("txnCommitAttachment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTxnCommitAttachment.class)));
    tmpMap.put(_Fields.FAIL_INFOS, new org.apache.thrift.meta_data.FieldMetaData("failInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TTabletFailInfo.class))));
    tmpMap.put(_Fields.COMMIT_INFOS, new org.apache.thrift.meta_data.FieldMetaData("commitInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.datafibre.fibre.thrift.TTabletCommitInfo.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLoadTxnRollbackRequest.class, metaDataMap);
  }

  public TLoadTxnRollbackRequest() {
  }

  public TLoadTxnRollbackRequest(
    java.lang.String user,
    java.lang.String passwd,
    java.lang.String db,
    java.lang.String tbl,
    long txnId)
  {
    this();
    this.user = user;
    this.passwd = passwd;
    this.db = db;
    this.tbl = tbl;
    this.txnId = txnId;
    setTxnIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLoadTxnRollbackRequest(TLoadTxnRollbackRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCluster()) {
      this.cluster = other.cluster;
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetPasswd()) {
      this.passwd = other.passwd;
    }
    if (other.isSetDb()) {
      this.db = other.db;
    }
    if (other.isSetTbl()) {
      this.tbl = other.tbl;
    }
    if (other.isSetUser_ip()) {
      this.user_ip = other.user_ip;
    }
    this.txnId = other.txnId;
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    this.auth_code = other.auth_code;
    if (other.isSetTxnCommitAttachment()) {
      this.txnCommitAttachment = new TTxnCommitAttachment(other.txnCommitAttachment);
    }
    if (other.isSetFailInfos()) {
      java.util.List<io.datafibre.fibre.thrift.TTabletFailInfo> __this__failInfos = new java.util.ArrayList<io.datafibre.fibre.thrift.TTabletFailInfo>(other.failInfos.size());
      for (io.datafibre.fibre.thrift.TTabletFailInfo other_element : other.failInfos) {
        __this__failInfos.add(new io.datafibre.fibre.thrift.TTabletFailInfo(other_element));
      }
      this.failInfos = __this__failInfos;
    }
    if (other.isSetCommitInfos()) {
      java.util.List<io.datafibre.fibre.thrift.TTabletCommitInfo> __this__commitInfos = new java.util.ArrayList<io.datafibre.fibre.thrift.TTabletCommitInfo>(other.commitInfos.size());
      for (io.datafibre.fibre.thrift.TTabletCommitInfo other_element : other.commitInfos) {
        __this__commitInfos.add(new io.datafibre.fibre.thrift.TTabletCommitInfo(other_element));
      }
      this.commitInfos = __this__commitInfos;
    }
  }

  @Override
  public TLoadTxnRollbackRequest deepCopy() {
    return new TLoadTxnRollbackRequest(this);
  }

  @Override
  public void clear() {
    this.cluster = null;
    this.user = null;
    this.passwd = null;
    this.db = null;
    this.tbl = null;
    this.user_ip = null;
    setTxnIdIsSet(false);
    this.txnId = 0;
    this.reason = null;
    setAuth_codeIsSet(false);
    this.auth_code = 0;
    this.txnCommitAttachment = null;
    this.failInfos = null;
    this.commitInfos = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCluster() {
    return this.cluster;
  }

  public TLoadTxnRollbackRequest setCluster(@org.apache.thrift.annotation.Nullable java.lang.String cluster) {
    this.cluster = cluster;
    return this;
  }

  public void unsetCluster() {
    this.cluster = null;
  }

  /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster() {
    return this.cluster != null;
  }

  public void setClusterIsSet(boolean value) {
    if (!value) {
      this.cluster = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser() {
    return this.user;
  }

  public TLoadTxnRollbackRequest setUser(@org.apache.thrift.annotation.Nullable java.lang.String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPasswd() {
    return this.passwd;
  }

  public TLoadTxnRollbackRequest setPasswd(@org.apache.thrift.annotation.Nullable java.lang.String passwd) {
    this.passwd = passwd;
    return this;
  }

  public void unsetPasswd() {
    this.passwd = null;
  }

  /** Returns true if field passwd is set (has been assigned a value) and false otherwise */
  public boolean isSetPasswd() {
    return this.passwd != null;
  }

  public void setPasswdIsSet(boolean value) {
    if (!value) {
      this.passwd = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb() {
    return this.db;
  }

  public TLoadTxnRollbackRequest setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTbl() {
    return this.tbl;
  }

  public TLoadTxnRollbackRequest setTbl(@org.apache.thrift.annotation.Nullable java.lang.String tbl) {
    this.tbl = tbl;
    return this;
  }

  public void unsetTbl() {
    this.tbl = null;
  }

  /** Returns true if field tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetTbl() {
    return this.tbl != null;
  }

  public void setTblIsSet(boolean value) {
    if (!value) {
      this.tbl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser_ip() {
    return this.user_ip;
  }

  public TLoadTxnRollbackRequest setUser_ip(@org.apache.thrift.annotation.Nullable java.lang.String user_ip) {
    this.user_ip = user_ip;
    return this;
  }

  public void unsetUser_ip() {
    this.user_ip = null;
  }

  /** Returns true if field user_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_ip() {
    return this.user_ip != null;
  }

  public void setUser_ipIsSet(boolean value) {
    if (!value) {
      this.user_ip = null;
    }
  }

  public long getTxnId() {
    return this.txnId;
  }

  public TLoadTxnRollbackRequest setTxnId(long txnId) {
    this.txnId = txnId;
    setTxnIdIsSet(true);
    return this;
  }

  public void unsetTxnId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
  }

  /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
  public boolean isSetTxnId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
  }

  public void setTxnIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getReason() {
    return this.reason;
  }

  public TLoadTxnRollbackRequest setReason(@org.apache.thrift.annotation.Nullable java.lang.String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public long getAuth_code() {
    return this.auth_code;
  }

  public TLoadTxnRollbackRequest setAuth_code(long auth_code) {
    this.auth_code = auth_code;
    setAuth_codeIsSet(true);
    return this;
  }

  public void unsetAuth_code() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTH_CODE_ISSET_ID);
  }

  /** Returns true if field auth_code is set (has been assigned a value) and false otherwise */
  public boolean isSetAuth_code() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTH_CODE_ISSET_ID);
  }

  public void setAuth_codeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTH_CODE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TTxnCommitAttachment getTxnCommitAttachment() {
    return this.txnCommitAttachment;
  }

  public TLoadTxnRollbackRequest setTxnCommitAttachment(@org.apache.thrift.annotation.Nullable TTxnCommitAttachment txnCommitAttachment) {
    this.txnCommitAttachment = txnCommitAttachment;
    return this;
  }

  public void unsetTxnCommitAttachment() {
    this.txnCommitAttachment = null;
  }

  /** Returns true if field txnCommitAttachment is set (has been assigned a value) and false otherwise */
  public boolean isSetTxnCommitAttachment() {
    return this.txnCommitAttachment != null;
  }

  public void setTxnCommitAttachmentIsSet(boolean value) {
    if (!value) {
      this.txnCommitAttachment = null;
    }
  }

  public int getFailInfosSize() {
    return (this.failInfos == null) ? 0 : this.failInfos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TTabletFailInfo> getFailInfosIterator() {
    return (this.failInfos == null) ? null : this.failInfos.iterator();
  }

  public void addToFailInfos(io.datafibre.fibre.thrift.TTabletFailInfo elem) {
    if (this.failInfos == null) {
      this.failInfos = new java.util.ArrayList<io.datafibre.fibre.thrift.TTabletFailInfo>();
    }
    this.failInfos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TTabletFailInfo> getFailInfos() {
    return this.failInfos;
  }

  public TLoadTxnRollbackRequest setFailInfos(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TTabletFailInfo> failInfos) {
    this.failInfos = failInfos;
    return this;
  }

  public void unsetFailInfos() {
    this.failInfos = null;
  }

  /** Returns true if field failInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetFailInfos() {
    return this.failInfos != null;
  }

  public void setFailInfosIsSet(boolean value) {
    if (!value) {
      this.failInfos = null;
    }
  }

  public int getCommitInfosSize() {
    return (this.commitInfos == null) ? 0 : this.commitInfos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<io.datafibre.fibre.thrift.TTabletCommitInfo> getCommitInfosIterator() {
    return (this.commitInfos == null) ? null : this.commitInfos.iterator();
  }

  public void addToCommitInfos(io.datafibre.fibre.thrift.TTabletCommitInfo elem) {
    if (this.commitInfos == null) {
      this.commitInfos = new java.util.ArrayList<io.datafibre.fibre.thrift.TTabletCommitInfo>();
    }
    this.commitInfos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<io.datafibre.fibre.thrift.TTabletCommitInfo> getCommitInfos() {
    return this.commitInfos;
  }

  public TLoadTxnRollbackRequest setCommitInfos(@org.apache.thrift.annotation.Nullable java.util.List<io.datafibre.fibre.thrift.TTabletCommitInfo> commitInfos) {
    this.commitInfos = commitInfos;
    return this;
  }

  public void unsetCommitInfos() {
    this.commitInfos = null;
  }

  /** Returns true if field commitInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitInfos() {
    return this.commitInfos != null;
  }

  public void setCommitInfosIsSet(boolean value) {
    if (!value) {
      this.commitInfos = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((java.lang.String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((java.lang.String)value);
      }
      break;

    case PASSWD:
      if (value == null) {
        unsetPasswd();
      } else {
        setPasswd((java.lang.String)value);
      }
      break;

    case DB:
      if (value == null) {
        unsetDb();
      } else {
        setDb((java.lang.String)value);
      }
      break;

    case TBL:
      if (value == null) {
        unsetTbl();
      } else {
        setTbl((java.lang.String)value);
      }
      break;

    case USER_IP:
      if (value == null) {
        unsetUser_ip();
      } else {
        setUser_ip((java.lang.String)value);
      }
      break;

    case TXN_ID:
      if (value == null) {
        unsetTxnId();
      } else {
        setTxnId((java.lang.Long)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((java.lang.String)value);
      }
      break;

    case AUTH_CODE:
      if (value == null) {
        unsetAuth_code();
      } else {
        setAuth_code((java.lang.Long)value);
      }
      break;

    case TXN_COMMIT_ATTACHMENT:
      if (value == null) {
        unsetTxnCommitAttachment();
      } else {
        setTxnCommitAttachment((TTxnCommitAttachment)value);
      }
      break;

    case FAIL_INFOS:
      if (value == null) {
        unsetFailInfos();
      } else {
        setFailInfos((java.util.List<io.datafibre.fibre.thrift.TTabletFailInfo>)value);
      }
      break;

    case COMMIT_INFOS:
      if (value == null) {
        unsetCommitInfos();
      } else {
        setCommitInfos((java.util.List<io.datafibre.fibre.thrift.TTabletCommitInfo>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CLUSTER:
      return getCluster();

    case USER:
      return getUser();

    case PASSWD:
      return getPasswd();

    case DB:
      return getDb();

    case TBL:
      return getTbl();

    case USER_IP:
      return getUser_ip();

    case TXN_ID:
      return getTxnId();

    case REASON:
      return getReason();

    case AUTH_CODE:
      return getAuth_code();

    case TXN_COMMIT_ATTACHMENT:
      return getTxnCommitAttachment();

    case FAIL_INFOS:
      return getFailInfos();

    case COMMIT_INFOS:
      return getCommitInfos();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CLUSTER:
      return isSetCluster();
    case USER:
      return isSetUser();
    case PASSWD:
      return isSetPasswd();
    case DB:
      return isSetDb();
    case TBL:
      return isSetTbl();
    case USER_IP:
      return isSetUser_ip();
    case TXN_ID:
      return isSetTxnId();
    case REASON:
      return isSetReason();
    case AUTH_CODE:
      return isSetAuth_code();
    case TXN_COMMIT_ATTACHMENT:
      return isSetTxnCommitAttachment();
    case FAIL_INFOS:
      return isSetFailInfos();
    case COMMIT_INFOS:
      return isSetCommitInfos();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TLoadTxnRollbackRequest)
      return this.equals((TLoadTxnRollbackRequest)that);
    return false;
  }

  public boolean equals(TLoadTxnRollbackRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cluster = true && this.isSetCluster();
    boolean that_present_cluster = true && that.isSetCluster();
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (!this.cluster.equals(that.cluster))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_passwd = true && this.isSetPasswd();
    boolean that_present_passwd = true && that.isSetPasswd();
    if (this_present_passwd || that_present_passwd) {
      if (!(this_present_passwd && that_present_passwd))
        return false;
      if (!this.passwd.equals(that.passwd))
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_tbl = true && this.isSetTbl();
    boolean that_present_tbl = true && that.isSetTbl();
    if (this_present_tbl || that_present_tbl) {
      if (!(this_present_tbl && that_present_tbl))
        return false;
      if (!this.tbl.equals(that.tbl))
        return false;
    }

    boolean this_present_user_ip = true && this.isSetUser_ip();
    boolean that_present_user_ip = true && that.isSetUser_ip();
    if (this_present_user_ip || that_present_user_ip) {
      if (!(this_present_user_ip && that_present_user_ip))
        return false;
      if (!this.user_ip.equals(that.user_ip))
        return false;
    }

    boolean this_present_txnId = true;
    boolean that_present_txnId = true;
    if (this_present_txnId || that_present_txnId) {
      if (!(this_present_txnId && that_present_txnId))
        return false;
      if (this.txnId != that.txnId)
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_auth_code = true && this.isSetAuth_code();
    boolean that_present_auth_code = true && that.isSetAuth_code();
    if (this_present_auth_code || that_present_auth_code) {
      if (!(this_present_auth_code && that_present_auth_code))
        return false;
      if (this.auth_code != that.auth_code)
        return false;
    }

    boolean this_present_txnCommitAttachment = true && this.isSetTxnCommitAttachment();
    boolean that_present_txnCommitAttachment = true && that.isSetTxnCommitAttachment();
    if (this_present_txnCommitAttachment || that_present_txnCommitAttachment) {
      if (!(this_present_txnCommitAttachment && that_present_txnCommitAttachment))
        return false;
      if (!this.txnCommitAttachment.equals(that.txnCommitAttachment))
        return false;
    }

    boolean this_present_failInfos = true && this.isSetFailInfos();
    boolean that_present_failInfos = true && that.isSetFailInfos();
    if (this_present_failInfos || that_present_failInfos) {
      if (!(this_present_failInfos && that_present_failInfos))
        return false;
      if (!this.failInfos.equals(that.failInfos))
        return false;
    }

    boolean this_present_commitInfos = true && this.isSetCommitInfos();
    boolean that_present_commitInfos = true && that.isSetCommitInfos();
    if (this_present_commitInfos || that_present_commitInfos) {
      if (!(this_present_commitInfos && that_present_commitInfos))
        return false;
      if (!this.commitInfos.equals(that.commitInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCluster()) ? 131071 : 524287);
    if (isSetCluster())
      hashCode = hashCode * 8191 + cluster.hashCode();

    hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
    if (isSetUser())
      hashCode = hashCode * 8191 + user.hashCode();

    hashCode = hashCode * 8191 + ((isSetPasswd()) ? 131071 : 524287);
    if (isSetPasswd())
      hashCode = hashCode * 8191 + passwd.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
    if (isSetDb())
      hashCode = hashCode * 8191 + db.hashCode();

    hashCode = hashCode * 8191 + ((isSetTbl()) ? 131071 : 524287);
    if (isSetTbl())
      hashCode = hashCode * 8191 + tbl.hashCode();

    hashCode = hashCode * 8191 + ((isSetUser_ip()) ? 131071 : 524287);
    if (isSetUser_ip())
      hashCode = hashCode * 8191 + user_ip.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txnId);

    hashCode = hashCode * 8191 + ((isSetReason()) ? 131071 : 524287);
    if (isSetReason())
      hashCode = hashCode * 8191 + reason.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuth_code()) ? 131071 : 524287);
    if (isSetAuth_code())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(auth_code);

    hashCode = hashCode * 8191 + ((isSetTxnCommitAttachment()) ? 131071 : 524287);
    if (isSetTxnCommitAttachment())
      hashCode = hashCode * 8191 + txnCommitAttachment.hashCode();

    hashCode = hashCode * 8191 + ((isSetFailInfos()) ? 131071 : 524287);
    if (isSetFailInfos())
      hashCode = hashCode * 8191 + failInfos.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommitInfos()) ? 131071 : 524287);
    if (isSetCommitInfos())
      hashCode = hashCode * 8191 + commitInfos.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TLoadTxnRollbackRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCluster(), other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUser(), other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPasswd(), other.isSetPasswd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPasswd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwd, other.passwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb(), other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTbl(), other.isSetTbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbl, other.tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUser_ip(), other.isSetUser_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ip, other.user_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxnId(), other.isSetTxnId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxnId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReason(), other.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAuth_code(), other.isSetAuth_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuth_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth_code, other.auth_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxnCommitAttachment(), other.isSetTxnCommitAttachment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxnCommitAttachment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnCommitAttachment, other.txnCommitAttachment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFailInfos(), other.isSetFailInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failInfos, other.failInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCommitInfos(), other.isSetCommitInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitInfos, other.commitInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TLoadTxnRollbackRequest(");
    boolean first = true;

    if (isSetCluster()) {
      sb.append("cluster:");
      if (this.cluster == null) {
        sb.append("null");
      } else {
        sb.append(this.cluster);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passwd:");
    if (this.passwd == null) {
      sb.append("null");
    } else {
      sb.append(this.passwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("db:");
    if (this.db == null) {
      sb.append("null");
    } else {
      sb.append(this.db);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tbl:");
    if (this.tbl == null) {
      sb.append("null");
    } else {
      sb.append(this.tbl);
    }
    first = false;
    if (isSetUser_ip()) {
      if (!first) sb.append(", ");
      sb.append("user_ip:");
      if (this.user_ip == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ip);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("txnId:");
    sb.append(this.txnId);
    first = false;
    if (isSetReason()) {
      if (!first) sb.append(", ");
      sb.append("reason:");
      if (this.reason == null) {
        sb.append("null");
      } else {
        sb.append(this.reason);
      }
      first = false;
    }
    if (isSetAuth_code()) {
      if (!first) sb.append(", ");
      sb.append("auth_code:");
      sb.append(this.auth_code);
      first = false;
    }
    if (isSetTxnCommitAttachment()) {
      if (!first) sb.append(", ");
      sb.append("txnCommitAttachment:");
      if (this.txnCommitAttachment == null) {
        sb.append("null");
      } else {
        sb.append(this.txnCommitAttachment);
      }
      first = false;
    }
    if (isSetFailInfos()) {
      if (!first) sb.append(", ");
      sb.append("failInfos:");
      if (this.failInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.failInfos);
      }
      first = false;
    }
    if (isSetCommitInfos()) {
      if (!first) sb.append(", ");
      sb.append("commitInfos:");
      if (this.commitInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.commitInfos);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (user == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' was not present! Struct: " + toString());
    }
    if (passwd == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'passwd' was not present! Struct: " + toString());
    }
    if (db == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db' was not present! Struct: " + toString());
    }
    if (tbl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tbl' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'txnId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (txnCommitAttachment != null) {
      txnCommitAttachment.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLoadTxnRollbackRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TLoadTxnRollbackRequestStandardScheme getScheme() {
      return new TLoadTxnRollbackRequestStandardScheme();
    }
  }

  private static class TLoadTxnRollbackRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TLoadTxnRollbackRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TLoadTxnRollbackRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cluster = iprot.readString();
              struct.setClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passwd = iprot.readString();
              struct.setPasswdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tbl = iprot.readString();
              struct.setTblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_ip = iprot.readString();
              struct.setUser_ipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txnId = iprot.readI64();
              struct.setTxnIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AUTH_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.auth_code = iprot.readI64();
              struct.setAuth_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TXN_COMMIT_ATTACHMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.txnCommitAttachment = new TTxnCommitAttachment();
              struct.txnCommitAttachment.read(iprot);
              struct.setTxnCommitAttachmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FAIL_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list356 = iprot.readListBegin();
                struct.failInfos = new java.util.ArrayList<io.datafibre.fibre.thrift.TTabletFailInfo>(_list356.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTabletFailInfo _elem357;
                for (int _i358 = 0; _i358 < _list356.size; ++_i358)
                {
                  _elem357 = new io.datafibre.fibre.thrift.TTabletFailInfo();
                  _elem357.read(iprot);
                  struct.failInfos.add(_elem357);
                }
                iprot.readListEnd();
              }
              struct.setFailInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COMMIT_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list359 = iprot.readListBegin();
                struct.commitInfos = new java.util.ArrayList<io.datafibre.fibre.thrift.TTabletCommitInfo>(_list359.size);
                @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTabletCommitInfo _elem360;
                for (int _i361 = 0; _i361 < _list359.size; ++_i361)
                {
                  _elem360 = new io.datafibre.fibre.thrift.TTabletCommitInfo();
                  _elem360.read(iprot);
                  struct.commitInfos.add(_elem360);
                }
                iprot.readListEnd();
              }
              struct.setCommitInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTxnId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'txnId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TLoadTxnRollbackRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cluster != null) {
        if (struct.isSetCluster()) {
          oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
          oprot.writeString(struct.cluster);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(struct.user);
        oprot.writeFieldEnd();
      }
      if (struct.passwd != null) {
        oprot.writeFieldBegin(PASSWD_FIELD_DESC);
        oprot.writeString(struct.passwd);
        oprot.writeFieldEnd();
      }
      if (struct.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(struct.db);
        oprot.writeFieldEnd();
      }
      if (struct.tbl != null) {
        oprot.writeFieldBegin(TBL_FIELD_DESC);
        oprot.writeString(struct.tbl);
        oprot.writeFieldEnd();
      }
      if (struct.user_ip != null) {
        if (struct.isSetUser_ip()) {
          oprot.writeFieldBegin(USER_IP_FIELD_DESC);
          oprot.writeString(struct.user_ip);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
      oprot.writeI64(struct.txnId);
      oprot.writeFieldEnd();
      if (struct.reason != null) {
        if (struct.isSetReason()) {
          oprot.writeFieldBegin(REASON_FIELD_DESC);
          oprot.writeString(struct.reason);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAuth_code()) {
        oprot.writeFieldBegin(AUTH_CODE_FIELD_DESC);
        oprot.writeI64(struct.auth_code);
        oprot.writeFieldEnd();
      }
      if (struct.txnCommitAttachment != null) {
        if (struct.isSetTxnCommitAttachment()) {
          oprot.writeFieldBegin(TXN_COMMIT_ATTACHMENT_FIELD_DESC);
          struct.txnCommitAttachment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.failInfos != null) {
        if (struct.isSetFailInfos()) {
          oprot.writeFieldBegin(FAIL_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.failInfos.size()));
            for (io.datafibre.fibre.thrift.TTabletFailInfo _iter362 : struct.failInfos)
            {
              _iter362.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.commitInfos != null) {
        if (struct.isSetCommitInfos()) {
          oprot.writeFieldBegin(COMMIT_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.commitInfos.size()));
            for (io.datafibre.fibre.thrift.TTabletCommitInfo _iter363 : struct.commitInfos)
            {
              _iter363.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLoadTxnRollbackRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TLoadTxnRollbackRequestTupleScheme getScheme() {
      return new TLoadTxnRollbackRequestTupleScheme();
    }
  }

  private static class TLoadTxnRollbackRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TLoadTxnRollbackRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLoadTxnRollbackRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.user);
      oprot.writeString(struct.passwd);
      oprot.writeString(struct.db);
      oprot.writeString(struct.tbl);
      oprot.writeI64(struct.txnId);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCluster()) {
        optionals.set(0);
      }
      if (struct.isSetUser_ip()) {
        optionals.set(1);
      }
      if (struct.isSetReason()) {
        optionals.set(2);
      }
      if (struct.isSetAuth_code()) {
        optionals.set(3);
      }
      if (struct.isSetTxnCommitAttachment()) {
        optionals.set(4);
      }
      if (struct.isSetFailInfos()) {
        optionals.set(5);
      }
      if (struct.isSetCommitInfos()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetCluster()) {
        oprot.writeString(struct.cluster);
      }
      if (struct.isSetUser_ip()) {
        oprot.writeString(struct.user_ip);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetAuth_code()) {
        oprot.writeI64(struct.auth_code);
      }
      if (struct.isSetTxnCommitAttachment()) {
        struct.txnCommitAttachment.write(oprot);
      }
      if (struct.isSetFailInfos()) {
        {
          oprot.writeI32(struct.failInfos.size());
          for (io.datafibre.fibre.thrift.TTabletFailInfo _iter364 : struct.failInfos)
          {
            _iter364.write(oprot);
          }
        }
      }
      if (struct.isSetCommitInfos()) {
        {
          oprot.writeI32(struct.commitInfos.size());
          for (io.datafibre.fibre.thrift.TTabletCommitInfo _iter365 : struct.commitInfos)
          {
            _iter365.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLoadTxnRollbackRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.user = iprot.readString();
      struct.setUserIsSet(true);
      struct.passwd = iprot.readString();
      struct.setPasswdIsSet(true);
      struct.db = iprot.readString();
      struct.setDbIsSet(true);
      struct.tbl = iprot.readString();
      struct.setTblIsSet(true);
      struct.txnId = iprot.readI64();
      struct.setTxnIdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.cluster = iprot.readString();
        struct.setClusterIsSet(true);
      }
      if (incoming.get(1)) {
        struct.user_ip = iprot.readString();
        struct.setUser_ipIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(3)) {
        struct.auth_code = iprot.readI64();
        struct.setAuth_codeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.txnCommitAttachment = new TTxnCommitAttachment();
        struct.txnCommitAttachment.read(iprot);
        struct.setTxnCommitAttachmentIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list366 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.failInfos = new java.util.ArrayList<io.datafibre.fibre.thrift.TTabletFailInfo>(_list366.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTabletFailInfo _elem367;
          for (int _i368 = 0; _i368 < _list366.size; ++_i368)
          {
            _elem367 = new io.datafibre.fibre.thrift.TTabletFailInfo();
            _elem367.read(iprot);
            struct.failInfos.add(_elem367);
          }
        }
        struct.setFailInfosIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list369 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.commitInfos = new java.util.ArrayList<io.datafibre.fibre.thrift.TTabletCommitInfo>(_list369.size);
          @org.apache.thrift.annotation.Nullable io.datafibre.fibre.thrift.TTabletCommitInfo _elem370;
          for (int _i371 = 0; _i371 < _list369.size; ++_i371)
          {
            _elem370 = new io.datafibre.fibre.thrift.TTabletCommitInfo();
            _elem370.read(iprot);
            struct.commitInfos.add(_elem370);
          }
        }
        struct.setCommitInfosIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

